0x000000000018eb6d: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000005be13: adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000064be9: adc al, 0; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000018035f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001803c9: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000490a7: adc al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x7bf0d407], al; imul eax, dword ptr [rcx], 0; add byte ptr [rax - 0x7bf0cf07], al; ret 1; 
0x0000000000102a7f: adc al, 0; add byte ptr [rax], al; add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x00000000001141b4: adc al, 0; add byte ptr [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x0000000000114481: adc al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1144e0; ret; 
0x000000000009f8a8: adc al, 0; add rsp, 8; ret; 
0x000000000009fae9: adc al, 0; lea rdx, [rip + 0xe3fae]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f829: adc al, 0; lea rdx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f239: adc al, 0; lea rdx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e959: adc al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009f8a1: adc al, 0; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f863: adc al, 0; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009f86a: adc al, 0; ret; 
0x000000000012334f: adc al, 0x11; test edx, edx; jne 0x123360; ret; 
0x0000000000123c7f: adc al, 0x11; test edx, edx; jne 0x123c90; ret; 
0x00000000000aa3f9: adc al, 0x16; sub eax, edx; ret; 
0x0000000000183c10: adc al, 0x16; sub eax, edx; vzeroupper; ret; 
0x000000000017ec70: adc al, 0x16; test r8d, r8d; je 0x17ec78; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fc55: adc al, 0x16; test r8d, r8d; je 0x17fc5d; xchg edx, eax; sub eax, edx; ret; 
0x000000000010d175: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d48c: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d499; add rsp, 0x18; ret; 
0x0000000000114ca8: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114cb5; add rsp, 0x28; ret; 
0x0000000000115867: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115874; add rsp, 0x28; ret; 
0x000000000012df49: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e063: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012ef69: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f083: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f093; add rsp, 0xd8; ret; 
0x00000000001365c9: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1365f9; add rsp, 0x38; ret; 
0x000000000013ea5a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13ea67; add rsp, 0x18; ret; 
0x000000000015cabc: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15caf4; add rsp, 0x18; ret; 
0x0000000000160e0a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000054149: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ed0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062de1: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1033: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b6: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf86: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000bb163: adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000018423d: adc al, 0x3a; sub eax, edx; vzeroupper; ret; 
0x00000000000ea41b: adc al, 0x3c; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d01f4: adc al, 0x48; add esp, 0x28; ret; 
0x000000000012df50: adc al, 0x48; add esp, 0xd8; ret; 
0x00000000000b8690: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x00000000000b90a0: adc al, 0x48; lea eax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b9503: adc al, 0x48; lea eax, [rdi + 0x15]; ret; 
0x00000000000ac6db: adc al, 0x48; lea eax, [rdi + rax + 0x30]; ret; 
0x00000000000b7931: adc al, 0x48; lea edi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9075: adc al, 0x48; lea edi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000863fb: adc al, 0x48; lea edx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x00000000000b7950: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a4: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x000000000012cf79: adc al, 0x5b; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000000a89fd: adc al, 0x66; mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x000000000012cf77: adc al, 0x74; adc al, 0x5b; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000000f69ed: adc al, 0x83; ret; 
0x0000000000184bcb: adc al, 0x83; shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000087f56: adc al, 0x90; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f25: adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000001817f0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017ff1e: adc al, 0x91; sub eax, edx; ret; 
0x0000000000048f48: adc al, 0x95; std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000033d98: adc al, 0x97; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x0000000000128878: adc al, 0x9b; out dx, eax; inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x00000000000aa563: adc al, 0xa; sub eax, edx; ret; 
0x0000000000183d8d: adc al, 0xa; sub eax, edx; vzeroupper; ret; 
0x000000000012310f: adc al, 0xb2; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000033df9: adc al, 0xb7; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000055601: adc al, 0xc0; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000328a2: adc al, 0xc6; lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000055605: adc al, 0xc6; xor eax, eax; ret; 
0x0000000000160a48: adc al, 0xc7; setne al; movzx eax, al; ret; 
0x0000000000160a78: adc al, 0xc7; xor eax, eax; ret; 
0x000000000009e1f7: adc al, 0xd; adc eax, 0x2740000; ret; 
0x000000000013228f: adc al, 0xde; or eax, dword ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000000bbb58: adc al, 0xe; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000018698a: adc al, 0xe; lea rcx, [rip + 0x14b2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001852a1: adc al, 0xe; lea rcx, [rip + 0x16216]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017ff11: adc al, 0xe; lea rcx, [rip + 0x1b5a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018bd8a: adc al, 0xe; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000017e031: adc al, 0xe; sub eax, edx; ret; 
0x0000000000184dda: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x000000000014102d: adc al, 0xee; dec dword ptr [rax + 0x39]; ret; 
0x00000000000b94f9: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7ca9: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000f075f: adc al, 0xf6; ret 0x7580; 
0x000000000005cd42: adc al, 0xf8; add cl, ch; ret 0xfff6; 
0x00000000000b9079: adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x000000000013da0b: adc al, 0xf; xchg ebp, eax; ret 0x2144; 
0x00000000000c9bf0: adc al, 0xf; xchg ebx, eax; ret 0x3948; 
0x00000000000c7ef8: adc al, 0xf; xchg ebx, eax; ret; 
0x000000000014e5cc: adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x00000000000dd756: adc al, 0xff; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000048df7: adc al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000192ac8: adc al, 1; add byte ptr [rax], al; ret; 
0x000000000011f4d4: adc al, 1; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f540; ret; 
0x000000000009c26a: adc al, 1; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x00000000000a8816: adc al, 7; cmp edx, esi; je 0xa8810; ret; 
0x0000000000051cb9: adc al, 9; ret 0x8d74; 
0x00000000000a1438: adc al, bh; dec dword ptr [rax - 0x77]; ret; 
0x0000000000180507: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180571: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000010c214: adc al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c280; ret; 
0x000000000008ded9: adc al, byte ptr [rax]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x000000000008ded2: adc al, byte ptr [rax]; lea rdi, [rip + 0x1274e9]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000bc869: adc al, byte ptr [rax]; lea rdx, [rip + 0xc101e]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000002fdd4: adc al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000013bcad: adc al, byte ptr [rbx + 0x7ba14fe]; add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x00000000000bcd5b: adc al, byte ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0xd587b; cmovne rax, rdx; ret; 
0x00000000000b3aa7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b07: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3964: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3b27: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b47: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b67: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6738: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b39b1: adc al, byte ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000036729: adc al, byte ptr [rdx*4 - 0x763f6af1]; ret; 
0x000000000018a4ea: adc al, byte ptr [rdx]; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000079cfa: adc al, byte ptr [rsi - 0x76b60006]; ret; 
0x00000000000e2c8d: adc al, ch; lodsd eax, dword ptr [rsi]; sbb ebx, edi; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x0000000000042b08: adc al, ch; ret 0x153f; 
0x0000000000198668: adc al, ch; ret 0xe89c; 
0x000000000003c307: adc al, ch; ret; 
0x00000000001353e5: adc al, ch; test ecx, edx; out dx, al; inc dword ptr [rbp + 0x31]; rol byte ptr [rbp - 0x6bf0be40], cl; ret 0xf741; 
0x00000000001507c3: adc bh, byte ptr [rax + 1]; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x0000000000135d74: adc bh, dh; ret 0x8080; 
0x0000000000041bac: adc bl, bl; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000001252f5: adc bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000c8c40: adc bl, ch; and eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008d7a3: adc bl, ch; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000056316: adc bl, ch; jge 0x56363; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000be5d4: adc bl, ch; or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014fdc7: adc bl, dh; movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150707: adc bl, dh; movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000016d860: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfca: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b9476: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c56: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d6: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8666: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8686: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000bb136: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b86e7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9557: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8707: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7037: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7017: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b8627: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9497: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f77: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b87e8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b9658: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7118: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2b8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000019726b: adc bl, dh; movups xmm0, xmmword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x000000000016d85f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b9475: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c55: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d5: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8665: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8685: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000bb135: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b86e6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9556: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8706: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7036: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7016: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b8626: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9496: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f76: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x0000000000121c41: adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xca710], 2; ret; 
0x000000000008d30a: adc byte ptr [r10 + 0x32], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d76a: adc byte ptr [r10 + 0x42], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000011a557: adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x0000000000112943: adc byte ptr [r13 + 0x41], r11b; pop rsp; pop r13; pop r14; ret; 
0x000000000014123a: adc byte ptr [r13 + 0x5b0875c0], r8b; pop rbp; pop r12; ret; 
0x000000000011acc0: adc byte ptr [r13 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 4; 
0x00000000000ac14f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000045358: adc byte ptr [r15], cl; sahf; ret 0x3949; 
0x0000000000044f20: adc byte ptr [r15], cl; xchg ebx, eax; ret 0x3949; 
0x000000000010c2ff: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb6: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000056e1b: adc byte ptr [r15], r9b; popfq; ret 0x3948; 
0x000000000003754b: adc byte ptr [r15], r9b; xchg ebx, eax; ret 0x3948; 
0x000000000015f90b: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000ecb00: adc byte ptr [r8 + 0x63], r9b; ret; 
0x00000000000e8142: adc byte ptr [r8 + 1], r9b; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000089742: adc byte ptr [r8 + 1], r9b; ret; 
0x00000000000bb15f: adc byte ptr [r8 - 0x12cfeba9], r9b; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b909c: adc byte ptr [r8 - 0x72b7eb89], r9b; adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000639b8: adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x0000000000127a40: adc byte ptr [r8 - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000011c703: adc byte ptr [r8 - 0x77], cl; ret 0x8148; 
0x000000000015bd2f: adc byte ptr [r8 - 0x77], r9b; ret 0x2548; 
0x0000000000093963: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x0000000000045351: adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x00000000000b794c: adc byte ptr [r8 - 0x7cb6eb89], r9b; call 0x7f98c16d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000001412b9: adc byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000bb0dc: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb0fe: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb13c: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb1be: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000d13f7: adc byte ptr [r9], r13b; ror byte ptr [rbp + 0x480f0750], 1; ret 0xb70f; 
0x000000000011f6ff: adc byte ptr [rax + 0x130], bh; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x00000000001143df: adc byte ptr [rax + 0x13], bh; syscall; cmp rax, -0x1000; ja 0x114440; ret; 
0x000000000004821f: adc byte ptr [rax + 0x13e], bh; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x000000000011447f: adc byte ptr [rax + 0x14], bh; syscall; cmp rax, -0x1000; ja 0x1144e0; ret; 
0x00000000001189df: adc byte ptr [rax + 0x1a], bh; syscall; cmp rax, -0x1000; ja 0x118a40; ret; 
0x00000000000e2e3f: adc byte ptr [rax + 0x22], bh; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x0000000000099592: adc byte ptr [rax + 0x29], cl; ret 0x3948; 
0x000000000005e9b5: adc byte ptr [rax + 0x29], cl; ret 0xc148; 
0x00000000000b75ba: adc byte ptr [rax + 0x29], cl; retf 0x394c; ret 0x9d72; 
0x00000000000d0843: adc byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000012019f: adc byte ptr [rax + 0x2a], bh; syscall; cmp rax, -0x1000; ja 0x120200; ret; 
0x00000000001200cf: adc byte ptr [rax + 0x2b], bh; syscall; cmp rax, -0x1000; ja 0x120130; ret; 
0x00000000001205df: adc byte ptr [rax + 0x2e], bh; syscall; cmp rax, -0x1000; ja 0x120640; ret; 
0x000000000012047f: adc byte ptr [rax + 0x2f], bh; syscall; cmp rax, -0x1000; ja 0x1204e0; ret; 
0x000000000014a5d3: adc byte ptr [rax + 0x31], cl; ret 0xb70f; 
0x00000000000c8f08: adc byte ptr [rax + 0x39], cl; fisttp word ptr [rdi]; xchg ebx, eax; ret; 
0x0000000000158730: adc byte ptr [rax + 0x39], cl; ret 0x3375; 
0x0000000000044ec8: adc byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x00000000000e609e: adc byte ptr [rax + 0x39], cl; ret 0xec75; 
0x000000000005691d: adc byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000003758c: adc byte ptr [rax + 0x39], cl; ret 0xee75; 
0x00000000000f7ec7: adc byte ptr [rax + 0x39], cl; ret 0xf375; 
0x00000000000a0c56: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x00000000000e5c71: adc byte ptr [rax + 0x39], cl; ret; 
0x00000000000983c6: adc byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x00000000000983c5: adc byte ptr [rax + 0x39], r9b; ror dword ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x000000000015f804: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x000000000011519f: adc byte ptr [rax + 0x4a], bh; syscall; cmp rax, -0x1000; ja 0x1151f0; ret; 
0x000000000011525f: adc byte ptr [rax + 0x4b], bh; syscall; cmp rax, -0x1000; ja 0x1152b0; ret; 
0x000000000010e98f: adc byte ptr [rax + 0x55], bh; syscall; cmp rax, -0x1000; ja 0x10e9e0; ret; 
0x000000000015f90c: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000000ecb01: adc byte ptr [rax + 0x63], cl; ret; 
0x0000000000149378: adc byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000011739f: adc byte ptr [rax + 1], bh; ret; 
0x000000000010e06f: adc byte ptr [rax + 1], bh; syscall; cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x00000000000cf34e: adc byte ptr [rax + 1], cl; clc; ret; 
0x00000000000e8143: adc byte ptr [rax + 1], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000ac6d6: adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000088e22: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000012bce1: adc byte ptr [rax + 1], cl; ret 0x8948; 
0x0000000000056aae: adc byte ptr [rax + 1], cl; ret; 
0x000000000015087d: adc byte ptr [rax + 1], dil; ret; 
0x000000000010e80f: adc byte ptr [rax + 3], bh; syscall; cmp rax, -0x1000; ja 0x10e860; ret; 
0x000000000011295f: adc byte ptr [rax + 7], bh; syscall; cmp rax, -0x1000; ja 0x1129c0; ret; 
0x00000000000623e5: adc byte ptr [rax + rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000bc86f: adc byte ptr [rax + rax], cl; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x0000000000113b24: adc byte ptr [rax + rax], dl; call 0x1143a0; add rsp, 0x18; ret; 
0x00000000000bb2e4: adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb1e2: adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb160: adc byte ptr [rax - 0x12cfeba9], cl; mov byte ptr [rdi + 0x15], ch; ret; 
0x0000000000135c24: adc byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x00000000000b909d: adc byte ptr [rax - 0x72b7eb89], cl; adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x000000000012310c: adc byte ptr [rax - 0x73], cl; adc al, 0xb2; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000033df6: adc byte ptr [rax - 0x73], cl; adc al, 0xb7; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000001783b4: adc byte ptr [rax - 0x73], cl; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000123273: adc byte ptr [rax - 0x73], cl; add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000a0308: adc byte ptr [rax - 0x73], cl; add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x000000000009faf5: adc byte ptr [rax - 0x73], cl; add eax, 0x1bef3; cmovne rax, rdx; ret; 
0x000000000009f835: adc byte ptr [rax - 0x73], cl; add eax, 0x1c103; cmovne rax, rdx; ret; 
0x000000000009f245: adc byte ptr [rax - 0x73], cl; add eax, 0x1c643; cmovne rax, rdx; ret; 
0x0000000000118c2e: adc byte ptr [rax - 0x73], cl; add eax, 0xd6c5a; pop rbp; pop r12; pop r13; ret; 
0x00000000000b78ab: adc byte ptr [rax - 0x73], cl; jg 0xb78c0; jne 0xb7f80; ret; 
0x00000000000b8fcf: adc byte ptr [rax - 0x73], cl; jg 0xb8fe4; jne 0xb97d0; ret; 
0x0000000000123364: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123272: adc byte ptr [rax - 0x73], r9b; add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000123363: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000010a59d: adc byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x3074; 
0x0000000000122910: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122971: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000639b9: adc byte ptr [rax - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000001087f4: adc byte ptr [rax - 0x75], cl; test dword ptr [rax], esp; idiv edi; dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x2e74; 
0x0000000000108603: adc byte ptr [rax - 0x75], cl; test dword ptr [rax], esp; idiv edi; dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000088a85: adc byte ptr [rax - 0x75], cl; xchg ebx, eax; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000b67ac: adc byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000127a41: adc byte ptr [rax - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000004823c: adc byte ptr [rax - 0x77], cl; jl 0x48265; or al, ch; cdq; ret; 
0x0000000000087f5b: adc byte ptr [rax - 0x77], cl; jo 0x87fa0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086e9d: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000002f484: adc byte ptr [rax - 0x77], cl; ret 0x2548; 
0x00000000000d0917: adc byte ptr [rax - 0x77], cl; ret 0x6348; 
0x00000000000578e3: adc byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000009e80c: adc byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000097ddb: adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000093544: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000014905e: adc byte ptr [rax - 0x77], cl; ret 0x8eeb; 
0x0000000000127bd4: adc byte ptr [rax - 0x77], cl; ret 0x950f; 
0x000000000012d2d6: adc byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000005ef86: adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000093964: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x0000000000127e5e: adc byte ptr [rax - 0x77], cl; ret 0xff41; 
0x00000000000e82c1: adc byte ptr [rax - 0x77], cl; ret; 
0x00000000000fdfca: adc byte ptr [rax - 0x77], r9b; ret 0x8948; 
0x0000000000045352: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x00000000000fc777: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0xfffe; 
0x00000000000b2554: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x00000000000fa79f: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x39; ret 0xc675; 
0x000000000011cfff: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], cl; cmp edi, edx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000fa79e: adc byte ptr [rax - 0x7b], r9b; sal byte ptr [rbp + rax + 0x48], 0x39; ret 0xc675; 
0x00000000000b794d: adc byte ptr [rax - 0x7cb6eb89], cl; call 0x7f98c16d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000000f1194: adc byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000009633b: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000110de6: adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000000ac444: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000157f08: adc byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x0000000000128613: adc byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x0000000000024140: adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000001537e2: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret; 
0x00000000000a880f: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je 0xa8810; ret; 
0x0000000000157590: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000dd052: adc byte ptr [rax - 1], bh; endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000017e220: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x00000000001802f2: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000182781: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180711: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000f4cc4: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000141b72: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x000000000009526d: adc byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000014833c: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482fe: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482a2: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x0000000000146995: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000bc1e2: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000063029: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000113b5b: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113bb8; ret; 
0x00000000001143a5: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1143b4; ret; 
0x000000000010f251: adc byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000062654: adc byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x0000000000090032: adc byte ptr [rax], al; add byte ptr [rcx - 0x100c1e], al; dec dword ptr [rcx]; ret 0x1389; 
0x000000000006e190: adc byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000045fe6: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x0000000000170eb8: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000000df4d4: adc byte ptr [rax], al; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000000e51f5: adc byte ptr [rax], al; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000dd14d: adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e512d: adc byte ptr [rax], al; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e4ffd: adc byte ptr [rax], al; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e2b59: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000dd135: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2cd: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000002f596: adc byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000052a01: adc byte ptr [rax], al; ret; 
0x0000000000055038: adc byte ptr [rax], bh; jne 0x55043; push r10; ret; 
0x0000000000055541: adc byte ptr [rax], bh; jne 0x5554c; push r10; ret; 
0x00000000000bb0dd: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb0ff: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb13d: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb1bf: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb2c1: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x0000000000062848: adc byte ptr [rax], dl; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000a072f: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x000000000009f20f: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f0df: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a078f: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x000000000009f7bf: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f6ef: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000000a3223: adc byte ptr [rbp + 0x29], cl; ret 0x8b46; 
0x00000000001025d7: adc byte ptr [rbp + 0x31], al; leave; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000000d6dde: adc byte ptr [rbp + 0x3941000d], cl; ret 0x8c0f; 
0x00000000000a478b: adc byte ptr [rbp + 0x39], cl; fiadd dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x000000000012b78e: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000112944: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000002ff0a: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000014123b: adc byte ptr [rbp + 0x5b0875c0], al; pop rbp; pop r12; ret; 
0x000000000013f0c2: adc byte ptr [rbp + rcx*4 + 4], cl; ret 0x8348; 
0x00000000001041c9: adc byte ptr [rbp - 0x457bf037], al; add al, byte ptr [rax]; add byte ptr [rbx - 0x76b7fd07], al; ret 0x940f; 
0x000000000011acc1: adc byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 4; 
0x00000000000a00d9: adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x000000000005b39a: adc byte ptr [rbp - 0xd], dh; cmp rax, rdi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x0000000000090fef: adc byte ptr [rbx + 0x15d7c92d], al; add byte ptr [rcx], al; ret; 
0x0000000000062b64: adc byte ptr [rbx + 0x24182444], cl; cmp al, 0xc; ret 0x4489; 
0x0000000000062568: adc byte ptr [rbx + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000192bcf: adc byte ptr [rbx + 0x463bfc47], cl; cld; jne 0x192be0; xor eax, eax; ret; 
0x000000000004757a: adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000df61c: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000000ef191: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r15; ret; 
0x0000000000081127: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001506d7: adc byte ptr [rbx + 0x78ff853b], cl; ret 0x1de8; 
0x000000000011a558: adc byte ptr [rbx + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x0000000000122999: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122e69: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122b59: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122ac9: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122d29: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122dc9: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122ef9: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000123029: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122bec: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x44; ret 0x8940; 
0x0000000000122a29: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122c89: adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000000b7077: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7086; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7d67: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7d76; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b8747: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb8756; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95b7: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb95c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000ba387: adc byte ptr [rbx + 0xff3174e], cl; jg 0xba396; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bae77: adc byte ptr [rbx + 0xff3174e], cl; jg 0xbae86; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7097: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb70a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7d87: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb7d96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b8767: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb8776; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95d7: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb95e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000ba3a7: adc byte ptr [rbx + 0xff3184e], cl; jg 0xba3b6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bae97: adc byte ptr [rbx + 0xff3184e], cl; jg 0xbaea6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000111d3e: adc byte ptr [rbx + r9*4 + 0x63], r9b; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000111d3f: adc byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000009359a: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000000a44fa: adc byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x000000000008774e: adc byte ptr [rbx - 0x3b7cb7ff], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000049f30: adc byte ptr [rbx - 0x6af069c4], cl; ret 0x8941; 
0x000000000013c23e: adc byte ptr [rbx - 0x73], al; add dword ptr [rdx], r8d; pop rbx; ret; 
0x00000000000ff6af: adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x0000000000060369: adc byte ptr [rbx - 0x7bf0cf02], al; ret 0xfff1; 
0x000000000014a5e0: adc byte ptr [rcx + 0x31], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000a51fe: adc byte ptr [rcx + 0x39], cl; ret 0xec75; 
0x000000000005fcfa: adc byte ptr [rcx + 0x39], cl; ret; 
0x00000000000c9be8: adc byte ptr [rcx + 0x39], cl; ror byte ptr [rcx - 0x73], cl; jl 0xc9c29; adc al, 0xf; xchg ebx, eax; ret 0x3948; 
0x00000000001449c2: adc byte ptr [rcx + 0x5c], al; ret; 
0x00000000001373a7: adc byte ptr [rcx + 0xf], al; mov dh, 0xc; and al, 0x88; or dh, dh; ret 0xf02; 
0x00000000000c8563: adc byte ptr [rcx + rcx*4 + 0x45], cl; mov eax, 0xfd83949; xchg ebx, eax; ret; 
0x000000000003f403: adc byte ptr [rcx + rcx*4 + 4], cl; and al, 0xe8; ret; 
0x000000000009d4e5: adc byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x0000000000044154: adc byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000002ff32: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x00000000000812db: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000152388: adc byte ptr [rcx + rcx*4 - 0x40], al; pop r12; ret; 
0x000000000015cbd5: adc byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; ret; 
0x0000000000046d2f: adc byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000995a2: adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x000000000009ce47: adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000993ab: adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x00000000000bb242: adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb222: adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000ff6a1: adc byte ptr [rcx - 0x17f3dbb4], cl; mov ch, 0x2d; dec dword ptr [rax - 0x75]; je 0xff6d3; adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x0000000000122c3b: adc byte ptr [rcx - 0x2d], al; call 0x1f2af84; mov eax, r8d; ret; 
0x00000000001235fd: adc byte ptr [rcx - 0x2d], al; call 0x1f2b946; mov eax, r8d; ret; 
0x0000000000047c9e: adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x0000000000157d37: adc byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000004534e: adc byte ptr [rcx - 0x73], cl; adc byte ptr [r8 - 0x7b], r9b; ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x0000000000121c9b: adc byte ptr [rcx - 0x77], cl; add byte ptr [rax - 0x39], cl; add eax, 0xca6b6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c1b: adc byte ptr [rcx - 0x77], cl; add byte ptr [rax - 0x39], cl; add eax, 0xca736; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000013eaf1: adc byte ptr [rcx - 0x77], cl; ret 0x3948; 
0x000000000015a41c: adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000014bf4b: adc byte ptr [rcx - 0x7cb77cec], cl; call 0x78d54457; ret 0x548b; 
0x0000000000097b7c: adc byte ptr [rcx - 0x7d], al; ret 0x4801; 
0x00000000000b7b21: adc byte ptr [rcx - 0x7d], cl; call 0x7f98c349; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x00000000000b4219: adc byte ptr [rcx - 0x7d], cl; call 0xffffffffa7915131; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000017e0b3: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000181c57: adc byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000053c2f: adc byte ptr [rcx - 0x7d], cl; ret; 
0x000000000010cfda: adc byte ptr [rcx - 0xa], al; ret 0x4901; 
0x0000000000160961: adc byte ptr [rcx], al; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x0000000000152670: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000011fdf5: adc byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000015799f: adc byte ptr [rcx], al; imul ebp, dword ptr [rax], 0x5b; pop rbp; pop r12; ret; 
0x0000000000183887: adc byte ptr [rcx], ch; cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x00000000000d401f: adc byte ptr [rcx], ch; ret 0x5589; 
0x00000000000d13f8: adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xb70f; 
0x00000000000a1bce: adc byte ptr [rcx], cl; ret 0x3949; 
0x0000000000121c48: adc byte ptr [rdi + 0x2000c], ah; add byte ptr [rax], al; ret; 
0x00000000000dd649: adc byte ptr [rdi - 0x34], bh; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000002e044: adc byte ptr [rdi], al; add byte ptr [rax], al; add cl, ch; ret; 
0x000000000010c300: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd1: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbcb7: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000a8aa5: adc byte ptr [rdi], cl; mov bh, 0x54; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000341c9: adc byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x000000000012fb3a: adc byte ptr [rdi], cl; mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000136337: adc byte ptr [rdi], cl; mov bh, 0xf6; push 2; call 0x1358b0; add rsp, 0x18; ret; 
0x00000000000a8a8d: adc byte ptr [rdi], cl; mov dh, 0x54; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a6f: adc byte ptr [rdi], cl; mov dh, 0x54; and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x000000000008dfdc: adc byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x0000000000056e1c: adc byte ptr [rdi], cl; popfq; ret 0x3948; 
0x000000000005748e: adc byte ptr [rdi], cl; sahf; ret 0x3948; 
0x0000000000045359: adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x000000000012894f: adc byte ptr [rdi], cl; test byte ptr [rdx - 0x7d000000], ch; ret 0x8801; 
0x00000000001783b8: adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000190bf3: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000017f2a1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f391: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f1b1: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000187fdb: adc byte ptr [rdi], cl; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000186adf: adc byte ptr [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x0000000000187cdf: adc byte ptr [rdi], cl; xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001873df: adc byte ptr [rdi], cl; xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001876df: adc byte ptr [rdi], cl; xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000186dd7: adc byte ptr [rdi], cl; xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017fbf9: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000017f751: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017eee1: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017f931: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f0c1: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017fb11: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017fa21: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f363: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f453: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f273: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187084: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187c84: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187f84: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187684: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187384: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000186d7c: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017efd1: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000182efd: adc byte ptr [rdi], cl; xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d1d: adc byte ptr [rdi], cl; xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001836f5: adc byte ptr [rdi], cl; xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182615: adc byte ptr [rdi], cl; xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183515: adc byte ptr [rdi], cl; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017f183: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017efa3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f093: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017eeb3: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000003754c: adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3948; 
0x0000000000044f21: adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3949; 
0x000000000010ecc1: adc byte ptr [rdi], cl; xchg esp, eax; ret 0x2044; 
0x00000000000f9f8d: adc byte ptr [rdi], cl; xchg esp, eax; ret 0x8548; 
0x000000000005748d: adc byte ptr [rdi], r9b; sahf; ret 0x3948; 
0x0000000000121c42: adc byte ptr [rdx + 0x13], dh; mov qword ptr [rip + 0xca710], 2; ret; 
0x000000000008d30b: adc byte ptr [rdx + 0x32], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d76b: adc byte ptr [rdx + 0x42], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000b7ca6: adc byte ptr [rdx + 0xff31456], cl; jg 0xb7cb5; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7ca5: adc byte ptr [rdx + 0xff31456], r9b; jg 0xb7cb5; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7d27: adc byte ptr [rdx + 0xff3184e], cl; jg 0xb7d36; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b9577: adc byte ptr [rdx + 0xff3184e], cl; jg 0xb9586; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7e28: adc byte ptr [rdx + 0xff3204e], cl; jg 0xb7e37; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9678: adc byte ptr [rdx + 0xff3204e], cl; jg 0xb9687; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000010c7c7: adc byte ptr [rdx + 1], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd7: adc byte ptr [rdx + 2], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000136c77: adc byte ptr [rdx + 2], ch; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf7: adc byte ptr [rdx + 3], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x00000000000529ec: adc byte ptr [rdx + 6], bh; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000122056: adc byte ptr [rdx + 8], dh; seta al; movzx eax, al; neg eax; ret; 
0x00000000001028ae: adc byte ptr [rdx + 8], dh; setne al; movzx eax, al; neg eax; ret; 
0x000000000017cb3c: adc byte ptr [rdx], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000bb4d6: adc byte ptr [rdx], al; jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb586: adc byte ptr [rdx], al; jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x000000000010c7a7: adc byte ptr [rdx], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000018e14b: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000bb4d5: adc byte ptr [rdx], r8b; jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb585: adc byte ptr [rdx], r8b; jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x0000000000042080: adc byte ptr [rip + 0x17ac5a], al; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x000000000004205a: adc byte ptr [rip + 0x17ac88], al; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x000000000019726e: adc byte ptr [rip + 0x2610c], al; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x00000000000a3271: adc byte ptr [rip + 0x3949eb74], al; ret 0x1674; 
0x0000000000041b77: adc byte ptr [rip - 0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x0000000000117a4c: adc byte ptr [rsi + 0xd], bh; add byte ptr [rbp - 0x8f38b2e], al; ret 0xfc07; 
0x000000000018d5f5: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018dffa: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x0000000000095df8: adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000018d5f0: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a9145: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000000acfab: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x0000000000089faa: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xff3; 
0x00000000000ac150: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000b718f: adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000b718e: adc byte ptr [rsi + 0xf], r12b; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x000000000005b32b: adc byte ptr [rsi + rdx + 0x48], dh; sub eax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x00000000000bbaef: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbcad: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000018fb4e: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000b7057: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb203: adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bbaec: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000160e4c: adc byte ptr [rsi], dl; in al, dx; dec dword ptr [rax - 0x77]; ret 0x8b64; 
0x00000000000d029e: adc byte ptr [rsp - 0x10], al; ret; 
0x0000000000187087: adc byte ptr es:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048f46: adc ch, al; adc al, 0x95; std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000049416: adc ch, al; nop; std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000154897: adc ch, al; ret; 
0x000000000011cf5a: adc ch, bh; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c87c6: adc ch, bl; and eax, 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000014927d: adc cl, byte ptr [rax + 0x29]; int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000d10fc: adc cl, byte ptr [rax + 0x29]; ret 0x148; 
0x00000000000a8f29: adc cl, byte ptr [rax + 0x29]; ret; 
0x000000000015b661: adc cl, byte ptr [rax + 0x29]; retf 0x148; ret 0x2949; 
0x000000000009f85d: adc cl, byte ptr [rax - 0x73]; add eax, 0x14f6fb; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000b78f3: adc cl, byte ptr [rax - 0x73]; jg 0xb790a; jne 0xb7f80; ret; 
0x00000000000b9017: adc cl, byte ptr [rax - 0x73]; jg 0xb902e; jne 0xb97d0; ret; 
0x0000000000086265: adc cl, byte ptr [rax - 0x73]; jno 0x8626e; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000003421f: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ef: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000034222: adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f2: adc cl, byte ptr [rax - 0x75]; push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000001162a3: adc cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x000000000007ea57: adc cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x00000000000a83ae: adc cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000c9c29: adc cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x00000000000a566d: adc cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x00000000000b69f5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000008a71d: adc cl, byte ptr [rbx + 0x42394c42]; cmovne rax, rcx; ret; 
0x00000000000b3b2f: adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4f: adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6f: adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bf: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b67a0: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39b5: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000183b99: adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000120dbc: adc dh, byte ptr [rdi + 0xd]; movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012075a: adc dh, byte ptr [rdi - 0x2708fff4]; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000147087: adc dh, dh; ret 0x7401; 
0x0000000000108c5a: adc dl, byte ptr [rdi - 0x76b7000f]; ret 0x8548; 
0x00000000001507cb: adc dword ptr [rax + 0x20], edx; ret; 
0x00000000000874fb: adc dword ptr [rax + 0x30], eax; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150798: adc dword ptr [rax + 0x30], eax; ret; 
0x0000000000087cca: adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x000000000008f508: adc dword ptr [rax + 0x48000000], -0x77; call 0x5c4a526f; ret; 
0x000000000011465b: adc dword ptr [rax + 0xd], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000009f31a: adc dword ptr [rax + 0xe7402fa], eax; cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x000000000014d070: adc dword ptr [rax + 8], eax; ret; 
0x0000000000094e6e: adc dword ptr [rax - 0x3f], ecx; call 0x5096967a; add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000893d9: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000012eb60: adc dword ptr [rax - 0x73], ecx; adc eax, 0xc2788; call 0xbd470; add rsp, 8; ret; 
0x000000000008df26: adc dword ptr [rax - 0x73], ecx; add qword ptr [rax - 0x77], rcx; sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x00000000000b78ce: adc dword ptr [rax - 0x73], ecx; jg 0xb78e4; jne 0xb7f80; ret; 
0x00000000000b8ff2: adc dword ptr [rax - 0x73], ecx; jg 0xb9008; jne 0xb97d0; ret; 
0x00000000000860be: adc dword ptr [rax - 0x73], ecx; jno 0x860c7; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000003453d: adc dword ptr [rax - 0x75], ecx; pop rax; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000023a4e: adc dword ptr [rax - 0x77], ecx; add eax, 0x1cd8d2; ret; 
0x000000000008d36e: adc dword ptr [rax - 0x77], ecx; out dx, eax; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000a8107: adc dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000118e84: adc dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018561b: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x00000000001806a7: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182619: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000010c164: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c1d0; ret; 
0x0000000000113638: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113650; ret; 
0x00000000000a421c: adc dword ptr [rax], eax; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000a4442: adc dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret; 
0x00000000000d0135: adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000d0175: adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0155: adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d1dc0: adc dword ptr [rax], eax; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d41c9: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d0ef5: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ddd: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d1d1d: adc dword ptr [rax], eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000086ea3: adc dword ptr [rax], eax; ret; 
0x00000000000d4a89: adc dword ptr [rax], eax; test eax, eax; jne 0xd4aa0; mov rax, r8; add rsp, 8; ret; 
0x00000000000d0055: adc dword ptr [rax], eax; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d4aa5: adc dword ptr [rax], eax; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000010c7ab: adc dword ptr [rax], ecx; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000013614e: adc dword ptr [rax], ecx; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000926bf: adc dword ptr [rbp + 0x38], eax; pop rbp; pop r12; ret; 
0x00000000000bcccd: adc dword ptr [rbp - 0x6b], esi; test edx, edx; jne 0xbccb0; ret; 
0x000000000008e553: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000009e901: adc dword ptr [rbx + 0x18], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e557: adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000001276dc: adc dword ptr [rbx + 0x30], eax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091e5f: adc dword ptr [rbx + 0x38], eax; mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091f06: adc dword ptr [rbx + 0x38], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000919c6: adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000008e54f: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008e656: adc dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000011335b: adc dword ptr [rbx - 0x2708fff3], ecx; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048008: adc dword ptr [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198e29: adc dword ptr [rbx], eax; mov rdi, qword ptr [rip + 0x57bee]; call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x00000000000bbddc: adc dword ptr [rbx], eax; ret; 
0x00000000000bbd55: adc dword ptr [rbx], esp; ret; 
0x0000000000184d8a: adc dword ptr [rcx + 0x31000002], -0x40; vzeroupper; ret; 
0x00000000000d79ef: adc dword ptr [rcx + 0x3941000d], eax; ret 0x8c0f; 
0x000000000013c569: adc dword ptr [rcx + 0x4e2c1f2], ecx; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000018fe1d: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe24: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe2b: adc dword ptr [rcx + 7], edi; ret; 
0x00000000000d4a8e: adc dword ptr [rcx + rcx*4 - 0x40], ecx; add rsp, 8; ret; 
0x00000000000bbd47: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4b: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd50: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000c85b2: adc dword ptr [rcx - 0x7d], ecx; ret 0x4c10; 
0x00000000000c7e4a: adc dword ptr [rcx - 0x7d], ecx; ret 0x4d10; 
0x000000000018fac6: adc dword ptr [rcx - 1], ebx; ret; 
0x000000000018fa8a: adc dword ptr [rcx - 1], edi; ret; 
0x000000000018fabf: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fcbd: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa83: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcb6: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa7c: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcaf: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa75: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000f1433: adc dword ptr [rcx], eax; ret 0x428d; 
0x00000000000bbd44: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000a87e0: adc dword ptr [rcx], edi; rol byte ptr [rcx + 0xf], 1; xchg ebp, eax; ret 0xc839; 
0x000000000018cf92: adc dword ptr [rcx], edx; adc dword ptr [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018cf94: adc dword ptr [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000004745e: adc dword ptr [rcx], esi; ror byte ptr [rax - 0x7b], 0xff; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x000000000010c2fe: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdcf: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbcb5: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000001576ee: adc dword ptr [rdi + 0x18], eax; ret; 
0x000000000010c302: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd3: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b3d: adc dword ptr [rdi + 0x28], eax; movups xmmword ptr [rdi + 0x38], xmm0; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c306: adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd7: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b41: adc dword ptr [rdi + 0x38], eax; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c30a: adc dword ptr [rdi + 0x40], eax; ret; 
0x0000000000043b45: adc dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000043b49: adc dword ptr [rdi + 0x58], eax; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000092785: adc dword ptr [rdi + 0x58], eax; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000043b4d: adc dword ptr [rdi + 0x68], eax; ret; 
0x000000000010c741: adc dword ptr [rdi + 0x68], esi; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c74a: adc dword ptr [rdi + 0x78], edi; ret; 
0x000000000010d0d3: adc dword ptr [rdi + 0xe8], esi; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d0df: adc dword ptr [rdi + 0xf8], edi; ret; 
0x000000000018fab8: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001901c5: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000918fc: adc dword ptr [rdi + 8], eax; ret; 
0x00000000000482ee: adc dword ptr [rdi + rdi + 0x48], esi; add edi, eax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000013c624: adc dword ptr [rdi + rdx + 8], eax; ret; 
0x00000000000bbaf7: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x00000000000bbcb9: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbc8c: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc91: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbcbe: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x00000000000bbc96: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc9b: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000051c8f: adc dword ptr [rdi - 0x76b7ffea], esi; ret 0xc148; 
0x000000000018ff78: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff7f: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff86: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff8d: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000041f59: adc dword ptr [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000004234a: adc dword ptr [rdi], eax; cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000057da5: adc dword ptr [rdi], eax; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000042305: adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x000000000010c2fb: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb2: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbaf4: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000043f36: adc dword ptr [rdi], eax; ret; 
0x000000000018fab2: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001921f0: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000001901bf: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901e0: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000bbdcc: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000002717f: adc dword ptr [rdx + 0x48], eax; ret; 
0x00000000001507dc: adc dword ptr [rdx], ebx; ret; 
0x000000000014d084: adc dword ptr [rdx], ecx; ret; 
0x000000000014fecc: adc dword ptr [rdx], edx; ret; 
0x00000000001507bc: adc dword ptr [rdx], esp; ret; 
0x00000000001131bf: adc dword ptr [rsi + 0x58], eax; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000010c6f1: adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d046: adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c6fa: adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000005eea9: adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000190305: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019030c: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190313: adc dword ptr [rsi + 3], edx; ret; 
0x00000000001903a2: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903a9: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903b0: adc dword ptr [rsi + 7], edx; ret; 
0x0000000000100457: adc dword ptr [rsi + 8], eax; ret; 
0x000000000014832c: adc dword ptr [rsi + 8], ecx; ret; 
0x000000000012105b: adc dword ptr [rsi - 0x2708fff4], ebp; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001901b2: adc dword ptr [rsi - 1], edx; ret; 
0x00000000001901ab: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a4: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019019d: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000047c29: adc dword ptr [rsi], eax; lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014fdce: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000015070e: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014cf91: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000479c4: adc dword ptr [rsi], eax; sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000009a0cb: adc dword ptr [rsi], ebx; adc eax, 0x38894800; ret; 
0x00000000001902ff: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000008b856: adc dword ptr [rsp + 0xf0], eax; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000001806a6: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000911f2: adc eax, 0; add byte ptr [rbx + 0x158901ea], al; ret; 
0x0000000000095205: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951dc: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951bc: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x000000000009d713: adc eax, 0x100; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x00000000000961d3: adc eax, 0x10894800; ret; 
0x00000000000e2e82: adc eax, 0x108fe9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d62: adc eax, 0x109109; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000118c2a: adc eax, 0x10c48348; lea rax, [rip + 0xd6c5a]; pop rbp; pop r12; pop r13; ret; 
0x00000000000de2ca: adc eax, 0x10dba1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dd132: adc eax, 0x10ed39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000cf34a: adc eax, 0x10ef8348; add rax, rdi; ret; 
0x00000000000bdf8f: adc eax, 0x116fc; cmovne rax, rdx; ret; 
0x00000000000d4aa2: adc eax, 0x117391; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000d1092: adc eax, 0x11add9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ef2: adc eax, 0x11af79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dda: adc eax, 0x11b091; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000009f0ef: adc eax, 0x12e8c; cmovne rax, rdx; ret; 
0x00000000001880c8: adc eax, 0x133f3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001880a3: adc eax, 0x13418; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009f6ff: adc eax, 0x1449c; cmovne rax, rdx; ret; 
0x0000000000186708: adc eax, 0x14db3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001866ee: adc eax, 0x14dcd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000960b4: adc eax, 0x156ac7; lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x0000000000094e79: adc eax, 0x157452; ret; 
0x00000000000b7954: adc eax, 0x157f8d48; jne 0xb7f80; ret; 
0x00000000000b90a8: adc eax, 0x157f8d48; jne 0xb97d0; ret; 
0x000000000009389a: adc eax, 0x15af21; mov qword ptr [rip + 0x15af22], rbx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x00000000000b90d3: adc eax, 0x16e88349; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x0000000000183808: adc eax, 0x17cb3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001837e3: adc eax, 0x17cd8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000062ed2: adc eax, 0x188f99; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e9a: adc eax, 0x188fd1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000015e929: adc eax, 0x18c48348; pop rbx; pop rbp; ret; 
0x0000000000181838: adc eax, 0x19c83; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048282: adc eax, 0x1a3be9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000440d1: adc eax, 0x1a80d6; ret; 
0x00000000000434b2: adc eax, 0x1a89b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000043422: adc eax, 0x1a8a49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004754c: adc eax, 0x1a9d9f; call 0xbd470; pop rbx; ret; 
0x00000000000a09fd: adc eax, 0x1b0ce; cmove rax, rdx; ret; 
0x00000000000a068d: adc eax, 0x1b41e; cmove rax, rdx; ret; 
0x00000000000a052d: adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x0000000000034544: adc eax, 0x1b79df; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000a05a4: adc eax, 0x1b9d7; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x0000000000032854: adc eax, 0x1bb2a4; ret; 
0x0000000000023a69: adc eax, 0x1c8422; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x00000000000226b9: adc eax, 0x1ceae2; pop rax; pop rbx; pop rbp; ret; 
0x000000000011f0aa: adc eax, 0x244c8b48; pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x00000000001750e8: adc eax, 0x263d3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750c3: adc eax, 0x263f8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e1f9: adc eax, 0x2740000; ret; 
0x0000000000172b78: adc eax, 0x28943; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b5e: adc eax, 0x2895d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009a0c3: adc eax, 0x30894800; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c9: adc eax, 0x30894800; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x000000000009a0cd: adc eax, 0x38894800; ret; 
0x00000000000cf03a: adc eax, 0x3b30478b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x000000000012da37: adc eax, 0x3d9b4; cmovne rax, rdx; ret; 
0x000000000012d8b7: adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x000000000012d977: adc eax, 0x40584; cmovne rax, rdx; ret; 
0x000000000006116a: adc eax, 0x4605d900; ret 0x15; 
0x00000000000983c1: adc eax, 0x468d4c00; adc byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x000000000016dd15: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd10: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000010d247: adc eax, 0x48000dec; lea edx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000961c7: adc eax, 0x4800155e; mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000bcd53: adc eax, 0x4802e580; lea eax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000a08d5: adc eax, 0x4802e580; lea eax, [rip + 0xe560]; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0835: adc eax, 0x4802e580; lea eax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x000000000009f75c: adc eax, 0x4802e680; lea eax, [rip + 0xaef9]; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x000000000009c1ea: adc eax, 0x48227300; lea eax, [rax - 8]; ret; 
0x000000000009c1e1: adc eax, 0x482b7200; cmp ecx, dword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009552d: adc eax, 0x48a77600; add esp, 8; ret; 
0x000000000009ef1a: adc eax, 0x48c0894c; cmp dword ptr [rdi + 8], esi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x0000000000044581: adc eax, 0x48c48148; add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000121ada: adc eax, 0x48db6348; mov dword ptr [rip + 0xca87b], ebx; pop rbx; ret; 
0x00000000000986cb: adc eax, 0x4c834a00; xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000004221a: adc eax, 0x4e058b48; pushfq; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000098119: adc eax, 0x51894900; or byte ptr [rax + 0x39], cl; ret; 
0x00000000000960b7: adc eax, 0x58d4800; shr byte ptr [rdx + 0x15], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000094a54: adc eax, 0x5b050f00; ret; 
0x000000000009563b: adc eax, 0x5be97500; mov rax, r8; pop rbp; pop r12; ret; 
0x00000000000911eb: adc eax, 0x5c74800; mov eax, 0x15d5; add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x0000000000098db0: adc eax, 0x5d050f00; ret; 
0x000000000012da16: adc eax, 0x5dc25; cmove rax, rdx; ret; 
0x000000000012d956: adc eax, 0x5dd05; cmove rax, rdx; ret; 
0x000000000012d896: adc eax, 0x5ddc5; cmove rax, rdx; ret; 
0x000000000012dad9: adc eax, 0x5e012; lea rax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x00000000000b7958: adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x000000000012da61: adc eax, 0x6295a; cmove rax, rdx; ret; 
0x000000000012d9a1: adc eax, 0x62a3a; cmove rax, rdx; ret; 
0x000000000012d8e1: adc eax, 0x62afa; cmove rax, rdx; ret; 
0x000000000012db21: adc eax, 0x62e4a; cmove rax, rdx; ret; 
0x00000000000cef2a: adc eax, 0x63b078b; jne 0xcf080; ret; 
0x0000000000162d57: adc eax, 0x64000891; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000009e957: adc eax, 0x640014d5; mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000000043c57: adc eax, 0x64001a82; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000095198: adc eax, 0x6b894100; and al, 0x5d; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000b90ac: adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x000000000014829a: adc eax, 0x7401f883; push rax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x000000000009e2f3: adc eax, 0x74c08500; push rdi; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f858: adc eax, 0x75c08500; adc cl, byte ptr [rax - 0x73]; add eax, 0x14f6fb; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x0000000000136ed4: adc eax, 0x7b8a7; mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000180231: adc eax, 0x83480000; ret 0xe910; 
0x0000000000076f72: adc eax, 0x83490000; ret 0xbe01; 
0x000000000014c3a7: adc eax, 0x8948000a; ret 0x8548; 
0x000000000009c1cf: adc eax, 0x89480100; ret 0x4974; 
0x0000000000113054: adc eax, 0x8b48fff8; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x000000000015317d: adc eax, 0x9dcbe; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012e7c2: adc eax, 0xbd6a9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000099615: adc eax, 0xc0314500; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000098095: adc eax, 0xc0314500; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000008e6f5: adc eax, 0xc08d8b00; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x00000000000bc86d: adc eax, 0xc101e; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000012eb63: adc eax, 0xc2788; call 0xbd470; add rsp, 8; ret; 
0x000000000009f19f: adc eax, 0xc42dc; cmovne rax, rdx; ret; 
0x0000000000042a0c: adc eax, 0xc4834800; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000042754: adc eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009f769: adc eax, 0xc4f82; cmovne rax, rdx; ret; 
0x00000000000a09b7: adc eax, 0xcaa64; cmovne rax, rdx; ret; 
0x000000000012124a: adc eax, 0xcac21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211aa: adc eax, 0xcacc1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000a0647: adc eax, 0xcadb4; cmovne rax, rdx; ret; 
0x000000000012109a: adc eax, 0xcadd1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012105a: adc eax, 0xcae11; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012102a: adc eax, 0xcae41; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120fe2: adc eax, 0xcae89; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120f22: adc eax, 0xcaf49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120cb2: adc eax, 0xcb1b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120c0a: adc eax, 0xcb261; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120b52: adc eax, 0xcb319; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012070a: adc eax, 0xcb761; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120642: adc eax, 0xcb829; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001205a2: adc eax, 0xcb8c9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001204e2: adc eax, 0xcb989; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120442: adc eax, 0xcba29; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120382: adc eax, 0xcbae9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120202: adc eax, 0xcbc69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120132: adc eax, 0xcbd39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f842: adc eax, 0xcc629; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f7b0: adc eax, 0xcc6bb; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x000000000011f762: adc eax, 0xcc709; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f6ba: adc eax, 0xcc7b1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5f2: adc eax, 0xcc879; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f542: adc eax, 0xcc929; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f492: adc eax, 0xcc9d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f302: adc eax, 0xccb69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2ba: adc eax, 0xccbb1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f1aa: adc eax, 0xcccc1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000a04e7: adc eax, 0xcda24; cmovne rax, rdx; ret; 
0x0000000000121d00: adc eax, 0xcdd53; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000bcd0b: adc eax, 0xcf2d0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc84b: adc eax, 0xcfa60; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9fb: adc eax, 0xcfd00; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a0892: adc eax, 0xd01b9; cmovne rax, rdx; ret; 
0x00000000000a07f2: adc eax, 0xd0239; cmovne rax, rdx; ret; 
0x00000000000bcaeb: adc eax, 0xd0360; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc80b: adc eax, 0xd0410; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc95b: adc eax, 0xd06e0; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a08e2: adc eax, 0xd22c9; cmovne rax, rdx; ret; 
0x00000000000a0842: adc eax, 0xd2349; cmovne rax, rdx; ret; 
0x0000000000118a42: adc eax, 0xd3429; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116d0a: adc eax, 0xd5161; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cda: adc eax, 0xd5191; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ca2: adc eax, 0xd51c9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116aba: adc eax, 0xd53b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bcd60: adc eax, 0xd587b; cmovne rax, rdx; ret; 
0x000000000009f21f: adc eax, 0xd5edc; cmovne rax, rdx; ret; 
0x0000000000115332: adc eax, 0xd6b39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001152b2: adc eax, 0xd6bb9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001151f2: adc eax, 0xd6c79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114ff2: adc eax, 0xd6e79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009f7cf: adc eax, 0xd70dc; cmovne rax, rdx; ret; 
0x000000000011465a: adc eax, 0xd7811; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011459a: adc eax, 0xd78d1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144e2: adc eax, 0xd7989; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114442: adc eax, 0xd7a29; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114295: adc eax, 0xd7c2e; mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x00000000001141c2: adc eax, 0xd7ca9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dc2: adc eax, 0xd80a9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113d82: adc eax, 0xd80e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bba: adc eax, 0xd82b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011368a: adc eax, 0xd87e1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113652: adc eax, 0xd8819; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011361a: adc eax, 0xd8851; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011335a: adc eax, 0xd8b11; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113312: adc eax, 0xd8b59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113262: adc eax, 0xd8c09; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a073f: adc eax, 0xd8cec; cmovne rax, rdx; ret; 
0x000000000006174d: adc eax, 0xd8d4800; ret; 
0x0000000000113102: adc eax, 0xd8d69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001130c2: adc eax, 0xd8da9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011306a: adc eax, 0xd8e01; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001129c2: adc eax, 0xd94a9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a079f: adc eax, 0xda49c; cmovne rax, rdx; ret; 
0x00000000000611e3: adc eax, 0xdb0f6600; ret 0x290f; 
0x00000000000a8bdb: adc eax, 0xdbd70; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x000000000010e9e2: adc eax, 0xdd489; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e862: adc eax, 0xdd609; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e14a: adc eax, 0xddd21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e11a: adc eax, 0xddd51; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e0d2: adc eax, 0xddd99; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e032: adc eax, 0xdde39; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dc0a: adc eax, 0xde261; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d9d2: adc eax, 0xde499; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d972: adc eax, 0xde4f9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d912: adc eax, 0xde559; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d58a: adc eax, 0xde8e1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d52a: adc eax, 0xde941; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4ca: adc eax, 0xde9a1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c282: adc eax, 0xdfbe9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c1d2: adc eax, 0xdfc99; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000a7cd8: adc eax, 0xe0c14901; or byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000cfaca: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000000a1c7b: adc eax, 0xe2b80; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x000000000009faed: adc eax, 0xe3fae; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82d: adc eax, 0xe412e; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x00000000000a03fb: adc eax, 0xe4130; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x000000000009f23d: adc eax, 0xe45de; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a1cbb: adc eax, 0xe6650; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f80b: adc eax, 0xe8cf0; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f65b: adc eax, 0xe9070; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f69b: adc eax, 0xe91d0; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x0000000000102882: adc eax, 0xe95e9; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102822: adc eax, 0xe9649; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000b1468: adc eax, 0xea053; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1443: adc eax, 0xea078; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a0996: adc eax, 0xeacd5; cmove rax, rdx; ret; 
0x00000000000a0626: adc eax, 0xeb025; cmove rax, rdx; ret; 
0x00000000000a04c6: adc eax, 0xeb1a5; cmove rax, rdx; ret; 
0x00000000000a0589: adc eax, 0xeb572; lea rax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x00000000000aee08: adc eax, 0xec6b3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aedee: adc eax, 0xec6cd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a09e1: adc eax, 0xefa0a; cmove rax, rdx; ret; 
0x00000000000a0671: adc eax, 0xefd5a; cmove rax, rdx; ret; 
0x00000000000a0511: adc eax, 0xefeda; cmove rax, rdx; ret; 
0x00000000000a05d1: adc eax, 0xf03aa; cmove rax, rdx; ret; 
0x00000000000a0450: adc eax, 0xf0a1b; cmovne rax, rdx; ret; 
0x000000000009f142: adc eax, 0xf1a09; cmovne rax, rdx; ret; 
0x000000000011ff57: adc eax, 0xf7000cbf; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc57: adc eax, 0xf7000cc2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc57: adc eax, 0xf7000dc2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea57: adc eax, 0xf7000dd4; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000102757: adc eax, 0xf7000e97; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b57: adc eax, 0xf7001093; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000bc048: adc eax, 0xf880272; ret; 
0x000000000012da7d: adc eax, 0xfff8e01e; cmove rax, rdx; ret; 
0x000000000012d9bd: adc eax, 0xfff8e0fe; cmove rax, rdx; ret; 
0x000000000012d8fd: adc eax, 0xfff8e1be; cmove rax, rdx; ret; 
0x000000000012daf4: adc eax, 0xfff8e477; lea rax, [rip - 0x71c10]; cmovne rax, rdx; ret; 
0x000000000012d00f: adc eax, 0xfffffefc; test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x00000000000d0fba: adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0e9a: adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000010d24d: adc eax, 0xffffff8e; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000615b6: adc eax, 0xfffffff; mov dh, 0x53; or al, 0xf6; ret 0xf40; 
0x00000000000bc043: adc eax, dword ptr [rax + 0x157701fa]; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000639ce: adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000090085: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000db2f4: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000018537e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182439: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001143e1: adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114440; ret; 
0x00000000000e4fb9: adc eax, dword ptr [rax]; add byte ptr [rdi + rcx*4 + 0x49], dh; cmp eax, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e4fe7: adc eax, dword ptr [rax]; add byte ptr [rdx + 0x7f], bh; cmovne rax, rdx; ret; 
0x0000000000095178: adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000000a4ef5: adc eax, dword ptr [rbp - 0x77]; ret 0x8b4b; 
0x0000000000139e19: adc eax, dword ptr [rbp - 0x7cb70012]; ret; 
0x00000000000422fc: adc eax, dword ptr [rcx + 0xe6]; xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x000000000011f634: adc eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f6b8; ret; 
0x00000000000b3aab: adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3acb: adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3aeb: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b0b: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3968: adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x00000000000b39ba: adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bb: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b673c: adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000186d7f: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000055a7d: adc eax, eax; ret; 
0x0000000000055bb6: adc eax, edx; pop rbp; pop rbx; ret; 
0x0000000000085941: adc ebp, ebx; retf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000a3878: adc ebp, ebx; sub al, byte ptr [rcx - 0x73]; push rbx; inc dword ptr [rbp + rcx*4 + 0x60]; add dword ptr [rcx - 0x7d], eax; ret 0x4801; 
0x0000000000141063: adc ebp, esi; dec dword ptr [rax + 0x39]; ret; 
0x000000000013058e: adc ebx, ebp; ret 0x8b48; 
0x0000000000132fd2: adc ecx, 0x6401000b; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000b9a1c: adc ecx, dword ptr [rax + 0x31]; retf 0x94c; ret 0xff48; 
0x0000000000048b4f: adc ecx, dword ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x0000000000121c44: adc ecx, dword ptr [rax - 0x39]; add eax, 0xca710; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000b7911: adc ecx, dword ptr [rax - 0x73]; jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b9045: adc ecx, dword ptr [rax - 0x73]; jg 0xb905d; jne 0xb97d0; ret; 
0x000000000012fa4c: adc ecx, dword ptr [rax - 0x77]; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000010db33: adc ecx, dword ptr [rax - 0x7d]; in al, dx; sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x00000000000469b1: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000019712c: adc ecx, dword ptr [rbp - 0x77]; ret 0x94d; 
0x000000000002f254: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000006bba2: adc ecx, dword ptr [rcx + 0x415d5b28]; pop rsp; ret; 
0x00000000000ffc3c: adc ecx, dword ptr [rcx + 0x6c0f66d0]; ret; 
0x00000000000b9071: adc ecx, dword ptr [rcx - 0x7d]; call 0x7f98d88d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000ed9eb: adc ecx, dword ptr [rcx - 0x7d]; ret 0x4d10; 
0x00000000000b3b34: adc ecx, dword ptr [rdx + 5]; mov rax, rdi; ret; 
0x00000000000b3b54: adc ecx, dword ptr [rdx + 6]; mov rax, rdi; ret; 
0x00000000000b3b74: adc ecx, dword ptr [rdx + 7]; mov rax, rdi; ret; 
0x00000000000b39be: adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b67a5: adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x000000000014c577: adc ecx, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000001112ff: adc ecx, esi; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000013b90f: adc edi, dword ptr [rax - 1]; ret; 
0x0000000000113300: adc edi, eax; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x0000000000113251: adc edi, eax; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x000000000011cc22: adc edx, dword ptr [rdx - 0x7ab7fff7]; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x0000000000056aea: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000055a75: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000083ab7: adc esi, esi; ret 0xf20; 
0x000000000015dc1c: adc esp, dword ptr [rsi + 0x39]; ret 0x5074; 
0x000000000009255f: adc esp, dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000186f62: adc qword ptr [r8], rax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000a444e: adc qword ptr [rax], rax; add byte ptr [rcx - 9], al; ret; 
0x000000000018fe1c: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe23: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe2a: adc qword ptr [rcx + 7], rdi; ret; 
0x000000000018fac5: adc qword ptr [rcx - 1], rbx; ret; 
0x000000000018fa89: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000018fabe: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fcbc: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa82: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcb5: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa7b: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcae: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa74: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fab7: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001901c4: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018ff77: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff7e: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff85: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff8c: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000018fab1: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001901be: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901df: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190304: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019030b: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190312: adc qword ptr [rsi + 3], rdx; ret; 
0x00000000001903a1: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903a8: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903af: adc qword ptr [rsi + 7], rdx; ret; 
0x00000000001901b1: adc qword ptr [rsi - 1], rdx; ret; 
0x00000000001901aa: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a3: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019019c: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001902fe: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000055a74: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000008d7a2: adc r11b, r13b; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000014fdc6: adc r11b, r14b; movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150706: adc r11b, r14b; movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bbfc9: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000001825a0: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000b9070: adc r9d, dword ptr [r9 - 0x7d]; call 0x7f98d88d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000a7cd7: adc rax, -0x1f3eb6ff; or byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000098118: adc rax, 0x51894900; or byte ptr [rax + 0x39], cl; ret; 
0x0000000000099fab: adc rax, 0x5b050f00; ret; 
0x0000000000055bb5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000056ae9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000bc132: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000bc117: add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000000bc217: add ah, bh; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000bc162: add ah, bh; inc dword ptr [rbx]; ret; 
0x00000000001907a4: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x1907af; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019092e: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x190939; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019030e: add ah, byte ptr [rdx - 0xf]; jl 0x19035b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000000b3b2c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bc: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b39bb: add ah, byte ptr [rsi + 0xf]; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x0000000000089ef5: add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x000000000017ab33: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a48: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000000b39e4: add ah, byte ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000b3acc: add ah, byte ptr [rsi - 0x75]; or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000baf65: add ah, byte ptr [rsi - 0x77]; js 0xffffffffed3bb1c5; mov byte ptr [rdi + 3], ch; ret; 
0x0000000000121fab: add ah, byte ptr [rsi - 0x7d]; clc; push qword ptr [rsi + rbp - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x000000000002a3e7: add al, 0; add bh, dh; ret 0xf800; 
0x0000000000036894: add al, 0; add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x000000000017e7ed: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000183339: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e811: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000ef964: add al, 0; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000024128: add al, 0; add byte ptr [rax - 0x7f], cl; ret 0x988; 
0x000000000014d113: add al, 0; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000cfb53: add al, 0; add byte ptr [rax], al; ret; 
0x000000000010d4b4: add al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x00000000000623e6: add al, 0; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000002a3df: add al, 0; add byte ptr [rbp + 0xe880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000078803: add al, 0; add byte ptr [rbx - 0x78f0d008], al; sbb eax, 0x8900000b; ret 0xc083; 
0x00000000000ef95b: add al, 0; add byte ptr [rbx - 0x7bf0fd02], al; mov dword ptr [rax + rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000080fca: add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x00000000000ecafb: add al, 0; add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 + 0x63], r9b; ret; 
0x000000000008925b: add al, 0; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000013e366: add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x00000000000e6ec7: add al, 0; add byte ptr [rdi], cl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x000000000013f755: add al, 0; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000094e4a: add al, 0; add byte ptr [rsi + 1], dh; ret; 
0x000000000005d107: add al, 0; add dh, dh; ret; 
0x0000000000094189: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000012d97a: add al, 0; cmovne rax, rdx; ret; 
0x0000000000048272: add al, 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000e9a78: add al, 0; or byte ptr [rax + 0xf], 0xa3; ret 0x830f; 
0x000000000014ae94: add al, 0x10; mov byte ptr [rdi + 7], al; ret; 
0x00000000000529eb: add al, 0x10; mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000123279: add al, 0x10; shr eax, cl; and eax, 1; ret; 
0x0000000000122c3a: add al, 0x10; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x000000000012336a: add al, 0x11; ret; 
0x00000000000bc1b4: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000bc738: add al, 0x16; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x000000000017ea7b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e66b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017e177: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e987: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e3fb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e73b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017ea57: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017eb27: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e8db: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e0cb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017e4cb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017e9ab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017e19b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017e23d: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e59b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017e80b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e261: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000018809f: add al, 0x17; lea rdx, [rip + 0x13418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001866ea: add al, 0x17; lea rdx, [rip + 0x14dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001837df: add al, 0x17; lea rdx, [rip + 0x17cd8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750bf: add al, 0x17; lea rdx, [rip + 0x263f8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b5a: add al, 0x17; lea rdx, [rip + 0x2895d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b143f: add al, 0x17; lea rdx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aedea: add al, 0x17; lea rdx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a13eb: add al, 0x17; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000aa3f5: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183c0c: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa38a: add al, 0x17; sub eax, ecx; ret; 
0x000000000018ac3e: add al, 0x17; vzeroupper; ret; 
0x0000000000152bf8: add al, 0x1c; add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000102a39: add al, 0x21; int1; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x000000000003007e: add al, 0x24; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001156cd: add al, 0x24; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x00000000000429f3: add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010e9d7: add al, 0x24; add rsp, 0x18; ret; 
0x0000000000120371: add al, 0x24; add rsp, 0x20; pop rbp; ret; 
0x000000000010c1c5: add al, 0x24; add rsp, 0x28; ret; 
0x0000000000120437: add al, 0x24; add rsp, 0x30; pop rbp; ret; 
0x0000000000196cc1: add al, 0x24; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122918: add al, 0x24; add rsp, 0x38; ret; 
0x0000000000122979: add al, 0x24; add rsp, 0x40; ret; 
0x000000000004288d: add al, 0x24; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x0000000000196935: add al, 0x24; call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010e9cf: add al, 0x24; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000014e565: add al, 0x24; jne 0x14e5ca; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001412ce: add al, 0x24; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c884: add al, 0x24; mov rdx, qword ptr [rsp + 8]; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x000000000012530b: add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094c47: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000102869: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000002440e: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000118292: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1182a2; add rsp, 0xd8; ret; 
0x000000000011836b: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11837b; add rsp, 0xd8; ret; 
0x000000000011bd27: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bde7: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc5: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c22e: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c49b: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x0000000000129b49: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b872: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12b882; add rsp, 0xd8; ret; 
0x0000000000153a55: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac5: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b35: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b96: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bfa: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c65: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce8: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153cf5; add rsp, 0x78; ret; 
0x000000000015421d: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c90: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000042b8f: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db7: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e04: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578bc: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57945; leave; ret; 
0x000000000008dbd2: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a45: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000013c3f5: add al, 0x2b; pop rbx; pop rbp; ret; 
0x000000000005f367: add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x00000000000baf99: add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafab: add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b1abe: add al, 0x31; ret; 
0x00000000000d4242: add al, 0x31; rol byte ptr [rcx - 0x5c28f401], 0; setb al; add eax, 0x16d; ret; 
0x00000000000b19ba: add al, 0x37; ret; 
0x0000000000184239: add al, 0x38; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x00000000000bdfb6: add al, 0x39; bnd je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x000000000009696c: add al, 0x39; ret; 
0x00000000000a87b0: add al, 0x39; sal byte ptr [rbp - 0x15], 1; mov rax, r8; ret; 
0x0000000000087def: add al, 0x3a; ret; 
0x00000000000cef42: add al, 0x3b; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000c6a9e: add al, 0x44; mov eax, eax; ret; 
0x00000000000cf15b: add al, 0x44; mov eax, ecx; ret; 
0x00000000000bcc31: add al, 0x48; add eax, 4; test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x000000000011f2ac: add al, 0x48; add esp, 0x20; pop rbp; ret; 
0x0000000000120bff: add al, 0x48; add esp, 0x28; ret; 
0x000000000010c3d5: add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000005b331: add al, 0x48; cmp edi, eax; jbe 0x5b32a; mov rax, r10; ret; 
0x00000000000b84fb: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000000b8e4b: add al, 0x48; lea eax, [rdi + 5]; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b934b: add al, 0x48; lea eax, [rdi + 6]; ret; 
0x00000000000a8b6d: add al, 0x48; lea eax, [rdi + rdx - 1]; ret; 
0x000000000017ab29: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000017ab3b: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000017860a: add al, 0x48; lea ecx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017c9bb: add al, 0x48; lea ecx, [rdx + 4]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a4b7: add al, 0x48; lea edi, [rdi + 4]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1eb: add al, 0x48; lea edi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b7727: add al, 0x48; lea edi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e0b: add al, 0x48; lea edi, [rdi + 4]; jne 0xb97d0; ret; 
0x0000000000094e72: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x000000000008558c: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000016da2a: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000000860c2: add al, 0x48; mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x0000000000116daf: add al, 0x48; mov dword ptr [rdx + 8], eax; test rax, rax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x00000000000b3a2e: add al, 0x48; mov eax, edi; ret; 
0x0000000000178629: add al, 0x48; mov eax, edi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017864b: add al, 0x48; mov eax, edi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000016da23: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b1d68: add al, 0x48; xor eax, eax; ret; 
0x000000000014a5fa: add al, 0x48; xor eax, edx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000b8e2a: add al, 0x49; sub eax, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b776b: add al, 0x49; sub eax, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bce03: add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x000000000013c765: add al, 0x4c; lea eax, [rdi + rsi + 8]; mov rax, r8; ret; 
0x000000000012ceb8: add al, 0x50; shr ax, 0xe; and eax, 1; ret; 
0x000000000010c46f: add al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000010c4fd: add al, 0x5b; pop rbp; pop r12; ret; 
0x000000000017ab37: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a4c: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000002f252: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000018fb3b: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000c6b41: add al, 0x72; pushfq; mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x00000000000bc041: add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x000000000010d128: add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x000000000013bcec: add al, 0x74; sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000ec4a2: add al, 0x74; xchg edi, eax; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000041237: add al, 0x75; out 0x45, al; mov ebx, dword ptr [rax + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000047866: add al, 0x75; push rcx; add rsp, 0x18; ret; 
0x000000000014e16a: add al, 0x75; ret; 
0x00000000000341c4: add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a4: add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034184: add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034104: add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034144: add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a4: add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034124: add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e4: add al, 0x78; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000034244: add al, 0x78; and eax, 1; ret; 
0x00000000000340c4: add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000034164: add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x0000000000034084: add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x00000000000bc79c: add al, 0x80; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000bc742: add al, 0x81; je 0xbc728; ret; 
0x000000000017ff1b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000047c2d: add al, 0x81; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000bc73e: add al, 0x81; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000001817f3: add al, 0x81; sub eax, edx; ret; 
0x00000000001229e8: add al, 0x82; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000aedf7: add al, 0x82; sub eax, ecx; ret; 
0x00000000000602b6: add al, 0x83; ret 0x4802; 
0x000000000013c56e: add al, 0x83; ret 0x8108; 
0x000000000005f4ac: add al, 0x83; ret; 
0x00000000000438a8: add al, 0x83; rol byte ptr [rcx], 0xf7; ret 0; 
0x00000000000bcc35: add al, 0x85; sal byte ptr [rbp - 0x12], cl; xor eax, eax; ret; 
0x000000000012edcb: add al, 0x85; sal byte ptr [rbp - 0x57], 0x48; mov eax, edi; ret; 
0x00000000000bdfba: add al, 0x85; sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000123276: add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000017ab26: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000000b3a2b: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000bc7a0: add al, 0x88; je 0xbc780; ret; 
0x00000000000b7744: add al, 0x89; cmovns eax, dword ptr [rbx - 0x72b7fa18]; jg 0xb7754; jne 0xb7f80; ret; 
0x00000000000b8e24: add al, 0x89; cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f98d637; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000baf94: add al, 0x89; js 0xffffffffed3bb3f3; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafa5: add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000001575d7: add al, 0x89; push rax; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000075515: add al, 0x89; ret 0xf41; 
0x00000000000b3a14: add al, 0x8b; add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x00000000000ee1b2: add al, 0x8b; push rbp; add al, 1; ret 0x341; 
0x000000000014d058: add al, 0x8f; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000bce3a: add al, 0x98; pop rbx; pop rbp; pop r12; ret; 
0x0000000000091e42: add al, 0xa8; add dword ptr [rcx + rbp - 0x77], esi; ret 0xff3; 
0x0000000000121cf3: add al, 0xa; cmp rax, qword ptr [rip + 0xcdd54]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000123112: add al, 0xa; ret; 
0x0000000000157907: add al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000003445c: add al, 0xb8; ret; 
0x000000000005f364: add al, 0xc7; add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000055849: add al, 0xc8; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000005584d: add al, 0xc9; xor eax, eax; ret; 
0x00000000000dd75c: add al, 0xd0; ret; 
0x000000000005b92e: add al, 0xd1; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000160a9b: add al, 0xd7; xor eax, eax; ret; 
0x00000000000bc80d: add al, 0xd; add byte ptr [rax - 0x73], cl; add eax, 0x129c9; cmove rax, rdx; ret; 
0x0000000000120bf6: add al, 0xe8; cmp r14b, dil; dec dword ptr [rbx + 0x48042444]; add esp, 0x28; ret; 
0x00000000000c7aa1: add al, 0xe8; leave; ret 0xfff6; 
0x000000000010c5de: add al, 0xeb; ret; 
0x000000000016dd93: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000105ebc: add al, 0xf7; ret 0xfffd; 
0x00000000000a05cc: add al, 0xf; add byte ptr [rax - 0x73], cl; adc eax, 0xf03aa; cmove rax, rdx; ret; 
0x00000000000340a9: add al, 0xf; mov bh, 0xc0; ret; 
0x00000000000a8b9e: add al, 0xf; mov dh, 0x44; and al, 0xe; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8a01: add al, 0xf; mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8abe: add al, 0xf; mov dh, 0x54; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x000000000017e02d: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000184dd6: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000157594: add al, 0xf; retf 0x1689; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157554: add al, 0xf; retf 0x5089; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000140d76: add al, 0xf; test byte ptr [rbx - 0x7d000000], ah; ret 0x4801; 
0x00000000000cef45: add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x000000000017c9bf: add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000b772b: add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x0000000000081ec0: add al, 0xfa; inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000001220ae: add al, 0xfd; sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x000000000014d103: add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000013bcce: add al, 1; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000cef78: add al, 1; add byte ptr [rax], al; ret; 
0x000000000010f3f8: add al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f407; ret; 
0x0000000000062fbb: add al, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec468: add al, 1; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000de23d: add al, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ee1b5: add al, 1; ret 0x341; 
0x0000000000119825: add al, 1; ror dword ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000063032: add al, 1; xor eax, eax; ret; 
0x0000000000033dfd: add al, 2; mov eax, r8d; ret; 
0x000000000014933e: add al, 2; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000033d9b: add al, 2; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x000000000017ca48: add al, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018e857: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7878: add al, 7; add byte ptr [rax], al; ret; 
0x00000000000b14d1: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018cc9e: add al, 7; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018815e: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b16fc: add al, 7; ret; 
0x0000000000055c39: add al, 7; sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x000000000018b2f4: add al, 7; vzeroupper; ret; 
0x000000000008cd57: add al, 8; add byte ptr [rax], al; ret; 
0x00000000001229eb: add al, 8; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000aa55f: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183d89: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000ff3b1: add al, 9; ret; 
0x00000000000fe436: add al, al; call 0x7c932c3f; and al, 8; add byte ptr [rdi], cl; xchg esp, eax; ret 0xd020; 
0x000000000012faf7: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fb85: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000114589: add al, bh; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000000a2289: add al, bh; dec dword ptr [rcx - 0x77]; add byte ptr [r8 - 0x7b], r9b; sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x00000000000bc201: add al, bh; jg 0xbc1fc; int1; mov eax, eax; ret; 
0x000000000011963f: add al, bl; retf 0xed83; add ecx, ebx; ret; 
0x00000000000e83af: add al, byte ptr [r8 - 0x6bf0a206]; ret 0xb60f; 
0x0000000000187e62: add al, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000b69f1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x00000000000e83b0: add al, byte ptr [rax - 0x6bf0a206]; ret 0xb60f; 
0x000000000012b966: add al, byte ptr [rax]; add al, ch; ret 0xfffc; 
0x000000000002a96f: add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x00000000000a5dc2: add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000f954d: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret 0x7a8d; 
0x00000000000f089c: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000f8fa2: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf8f30; ret 0x4801; 
0x00000000000abf42: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000018417a: add al, byte ptr [rax]; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000116755: add al, byte ptr [rax]; add byte ptr [rax - 0x3d7cb7fe], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001191cf: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xd66e7; add rsp, 0x18; ret; 
0x0000000000118c87: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xd6bdf; add rsp, 8; ret; 
0x000000000006a8aa: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; lea edx, [rax - 0x7c000005]; ret 0x4830; 
0x00000000000e3a59: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000010f89a: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001904b8: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000194d51: add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000017ca7b: add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000017e98d: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013738b: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x00000000001815b1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e9b1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000006e3e3: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000033c86: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000057b3c: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000057d4f: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x00000000001413e3: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001412b1: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x000000000011d5d5: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000102a85: add al, byte ptr [rax]; add byte ptr [rax], al; cmove eax, edx; ret; 
0x0000000000057d55: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000013c16d: add al, byte ptr [rax]; add byte ptr [rax], al; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000148211: add al, byte ptr [rax]; add byte ptr [rax], al; test eax, eax; je 0x148220; xor eax, eax; ret; 
0x000000000011d01a: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000012b67d: add al, byte ptr [rax]; add byte ptr [rbp + 0x2e], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086bab: add al, byte ptr [rax]; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000009a496: add al, byte ptr [rax]; add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x000000000002a967: add al, byte ptr [rax]; add byte ptr [rbp - 0x1a77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x0000000000098456: add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000099bd1: add al, byte ptr [rax]; add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000018f76e: add al, byte ptr [rax]; add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18f9a6; xor eax, eax; ret; 
0x0000000000044586: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000f0b02: add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x00000000001041cf: add al, byte ptr [rax]; add byte ptr [rbx - 0x76b7fd07], al; ret 0x940f; 
0x00000000001921f4: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000125784: add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; pop r13; ret; 
0x000000000009849b: add al, byte ptr [rax]; add byte ptr [rcx - 0x73], cl; push rbp; and byte ptr [rax + 0x39], cl; ret 0x860f; 
0x0000000000080886: add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x00000000000a4435: add al, byte ptr [rax]; add byte ptr [rcx - 9], al; ret; 
0x00000000000d79b9: add al, byte ptr [rax]; add byte ptr [rdi], cl; mov bh, 5; cmp eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000001269ad: add al, byte ptr [rax]; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000010cbb6: add al, byte ptr [rax]; add dh, dh; ret 0xf02; 
0x000000000010cbad: add al, byte ptr [rax]; add dh, dh; ret 0xf80; 
0x00000000000d683a: add al, byte ptr [rax]; add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x0000000000197272: add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x000000000018ac08: add al, byte ptr [rax]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000172b61: add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000011cc48: add al, byte ptr [rax]; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x000000000010db4a: add al, byte ptr [rax]; nop dword ptr [rax]; endbr64; mov eax, 0x5f; syscall; ret; 
0x0000000000134b4b: add al, byte ptr [rax]; pop r12; pop r13; ret; 
0x000000000013c5df: add al, byte ptr [rax]; ret; 
0x0000000000189178: add al, byte ptr [rax]; vzeroupper; ret; 
0x0000000000033d9c: add al, byte ptr [rbp + 0x440775c0]; mov eax, eax; ret; 
0x000000000013c527: add al, byte ptr [rbp - 0x77]; sbb byte ptr [rbx + 0x49], bl; mov dword ptr [rcx], ecx; ret; 
0x000000000013c237: add al, byte ptr [rbp - 0x78]; dec dword ptr [rcx + r9*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000012955d: add al, byte ptr [rbx + 0x194501f9]; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000000062f29: add al, byte ptr [rbx + 0x277426f8]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000011f7b7: add al, byte ptr [rbx + 0x377426f8]; mov eax, r8d; ret; 
0x0000000000121f6b: add al, byte ptr [rbx + 0x6f74fff8]; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x000000000014ff1a: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d13a: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000013a776: add al, byte ptr [rbx - 0x79f0f008]; clc; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000e6ecd: add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x00000000000945f2: add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000102831: add al, byte ptr [rcx + rcx*4 - 0x38]; ret; 
0x0000000000033dfe: add al, byte ptr [rcx + rcx*4 - 0x40]; ret; 
0x00000000000d4234: add al, byte ptr [rcx - 0x70a3d706]; add dh, byte ptr [rsi + 3]; ret; 
0x000000000006fd9d: add al, byte ptr [rcx - 9]; ret; 
0x000000000013bcf8: add al, byte ptr [rcx]; add byte ptr [rax], al; cmovne eax, edx; ret; 
0x000000000010dc85: add al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc94; ret; 
0x00000000000d13bf: add al, byte ptr [rcx]; ret; 
0x0000000000119074: add al, byte ptr [rcx]; sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000cfac6: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0xcfaf0; ret; 
0x0000000000057c33: add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000000b797a: add al, byte ptr [rsi]; add byte ptr [rax], al; ret; 
0x000000000010c7a9: add al, ch; adc dword ptr [rax], ecx; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000139e17: add al, ch; adc eax, dword ptr [rbp - 0x7cb70012]; ret; 
0x0000000000140b9a: add al, ch; add byte ptr [rbx - 0x10], dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000dfc09: add al, ch; add dword ptr [rdi + 6], ecx; add byte ptr [rbx + rcx*4 + 5], cl; pop rdx; ret 0x10; 
0x0000000000138a06: add al, ch; cdq; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000158ac6: add al, ch; cmp dword ptr fs:[rax], eax; add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x0000000000116142: add al, ch; cwde; ret 0xfff0; 
0x0000000000125c90: add al, ch; fcmovb st(0), st(6); out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000f4cff: add al, ch; fdiv st(2); dec dword ptr [rax - 0x77]; ret; 
0x0000000000140bbf: add al, ch; fist dword ptr [rdx - 0x10]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000df786: add al, ch; in al, 0x2b; hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000113b27: add al, ch; jae 0x113b33; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000f57d6: add al, ch; je 0xf57a7; dec dword ptr [rax - 0x77]; ret; 
0x00000000000df5b6: add al, ch; mov ah, 0x2d; hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014c4b6: add al, ch; mov ah, 0x5e; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000125ab6: add al, ch; mov ah, 0xc8; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000123fb9: add al, ch; mov cl, 0xe3; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000f9754: add al, ch; mov dh, 0x8b; dec dword ptr [rax - 0x77]; ret; 
0x000000000002c9ff: add al, ch; mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000008e58a: add al, ch; movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000000e2fc9: add al, ch; movabs eax, dword ptr [0x415de88944fffb1a]; pop rsp; pop r13; ret; 
0x00000000001320c6: add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; add ch, bh; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001383c6: add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; mov edx, 0x89480000; ret; 
0x00000000000d2d0a: add al, ch; nop; xor edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001112fc: add al, ch; pop rsi; adc ecx, esi; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000009901e: add al, ch; pop rsp; ret 0xffff; 
0x0000000000045fee: add al, ch; pop rsp; ret; 
0x0000000000198890: add al, ch; push 0x1f; clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x553de], 0; ret; 
0x000000000012a2aa: add al, ch; push rax; fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000011618a: add al, ch; push rax; ret 0xfff0; 
0x000000000012a7aa: add al, ch; push rax; sar edi, cl; dec dword ptr [rcx]; ret; 
0x0000000000162146: add al, ch; push rsp; cmp eax, 0x8948ffee; ret; 
0x0000000000140b46: add al, ch; push rsp; push rbx; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015a28e: add al, ch; pushfq; and dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; fild dword ptr [rcx - 0x77]; ret 0xf883; 
0x00000000000c66c8: add al, ch; ret 0xf6d8; 
0x000000000015e268: add al, ch; ret 0xfafe; 
0x000000000005adc8: add al, ch; ret 0xfd91; 
0x000000000004c1c8: add al, ch; ret 0xfe7d; 
0x000000000010ec38: add al, ch; ret 0xffe8; 
0x000000000012b968: add al, ch; ret 0xfffc; 
0x0000000000024a67: add al, ch; ret; 
0x0000000000028edf: add al, ch; stosd dword ptr [rdi], eax; mov al, 0; add byte ptr [rcx - 0x77], al; ret 0xcde9; 
0x0000000000140b70: add al, ch; sub dl, byte ptr [rbx - 0x10]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000091f2f: add al, ch; sub edi, dword ptr [rdi + rdi*8 + 0x6693ebff]; nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014c2e6: add al, ch; test byte ptr [rax - 0x13], ah; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000118c84: add al, ch; test byte ptr [rdx], 0; add byte ptr [rax - 0x73], cl; add eax, 0xd6bdf; add rsp, 8; ret; 
0x0000000000123de6: add al, ch; test ch, ah; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000112564: add al, ch; xchg esi, eax; ret 0xffff; 
0x0000000000132ad6: add al, ch; xchg esp, eax; clc; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000e17d6: add al, ch; xchg esp, eax; or esi, esp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000e7666: add al, ch; xor al, 0xe8; cmc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000057c31: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x000000000011442f: add bh, al; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x00000000000469af: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000014a3af: add bh, bh; add byte ptr [rax + 0x31], cl; ret 0xc148; 
0x00000000001952e3: add bh, bh; dec dword ptr [rcx + 0x21]; ret; 
0x00000000000425f2: add bh, bh; jg 0x4263e; sub eax, edx; shr rax, 0x3f; ret; 
0x000000000010c76c: add bh, bh; jne 0x10c775; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000014cfc0: add bh, bh; loope 0x14d02a; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x00000000000ce098: add bh, bh; ret; 
0x0000000000146383: add bh, bh; ror byte ptr [rax - 0x73], 1; add eax, 0xaa773; add rsp, 8; ret; 
0x0000000000038581: add bh, bh; ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd891: add bh, bh; ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057b79: add bh, byte ptr [rax + 1]; ret; 
0x0000000000057da8: add bh, byte ptr [rax + 2]; ret; 
0x000000000004342b: add bh, byte ptr [rax - 1]; ret; 
0x0000000000129def: add bh, byte ptr [rcx]; ret 0x840f; 
0x00000000001953e4: add bh, dh; fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x00000000000433ea: add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000043426: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000048286: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142ae: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000002a3f5: add bh, dh; ret 0; 
0x000000000002a3e9: add bh, dh; ret 0xf800; 
0x0000000000048d9f: add bh, dh; ret 0xffef; 
0x00000000000a5dc4: add bh, dh; ret; 
0x0000000000041c6b: add bl, bl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x0000000000041dcf: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x00000000000e8432: add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x0000000000116911: add bl, byte ptr [rax + rsi + 0x31]; xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x00000000001168d1: add bl, byte ptr [rax + rsi + 0x31]; xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x0000000000116596: add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000116774: add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x8004; 
0x000000000014933f: add bl, byte ptr [rbx + 0x5d]; mov eax, r8d; ret; 
0x00000000000e8433: add bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000949f9: add bl, byte ptr [rsi + 0x5b010015]; ret; 
0x00000000000d358b: add bl, ch; or dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000148ea8: add bl, ch; ret 0x2bf; 
0x00000000000812f3: add bl, ch; ret 0x43c7; 
0x000000000010c4ab: add bl, ch; ret 0x9066; 
0x00000000000c058e: add bl, ch; ret 0xc748; 
0x00000000000e324d: add bl, ch; ret; 
0x000000000010c5f4: add bl, ch; retf 0xcb8; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000001848ed: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000004245f: add bl, dh; addps xmm0, xmm0; ret; 
0x00000000001847af: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018479f: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000197273: add bl, dh; divps xmm0, xmmword ptr [rip + 0x27418]; ret; 
0x000000000015078f: add bl, dh; movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d067: add bl, dh; movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b7c4f: add bl, dh; movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b6f6f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f8f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b700f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6fcf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6fef: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b70af: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b860f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f5f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000015079f: add bl, dh; movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d077: add bl, dh; movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014831f: add bl, dh; movq mm1, qword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000010d0cc: add bl, dh; movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d0d8: add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000bbf2b: add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7f2f: add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7f3f: add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x0000000000042406: add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17af79]; ret; 
0x00000000000423e1: add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x00000000000b6f6e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f8e: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b700e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6fee: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000015079e: add bl, sil; movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d076: add bl, sil; movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000018a6be: add bpl, al; cli; jg 0x18a6cb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b3ee: add bpl, al; cli; jg 0x18b3fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000011255f: add byte ptr [r10], r8b; add byte ptr [rax], al; add al, ch; xchg esi, eax; ret 0xffff; 
0x00000000000f595a: add byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x000000000011c5c3: add byte ptr [r11 + rcx*4 + 0x7d], r9b; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000926b7: add byte ptr [r8 + 1], r15b; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x00000000000d2f3d: add byte ptr [r8 + 9], r9b; ret 0x850f; 
0x0000000000093465: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x0000000000081f13: add byte ptr [r8 - 0x77], r9b; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x00000000000a2297: add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x000000000010534f: add byte ptr [r8 - 0x77], r9b; ret 0xb70f; 
0x00000000000a228e: add byte ptr [r8 - 0x7b], r9b; sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x000000000006669f: add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000012e208: add byte ptr [r8 - 0x7d], r9b; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20; 
0x00000000000c2e25: add byte ptr [r8], al; add byte ptr [rcx + 0x63], cl; ret 0x8945; 
0x00000000000d005d: add byte ptr [r8], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x00000000000a20c0: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000014de62: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a3fe7: add byte ptr [r9 + 0xf], 0x93; ret; 
0x00000000000a037f: add byte ptr [r9 + rcx*4 - 0x20], r9b; pop rbp; pop r12; pop r13; ret; 
0x0000000000048070: add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000013bcf6: add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x0000000000063027: add byte ptr [rax + 0x10], bh; ret; 
0x0000000000113b59: add byte ptr [rax + 0x10], bh; syscall; cmp rax, -0x1000; ja 0x113bb8; ret; 
0x000000000011f238: add byte ptr [rax + 0x119], bh; syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x0000000000190d9e: add byte ptr [rax + 0x1478d48], dl; ret; 
0x00000000000b92de: add byte ptr [rax + 0x1788168a], dl; lea rax, [rdi + 1]; ret; 
0x00000000000529f1: add byte ptr [rax + 0x19bc6d05], cl; add byte ptr [rax - 0x73], cl; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000cf55e: add byte ptr [rax + 0x1a948], dl; add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cefaf: add byte ptr [rax + 0x1b740fe6], al; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cef4f: add byte ptr [rax + 0x1b740fe6], al; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x0000000000192acf: add byte ptr [rax + 0x1b740fe6], al; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x000000000004229f: add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000e506b: add byte ptr [rax + 0x20], bh; cmove rax, rdx; ret; 
0x0000000000192db2: add byte ptr [rax + 0x21], cl; ret 0x8548; 
0x0000000000051bcf: add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x00000000000bcdf5: add byte ptr [rax + 0x21], cl; ret 0x8d48; 
0x00000000000d4ffb: add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x00000000000299ae: add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x000000000015eb67: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000015f7c4: add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x000000000007a3be: add byte ptr [rax + 0x29], cl; ret; 
0x000000000009939b: add byte ptr [rax + 0x29], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x00000000000d085c: add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000ec3ce: add byte ptr [rax + 0x2c755ef9], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x000000000014a3b1: add byte ptr [rax + 0x31], cl; ret 0xc148; 
0x0000000000095527: add byte ptr [rax + 0x39], cl; cmp eax, 0x159961; jbe 0x954d8; add rsp, 8; ret; 
0x00000000001087fe: add byte ptr [rax + 0x39], cl; ret 0x2e74; 
0x000000000010a5a0: add byte ptr [rax + 0x39], cl; ret 0x3074; 
0x0000000000106ff2: add byte ptr [rax + 0x39], cl; ret 0x6076; 
0x0000000000107528: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000008e947: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000094813: add byte ptr [rax + 0x39], cl; ret 0x8c75; 
0x00000000000a2f94: add byte ptr [rax + 0x39], cl; ret 0xc019; 
0x0000000000095dff: add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000002a5ab: add byte ptr [rax + 0x39], cl; ret; 
0x0000000000190ad7: add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x000000000018bc14: add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000000bcd05: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcf2d0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc845: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcfa60; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcfd00; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xd0360; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc805: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xd0410; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc955: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xd06e0; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xdbd70; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c75: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe2b80; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe4130; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe6650; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f805: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe8cf0; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f655: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe9070; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f695: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe91d0; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000001532f2: add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rax + 0x49], 1; mov eax, eax; mov rax, r8; pop rbx; ret; 
0x000000000012eb5b: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + 0x11], 1; lea rdx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x00000000001533b2: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153482: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153552: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x0000000000192abe: add byte ptr [rax + 0x3bf4478b], dl; hlt; jne 0x192be0; ret; 
0x00000000000cb183: add byte ptr [rax + 0x4428944], al; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000bc197: add byte ptr [rax + 0x485bf0e5], al; cmovne eax, edx; ret; 
0x000000000009f137: add byte ptr [rax + 0x48], al; lea eax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x0000000000041fc8: add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000136d0c: add byte ptr [rax + 0x578b4803], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000226bd: add byte ptr [rax + 0x5b], bl; pop rbp; ret; 
0x00000000001483de: add byte ptr [rax + 0x5d5bc031], dl; pop r12; ret; 
0x0000000000047861: add byte ptr [rax + 0x63], cl; and al, 4; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000013b6b1: add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x0000000000129ddd: add byte ptr [rax + 0x63], cl; ret 0x4864; 
0x00000000000a72fa: add byte ptr [rax + 0x63], cl; ret 0x4e8d; 
0x00000000000f954f: add byte ptr [rax + 0x63], cl; ret 0x7a8d; 
0x000000000018399b: add byte ptr [rax + 0x63], cl; ret 0x8348; 
0x00000000000d6852: add byte ptr [rax + 0x63], cl; ret 0x8941; 
0x0000000000030cf0: add byte ptr [rax + 0x63], cl; ret 0x8948; 
0x000000000010201f: add byte ptr [rax + 0x63], cl; ret 0x8b4d; 
0x00000000000fa7ee: add byte ptr [rax + 0x63], cl; ret 0xc283; 
0x00000000000d8423: add byte ptr [rax + 0x63], cl; ret 0xd789; 
0x000000000006251e: add byte ptr [rax + 0x63], cl; ret; 
0x00000000000f8fa4: add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf8f30; ret 0x4801; 
0x00000000000f907b: add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9007; ret 0x4801; 
0x00000000000f90f4: add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9080; ret 0x4901; 
0x000000000013c337: add byte ptr [rax + 0x63], cl; rol byte ptr [rcx + rcx*4 - 0x40], cl; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000000f142c: add byte ptr [rax + 0x63], cl; ror byte ptr [rdi], 1; mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x0000000000183a7f: add byte ptr [rax + 0x63], cl; ror dword ptr [rax + 1], 0xf8; ret; 
0x0000000000160a6b: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000148748: add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xe7603f8], r8b; mov eax, 2; ret; 
0x0000000000041f98: add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x00000000000bb0be: add byte ptr [rax + 0x66f0ff3], dl; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x0000000000041f55: add byte ptr [rax + 0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000042301: add byte ptr [rax + 0x7110ff3], al; movd xmm0, esi; ret; 
0x00000000000b69ef: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000116e6f: add byte ptr [rax + 0x7522017f], al; ret 0x8d48; 
0x000000000018a66f: add byte ptr [rax + 0x77f8c517], cl; ret; 
0x00000000000b849f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000b8d9f: add byte ptr [rax + 0x78d4837], cl; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x00000000000e4f81: add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x0000000000043408: add byte ptr [rax + 0x7f], bh; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000013c9bf: add byte ptr [rax + 0x7fffffff], bh; ret; 
0x0000000000043454: add byte ptr [rax + 0x82], bh; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x000000000014810e: add byte ptr [rax + 0x8c48348], dl; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000000cf00f: add byte ptr [rax + 0xb740fe6], al; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf05f: add byte ptr [rax + 0xb740fe6], al; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000f249f: add byte ptr [rax + 0xc], bh; ret; 
0x0000000000098da5: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa1: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a49: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x000000000009391f: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091017: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5f: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000047649: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198a99: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dc9: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x0000000000142459: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c22: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x00000000000630a3: add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000054ef9: add byte ptr [rax + 0xe], bh; syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000e6ebf: add byte ptr [rax + 0xf00017a], al; test byte ptr [rsi + 0xf000004], ah; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x00000000001619af: add byte ptr [rax + 0xf00017a], al; test byte ptr [rsi + 0xf000004], dl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000034148: add byte ptr [rax + 0xf], al; mov bh, 0xc0; ret; 
0x00000000000b1919: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000057d5f: add byte ptr [rax + 0xf], cl; mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x000000000010543f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480142; ret 0x8401; 
0x0000000000026d87: add byte ptr [rax + 0xf], cl; mov esi, 0x83480142; ret 0xf01; 
0x000000000012b30f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480143; ret; 
0x0000000000126a0f: add byte ptr [rax + 0xf], cl; mov esi, 0x8348014a; ret 0x4801; 
0x000000000012a49f: add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x00000000000e0947: add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x000000000009418a: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000e5017: add byte ptr [rax + 0xfc17], bh; ret; 
0x00000000000e5016: add byte ptr [rax + 0xfc17], dil; ret; 
0x00000000000e5147: add byte ptr [rax + 0xff], bh; ret; 
0x00000000000e5146: add byte ptr [rax + 0xff], dil; ret; 
0x00000000000dcfbd: add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x0000000000192bdf: add byte ptr [rax + 1], bh; jg 0x192bf0; neg eax; ret; 
0x00000000000cf07f: add byte ptr [rax + 1], bh; jg 0xcf089; neg eax; ret; 
0x0000000000057c2c: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000000926b8: add byte ptr [rax + 1], bh; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x0000000000149c96: add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c56f: add byte ptr [rax + 1], bh; pop rbx; ret; 
0x0000000000057b40: add byte ptr [rax + 1], bh; ret; 
0x00000000000abf44: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000001888f1: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001845b1: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000184af9: add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000000d062f: add byte ptr [rax + 1], cl; ret 0x6348; 
0x00000000000d680b: add byte ptr [rax + 1], cl; ret 0x7b8b; 
0x0000000000184af0: add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x000000000013b065: add byte ptr [rax + 1], cl; ret 0xe183; 
0x0000000000095624: add byte ptr [rax + 1], cl; ret; 
0x000000000010c56e: add byte ptr [rax + 1], dil; pop rbx; ret; 
0x000000000011635e: add byte ptr [rax + 1], dil; ret; 
0x0000000000057d53: add byte ptr [rax + 2], bh; ret; 
0x00000000000d0fb3: add byte ptr [rax + 3], cl; or byte ptr [rax - 0x73], cl; adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0e93: add byte ptr [rax + 3], cl; or byte ptr [rax - 0x73], cl; adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000018417c: add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000034548: add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000d2f3e: add byte ptr [rax + 9], cl; ret 0x850f; 
0x00000000000ea38f: add byte ptr [rax + rax*8 - 0x49f0e38c], al; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000037fe7: add byte ptr [rax + rax*8 - 0x49f0e78c], al; ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000639b1: add byte ptr [rax + rax*8 - 0x74b7cd8c], al; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000000a8727: add byte ptr [rax + rax*8 - 0x76b2d38c], al; ret; 
0x0000000000126ba7: add byte ptr [rax + rax*8 - 0x76b7f08c], al; ror dword ptr [rdi], 1; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x00000000000b7afc: add byte ptr [rax + rax], 0; ret; 
0x0000000000094188: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000009961c: add byte ptr [rax + rax], cl; add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000001142d1: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009809c: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, r8; ret; 
0x0000000000119792: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009e95d: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cf615: add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret; 
0x000000000002440a: add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000003421b: add byte ptr [rax + rcx*2 - 0x75], ah; adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000122992: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122e62: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122b52: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122ac2: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122d22: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122dc2: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122ef2: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000123022: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122a22: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122c82: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000000bda08: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000001984e3: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015326a: add byte ptr [rax + rcx*2 - 0x77], ah; add ebx, dword ptr [rbx - 0x39]; add eax, 0x9dba6; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000a2055: add byte ptr [rax + rdx + 0x5b], dh; pop rbp; pop r12; ret; 
0x000000000014eb94: add byte ptr [rax - 0x168b7f80], 0x89; ret 0xeac1; 
0x00000000000b76bf: add byte ptr [rax - 0x177cb6c9], cl; add dword ptr [rax - 0x73], ecx; jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000ec3ff: add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x000000000008ce59: add byte ptr [rax - 0x17c801b], 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000009f759: add byte ptr [rax - 0x197fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xaef9; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a08d2: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xe560; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0832: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xe5e0; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x0000000000135d6c: add byte ptr [rax - 0x2976178c], 0xc1; out dx, al; adc bh, dh; ret 0x8080; 
0x0000000000042364: add byte ptr [rax - 0x3991f09a], al; ret; 
0x000000000009393e: add byte ptr [rax - 0x39], cl; add eax, 0x15ae7e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000015d36d: add byte ptr [rax - 0x39], cl; add eax, 0x93dc7; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121c9e: add byte ptr [rax - 0x39], cl; add eax, 0xca6b6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c75: add byte ptr [rax - 0x39], cl; add eax, 0xca6df; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c1e: add byte ptr [rax - 0x39], cl; add eax, 0xca736; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121872: add byte ptr [rax - 0x39], cl; add eax, 0xcaae2; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001176c5: add byte ptr [rax - 0x39], cl; add eax, 0xd80bf; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000115e98: add byte ptr [rax - 0x39], cl; add eax, 0xd979c; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000583dc: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000049d2f: add byte ptr [rax - 0x39], cl; ret; 
0x00000000000cfb3f: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb7f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb2f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb6f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000000e5b00: add byte ptr [rax - 0x39], cl; test dword ptr [rax + 0x40fffffd], edi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x0000000000116757: add byte ptr [rax - 0x3d7cb7fe], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000041b79: add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x00000000001887de: add byte ptr [rax - 0x3f43f00d], dl; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000015b65d: add byte ptr [rax - 0x3f], cl; cli; adc cl, byte ptr [rax + 0x29]; retf 0x148; ret 0x2949; 
0x0000000000023a4a: add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x000000000013058a: add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0xeb; ret 0x8b48; 
0x00000000000226ab: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000002fefd: add byte ptr [rax - 0x3f], cl; ret 0x4911; 
0x000000000002fed1: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x0000000000130fe9: add byte ptr [rax - 0x3f], cl; ret 0xeb11; 
0x0000000000113754: add byte ptr [rax - 0x3fcef877], al; ret; 
0x0000000000057c0f: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000d6edf: add byte ptr [rax - 0x41], cl; ret; 
0x0000000000057c28: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000001971d7: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x000000000004af7c: add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000000cf60f: add byte ptr [rax - 0x57], cl; add dword ptr [rax], eax; add byte ptr [rax], al; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000000e43ce: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x6f; syscall; ret; 
0x000000000012005e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xba; syscall; ret; 
0x000000000011f95e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xe4; syscall; ret; 
0x0000000000160cbe: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rip + 0x8b1a5]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000012009e: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rip + 0xcbdc5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dbbe: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rip + 0xde2a5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000042a1e: add byte ptr [rax - 0x5e1f00d], dl; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000424de: add byte ptr [rax - 0x5e1f00d], dl; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000094d03: add byte ptr [rax - 0x68], cl; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000001175c7: add byte ptr [rax - 0x6af0dc06], al; ret 0xc084; 
0x000000000011c700: add byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 0x77], cl; ret 0x8148; 
0x00000000000bdf8c: add byte ptr [rax - 0x73], cl; adc eax, 0x116fc; cmovne rax, rdx; ret; 
0x000000000009f0ec: add byte ptr [rax - 0x73], cl; adc eax, 0x12e8c; cmovne rax, rdx; ret; 
0x000000000009f6fc: add byte ptr [rax - 0x73], cl; adc eax, 0x1449c; cmovne rax, rdx; ret; 
0x00000000000a09fa: add byte ptr [rax - 0x73], cl; adc eax, 0x1b0ce; cmove rax, rdx; ret; 
0x00000000000a068a: add byte ptr [rax - 0x73], cl; adc eax, 0x1b41e; cmove rax, rdx; ret; 
0x00000000000a052a: add byte ptr [rax - 0x73], cl; adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x000000000012da34: add byte ptr [rax - 0x73], cl; adc eax, 0x3d9b4; cmovne rax, rdx; ret; 
0x000000000012d8b4: add byte ptr [rax - 0x73], cl; adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x000000000012d974: add byte ptr [rax - 0x73], cl; adc eax, 0x40584; cmovne rax, rdx; ret; 
0x000000000012da13: add byte ptr [rax - 0x73], cl; adc eax, 0x5dc25; cmove rax, rdx; ret; 
0x000000000012d953: add byte ptr [rax - 0x73], cl; adc eax, 0x5dd05; cmove rax, rdx; ret; 
0x000000000012d893: add byte ptr [rax - 0x73], cl; adc eax, 0x5ddc5; cmove rax, rdx; ret; 
0x000000000012da5e: add byte ptr [rax - 0x73], cl; adc eax, 0x6295a; cmove rax, rdx; ret; 
0x000000000012d99e: add byte ptr [rax - 0x73], cl; adc eax, 0x62a3a; cmove rax, rdx; ret; 
0x000000000012d8de: add byte ptr [rax - 0x73], cl; adc eax, 0x62afa; cmove rax, rdx; ret; 
0x000000000012db1e: add byte ptr [rax - 0x73], cl; adc eax, 0x62e4a; cmove rax, rdx; ret; 
0x000000000015317a: add byte ptr [rax - 0x73], cl; adc eax, 0x9dcbe; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000bc86a: add byte ptr [rax - 0x73], cl; adc eax, 0xc101e; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000009f19c: add byte ptr [rax - 0x73], cl; adc eax, 0xc42dc; cmovne rax, rdx; ret; 
0x000000000009f766: add byte ptr [rax - 0x73], cl; adc eax, 0xc4f82; cmovne rax, rdx; ret; 
0x00000000000a09b4: add byte ptr [rax - 0x73], cl; adc eax, 0xcaa64; cmovne rax, rdx; ret; 
0x00000000000a0644: add byte ptr [rax - 0x73], cl; adc eax, 0xcadb4; cmovne rax, rdx; ret; 
0x00000000000a04e4: add byte ptr [rax - 0x73], cl; adc eax, 0xcda24; cmovne rax, rdx; ret; 
0x00000000000a088f: add byte ptr [rax - 0x73], cl; adc eax, 0xd01b9; cmovne rax, rdx; ret; 
0x00000000000a07ef: add byte ptr [rax - 0x73], cl; adc eax, 0xd0239; cmovne rax, rdx; ret; 
0x00000000000a08df: add byte ptr [rax - 0x73], cl; adc eax, 0xd22c9; cmovne rax, rdx; ret; 
0x00000000000a083f: add byte ptr [rax - 0x73], cl; adc eax, 0xd2349; cmovne rax, rdx; ret; 
0x00000000000bcd5d: add byte ptr [rax - 0x73], cl; adc eax, 0xd587b; cmovne rax, rdx; ret; 
0x000000000009f21c: add byte ptr [rax - 0x73], cl; adc eax, 0xd5edc; cmovne rax, rdx; ret; 
0x000000000009f7cc: add byte ptr [rax - 0x73], cl; adc eax, 0xd70dc; cmovne rax, rdx; ret; 
0x00000000000a073c: add byte ptr [rax - 0x73], cl; adc eax, 0xd8cec; cmovne rax, rdx; ret; 
0x00000000000a079c: add byte ptr [rax - 0x73], cl; adc eax, 0xda49c; cmovne rax, rdx; ret; 
0x000000000009faea: add byte ptr [rax - 0x73], cl; adc eax, 0xe3fae; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82a: add byte ptr [rax - 0x73], cl; adc eax, 0xe412e; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f23a: add byte ptr [rax - 0x73], cl; adc eax, 0xe45de; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a0993: add byte ptr [rax - 0x73], cl; adc eax, 0xeacd5; cmove rax, rdx; ret; 
0x00000000000a0623: add byte ptr [rax - 0x73], cl; adc eax, 0xeb025; cmove rax, rdx; ret; 
0x00000000000a04c3: add byte ptr [rax - 0x73], cl; adc eax, 0xeb1a5; cmove rax, rdx; ret; 
0x00000000000a09de: add byte ptr [rax - 0x73], cl; adc eax, 0xefa0a; cmove rax, rdx; ret; 
0x00000000000a066e: add byte ptr [rax - 0x73], cl; adc eax, 0xefd5a; cmove rax, rdx; ret; 
0x00000000000a050e: add byte ptr [rax - 0x73], cl; adc eax, 0xefeda; cmove rax, rdx; ret; 
0x00000000000a05ce: add byte ptr [rax - 0x73], cl; adc eax, 0xf03aa; cmove rax, rdx; ret; 
0x00000000000a044d: add byte ptr [rax - 0x73], cl; adc eax, 0xf0a1b; cmovne rax, rdx; ret; 
0x000000000009f13f: add byte ptr [rax - 0x73], cl; adc eax, 0xf1a09; cmovne rax, rdx; ret; 
0x000000000010d24a: add byte ptr [rax - 0x73], cl; adc eax, 0xffffff8e; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000b14ce: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000010bc6c: add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 1], ecx; ror dword ptr [rax + 1], 1; ret 0x8948; 
0x00000000000bcd0f: add byte ptr [rax - 0x73], cl; add eax, 0x11389; cmove rax, rdx; ret; 
0x00000000000bc84f: add byte ptr [rax - 0x73], cl; add eax, 0x11b79; cmove rax, rdx; ret; 
0x000000000009f80f: add byte ptr [rax - 0x73], cl; add eax, 0x120a9; cmove rax, rdx; ret; 
0x000000000009f65f: add byte ptr [rax - 0x73], cl; add eax, 0x12559; cmove rax, rdx; ret; 
0x00000000000bc9ff: add byte ptr [rax - 0x73], cl; add eax, 0x12699; cmove rax, rdx; ret; 
0x000000000009f69f: add byte ptr [rax - 0x73], cl; add eax, 0x126b9; cmove rax, rdx; ret; 
0x00000000000bcaef: add byte ptr [rax - 0x73], cl; add eax, 0x12879; cmove rax, rdx; ret; 
0x00000000000bc80f: add byte ptr [rax - 0x73], cl; add eax, 0x129c9; cmove rax, rdx; ret; 
0x00000000000bc95f: add byte ptr [rax - 0x73], cl; add eax, 0x12f89; cmove rax, rdx; ret; 
0x00000000000960b8: add byte ptr [rax - 0x73], cl; add eax, 0x156ac0; add rsp, 0x10; pop rbp; ret; 
0x00000000000328bf: add byte ptr [rax - 0x73], cl; add eax, 0x181ab6; ret; 
0x00000000000529f7: add byte ptr [rax - 0x73], cl; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000047f83: add byte ptr [rax - 0x73], cl; add eax, 0x1a937b; add rsp, 8; ret; 
0x00000000000a05a8: add byte ptr [rax - 0x73], cl; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x00000000000a8bdf: add byte ptr [rax - 0x73], cl; add eax, 0x3819; cmove rax, rdx; ret; 
0x000000000012dadd: add byte ptr [rax - 0x73], cl; add eax, 0x5e06b; cmove rax, rdx; ret; 
0x00000000000a1c7f: add byte ptr [rax - 0x73], cl; add eax, 0xa569; cmove rax, rdx; ret; 
0x00000000000a03ff: add byte ptr [rax - 0x73], cl; add eax, 0xbab9; cmove rax, rdx; ret; 
0x00000000001191d1: add byte ptr [rax - 0x73], cl; add eax, 0xd66e7; add rsp, 0x18; ret; 
0x0000000000118c89: add byte ptr [rax - 0x73], cl; add eax, 0xd6bdf; add rsp, 8; ret; 
0x0000000000115b9a: add byte ptr [rax - 0x73], cl; add eax, 0xd9ad6; add rsp, 8; ret; 
0x00000000000a058d: add byte ptr [rax - 0x73], cl; add eax, 0xeb5cb; cmove rax, rdx; ret; 
0x00000000000a1cbf: add byte ptr [rax - 0x73], cl; add eax, 0xf9e9; cmove rax, rdx; ret; 
0x00000000000d0fe7: add byte ptr [rax - 0x73], cl; add eax, 0xfffffee1; ret; 
0x00000000000d0fd7: add byte ptr [rax - 0x73], cl; add eax, 0xfffffef1; add rsp, 0x58; ret; 
0x00000000000d0ec7: add byte ptr [rax - 0x73], cl; add eax, 0xfffffef1; ret; 
0x00000000000d0eb7: add byte ptr [rax - 0x73], cl; add eax, 0xffffff01; add rsp, 0x58; ret; 
0x00000000000cf65f: add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cf66f: add byte ptr [rax - 0x73], cl; cld; ret; 
0x000000000008ded3: add byte ptr [rax - 0x73], cl; cmp eax, 0x1274e9; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000098daa: add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa6: add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x0000000000094a4e: add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093924: add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x000000000009101c: add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f64: add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x0000000000046c70: add byte ptr [rax - 0x73], cl; cmp eax, 0x16d861; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x000000000004764e: add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x0000000000198a9e: add byte ptr [rax - 0x73], cl; cmp eax, 0x55d5a; syscall; pop rbx; ret; 
0x0000000000198dce: add byte ptr [rax - 0x73], cl; cmp eax, 0x57742; syscall; pop rbp; ret; 
0x000000000014245e: add byte ptr [rax - 0x73], cl; cmp eax, 0xae5b2; syscall; pop rbp; ret; 
0x0000000000117c27: add byte ptr [rax - 0x73], cl; cmp eax, 0xd7c21; syscall; ret; 
0x00000000000542d7: add byte ptr [rax - 0x73], cl; dec dword ptr [rax + 0x39]; ret; 
0x00000000000cf64f: add byte ptr [rax - 0x73], cl; hlt; ret; 
0x000000000008e5b4: add byte ptr [rax - 0x73], cl; or eax, 0x15a8e4; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000118c7d: add byte ptr [rax - 0x73], cl; or eax, 0xd6beb; call 0x118f80; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x000000000017e025: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000011cc5f: add byte ptr [rax - 0x73], cl; push rbx; add dword ptr [rax - 0x73], ecx; add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x0000000000119fd7: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000115f88: add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000fdfc7: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x77], r9b; ret 0x8948; 
0x0000000000096337: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000122996: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122e66: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122b56: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122ac6: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122d26: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122dc6: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122ef6: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000123026: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122be9: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x44; ret 0x8940; 
0x0000000000122a26: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122c86: add byte ptr [rax - 0x75], cl; adc byte ptr [rbx + 0xc882], cl; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000000e2e7f: add byte ptr [rax - 0x75], cl; adc eax, 0x108fe9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d5f: add byte ptr [rax - 0x75], cl; adc eax, 0x109109; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c7: add byte ptr [rax - 0x75], cl; adc eax, 0x10dba1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d108f: add byte ptr [rax - 0x75], cl; adc eax, 0x11add9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0eef: add byte ptr [rax - 0x75], cl; adc eax, 0x11af79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dd7: add byte ptr [rax - 0x75], cl; adc eax, 0x11b091; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062ecf: add byte ptr [rax - 0x75], cl; adc eax, 0x188f99; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e97: add byte ptr [rax - 0x75], cl; adc eax, 0x188fd1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000434af: add byte ptr [rax - 0x75], cl; adc eax, 0x1a89b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004341f: add byte ptr [rax - 0x75], cl; adc eax, 0x1a8a49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012e7bf: add byte ptr [rax - 0x75], cl; adc eax, 0xbd6a9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121247: add byte ptr [rax - 0x75], cl; adc eax, 0xcac21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211a7: add byte ptr [rax - 0x75], cl; adc eax, 0xcacc1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121097: add byte ptr [rax - 0x75], cl; adc eax, 0xcadd1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121057: add byte ptr [rax - 0x75], cl; adc eax, 0xcae11; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121027: add byte ptr [rax - 0x75], cl; adc eax, 0xcae41; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120fdf: add byte ptr [rax - 0x75], cl; adc eax, 0xcae89; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120f1f: add byte ptr [rax - 0x75], cl; adc eax, 0xcaf49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120caf: add byte ptr [rax - 0x75], cl; adc eax, 0xcb1b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120c07: add byte ptr [rax - 0x75], cl; adc eax, 0xcb261; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120b4f: add byte ptr [rax - 0x75], cl; adc eax, 0xcb319; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120707: add byte ptr [rax - 0x75], cl; adc eax, 0xcb761; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012063f: add byte ptr [rax - 0x75], cl; adc eax, 0xcb829; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012059f: add byte ptr [rax - 0x75], cl; adc eax, 0xcb8c9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001204df: add byte ptr [rax - 0x75], cl; adc eax, 0xcb989; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012037f: add byte ptr [rax - 0x75], cl; adc eax, 0xcbae9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001201ff: add byte ptr [rax - 0x75], cl; adc eax, 0xcbc69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012012f: add byte ptr [rax - 0x75], cl; adc eax, 0xcbd39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f83f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc629; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f75f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc709; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f6b7: add byte ptr [rax - 0x75], cl; adc eax, 0xcc7b1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5ef: add byte ptr [rax - 0x75], cl; adc eax, 0xcc879; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f53f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc929; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f48f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc9d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2ff: add byte ptr [rax - 0x75], cl; adc eax, 0xccb69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2b7: add byte ptr [rax - 0x75], cl; adc eax, 0xccbb1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f1a7: add byte ptr [rax - 0x75], cl; adc eax, 0xcccc1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118a3f: add byte ptr [rax - 0x75], cl; adc eax, 0xd3429; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116d07: add byte ptr [rax - 0x75], cl; adc eax, 0xd5161; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd7: add byte ptr [rax - 0x75], cl; adc eax, 0xd5191; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116c9f: add byte ptr [rax - 0x75], cl; adc eax, 0xd51c9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ab7: add byte ptr [rax - 0x75], cl; adc eax, 0xd53b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001152af: add byte ptr [rax - 0x75], cl; adc eax, 0xd6bb9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001151ef: add byte ptr [rax - 0x75], cl; adc eax, 0xd6c79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114fef: add byte ptr [rax - 0x75], cl; adc eax, 0xd6e79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114657: add byte ptr [rax - 0x75], cl; adc eax, 0xd7811; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114597: add byte ptr [rax - 0x75], cl; adc eax, 0xd78d1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144df: add byte ptr [rax - 0x75], cl; adc eax, 0xd7989; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011443f: add byte ptr [rax - 0x75], cl; adc eax, 0xd7a29; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113d7f: add byte ptr [rax - 0x75], cl; adc eax, 0xd80e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bb7: add byte ptr [rax - 0x75], cl; adc eax, 0xd82b1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113687: add byte ptr [rax - 0x75], cl; adc eax, 0xd87e1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011364f: add byte ptr [rax - 0x75], cl; adc eax, 0xd8819; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113617: add byte ptr [rax - 0x75], cl; adc eax, 0xd8851; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113357: add byte ptr [rax - 0x75], cl; adc eax, 0xd8b11; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011330f: add byte ptr [rax - 0x75], cl; adc eax, 0xd8b59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011325f: add byte ptr [rax - 0x75], cl; adc eax, 0xd8c09; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001130ff: add byte ptr [rax - 0x75], cl; adc eax, 0xd8d69; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001130bf: add byte ptr [rax - 0x75], cl; adc eax, 0xd8da9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113067: add byte ptr [rax - 0x75], cl; adc eax, 0xd8e01; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001129bf: add byte ptr [rax - 0x75], cl; adc eax, 0xd94a9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e85f: add byte ptr [rax - 0x75], cl; adc eax, 0xdd609; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e147: add byte ptr [rax - 0x75], cl; adc eax, 0xddd21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e117: add byte ptr [rax - 0x75], cl; adc eax, 0xddd51; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e02f: add byte ptr [rax - 0x75], cl; adc eax, 0xdde39; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dc07: add byte ptr [rax - 0x75], cl; adc eax, 0xde261; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d9cf: add byte ptr [rax - 0x75], cl; adc eax, 0xde499; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d90f: add byte ptr [rax - 0x75], cl; adc eax, 0xde559; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d587: add byte ptr [rax - 0x75], cl; adc eax, 0xde8e1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d527: add byte ptr [rax - 0x75], cl; adc eax, 0xde941; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4c7: add byte ptr [rax - 0x75], cl; adc eax, 0xde9a1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c27f: add byte ptr [rax - 0x75], cl; adc eax, 0xdfbe9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c1cf: add byte ptr [rax - 0x75], cl; adc eax, 0xdfc99; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000008d79f: add byte ptr [rax - 0x75], cl; adc r11b, r13b; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000019693b: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000014ff17: add byte ptr [rax - 0x75], cl; add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d137: add byte ptr [rax - 0x75], cl; add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000011ba67: add byte ptr [rax - 0x75], cl; add byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000034291: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034481: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034261: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000473c9: add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017abdf: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000017672f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017dedf: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000009c1f7: add byte ptr [rax - 0x75], cl; add dword ptr [rax], r9d; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000000de128: add byte ptr [rax - 0x75], cl; add eax, 0x10dd40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd147: add byte ptr [rax - 0x75], cl; add eax, 0x10ed21; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009808f: add byte ptr [rax - 0x75], cl; add eax, 0x153dd9; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000008d33f: add byte ptr [rax - 0x75], cl; add eax, 0x15eb29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb7: add byte ptr [rax - 0x75], cl; add eax, 0x160fb1; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008472f: add byte ptr [rax - 0x75], cl; add eax, 0x167739; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832f: add byte ptr [rax - 0x75], cl; add eax, 0x1a3b39; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000047c57: add byte ptr [rax - 0x75], cl; add eax, 0x1a4211; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043def: add byte ptr [rax - 0x75], cl; add eax, 0x1a8079; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2f: add byte ptr [rax - 0x75], cl; add eax, 0x1a8139; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c37: add byte ptr [rax - 0x75], cl; add eax, 0x1a8231; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bef: add byte ptr [rax - 0x75], cl; add eax, 0x1a8279; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9f: add byte ptr [rax - 0x75], cl; add eax, 0x1a82c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329f: add byte ptr [rax - 0x75], cl; add eax, 0x1a8bc9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124f: add byte ptr [rax - 0x75], cl; add eax, 0x1aac19; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000033d0f: add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x00000000000246e7: add byte ptr [rax - 0x75], cl; add eax, 0x1c7781; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000141b3b: add byte ptr [rax - 0x75], cl; add eax, 0xaeedd; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x000000000012f40f: add byte ptr [rax - 0x75], cl; add eax, 0xbca59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8df: add byte ptr [rax - 0x75], cl; add eax, 0xcc589; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f89f: add byte ptr [rax - 0x75], cl; add eax, 0xcc5c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fbf: add byte ptr [rax - 0x75], cl; add eax, 0xcdab1; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011c4e7: add byte ptr [rax - 0x75], cl; add eax, 0xcf981; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001188f7: add byte ptr [rax - 0x75], cl; add eax, 0xd3571; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115747: add byte ptr [rax - 0x75], cl; add eax, 0xd6721; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001142c7: add byte ptr [rax - 0x75], cl; add eax, 0xd7ba1; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113147: add byte ptr [rax - 0x75], cl; add eax, 0xd8d21; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000112927: add byte ptr [rax - 0x75], cl; add eax, 0xd9541; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000115b8c: add byte ptr [rax - 0x75], cl; add eax, 0xd9adc; mov qword ptr [rip + 0xd9b05], rax; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x000000000010dc37: add byte ptr [rax - 0x75], cl; add eax, 0xde231; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010dc1f: add byte ptr [rax - 0x75], cl; add eax, 0xde249; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d9e7: add byte ptr [rax - 0x75], cl; add eax, 0xde481; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d987: add byte ptr [rax - 0x75], cl; add eax, 0xde4e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d927: add byte ptr [rax - 0x75], cl; add eax, 0xde541; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d59f: add byte ptr [rax - 0x75], cl; add eax, 0xde8c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d53f: add byte ptr [rax - 0x75], cl; add eax, 0xde929; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4df: add byte ptr [rax - 0x75], cl; add eax, 0xde989; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048273: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x0000000000167e9f: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000151937: add byte ptr [rax - 0x75], cl; cmp ebp, ebx; ret; 
0x00000000000f4dd7: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000016807f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016866f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000196d7c: add byte ptr [rax - 0x75], cl; je 0x196da5; adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000009c09f: add byte ptr [rax - 0x75], cl; jl 0x9c0c8; sbb byte ptr [rcx - 0x17f7dbac], cl; ret 0xffa6; 
0x00000000000f1fef: add byte ptr [rax - 0x75], cl; jle 0xf201c; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000ff514: add byte ptr [rax - 0x75], cl; jnp 0xff541; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000006a8ac: add byte ptr [rax - 0x75], cl; lea edx, [rax - 0x7c000005]; ret 0x4830; 
0x00000000001097f8: add byte ptr [rax - 0x75], cl; mov ah, 0x24; nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000034294: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000016826f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016846f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000034484: add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000011d02f: add byte ptr [rax - 0x75], cl; or al, 1; add byte ptr [rax], al; ret; 
0x00000000000f0b7b: add byte ptr [rax - 0x75], cl; or byte ptr [r13 + 0x63], cl; ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x0000000000034264: add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000011d027: add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x00000000001239ef: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123967: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x00000000001238df: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000012369f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001237bf: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000012346f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x000000000012372f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000001234ff: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x000000000012357f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x000000000012384f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x00000000001233df: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x000000000008d237: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000141587: add byte ptr [rax - 0x75], cl; push rdi; or dh, dh; ret 0x7401; 
0x000000000010c862: add byte ptr [rax - 0x75], cl; push rdx; sbb byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; ret 0x8207; 
0x000000000016d9af: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000016791f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d1ef: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d15f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d3ff: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000000a8a47: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; mov qword ptr [rax], rdx; ret; 
0x00000000000a896f: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000bda0c: add byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000121fc6: add byte ptr [rax - 0x75], cl; sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x000000000008ccf7: add byte ptr [rax - 0x75], cl; sub rax, qword ptr [rdi + 0x38]; ret; 
0x000000000008ea5b: add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000167adf: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000075f87: add byte ptr [rax - 0x75], cl; xchg ebp, eax; clc; idiv bh; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x00000000000827f2: add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000001400d0: add byte ptr [rax - 0x75], cl; xchg esp, eax; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x3be9; 
0x0000000000140078: add byte ptr [rax - 0x75], cl; xchg esp, eax; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x9be9; 
0x000000000013fc88: add byte ptr [rax - 0x75], cl; xchg esp, eax; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0xd889; 
0x000000000010753d: add byte ptr [rax - 0x75], cl; xchg esp, eax; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b48; 
0x00000000001272f7: add byte ptr [rax - 0x75], cl; xor byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x0000000000121c3e: add byte ptr [rax - 0x77], cl; adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xca710], 2; ret; 
0x000000000015f908: add byte ptr [rax - 0x77], cl; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000226b6: add byte ptr [rax - 0x77], cl; adc eax, 0x1ceae2; pop rax; pop rbx; pop rbp; ret; 
0x000000000009f8a2: add byte ptr [rax - 0x77], cl; add eax, 0x14f69e; add rsp, 8; ret; 
0x000000000009f864: add byte ptr [rax - 0x77], cl; add eax, 0x14f6dc; ret; 
0x000000000009520a: add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951e1: add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951c1: add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x0000000000115b93: add byte ptr [rax - 0x77], cl; add eax, 0xd9b05; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x000000000015fe03: add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000008f50c: add byte ptr [rax - 0x77], cl; call 0x5c4a526f; ret; 
0x00000000000b67bf: add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000018b62f: add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x00000000000fec9d: add byte ptr [rax - 0x77], cl; cmp byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000090087: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000064beb: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000049df7: add byte ptr [rax - 0x77], cl; fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x000000000006680f: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x7d]; ret; 
0x000000000005419c: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; ret 0x8949; 
0x00000000000f1e18: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000124714: add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x0000000000093466: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000014e500: add byte ptr [rax - 0x77], cl; in eax, 0x89; ret; 
0x00000000001196f3: add byte ptr [rax - 0x77], cl; je 0x119700; pop rbx; ret; 
0x00000000000993d3: add byte ptr [rax - 0x77], cl; je 0x993fc; or al, ch; ret 0xffb1; 
0x000000000015f241: add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000696a5: add byte ptr [rax - 0x77], cl; mov ebp, ds; sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000081f14: add byte ptr [rax - 0x77], cl; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x0000000000107d9b: add byte ptr [rax - 0x77], cl; pushfq; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000a2298: add byte ptr [rax - 0x77], cl; ret 0x14eb; 
0x000000000007443c: add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000030ad5: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000087a57: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000002629e: add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000415ce: add byte ptr [rax - 0x77], cl; ret 0x394c; 
0x0000000000036896: add byte ptr [rax - 0x77], cl; ret 0x448b; 
0x00000000000a8e76: add byte ptr [rax - 0x77], cl; ret 0x51e8; 
0x000000000012b47b: add byte ptr [rax - 0x77], cl; ret 0x57e9; 
0x00000000000a61c3: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000005f68f: add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x00000000000d30d2: add byte ptr [rax - 0x77], cl; ret 0x850f; 
0x000000000006d403: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000d3f2f: add byte ptr [rax - 0x77], cl; ret 0x88e9; 
0x00000000000619f5: add byte ptr [rax - 0x77], cl; ret 0x8944; 
0x0000000000099774: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000193fcd: add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x000000000005f0d7: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000005fc5f: add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x0000000000065810: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000e5b0b: add byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000000695d3: add byte ptr [rax - 0x77], cl; ret 0x94e8; 
0x000000000011c62e: add byte ptr [rax - 0x77], cl; ret 0xabe; 
0x00000000000dec0b: add byte ptr [rax - 0x77], cl; ret 0xb4e9; 
0x0000000000105350: add byte ptr [rax - 0x77], cl; ret 0xb70f; 
0x0000000000054744: add byte ptr [rax - 0x77], cl; ret 0xbf41; 
0x000000000009e43a: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000051c92: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000e1333: add byte ptr [rax - 0x77], cl; ret 0xcce9; 
0x000000000009ec37: add byte ptr [rax - 0x77], cl; ret 0xd148; 
0x00000000000bc9a9: add byte ptr [rax - 0x77], cl; ret 0xdee8; 
0x000000000004ae5c: add byte ptr [rax - 0x77], cl; ret 0xf4d; 
0x0000000000090918: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000022676: add byte ptr [rax - 0x77], cl; ret; 
0x000000000017e222: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x00000000001802f4: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000015369f: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x7d], 0xc0; or byte ptr [rbx + 0x74fff878], al; jnp 0x153631; ret 0x3901; 
0x00000000000a8637: add byte ptr [rax - 0x77], cl; sal dword ptr [rcx], 0xc0; mov qword ptr [rdx], rcx; ret; 
0x00000000000bbbf4: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f8c0: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000009389e: add byte ptr [rax - 0x77], cl; sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x00000000001989e2: add byte ptr [rax - 0x77], cl; sbb eax, 0x55db6; test rbx, rbx; jne 0x1989d0; pop rbx; ret; 
0x000000000002c1bd: add byte ptr [rax - 0x77], cl; shr bl, 1; ret 0x1f0f; 
0x0000000000146cf1: add byte ptr [rax - 0x77], cl; vorps xmm7, xmm2, xmmword ptr [rax - 0x76b70013]; ret; 
0x000000000009a0c4: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x151e11; mov qword ptr [rax], rdi; ret; 
0x00000000000961ca: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x155d0b; mov qword ptr [rax], rdx; ret; 
0x00000000000a849b: add byte ptr [rax - 0x78], 0x7d; ret 0x2bf; 
0x00000000000a4500: add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x00000000001971de: add byte ptr [rax - 0x7ab70000], al; ret; 
0x0000000000057bdf: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp - 0x13]; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x000000000011739a: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x10]; mov eax, 1; ret; 
0x00000000000874de: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000041f85: add byte ptr [rax - 0x7b], cl; ret 0x574; 
0x0000000000194d53: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000000b4223: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000010f5d1: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0xd321; 
0x0000000000194de0: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], cl; test dh, bh; add eax, dword ptr [rax]; add byte ptr [rdi + rcx - 0x43], cl; ret 0x8349; 
0x0000000000115ada: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd9b59; mov eax, 1; add rsp, 8; ret; 
0x000000000009f412: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx + 0x5b], 0x5d; pop r12; ret; 
0x0000000000094fb3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x21], cl; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000a228f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x000000000011cc25: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x00000000000490b4: add byte ptr [rax - 0x7bf0cf07], al; ret 1; 
0x00000000000490ab: add byte ptr [rax - 0x7bf0d407], al; imul eax, dword ptr [rcx], 0; add byte ptr [rax - 0x7bf0cf07], al; ret 1; 
0x000000000012e1ac: add byte ptr [rax - 0x7bf10000], al; ret 0; 
0x000000000004c7f2: add byte ptr [rax - 0x7c], al; dec dword ptr [rdi]; test ah, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000499ca: add byte ptr [rax - 0x7c], al; dec dword ptr [rdi]; test ah, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000017c6e7: add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000f69e7: add byte ptr [rax - 0x7d], cl; and al, 0x30; adc al, 0x83; ret; 
0x0000000000107a5d: add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rbx*8 - 0x77]; ret 0xc085; 
0x00000000000bcdff: add byte ptr [rax - 0x7d], cl; cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x000000000002a5a1: add byte ptr [rax - 0x7d], cl; cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000bbfa1: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000141bbb: add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; retf; and ebp, edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000148f12: add byte ptr [rax - 0x7d], cl; mov eax, 0x100; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000982a7: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000108d82: add byte ptr [rax - 0x7d], cl; ret 0x3101; 
0x00000000000bb4cf: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000006566d: add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x0000000000049e37: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000bc727: add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x0000000000024cd5: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000f21b7: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000012869f: add byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x0000000000026db6: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000006ed73: add byte ptr [rax - 0x7d], cl; ret 0x4904; 
0x000000000017e0af: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000116955: add byte ptr [rax - 0x7d], cl; ret 0x6602; 
0x00000000000ca1af: add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000009f337: add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000129577: add byte ptr [rax - 0x7d], cl; ret 0x8330; 
0x00000000000e9ef8: add byte ptr [rax - 0x7d], cl; ret 0x8b02; 
0x000000000013c9d7: add byte ptr [rax - 0x7d], cl; ret 0x8d01; 
0x0000000000098ab6: add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x00000000000f7dbf: add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x00000000001369e1: add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x000000000009fda0: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000180093: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e0d3: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000d155f: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000015f58f: add byte ptr [rax - 0x7d], cl; ret 0xf604; 
0x0000000000026208: add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000aa49f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000b1e9f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000000f0d47: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x39; ret 0x840f; 
0x000000000002f10d: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000005432f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x80; js 0x54338; add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x000000000012e209: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20; 
0x00000000000499e7: add byte ptr [rax - 0x7d], cl; sti; or dword ptr [rdi], 0xae85; add byte ptr [rcx], dh; div bh; ret 0; 
0x0000000000033c88: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000000e505c: add byte ptr [rax - 0x7f], cl; ret 0x231b; 
0x000000000016b5ab: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000002412a: add byte ptr [rax - 0x7f], cl; ret 0x988; 
0x0000000000083e7f: add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x000000000004f2df: add byte ptr [rax - 0x7f], cl; sti; ret 0xffbf; 
0x000000000013bcb5: add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x000000000004653d: add byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; ret; 
0x00000000000412bd: add byte ptr [rax - 1], bh; pop rbp; ret; 
0x00000000000246f5: add byte ptr [rax - 1], bh; ret; 
0x0000000000090d3e: add byte ptr [rax - 1], dil; ret; 
0x00000000001097a4: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000018bc11: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000000fbfa0: add byte ptr [rax], 0; add byte ptr [rax + 0x63], cl; ret 0x8948; 
0x0000000000184aed: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x0000000000090915: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000001369de: add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000001091b2: add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000183d12: add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000009f8eb: add byte ptr [rax], 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000ac16b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac18b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac65b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac66b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000091e7b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000012facb: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000009385b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x0000000000157b2b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000009c20b: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x00000000000a8a53: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rax], 0; ret; 
0x00000000000ec44b: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000a8a7b: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rax], ecx; ret; 
0x00000000000b92eb: add byte ptr [rax], 0; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x000000000013c9bb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x000000000013c62b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000cf07b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x000000000013c17b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000016dd9b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000013c93b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000011d023: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000008d33b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043deb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043beb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012f40b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xbca59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fbb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcdab1]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000001188f3: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd3571]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115743: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd6721]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000016dbdb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8b1b: add byte ptr [rax], 0; add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b6f5b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000bc143: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000016deeb: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016de7b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000018915b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000ca053: add byte ptr [rax], 0; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000054313: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000ce08b: add byte ptr [rax], 0; add byte ptr [rax], al; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x0000000000189b0d: add byte ptr [rax], 0; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000ee473: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000040fc3: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008e303: add byte ptr [rax], 0; add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x000000000004234e: add byte ptr [rax], 0; add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x00000000000f9543: add byte ptr [rax], 0; add byte ptr [rbx - 0x7bf0f006], al; stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret 0x7a8d; 
0x000000000006dc6d: add byte ptr [rax], 0; add byte ptr [rbx - 0x9bef71d], al; ret; 
0x00000000001533bb: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x0000000000190a13: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000016ce33: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000000f9b11: add byte ptr [rax], 0; add byte ptr [rdi], cl; xchg esp, eax; ret 0xf631; 
0x000000000018d873: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000097d4b: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000011737b: add byte ptr [rax], 0; add rsp, 8; mov eax, r8d; ret; 
0x0000000000041b9f: add byte ptr [rax], 0; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000001280c6: add byte ptr [rax], ah; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034188: add byte ptr [rax], ah; movzx eax, ax; ret; 
0x00000000000a0306: add byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x000000000012faf5: add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fb83: add byte ptr [rax], al; add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000158ac4: add byte ptr [rax], al; add al, ch; cmp dword ptr fs:[rax], eax; add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x00000000000f4cfd: add byte ptr [rax], al; add al, ch; fdiv st(2); dec dword ptr [rax - 0x77]; ret; 
0x00000000000f57d4: add byte ptr [rax], al; add al, ch; je 0xf57a7; dec dword ptr [rax - 0x77]; ret; 
0x000000000008e588: add byte ptr [rax], al; add al, ch; movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000001112fa: add byte ptr [rax], al; add al, ch; pop rsi; adc ecx, esi; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x0000000000045fec: add byte ptr [rax], al; add al, ch; pop rsp; ret; 
0x000000000012a2a8: add byte ptr [rax], al; add al, ch; push rax; fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000012a7a8: add byte ptr [rax], al; add al, ch; push rax; sar edi, cl; dec dword ptr [rcx]; ret; 
0x000000000010ec36: add byte ptr [rax], al; add al, ch; ret 0xffe8; 
0x0000000000112562: add byte ptr [rax], al; add al, ch; xchg esi, eax; ret 0xffff; 
0x0000000000057c2f: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x0000000000198b1d: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000001952e1: add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx + 0x21]; ret; 
0x00000000000425f0: add byte ptr [rax], al; add bh, bh; jg 0x4263e; sub eax, edx; shr rax, 0x3f; ret; 
0x0000000000146381: add byte ptr [rax], al; add bh, bh; ror byte ptr [rax - 0x73], 1; add eax, 0xaa773; add rsp, 8; ret; 
0x000000000004927d: add byte ptr [rax], al; add bh, dh; ret 0xffef; 
0x00000000000ee3c3: add byte ptr [rax], al; add bh, dh; ret; 
0x0000000000041c69: add byte ptr [rax], al; add bl, bl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000812f1: add byte ptr [rax], al; add bl, ch; ret 0x43c7; 
0x000000000010c4a9: add byte ptr [rax], al; add bl, ch; ret 0x9066; 
0x00000000000c058c: add byte ptr [rax], al; add bl, ch; ret 0xc748; 
0x00000000000e324b: add byte ptr [rax], al; add bl, ch; ret; 
0x000000000010c5f2: add byte ptr [rax], al; add bl, ch; retf 0xcb8; add byte ptr [rax], al; add bl, ch; ret; 
0x000000000018479d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000b6f5d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000010d0d6: add byte ptr [rax], al; add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000bbf29: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7f2d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7f3d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x000000000013bcf4: add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x000000000011f236: add byte ptr [rax], al; add byte ptr [rax + 0x119], bh; syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x0000000000190d9c: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x00000000000b92dc: add byte ptr [rax], al; add byte ptr [rax + 0x1788168a], dl; lea rax, [rdi + 1]; ret; 
0x00000000000529ef: add byte ptr [rax], al; add byte ptr [rax + 0x19bc6d05], cl; add byte ptr [rax - 0x73], cl; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000cf55c: add byte ptr [rax], al; add byte ptr [rax + 0x1a948], dl; add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000e50a4: add byte ptr [rax], al; add byte ptr [rax + 0x20], bh; cmove rax, rdx; ret; 
0x00000000000d4ff9: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x000000000015eb65: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000015f7c2: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x000000000007a3bc: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000d085a: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000ec3cc: add byte ptr [rax], al; add byte ptr [rax + 0x2c755ef9], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000107526: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000007d0c2: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000018bc12: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x0000000000192abc: add byte ptr [rax], al; add byte ptr [rax + 0x3bf4478b], dl; hlt; jne 0x192be0; ret; 
0x00000000000cb181: add byte ptr [rax], al; add byte ptr [rax + 0x4428944], al; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000bc195: add byte ptr [rax], al; add byte ptr [rax + 0x485bf0e5], al; cmovne eax, edx; ret; 
0x000000000009f135: add byte ptr [rax], al; add byte ptr [rax + 0x48], al; lea eax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x0000000000041fc6: add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x000000000004785f: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; and al, 4; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000013b6af: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x00000000000a72f8: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x4e8d; 
0x0000000000030cee: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8948; 
0x00000000000c034d: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000f142a: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror byte ptr [rdi], 1; mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x0000000000148746: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xe7603f8], r8b; mov eax, 2; ret; 
0x0000000000041f96: add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x0000000000041f53: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000422ff: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff3], al; movd xmm0, esi; ret; 
0x00000000000b849d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000043406: add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000013c9bd: add byte ptr [rax], al; add byte ptr [rax + 0x7fffffff], bh; ret; 
0x0000000000043452: add byte ptr [rax], al; add byte ptr [rax + 0x82], bh; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x00000000000f249d: add byte ptr [rax], al; add byte ptr [rax + 0xc], bh; ret; 
0x0000000000098da3: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099f9f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a47: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x000000000009391d: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091015: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5d: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000047647: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198a97: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dc7: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x0000000000142457: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c20: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x00000000000630a1: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000010543d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480142; ret 0x8401; 
0x0000000000126a0d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x8348014a; ret 0x4801; 
0x000000000012a49d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x000000000012502d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x00000000000dcfbb: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x00000000000cf07d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; jg 0xcf089; neg eax; ret; 
0x0000000000149c94: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057b3e: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000cf284: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000184af7: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000184aee: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x0000000000057d51: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000018c3fd: add byte ptr [rax], al; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000000ea38d: add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x49f0e38c], al; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000126ba5: add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x76b7f08c], al; ror dword ptr [rdi], 1; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x00000000000cf613: add byte ptr [rax], al; add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret; 
0x00000000000b76bd: add byte ptr [rax], al; add byte ptr [rax - 0x177cb6c9], cl; add dword ptr [rax - 0x73], ecx; jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000ec3fd: add byte ptr [rax], al; add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x0000000000042362: add byte ptr [rax], al; add byte ptr [rax - 0x3991f09a], al; ret; 
0x000000000009393c: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x15ae7e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c73: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0xca6df; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000107da1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000bfa55: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000cfb3d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb7d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb2d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb6d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000000e5afe: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; test dword ptr [rax + 0x40fffffd], edi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x0000000000023a48: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x0000000000130588: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0xeb; ret 0x8b48; 
0x00000000000226a9: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000002fefb: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4911; 
0x000000000002fecf: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x0000000000130fe7: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0xeb11; 
0x0000000000113752: add byte ptr [rax], al; add byte ptr [rax - 0x3fcef877], al; ret; 
0x00000000000d7095: add byte ptr [rax], al; add byte ptr [rax - 0x41], cl; ret; 
0x0000000000057c26: add byte ptr [rax], al; add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000001971d5: add byte ptr [rax], al; add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x00000000000e43cc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x6f; syscall; ret; 
0x000000000012005c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xba; syscall; ret; 
0x000000000011f95c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xe4; syscall; ret; 
0x0000000000042a1c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000424dc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000b14cc: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000010bc6a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 1], ecx; ror dword ptr [rax + 1], 1; ret 0x8948; 
0x00000000000328bd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x181ab6; ret; 
0x00000000000cf65d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cf66d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x0000000000098da8: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa4: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x0000000000094a4c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093922: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x000000000009101a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f62: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x000000000004764c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x0000000000198a9c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x55d5a; syscall; pop rbx; ret; 
0x0000000000198dcc: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x57742; syscall; pop rbp; ret; 
0x000000000014245c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0xae5b2; syscall; pop rbp; ret; 
0x0000000000117c25: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7c21; syscall; ret; 
0x00000000000cf64d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x000000000008e5b2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x15a8e4; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000000473c7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017decd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000008d33d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x15eb29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008472d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x167739; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a3b39; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000043ded: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8079; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8139; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043bed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8279; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a82c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8bc9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1aac19; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000033d0d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x000000000012f40d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xbca59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xcc589; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f89d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xcc5c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fbd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xcdab1; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000001188f5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xd3571; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115745: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xd6721; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4dd5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000016826d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016846d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000011d025: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x00000000001234fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x000000000008d235: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000008f148: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000167add: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000827f0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000001272f5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x0000000000095208: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951df: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951bf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x000000000008f50a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a526f; ret; 
0x00000000000b92cd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000018b62d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x000000000004f82d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x000000000005419a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; ret 0x8949; 
0x00000000000f1e16: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000124712: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x000000000007443a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000087294: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000087a55: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000076ee1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000a61c1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000007bf4d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x000000000015383a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000099772: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000005f0d5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000005fc5d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x00000000000f6681: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000e5b09: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000000695d1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x94e8; 
0x000000000010f61b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000bc9a7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xdee8; 
0x000000000004ae5a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf4d; 
0x0000000000090916: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000040689: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000146cef: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; vorps xmm7, xmm2, xmmword ptr [rax - 0x76b70013]; ret; 
0x00000000001971dc: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x00000000000874dc: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000000490a9: add byte ptr [rax], al; add byte ptr [rax - 0x7bf0d407], al; imul eax, dword ptr [rcx], 0; add byte ptr [rax - 0x7bf0cf07], al; ret 1; 
0x000000000002a59f: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000982a5: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x00000000000bb4cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000bc725: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x0000000000024cd3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000f61cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000012869d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x00000000000a5f6d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x000000000017fbd3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000ca1ad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x00000000000e9ef6: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8b02; 
0x00000000000f7dbd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xb908; 
0x00000000001369df: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x0000000000181751: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017fbfd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000323cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000aa49d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000e505a: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x231b; 
0x000000000016cda4: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000083e7d: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x000000000004f2dd: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; sti; ret 0xffbf; 
0x000000000004653b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; ret; 
0x00000000000412bb: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; ret; 
0x00000000000246f3: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000198b1b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000001952df: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx + 0x21]; ret; 
0x000000000004927b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0xffef; 
0x00000000000b7f2b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7f3b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x0000000000190d9a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x0000000000041fc4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x00000000000c2cbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000041f94: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x00000000000b849b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000f249b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xc], bh; ret; 
0x000000000010543b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480142; ret 0x8401; 
0x000000000012a49b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x000000000009e85b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000018c3fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000000ea38b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x49f0e38c], al; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x00000000000cfb3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000000328bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x181ab6; ret; 
0x00000000000cf65b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cf66b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000000cf64b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x00000000000473c5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000000f54db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b92cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000018b62b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x000000000004f82b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x000000000005fc5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894d; 
0x00000000000695cf: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x94e8; 
0x00000000001941bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001971da: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x00000000000bb4cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000c747b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000a5f6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000000ca1ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x00000000000323cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000aa49b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000083e7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0xe8; 
0x000000000004f2db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; sti; ret 0xffbf; 
0x00000000000440db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041fc2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000041f92: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x000000000010286c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000010286d: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x0000000000041fc3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f93: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x00000000000a20c1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000911f3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x00000000000b6e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000017debb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x000000000014de63: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000045eeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000015d22b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7c99fa17], al; stc; add esi, dword ptr [rsi + 7]; ret; 
0x00000000001413e5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001412b3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x00000000000bca8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x00000000000f0b2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3904; 
0x00000000001787cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x000000000013c24b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x00000000000eb75b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000bb70b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000010286e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000188adb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x000000000013f08b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0xc641; 
0x000000000016361b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x00000000000a90fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000000bff4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000012c4cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000160b0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf00008], cl; ret 0x1389; 
0x000000000003803b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000e083b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000004921b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ac64b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000184bbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000184b5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000ac17b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000001255a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x00000000001787a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e89: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6e69: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000178779: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b7e59: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000baf29: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf359: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x0000000000135c27: add byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x00000000000ec47b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x0000000000128d5b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x00000000000420fb: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000cfafc: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000009a75c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000a291c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000025b09: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009f8ec: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000420fc: add byte ptr [rax], al; add byte ptr [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000bc194: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000004232c: add byte ptr [rax], al; add byte ptr [rax], al; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac16c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac17c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac18c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000184b5c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac64c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac65c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac66c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000057b4c: add byte ptr [rax], al; add byte ptr [rax], al; bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000157e18: add byte ptr [rax], al; add byte ptr [rax], al; call 0x153530; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000198c29: add byte ptr [rax], al; add byte ptr [rax], al; call 0x22330; mov qword ptr [rip + 0x5692b], 0; add rsp, 8; ret; 
0x0000000000112af8: add byte ptr [rax], al; add byte ptr [rax], al; cmova eax, edx; ret; 
0x0000000000120e0b: add byte ptr [rax], al; add byte ptr [rax], al; cmovb rax, rdx; ret; 
0x00000000000a28d7: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000a2896: add byte ptr [rax], al; add byte ptr [rax], al; cmovne r8, rax; mov rax, r8; ret; 
0x000000000015c605: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000127adc: add byte ptr [rax], al; add byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000009cb8e: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000091e7c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1ec: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x0000000000091f3c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014624c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 1; ret; 
0x000000000012facc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000015749c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009384c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000009382c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x00000000000344bc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344dc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x000000000002f59c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000025a9c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x000000000009385c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000012d83c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000014692c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x0000000000041c68: add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005503a: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x55043; push r10; ret; 
0x0000000000055543: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x5554c; push r10; ret; 
0x00000000000440ec: add byte ptr [rax], al; add byte ptr [rax], al; lea eax, [rdx - 1]; mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x0000000000190e1c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000190e2c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e3c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000190e4c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000190e5c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000190dac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000190dbc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000190dcc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000190ddc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000190dec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000190dfc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000190e0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000b14cb: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cf64c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf66c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cf65c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x000000000009c20c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x00000000000328bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x181ab6]; ret; 
0x000000000017aadc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001767ac: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000a8a54: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax], 0; ret; 
0x00000000000ec44c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000ec47c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b849c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e5c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000b6e7c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000a8a7c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax], ecx; ret; 
0x00000000001787cc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001787bc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000017879c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000000a8b4c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b84ac: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92ec: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b7b5c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000013bcf3: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000013c9bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x00000000000f249c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xc; ret; 
0x00000000000440dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000cf07c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x0000000000057b3d: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000057d50: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000047583: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017debc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000cef9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x14]; cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000ceffc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x24]; cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cef3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x000000000010286f: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x00000000000b6e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000016dd9c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000092790: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000017880c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000017881c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000017882c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000017883c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000017884c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000017885c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001787fc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001787dc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x0000000000157de8: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000b7eac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7eec: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7efc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f0c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f1c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7edc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x000000000009393b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x15ae7e], 0; ret; 
0x0000000000121c72: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0xca6df], 0; ret; 
0x0000000000148344: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000013f08c: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x000000000008cd3c: add byte ptr [rax], al; add byte ptr [rax], al; mov r8d, 1; mov eax, r8d; ret; 
0x000000000013c93c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x00000000000cfb2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000cfb3c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000cfb4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000cfb5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000cfb6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000cfb7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000011d024: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x00000000000473c6: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017decc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000008d33c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008472c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000043dec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043bec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x000000000012f40c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xbca59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcc589]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f89c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcc5c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcdab1]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000001188f4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd3571]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115744: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd6721]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000328cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x0000000000188adc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000000b92cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000018b62c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6edc: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000016dbdc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a898c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a68c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018a67c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a8b1c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041c11: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b6f5c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b7f2c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f3c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000087cc5: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000141b73: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x00000000000919c1: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000010046a: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bc144: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x00000000000abeac: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016deec: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016de7c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000018915c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000154a07: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x00000000000ac3b9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000155ca9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 1; ret; 
0x0000000000094c38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000146909: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x000000000010c699: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x0000000000178768: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b7b48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016d678: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b67b8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x0000000000167918: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d808: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016d788: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000b7b38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000ac6e9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001886b9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000001255aa: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x0000000000190d9b: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d8b: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000001787aa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e6b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e8a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7e7b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000b6e6a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000001787eb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b7ecb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000cfb1b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x000000000018a8eb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x000000000017878b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017877a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x000000000018478b: add byte ptr [rax], al; add byte ptr [rax], al; nop; vzeroupper; xor eax, eax; ret; 
0x00000000000baf2a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000041fc5: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f95: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x0000000000057c25: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000000a20c2: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000ca054: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000bc0ff: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; cmove rax, rdx; ret; 
0x00000000000a2075: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fdda: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000093661: add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000024410: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000ce08c: add byte ptr [rax], al; add byte ptr [rax], al; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000015d22c: add byte ptr [rax], al; add byte ptr [rax], al; sub ecx, 5; cmp cx, 3; jbe 0x15d240; ret; 
0x000000000018479c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000189b0e: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000184bdc: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000ee474: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x000000000009ef36: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x00000000000bc0cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000040fc4: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000d006c: add byte ptr [rax], al; add byte ptr [rax], al; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000008e304: add byte ptr [rax], al; add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf67c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000053bcb: add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x2074; 
0x00000000000a0305: add byte ptr [rax], al; add byte ptr [rax], dl; lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x000000000014a322: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x40; pop rbx; ret; 
0x0000000000120e7a: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000008dbd5: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x48; ret; 
0x00000000001157f1: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x58; ret; 
0x00000000000d01f0: add byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; add rsp, 0x28; ret; 
0x000000000012df4c: add byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; add rsp, 0xd8; ret; 
0x000000000015e925: add byte ptr [rax], al; add byte ptr [rbp + 0x15], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011f0b6: add byte ptr [rax], al; add byte ptr [rbp + 0x18], dh; add rsp, 0x68; ret; 
0x00000000000437ca: add byte ptr [rax], al; add byte ptr [rbp + 0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044399: add byte ptr [rax], al; add byte ptr [rbp + 0x19], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000013e126: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000043993: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000005b5b0: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x450; pop rbp; ret; 
0x0000000000151720: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000044316: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000005b872: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; add rsp, 0x38; ret; 
0x00000000000ca0b0: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000015c5ab: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000013b48d: add byte ptr [rax], al; add byte ptr [rbp + 0x20850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000154220: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x28; ret; 
0x0000000000113a8a: add byte ptr [rax], al; add byte ptr [rbp + 0x25], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000043019: add byte ptr [rax], al; add byte ptr [rbp + 0x26], dh; mov eax, r8d; add rsp, 0x118; ret; 
0x00000000000438e3: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x000000000013a64a: add byte ptr [rax], al; add byte ptr [rbp + 0x28], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001365cc: add byte ptr [rax], al; add byte ptr [rbp + 0x28], dh; add rsp, 0x38; ret; 
0x00000000000d273b: add byte ptr [rax], al; add byte ptr [rbp + 0x29], al; ret; 
0x00000000000d1036: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; add rsp, 0x28; ret; 
0x0000000000149671: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000051ae7: add byte ptr [rax], al; add byte ptr [rbp + 0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015cabf: add byte ptr [rax], al; add byte ptr [rbp + 0x30], dh; add rsp, 0x18; ret; 
0x000000000008e8ac: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000000a39f5: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fild dword ptr [rbp - 0x77]; ret 0x8948; 
0x00000000000c0597: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; imul cl; ret; 
0x00000000000d006d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; in al, 0x4c; mov eax, esp; pop r12; ret; 
0x00000000000a0afe: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x39], cl; ret; 
0x000000000015cdb6: add byte ptr [rax], al; add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000014970f: add byte ptr [rax], al; add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000015d1bd: add byte ptr [rax], al; add byte ptr [rbp + 0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x00000000001476dc: add byte ptr [rax], al; add byte ptr [rbp + 0x34], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000024486: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000436be: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000de740: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000115941: add byte ptr [rax], al; add byte ptr [rbp + 0x37], dh; add rsp, 0x68; ret; 
0x000000000015fa11: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0x58; ret; 
0x000000000019719b: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret; 
0x0000000000116b65: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; add rsp, 0x38; ret; 
0x0000000000116c34: add byte ptr [rax], al; add byte ptr [rbp + 0x3c], dh; add rsp, 0x38; ret; 
0x000000000015fd7a: add byte ptr [rax], al; add byte ptr [rbp + 0x3d], dh; add rsp, 0x38; ret; 
0x0000000000155d8e: add byte ptr [rax], al; add byte ptr [rbp + 0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000001490fe: add byte ptr [rax], al; add byte ptr [rbp + 0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000094e0b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000060f0b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000436c7: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000001562ae: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000991fc: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000000e3663: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000155e5e: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000015728e: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000004322d: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x000000000015650e: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000013c7ea: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000121100: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x58; ret; 
0x00000000001133c8: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x68; ret; 
0x0000000000113457: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x18; ret; 
0x000000000011350f: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x000000000015fb08: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x68; ret; 
0x000000000010f302: add byte ptr [rax], al; add byte ptr [rbp + 0x49], dh; add rsp, 0x130; pop rbp; ret; 
0x00000000001135ad: add byte ptr [rax], al; add byte ptr [rbp + 0x49], dh; add rsp, 0x58; ret; 
0x00000000001155a6: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001563cd: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fcb1: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; add rsp, 0x68; ret; 
0x000000000008e6fa: add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000160959: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000005b057: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000df40c: add byte ptr [rax], al; add byte ptr [rbp + 0x52], dh; add rsp, 0x38; ret; 
0x000000000010299e: add byte ptr [rax], al; add byte ptr [rbp + 0x53], dh; add rsp, 0x38; ret; 
0x000000000013cc98: add byte ptr [rax], al; add byte ptr [rbp + 0x54], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000440ed: add byte ptr [rax], al; add byte ptr [rbp + 0x589ff42], cl; scasd eax, dword ptr [rdi]; sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x0000000000051c65: add byte ptr [rax], al; add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000011498c: add byte ptr [rax], al; add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; ret; 
0x0000000000051b97: add byte ptr [rax], al; add byte ptr [rbp + 0x5f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d1198: add byte ptr [rax], al; add byte ptr [rbp + 0x61], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000e44fc: add byte ptr [rax], al; add byte ptr [rbp + 0x62], dh; add rsp, 0x38; ret; 
0x0000000000151ce9: add byte ptr [rax], al; add byte ptr [rbp + 0x6c], dh; add rsp, 0x30; pop rbx; ret; 
0x00000000000e1608: add byte ptr [rax], al; add byte ptr [rbp + 0x6f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000151ba2: add byte ptr [rax], al; add byte ptr [rbp + 0x6f], dh; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x0000000000152380: add byte ptr [rax], al; add byte ptr [rbp + 0x71], dh; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x0000000000151a72: add byte ptr [rax], al; add byte ptr [rbp + 0x73], dh; add rsp, 0x10; pop r12; ret; 
0x0000000000114ae1: add byte ptr [rax], al; add byte ptr [rbp + 0x75], dh; add rsp, 0x38; ret; 
0x00000000001524bf: add byte ptr [rax], al; add byte ptr [rbp + 0x76], dh; add rsp, 0x28; pop rbx; pop r12; ret; 
0x000000000014746b: add byte ptr [rax], al; add byte ptr [rbp + 0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013e35e: add byte ptr [rax], al; add byte ptr [rbp + 0x7850fff], al; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000112a52: add byte ptr [rax], al; add byte ptr [rbp + 0x7f], dh; add rsp, 0x40; pop r12; ret; 
0x000000000011cb17: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000012f595: add byte ptr [rax], al; add byte ptr [rbp + 0xb], dh; add rsp, 0x28; ret; 
0x0000000000113afa: add byte ptr [rax], al; add byte ptr [rbp + 0xc], dh; add rsp, 0x18; ret; 
0x000000000004234f: add byte ptr [rax], al; add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x000000000012de56: add byte ptr [rax], al; add byte ptr [rbp + 0xd], dh; add rsp, 0xd8; ret; 
0x0000000000062de4: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x18; ret; 
0x00000000000e2e12: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001522b0: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000435c1: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x118; ret; 
0x00000000000f80b5: add byte ptr [rax], al; add byte ptr [rbp + 1], cl; ret 0xc148; 
0x000000000005503b: add byte ptr [rax], al; add byte ptr [rbp + 3], dh; push r10; ret; 
0x0000000000042b92: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000047440: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x0000000000136669: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000155c93: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x48; ret; 
0x00000000001539e2: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000010d32d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000157c57: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000d026a: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000001449ba: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; add rsp, 0x10; pop r12; ret; 
0x0000000000042eec: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x148; ret; 
0x00000000000d42e3: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000011bfc8: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x418; ret; 
0x000000000004374f: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x98; ret; 
0x000000000004441f: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xa8; ret; 
0x0000000000052c02: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x0000000000157b8a: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x000000000010fb90: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000062840: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x1010; pop rbp; ret; 
0x0000000000157b16: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x90; pop rbx; ret; 
0x00000000000ddc52: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0xe0; pop rbx; ret; 
0x000000000007a3b4: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000001215cd: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x52], cl; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000bcd72: add byte ptr [rax], al; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0462: add byte ptr [rax], al; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x0000000000023a62: add byte ptr [rax], al; add byte ptr [rbp - 0x2c], dh; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000023a72: add byte ptr [rax], al; add byte ptr [rbp - 0x3c], dh; ret; 
0x000000000019637d: add byte ptr [rax], al; add byte ptr [rbp - 0x76b63fb6], cl; ret 0xd349; 
0x000000000010befa: add byte ptr [rax], al; add byte ptr [rbp - 0x76b7febd], cl; ret; 
0x00000000000261c0: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; out 0xe8, eax; movsd dword ptr [rdi], dword ptr [rsi]; ret 0xffff; 
0x0000000000155a6e: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x0000000000049b39: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], -0x7c; ret; 
0x0000000000184b48: add byte ptr [rax], al; add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x0000000000098d09: add byte ptr [rax], al; add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000911f5: add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x00000000000900ad: add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000010fead: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000000b7b8d: add byte ptr [rax], al; add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a83de: add byte ptr [rax], al; add byte ptr [rbx + 0x458880c8], al; ret 0xd889; 
0x00000000000cef3d: add byte ptr [rax], al; add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000b84dd: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e9d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000017debd: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x00000000000bc100: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; cmove eax, edx; ret; 
0x0000000000110e40: add byte ptr [rax], al; add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000018f8fa: add byte ptr [rax], al; add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000000ec810: add byte ptr [rax], al; add byte ptr [rbx + 0x5b010447], al; pop rbp; pop r12; ret; 
0x000000000004429a: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000043550: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000832cc: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010d0f6: add byte ptr [rax], al; add byte ptr [rbx + 0x87702fe], al; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x00000000001379f6: add byte ptr [rax], al; add byte ptr [rbx + 0xb8a382d], al; add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x000000000016dd2d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dcbd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dc4d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000045eed: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000010979d: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x4c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000053b0d: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x6c], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x89e9; 
0x00000000000531a5: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000edf63: add byte ptr [rax], al; add byte ptr [rbx - 0x157cfe15], al; add dword ptr [rax + 0x63], ecx; ret; 
0x00000000000a55bc: add byte ptr [rax], al; add byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x0000000000150837: add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000011cd7d: add byte ptr [rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x000000000012299d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122e6d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122b5d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122acd: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122d2d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122dcd: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122efd: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012302d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122bf0: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x44; ret 0x8940; 
0x0000000000122a2d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122c8d: add byte ptr [rax], al; add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000081f0f: add byte ptr [rax], al; add byte ptr [rbx - 0x76b7ffbb], cl; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x00000000000ecaeb: add byte ptr [rax], al; add byte ptr [rbx - 0x76e3db8c], cl; ret 0x8348; 
0x000000000013c16e: add byte ptr [rax], al; add byte ptr [rbx - 0x77bffe12], al; ja 0x13c179; ret; 
0x0000000000078cad: add byte ptr [rax], al; add byte ptr [rbx - 0x78f0d008], al; mov ebx, 0x89000005; ret 0xc083; 
0x00000000000ac622: add byte ptr [rax], al; add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x0000000000102e45: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf00001], al; ret; 
0x00000000000bf1e1: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0cf03], al; ret; 
0x00000000000cbc0a: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0d403], al; ret 7; 
0x00000000000f9544: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0f006], al; stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret 0x7a8d; 
0x000000000015d22d: add byte ptr [rax], al; add byte ptr [rbx - 0x7c99fa17], al; stc; add esi, dword ptr [rsi + 7]; ret; 
0x00000000001413e7: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001412b5: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x00000000000bca8d: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x00000000000f0b2d: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3904; 
0x00000000001890c1: add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000006dc6e: add byte ptr [rax], al; add byte ptr [rbx - 0x9bef71d], al; ret; 
0x000000000012335d: add byte ptr [rax], al; add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123ab5: add byte ptr [rax], al; add byte ptr [rcx + 0x107223c6], cl; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000194cff: add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000d84da: add byte ptr [rax], al; add byte ptr [rcx + 0x29], al; ret 0x8d43; 
0x00000000000d6c8f: add byte ptr [rax], al; add byte ptr [rcx + 0x29], al; ret 0xbe0f; 
0x00000000000d6be9: add byte ptr [rax], al; add byte ptr [rcx + 0x29], al; ret; 
0x00000000001787cd: add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000f88f9: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x00000000000f8759: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x000000000005f1b1: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x1773; 
0x0000000000029b5e: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x000000000005f369: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000012cf91: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x00000000000c04b6: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8945; 
0x000000000005a9e3: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0xd231; 
0x00000000000cd818: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x00000000001507c6: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], edx; ret; 
0x000000000014fea3: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000eb75d: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000007ad85: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x56; or al, 0xf6; ret 0xf08; 
0x00000000000531ad: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000001138bd: add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret 0x8941; 
0x0000000000107543: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b48; 
0x00000000001400d6: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x3be9; 
0x000000000014007e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x9be9; 
0x000000000013fc8e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0xd889; 
0x00000000000f444a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x3c], cl; ret 0x8348; 
0x00000000000cb182: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x42], 4; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000009d716: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x000000000015e332: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x0000000000114179: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d005e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000082c41: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000117282: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000004125b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x000000000011733c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; add rsp, 8; ret; 
0x000000000015cf63: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; mov qword ptr [rdx], 0; ret; 
0x000000000002f702: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; ret; 
0x0000000000081a40: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000000d11a1: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x000000000008cd43: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000099cae: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000001533bc: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x000000000009809e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000018d3c0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000188a1d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000051446: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x000000000008cd3d: add byte ptr [rax], al; add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x0000000000092002: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000001574de: add byte ptr [rax], al; add byte ptr [rcx - 0x76b7d7b9], cl; ja 0x157500; mov eax, r8d; ret; 
0x0000000000029b4a: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x000000000012fcfe: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ror dword ptr [rdi], 0x97; ret 0x840; 
0x000000000011c5be: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; add byte ptr [r11 + rcx*4 + 0x7d], r9b; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000288e5: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; add ecx, dword ptr [rax - 0x77]; ror dword ptr [rax + 0x39], 1; ret; 
0x00000000000cd2b0: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x2e66; 
0x0000000000051321: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000013f08d: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0xc641; 
0x000000000019654b: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000a0b59: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x000000000016361d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000015f529: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x8b04; 
0x00000000000a0ae4: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xbd01; 
0x00000000000a90fd: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000053be7: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000012c4cd: add byte ptr [rax], al; add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x00000000001393ab: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000009090f: add byte ptr [rax], al; add byte ptr [rcx - 1], al; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000007bacf: add byte ptr [rax], al; add byte ptr [rcx - 5], al; jg 0x7bae8; test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000006c6b7: add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x00000000000ac7f4: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x00000000000ac81a: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x000000000011d728: add byte ptr [rax], al; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0472: add byte ptr [rax], al; add byte ptr [rcx], al; je 0xa0435; ret; 
0x00000000000bcd82: add byte ptr [rax], al; add byte ptr [rcx], al; je 0xbcd45; ret; 
0x0000000000102a80: add byte ptr [rax], al; add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x0000000000053b15: add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x89e9; 
0x00000000000dc2b4: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8948; 
0x00000000000d8f19: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8b48; 
0x00000000001141b5: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xc085; 
0x00000000000dac63: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0xd729; 
0x00000000000c9ff5: add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x00000000000499ef: add byte ptr [rax], al; add byte ptr [rcx], dh; div bh; ret 0; 
0x00000000000445ba: add byte ptr [rax], al; add byte ptr [rcx], dh; imul al; fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x000000000008d8db: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000ac12a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x00000000001969d5: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbp - 0x7b], 0xc0; jne 0x196930; add rsp, 0x38; ret; 
0x0000000000160b0d: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf00008], cl; ret 0x1389; 
0x0000000000102a9d: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000097c9e: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 0x34; ret; 
0x000000000009ef37: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000018bd9d: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x0000000000144725: add byte ptr [rax], al; add byte ptr [rcx], dh; sal al, 0xf; mov cl, 0x15; sahf; ret; 
0x00000000000ee475: add byte ptr [rax], al; add byte ptr [rcx], dh; sar byte ptr [rax], 0xe; je 0xee3bd; ret; 
0x000000000015de35: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x73], 0x3d; ret 0x59c; 
0x0000000000190a14: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000cf082: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; neg eax; ret; 
0x0000000000192be2: add byte ptr [rax], al; add byte ptr [rdi + 9], bh; neg eax; ret; 
0x00000000000424c5: add byte ptr [rax], al; add byte ptr [rdi], bh; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x0000000000087cc6: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000141b74: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000926bb: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbp + 0x38], eax; pop rbp; pop r12; ret; 
0x00000000000919c2: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x00000000001507d8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], ebx; ret; 
0x000000000014d080: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], ecx; ret; 
0x000000000014fec8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], edx; ret; 
0x00000000001507b8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], esp; ret; 
0x000000000010d042: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d04e: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000010046b: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 8], eax; ret; 
0x0000000000148328: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 8], ecx; ret; 
0x000000000014cf8d: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000042fd8: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x000000000016ce34: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000000bc085: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000016de7d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000018915d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000001388d3: add byte ptr [rax], al; add byte ptr [rdi], cl; mov cl, 0x15; ret; 
0x000000000016deed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000003803d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000038dd5: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000004921d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000bc145: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000abead: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000000ac65d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac66d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000ac64d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000184ae4: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8148c0; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x0000000000184bbd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000184b5d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000ac18d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac17d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000ac19d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ce37d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ac16d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000043325: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x000000000009d5fc: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ebp; add esp, 0x18; ret; 
0x00000000000578bf: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x000000000010decd: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], esi; add esp, 0x78; ret; 
0x000000000010e4c3: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebx; add esp, 0x68; ret; 
0x00000000000521f3: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ecx; add esp, 0x10; pop rbx; ret; 
0x000000000011508e: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edx; add esp, 0x60; pop rbp; ret; 
0x000000000010e604: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000012d0d1: add byte ptr [rax], al; add byte ptr [rdi], cl; test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000f7982: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0xca09; 
0x000000000014f44d: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x0000000000053ffc: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x3de9; 
0x00000000001965bd: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x8440; 
0x0000000000193be8: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x8441; 
0x00000000000f9b12: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0xf631; 
0x00000000000baf3d: add byte ptr [rax], al; add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000951f9: add byte ptr [rax], al; add byte ptr [rdx], al; jbe 0x95200; ret; 
0x000000000010261b: add byte ptr [rax], al; add byte ptr [rdx], ch; call 0x102520; add rsp, 0x18; ret; 
0x00000000000e4f3a: add byte ptr [rax], al; add byte ptr [rsi + 0x29], bh; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x0000000000093918: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091010: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f58: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117c1b: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x000000000006309c: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x000000000018d874: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000097d4c: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000160645: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x44c7; 
0x00000000001149af: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror dword ptr [rax - 0x75], 5; ret; 
0x0000000000093662: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000118ecc: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; ror dword ptr cs:[rdi], 0x9a; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000ac092: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000000ac57a: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac59f: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000122028: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; call 0x121ec0; ret; 
0x000000000009525a: add byte ptr [rax], al; add byte ptr [rsi + 1], dh; ret; 
0x00000000000e40bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; ret; 
0x00000000001411eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000001255ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x000000000017aacb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000001787ab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e8b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6e6b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000017877b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000b945b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000baf2b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x00000000001767ad: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000041c12: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d0e2: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x00000000000c6a9a: add byte ptr [rax], al; add byte ptr [rsp + rax + 0x44], dh; mov eax, eax; ret; 
0x0000000000128853: add byte ptr [rax], al; add cl, byte ptr [rax - 0x77]; ret 0x53ff; 
0x000000000012a030: add byte ptr [rax], al; add cl, byte ptr [rax - 0x77]; ret 0xff41; 
0x00000000000319b6: add byte ptr [rax], al; add cl, ch; mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x00000000000be525: add byte ptr [rax], al; add cl, ch; movabs al, byte ptr [0xeb8087b8bfffffc]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005e915: add byte ptr [rax], al; add cl, ch; ret 0xffe2; 
0x000000000007bc89: add byte ptr [rax], al; add cl, ch; ret 0xffea; 
0x00000000000e0ae7: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x0000000000084932: add byte ptr [rax], al; add cl, ch; ret 0xfffe; 
0x000000000002e046: add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000089756: add byte ptr [rax], al; add cl, ch; retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x00000000000578c5: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000a8a55: add byte ptr [rax], al; add dh, al; add byte ptr [rax], al; ret; 
0x00000000000ec47d: add byte ptr [rax], al; add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x000000000011ed93: add byte ptr [rax], al; add dh, byte ptr [rax + rcx - 0x77]; ret 0xeac1; 
0x00000000000951fa: add byte ptr [rax], al; add dh, byte ptr [rsi + 1]; ret; 
0x0000000000128d5d: add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x0000000000192051: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x000000000014a2ce: add byte ptr [rax], al; add dh, dh; ret 0x7507; 
0x00000000000f5362: add byte ptr [rax], al; add dh, dh; ret 0x7540; 
0x00000000000b2200: add byte ptr [rax], al; add dh, dh; ret 0xf20; 
0x00000000000b2209: add byte ptr [rax], al; add dh, dh; ret 0xf40; 
0x000000000005f565: add byte ptr [rax], al; add dh, dh; ret 0xf50; 
0x0000000000063c08: add byte ptr [rax], al; add dh, dh; ret; 
0x00000000000420fd: add byte ptr [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000ec811: add byte ptr [rax], al; add dword ptr [rdi + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000edba0: add byte ptr [rax], al; add dword ptr [rdi], ecx; lahf; ret 0xd189; 
0x0000000000102a81: add byte ptr [rax], al; add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x0000000000184b49: add byte ptr [rax], al; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000005432e: add byte ptr [rax], al; add rax, 1; cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000cfafe: add byte ptr [rax], al; add rax, 3; ret; 
0x00000000000abf43: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000001888f0: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001845b0: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000184af8: add byte ptr [rax], al; add rax, rdi; vzeroupper; ret; 
0x0000000000184aef: add byte ptr [rax], al; add rdx, rax; jl 0x184be0; add rax, rdi; vzeroupper; ret; 
0x000000000009d4e0: add byte ptr [rax], al; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009961f: add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000521fa: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000013cb58: add byte ptr [rax], al; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000009cfb0: add byte ptr [rax], al; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000089a54: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009a75e: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000010d61b: add byte ptr [rax], al; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000000042b3f: add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000000d2a4c: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000014e653: add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000008b85b: add byte ptr [rax], al; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000155ef5: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001970f8: add byte ptr [rax], al; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000091256: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196e07: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010e60b: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000008a401: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000151f91: add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000014e89c: add byte ptr [rax], al; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000013de83: add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000011390c: add byte ptr [rax], al; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113e85: add byte ptr [rax], al; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000115095: add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000010dd59: add byte ptr [rax], al; add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000001010ea: add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010e4ca: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x00000000000bd0d0: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010ded4: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000015e32c: add byte ptr [rax], al; add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000024240: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000081d37: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000002f6fc: add byte ptr [rax], al; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000e49b8: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000136e64: add byte ptr [rax], al; add rsp, 8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000000832e6: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000015663e: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000832c4: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000015766c: add byte ptr [rax], al; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011737c: add byte ptr [rax], al; add rsp, 8; mov eax, r8d; ret; 
0x00000000000a0a55: add byte ptr [rax], al; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009f9e2: add byte ptr [rax], al; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x00000000000a291e: add byte ptr [rax], al; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000024e06: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041e66: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000148c1e: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000148b3e: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000420fe: add byte ptr [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004245e: add byte ptr [rax], al; addss xmm0, xmm0; ret; 
0x00000000000bc196: add byte ptr [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000041ba0: add byte ptr [rax], al; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000018e2b1: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011ee88: add byte ptr [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000003448f: add byte ptr [rax], al; and eax, esi; ret; 
0x000000000018eb83: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e2b6: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000047c95: add byte ptr [rax], al; and edx, 0x7fffffff; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x00000000000ee409: add byte ptr [rax], al; and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000000ec49e: add byte ptr [rax], al; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000004232e: add byte ptr [rax], al; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac16e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac17e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac18e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac19e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ce37e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000b1e00: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000000cf734: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000aa37e: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184b6e: add byte ptr [rax], al; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184b5e: add byte ptr [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac64e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac65e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac66e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000b1918: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b19b2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000150878: add byte ptr [rax], al; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000150780: add byte ptr [rax], al; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000014d125: add byte ptr [rax], al; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000057d5e: add byte ptr [rax], al; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000057b4e: add byte ptr [rax], al; bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000102640: add byte ptr [rax], al; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000024232: add byte ptr [rax], al; call 0x113370; cmp eax, -1; je 0x24328; add rsp, 0x98; ret; 
0x0000000000113b26: add byte ptr [rax], al; call 0x1143a0; add rsp, 0x18; ret; 
0x0000000000121aee: add byte ptr [rax], al; call 0x121280; movsxd rbx, ebx; mov qword ptr [rip + 0xca861], rbx; pop rbx; ret; 
0x000000000012202e: add byte ptr [rax], al; call 0x121ec0; ret; 
0x0000000000157e1a: add byte ptr [rax], al; call 0x153530; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000198c2b: add byte ptr [rax], al; call 0x22330; mov qword ptr [rip + 0x5692b], 0; add rsp, 8; ret; 
0x000000000008e589: add byte ptr [rax], al; call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x000000000008fdd2: add byte ptr [rax], al; call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000146382: add byte ptr [rax], al; call rax; lea rax, [rip + 0xaa773]; add rsp, 8; ret; 
0x00000000000bc200: add byte ptr [rax], al; clc; jg 0xbc1fc; int1; mov eax, eax; ret; 
0x0000000000112afa: add byte ptr [rax], al; cmova eax, edx; ret; 
0x000000000013c576: add byte ptr [rax], al; cmovb eax, edx; ret; 
0x0000000000120e0d: add byte ptr [rax], al; cmovb rax, rdx; ret; 
0x0000000000043de0: add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000bc13a: add byte ptr [rax], al; cmove rax, rcx; ret; 
0x00000000000a0405: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000cf193: add byte ptr [rax], al; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf171: add byte ptr [rax], al; cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000ee412: add byte ptr [rax], al; cmovne eax, edx; pop rbx; ret; 
0x00000000000dcffa: add byte ptr [rax], al; cmovne eax, edx; ret; 
0x00000000000a2898: add byte ptr [rax], al; cmovne r8, rax; mov rax, r8; ret; 
0x000000000015c607: add byte ptr [rax], al; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009526f: add byte ptr [rax], al; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x00000000000e4fed: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000127ade: add byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000017c6e6: add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000042299: add byte ptr [rax], al; cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000ec3fe: add byte ptr [rax], al; cmp cl, 0x2d; jne 0xec3ed; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3cd: add byte ptr [rax], al; cmp cl, 0x5e; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000102a0c: add byte ptr [rax], al; cmp dx, 2; je 0x102a18; ret; 
0x0000000000192508: add byte ptr [rax], al; cmp eax, ecx; jne 0x1925c5; xor eax, eax; ret; 
0x000000000010d0f7: add byte ptr [rax], al; cmp esi, 2; ja 0x10d106; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000087499: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000009cb90: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000bcd04: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcf2d0]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc844: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcfa60]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcfd00]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xd0360]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc804: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xd0410]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc954: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xd06e0]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xdbd70]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c74: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe2b80]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe4130]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe6650]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f804: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe8cf0]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f654: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe9070]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f694: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe91d0]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000bbfa0: add byte ptr [rax], al; cmp rdx, 0x20; ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000018bc13: add byte ptr [rax], al; cmp rdx, rcx; jne 0x18bbfb; vzeroupper; ret; 
0x0000000000190ad6: add byte ptr [rax], al; cmp rdx, rcx; jne 0x190ab6; vzeroupper; ret; 
0x00000000000960b0: add byte ptr [rax], al; cmpxchg dword ptr [rip + 0x156ac7], edx; lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x00000000000dcf9e: add byte ptr [rax], al; endbr64; cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x0000000000091e7e: add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1ee: add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x000000000013b3de: add byte ptr [rax], al; endbr64; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000002419e: add byte ptr [rax], al; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000091f3e: add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014624e: add byte ptr [rax], al; endbr64; mov eax, 1; ret; 
0x00000000000e520e: add byte ptr [rax], al; endbr64; mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x0000000000148a7e: add byte ptr [rax], al; endbr64; mov eax, 2; ret; 
0x000000000010d05e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000010c77e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008cd4e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000094d9e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008deee: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000004409e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x000000000010d10e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000012face: add byte ptr [rax], al; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000015dede: add byte ptr [rax], al; endbr64; mov edi, dword ptr [rip + 0x8e546]; test edi, edi; jns 0x15def0; ret; 
0x000000000016345e: add byte ptr [rax], al; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937ee: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000015749e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de28e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009384e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000008748e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000951ee: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x000000000009523e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094e9e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e1e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x000000000009382e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x00000000000344be: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344de: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x000000000002f59e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x00000000000243fe: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025a9e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000162dce: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x89095]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d6e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x890f5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d4e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x89115]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d2e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x89135]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015ca3e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000142f6e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xadaa5]; test rax, rax; jne 0x142f88; ret; 
0x000000000012fe7e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x00000000001228ae: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001155fe: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000003444e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000009385e: add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x0000000000121ffe: add byte ptr [rax], al; endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x000000000009381e: add byte ptr [rax], al; endbr64; ret; 
0x00000000000342be: add byte ptr [rax], al; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014625e: add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x0000000000041dce: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000041c6a: add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x000000000012f9e9: add byte ptr [rax], al; ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x0000000000190a15: add byte ptr [rax], al; ja 0x190a2b; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000001909a5: add byte ptr [rax], al; ja 0x190a34; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000094e4b: add byte ptr [rax], al; jbe 0x94e50; ret; 
0x0000000000094e8b: add byte ptr [rax], al; jbe 0x94e90; ret; 
0x000000000009525b: add byte ptr [rax], al; jbe 0x95260; ret; 
0x00000000001890dd: add byte ptr [rax], al; je 0x189160; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000001897fd: add byte ptr [rax], al; je 0x189940; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189e7d: add byte ptr [rax], al; je 0x189f00; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018ab6d: add byte ptr [rax], al; je 0x18abf0; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000008aea8: add byte ptr [rax], al; je 0x8aeb8; mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x8aeb8; ret; 
0x000000000009e1fa: add byte ptr [rax], al; je 0x9e200; ret; 
0x00000000000a0463: add byte ptr [rax], al; je 0xa0435; lea rax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd73: add byte ptr [rax], al; je 0xbcd45; lea rax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000c6a9b: add byte ptr [rax], al; je 0xc6aa3; mov eax, r8d; ret; 
0x00000000000cf564: add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf614: add byte ptr [rax], al; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000000e4fba: add byte ptr [rax], al; je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x0000000000192be3: add byte ptr [rax], al; jg 0x192bf0; neg eax; ret; 
0x00000000000cf083: add byte ptr [rax], al; jg 0xcf089; neg eax; ret; 
0x000000000018f9a9: add byte ptr [rax], al; jl 0x18f9b0; neg eax; ret; 
0x00000000000e4f3b: add byte ptr [rax], al; jle 0xe4f68; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000001010e4: add byte ptr [rax], al; jne 0x1015f5; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010299f: add byte ptr [rax], al; jne 0x1029f6; add rsp, 0x38; ret; 
0x000000000010d179: add byte ptr [rax], al; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d32e: add byte ptr [rax], al; jne 0x10d338; add rsp, 0x10; pop rbp; ret; 
0x000000000010d43e: add byte ptr [rax], al; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010d490: add byte ptr [rax], al; jne 0x10d499; add rsp, 0x18; ret; 
0x000000000010d615: add byte ptr [rax], al; jne 0x10d871; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x000000000010dd53: add byte ptr [rax], al; jne 0x10de01; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000010dece: add byte ptr [rax], al; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4c4: add byte ptr [rax], al; jne 0x10e565; add rsp, 0x68; ret; 
0x000000000010e605: add byte ptr [rax], al; jne 0x10e6bf; add rsp, 0x30; pop rbx; ret; 
0x000000000010e735: add byte ptr [rax], al; jne 0x10e7ef; add rsp, 0x30; pop rbx; ret; 
0x000000000010f303: add byte ptr [rax], al; jne 0x10f350; add rsp, 0x130; pop rbp; ret; 
0x000000000010fb91: add byte ptr [rax], al; jne 0x10fb9d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112a53: add byte ptr [rax], al; jne 0x112ad6; add rsp, 0x40; pop r12; ret; 
0x00000000001133c9: add byte ptr [rax], al; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113458: add byte ptr [rax], al; jne 0x1134a3; add rsp, 0x18; ret; 
0x0000000000113510: add byte ptr [rax], al; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135ae: add byte ptr [rax], al; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113906: add byte ptr [rax], al; jne 0x1139e9; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113a8b: add byte ptr [rax], al; jne 0x113ab4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113afb: add byte ptr [rax], al; jne 0x113b0b; add rsp, 0x18; ret; 
0x0000000000113e7f: add byte ptr [rax], al; jne 0x113f48; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000011498d: add byte ptr [rax], al; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a2d: add byte ptr [rax], al; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114ae2: add byte ptr [rax], al; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bb2: add byte ptr [rax], al; jne 0x114c2b; add rsp, 0x38; ret; 
0x0000000000114cac: add byte ptr [rax], al; jne 0x114cb5; add rsp, 0x28; ret; 
0x000000000011508f: add byte ptr [rax], al; jne 0x115129; add rsp, 0x60; pop rbp; ret; 
0x00000000001155a7: add byte ptr [rax], al; jne 0x1155f5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001157f2: add byte ptr [rax], al; jne 0x115807; add rsp, 0x58; ret; 
0x000000000011586b: add byte ptr [rax], al; jne 0x115874; add rsp, 0x28; ret; 
0x0000000000115942: add byte ptr [rax], al; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b66: add byte ptr [rax], al; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c35: add byte ptr [rax], al; jne 0x116c75; add rsp, 0x38; ret; 
0x0000000000118296: add byte ptr [rax], al; jne 0x1182a2; add rsp, 0xd8; ret; 
0x000000000011836f: add byte ptr [rax], al; jne 0x11837b; add rsp, 0xd8; ret; 
0x00000000001196b7: add byte ptr [rax], al; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011bd2b: add byte ptr [rax], al; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bdeb: add byte ptr [rax], al; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc9: add byte ptr [rax], al; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c232: add byte ptr [rax], al; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c49f: add byte ptr [rax], al; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x000000000011cb18: add byte ptr [rax], al; jne 0x11cb26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011cba8: add byte ptr [rax], al; jne 0x11cbb6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011f0b7: add byte ptr [rax], al; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120abc: add byte ptr [rax], al; jne 0x120ac5; add rsp, 0x18; ret; 
0x0000000000120e7b: add byte ptr [rax], al; jne 0x120e8f; add rsp, 0xa0; pop rbx; ret; 
0x0000000000121101: add byte ptr [rax], al; jne 0x12114b; add rsp, 0x58; ret; 
0x0000000000129b4d: add byte ptr [rax], al; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b67e: add byte ptr [rax], al; jne 0x12b6b0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012b876: add byte ptr [rax], al; jne 0x12b882; add rsp, 0xd8; ret; 
0x000000000012d0d2: add byte ptr [rax], al; jne 0x12d1ad; leave; ret; 
0x000000000012de57: add byte ptr [rax], al; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012df4d: add byte ptr [rax], al; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e067: add byte ptr [rax], al; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012e12f: add byte ptr [rax], al; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012ef6d: add byte ptr [rax], al; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f087: add byte ptr [rax], al; jne 0x12f093; add rsp, 0xd8; ret; 
0x000000000012f14f: add byte ptr [rax], al; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f596: add byte ptr [rax], al; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f6: add byte ptr [rax], al; jne 0x12f605; add rsp, 0x28; ret; 
0x000000000012f6bf: add byte ptr [rax], al; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f79f: add byte ptr [rax], al; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f87f: add byte ptr [rax], al; jne 0x12f88b; add rsp, 0xd8; ret; 
0x00000000001365cd: add byte ptr [rax], al; jne 0x1365f9; add rsp, 0x38; ret; 
0x000000000013666a: add byte ptr [rax], al; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d7: add byte ptr [rax], al; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013a64b: add byte ptr [rax], al; jne 0x13a677; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013c6f0: add byte ptr [rax], al; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013c7eb: add byte ptr [rax], al; jne 0x13c835; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013cc99: add byte ptr [rax], al; jne 0x13ccf1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013de7d: add byte ptr [rax], al; jne 0x13df14; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000013e127: add byte ptr [rax], al; jne 0x13e145; add rsp, 0x20; pop rbx; ret; 
0x000000000013e17c: add byte ptr [rax], al; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1cf: add byte ptr [rax], al; jne 0x13e1d8; add rsp, 0x28; ret; 
0x000000000013ea5e: add byte ptr [rax], al; jne 0x13ea67; add rsp, 0x18; ret; 
0x00000000001449bb: add byte ptr [rax], al; jne 0x1449c6; add rsp, 0x10; pop r12; ret; 
0x0000000000146329: add byte ptr [rax], al; jne 0x146333; add rsp, 0x40; pop rbp; ret; 
0x00000000001472c9: add byte ptr [rax], al; jne 0x147378; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000014746c: add byte ptr [rax], al; jne 0x1474e7; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001476dd: add byte ptr [rax], al; jne 0x147715; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001490ff: add byte ptr [rax], al; jne 0x149143; add rsp, 0x10; pop rbx; ret; 
0x0000000000149672: add byte ptr [rax], al; jne 0x1496a2; add rsp, 0x10; pop rbx; ret; 
0x0000000000149710: add byte ptr [rax], al; jne 0x149745; add rsp, 0x10; pop rbx; ret; 
0x000000000014a323: add byte ptr [rax], al; jne 0x14a337; add rsp, 0x40; pop rbx; ret; 
0x000000000014e64d: add byte ptr [rax], al; jne 0x14e6d3; add rsp, 0x20; pop rbx; ret; 
0x0000000000151721: add byte ptr [rax], al; jne 0x151741; add rsp, 0x10; pop rbx; ret; 
0x0000000000151923: add byte ptr [rax], al; jne 0x1519b7; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000151a73: add byte ptr [rax], al; jne 0x151aea; add rsp, 0x10; pop r12; ret; 
0x0000000000151ba3: add byte ptr [rax], al; jne 0x151c16; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x0000000000151cea: add byte ptr [rax], al; jne 0x151d5a; add rsp, 0x30; pop rbx; ret; 
0x0000000000151e2a: add byte ptr [rax], al; jne 0x151e9a; add rsp, 0x30; pop rbx; ret; 
0x0000000000151f8b: add byte ptr [rax], al; jne 0x152032; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000015212b: add byte ptr [rax], al; jne 0x1521d2; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000001522b1: add byte ptr [rax], al; jne 0x1522c3; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000152381: add byte ptr [rax], al; jne 0x1523f6; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x00000000001524c0: add byte ptr [rax], al; jne 0x15253a; add rsp, 0x28; pop rbx; pop r12; ret; 
0x00000000001539e3: add byte ptr [rax], al; jne 0x1539ec; add rsp, 0x78; ret; 
0x0000000000153a59: add byte ptr [rax], al; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac9: add byte ptr [rax], al; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b39: add byte ptr [rax], al; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b9a: add byte ptr [rax], al; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bfe: add byte ptr [rax], al; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c69: add byte ptr [rax], al; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153cec: add byte ptr [rax], al; jne 0x153cf5; add rsp, 0x78; ret; 
0x0000000000154221: add byte ptr [rax], al; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c94: add byte ptr [rax], al; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000155cff: add byte ptr [rax], al; jne 0x155d43; add rsp, 0x10; pop rbx; ret; 
0x0000000000155d8f: add byte ptr [rax], al; jne 0x155dd2; add rsp, 0x10; pop rbx; ret; 
0x0000000000155e5f: add byte ptr [rax], al; jne 0x155ea5; add rsp, 0x10; pop rbp; ret; 
0x0000000000155eef: add byte ptr [rax], al; jne 0x155f8f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000155fdf: add byte ptr [rax], al; jne 0x15607f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001560cf: add byte ptr [rax], al; jne 0x15616f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001561bf: add byte ptr [rax], al; jne 0x15625f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001562af: add byte ptr [rax], al; jne 0x1562f4; add rsp, 0x10; pop rbx; ret; 
0x000000000015633f: add byte ptr [rax], al; jne 0x156383; add rsp, 0x10; pop rbx; ret; 
0x00000000001563ce: add byte ptr [rax], al; jne 0x156420; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015646e: add byte ptr [rax], al; jne 0x1564c0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015650f: add byte ptr [rax], al; jne 0x156559; add rsp, 0x10; pop rbx; ret; 
0x000000000015659f: add byte ptr [rax], al; jne 0x1565e3; add rsp, 0x10; pop rbx; ret; 
0x0000000000156e33: add byte ptr [rax], al; jne 0x156ecf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000156f23: add byte ptr [rax], al; jne 0x156fbf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157013: add byte ptr [rax], al; jne 0x1570af; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157103: add byte ptr [rax], al; jne 0x15719f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015728f: add byte ptr [rax], al; jne 0x1572d5; add rsp, 0x10; pop rbx; ret; 
0x000000000015731f: add byte ptr [rax], al; jne 0x157365; add rsp, 0x10; pop rbx; ret; 
0x00000000001573af: add byte ptr [rax], al; jne 0x1573f5; add rsp, 0x10; pop rbx; ret; 
0x000000000015743f: add byte ptr [rax], al; jne 0x157485; add rsp, 0x10; pop rbx; ret; 
0x0000000000157b17: add byte ptr [rax], al; jne 0x157b24; add rsp, 0x90; pop rbx; ret; 
0x0000000000157b8b: add byte ptr [rax], al; jne 0x157b97; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157bec: add byte ptr [rax], al; jne 0x157bf8; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157c58: add byte ptr [rax], al; jne 0x157c62; add rsp, 0x10; pop rbx; ret; 
0x0000000000157ccb: add byte ptr [rax], al; jne 0x157cd5; add rsp, 0x10; pop rbx; ret; 
0x000000000015c5ac: add byte ptr [rax], al; jne 0x15c5cf; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000015cac0: add byte ptr [rax], al; jne 0x15caf4; add rsp, 0x18; ret; 
0x000000000015cdb7: add byte ptr [rax], al; jne 0x15cdec; add rsp, 0x10; pop rbp; ret; 
0x000000000015ce47: add byte ptr [rax], al; jne 0x15ce7c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d1be: add byte ptr [rax], al; jne 0x15d1f5; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x000000000015e926: add byte ptr [rax], al; jne 0x15e93f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fa12: add byte ptr [rax], al; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb09: add byte ptr [rax], al; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcb2: add byte ptr [rax], al; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd7b: add byte ptr [rax], al; jne 0x15fdbc; add rsp, 0x38; ret; 
0x000000000016095a: add byte ptr [rax], al; jne 0x1609af; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000160e0e: add byte ptr [rax], al; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000163399: add byte ptr [rax], al; jne 0x1633a3; add rsp, 0x10; pop rbx; ret; 
0x000000000016341f: add byte ptr [rax], al; jne 0x163429; add rsp, 0x10; pop rbx; ret; 
0x0000000000184ec2: add byte ptr [rax], al; jne 0x184dd0; ret; 
0x000000000018be00: add byte ptr [rax], al; jne 0x18bd80; ret; 
0x0000000000023a63: add byte ptr [rax], al; jne 0x23a3b; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000023a73: add byte ptr [rax], al; jne 0x23a3b; ret; 
0x0000000000024487: add byte ptr [rax], al; jne 0x244c0; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000042350: add byte ptr [rax], al; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000042b93: add byte ptr [rax], al; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042eed: add byte ptr [rax], al; jne 0x42ef9; add rsp, 0x148; ret; 
0x000000000004301a: add byte ptr [rax], al; jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000004322e: add byte ptr [rax], al; jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043326: add byte ptr [rax], al; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435c2: add byte ptr [rax], al; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043645: add byte ptr [rax], al; jne 0x43658; add rsp, 0x118; ret; 
0x00000000000436bf: add byte ptr [rax], al; jne 0x436f8; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000043750: add byte ptr [rax], al; jne 0x4375c; add rsp, 0x98; ret; 
0x00000000000437cb: add byte ptr [rax], al; jne 0x437e7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000438e4: add byte ptr [rax], al; jne 0x4390f; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000043994: add byte ptr [rax], al; jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043cf0: add byte ptr [rax], al; jne 0x43cfc; add rsp, 0x148; ret; 
0x0000000000044317: add byte ptr [rax], al; jne 0x44337; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000004439a: add byte ptr [rax], al; jne 0x443b7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044420: add byte ptr [rax], al; jne 0x4442c; add rsp, 0xa8; ret; 
0x0000000000047441: add byte ptr [rax], al; jne 0x4744a; add rsp, 0x28; ret; 
0x0000000000047531: add byte ptr [rax], al; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047dbb: add byte ptr [rax], al; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e08: add byte ptr [rax], al; jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e5a: add byte ptr [rax], al; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea7: add byte ptr [rax], al; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047efa: add byte ptr [rax], al; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f47: add byte ptr [rax], al; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000051ae8: add byte ptr [rax], al; jne 0x51b1c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051b98: add byte ptr [rax], al; jne 0x51bfb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051c66: add byte ptr [rax], al; jne 0x51cc4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000521f4: add byte ptr [rax], al; jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c03: add byte ptr [rax], al; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414d: add byte ptr [rax], al; jne 0x54159; add rsp, 0xd8; ret; 
0x000000000005503c: add byte ptr [rax], al; jne 0x55043; push r10; ret; 
0x0000000000055545: add byte ptr [rax], al; jne 0x5554c; push r10; ret; 
0x00000000000578c0: add byte ptr [rax], al; jne 0x57945; leave; ret; 
0x000000000005b058: add byte ptr [rax], al; jne 0x5b0ad; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000005b5b1: add byte ptr [rax], al; jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b873: add byte ptr [rax], al; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c76: add byte ptr [rax], al; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d4b: add byte ptr [rax], al; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061e02: add byte ptr [rax], al; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed4: add byte ptr [rax], al; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f96: add byte ptr [rax], al; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062056: add byte ptr [rax], al; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062144: add byte ptr [rax], al; jne 0x62150; add rsp, 0xd8; ret; 
0x000000000006221b: add byte ptr [rax], al; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000062841: add byte ptr [rax], al; jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de5: add byte ptr [rax], al; jne 0x62df7; add rsp, 0x18; ret; 
0x000000000006316e: add byte ptr [rax], al; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063249: add byte ptr [rax], al; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c6: add byte ptr [rax], al; jne 0x864d2; add rsp, 0xd8; ret; 
0x0000000000086582: add byte ptr [rax], al; jne 0x8658e; add rsp, 0xd8; ret; 
0x000000000008667b: add byte ptr [rax], al; jne 0x86687; add rsp, 0xd8; ret; 
0x000000000008674b: add byte ptr [rax], al; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086804: add byte ptr [rax], al; jne 0x86810; add rsp, 0xd8; ret; 
0x0000000000089a4e: add byte ptr [rax], al; jne 0x89aea; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008a3fb: add byte ptr [rax], al; jne 0x8a4ec; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000008dbd6: add byte ptr [rax], al; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000093585: add byte ptr [rax], al; jne 0x93598; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000094601: add byte ptr [rax], al; jne 0x945ec; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x00000000000991fd: add byte ptr [rax], al; jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x000000000009d4da: add byte ptr [rax], al; jne 0x9d58f; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d5fd: add byte ptr [rax], al; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000c6809: add byte ptr [rax], al; jne 0xc686c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000c68e7: add byte ptr [rax], al; jne 0xc6945; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000c69b9: add byte ptr [rax], al; jne 0xc69ed; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ca0b1: add byte ptr [rax], al; jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000cab8e: add byte ptr [rax], al; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac69: add byte ptr [rax], al; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000cdfb9: add byte ptr [rax], al; jne 0xce00e; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000d01f1: add byte ptr [rax], al; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d026b: add byte ptr [rax], al; jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d1037: add byte ptr [rax], al; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000d1199: add byte ptr [rax], al; jne 0xd11fe; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000d42e4: add byte ptr [rax], al; jne 0xd42f0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000da6ba: add byte ptr [rax], al; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf8a: add byte ptr [rax], al; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000ddc53: add byte ptr [rax], al; jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce7: add byte ptr [rax], al; jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000de741: add byte ptr [rax], al; jne 0xde77a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000000df40d: add byte ptr [rax], al; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e1609: add byte ptr [rax], al; jne 0xe167c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e2e13: add byte ptr [rax], al; jne 0xe2e25; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000e3664: add byte ptr [rax], al; jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3834: add byte ptr [rax], al; jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418d: add byte ptr [rax], al; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422d: add byte ptr [rax], al; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44fd: add byte ptr [rax], al; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45ad: add byte ptr [rax], al; jne 0xe4613; add rsp, 0x38; ret; 
0x00000000000e49b2: add byte ptr [rax], al; jne 0xe4ed4; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000e4fc3: add byte ptr [rax], al; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e50e4: add byte ptr [rax], al; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e579e: add byte ptr [rax], al; jne 0xe597d; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000ee492: add byte ptr [rax], al; jne 0xee3bd; ret; 
0x00000000000440ee: add byte ptr [rax], al; lea eax, [rdx - 1]; mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x0000000000190e1e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000190e2e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e3e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000190e4e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000190e5e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000190d7d: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000190dae: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000190dbe: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000190dce: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000190dde: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000190dee: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000190d2a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x0000000000190dfe: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000190e0e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000b14cd: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cf4eb: add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf64e: add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf66e: add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cf65e: add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x000000000009c20e: add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x000000000009f136: add byte ptr [rax], al; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x00000000000328be: add byte ptr [rax], al; lea rax, [rip + 0x181ab6]; ret; 
0x0000000000047f82: add byte ptr [rax], al; lea rax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x00000000001191d0: add byte ptr [rax], al; lea rax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x0000000000118c88: add byte ptr [rax], al; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x000000000017e024: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000008e5b3: add byte ptr [rax], al; lea rcx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000118c7c: add byte ptr [rax], al; lea rcx, [rip + 0xd6beb]; call 0x118f80; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000098da9: add byte ptr [rax], al; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa5: add byte ptr [rax], al; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a4d: add byte ptr [rax], al; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093923: add byte ptr [rax], al; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x000000000009101b: add byte ptr [rax], al; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f63: add byte ptr [rax], al; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x000000000004764d: add byte ptr [rax], al; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198a9d: add byte ptr [rax], al; lea rdi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dcd: add byte ptr [rax], al; lea rdi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x000000000014245d: add byte ptr [rax], al; lea rdi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c26: add byte ptr [rax], al; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x000000000009f6fb: add byte ptr [rax], al; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f19b: add byte ptr [rax], al; lea rdx, [rip + 0xc42dc]; cmovne rax, rdx; ret; 
0x000000000009f765: add byte ptr [rax], al; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a088e: add byte ptr [rax], al; lea rdx, [rip + 0xd01b9]; cmovne rax, rdx; ret; 
0x00000000000a07ee: add byte ptr [rax], al; lea rdx, [rip + 0xd0239]; cmovne rax, rdx; ret; 
0x00000000000a08de: add byte ptr [rax], al; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a083e: add byte ptr [rax], al; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x000000000009f7cb: add byte ptr [rax], al; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x00000000000a079b: add byte ptr [rax], al; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x00000000000a044c: add byte ptr [rax], al; lea rdx, [rip + 0xf0a1b]; cmovne rax, rdx; ret; 
0x00000000000578c6: add byte ptr [rax], al; leave; ret; 
0x000000000017aade: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001767ae: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000a8a56: add byte ptr [rax], al; mov byte ptr [rax], 0; ret; 
0x000000000011d923: add byte ptr [rax], al; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec44e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000ec47e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000ec48e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x0000000000189803: add byte ptr [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000000ec443: add byte ptr [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000b849e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e5e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000b76be: add byte ptr [rax], al; mov byte ptr [rdi], dh; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000529f0: add byte ptr [rax], al; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000b7b6e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b84be: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e7e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000baf3e: add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x000000000014d0fe: add byte ptr [rax], al; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x00000000000a8a7e: add byte ptr [rax], al; mov dword ptr [rax], ecx; ret; 
0x000000000008fd8c: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x00000000001787ce: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001787be: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000017879e: add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000001574df: add byte ptr [rax], al; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x000000000013b40c: add byte ptr [rax], al; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000000a8b4e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041d90: add byte ptr [rax], al; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b7e9e: add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000057c30: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000095230: add byte ptr [rax], al; mov dword ptr [rip + 0x157074], eax; ret; 
0x0000000000148317: add byte ptr [rax], al; mov dword ptr [rsi + 8], eax; ret; 
0x000000000010d068: add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000102865: add byte ptr [rax], al; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret; 
0x000000000016de0e: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84ae: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92ee: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b7b5e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000baf4e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000013bcf5: add byte ptr [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x0000000000113b58: add byte ptr [rax], al; mov eax, 0x10; syscall; cmp rax, -0x1000; ja 0x113bb8; ret; 
0x000000000011f237: add byte ptr [rax], al; mov eax, 0x119; syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x00000000000e506a: add byte ptr [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f80: add byte ptr [rax], al; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000043407: add byte ptr [rax], al; mov eax, 0x7f; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000013c9be: add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x0000000000043453: add byte ptr [rax], al; mov eax, 0x82; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x00000000000f249e: add byte ptr [rax], al; mov eax, 0xc; ret; 
0x0000000000098da4: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa0: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a48: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x000000000009391e: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091016: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5e: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000047648: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198a98: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dc8: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x0000000000142458: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c21: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x00000000000630a2: add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000013bcb4: add byte ptr [rax], al; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000004653c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x00000000000412bc: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246f4: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000dcfbc: add byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000192bde: add byte ptr [rax], al; mov eax, 1; jg 0x192bf0; neg eax; ret; 
0x00000000000cf07e: add byte ptr [rax], al; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x0000000000149c95: add byte ptr [rax], al; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057b3f: add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000057d52: add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000011cd7e: add byte ptr [rax], al; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x0000000000047585: add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017debe: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000cef9e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x14]; cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000ceffe: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x24]; cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cef3e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x0000000000026f56: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140cb6: add byte ptr [rax], al; mov eax, dword ptr [rip + 0xafb06]; test eax, eax; je 0x140cc8; ret; 
0x0000000000125306: add byte ptr [rax], al; mov eax, dword ptr fs:[r12]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bc10e: add byte ptr [rax], al; mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000012fb06: add byte ptr [rax], al; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000013c9aa: add byte ptr [rax], al; mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000009d717: add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x0000000000125785: add byte ptr [rax], al; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000015e333: add byte ptr [rax], al; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000011417a: add byte ptr [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000011733d: add byte ptr [rax], al; mov eax, r8d; add rsp, 8; ret; 
0x000000000015cf64: add byte ptr [rax], al; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x000000000002f703: add byte ptr [rax], al; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000081a41: add byte ptr [rax], al; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000438ed: add byte ptr [rax], al; mov eax, r8d; pop rbx; ret; 
0x000000000008cd44: add byte ptr [rax], al; mov eax, r8d; ret; 
0x00000000000cef06: add byte ptr [rax], al; mov ecx, dword ptr [rsi + 0xc]; cmp dword ptr [rdi + 0xc], ecx; jne 0xcf080; xor eax, eax; ret; 
0x000000000018f76f: add byte ptr [rax], al; mov ecx, dword ptr [rsi - 4]; cmp ecx, dword ptr [rdi - 4]; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000000b84de: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e9e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b7b8e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6eae: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000012335e: add byte ptr [rax], al; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000e50f4: add byte ptr [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4fe8: add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000011f2ea: add byte ptr [rax], al; mov edx, 8; syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x000000000016dd2e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dcbe: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dc4e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000000b6e8e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a8a86: add byte ptr [rax], al; mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a9e: add byte ptr [rax], al; mov edx, dword ptr [rsp - 0x18]; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x0000000000093919: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091011: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f59: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117c1c: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x000000000006309d: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000122029: add byte ptr [rax], al; mov esi, 1; call 0x121ec0; ret; 
0x0000000000123ab6: add byte ptr [rax], al; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000148c8b: add byte ptr [rax], al; mov qword ptr [r12 + 0x30], rax; call 0x1576d0; mov rax, r12; pop r12; ret; 
0x0000000000092792: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000015f907: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015f8bf: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000011d7ca: add byte ptr [rax], al; mov qword ptr [rbx + 0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000025b04: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015fe02: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000017880e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000017881e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000017882e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000017883e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000017884e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000017885e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001787fe: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001787de: add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x0000000000157dea: add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000b7eae: add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000a86e9: add byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x00000000000b7eee: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7efe: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f0e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f1e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018a6ae: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ede: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7ebe: add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x0000000000057b58: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000827f8: add byte ptr [rax], al; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000063017: add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000095209: add byte ptr [rax], al; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951e0: add byte ptr [rax], al; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951c0: add byte ptr [rax], al; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x000000000009393d: add byte ptr [rax], al; mov qword ptr [rip + 0x15ae7e], 0; ret; 
0x00000000001989e1: add byte ptr [rax], al; mov qword ptr [rip + 0x55db6], rbx; test rbx, rbx; jne 0x1989d0; pop rbx; ret; 
0x000000000015d36c: add byte ptr [rax], al; mov qword ptr [rip + 0x93dc7], 0; add rsp, 8; ret; 
0x0000000000121c74: add byte ptr [rax], al; mov qword ptr [rip + 0xca6df], 0; ret; 
0x0000000000121871: add byte ptr [rax], al; mov qword ptr [rip + 0xcaae2], 3; add rsp, 8; ret; 
0x00000000001176c4: add byte ptr [rax], al; mov qword ptr [rip + 0xd80bf], 0; add rsp, 8; ret; 
0x0000000000115e97: add byte ptr [rax], al; mov qword ptr [rip + 0xd979c], 0; add rsp, 8; ret; 
0x000000000014820b: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], 2; test eax, eax; je 0x148220; xor eax, eax; ret; 
0x0000000000148308: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000048107: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048156: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000014833e: add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000148300: add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482a4: add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x000000000003454d: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000013f08e: add byte ptr [rax], al; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000001678fe: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000008cd3e: add byte ptr [rax], al; mov r8d, 1; mov eax, r8d; ret; 
0x00000000001482ae: add byte ptr [rax], al; mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x000000000013c93e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000000042f2c: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cfb2e: add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000cfb3e: add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000cfb4e: add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000cfb5e: add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000cfb6e: add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000cfb7e: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000011d026: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000009271d: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x00000000000473c8: add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000009c1f6: add byte ptr [rax], al; mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000017dece: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000008ce26: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf6: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x000000000008ce13: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce3: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000014ff76: add byte ptr [rax], al; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ff46: add byte ptr [rax], al; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x00000000000dd146: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009808e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x153dd9]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000008d33e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008472e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000043dee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c36: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000033d0e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x00000000000246e6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000012f40e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xbca59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcc589]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f89e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcc5c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fbe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcdab1]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011c4e6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcf981]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001188f6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd3571]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115746: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd6721]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112926: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010dc1e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde249]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d9e6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d986: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde4e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d926: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde541]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d59e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde8c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d53e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde929]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde989]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001234fe: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000328ce: add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x000000000019693a: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000004125c: add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000000d005f: add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x0000000000082c42: add byte ptr [rax], al; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000062655: add byte ptr [rax], al; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000117283: add byte ptr [rax], al; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000015d1c7: add byte ptr [rax], al; mov rax, r8; pop rbp; ret; 
0x0000000000099caf: add byte ptr [rax], al; mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000001533bd: add byte ptr [rax], al; mov rax, r8; pop rbx; ret; 
0x000000000009809f: add byte ptr [rax], al; mov rax, r8; ret; 
0x000000000018d3c1: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000188a1e: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000038c75: add byte ptr [rax], al; mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f50b: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000090086: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b812e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000018b62e: add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x0000000000167cbe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e9e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016807e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016826e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016846e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016866e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167ade: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b852e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ede: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b7bce: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b6eee: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000bbbf3: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ff513: add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x28]; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000000f1fee: add byte ptr [rax], al; mov rdi, qword ptr [rsi + 0x28]; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000ee486: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000827f1: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000e2d5e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x109109]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d108e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x11add9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0eee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x11af79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062ece: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x188f99]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000434ae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x1a89b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004341e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x1a8a49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012e7be: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xbd6a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120fde: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcae89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120cae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcb1b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120706: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcb761]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012059e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcb8c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012037e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcbae9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001201fe: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcbc69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f75e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f6b6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc7b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5ee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc879]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f48e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc9d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2b6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xccbb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116c9e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd51c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001152ae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6bb9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001151ee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6c79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114fee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6e79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bb6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd82b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011364e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8819]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113616: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8851]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001130be: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8da9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113066: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8e01]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e85e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xdd609]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e02e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xdde39]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dc06: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde261]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d9ce: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde499]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d90e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde559]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d586: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde8e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d526: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde941]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4c6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde9a1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000016db6e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dafe: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da8e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d9ae: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d93e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d8ce: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6ece: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a46: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a896e: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000015f240: add byte ptr [rax], al; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000005b4ce: add byte ptr [rax], al; mov rsp, rdx; ret; 
0x0000000000113c89: add byte ptr [rax], al; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000a898e: add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a68e: add byte ptr [rax], al; mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018a67e: add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a8b1e: add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x000000000014d0e3: add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000048198: add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000041c13: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d066: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b7c4e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b7cbe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b70ae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6f5e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000010d0cb: add byte ptr [rax], al; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d0d7: add byte ptr [rax], al; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000bbf2a: add byte ptr [rax], al; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7f2e: add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f3e: add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b3960: add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000148747: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + 0x18]; cmp eax, 3; jbe 0x148760; mov eax, 2; ret; 
0x0000000000047860: add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000013c336: add byte ptr [rax], al; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000000bbae9: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000001507c7: add byte ptr [rax], al; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014fea4: add byte ptr [rax], al; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000087cc7: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000141b75: add byte ptr [rax], al; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x00000000000926bc: add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x00000000000919c3: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000014d081: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014fec9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001507d9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507b9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010d043: add byte ptr [rax], al; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d04f: add byte ptr [rax], al; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010046c: add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000148329: add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000014cf8e: add byte ptr [rax], al; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001841fb: add byte ptr [rax], al; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184235: add byte ptr [rax], al; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000091b3e: add byte ptr [rax], al; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000184068: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000001920ee: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x00000000001920de: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920ce: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001920be: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920ae: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000019209e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000192448: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x1925c5; xor eax, eax; ret; 
0x000000000018e41e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e1d1: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000184e4e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000019915e: add byte ptr [rax], al; movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x00000000000bc146: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x00000000000abeae: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000001843fe: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000018916e: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000001899de: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016deee: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000018a58e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000018abee: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000016de7e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000018915e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000154a09: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x00000000001228a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000198ac1: add byte ptr [rax], al; nop dword ptr [rax + rax]; ret; 
0x00000000000ac3bb: add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000001579fa: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000155cab: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 1; ret; 
0x00000000000342aa: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x0000000000094c3a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000014690b: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x000000000010c69b: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x000000000017679b: add byte ptr [rax], al; nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000017876a: add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e4a: add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b7b4a: add byte ptr [rax], al; nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000017ab0a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000000cefcb: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x1c]; cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cef6b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 0xc]; cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x0000000000192aeb: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; ret; 
0x000000000016d67a: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b931a: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x000000000017aa5b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017672b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000000b67ba: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x000000000016791a: add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000019208b: add byte ptr [rax], al; nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000000aa39b: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016d80a: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016d78a: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000b7b3a: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000cf60b: add byte ptr [rax], al; nop dword ptr [rax]; test rax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x000000000018849b: add byte ptr [rax], al; nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac6eb: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001886bb: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000012d835: add byte ptr [rax], al; nop word ptr [rax + rax]; endbr64; ret; 
0x000000000012dbe8: add byte ptr [rax], al; nop word ptr [rax + rax]; ret; 
0x00000000000e40bc: add byte ptr [rax], al; nop; endbr64; mov eax, 0x27; syscall; ret; 
0x00000000000e43cd: add byte ptr [rax], al; nop; endbr64; mov eax, 0x6f; syscall; ret; 
0x000000000012005d: add byte ptr [rax], al; nop; endbr64; mov eax, 0xba; syscall; ret; 
0x000000000011f95d: add byte ptr [rax], al; nop; endbr64; mov eax, 0xe4; syscall; ret; 
0x00000000001411ec: add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000042a1d: add byte ptr [rax], al; nop; endbr64; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000424dd: add byte ptr [rax], al; nop; endbr64; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000001255ac: add byte ptr [rax], al; nop; endbr64; ret; 
0x0000000000190d9d: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d8d: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000017aacc: add byte ptr [rax], al; nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b92dd: add byte ptr [rax], al; nop; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x00000000001787ac: add byte ptr [rax], al; nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e6d: add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e8c: add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7e7d: add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000b6e6c: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000cf04d: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x34]; cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x0000000000192abd: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi - 0xc]; cmp eax, dword ptr [rsi - 0xc]; jne 0x192be0; ret; 
0x00000000001787ed: add byte ptr [rax], al; nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b7ecd: add byte ptr [rax], al; nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000cfb1d: add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x000000000004305d: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018a8ed: add byte ptr [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x000000000017878d: add byte ptr [rax], al; nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017877c: add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5c: add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x00000000000b945c: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85fc: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000319bc: add byte ptr [rax], al; nop; ret; 
0x00000000000cf55d: add byte ptr [rax], al; nop; test rax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x000000000018478d: add byte ptr [rax], al; nop; vzeroupper; xor eax, eax; ret; 
0x00000000000baf2c: add byte ptr [rax], al; nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35c: add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000041fc7: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f97: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x0000000000057c27: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000011394f: add byte ptr [rax], al; or byte ptr [rip - 0x80000000], 0x39; ret 0x9b75; 
0x0000000000117376: add byte ptr [rax], al; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x000000000008e65e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000061bc3: add byte ptr [rax], al; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000041ba5: add byte ptr [rax], al; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000ac0b9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac5a0: add byte ptr [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000012cf92: add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x000000000009a497: add byte ptr [rax], al; pop rbp; mov rax, r8; pop r12; pop r13; ret; 
0x000000000006344d: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000060f0c: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000000436c8: add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000005b5ba: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000bc101: add byte ptr [rax], al; pop rbx; cmove rax, rdx; ret; 
0x00000000000875b6: add byte ptr [rax], al; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000010c506: add byte ptr [rax], al; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000099bd2: add byte ptr [rax], al; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000013c501: add byte ptr [rax], al; pop rbx; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000010feae: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop r14; ret; 
0x000000000004429b: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000043551: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832cd: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000002fddc: add byte ptr [rax], al; pop rbx; ret; 
0x00000000000900ae: add byte ptr [rax], al; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000010261c: add byte ptr [rax], al; push 0; call 0x102520; add rsp, 0x18; ret; 
0x0000000000093663: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000116d8e: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000024247: add byte ptr [rax], al; ret; 
0x000000000012faf6: add byte ptr [rax], al; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000000023a49: add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x0000000000041b1a: add byte ptr [rax], al; sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000000ce08e: add byte ptr [rax], al; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000018c653: add byte ptr [rax], al; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x0000000000102aa6: add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000e518e: add byte ptr [rax], al; setne al; ret; 
0x0000000000043b8c: add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043c24: add byte ptr [rax], al; shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000989cf: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000010c68a: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000008ad3e: add byte ptr [rax], al; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3e: add byte ptr [rax], al; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000098d0a: add byte ptr [rax], al; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x00000000001379f7: add byte ptr [rax], al; sub dword ptr [rip + 0xb8a38], 1; mov eax, r8d; pop rbp; ret; 
0x0000000000150838: add byte ptr [rax], al; sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018e2bc: add byte ptr [rax], al; sub eax, ecx; ret; 
0x0000000000041b68: add byte ptr [rax], al; sub eax, edx; sar eax, 0x10; ret; 
0x000000000015d22e: add byte ptr [rax], al; sub ecx, 5; cmp cx, 3; jbe 0x15d240; ret; 
0x0000000000093596: add byte ptr [rax], al; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000001141b6: add byte ptr [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x000000000013c16f: add byte ptr [rax], al; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000092a26: add byte ptr [rax], al; sub rax, rcx; sub eax, 1; ret; 
0x00000000000bb931: add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000087df6: add byte ptr [rax], al; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000140cc6: add byte ptr [rax], al; sub rsp, 8; call 0x140750; or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x0000000000026f66: add byte ptr [rax], al; sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x000000000010c166: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c1d0; ret; 
0x000000000010c216: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c280; ret; 
0x000000000010d4b6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x000000000010d515: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d528; ret; 
0x000000000010d576: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d588; ret; 
0x000000000010d8fe: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d910; ret; 
0x000000000010d961: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d970; ret; 
0x000000000010d9bb: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x000000000010dbf4: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000010e073: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x000000000010e107: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000010e137: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e148; ret; 
0x000000000010e813: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e860; ret; 
0x000000000010e993: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e9e0; ret; 
0x0000000000112963: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1129c0; ret; 
0x0000000000112fe6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113068; ret; 
0x00000000001130aa: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1130c0; ret; 
0x00000000001130ef: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113100; ret; 
0x00000000001131f6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113260; ret; 
0x00000000001132a6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113310; ret; 
0x0000000000113347: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113358; ret; 
0x000000000011363a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113650; ret; 
0x0000000000113677: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113688; ret; 
0x0000000000113b5d: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113bb8; ret; 
0x00000000001143e3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114440; ret; 
0x0000000000114483: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1144e0; ret; 
0x0000000000114529: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114598; ret; 
0x00000000001145e9: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114658; ret; 
0x0000000000114f76: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114ff0; ret; 
0x00000000001151a3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1151f0; ret; 
0x0000000000115263: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1152b0; ret; 
0x0000000000115323: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x115330; ret; 
0x0000000000116aa7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116ab8; ret; 
0x0000000000116c8c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116ca0; ret; 
0x0000000000116cc7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116cf7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116d08; ret; 
0x00000000001189e3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x118a40; ret; 
0x000000000011c4be: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11c4d0; ret; 
0x000000000011f197: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f1a8; ret; 
0x000000000011f23c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x000000000011f2ef: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x000000000011f426: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f490; ret; 
0x000000000011f4d6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f540; ret; 
0x000000000011f586: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f5f0; ret; 
0x000000000011f636: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f6b8; ret; 
0x000000000011f703: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f82f: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f840; ret; 
0x00000000001200d3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120130; ret; 
0x00000000001201a3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120200; ret; 
0x000000000012030c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120380; ret; 
0x00000000001203c6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120440; ret; 
0x0000000000120483: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1204e0; ret; 
0x000000000012052c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205e3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120640; ret; 
0x0000000000120686: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120708; ret; 
0x0000000000120ae6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120b50; ret; 
0x0000000000120b96: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120c08; ret; 
0x0000000000120c46: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120cb0; ret; 
0x0000000000120eb6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120f20; ret; 
0x0000000000120f66: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120fe0; ret; 
0x0000000000121017: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121028; ret; 
0x0000000000121047: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121058; ret; 
0x0000000000121087: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121098; ret; 
0x000000000012115a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121170; ret; 
0x0000000000121197: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1211a8; ret; 
0x00000000001211c7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1211d8; ret; 
0x00000000001211fa: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121210; ret; 
0x0000000000121237: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000004340c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x0000000000043458: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x0000000000048223: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000062e87: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x0000000000062eba: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x00000000000d0dc7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000d0edc: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000dd121: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000e2c36: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2ce9: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000e2e43: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x0000000000102657: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102687: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102717: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000102747: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102777: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x000000000010d3d7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x000000000010da07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10da14; ret; 
0x000000000010da37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10da44; ret; 
0x000000000010db67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10db74; ret; 
0x000000000010db97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dba4; ret; 
0x000000000010dc57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010dc87: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc94; ret; 
0x000000000010e577: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e584; ret; 
0x000000000010e897: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x000000000010e8c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x000000000010e8f7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e904; ret; 
0x000000000010e927: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e934; ret; 
0x000000000010e957: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e964; ret; 
0x000000000010ea17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ea24; ret; 
0x000000000010ea47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ea54; ret; 
0x000000000010f367: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f374; ret; 
0x000000000010f397: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f3a4; ret; 
0x000000000010f3c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f3d4; ret; 
0x000000000010f3fa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f407; ret; 
0x000000000010fbb7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fbc4; ret; 
0x000000000010fbea: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x000000000010fc17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fc24; ret; 
0x000000000010fc47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fc54; ret; 
0x000000000010fc77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fc84; ret; 
0x000000000010fcaa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x000000000010fcd7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fce4; ret; 
0x000000000010fd07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fd14; ret; 
0x000000000010fd37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fd44; ret; 
0x0000000000112faa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x112fb7; ret; 
0x0000000000113de7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x113df4; ret; 
0x00000000001141e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1141f4; ret; 
0x00000000001143a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1143b4; ret; 
0x0000000000114de7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x114df4; ret; 
0x0000000000114f37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x114f44; ret; 
0x0000000000115137: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115144; ret; 
0x0000000000115167: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115174; ret; 
0x0000000000115227: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115234; ret; 
0x00000000001152e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1152f4; ret; 
0x0000000000115627: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115634; ret; 
0x0000000000115657: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115664; ret; 
0x0000000000115687: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115694; ret; 
0x0000000000118977: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118984; ret; 
0x00000000001189a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1189b4; ret; 
0x0000000000118a77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118a84; ret; 
0x0000000000118aa7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ab4; ret; 
0x0000000000118ada: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ae7; ret; 
0x0000000000118b07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118b14; ret; 
0x0000000000118b37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118b44; ret; 
0x0000000000118b67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118b74; ret; 
0x0000000000118b97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x000000000011cd9a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cda7; ret; 
0x000000000011cdc7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cdd4; ret; 
0x000000000011cdf7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ce04; ret; 
0x000000000011ce2a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ce37; ret; 
0x000000000011ce5a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ce67; ret; 
0x000000000011ce87: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ce94; ret; 
0x000000000011ceba: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cec7; ret; 
0x000000000011cee7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cef4; ret; 
0x000000000011cf17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cf24; ret; 
0x000000000011cf4a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cf57; ret; 
0x000000000011cf77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cf84; ret; 
0x000000000011cfaa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cfb7; ret; 
0x000000000011efe7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11eff4; ret; 
0x000000000011f017: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f024; ret; 
0x000000000011f167: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f174; ret; 
0x000000000011f1c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x000000000011f1f7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f204; ret; 
0x000000000011f327: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f334; ret; 
0x000000000011f3ba: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f3c7; ret; 
0x000000000011f3e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f907: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f914; ret; 
0x000000000011f937: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f944; ret; 
0x000000000011f97a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f987; ret; 
0x000000000011f9a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x000000000011f9d7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x000000000011fa07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fa14; ret; 
0x000000000011fa37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fa44; ret; 
0x000000000011fa67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fa74; ret; 
0x000000000011fa97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11faa4; ret; 
0x000000000011fac7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fad4; ret; 
0x000000000011fafa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb07; ret; 
0x000000000011fb27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fb5a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb67; ret; 
0x000000000011fb87: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb94; ret; 
0x000000000011fbb7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fbc4; ret; 
0x000000000011fbe7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fbf4; ret; 
0x000000000011fc17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc24; ret; 
0x000000000011fc47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc54; ret; 
0x000000000011fc7a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc87; ret; 
0x000000000011fcaa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x000000000011fcd7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fce4; ret; 
0x000000000011fd07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd14; ret; 
0x000000000011fd3a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd47; ret; 
0x000000000011fd6a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd77; ret; 
0x000000000011fd9a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000011fdc7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fdd4; ret; 
0x000000000011fdf7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000011fe27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000011fe57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe64; ret; 
0x000000000011fe8a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe97; ret; 
0x000000000011feb7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fec4; ret; 
0x000000000011fee7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fef4; ret; 
0x000000000011ff1a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff27; ret; 
0x000000000011ff47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff54; ret; 
0x000000000011ff7a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff87; ret; 
0x000000000011ffaa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ffb7; ret; 
0x000000000011ffd7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ffe4; ret; 
0x0000000000120007: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120014; ret; 
0x0000000000120037: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120044; ret; 
0x0000000000120077: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x0000000000120167: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x0000000000120237: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120244; ret; 
0x0000000000120267: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120274; ret; 
0x000000000012029a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1202a7; ret; 
0x00000000001202c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1202d4; ret; 
0x000000000012074a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120757; ret; 
0x0000000000120777: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120784; ret; 
0x00000000001207a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1207b4; ret; 
0x00000000001207da: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1207e7; ret; 
0x00000000000433d7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000439c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x0000000000054efd: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41b7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000d41e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e2b47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000e2d97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000e3177: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e4127: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4377: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e43a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e4407: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e4437: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4467: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4497: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x000000000010d12e: add byte ptr [rax], al; syscall; neg eax; ret; 
0x00000000000630a7: add byte ptr [rax], al; syscall; ret; 
0x000000000011f121: add byte ptr [rax], al; syscall; test rax, rax; jl 0x11f13d; je 0x11f12d; ret; 
0x0000000000190d74: add byte ptr [rax], al; test ah, 0x40; jne 0x190e60; lea rax, [rdi + 0xf]; ret; 
0x0000000000190d22: add byte ptr [rax], al; test al, 0x40; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x00000000000cf4e3: add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000a09ee: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a067e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a051e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012d8ee: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9ae: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da6e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x0000000000190c95: add byte ptr [rax], al; test dh, 0x40; jne 0x190bd0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190cdb: add byte ptr [rax], al; test dh, 4; jne 0x190bd0; lea rax, [rdi + 0xb]; ret; 
0x0000000000190c12: add byte ptr [rax], al; test dl, 0x40; jne 0x190bd0; lea rax, [rdi + 7]; ret; 
0x0000000000190c40: add byte ptr [rax], al; test dl, 4; jne 0x190bd0; lea rax, [rdi + 3]; ret; 
0x0000000000148213: add byte ptr [rax], al; test eax, eax; je 0x148220; xor eax, eax; ret; 
0x0000000000117bf6: add byte ptr [rax], al; test eax, eax; jne 0x117c08; sub dword ptr [rip + 0xd7c4d], 1; ret; 
0x0000000000118655: add byte ptr [rax], al; test eax, eax; jne 0x1186c0; sub dword ptr [rip + 0xd71ee], 1; add rsp, 8; ret; 
0x0000000000137c11: add byte ptr [rax], al; test eax, eax; jne 0x137c80; sub dword ptr [rip + 0xb881a], 1; add rsp, 8; ret; 
0x00000000001423f2: add byte ptr [rax], al; test eax, eax; jne 0x142440; sub dword ptr [rip + 0xae619], 1; pop rbp; ret; 
0x000000000015cb2b: add byte ptr [rax], al; test eax, eax; jne 0x15cb60; sub dword ptr [rip + 0x94b20], 1; add rsp, 8; ret; 
0x000000000015cd0b: add byte ptr [rax], al; test eax, eax; jne 0x15cd40; sub dword ptr [rip + 0x94940], 1; add rsp, 8; ret; 
0x0000000000198a51: add byte ptr [rax], al; test eax, eax; jne 0x198a80; sub dword ptr [rip + 0x55da2], 1; pop rbx; ret; 
0x0000000000198d62: add byte ptr [rax], al; test eax, eax; jne 0x198db0; sub dword ptr [rip + 0x577a9], 1; pop rbp; ret; 
0x00000000000475f3: add byte ptr [rax], al; test eax, eax; jne 0x47630; sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x00000000000949f1: add byte ptr [rax], al; test eax, eax; jne 0x94a30; sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x0000000000098d02: add byte ptr [rax], al; test eax, eax; jne 0x98d88; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000099f49: add byte ptr [rax], al; test eax, eax; jne 0x99f88; sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x00000000000d2906: add byte ptr [rax], al; test eax, eax; jne 0xd2940; sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x00000000000a059e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000014aeab: add byte ptr [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000000e5217: add byte ptr [rax], al; test edi, edi; js 0xe5220; ret; 
0x0000000000063084: add byte ptr [rax], al; test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f36: add byte ptr [rax], al; test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000090fea: add byte ptr [rax], al; test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000938f6: add byte ptr [rax], al; test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x000000000010c767: add byte ptr [rax], al; test si, 0xff00; jne 0x10c775; mov word ptr [rdi], si; xor eax, eax; ret; 
0x00000000001847ae: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018479e: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000001909ab: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000189b10: add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000184bde: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x0000000000042300: add byte ptr [rax], al; xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x0000000000041f54: add byte ptr [rax], al; xor dl, 0xf; adc dword ptr [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000d015c: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000162d9b: add byte ptr [rax], al; xor eax, eax; call 0x10e470; add rsp, 8; sar eax, 0x1f; ret; 
0x00000000000ee476: add byte ptr [rax], al; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000102a9e: add byte ptr [rax], al; xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000013b403: add byte ptr [rax], al; xor eax, eax; mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000018bd9e: add byte ptr [rax], al; xor eax, eax; mov edx, dword ptr [rdi]; cmp edx, dword ptr [rsi]; jne 0x18bd8c; ret; 
0x000000000009ef38: add byte ptr [rax], al; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000008d8dc: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bc0ce: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000008e64d: add byte ptr [rax], al; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000040fc6: add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001969d6: add byte ptr [rax], al; xor eax, eax; test r8d, r8d; jne 0x196930; add rsp, 0x38; ret; 
0x00000000001843ee: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000047d7a: add byte ptr [rax], al; xor eax, ecx; ret; 
0x0000000000042176: add byte ptr [rax], al; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x0000000000113d6e: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113d80; ret; 
0x0000000000113daf: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113dc0; ret; 
0x00000000000d107a: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000bb9e1: add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000122009: add byte ptr [rax], al; xor esi, esi; call 0x121ec0; ret; 
0x00000000000445bb: add byte ptr [rax], al; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x00000000000d006e: add byte ptr [rax], al; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000008e306: add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08e: add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000127ada: add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000970e8: add byte ptr [rax], cl; add byte ptr [rcx], dh; shr al, 0xbe; ret; 
0x00000000000340e8: add byte ptr [rax], cl; movzx eax, ax; ret; 
0x0000000000053bcd: add byte ptr [rax], cl; ret 0x2074; 
0x00000000000a0307: add byte ptr [rax], dl; lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x00000000000341c8: add byte ptr [rax], dl; movzx eax, ax; ret; 
0x00000000000832e5: add byte ptr [rax], r8b; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000014590d: add byte ptr [rax], r8b; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000024e05: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000445c1: add byte ptr [rax], r8b; add rsp, 8; ret; 
0x0000000000148c1d: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000014b145: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000004245d: add byte ptr [rax], r8b; addss xmm0, xmm0; ret; 
0x00000000000ec49d: add byte ptr [rax], r8b; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000017ec8d: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184b6d: add byte ptr [rax], r8b; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000057d5d: add byte ptr [rax], r8b; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002419d: add byte ptr [rax], r8b; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000148a7d: add byte ptr [rax], r8b; endbr64; mov eax, 2; ret; 
0x000000000008cd4d: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000004409d: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x000000000016345d: add byte ptr [rax], r8b; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937ed: add byte ptr [rax], r8b; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de28d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000951ed: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x00000000000243fd: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x000000000015ca3d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000012fe7d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x00000000001228ad: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001155fd: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000121ffd: add byte ptr [rax], r8b; endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x000000000009381d: add byte ptr [rax], r8b; endbr64; ret; 
0x00000000000342bd: add byte ptr [rax], r8b; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014625d: add byte ptr [rax], r8b; endbr64; xor eax, eax; ret; 
0x0000000000041dcd: add byte ptr [rax], r8b; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x00000000000ec48d: add byte ptr [rax], r8b; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000b84bd: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000014d0fd: add byte ptr [rax], r8b; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x00000000000baf4d: add byte ptr [rax], r8b; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000062e75: add byte ptr [rax], r8b; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000884b5: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x0000000000192bdd: add byte ptr [rax], r8b; mov eax, 1; jg 0x192bf0; neg eax; ret; 
0x00000000000e5a95: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x00000000000ff75d: add byte ptr [rax], r8b; mov eax, 2; ret; 
0x0000000000026f55: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140cb5: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0xafb06]; test eax, eax; je 0x140cc8; ret; 
0x000000000012fb05: add byte ptr [rax], r8b; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000012595d: add byte ptr [rax], r8b; mov eax, r8d; ret; 
0x00000000000b7b9d: add byte ptr [rax], r8b; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6e8d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a8a85: add byte ptr [rax], r8b; mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x000000000018a6ad: add byte ptr [rax], r8b; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000001571cd: add byte ptr [rax], r8b; mov r8d, 1; mov eax, r8d; ret; 
0x00000000001482ad: add byte ptr [rax], r8b; mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x000000000009c1f5: add byte ptr [rax], r8b; mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000008ce25: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf5: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000dd145: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043c35: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000246e5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000011c4e5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xcf981]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112925: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010dc1d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde249]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d9e5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d985: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde4e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d925: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde541]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d59d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde8c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d53d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde929]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4dd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde989]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011cc55: add byte ptr [rax], r8b; mov rax, r8; ret; 
0x000000000018d47d: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000000b812d: add byte ptr [rax], r8b; mov rax, rdi; ret; 
0x00000000000b852d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6eed: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000ee485: add byte ptr [rax], r8b; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x0000000000120fdd: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcae89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120cad: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcb1b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120705: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcb761]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6b5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc7b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5ed: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc879]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f48d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc9d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2b5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xccbb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bb5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd82b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113065: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd8e01]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e02d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xdde39]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d90d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde559]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d585: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde8e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d525: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde941]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4c5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde9a1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b6ecd: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a45: add byte ptr [rax], r8b; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a896d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000014d065: add byte ptr [rax], r8b; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000013c335: add byte ptr [rax], r8b; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000001920ed: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x00000000001920dd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920cd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001920bd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920ad: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000019209d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000184e4d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000018916d: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a58d: add byte ptr [rax], r8b; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000008e65d: add byte ptr [rax], r8b; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000009e405: add byte ptr [rax], r8b; pop rbp; ret; 
0x00000000000926dd: add byte ptr [rax], r8b; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000010c505: add byte ptr [rax], r8b; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000148bb5: add byte ptr [rax], r8b; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116d8d: add byte ptr [rax], r8b; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000002fd65: add byte ptr [rax], r8b; ret; 
0x000000000008ad3d: add byte ptr [rax], r8b; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3d: add byte ptr [rax], r8b; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000093595: add byte ptr [rax], r8b; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092a25: add byte ptr [rax], r8b; sub rax, rcx; sub eax, 1; ret; 
0x0000000000087df5: add byte ptr [rax], r8b; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000140cc5: add byte ptr [rax], r8b; sub rsp, 8; call 0x140750; or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x0000000000026f65: add byte ptr [rax], r8b; sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x00000000000a09ed: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a067d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a051d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012d8ed: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9ad: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da6d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x00000000000a059d: add byte ptr [rax], r8b; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x00000000001847ad: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000010c565: add byte ptr [rax], r8b; xor eax, eax; pop rbx; ret; 
0x0000000000055bf5: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x00000000001843ed: add byte ptr [rax], r8b; xor eax, eax; vzeroupper; ret; 
0x0000000000042175: add byte ptr [rax], r8b; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000a285d: add byte ptr [rax], r8b; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08d: add byte ptr [rax], r8b; xor rax, rax; ret; 
0x00000000000a880d: add byte ptr [rbp + 0x10], dh; add rax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x000000000014a324: add byte ptr [rbp + 0x10], dh; add rsp, 0x40; pop rbx; ret; 
0x0000000000120e7c: add byte ptr [rbp + 0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000008dbd7: add byte ptr [rbp + 0x11], dh; add rsp, 0x48; ret; 
0x00000000001157f3: add byte ptr [rbp + 0x11], dh; add rsp, 0x58; ret; 
0x000000000010db31: add byte ptr [rbp + 0x13], dh; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x00000000000d01f2: add byte ptr [rbp + 0x14], dh; add rsp, 0x28; ret; 
0x000000000012df4e: add byte ptr [rbp + 0x14], dh; add rsp, 0xd8; ret; 
0x00000000000a059f: add byte ptr [rbp + 0x158d48c0], al; xlatb; mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000015e927: add byte ptr [rbp + 0x15], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000bcd51: add byte ptr [rbp + 0x15], dh; and ch, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x000000000013c717: add byte ptr [rbp + 0x16], dh; movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x000000000011f0b8: add byte ptr [rbp + 0x18], dh; add rsp, 0x68; ret; 
0x00000000000437cc: add byte ptr [rbp + 0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000010dab4: add byte ptr [rbp + 0x18], dh; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000004439b: add byte ptr [rbp + 0x19], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000013e128: add byte ptr [rbp + 0x1a], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000043995: add byte ptr [rbp + 0x1a], dh; add rsp, 0x40; pop rbx; ret; 
0x00000000000623df: add byte ptr [rbp + 0x1a], dh; add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x000000000011631b: add byte ptr [rbp + 0x1a], dh; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000057b33: add byte ptr [rbp + 0x1a], dh; test rsi, rsi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000005b5b2: add byte ptr [rbp + 0x1b], dh; add rsp, 0x450; pop rbp; ret; 
0x0000000000151722: add byte ptr [rbp + 0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000044318: add byte ptr [rbp + 0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000e4fc4: add byte ptr [rbp + 0x1c], dh; mov eax, 0xfffa; ret; 
0x000000000005b874: add byte ptr [rbp + 0x1e], dh; add rsp, 0x38; ret; 
0x00000000000ca0b2: add byte ptr [rbp + 0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000015c5ad: add byte ptr [rbp + 0x1f], dh; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000013b48f: add byte ptr [rbp + 0x20850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000089072: add byte ptr [rbp + 0x21], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000001470f2: add byte ptr [rbp + 0x21], dh; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000154222: add byte ptr [rbp + 0x23], dh; add rsp, 0x28; ret; 
0x0000000000113fae: add byte ptr [rbp + 0x24], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000113a8c: add byte ptr [rbp + 0x25], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x00000000001430da: add byte ptr [rbp + 0x26], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000004301b: add byte ptr [rbp + 0x26], dh; mov eax, r8d; add rsp, 0x118; ret; 
0x00000000000438e5: add byte ptr [rbp + 0x27], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x000000000013a64c: add byte ptr [rbp + 0x28], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001365ce: add byte ptr [rbp + 0x28], dh; add rsp, 0x38; ret; 
0x00000000000d273d: add byte ptr [rbp + 0x29], al; ret; 
0x00000000000d6884: add byte ptr [rbp + 0x29], al; shr dword ptr [rcx], cl; ret 0x8945; 
0x00000000000d1038: add byte ptr [rbp + 0x29], dh; add rsp, 0x28; ret; 
0x00000000000c9e86: add byte ptr [rbp + 0x29dd75db], al; ret; 
0x0000000000043a89: add byte ptr [rbp + 0x2a], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000149673: add byte ptr [rbp + 0x2c], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000012b67f: add byte ptr [rbp + 0x2e], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000051ae9: add byte ptr [rbp + 0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015cac1: add byte ptr [rbp + 0x30], dh; add rsp, 0x18; ret; 
0x0000000000152c85: add byte ptr [rbp + 0x30], dh; add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000008e8ae: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000000a39f7: add byte ptr [rbp + 0x31], al; fild dword ptr [rbp - 0x77]; ret 0x8948; 
0x000000000015a293: add byte ptr [rbp + 0x31], al; fild dword ptr [rcx - 0x77]; ret 0xf883; 
0x00000000000c0599: add byte ptr [rbp + 0x31], al; imul cl; ret; 
0x00000000000d006f: add byte ptr [rbp + 0x31], al; in al, 0x4c; mov eax, esp; pop r12; ret; 
0x000000000010d227: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000a1e07: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000a0393: add byte ptr [rbp + 0x31], al; in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x00000000000d0056: add byte ptr [rbp + 0x31], al; in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000009a4ff: add byte ptr [rbp + 0x31], al; rcr byte ptr [rbp + 0x41], 0x5c; mov rax, r8; pop r13; ret; 
0x0000000000099c8f: add byte ptr [rbp + 0x31], al; rcr byte ptr [rbx + 0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x000000000013efdf: add byte ptr [rbp + 0x31], al; rol byte ptr [rcx + rcx*4 - 0x30], cl; ret; 
0x00000000000dd687: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; ret; 
0x00000000000a0b00: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x39], cl; ret; 
0x00000000000d4aa6: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x0000000000098096: add byte ptr [rbp + 0x31], al; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000015cdb8: add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000149711: add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000002f829: add byte ptr [rbp + 0x31], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000015d1bf: add byte ptr [rbp + 0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x0000000000062727: add byte ptr [rbp + 0x33], dh; add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000001476de: add byte ptr [rbp + 0x34], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000024488: add byte ptr [rbp + 0x35], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000436c0: add byte ptr [rbp + 0x35], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000de742: add byte ptr [rbp + 0x35], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000000e14a3: add byte ptr [rbp + 0x36], dh; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000115943: add byte ptr [rbp + 0x37], dh; add rsp, 0x68; ret; 
0x000000000015fa13: add byte ptr [rbp + 0x38], dh; add rsp, 0x58; ret; 
0x00000000000c9ee2: add byte ptr [rbp + 0x391974db], al; ret; 
0x00000000000c9fd7: add byte ptr [rbp + 0x391c74db], al; ret; 
0x00000000000975c6: add byte ptr [rbp + 0x39], cl; ret 0x850f; 
0x0000000000094fe1: add byte ptr [rbp + 0x39], cl; ret 0xd977; 
0x000000000019719d: add byte ptr [rbp + 0x39], cl; ret; 
0x0000000000116b67: add byte ptr [rbp + 0x3b], dh; add rsp, 0x38; ret; 
0x0000000000098450: add byte ptr [rbp + 0x3c850ff6], al; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000116c36: add byte ptr [rbp + 0x3c], dh; add rsp, 0x38; ret; 
0x000000000015fd7c: add byte ptr [rbp + 0x3d], dh; add rsp, 0x38; ret; 
0x0000000000155d90: add byte ptr [rbp + 0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000149100: add byte ptr [rbp + 0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000015266a: add byte ptr [rbp + 0x40], dh; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000006344e: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000060f0d: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000436c9: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000001562b0: add byte ptr [rbp + 0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000991fe: add byte ptr [rbp + 0x41], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000000e3665: add byte ptr [rbp + 0x41], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000155e60: add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000157290: add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000004322f: add byte ptr [rbp + 0x42], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000156510: add byte ptr [rbp + 0x46], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000013c7ec: add byte ptr [rbp + 0x46], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000121102: add byte ptr [rbp + 0x46], dh; add rsp, 0x58; ret; 
0x00000000001133ca: add byte ptr [rbp + 0x46], dh; add rsp, 0x68; ret; 
0x0000000000113459: add byte ptr [rbp + 0x47], dh; add rsp, 0x18; ret; 
0x0000000000113511: add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x000000000015fb0a: add byte ptr [rbp + 0x47], dh; add rsp, 0x68; ret; 
0x000000000014afbf: add byte ptr [rbp + 0x480c74d2], al; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009f859: add byte ptr [rbp + 0x481275c0], al; lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009e2f4: add byte ptr [rbp + 0x485774c0], al; add esp, 8; pop rbp; pop r12; ret; 
0x000000000010f304: add byte ptr [rbp + 0x49], dh; add rsp, 0x130; pop rbp; ret; 
0x00000000001135af: add byte ptr [rbp + 0x49], dh; add rsp, 0x58; ret; 
0x00000000001155a8: add byte ptr [rbp + 0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d4a8a: add byte ptr [rbp + 0x4c1175c0], al; mov eax, eax; add rsp, 8; ret; 
0x000000000009a498: add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x00000000001563cf: add byte ptr [rbp + 0x4e], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fcb3: add byte ptr [rbp + 0x4e], dh; add rsp, 0x68; ret; 
0x00000000000828b0: add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000016095b: add byte ptr [rbp + 0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000005b059: add byte ptr [rbp + 0x51], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000df40e: add byte ptr [rbp + 0x52], dh; add rsp, 0x38; ret; 
0x00000000001029a0: add byte ptr [rbp + 0x53], dh; add rsp, 0x38; ret; 
0x000000000013cc9a: add byte ptr [rbp + 0x54], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000440ef: add byte ptr [rbp + 0x589ff42], cl; scasd eax, dword ptr [rdi]; sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x0000000000051c67: add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000011498e: add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; ret; 
0x0000000000114ebf: add byte ptr [rbp + 0x5d], dh; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x0000000000051b99: add byte ptr [rbp + 0x5f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000006264d: add byte ptr [rbp + 0x61], dh; add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000113cf5: add byte ptr [rbp + 0x61], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d119a: add byte ptr [rbp + 0x61], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000e44fe: add byte ptr [rbp + 0x62], dh; add rsp, 0x38; ret; 
0x00000000000bd5c6: add byte ptr [rbp + 0x67], dh; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000081a39: add byte ptr [rbp + 0x69], dh; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000081bf7: add byte ptr [rbp + 0x6b], dh; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000151ceb: add byte ptr [rbp + 0x6c], dh; add rsp, 0x30; pop rbx; ret; 
0x00000000000e160a: add byte ptr [rbp + 0x6f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000151ba4: add byte ptr [rbp + 0x6f], dh; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x0000000000152382: add byte ptr [rbp + 0x71], dh; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x0000000000151a74: add byte ptr [rbp + 0x73], dh; add rsp, 0x10; pop r12; ret; 
0x0000000000114ae3: add byte ptr [rbp + 0x75], dh; add rsp, 0x38; ret; 
0x00000000001524c1: add byte ptr [rbp + 0x76], dh; add rsp, 0x28; pop rbx; pop r12; ret; 
0x000000000014746d: add byte ptr [rbp + 0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013e360: add byte ptr [rbp + 0x7850fff], al; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000098d03: add byte ptr [rbp + 0x7c850fc0], al; add byte ptr [rax], al; add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000062562: add byte ptr [rbp + 0x7c], dh; add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000112a54: add byte ptr [rbp + 0x7f], dh; add rsp, 0x40; pop r12; ret; 
0x000000000011cb19: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000012f597: add byte ptr [rbp + 0xb], dh; add rsp, 0x28; ret; 
0x0000000000113afc: add byte ptr [rbp + 0xc], dh; add rsp, 0x18; ret; 
0x0000000000043549: add byte ptr [rbp + 0xc], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120869: add byte ptr [rbp + 0xc], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042351: add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x000000000008cd23: add byte ptr [rbp + 0xc], dh; xor r8d, r8d; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x000000000006234f: add byte ptr [rbp + 0xd], dh; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x0000000000086ba4: add byte ptr [rbp + 0xd], dh; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x000000000012de58: add byte ptr [rbp + 0xd], dh; add rsp, 0xd8; ret; 
0x000000000002a3e1: add byte ptr [rbp + 0xe880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000062de6: add byte ptr [rbp + 0xe], dh; add rsp, 0x18; ret; 
0x00000000000e2e14: add byte ptr [rbp + 0xe], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001522b2: add byte ptr [rbp + 0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000005648f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000005637f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000435c3: add byte ptr [rbp + 0xf], dh; add rsp, 0x118; ret; 
0x0000000000093586: add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000a2e3f: add byte ptr [rbp + 1], al; fiadd dword ptr [rbx + 0x634901c0]; rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x00000000000f80b7: add byte ptr [rbp + 1], cl; ret 0xc148; 
0x000000000005503d: add byte ptr [rbp + 3], dh; push r10; ret; 
0x0000000000042b94: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000047442: add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000013666b: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000155c95: add byte ptr [rbp + 5], dh; add rsp, 0x48; ret; 
0x00000000001539e4: add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000010d32f: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000157c59: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000d026c: add byte ptr [rbp + 6], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000001449bc: add byte ptr [rbp + 7], dh; add rsp, 0x10; pop r12; ret; 
0x000000000004736e: add byte ptr [rbp + 7], dh; pop rbx; ret; 
0x0000000000042eee: add byte ptr [rbp + 8], dh; add rsp, 0x148; ret; 
0x00000000000d42e5: add byte ptr [rbp + 8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000011bfca: add byte ptr [rbp + 8], dh; add rsp, 0x418; ret; 
0x0000000000043751: add byte ptr [rbp + 8], dh; add rsp, 0x98; ret; 
0x0000000000044421: add byte ptr [rbp + 8], dh; add rsp, 0xa8; ret; 
0x0000000000052c04: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x00000000000e50e5: add byte ptr [rbp + 8], dh; mov eax, 0x40; ret; 
0x0000000000157b8c: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x000000000010fb92: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000062842: add byte ptr [rbp + 9], dh; add rsp, 0x1010; pop rbp; ret; 
0x0000000000160a19: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157b18: add byte ptr [rbp + 9], dh; add rsp, 0x90; pop rbx; ret; 
0x00000000000ddc54: add byte ptr [rbp + 9], dh; add rsp, 0xe0; pop rbx; ret; 
0x0000000000169776: add byte ptr [rbp + rcx*4 + 0x1d], cl; ret 0x541; 
0x000000000007a3b6: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000002e2ac: add byte ptr [rbp + rcx*4 + 0x41], cl; add cl, byte ptr [rbp + 0x39]; ret 0x820f; 
0x00000000000983c2: add byte ptr [rbp + rcx*4 + 0x46], cl; adc byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x00000000001215cf: add byte ptr [rbp + rcx*4 + 0x52], cl; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000ed987: add byte ptr [rbp + rcx*4 + 0x52], cl; dec dword ptr [rcx + 0x29]; ret 0x8349; 
0x00000000000a185f: add byte ptr [rbp + rcx*4 + 0x58], cl; dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x00000000001930af: add byte ptr [rbp + rcx*4 + 0x5f], cl; add dword ptr [rcx - 9], eax; ret; 
0x00000000001435ad: add byte ptr [rbp + rcx*4 + 0x6f], cl; xor byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x8b48; 
0x00000000000bcd75: add byte ptr [rbp + rcx*8 + 0x48], dh; lea eax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0465: add byte ptr [rbp + rcx*8 + 0x48], dh; lea eax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd74: add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0464: add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x0000000000094665: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000012cef4: add byte ptr [rbp - 0x16], dh; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000009563c: add byte ptr [rbp - 0x17], dh; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000094602: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x000000000002a969: add byte ptr [rbp - 0x1a77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000006d7b4: add byte ptr [rbp - 0x297af040], al; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000023a64: add byte ptr [rbp - 0x2c], dh; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x000000000005ea2f: add byte ptr [rbp - 0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000023a74: add byte ptr [rbp - 0x3c], dh; ret; 
0x00000000000246d2: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000014aeac: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x0000000000062e65: add byte ptr [rbp - 0x3f6af040], al; movzx eax, al; neg eax; pop rbp; ret; 
0x00000000000ca91f: add byte ptr [rbp - 0x57c03b0], cl; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x000000000011acbd: add byte ptr [rbp - 0x75], cl; adc byte ptr [r13 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 4; 
0x000000000019637f: add byte ptr [rbp - 0x76b63fb6], cl; ret 0xd349; 
0x000000000010befc: add byte ptr [rbp - 0x76b7febd], cl; ret; 
0x00000000000810a7: add byte ptr [rbp - 0x76bb7ffc], cl; fiadd dword ptr [rcx]; rol byte ptr [rcx + rbp - 0x36], 0x39; ret 0x2b7c; 
0x00000000000f7bcf: add byte ptr [rbp - 0x76db8b40], al; ret 0xe283; 
0x0000000000118709: add byte ptr [rbp - 0x76f98b01], al; cmp eax, 0xd3c34; ret; 
0x00000000000d2577: add byte ptr [rbp - 0x77], al; ret 0x8341; 
0x00000000000a4ef2: add byte ptr [rbp - 0x77], cl; adc eax, dword ptr [rbp - 0x77]; ret 0x8b4b; 
0x00000000000d57fc: add byte ptr [rbp - 0x77], cl; out 0x89, eax; ret 0x44c7; 
0x00000000000261c2: add byte ptr [rbp - 0x77], cl; out 0xe8, eax; movsd dword ptr [rdi], dword ptr [rsi]; ret 0xffff; 
0x000000000002ca04: add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000428a5: add byte ptr [rbp - 0x79], dh; movdqa xmm1, xmm0; call 0x192c70; add rsp, 0x10; pop rbx; ret; 
0x000000000009d5d8: add byte ptr [rbp - 0x7acc812e], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000001393a4: add byte ptr [rbp - 0x7b], al; dec dword ptr [rdi]; test dl, bl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x00000000000615b0: add byte ptr [rbp - 0x7b], al; dec dword ptr [rdi]; test dword ptr [rip + 0xfffffff], edx; mov dh, 0x53; or al, 0xf6; ret 0xf40; 
0x000000000006d15a: add byte ptr [rbp - 0x7b], al; dec dword ptr [rdi]; test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000155a70: add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x0000000000028239: add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; ret; 
0x000000000006ca5f: add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], cl; xchg ebp, eax; ret 0x8341; 
0x0000000000197071: add byte ptr [rbp - 0x7b], al; sal byte ptr [rbp + 0x7b], cl; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000052ac2: add byte ptr [rbp - 0x7b], al; sal byte ptr [rsp + rsi*2 - 0x41], 1; add byte ptr [rip - 0x2711800], al; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000049b3b: add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], -0x7c; ret; 
0x0000000000117642: add byte ptr [rbp - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x83; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd813d], eax; mov rax, r8; ret; 
0x000000000015d215: add byte ptr [rbp - 0x7c99008e], cl; inc byte ptr [rbx]; ja 0x15d230; cmp dx, cx; sete al; ret; 
0x00000000001258f0: add byte ptr [rbp - 0x7cc48a40], al; sub eax, 0xca410; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x000000000015cc72: add byte ptr [rbp - 0x7cc68a40], al; sub eax, 0x949da; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000006104d: add byte ptr [rbp - 0x7cc98a40], al; sub eax, 0x18d6f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x000000000002fdb7: add byte ptr [rbp - 0x7cdb8140], al; call 0x84586c3; pop rbx; ret; 
0x00000000000edf9f: add byte ptr [rbp - 0x7cdf872e], al; ret 0x4801; 
0x0000000000098458: add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x000000000009843f: add byte ptr [rbp - 0x7cfeb9], cl; add esi, dword ptr [rbp + rdi - 0x77]; ret 0xb48b; 
0x00000000001183e8: add byte ptr [rbp - 0x8f38b25], al; ret; 
0x0000000000117a4f: add byte ptr [rbp - 0x8f38b2e], al; ret 0xfc07; 
0x0000000000054337: add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x00000000000295dc: add byte ptr [rbp - 0xc7af040], al; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000000e4f98: add byte ptr [rbp], bh; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x00000000000e4802: add byte ptr [rbp], bh; add cl, ch; ret; 
0x0000000000184b4a: add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x000000000017ff19: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000098d0b: add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000911f7: add byte ptr [rbx + 0x158901ea], al; ret; 
0x00000000000938a5: add byte ptr [rbx + 0x15af1705], al; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000091463: add byte ptr [rbx + 0x15d35a15], cl; add byte ptr [rbx + 0x1d89480b], cl; cmp eax, 0x830015d3; ret 0x8901; 
0x000000000008ac4f: add byte ptr [rbx + 0x1789cfe2], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000117c0f: add byte ptr [rbx + 0x17f01f8], al; ret; 
0x0000000000091469: add byte ptr [rbx + 0x1d89480b], cl; cmp eax, 0x830015d3; ret 0x8901; 
0x000000000009c1eb: add byte ptr [rbx + 0x22], dh; lea rax, [rax - 8]; ret; 
0x0000000000061bc4: add byte ptr [rbx + 0x28907c8], al; mov eax, 1; ret; 
0x00000000000baf7f: add byte ptr [rbx + 0x30178916], cl; in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000900af: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000b850f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b935f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ebf: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000010feaf: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000008254e: add byte ptr [rbx + 0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000b932f: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b8f: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000013bcc4: add byte ptr [rbx + 0x45740aff], al; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000a83e0: add byte ptr [rbx + 0x458880c8], al; ret 0xd889; 
0x00000000000cef3f: add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000cef6f: add byte ptr [rbx + 0x463b0c47], cl; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000192aef: add byte ptr [rbx + 0x463bfc47], cl; cld; jne 0x192be0; ret; 
0x000000000010d8a6: add byte ptr [rbx + 0x47426f8], al; mov eax, r9d; ret; 
0x00000000000b84df: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e9f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000018e140: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x000000000017ab0f: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000017debf: add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x0000000000136ed8: add byte ptr [rbx + 0x4804c244], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001577e3: add byte ptr [rbx + 0x48082444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000004349d: add byte ptr [rbx + 0x48082444], cl; add esp, 0x18; ret; 
0x000000000018ac1f: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b931f: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 4]; ret; 
0x00000000000bc102: add byte ptr [rbx + 0x48], bl; cmove eax, edx; ret; 
0x00000000000b771f: add byte ptr [rbx + 0x49178916], cl; sub eax, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x0000000000029b44: add byte ptr [rbx + 0x4be02e0], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000099bd3: add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000016868f: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016848f: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016828f: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000019239b: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x1925b0; xor eax, eax; ret; 
0x000000000018e3a2: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x000000000018f770: add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000001125a3: add byte ptr [rbx + 0x54e83c7d], cl; ret 0xffff; 
0x000000000016d67f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000000ec812: add byte ptr [rbx + 0x5b010447], al; pop rbp; pop r12; ret; 
0x000000000008b645: add byte ptr [rbx + 0x5d], bl; mov eax, r8d; pop r12; ret; 
0x00000000000635d4: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000004429c: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000030080: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000832ce: add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000bb3cf: add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000361c0: add byte ptr [rbx + 0x6c0f6600], cl; ret 0xf41; 
0x000000000010d0f8: add byte ptr [rbx + 0x87702fe], al; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x00000000000bc6f0: add byte ptr [rbx + 0xa7401f8], al; cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x00000000001379f8: add byte ptr [rbx + 0xb8a382d], al; add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x000000000008e6f6: add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000121cfb: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000013c325: add byte ptr [rbx + 0xd7401f8], al; test eax, eax; jne 0x13c348; mov eax, r8d; ret; 
0x000000000016dd2f: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dcbf: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dc4f: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000105fbf: add byte ptr [rbx + 0xe95fe05], cl; add byte ptr [rbx + rcx*4 + 0x1d], al; ret; 
0x0000000000102574: add byte ptr [rbx + 0xed00d0d], cl; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x000000000014e166: add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x00000000000e51f6: add byte ptr [rbx + rax*4 + 0x38], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000105fc5: add byte ptr [rbx + rcx*4 + 0x1d], al; ret; 
0x00000000000a8d49: add byte ptr [rbx + rcx*4 + 0x2c], cl; ret 0x854d; 
0x000000000010989b: add byte ptr [rbx + rcx*4 + 0x34], cl; ret 0x88e9; 
0x0000000000133e49: add byte ptr [rbx + rcx*4 + 0x35], cl; out dx, eax; ret; 
0x0000000000097dd7: add byte ptr [rbx + rcx*4 + 0x50], cl; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000057ad7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000055ba7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000101935: add byte ptr [rbx + rcx*4 + 0x63], cl; and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000045eef: add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000011c5c4: add byte ptr [rbx + rcx*4 + 0x7d], cl; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000011f7b4: add byte ptr [rbx + rcx*4 + 2], ah; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x0000000000062f26: add byte ptr [rbx + rcx*4 + 2], ah; cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000dfc0e: add byte ptr [rbx + rcx*4 + 5], cl; pop rdx; ret 0x10; 
0x000000000010979f: add byte ptr [rbx + rcx*4 - 0x4c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000007b9ab: add byte ptr [rbx + rcx*4 - 0x5b], cl; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x0000000000053b0f: add byte ptr [rbx + rcx*4 - 0x6c], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x89e9; 
0x00000000000531a7: add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000010d8a3: add byte ptr [rbx + rcx*4], ah; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x0000000000048306: add byte ptr [rbx + rcx*4], ah; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x00000000000fec9a: add byte ptr [rbx + rcx*4], cl; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x0000000000140b9c: add byte ptr [rbx - 0x10], dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000edf65: add byte ptr [rbx - 0x157cfe15], al; add dword ptr [rax + 0x63], ecx; ret; 
0x00000000000a55be: add byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x0000000000150856: add byte ptr [rbx - 0x37f0efc0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000015088e: add byte ptr [rbx - 0x37f0f3c0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150839: add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000116d4d: add byte ptr [rbx - 0x387c0f19], al; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000094725: add byte ptr [rbx - 0x39], bl; add eax, 0x15cd5f; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000878cf: add byte ptr [rbx - 0x3b7cb7ff], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000048309: add byte ptr [rbx - 0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x000000000011cd7f: add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x000000000014110a: add byte ptr [rbx - 0x3f7ae7c0], cl; jne 0x141118; ret; 
0x000000000010c507: add byte ptr [rbx - 0x48], bl; or dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000012299f: add byte ptr [rbx - 0x48f0f440], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122e6f: add byte ptr [rbx - 0x48f0f540], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122b5f: add byte ptr [rbx - 0x48f0f640], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122acf: add byte ptr [rbx - 0x48f0f740], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122d2f: add byte ptr [rbx - 0x48f0f840], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122dcf: add byte ptr [rbx - 0x48f0f940], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122eff: add byte ptr [rbx - 0x48f0fa40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000012302f: add byte ptr [rbx - 0x48f0fb40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122bf2: add byte ptr [rbx - 0x48f0fc40], al; ror byte ptr [rax - 0x75], 0x44; ret 0x8940; 
0x0000000000122a2f: add byte ptr [rbx - 0x48f0fd40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000122c8f: add byte ptr [rbx - 0x48f0fe40], al; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x000000000013f48c: add byte ptr [rbx - 0x49f0fe0d], al; ret; 
0x00000000000ec49f: add byte ptr [rbx - 0x688bfb1e], al; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000192d5b: add byte ptr [rbx - 0x70f0c006], al; ret; 
0x00000000000a7abb: add byte ptr [rbx - 0x71f08005], 0x45; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000a5dbb: add byte ptr [rbx - 0x71f08005], 0x53; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000f0b04: add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x000000000007a72c: add byte ptr [rbx - 0x73f00008], al; or al, 0; add byte ptr [rbx - 0x78f0f808], al; ret 8; 
0x00000000000473cc: add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017ab1f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000001767df: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000a8a87: add byte ptr [rbx - 0x760fdbac], cl; adc byte ptr [rdi], cl; mov dh, 0x54; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a9f: add byte ptr [rbx - 0x7617dbac], cl; adc byte ptr [rdi], cl; mov bh, 0x54; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x0000000000150816: add byte ptr [rbx - 0x7637f100], cl; ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x00000000000c9f57: add byte ptr [rbx - 0x76b30383], cl; out 0x89, al; ret; 
0x00000000001041d1: add byte ptr [rbx - 0x76b7fd07], al; ret 0x940f; 
0x0000000000081f11: add byte ptr [rbx - 0x76b7ffbb], cl; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x00000000000ecaed: add byte ptr [rbx - 0x76e3db8c], cl; ret 0x8348; 
0x000000000013c170: add byte ptr [rbx - 0x77bffe12], al; ja 0x13c179; ret; 
0x00000000000774ee: add byte ptr [rbx - 0x78f0d008], al; call 0xffffffff8907750b; ret 0xc083; 
0x0000000000078caf: add byte ptr [rbx - 0x78f0d008], al; mov ebx, 0x89000005; ret 0xc083; 
0x0000000000078805: add byte ptr [rbx - 0x78f0d008], al; sbb eax, 0x8900000b; ret 0xc083; 
0x0000000000077a3c: add byte ptr [rbx - 0x78f0d008], al; sbb eax, 0x89000016; ret 0xc083; 
0x000000000007a735: add byte ptr [rbx - 0x78f0f808], al; ret 8; 
0x00000000000ac624: add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x0000000000102e47: add byte ptr [rbx - 0x7bf00001], al; ret; 
0x0000000000024238: add byte ptr [rbx - 0x7bf00008], al; out 0, al; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000000bf1e3: add byte ptr [rbx - 0x7bf0cf03], al; ret; 
0x00000000000cbc0c: add byte ptr [rbx - 0x7bf0d403], al; ret 7; 
0x00000000001921f6: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000f9546: add byte ptr [rbx - 0x7bf0f006], al; stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret 0x7a8d; 
0x000000000003e1c7: add byte ptr [rbx - 0x7bf0fc08], al; xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x00000000000ef95d: add byte ptr [rbx - 0x7bf0fd02], al; mov dword ptr [rax + rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000039f2b: add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000015d22f: add byte ptr [rbx - 0x7c99fa17], al; stc; add esi, dword ptr [rsi + 7]; ret; 
0x000000000012c527: add byte ptr [rbx - 0x7cb7e7ad], cl; ret; 
0x00000000001413e9: add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001412b7: add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x00000000000e8837: add byte ptr [rbx - 0x7cb7f7bd], cl; ret; 
0x00000000000bca8f: add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x0000000000080fcc: add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x0000000000060caf: add byte ptr [rbx - 0x7cb7fbbd], cl; ret; 
0x0000000000080ef7: add byte ptr [rbx - 0x7cb7fbbe], cl; ret 0x4104; 
0x00000000000bcb27: add byte ptr [rbx - 0x7cb7fbbe], cl; ret 0x8504; 
0x0000000000140e8f: add byte ptr [rbx - 0x7cb7fe3f], al; ret 0x3928; 
0x00000000000f0b2f: add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3904; 
0x00000000001890c3: add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000006dc70: add byte ptr [rbx - 0x9bef71d], al; ret; 
0x000000000005b15c: add byte ptr [rbx - 4], dh; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000116ed3: add byte ptr [rbx], ah; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000093597: add byte ptr [rbx], ch; push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000000d005c: add byte ptr [rbx], cl; add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x00000000000d0159: add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000012335f: add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123107: add byte ptr [rcx + 0x107223c6], cl; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000012fb97: add byte ptr [rcx + 0x18e8c1f8], cl; ret; 
0x000000000014d0f2: add byte ptr [rcx + 0x1b802], cl; add byte ptr [rax], al; ret; 
0x00000000000ec843: add byte ptr [rcx + 0x1b828], cl; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d4229: add byte ptr [rcx + 0x1eb850c7], al; add eax, 0xcac1fa89; add al, byte ptr [rcx - 0x70a3d706]; add dh, byte ptr [rsi + 3]; ret; 
0x0000000000194d01: add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000d84a1: add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x00000000000d84dc: add byte ptr [rcx + 0x29], al; ret 0x8d43; 
0x00000000000d6c91: add byte ptr [rcx + 0x29], al; ret 0xbe0f; 
0x00000000000d6beb: add byte ptr [rcx + 0x29], al; ret; 
0x000000000008973f: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x00000000001787cf: add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000bc0d7: add byte ptr [rcx + 0x358d48d0], cl; ret; 
0x000000000002c13b: add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x00000000000d6d61: add byte ptr [rcx + 0x39], al; ret 0x8c0f; 
0x00000000000f88fb: add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x00000000000d6e01: add byte ptr [rcx + 0x39], al; ret 0x9d0f; 
0x00000000000f875b: add byte ptr [rcx + 0x39], al; ret; 
0x000000000005f1b3: add byte ptr [rcx + 0x39], cl; ret 0x1773; 
0x00000000000a2ee4: add byte ptr [rcx + 0x39], cl; ret 0x850f; 
0x0000000000029b60: add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x000000000005f36b: add byte ptr [rcx + 0x39], cl; ret; 
0x00000000000a181f: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi], 1; test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000a1837: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi], cl; test byte ptr [rsi], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000157dda: add byte ptr [rcx + 0x47894817], cl; or byte ptr [rax - 0x77], cl; ja 0x157dfd; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000102639: add byte ptr [rcx + 0x51], al; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025f9: add byte ptr [rcx + 0x51], al; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x000000000010257a: add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x0000000000119188: add byte ptr [rcx + 0x5c], al; pop r13; ret; 
0x000000000012cf93: add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x000000000011914f: add byte ptr [rcx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000102377: add byte ptr [rcx + 0x63482c53], cl; ret 0x2de9; 
0x000000000006c7fd: add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x00000000000c04b8: add byte ptr [rcx + 0x63], cl; ret 0x8945; 
0x000000000005a9e5: add byte ptr [rcx + 0x63], cl; ret 0xd231; 
0x00000000000cd81a: add byte ptr [rcx + 0x63], cl; ret; 
0x00000000000ff2bc: add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x0000000000042abf: add byte ptr [rcx + 0x6f0f66ef], cl; ret 0x5e8; 
0x0000000000092717: add byte ptr [rcx + 0x807448], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x0000000000117a49: add byte ptr [rcx + 0xd7e1035], cl; add byte ptr [rbp - 0x8f38b2e], al; ret 0xfc07; 
0x00000000000a3fe8: add byte ptr [rcx + 0xf], 0x93; ret; 
0x00000000001507c8: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], edx; ret; 
0x000000000014fea5: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000eb75f: add byte ptr [rcx + 0xf], al; mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000005b3bf: add byte ptr [rcx + 0xf], al; mov dh, 0x43; add dword ptr [rax + rax*8 - 0x7cb6f78c], eax; ret; 
0x0000000000063e4f: add byte ptr [rcx + 0xf], al; mov dh, 0x45; add dword ptr [rax - 0x7d], ecx; ret 0xbe02; 
0x000000000013c43f: add byte ptr [rcx + 0xf], al; mov dh, 0x52; add dword ptr [rbp - 0x76fdefbc], ecx; ret 0x8041; 
0x000000000007ad87: add byte ptr [rcx + 0xf], al; mov dh, 0x56; or al, 0xf6; ret 0xf08; 
0x00000000000f118f: add byte ptr [rcx + 0xf], al; mov dh, 4; adc byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000d2556: add byte ptr [rcx + 0xf], al; xchg esi, eax; ret 0x3ee9; 
0x00000000000d27fe: add byte ptr [rcx + 0xf], al; xchg esi, eax; ret 0xe1e9; 
0x000000000005f675: add byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0x3145; 
0x0000000000095175: add byte ptr [rcx + 1], al; adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000000d9d5e: add byte ptr [rcx + 1], al; ret 0x8944; 
0x00000000000531af: add byte ptr [rcx + 1], cl; ret; 
0x00000000001138bf: add byte ptr [rcx + 9], al; ret 0x8941; 
0x0000000000125307: add byte ptr [rcx + rax*2 - 0x75], ah; add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000000106f5a: add byte ptr [rcx + rbx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000107545: add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b48; 
0x00000000001183e1: add byte ptr [rcx + rcx*4 + 0x25], al; ja 0x11845b; or eax, 0x74db8500; or al, 0xf7; ret; 
0x00000000001400d8: add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x3be9; 
0x0000000000140080: add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x9be9; 
0x000000000013fc90: add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0xd889; 
0x00000000000f444c: add byte ptr [rcx + rcx*4 + 0x3c], cl; ret 0x8348; 
0x00000000000cb184: add byte ptr [rcx + rcx*4 + 0x42], 4; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000128e35: add byte ptr [rcx + rcx*4 + 0x45], cl; test al, 0x89; ret 0xc031; 
0x00000000000a89b7: add byte ptr [rcx + rcx*4 + 7], al; add rax, rdi; ret; 
0x00000000000a8748: add byte ptr [rcx + rcx*4 + 7], cl; mov rax, r12; pop r12; ret; 
0x0000000000114d69: add byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009d718: add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x0000000000125786: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; pop r13; ret; 
0x000000000015e334: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x000000000010e3e2: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000011417b: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0060: add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000082c43: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000062656: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x00000000000dddf4: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000117284: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000810aa: add byte ptr [rcx + rcx*4 - 0x26], 1; rol byte ptr [rcx + rbp - 0x36], 0x39; ret 0x2b7c; 
0x000000000004125d: add byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x00000000001970f1: add byte ptr [rcx + rcx*4 - 0x29], al; call 0x197200; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000038c76: add byte ptr [rcx + rcx*4 - 0x38], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000019692f: add byte ptr [rcx + rcx*4 - 0x39], al; mov qword ptr [rsp], rax; call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000151baa: add byte ptr [rcx + rcx*4 - 0x40], 0x5d; ret; 
0x000000000011733e: add byte ptr [rcx + rcx*4 - 0x40], al; add rsp, 8; ret; 
0x000000000015cf65: add byte ptr [rcx + rcx*4 - 0x40], al; mov qword ptr [rdx], 0; ret; 
0x00000000000a22e1: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000002f704: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; ret; 
0x0000000000081a42: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000000438ee: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x0000000000088044: add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000046c18: add byte ptr [rcx + rcx*4 - 0x40], cl; add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000117682: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; ret; 
0x000000000015d1c8: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x000000000014f8c3: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000099cb0: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000001533be: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x00000000000980a0: add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000018d3c2: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000188a1f: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000001091ad: add byte ptr [rcx + rcx*4 - 0x4c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008561e: add byte ptr [rcx + rdi + 0x5b], dh; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000090034: add byte ptr [rcx - 0x100c1e], al; dec dword ptr [rcx]; ret 0x1389; 
0x0000000000047c96: add byte ptr [rcx - 0x1e], al; jg 0x47c27; adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x000000000014d0ff: add byte ptr [rcx - 0x39], al; add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000051448: add byte ptr [rcx - 0x39], cl; ret; 
0x000000000008cd3f: add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000002c0f0: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000009728b: add byte ptr [rcx - 0x73], cl; dec dword ptr [r9 - 0x7b]; ret 0x850f; 
0x000000000009849d: add byte ptr [rcx - 0x73], cl; push rbp; and byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000014d14f: add byte ptr [rcx - 0x75], al; cmp byte ptr [rax + 0xf000000], 0xc8; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000105eb8: add byte ptr [rcx - 0x75], al; push rbp; add al, 0xf7; ret 0xfffd; 
0x00000000000ecafd: add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 + 0x63], r9b; ret; 
0x000000000007f1c7: add byte ptr [rcx - 0x75], cl; push rdi; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x0000000000076edb: add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000008925d: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000080888: add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x00000000001574e0: add byte ptr [rcx - 0x76b7d7b9], cl; ja 0x157500; mov eax, r8d; ret; 
0x0000000000095199: add byte ptr [rcx - 0x77], al; imul esp, dword ptr [rbx*2 + 0x10438941], 0x41; mov dword ptr [rbx + 0x14], 0; ret; 
0x00000000000f2572: add byte ptr [rcx - 0x77], al; ret 0x3941; 
0x00000000000e8e25: add byte ptr [rcx - 0x77], al; ret 0x3b4c; 
0x000000000002ad78: add byte ptr [rcx - 0x77], al; ret 0x5a58; 
0x000000000011384b: add byte ptr [rcx - 0x77], al; ret 0x8341; 
0x00000000000db0fd: add byte ptr [rcx - 0x77], al; ret 0x8b48; 
0x00000000000e8d30: add byte ptr [rcx - 0x77], al; ret 0x8d41; 
0x0000000000028ee4: add byte ptr [rcx - 0x77], al; ret 0xcde9; 
0x000000000004a087: add byte ptr [rcx - 0x77], al; ret 0xd231; 
0x0000000000158acb: add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x0000000000023d2b: add byte ptr [rcx - 0x77], al; ret; 
0x00000000000627a2: add byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x77], 0xd8; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x000000000012fd00: add byte ptr [rcx - 0x77], al; ror dword ptr [rdi], 0x97; ret 0x840; 
0x000000000011c5c0: add byte ptr [rcx - 0x77], cl; add byte ptr [r11 + rcx*4 + 0x7d], r9b; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000288e7: add byte ptr [rcx - 0x77], cl; add ecx, dword ptr [rax - 0x77]; ror dword ptr [rax + 0x39], 1; ret; 
0x0000000000148c8c: add byte ptr [rcx - 0x77], cl; and al, 0x30; call 0x1576d0; mov rax, r12; pop r12; ret; 
0x000000000008593c: add byte ptr [rcx - 0x77], cl; call 0xffffffffcbf36ccf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000008e2f9: add byte ptr [rcx - 0x77], cl; call 0xffffffffcef3f68c; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000002e116: add byte ptr [rcx - 0x77], cl; dec dword ptr [rbp - 0x77]; ret 0x87e9; 
0x00000000000ff807: add byte ptr [rcx - 0x77], cl; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000038e17: add byte ptr [rcx - 0x77], cl; fisttp word ptr [rax - 0x7d]; ret; 
0x000000000011cc49: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x40]; pop rbx; ret; 
0x000000000009811a: add byte ptr [rcx - 0x77], cl; push rcx; or byte ptr [rax + 0x39], cl; ret; 
0x00000000000cd2b2: add byte ptr [rcx - 0x77], cl; ret 0x2e66; 
0x0000000000108fab: add byte ptr [rcx - 0x77], cl; ret 0x840f; 
0x000000000009fb67: add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x0000000000051323: add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000005ef4f: add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000014a925: add byte ptr [rcx - 0x77], cl; ret 0xb43; 
0x0000000000192f0a: add byte ptr [rcx - 0x77], cl; ret 0xc148; 
0x000000000013f08f: add byte ptr [rcx - 0x77], cl; ret 0xc641; 
0x000000000007dce0: add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000041789: add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4c01; 
0x00000000001971e1: add byte ptr [rcx - 0x7b], cl; ret; 
0x000000000005d9df: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000f05bf: add byte ptr [rcx - 0x7d], al; ret 0x8d01; 
0x000000000013e368: add byte ptr [rcx - 0x7d], al; ret; 
0x00000000000ca8c7: add byte ptr [rcx - 0x7d], cl; out dx, eax; add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x00000000001223ac: add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x00000000000a0b5b: add byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x000000000004a0df: add byte ptr [rcx - 0x7d], cl; ret 0x4801; 
0x000000000006ea4b: add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x000000000016361f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000015f52b: add byte ptr [rcx - 0x7d], cl; ret 0x8b04; 
0x00000000000a0ae6: add byte ptr [rcx - 0x7d], cl; ret 0xbd01; 
0x0000000000076f74: add byte ptr [rcx - 0x7d], cl; ret 0xbe01; 
0x000000000012acc0: add byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x00000000000a90ff: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000053be9: add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000313be: add byte ptr [rcx - 0x8373], cl; dec dword ptr [rcx + 1]; ret 0x8d48; 
0x000000000018863b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000012c4cf: add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000027be3: add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000001393ad: add byte ptr [rcx - 0xa], al; ret; 
0x000000000012fb07: add byte ptr [rcx - 0xda08], cl; inc dword ptr [rax]; ret; 
0x0000000000090911: add byte ptr [rcx - 1], al; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000007bad1: add byte ptr [rcx - 5], al; jg 0x7bae8; test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000006c6b9: add byte ptr [rcx - 9], al; ret; 
0x00000000000ac7f6: add byte ptr [rcx - 9], cl; ret 1; 
0x00000000000ac81c: add byte ptr [rcx - 9], cl; ret 2; 
0x000000000015f23e: add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000095206: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951dd: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951bd: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x0000000000148f16: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009d714: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x000000000015b18d: add byte ptr [rcx], al; add byte ptr [rax], al; add cl, ch; ret 0xfffe; 
0x000000000003448d: add byte ptr [rcx], al; add byte ptr [rax], al; and eax, esi; ret; 
0x0000000000190ad4: add byte ptr [rcx], al; add byte ptr [rax], al; cmp rdx, rcx; jne 0x190ab6; vzeroupper; ret; 
0x00000000000e5068: add byte ptr [rcx], al; add byte ptr [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000113c87: add byte ptr [rcx], al; add byte ptr [rax], al; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000061bc1: add byte ptr [rcx], al; add byte ptr [rax], al; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000013bd0a: add byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000000bb92f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x00000000000bb9df: add byte ptr [rcx], al; add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000015cbd0: add byte ptr [rcx], al; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000046e69: add byte ptr [rcx], al; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000137f44: add byte ptr [rcx], al; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x000000000009c6a5: add byte ptr [rcx], al; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000004779c: add byte ptr [rcx], al; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000046c22: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d2911: add byte ptr [rcx], al; add rsp, 8; ret; 
0x00000000000a0474: add byte ptr [rcx], al; je 0xa0435; ret; 
0x00000000000bcd84: add byte ptr [rcx], al; je 0xbcd45; ret; 
0x000000000011d723: add byte ptr [rcx], al; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000131723: add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000000dfc2d: add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfdf8: add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d5: add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000015e113: add byte ptr [rcx], al; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x00000000001258fa: add byte ptr [rcx], al; mov eax, r8d; add rsp, 8; ret; 
0x00000000001379fe: add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x0000000000061057: add byte ptr [rcx], al; mov eax, r8d; pop rbx; ret; 
0x0000000000102a82: add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x000000000015cc7c: add byte ptr [rcx], al; mov rax, r8; pop rbp; ret; 
0x00000000000341a8: add byte ptr [rcx], al; movzx eax, ax; ret; 
0x00000000000475fe: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000054cd5: add byte ptr [rcx], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000938ab: add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000053b17: add byte ptr [rcx], al; ret 0x89e9; 
0x00000000000f239e: add byte ptr [rcx], al; ret 0xc083; 
0x0000000000083f41: add byte ptr [rcx], al; ret; 
0x00000000000dc0a8: add byte ptr [rcx], al; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000e4fd0: add byte ptr [rcx], al; sbb dword ptr [rdx + rdi*4], edx; jge 0xe4fd8; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x0000000000046701: add byte ptr [rcx], al; xor eax, eax; pop rbx; ret; 
0x00000000000328aa: add byte ptr [rcx], bh; jp 0x328e6; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000102193: add byte ptr [rcx], bh; ret 0x1874; 
0x00000000000974e6: add byte ptr [rcx], bh; ret 0xa7e; 
0x00000000000c9e67: add byte ptr [rcx], bh; ret; 
0x000000000010236f: add byte ptr [rcx], bh; retf 0x840f; pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x63482c53], cl; ret 0x2de9; 
0x000000000011588e: add byte ptr [rcx], bl; rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000195363: add byte ptr [rcx], bl; sal bh, cl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000195482: add byte ptr [rcx], bl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x00000000000dc2b6: add byte ptr [rcx], ch; ret 0x8948; 
0x00000000000d8f1b: add byte ptr [rcx], ch; ret 0x8b48; 
0x00000000000d69f4: add byte ptr [rcx], ch; ret 0x8d44; 
0x00000000001141b7: add byte ptr [rcx], ch; ret 0xc085; 
0x00000000000dac65: add byte ptr [rcx], ch; ret 0xd729; 
0x00000000000c9ff7: add byte ptr [rcx], ch; ret; 
0x00000000000db0b6: add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000412b9: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; ret; 
0x00000000000246f1: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000051bef: add byte ptr [rcx], cl; ret 0x8f74; 
0x0000000000041ba6: add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000004f38f: add byte ptr [rcx], dh; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000135a1c: add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000121821: add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000499f1: add byte ptr [rcx], dh; div bh; ret 0; 
0x000000000011cd0b: add byte ptr [rcx], dh; fucomi st(3); or al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000445bc: add byte ptr [rcx], dh; imul al; fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000042177: add byte ptr [rcx], dh; leave; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x000000000008d8dd: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000ac12c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x00000000001969d7: add byte ptr [rcx], dh; rol byte ptr [rbp - 0x7b], 0xc0; jne 0x196930; add rsp, 0x38; ret; 
0x000000000010f60f: add byte ptr [rcx], dh; rol byte ptr [rbx + rbx*8 - 0x74b7c38c], 0x84; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000160b0f: add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf00008], cl; ret 0x1389; 
0x0000000000102a9f: add byte ptr [rcx], dh; rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000117c07: add byte ptr [rcx], dh; rol byte ptr [rdi + 0xd7c4005], 0; cmp eax, 1; jg 0x117c16; ret; 
0x0000000000097ca0: add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 0x34; ret; 
0x000000000009ef39: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000048071: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000bb9e2: add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000018bd9f: add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x000000000018c790: add byte ptr [rcx], dh; ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c769; vzeroupper; ret; 
0x00000000000295e4: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000001054a8: add byte ptr [rcx], dh; ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg esp, eax; ret 0x1589; 
0x0000000000144727: add byte ptr [rcx], dh; sal al, 0xf; mov cl, 0x15; sahf; ret; 
0x00000000000ee477: add byte ptr [rcx], dh; sar byte ptr [rax], 0xe; je 0xee3bd; ret; 
0x000000000011195c: add byte ptr [rcx], dh; shr al, 0x7c; ret; 
0x00000000000970ea: add byte ptr [rcx], dh; shr al, 0xbe; ret; 
0x00000000000d0fcf: add byte ptr [rcx], dh; shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0eaf: add byte ptr [rcx], dh; shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x000000000015de37: add byte ptr [rcx], dh; test byte ptr [rax - 0x73], 0x3d; ret 0x59c; 
0x0000000000117c06: add byte ptr [rcx], sil; rol byte ptr [rdi + 0xd7c4005], 0; cmp eax, 1; jg 0x117c16; ret; 
0x0000000000190a16: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000cb17d: add byte ptr [rdi + 0x4c], dh; or eax, 0x80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000cf084: add byte ptr [rdi + 2], bh; neg eax; ret; 
0x000000000012f9ea: add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x0000000000192be4: add byte ptr [rdi + 9], bh; neg eax; ret; 
0x0000000000102866: add byte ptr [rdi + rax*8 + 4], ah; and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000011d016: add byte ptr [rdi + rax*8], ah; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000043c5a: add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041e60: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001142ce: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000011978f: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009e95a: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000412b6: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246ee: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000010dc3e: add byte ptr [rdi + rax*8], ah; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041256: add byte ptr [rdi + rax*8], ah; sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, r11; ret; 
0x000000000009038a: add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x0000000000194de9: add byte ptr [rdi + rcx - 0x43], cl; ret 0x8349; 
0x00000000000e4fbb: add byte ptr [rdi + rcx*4 + 0x49], dh; cmp eax, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000340a8: add byte ptr [rdi + rcx], al; mov bh, 0xc0; ret; 
0x0000000000032846: add byte ptr [rdi + rdi*8], bh; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x00000000000424c7: add byte ptr [rdi], bh; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x000000000010dc41: add byte ptr [rdi], bl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000bbaea: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000087cc8: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000141b76: add byte ptr [rdi], cl; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000926bd: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x38], eax; pop rbp; pop r12; ret; 
0x00000000000919c4: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x00000000001507da: add byte ptr [rdi], cl; adc dword ptr [rdx], ebx; ret; 
0x000000000014d082: add byte ptr [rdi], cl; adc dword ptr [rdx], ecx; ret; 
0x000000000014feca: add byte ptr [rdi], cl; adc dword ptr [rdx], edx; ret; 
0x00000000001507ba: add byte ptr [rdi], cl; adc dword ptr [rdx], esp; ret; 
0x000000000010d044: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d050: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000010046d: add byte ptr [rdi], cl; adc dword ptr [rsi + 8], eax; ret; 
0x000000000014832a: add byte ptr [rdi], cl; adc dword ptr [rsi + 8], ecx; ret; 
0x000000000014cf8f: add byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000de286: add byte ptr [rdi], cl; add eax, 0x1f0fb4eb; add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000015d02d: add byte ptr [rdi], cl; add eax, 0x2e6690eb; nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000042fda: add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x000000000014e5c5: add byte ptr [rdi], cl; add eax, 0xa1e88beb; adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x000000000016ce36: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000000bc087: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000018abef: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000018b2cf: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001899ef: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016de7f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000018915f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000018916f: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000012ceb5: add byte ptr [rdi], cl; mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x00000000000d6dda: add byte ptr [rdi], cl; mov bh, 5; adc byte ptr [rbp + 0x3941000d], cl; ret 0x8c0f; 
0x00000000000d79eb: add byte ptr [rdi], cl; mov bh, 5; adc dword ptr [rcx + 0x3941000d], eax; ret 0x8c0f; 
0x00000000000d6dea: add byte ptr [rdi], cl; mov bh, 5; add cl, byte ptr [rbp + 0x3941000d]; ret 0x8c0f; 
0x00000000000d79fb: add byte ptr [rdi], cl; mov bh, 5; add eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000000d6daa: add byte ptr [rdi], cl; mov bh, 5; cmp cl, byte ptr [rbp + 0x3941000d]; ret 0x8c0f; 
0x00000000000d79bb: add byte ptr [rdi], cl; mov bh, 5; cmp eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000000d7a2b: add byte ptr [rdi], cl; mov bh, 5; fld dword ptr [rax + 0x3941000d]; ret 0x8c0f; 
0x00000000001388d5: add byte ptr [rdi], cl; mov cl, 0x15; ret; 
0x0000000000091b3f: add byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001899df: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016deef: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000018a58f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000e6ec9: add byte ptr [rdi], cl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x000000000003803f: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000e6edf: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rbx - 0x7cb7fb37], eax; ret 0xe901; 
0x00000000000ea56f: add byte ptr [rdi], cl; mov dh, 0x43; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000038dd7: add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000019915f: add byte ptr [rdi], cl; mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x00000000001920df: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920cf: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000019209f: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000001920bf: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920af: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000048d07: add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000013c4df: add byte ptr [rdi], cl; mov dh, 0x51; add dword ptr [rbp - 0x76fdefbc], ecx; ret 0xc639; 
0x00000000000e6d4f: add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000005f3a7: add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf01; 
0x00000000000d4eb9: add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000bc147: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000aa39f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000001843ff: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000001461ba: add byte ptr [rdi], cl; mov dh, 7; add eax, ecx; sub rdx, 1; jne 0x146148; ret; 
0x0000000000184e4f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000184b6f: add byte ptr [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x0000000000184b7f: add byte ptr [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000000ac65f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac66f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000ac64f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000184b8f: add byte ptr [rdi], cl; mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x0000000000184ae6: add byte ptr [rdi], cl; mov ebp, 0xea8148c0; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000ac6cf: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac67f: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184bbf: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac6af: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x0000000000184b5f: add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000ac15f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000ac18f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac17f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000ac19f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1af: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce37f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce38f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac16f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000061487: add byte ptr [rdi], cl; push rax; ret 0xb60f; 
0x00000000000423ff: add byte ptr [rdi], cl; push rsi; add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423da: add byte ptr [rdi], cl; push rsi; add eax, 0x17a35e; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x00000000000422bb: add byte ptr [rdi], cl; push rsp; ret; 
0x000000000018c654: add byte ptr [rdi], cl; pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x00000000000d1dc1: add byte ptr [rdi], cl; sub dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000196547: add byte ptr [rdi], cl; test bh, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000178ab4: add byte ptr [rdi], cl; test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000019587f: add byte ptr [rdi], cl; test byte ptr [rdx], bh; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xc148; 
0x00000000000e6ec3: add byte ptr [rdi], cl; test byte ptr [rsi + 0xf000004], ah; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x00000000001619b3: add byte ptr [rdi], cl; test byte ptr [rsi + 0xf000004], dl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000155ef0: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebx; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000043327: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x000000000009d4db: add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ebp; add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d5fe: add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ebp; add esp, 0x18; ret; 
0x00000000000578c1: add byte ptr [rdi], cl; test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x000000000010decf: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], esi; add esp, 0x78; ret; 
0x000000000010e4c5: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebx; add esp, 0x68; ret; 
0x00000000000521f5: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ecx; add esp, 0x10; pop rbx; ret; 
0x0000000000151f8c: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], ebx; add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000013de7e: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000001472ca: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], esp; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000115090: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edx; add esp, 0x60; pop rbp; ret; 
0x000000000010e606: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000010dd54: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esp; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000014e64e: add byte ptr [rdi], cl; test dword ptr [rsi], edi; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000012d0d3: add byte ptr [rdi], cl; test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000045fe8: add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x00000000000587a5: add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x00000000000f7984: add byte ptr [rdi], cl; xchg ebp, eax; ret 0xca09; 
0x0000000000156533: add byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x000000000014f44f: add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x00000000000d47e3: add byte ptr [rdi], cl; xchg edx, eax; ret 0xc283; 
0x00000000000db0ae: add byte ptr [rdi], cl; xchg edx, eax; rol byte ptr [rip + 0x16d], 0x29; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000d67fd: add byte ptr [rdi], cl; xchg esi, eax; ret 0x6348; 
0x0000000000195cc1: add byte ptr [rdi], cl; xchg esp, eax; ret 0x2040; 
0x0000000000193330: add byte ptr [rdi], cl; xchg esp, eax; ret 0x2041; 
0x0000000000081ea0: add byte ptr [rdi], cl; xchg esp, eax; ret 0x3b48; 
0x0000000000053ffe: add byte ptr [rdi], cl; xchg esp, eax; ret 0x3de9; 
0x00000000001965c0: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8440; 
0x0000000000193bea: add byte ptr [rdi], cl; xchg esp, eax; ret 0x8441; 
0x00000000000fe43f: add byte ptr [rdi], cl; xchg esp, eax; ret 0xd020; 
0x00000000000f9b14: add byte ptr [rdi], cl; xchg esp, eax; ret 0xf631; 
0x000000000009c1e2: add byte ptr [rdx + 0x2b], dh; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x00000000000baf3f: add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000e50f5: add byte ptr [rdx + 0x40], bh; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000017679f: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000011cd7a: add byte ptr [rdx + 0x64], bh; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x00000000000e4f96: add byte ptr [rdx + 0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e4fe9: add byte ptr [rdx + 0x7f], bh; cmovne rax, rdx; ret; 
0x000000000011f2eb: add byte ptr [rdx + 8], bh; syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x00000000000e819e: add byte ptr [rdx + rbp], bh; je 0xe81a7; cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000958fb: add byte ptr [rdx + rdx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x00000000000986cc: add byte ptr [rdx - 0x7d], cl; xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000047396: add byte ptr [rdx - 1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x0000000000049b37: add byte ptr [rdx], ah; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], -0x7c; ret; 
0x0000000000112560: add byte ptr [rdx], al; add byte ptr [rax], al; add al, ch; xchg esi, eax; ret 0xffff; 
0x00000000000e3a19: add byte ptr [rdx], al; add byte ptr [rax], al; add cl, ch; ret 0xfffe; 
0x000000000003454b: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000341fa: add byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x00000000001463ac: add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xaa747]; ret; 
0x0000000000026f76: add byte ptr [rdx], al; add rsp, 8; ret; 
0x00000000000951fb: add byte ptr [rdx], al; jbe 0x95200; ret; 
0x0000000000034108: add byte ptr [rdx], al; movzx eax, ax; ret; 
0x000000000015c603: add byte ptr [rdx], bh; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009cb8c: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000041259: add byte ptr [rdx], ch; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x000000000010261d: add byte ptr [rdx], ch; call 0x102520; add rsp, 0x18; ret; 
0x00000000001280ab: add byte ptr [rdx], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000183b98: add byte ptr [rdx], dl; jae 0x183b90; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000041ba1: add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000018eb7f: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018eb7e: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e2b2: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011ee89: add byte ptr [rip - 0x1000], ah; or eax, edx; ret; 
0x0000000000090885: add byte ptr [rip - 0x16141c8c], bl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000052aca: add byte ptr [rip - 0x2711800], al; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e4f3c: add byte ptr [rsi + 0x29], bh; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x000000000009391a: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091012: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5a: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117c1d: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x000000000006309e: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x0000000000152bdb: add byte ptr [rsi + 0xa], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000b3961: add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000018d876: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004263b: add byte ptr [rsi + 0xf], ah; fild dword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000097d4e: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000160647: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x44c7; 
0x0000000000089d6a: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x00000000000361c2: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x00000000001149b1: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror dword ptr [rax - 0x75], 5; ret; 
0x00000000000ce32b: add byte ptr [rsi + 0xf], ah; jbe 0xce37f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac14b: add byte ptr [rsi + 0xf], ah; je 0xac19f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac62d: add byte ptr [rsi + 0xf], ah; je 0xac681; and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000000b718a: add byte ptr [rsi + 0xf], ah; je 0xb71d5; adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000b8857: add byte ptr [rsi + 0xf], ah; je 0xb88a2; adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000ba757: add byte ptr [rsi + 0xf], ah; je 0xba7a2; adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x0000000000093664: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000042b35: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc764; 
0x000000000005be38: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000042085: add byte ptr [rsi + 0xf], ah; push rsi; or eax, 0x17a672; mulsd xmm0, xmm1; ret; 
0x000000000004205f: add byte ptr [rsi + 0xf], ah; push rsi; or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x0000000000041efb: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x17a7dc; orpd xmm0, xmm1; ret; 
0x0000000000118ece: add byte ptr [rsi + 0xf], ah; ror dword ptr cs:[rdi], 0x9a; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000ac094: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000000ac57c: add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac5a1: add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000012202a: add byte ptr [rsi + 1], bh; call 0x121ec0; ret; 
0x0000000000094e4c: add byte ptr [rsi + 1], dh; ret; 
0x00000000000e50c7: add byte ptr [rsi + rbx + 0x48], dh; cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000093977: add byte ptr [rsi + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000009552e: add byte ptr [rsi - 0x59], dh; add rsp, 8; ret; 
0x00000000000e40bd: add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000162d0d: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0x89155]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001411ed: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012201d: add byte ptr [rsi - 0x70], ah; endbr64; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x121ec0; ret; 
0x00000000001255ad: add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x00000000000cf68d: add byte ptr [rsi - 0x70], ah; endbr64; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x000000000017aacd: add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000cfadd: add byte ptr [rsi - 0x70], ah; mov ch, dh; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000001787ad: add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e8d: add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6e6d: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000017877d: add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5d: add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000b710d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b70cd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70ed: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b945d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85fd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000319bd: add byte ptr [rsi - 0x70], ah; ret; 
0x0000000000188afd: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000baf2d: add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35d: add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x00000000001767af: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001767bf: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000041c14: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d0e4: add byte ptr [rsi - 0x77], ah; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x000000000013a2fa: add byte ptr [rsi - 0x77], ah; rol r14, 0x45; ret; 
0x000000000010c768: add byte ptr [rsi - 9], ah; mov byte ptr [rax], 0xff; jne 0x10c775; mov word ptr [rdi], si; xor eax, eax; ret; 
0x0000000000041236: add byte ptr [rsi*2 + 0x5c8b45e6], 0x80; or byte ptr [rbx + rax + 0x5f], cl; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000043c5d: add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000017c74c: add byte ptr [rsi], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000e3249: add byte ptr [rsi], dl; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000001127f9: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000043069: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000015cf61: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; mov qword ptr [rdx], 0; ret; 
0x0000000000084930: add byte ptr [rsi], dl; add byte ptr [rax], al; add cl, ch; ret 0xfffe; 
0x00000000000c6a9c: add byte ptr [rsp + rax + 0x44], dh; mov eax, eax; ret; 
0x00000000000cf53e: add byte ptr [rsp + riz*8 + 0x119850f], al; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000005ba5a: add byte ptr cs:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000115f87: add byte ptr ds:[rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000001196f2: add byte ptr ds:[rax - 0x77], cl; je 0x119700; pop rbx; ret; 
0x0000000000043c5e: add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011cd7c: add byte ptr fs:[rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x00000000000a0392: add byte ptr gs:[rbp + 0x31], al; in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x000000000013a213: add byte ptr gs:[rbx + 0x5d], bl; pop r12; ret; 
0x00000000000c04b5: add byte ptr ss:[rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8945; 
0x000000000018a6bf: add ch, al; cli; jg 0x18a6cb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b3ef: add ch, al; cli; jg 0x18b3fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x0000000000184a6e: add ch, al; std; xlatb; ret 0xc085; 
0x0000000000184a62: add ch, al; std; xlatb; ret; 
0x00000000001882cf: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000001320c9: add ch, bh; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000bc9fc: add ch, bh; or al, 0; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a8632: add ch, bl; test eax, 0x48001f0f; mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000009e921: add ch, byte ptr [rcx]; ror byte ptr [rax - 0x75], 1; push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x0000000000043aea: add cl, 0xe9; add esi, ebx; stosq qword ptr [rdi], rax; ret; 
0x00000000000d123f: add cl, al; stc; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000002e2af: add cl, byte ptr [r13 + 0x39]; ret 0x820f; 
0x000000000011cc66: add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x00000000000b39fc: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x00000000001785e7: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x00000000000480cb: add cl, byte ptr [r8 - 0x77]; add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ea572: add cl, byte ptr [r8 - 0x7d]; ret; 
0x00000000000eb763: add cl, byte ptr [r9 - 0x7d]; ret; 
0x0000000000100450: add cl, byte ptr [rax + 0x16893847]; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000d90d4: add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000d927c: add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x000000000013b87a: add cl, byte ptr [rax + 0x39]; ret 0x1072; 
0x00000000000a482d: add cl, byte ptr [rax + 0x39]; ret 0x860f; 
0x000000000008de27: add cl, byte ptr [rax + 0x39]; ret 0x870f; 
0x000000000013b888: add cl, byte ptr [rax + 0x39]; ret 0xc019; 
0x000000000011cc67: add cl, byte ptr [rax + 0x39]; ret 0xf48; 
0x000000000002c0f4: add cl, byte ptr [rax + 0x39]; ret; 
0x000000000007dcd7: add cl, byte ptr [rax + 0x39]; ror dword ptr [rdi], 0x8d; out dx, eax; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000018bc38: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000000893dd: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000008959d: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000000d05f1: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ror dword ptr [rax + 1], cl; ret 0x1b8; 
0x00000000000bcd56: add cl, byte ptr [rax - 0x73]; add eax, 0x112c2; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000bc875: add cl, byte ptr [rax - 0x73]; add eax, 0x12933; cmovne rax, rdx; ret; 
0x00000000000a0735: add cl, byte ptr [rax - 0x73]; add eax, 0x162d3; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x000000000009f215: add cl, byte ptr [rax - 0x73]; add eax, 0x17703; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f0e5: add cl, byte ptr [rax - 0x73]; add eax, 0x1a8a3; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a09f3: add cl, byte ptr [rax - 0x73]; add eax, 0x1b1b5; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0683: add cl, byte ptr [rax - 0x73]; add eax, 0x1b505; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0523: add cl, byte ptr [rax - 0x73]; add eax, 0x1b685; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012da0c: add cl, byte ptr [rax - 0x73]; add eax, 0x5dc9c; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d94c: add cl, byte ptr [rax - 0x73]; add eax, 0x5dd7c; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d88c: add cl, byte ptr [rax - 0x73]; add eax, 0x5de3c; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012da57: add cl, byte ptr [rax - 0x73]; add eax, 0x629d1; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d997: add cl, byte ptr [rax - 0x73]; add eax, 0x62ab1; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8d7: add cl, byte ptr [rax - 0x73]; add eax, 0x62b71; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db17: add cl, byte ptr [rax - 0x73]; add eax, 0x62ec1; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x00000000000a0795: add cl, byte ptr [rax - 0x73]; add eax, 0x86f3; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x000000000009f7c5: add cl, byte ptr [rax - 0x73]; add eax, 0x9733; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f6f5: add cl, byte ptr [rax - 0x73]; add eax, 0x9743; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f75f: add cl, byte ptr [rax - 0x73]; add eax, 0xaef9; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a08d8: add cl, byte ptr [rax - 0x73]; add eax, 0xe560; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0838: add cl, byte ptr [rax - 0x73]; add eax, 0xe5e0; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000a098c: add cl, byte ptr [rax - 0x73]; add eax, 0xead4c; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a061c: add cl, byte ptr [rax - 0x73]; add eax, 0xeb09c; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04bc: add cl, byte ptr [rax - 0x73]; add eax, 0xeb21c; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a09d7: add cl, byte ptr [rax - 0x73]; add eax, 0xefa81; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0667: add cl, byte ptr [rax - 0x73]; add eax, 0xefdd1; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0507: add cl, byte ptr [rax - 0x73]; add eax, 0xeff51; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a05c7: add cl, byte ptr [rax - 0x73]; add eax, 0xf0421; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x000000000012da73: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8e105; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000012d9b3: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8e1e5; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012d8f3: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8e2a5; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000018a479: add cl, byte ptr [rax - 0x73]; jg 0x18a480; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1ad: add cl, byte ptr [rax - 0x73]; jg 0x18b1b4; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76e9: add cl, byte ptr [rax - 0x73]; jg 0xb76f0; jne 0xb7f80; ret; 
0x00000000000b8dcd: add cl, byte ptr [rax - 0x73]; jg 0xb8dd4; jne 0xb97d0; ret; 
0x000000000009869e: add cl, byte ptr [rax - 0x73]; push rsp; ret; 
0x00000000000d1dba: add cl, byte ptr [rax - 0x75]; add eax, 0x11a086; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x000000000017abe5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000176855: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000001142b3: add cl, byte ptr [rax - 0x75]; add eax, 0xd7c0d; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000176785: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000b39fd: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x00000000001785e8: add cl, byte ptr [rax - 0x76b7fdbe]; clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x00000000000480cc: add cl, byte ptr [rax - 0x77]; add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b3969: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001785a3: add cl, byte ptr [rax - 0x77]; clc; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x00000000001785c5: add cl, byte ptr [rax - 0x77]; clc; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x00000000001785eb: add cl, byte ptr [rax - 0x77]; clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x0000000000178603: add cl, byte ptr [rax - 0x77]; clc; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x0000000000178345: add cl, byte ptr [rax - 0x77]; clc; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x0000000000128855: add cl, byte ptr [rax - 0x77]; ret 0x53ff; 
0x00000000001041d4: add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x000000000012a032: add cl, byte ptr [rax - 0x77]; ret 0xff41; 
0x0000000000085c6f: add cl, byte ptr [rax - 0x77]; ret; 
0x00000000000d6f25: add cl, byte ptr [rax - 0x77]; retf 0xb948; ret; 
0x0000000000038375: add cl, byte ptr [rax - 0x7d]; ret 0x3c01; 
0x0000000000074193: add cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000282f3: add cl, byte ptr [rax - 0x7d]; ret 0x4802; 
0x00000000000b6980: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000116579: add cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x00000000000274a4: add cl, byte ptr [rax - 0x7d]; ret 0x4902; 
0x00000000000a1543: add cl, byte ptr [rax - 0x7d]; ret 0x6610; 
0x00000000000e6b87: add cl, byte ptr [rax - 0x7d]; ret 0x8401; 
0x0000000000080cc8: add cl, byte ptr [rax - 0x7d]; ret 0xe902; 
0x00000000000b69e3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x0000000000035fbd: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000157610: add cl, byte ptr [rax - 0x7d]; ret 0xf04; 
0x000000000006ab61: add cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000d6dee: add cl, byte ptr [rbp + 0x3941000d]; ret 0x8c0f; 
0x000000000002e2b0: add cl, byte ptr [rbp + 0x39]; ret 0x820f; 
0x000000000016dcc2: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b3a68: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000017ab65: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x00000000000b3b0c: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000001133f4: add cl, byte ptr [rbx + 0x750c2444]; ret 0xd8f7; 
0x000000000013b90a: add cl, byte ptr [rcx + 0x39]; clc; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x00000000000ed909: add cl, byte ptr [rcx + 0x39]; ret 0x3176; 
0x000000000014fe9b: add cl, byte ptr [rcx + 0x40c741f0]; sbb byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000d4aab: add cl, byte ptr [rcx + rcx*4 - 0x40]; add rsp, 8; ret; 
0x0000000000094d87: add cl, byte ptr [rcx - 0x3fcef7b9]; ret; 
0x00000000000a43d2: add cl, byte ptr [rcx - 0x76b774fc]; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000086bfc: add cl, byte ptr [rcx - 0x77]; ret; 
0x00000000000b7708: add cl, byte ptr [rcx - 0x7d]; call 0x7f98bf13; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000eb764: add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000e5bc0: add cl, byte ptr [rcx]; ret 0xf089; 
0x00000000000340c8: add cl, byte ptr [rdi]; mov bh, 0xc0; ret; 
0x000000000012acba: add cl, byte ptr [rdi]; test bh, bl; add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x000000000018b1b1: add cl, byte ptr [rdi]; test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000013b05f: add cl, byte ptr [rdi]; test dword ptr [rdx], eax; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x000000000017c971: add cl, byte ptr [rdi]; test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000081479: add cl, byte ptr [rdi]; xchg ebp, eax; ret 0x5389; 
0x00000000000b39fa: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017ab23: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000000b3a28: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x00000000000b3aac: add cl, byte ptr [rdx + 0x42880841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000a07f4: add cl, byte ptr [rip + 0x450f4800]; ret 0xfc3; 
0x00000000000a43d1: add cl, byte ptr cs:[rcx - 0x76b774fc]; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000e842a: add cl, ch; imul edi, edi, -1; dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x00000000000319b8: add cl, ch; mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x00000000000be527: add cl, ch; movabs al, byte ptr [0xeb8087b8bfffffc]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000c1a70: add cl, ch; ret 0xf61c; 
0x0000000000033f52: add cl, ch; ret 0xfee7; 
0x000000000005e917: add cl, ch; ret 0xffe2; 
0x000000000007bc8b: add cl, ch; ret 0xffea; 
0x0000000000104c0d: add cl, ch; ret 0xffed; 
0x000000000005cd44: add cl, ch; ret 0xfff6; 
0x00000000001949e5: add cl, ch; ret 0xfffb; 
0x000000000013dac6: add cl, ch; ret 0xfffc; 
0x00000000000e0ae9: add cl, ch; ret 0xfffd; 
0x0000000000084934: add cl, ch; ret 0xfffe; 
0x000000000002e048: add cl, ch; ret; 
0x00000000001983a0: add cl, ch; retf 0xf805; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e9684: add cl, ch; retf 0xfff7; jmp qword ptr [rsi + 0xf]; 
0x0000000000063930: add cl, ch; retf 0xfffb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000089758: add cl, ch; retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x0000000000108d00: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000170eba: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000000578c7: add cl, cl; ret; 
0x00000000000a8a57: add dh, al; add byte ptr [rax], al; ret; 
0x0000000000116ecd: add dh, al; add eax, 0xd889b; and ecx, dword ptr [rcx + rcx*4 - 0x40]; mov byte ptr [rsi - 1], 0; ret; 
0x00000000000a8627: add dh, al; inc dword ptr [r8]; mov qword ptr [rdx], rcx; ret; 
0x000000000011ce6a: add dh, al; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec47f: add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000ec48f: add dh, al; or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000016de73: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000011ed95: add dh, byte ptr [rax + rcx - 0x77]; ret 0xeac1; 
0x00000000001571bd: add dh, byte ptr [rax + rdx + 0x45]; xor eax, eax; test eax, eax; je 0x1571f0; mov eax, r8d; ret; 
0x000000000015720d: add dh, byte ptr [rax + rdx + 0x45]; xor eax, eax; test eax, eax; je 0x157240; mov eax, r8d; ret; 
0x00000000000baf6b: add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000bb4d7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb587: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x0000000000120d27: add dh, byte ptr [rbp + 0x46]; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010d0fb: add dh, byte ptr [rdi + 8]; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000018fb4c: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000190223: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000015776b: add dh, byte ptr [rdx + riz*2 + 0x48]; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000007539a: add dh, byte ptr [rip - 0x76b7ffe9]; ret 0x2948; 
0x00000000000951fc: add dh, byte ptr [rsi + 1]; ret; 
0x00000000000d423a: add dh, byte ptr [rsi + 3]; ret; 
0x00000000000dd191: add dh, byte ptr [rsp + rbx*2 - 0x7b]; dec dword ptr [rdi]; xchg esp, eax; ret; 
0x000000000009845e: add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x00000000001120c8: add dh, cl; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000009f241: add dh, dh; jb 0x9f256; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009f831: add dh, dh; jb 0x9f846; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009faf1: add dh, dh; jb 0x9fb06; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000012d8ef: add dh, dh; jge 0x12d8f6; lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9af: add dh, dh; jge 0x12d9b6; lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da6f: add dh, dh; jge 0x12da76; lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x00000000000a051f: add dh, dh; jge 0xa0526; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a067f: add dh, dh; jge 0xa0686; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a09ef: add dh, dh; jge 0xa09f6; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000bc871: add dh, dh; jno 0xbc878; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x0000000000128d5f: add dh, dh; ret 0x4804; 
0x0000000000089db0: add dh, dh; ret 0x7402; 
0x000000000008591f: add dh, dh; ret 0x7420; 
0x0000000000190c27: add dh, dh; ret 0x7501; 
0x0000000000190c34: add dh, dh; ret 0x7502; 
0x0000000000190c41: add dh, dh; ret 0x7504; 
0x000000000014a2d0: add dh, dh; ret 0x7507; 
0x0000000000190bf9: add dh, dh; ret 0x7510; 
0x0000000000190c06: add dh, dh; ret 0x7520; 
0x00000000000f5364: add dh, dh; ret 0x7540; 
0x0000000000097f97: add dh, dh; ret 0xf01; 
0x000000000010cbb8: add dh, dh; ret 0xf02; 
0x00000000001013c7: add dh, dh; ret 0xf04; 
0x00000000000b2202: add dh, dh; ret 0xf20; 
0x000000000007adbf: add dh, dh; ret 0xf40; 
0x000000000005f567: add dh, dh; ret 0xf50; 
0x000000000010cbaf: add dh, dh; ret 0xf80; 
0x000000000005c02f: add dh, dh; ret; 
0x00000000000d683c: add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000ce097: add dil, r15b; ret; 
0x0000000000042a0b: add dl, byte ptr [rip - 0x3b7cb800]; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000420ff: add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004207d: add dl, dh; movups xmm0, xmmword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042057: add dl, dh; movups xmm0, xmmword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000042067: add dl, dh; mulps xmm0, xmm1; ret; 
0x00000000000a47f6: add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000002c7b7: add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000012d40d: add dword ptr [r8 + 0x3b], ecx; pop rbp; mov eax, 0x89483e74; ret; 
0x000000000010bc6f: add dword ptr [r8 + 1], ecx; ror dword ptr [rax + 1], 1; ret 0x8948; 
0x000000000005b3c3: add dword ptr [r8 + r8*8 - 0x7cb6f78c], eax; ret; 
0x000000000010befe: add dword ptr [r8 - 0x77], ecx; ret; 
0x00000000001557bc: add dword ptr [r8 - 0x77], r9d; ret 0x4c88; 
0x0000000000037ff4: add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000e81db: add dword ptr [r8 - 0x7d], r9d; mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x0000000000063e53: add dword ptr [r8 - 0x7d], r9d; ret 0xbe02; 
0x00000000001899e6: add dword ptr [r8], r8d; vzeroupper; ret; 
0x00000000000eb5a9: add dword ptr [r9 - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000ec46d: add dword ptr [rax + 0x1b807], ecx; add byte ptr [rax], al; ret; 
0x000000000017aad1: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x000000000005e3f2: add dword ptr [rax + 0x29], ecx; fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x00000000000469a0: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6491b5ae; ret; 
0x0000000000198b0b: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6ca6d319; ret; 
0x0000000000198b5f: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6ca6d36d; ret; 
0x00000000000f10c7: add dword ptr [rax + 0x29], ecx; ret 0x1f0f; 
0x00000000000a326d: add dword ptr [rax + 0x38], eax; je 0xa3282; add eax, 0x3949eb74; ret 0x1674; 
0x000000000002c804: add dword ptr [rax + 0x39480751], ecx; ret; 
0x0000000000110843: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000004943b: add dword ptr [rax + 0x39], ecx; ret 0x840f; 
0x00000000000a47f7: add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x000000000019948f: add dword ptr [rax + 0x39], ecx; ret 0x9974; 
0x0000000000110835: add dword ptr [rax + 0x39], ecx; ret 0xe72; 
0x00000000000e9f0f: add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x000000000015a35f: add dword ptr [rax + 0x39], ecx; ret 0xeb75; 
0x000000000005564b: add dword ptr [rax + 0x39], ecx; ret 0xef75; 
0x000000000002c44e: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000012d40e: add dword ptr [rax + 0x3b], ecx; pop rbp; mov eax, 0x89483e74; ret; 
0x00000000000fbf9f: add dword ptr [rax + 0x48000000], 0x63; ret 0x8948; 
0x0000000000127816: add dword ptr [rax + 0x63], ecx; fmul dword ptr [rax - 0x77]; ror byte ptr [rcx + 0x2b], 1; cmp byte ptr [r8 + 0x39], r9b; ret; 
0x00000000000d6a74: add dword ptr [rax + 0x63], ecx; ret 0xd789; 
0x00000000000edf6b: add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000092a13: add dword ptr [rax + 0xf740a39], eax; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x0000000000064e33: add dword ptr [rax + 1], ecx; ret; 
0x000000000015fc1a: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000040f9f: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x000000000010bc70: add dword ptr [rax + 1], ecx; ror dword ptr [rax + 1], 1; ret 0x8948; 
0x00000000000ec43f: add dword ptr [rax + 1], edi; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3f0: add dword ptr [rax + 1], edi; ret; 
0x000000000011a55b: add dword ptr [rax + 9], ecx; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000e81e0: add dword ptr [rax + rax*8 - 0x3fce538b], eax; ret; 
0x000000000005b3c4: add dword ptr [rax + rax*8 - 0x7cb6f78c], eax; ret; 
0x00000000000e9a77: add dword ptr [rax + rax], eax; or byte ptr [rax + 0xf], 0xa3; ret 0x830f; 
0x0000000000055844: add dword ptr [rax + rcx + 0x48], esi; mov eax, dword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x00000000000555fc: add dword ptr [rax + rcx + 0x49], esi; mov edx, dword ptr [rax + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000009c26b: add dword ptr [rax + rdi - 0x3e], eax; jne 0x9c258; sub rax, 0x10; ret; 
0x000000000003175f: add dword ptr [rax - 0x49f000b9], ecx; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000011cc63: add dword ptr [rax - 0x73], ecx; add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x00000000001785aa: add dword ptr [rax - 0x73], ecx; add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000018a2cb: add dword ptr [rax - 0x73], ecx; jg 0x18a2d1; jne 0x18a700; vzeroupper; ret; 
0x000000000018afe3: add dword ptr [rax - 0x73], ecx; jg 0x18afe9; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76c5: add dword ptr [rax - 0x73], ecx; jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000b8da8: add dword ptr [rax - 0x73], ecx; jg 0xb8dae; jne 0xb97d0; ret; 
0x000000000008af2d: add dword ptr [rax - 0x75], ecx; sub byte ptr [r15 + rcx - 0x4a], r8b; ret; 
0x00000000000b39d6: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x00000000001785a1: add dword ptr [rax - 0x776b7fe], ecx; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x0000000000094e76: add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000639cb: add dword ptr [rax - 0x77], ecx; adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a037c: add dword ptr [rax - 0x77], ecx; add byte ptr [r9 + rcx*4 - 0x20], r9b; pop rbp; pop r12; pop r13; ret; 
0x000000000017abe2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000176852: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000176782: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000176732: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017ab62: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000176842: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000006ab58: add dword ptr [rax - 0x77], ecx; lea edx, [rax - 0x77000005]; add cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000499d7: add dword ptr [rax - 0x77], ecx; push rbp; add bh, dh; ret 0; 
0x000000000008df51: add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000983da: add dword ptr [rax - 0x77], ecx; push rsi; or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000059951: add dword ptr [rax - 0x77], ecx; ret 0x44f6; 
0x000000000009c1d1: add dword ptr [rax - 0x77], ecx; ret 0x4974; 
0x00000000001557bd: add dword ptr [rax - 0x77], ecx; ret 0x4c88; 
0x0000000000121f06: add dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000008f826: add dword ptr [rax - 0x77], ecx; ret 0x850f; 
0x00000000000e70e7: add dword ptr [rax - 0x77], ecx; ret 0xb60f; 
0x00000000001053c8: add dword ptr [rax - 0x77], ecx; ret 0xb70f; 
0x00000000000fa393: add dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x00000000000e6644: add dword ptr [rax - 0x77], ecx; ret 0xf41; 
0x00000000000a5611: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000008df2a: add dword ptr [rax - 0x77], ecx; sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x000000000013c173: add dword ptr [rax - 0x78], eax; ja 0x13c179; ret; 
0x00000000000a1a5f: add dword ptr [rax - 0x78], eax; jl 0xa1a98; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x000000000012b912: add dword ptr [rax - 0x7b], ecx; push qword ptr [rbp - 0x1a]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c35: add dword ptr [rax - 0x7b], ecx; ror byte ptr [rax - 0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x000000000009ef0b: add dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], cl; xchg esp, eax; ret 0xd084; 
0x000000000013c92c: add dword ptr [rax - 0x7b], ecx; sar byte ptr [rax + 0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000038c3f: add dword ptr [rax - 0x7cb700b8], ecx; ret 0x4901; 
0x000000000017c6ea: add dword ptr [rax - 0x7d], ecx; fdivr st(7); ret; 
0x00000000000b661b: add dword ptr [rax - 0x7d], ecx; fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000116e66: add dword ptr [rax - 0x7d], ecx; mov dword ptr [rcx], 0x1f0fa6eb; add byte ptr [rax + 0x7522017f], al; ret 0x8d48; 
0x00000000000e81dc: add dword ptr [rax - 0x7d], ecx; mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x00000000000f0b32: add dword ptr [rax - 0x7d], ecx; ret 0x3904; 
0x0000000000140e92: add dword ptr [rax - 0x7d], ecx; ret 0x3928; 
0x0000000000126bb2: add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x0000000000045595: add dword ptr [rax - 0x7d], ecx; ret 0x4001; 
0x0000000000044994: add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000000eeb4b: add dword ptr [rax - 0x7d], ecx; ret 0x4504; 
0x0000000000029dfc: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000013b780: add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x000000000013ad3b: add dword ptr [rax - 0x7d], ecx; ret 0x4804; 
0x00000000000d3ef3: add dword ptr [rax - 0x7d], ecx; ret 0x4c08; 
0x00000000000300bd: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000060eb4: add dword ptr [rax - 0x7d], ecx; ret 0x8404; 
0x00000000000266b6: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000063e54: add dword ptr [rax - 0x7d], ecx; ret 0xbe02; 
0x0000000000026d8c: add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000000258d8: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000052411: add dword ptr [rax - 0x7f], ecx; ret; 
0x000000000005b4c2: add dword ptr [rax - 8], ebp; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000000038858: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000009391c: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x0000000000091014: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f5c: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x0000000000117c1f: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7c21; syscall; ret; 
0x00000000000ec3cb: add dword ptr [rax], 0xf9800000; pop rsi; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000121fcc: add dword ptr [rax], 1; ret; 
0x00000000000e5069: add dword ptr [rax], eax; add byte ptr [rax + 0x20], bh; cmove rax, rdx; ret; 
0x0000000000190ad5: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x00000000000d84b2: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x8941; 
0x000000000010201d: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x8b4d; 
0x00000000000d8421: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0xd789; 
0x000000000013b495: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000f9079: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9007; ret 0x4801; 
0x00000000000f90f2: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9080; ret 0x4901; 
0x00000000000b1917: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000001845af: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x00000000000d6edd: add dword ptr [rax], eax; add byte ptr [rax - 0x41], cl; ret; 
0x0000000000047f81: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1a937b; add rsp, 8; ret; 
0x00000000000f0b79: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [r13 + 0x63], cl; ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x000000000008ea59: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000015f906: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000015fe01: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000015f23f: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000a25d2: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000083d1e: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000001435da: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000bbbf2: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f8be: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000002c1bb: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; shr bl, 1; ret 0x1f0f; 
0x00000000000490b2: add dword ptr [rax], eax; add byte ptr [rax - 0x7bf0cf07], al; ret 1; 
0x000000000017cb6d: add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000017eb2d: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000e3368: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000098ab4: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x000000000009fd9e: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000001864df: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017ea81: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000026206: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013bcb3: add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x0000000000024cd1: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000163466: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001276e0: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000dcfbf: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000010263e: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x101f30; add rsp, 0x18; ret; 
0x000000000012202c: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x121ec0; ret; 
0x0000000000043dde: add dword ptr [rax], eax; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000cf191: add dword ptr [rax], eax; add byte ptr [rax], al; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf16f: add dword ptr [rax], eax; add byte ptr [rax], al; cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000cf562: add dword ptr [rax], eax; add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf612: add dword ptr [rax], eax; add byte ptr [rax], al; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x0000000000192be1: add dword ptr [rax], eax; add byte ptr [rax], al; jg 0x192bf0; neg eax; ret; 
0x00000000000cf081: add dword ptr [rax], eax; add byte ptr [rax], al; jg 0xcf089; neg eax; ret; 
0x000000000018f9a7: add dword ptr [rax], eax; add byte ptr [rax], al; jl 0x18f9b0; neg eax; ret; 
0x00000000000ec441: add dword ptr [rax], eax; add byte ptr [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x00000000001574dd: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x0000000000057c2e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000009522e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x157074], eax; ret; 
0x000000000014d104: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000009d715: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x000000000011733b: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; add rsp, 8; ret; 
0x000000000008cd42: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000006309b: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000057b56: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000095207: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951de: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951be: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000148306: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000048196: add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001507c5: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x000000000014fea2: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000926ba: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000014d07f: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014fec7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001507d7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507b7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000117374: add dword ptr [rax], eax; add byte ptr [rax], al; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000060f0a: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000087595: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000009eb14: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832cb: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000010c571: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000010261a: add dword ptr [rax], eax; add byte ptr [rax], al; push 0; call 0x102520; add rsp, 0x18; ret; 
0x000000000005562f: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000043b8a: add dword ptr [rax], eax; add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010e071: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x0000000000113675: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113688; ret; 
0x00000000000e5215: add dword ptr [rax], eax; add byte ptr [rax], al; test edi, edi; js 0xe5220; ret; 
0x00000000000d6882: add dword ptr [rax], eax; add byte ptr [rbp + 0x29], al; shr dword ptr [rcx], cl; ret 0x8945; 
0x000000000006344c: add dword ptr [rax], eax; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000062356: add dword ptr [rax], eax; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000093584: add dword ptr [rax], eax; add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000002e2aa: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x41], cl; add cl, byte ptr [rbp + 0x39]; ret 0x820f; 
0x00000000000ed985: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x52], cl; dec dword ptr [rcx + 0x29]; ret 0x8349; 
0x0000000000028237: add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; ret; 
0x0000000000061bc2: add dword ptr [rax], eax; add byte ptr [rbx + 0x28907c8], al; mov eax, 1; ret; 
0x000000000009b8aa: add dword ptr [rax], eax; add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000018f7e9: add dword ptr [rax], eax; add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000001125a1: add dword ptr [rax], eax; add byte ptr [rbx + 0x54e83c7d], cl; ret 0xffff; 
0x000000000013dc83: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000114ec6: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000101933: add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x63], cl; and byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d849f: add dword ptr [rax], eax; add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x000000000002c139: add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x0000000000102375: add dword ptr [rax], eax; add byte ptr [rcx + 0x63482c53], cl; ret 0x2de9; 
0x00000000000d9d5c: add dword ptr [rax], eax; add byte ptr [rcx + 1], al; ret 0x8944; 
0x0000000000160962: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x00000000000438ec: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x000000000015d1c6: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x0000000000092ec1: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000000f2570: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], al; ret 0x3941; 
0x0000000000113849: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], al; ret 0x8341; 
0x00000000000e8a73: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], al; ret; 
0x000000000014a923: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret 0xb43; 
0x0000000000194b90: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000041787: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret 0x4c01; 
0x000000000006ea49: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret 0x4904; 
0x000000000006ea60: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000a45c7: add dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret; 
0x00000000000dc0a6: add dword ptr [rax], eax; add byte ptr [rcx], al; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x0000000000102191: add dword ptr [rax], eax; add byte ptr [rcx], bh; ret 0x1874; 
0x00000000000db0b4: add dword ptr [rax], eax; add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x0000000000135a1a: add dword ptr [rax], eax; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000bb9e0: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x00000000000295e2: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x0000000000090388: add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x000000000011f2e9: add dword ptr [rax], eax; add byte ptr [rdx + 8], bh; syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x00000000000b395f: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000184a6c: add dword ptr [rax], eax; add ch, al; std; xlatb; ret 0xc085; 
0x0000000000184a60: add dword ptr [rax], eax; add ch, al; std; xlatb; ret; 
0x00000000000d123d: add dword ptr [rax], eax; add cl, al; stc; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000013dac4: add dword ptr [rax], eax; add cl, ch; ret 0xfffc; 
0x0000000000190c25: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x0000000000190c32: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x0000000000190c3f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000190bf7: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000190c04: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000190c11: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000137398: add dword ptr [rax], eax; add dh, dh; ret 0xf04; 
0x0000000000052ac9: add dword ptr [rax], eax; add eax, 0xfd8ee800; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000009f665: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000009f0f2: add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000054336: add dword ptr [rax], eax; jne 0x54330; pop rbx; ret; 
0x00000000000a05a7: add dword ptr [rax], eax; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x00000000000bdf8b: add dword ptr [rax], eax; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f0eb: add dword ptr [rax], eax; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a09f9: add dword ptr [rax], eax; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0689: add dword ptr [rax], eax; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0529: add dword ptr [rax], eax; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000bcd5c: add dword ptr [rax], eax; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x000000000009f21b: add dword ptr [rax], eax; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x00000000000a073b: add dword ptr [rax], eax; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x000000000009f13e: add dword ptr [rax], eax; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000017ff18: add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181821: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000e4f95: add dword ptr [rax], eax; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000001817ed: add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000048149: add dword ptr [rax], eax; mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000001461b9: add dword ptr [rax], eax; movzx eax, byte ptr [rdi]; add eax, ecx; sub rdx, 1; jne 0x146148; ret; 
0x0000000000048114: add dword ptr [rax], eax; ret; 
0x00000000001899e7: add dword ptr [rax], eax; vzeroupper; ret; 
0x000000000009c1fb: add dword ptr [rax], ecx; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000000a8732: add dword ptr [rax], edi; ret 0xf41; 
0x00000000000a86e2: add dword ptr [rax], edi; retf 0xe975; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000134866: add dword ptr [rax], esp; je 0x1347e6; mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x0000000000028236: add dword ptr [rax], r8d; add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; ret; 
0x0000000000113848: add dword ptr [rax], r8d; add byte ptr [rcx - 0x77], al; ret 0x8341; 
0x000000000009f701: add dword ptr [rax], r8d; cmovne rax, rdx; ret; 
0x000000000009c1fa: add dword ptr [rax], r9d; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000087e9b: add dword ptr [rbp + 0x12], esi; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000bb847: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x00000000000bb6f7: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000a6752: add dword ptr [rbp + 0x19], 0; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000129560: add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x00000000000a45fe: add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x4105; 
0x00000000000a5e06: add dword ptr [rbp + 0x19], ecx; ror byte ptr [rcx - 0x7d], cl; ret 0x8806; 
0x000000000017de8b: add dword ptr [rbp + 0x32], esi; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000012796e: add dword ptr [rbp + 0x38], ebx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000129567: add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000013f077: add dword ptr [rbp + 0x45ac74c9], eax; cmp ebx, ecx; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x000000000010dbee: add dword ptr [rbp + 0x47], esi; mov eax, 0x10c; syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000013c328: add dword ptr [rbp + rcx - 0x7b], esi; sal byte ptr [rbp + 0x19], 0x44; mov eax, eax; ret; 
0x00000000000d6c9f: add dword ptr [rbp + rcx*4 + 0x14], eax; ret; 
0x00000000000a13f3: add dword ptr [rbp - 0x16], esi; ret; 
0x000000000005562b: add dword ptr [rbp - 0x1e], esi; mov eax, 1; ret; 
0x0000000000115f8c: add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000ca8cb: add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x000000000013c444: add dword ptr [rbp - 0x76fdefbc], ecx; ret 0x8041; 
0x000000000013c4e3: add dword ptr [rbp - 0x76fdefbc], ecx; ret 0xc639; 
0x000000000013efa9: add dword ptr [rbp - 0x77], eax; ret 0x394c; 
0x00000000001461c3: add dword ptr [rbp - 0x7e], esi; ret; 
0x00000000000974e0: add dword ptr [rbx + 0x154dc905], ecx; add byte ptr [rcx], bh; ret 0xa7e; 
0x000000000016dd32: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000008d4e5: add dword ptr [rbx + 0x18], ebp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f88f3: add dword ptr [rbx + 0x1be01ea], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x8f0f; 
0x00000000000f8753: add dword ptr [rbx + 0x1be01ea], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x00000000001579a0: add dword ptr [rbx + 0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a6b86: add dword ptr [rbx + 0x294803e0], eax; ret 0x148; 
0x00000000000a33f4: add dword ptr [rbx + 0x294803e0], eax; ret 0x14c; 
0x00000000000f122e: add dword ptr [rbx + 0x294803e1], eax; retf 0x14c; ret 0x93e9; 
0x0000000000127904: add dword ptr [rbx + 0x38], ebp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046ada: add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000de23e: add dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x00000000000edf68: add dword ptr [rbx + 0x634801ea], eax; ret; 
0x000000000011a565: add dword ptr [rbx + 0x94901e0], eax; ret; 
0x0000000000117d53: add dword ptr [rbx + 0xd], edi; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000bc450: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x518d; 
0x000000000006a71c: add dword ptr [rbx - 0x64f7b], ecx; dec dword ptr [rax - 0x7d]; ret; 
0x000000000008087c: add dword ptr [rbx - 0x77ccf18], eax; or dword ptr [rdi], ecx; xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x000000000003e24e: add dword ptr [rbx - 0x7bf0fd08], eax; ret 0x1d; 
0x00000000000e6ee3: add dword ptr [rbx - 0x7cb7fb37], eax; ret 0xe901; 
0x0000000000137391: add dword ptr [rbx - 0x7cf0f706], eax; add dword ptr gs:[rax], eax; add dh, dh; ret 0xf04; 
0x0000000000119075: add dword ptr [rbx], ebp; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec3e7: add dword ptr [rbx], edi; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000e967e: add dword ptr [rcx + 0x105ea715], ecx; add cl, ch; retf 0xfff7; jmp qword ptr [rsi + 0xf]; 
0x0000000000094f11: add dword ptr [rcx + 0x21], ecx; ret 0x8d4d; 
0x000000000017ab51: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a66: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000000eef6e: add dword ptr [rcx + 0x39], eax; ret 0xec7f; 
0x00000000000a3263: add dword ptr [rcx + 0x39], ecx; ret 0x2774; 
0x00000000000a31e3: add dword ptr [rcx + 0x39], ecx; ret 0x2f74; 
0x00000000001215fd: add dword ptr [rcx + 0x39], ecx; ret 0x4f73; 
0x00000000000a31a3: add dword ptr [rcx + 0x39], ecx; ret 0x840f; 
0x00000000000edb12: add dword ptr [rcx + 0x39], ecx; ret 0xe877; 
0x00000000000a0b76: add dword ptr [rcx + 0x39], ecx; ret; 
0x000000000017ab31: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a46: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000017ab21: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a26: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000a2e45: add dword ptr [rcx + 0x63], ecx; rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x000000000013d9fd: add dword ptr [rcx + 0xf], eax; xchg edi, eax; ret 0xd231; 
0x0000000000157d69: add dword ptr [rcx + 0xf], eax; xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000010534b: add dword ptr [rcx + 0xf], ecx; mov esi, 0x89480045; ret 0xb70f; 
0x000000000012fcfa: add dword ptr [rcx + 0xfff9], eax; add byte ptr [rcx - 0x77], al; ror dword ptr [rdi], 0x97; ret 0x840; 
0x000000000011a568: add dword ptr [rcx + 9], ecx; ret; 
0x00000000000df4d6: add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000091e44: add dword ptr [rcx + rbp - 0x77], esi; ret 0xff3; 
0x000000000015e114: add dword ptr [rcx + rcx*4 - 0x20], eax; pop rbp; pop r12; pop r13; ret; 
0x00000000001258fb: add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x00000000001379ff: add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbp; ret; 
0x0000000000085682: add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000061058: add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000122c42: add dword ptr [rcx + rcx*4 - 0x40], eax; ret; 
0x000000000013c5d8: add dword ptr [rcx + rcx*4 - 0x40], ecx; mov byte ptr [r8 + 2], 0; ret; 
0x000000000015cc7d: add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000012dceb: add dword ptr [rcx + rcx*8 - 0x76b7578b], eax; clc; ret; 
0x00000000000a88cb: add dword ptr [rcx + rcx*8 - 0xec6f78c], eax; jne 0xa88c0; ret; 
0x00000000000dd813: add dword ptr [rcx + rdi - 0x1d], ecx; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x000000000012dbdb: add dword ptr [rcx + rdi - 0x3e], ecx; jne 0x12dbc8; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012ed03: add dword ptr [rcx + rdi - 0x3e], ecx; jne 0x12ecf0; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x0000000000149304: add dword ptr [rcx + rdx + 0x48], esi; add esp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000013b03a: add dword ptr [rcx - 0x39], ecx; ret 0xffff; 
0x00000000000479c8: add dword ptr [rcx - 0x42], edi; xor eax, eax; ret; 
0x00000000000eb5aa: add dword ptr [rcx - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000b3a16: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x0000000000178601: add dword ptr [rcx - 0x776b7fe], ecx; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000002c335: add dword ptr [rcx - 0x77], eax; ret 0x8341; 
0x0000000000066693: add dword ptr [rcx - 0x77], ecx; or byte ptr [r15 + r9 - 0x4a], r8b; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000863ff: add dword ptr [rcx - 0x77], ecx; push rax; sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000007457d: add dword ptr [rcx - 0x77], ecx; push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000570b0: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000001215d3: add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000496b0: add dword ptr [rcx - 0x77], ecx; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000002fda6: add dword ptr [rcx - 0x77cf7bd], ecx; std; je 0x2fdc8; pop rbx; ret; 
0x0000000000053210: add dword ptr [rcx - 0x78], eax; add ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000a58c4: add dword ptr [rcx - 0x7c2de63f], ecx; ret 0x8305; 
0x00000000000a3882: add dword ptr [rcx - 0x7d], eax; ret 0x4801; 
0x000000000013f894: add dword ptr [rcx - 0x7d], ecx; mov byte ptr [rcx], 0x3c; and byte ptr [rbx + rsi*8 + 0x3c], dh; or dword ptr [rdi + rbp*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x000000000013c45c: add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x0000000000128756: add dword ptr [rcx - 0x7d], ecx; ret 0xe901; 
0x000000000002a03b: add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000013f893: add dword ptr [rcx - 0x7d], r9d; mov byte ptr [rcx], 0x3c; and byte ptr [rbx + rsi*8 + 0x3c], dh; or dword ptr [rdi + rbp*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x00000000000eb5ae: add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000fd009: add dword ptr [rcx - 0x80], eax; call ptr [rdi + 0xf]; xchg esp, eax; ret 0xd009; 
0x00000000001930b3: add dword ptr [rcx - 9], eax; ret; 
0x00000000000cf54b: add dword ptr [rcx], eax; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x000000000013bd01: add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x0000000000192c5f: add dword ptr [rcx], eax; add dword ptr [rcx], eax; add dword ptr [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x0000000000192c61: add dword ptr [rcx], eax; add dword ptr [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x0000000000192c63: add dword ptr [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x000000000007b325: add dword ptr [rcx], eax; ret; 
0x00000000000ac814: add dword ptr [rcx], ebp; ror byte ptr [rdi], 1; test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x00000000000e4fd1: add dword ptr [rcx], ebx; push rsp; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000eeed3: add dword ptr [rcx], edi; ret 0xc775; 
0x00000000000eeb85: add dword ptr [rcx], edi; ret 0xee7f; 
0x00000000000f0b0b: add dword ptr [rcx], edi; ret; 
0x00000000000bc046: add dword ptr [rdi + 0x15], esi; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000bbc07: add dword ptr [rdi + 0x26], esi; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000157904: add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157914: add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000018bc34: add dword ptr [rdi + 0x2c], esi; jb 0x18bc3b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000010d4b0: add dword ptr [rdi + 0x2d], esi; mov eax, 4; syscall; cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x000000000010d570: add dword ptr [rdi + 0x2d], esi; mov eax, 6; syscall; cmp rax, -0x1000; ja 0x10d588; ret; 
0x000000000010d50f: add dword ptr [rdi + 0x2e], esi; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x10d528; ret; 
0x000000000010d9b5: add dword ptr [rdi + 0x30], esi; mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x0000000000190afc: add dword ptr [rdi + 0x3a], esi; jb 0x190b03; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018b747: add dword ptr [rdi + 0x3b], esi; jb 0x18b751; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001904d7: add dword ptr [rdi + 0x53], esi; jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000117c12: add dword ptr [rdi + 1], edi; ret; 
0x0000000000062fb9: add dword ptr [rdi + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec813: add dword ptr [rdi + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000dfc0b: add dword ptr [rdi + 6], ecx; add byte ptr [rbx + rcx*4 + 5], cl; pop rdx; ret 0x10; 
0x000000000014158e: add dword ptr [rdi + rbp - 9], esi; ret 0; 
0x000000000012b9e6: add dword ptr [rdi + rbx*2 + 0x31], esi; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000094d26: add dword ptr [rdi + rcx - 0x7b], esi; div byte ptr [rbp + 0x13]; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x000000000012d886: add dword ptr [rdi + rdx - 0xa], esi; jge 0x12d88f; lea rax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012d946: add dword ptr [rdi + rdx - 0xa], esi; jge 0x12d94f; lea rax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012da06: add dword ptr [rdi + rdx - 0xa], esi; jge 0x12da0f; lea rax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x00000000000a04b6: add dword ptr [rdi + rdx - 0xa], esi; jge 0xa04bf; lea rax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a0616: add dword ptr [rdi + rdx - 0xa], esi; jge 0xa061f; lea rax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a0986: add dword ptr [rdi + rdx - 0xa], esi; jge 0xa098f; lea rax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a2224: add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043f34: add dword ptr [rdi], ecx; adc dword ptr [rdi], eax; ret; 
0x00000000000edba2: add dword ptr [rdi], ecx; lahf; ret 0xd189; 
0x00000000000341a9: add dword ptr [rdi], ecx; mov bh, 0xc0; ret; 
0x00000000000a884b: add dword ptr [rdi], ecx; mov esi, 0xd139070c; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a8813: add dword ptr [rdi], ecx; mov esi, 0xf2390714; je 0xa8810; ret; 
0x00000000000bc453: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x00000000000bc467: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xcfe9; 
0x00000000000bc459: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000000f0afe: add dword ptr [rdi], ecx; test bl, bh; add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x0000000000117cb1: add dword ptr [rdi], ecx; test byte ptr [rcx], bl; add al, byte ptr [rax]; add bh, dh; ret; 
0x0000000000097285: add dword ptr [rdi], ecx; test byte ptr [rsi + rax - 0x72b70000], dl; dec dword ptr [r9 - 0x7b]; ret 0x850f; 
0x0000000000155a65: add dword ptr [rdi], ecx; test dword ptr [rax + rax + 0x1b80000], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x00000000000f7bc9: add dword ptr [rdi], ecx; test dword ptr [rax], edx; or eax, dword ptr [rax]; add byte ptr [rbp - 0x76db8b40], al; ret 0xe283; 
0x00000000001785ae: add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000018a57f: add dword ptr [rdi], ecx; test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018afe7: add dword ptr [rdi], ecx; test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b2b3: add dword ptr [rdi], ecx; test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017c94e: add dword ptr [rdi], ecx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000018b613: add dword ptr [rdi], ecx; xchg dword ptr [rsi + 0xffffffc], esi; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000004b1b1: add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc220; 
0x0000000000056727: add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8948; 
0x000000000013c1a9: add dword ptr [rdi], ecx; xchg esi, eax; ret 0x8341; 
0x0000000000051103: add dword ptr [rdi], ecx; xchg esp, eax; ret 0x2040; 
0x0000000000053940: add dword ptr [rdi], ecx; xchg esp, eax; ret 0x7c8b; 
0x0000000000103f92: add dword ptr [rdi], ecx; xchg esp, eax; ret 0xd009; 
0x0000000000103f8b: add dword ptr [rdi], ecx; xchg esp, eax; rol byte ptr [rcx - 0x7d], 0xf8; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xd009; 
0x00000000001866b6: add dword ptr [rdx + 0x10d8d48], edx; add qword ptr [rax], r8; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000bc73f: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x00000000000b39d4: add dword ptr [rdx + 0x48028801], ecx; mov eax, edi; ret; 
0x000000000014c2e3: add dword ptr [rdx + 0xa], ecx; add al, ch; test byte ptr [rax - 0x13], ah; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000102a83: add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x0000000000190230: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000063030: add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x000000000018fb61: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000121d06: add dword ptr [rdx + rax*2], 1; ret; 
0x000000000018faba: add dword ptr [rdx - 0x2f], esp; jl 0x18fb07; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000000bcb3a: add dword ptr [rdx - 0x75], eax; or al, 0x87; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x00000000001901c7: add dword ptr [rdx - 0xf], esp; jl 0x190214; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190307: add dword ptr [rdx - 0xf], esp; jl 0x190354; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000013c242: add dword ptr [rdx], eax; pop rbx; ret; 
0x000000000013c241: add dword ptr [rdx], r8d; pop rbx; ret; 
0x00000000000938a6: add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000046c1d: add dword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0894: add dword ptr [rip + 0x450f4800], ecx; ret 0xfc3; 
0x0000000000043b86: add dword ptr [rsi + 0x17], esi; mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043bd6: add dword ptr [rsi + 0x17], esi; mov rax, 0xfffffffffffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000b39b2: add dword ptr [rsi + 0xf], esp; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3aa8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b08: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3965: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x00000000000b3b28: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b48: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b68: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6739: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000043f2b: add dword ptr [rsi + 0xf], esp; fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001417af: add dword ptr [rsi + rbp - 9], esi; ret 0; 
0x0000000000116eb5: add dword ptr [rsi - 0x10], esi; cmp al, 0x20; je 0x116ea8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x000000000011306b: add dword ptr [rsi - 0x2708fff3], ecx; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000b39e7: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000b39f7: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000148041: add dword ptr [rsp + rcx + 0x48], esi; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009f0f1: add dword ptr cs:[rax], eax; cmovne rax, rdx; ret; 
0x0000000000187f87: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000009f6a4: add dword ptr es:[rax], eax; cmove rax, rdx; ret; 
0x0000000000137397: add dword ptr gs:[rax], eax; add dh, dh; ret 0xf04; 
0x000000000013b3ea: add eax, 0x10; ret; 
0x0000000000183885: add eax, 0x10; sub edx, esi; cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x00000000000de12b: add eax, 0x10dd40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd14a: add eax, 0x10ed21; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bcd59: add eax, 0x112c2; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000bcd12: add eax, 0x11389; cmove rax, rdx; ret; 
0x00000000000bdf88: add eax, 0x11923; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000d1dbd: add eax, 0x11a086; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000bc852: add eax, 0x11b79; cmove rax, rdx; ret; 
0x00000000000d0172: add eax, 0x11bcf9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0152: add eax, 0x11bd19; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d0052: add eax, 0x11be19; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0132: add eax, 0x11ef69; add rsp, 8; ret; 
0x000000000009f812: add eax, 0x120a9; cmove rax, rdx; ret; 
0x000000000009f13b: add eax, 0x12340; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000009f662: add eax, 0x12559; cmove rax, rdx; ret; 
0x00000000000bca02: add eax, 0x12699; cmove rax, rdx; ret; 
0x000000000009f6a2: add eax, 0x126b9; cmove rax, rdx; ret; 
0x00000000000bcaf2: add eax, 0x12879; cmove rax, rdx; ret; 
0x00000000000bc878: add eax, 0x12933; cmovne rax, rdx; ret; 
0x00000000000bc812: add eax, 0x129c9; cmove rax, rdx; ret; 
0x00000000000bc962: add eax, 0x12f89; cmove rax, rdx; ret; 
0x000000000009f826: add eax, 0x14c635; lea rdx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f236: add eax, 0x14cc25; lea rdx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e956: add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009f8a5: add eax, 0x14f69e; add rsp, 8; ret; 
0x000000000009f89e: add eax, 0x14f6bd; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f867: add eax, 0x14f6dc; ret; 
0x000000000009f860: add eax, 0x14f6fb; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009d710: add eax, 0x151793; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x000000000009f855: add eax, 0x151c36; test eax, eax; jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009a0ca: add eax, 0x151e11; mov qword ptr [rax], rdi; ret; 
0x000000000009a0c0: add eax, 0x151f1b; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009942f: add eax, 0x152a3c; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000098092: add eax, 0x153dd9; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000009a05f: add eax, 0x154e10; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000961d0: add eax, 0x155d0b; mov qword ptr [rax], rdx; ret; 
0x00000000000961c6: add eax, 0x155e15; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000960bb: add eax, 0x156ac0; add rsp, 0x10; pop rbp; ret; 
0x0000000000095233: add eax, 0x157074; ret; 
0x000000000009520d: add eax, 0x15707e; ret; 
0x0000000000095229: add eax, 0x157082; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951e4: add eax, 0x15709f; ret; 
0x0000000000095202: add eax, 0x1570a9; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951c4: add eax, 0x1570b7; ret; 
0x00000000000951d9: add eax, 0x1570d2; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b9: add eax, 0x1570f2; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095195: add eax, 0x15711e; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000094eaa: add eax, 0x157439; ret; 
0x0000000000094e93: add eax, 0x157448; ret; 
0x0000000000094e3a: add eax, 0x157459; ret; 
0x0000000000094e2a: add eax, 0x157471; ret; 
0x000000000012d952: add eax, 0x158d4800; add eax, 0x480005dd; cmove eax, edx; ret; 
0x000000000012da12: add eax, 0x158d4800; and eax, 0x480005dc; cmove eax, edx; ret; 
0x0000000000095277: add eax, 0x159c24; ret; 
0x0000000000095249: add eax, 0x159c3e; ret; 
0x0000000000093836: add eax, 0x159d65; ret; 
0x0000000000093941: add eax, 0x15ae7e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000094728: add eax, 0x15cd5f; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000094721: add eax, 0x15cd7a; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x000000000008d342: add eax, 0x15eb29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeba: add eax, 0x160fb1; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000a0738: add eax, 0x162d3; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x0000000000084732: add eax, 0x167739; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d424e: add eax, 0x16d; ret; 
0x000000000009f218: add eax, 0x17703; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x0000000000042900: add eax, 0x179e6b; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x0000000000042908: add eax, 0x179ea3; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x000000000004263f: add eax, 0x17a11c; por xmm0, xmm1; ret; 
0x0000000000042402: add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423fb: add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d6: add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x00000000000423dd: add eax, 0x17a35e; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000041ef7: add eax, 0x17a7f4; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000420f0: add eax, 0x17abfb; ret; 
0x0000000000042081: add eax, 0x17ac5a; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x000000000004205b: add eax, 0x17ac88; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000042455: add eax, 0x17af36; ret; 
0x000000000004240a: add eax, 0x17af79; ret; 
0x00000000000423e5: add eax, 0x17afa2; ret; 
0x00000000000328c2: add eax, 0x181ab6; ret; 
0x00000000000328a6: add eax, 0x181ad2; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000042b96: add eax, 0x18c48348; ret; 
0x00000000000241a6: add eax, 0x18fcf3; ret; 
0x00000000000241b6: add eax, 0x191abc; ret; 
0x00000000000529fa: add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000529f3: add eax, 0x19bc6d; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000048332: add eax, 0x1a3b39; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000048302: add eax, 0x1a3b69; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000047c5a: add eax, 0x1a4211; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004407b: add eax, 0x1a7df0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f3b: add eax, 0x1a7f30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df2: add eax, 0x1a8079; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000440f4: add eax, 0x1a80af; mov eax, edx; ret; 
0x00000000000440a5: add eax, 0x1a80fe; ret; 
0x0000000000044095: add eax, 0x1a8112; ret; 
0x0000000000043d32: add eax, 0x1a8139; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c56: add eax, 0x1a8215; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000043c3a: add eax, 0x1a8231; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bf2: add eax, 0x1a8279; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ba2: add eax, 0x1a82c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b53: add eax, 0x1a8318; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043af4: add eax, 0x1a8377; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009f0e8: add eax, 0x1a8a3; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000432a2: add eax, 0x1a8bc9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043062: add eax, 0x1a8e09; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f22: add eax, 0x1a8f49; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000047f86: add eax, 0x1a937b; add rsp, 8; ret; 
0x0000000000042543: add eax, 0x1a9928; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004221d: add eax, 0x1a9c4e; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004757e: add eax, 0x1a9d69; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000041e5c: add eax, 0x1aa00f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000412b2: add eax, 0x1aabb9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000041252: add eax, 0x1aac19; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000a030b: add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x00000000000a09f6: add eax, 0x1b1b5; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0686: add eax, 0x1b505; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0526: add eax, 0x1b685; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000344c6: add eax, 0x1b7a1d; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e6: add eax, 0x1b7a3d; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d56: add eax, 0x1b806d; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000033d12: add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x00000000000328e6: add eax, 0x1b94dd; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000a05ab: add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000003284e: add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000002f5a6: add eax, 0x1be3bd; ret; 
0x000000000009faf8: add eax, 0x1bef3; cmovne rax, rdx; ret; 
0x000000000009f838: add eax, 0x1c103; cmovne rax, rdx; ret; 
0x000000000009f248: add eax, 0x1c643; cmovne rax, rdx; ret; 
0x0000000000026f59: add eax, 0x1c69f6; test eax, eax; je 0x26f68; ret; 
0x00000000000246ea: add eax, 0x1c7781; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000024406: add eax, 0x1c7a65; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab6: add eax, 0x1cb6ed; ret; 
0x0000000000025aa6: add eax, 0x1cb70d; ret; 
0x0000000000023a51: add eax, 0x1cd8d2; ret; 
0x00000000000de288: add eax, 0x1f0fb4eb; add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000019888f: add eax, 0x1f6ae800; clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x553de], 0; ret; 
0x000000000003454a: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000018d175: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887f5: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018473a: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001156ca: add eax, 0x2404c641; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x000000000019726f: add eax, 0x2610c; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x0000000000115894: add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000197277: add eax, 0x27418; ret; 
0x00000000000b3a24: add eax, 0x289018b; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000047444: add eax, 0x28c48348; ret; 
0x000000000011f13c: add eax, 0x2c0d8b48; int 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000178634: add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x000000000015d02f: add eax, 0x2e6690eb; nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x00000000001983a3: add eax, 0x2e66fff8; nop dword ptr [rax + rax]; ret; 
0x000000000017c9e5: add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000a8be2: add eax, 0x3819; cmove rax, rdx; ret; 
0x000000000012da30: add eax, 0x3842b; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8b0: add eax, 0x385cb; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000013666d: add eax, 0x38c48348; ret; 
0x000000000002a5a9: add eax, 0x39480000; ret; 
0x00000000000a3272: add eax, 0x3949eb74; ret 0x1674; 
0x000000000012d970: add eax, 0x3aeeb; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x0000000000162145: add eax, 0x3d54e800; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000015d232: add eax, 0x3f98366; jbe 0x15d240; ret; 
0x000000000018d195: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188815: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018475a: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000012cf90: add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x000000000012dae3: add eax, 0x440f4800; ret 0x66c3; 
0x000000000012d899: add eax, 0x440f4800; ret 0xf6c3; 
0x0000000000048105: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048154: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x00000000000a0687: add eax, 0x480001b5; lea edx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x000000000012d957: add eax, 0x480005dd; cmove eax, edx; ret; 
0x0000000000115b97: add eax, 0x48000d9b; lea eax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x000000000017ab68: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x0000000000176818: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000178688: add eax, 0x48054289; mov eax, edi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000016d9b3: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9406: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f26: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b7846: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb066: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x0000000000123270: add eax, 0x48104623; lea eax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000018fe1f: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000001903a4: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000155c97: add eax, 0x48c48348; ret; 
0x000000000012da77: add eax, 0x48fff8e1; lea edx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000017870d: add eax, 0x49f88948; sub eax, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017868b: add eax, 0x49f88948; sub eax, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000017abe9: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000176859: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000178709: add eax, 0x5428948; mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x0000000000178630: add eax, 0x54a8d48; jne 0x178900; ret; 
0x000000000017c9e1: add eax, 0x54a8d48; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000198899: add eax, 0x553de; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001983fd: add eax, 0x5556a; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198bce: add eax, 0x56559; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000198c34: add eax, 0x5692b; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198d07: add eax, 0x57160; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000198e39: add eax, 0x57bde; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000b774a: add eax, 0x57f8d48; jne 0xb7f80; ret; 
0x00000000000b8e2e: add eax, 0x57f8d48; jne 0xb97d0; ret; 
0x0000000000198aa4: add eax, 0x5b050f00; ret; 
0x0000000000134870: add eax, 0x5bf08948; ret; 
0x000000000012ee8b: add eax, 0x5cc30; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000106fb8: add eax, 0x5d000000; pop r12; ret; 
0x0000000000198dd4: add eax, 0x5d050f00; ret; 
0x0000000000153f41: add eax, 0x5d5b0000; pop r12; pop r13; ret; 
0x000000000012da0f: add eax, 0x5dc9c; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d94f: add eax, 0x5dd7c; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d88f: add eax, 0x5de3c; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012dae0: add eax, 0x5e06b; cmove rax, rdx; ret; 
0x0000000000184b93: add eax, 0x60; add rax, rdi; ret; 
0x000000000018d1e1: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188861: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018477a: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000012da5a: add eax, 0x629d1; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d99a: add eax, 0x62ab1; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8da: add eax, 0x62b71; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db1a: add eax, 0x62ec1; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x000000000017e3f6: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017ca0f: add eax, 0x6e88349; lea rcx, [rdx + 6]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b8e4f: add eax, 0x6e88349; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x000000000005a9de: add eax, 0x72b90000; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0xd231; 
0x00000000000c9fd6: add eax, 0x74db8500; sbb al, 0x39; ret; 
0x00000000000c9ee1: add eax, 0x74db8500; sbb dword ptr [rcx], edi; ret; 
0x00000000001539e6: add eax, 0x78c48348; ret; 
0x00000000000f2ade: add eax, 0x7b8b4828; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b774e: add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x000000000017e71d: add eax, 0x83480000; ret 0x4910; 
0x0000000000181271: add eax, 0x83480000; ret 0xe910; 
0x000000000017e671: add eax, 0x83480000; ret 0xeb10; 
0x000000000006f620: add eax, 0x83480000; ret; 
0x000000000017ab6b: add eax, 0x8428d48; ret; 
0x00000000000a0798: add eax, 0x86f3; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x0000000000163436: add eax, 0x88a35; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162dd6: add eax, 0x89095; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162db6: add eax, 0x890b5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d76: add eax, 0x890f5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d56: add eax, 0x89115; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d36: add eax, 0x89135; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d16: add eax, 0x89155; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000042fdc: add eax, 0x8944c689; ret 0xeab8; 
0x0000000000030ad3: add eax, 0x89480000; ret 0x2948; 
0x00000000000a8e74: add eax, 0x89480000; ret 0x51e8; 
0x00000000000d44e5: add eax, 0x89480000; ret; 
0x000000000008e2f7: add eax, 0x89490000; call 0xffffffffcef3f68c; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000c9476: add eax, 0x89490000; ret; 
0x0000000000160cc6: add eax, 0x8b1a5; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000160ad2: add eax, 0x8b399; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001984e2: add eax, 0x8b486400; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007b9a9: add eax, 0x8b4c0000; movsd dword ptr [rdi], dword ptr [rsi]; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x000000000011acbb: add eax, 0x8b4d0000; adc byte ptr [r13 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 4; 
0x00000000000e2eca: add eax, 0x8c48348; ret; 
0x0000000000160da8: add eax, 0x8e0eb; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x000000000015ca46: add eax, 0x8f425; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000d05e7: add eax, 0x8f5cba49; ret 0x28f5; 
0x00000000000319bb: add eax, 0x90660000; ret; 
0x0000000000120dc4: add eax, 0x918b7; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015d370: add eax, 0x93dc7; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000015c5ff: add eax, 0x9497c; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009f7c8: add eax, 0x9733; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f6f8: add eax, 0x9743; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000153176: add eax, 0x98c25; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000b8e32: add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x0000000000153271: add eax, 0x9dba6; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000014e5c7: add eax, 0xa1e88beb; adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x00000000000a1c82: add eax, 0xa569; cmove rax, rdx; ret; 
0x0000000000146faa: add eax, 0xa9bcd; add rsp, 8; ret; 
0x0000000000146f95: add eax, 0xa9be2; test eax, eax; je 0x146fa0; ret; 
0x00000000001463b4: add eax, 0xaa747; ret; 
0x0000000000146388: add eax, 0xaa773; add rsp, 8; ret; 
0x0000000000141106: add eax, 0xaad1d; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x00000000001411f6: add eax, 0xaadf5; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000142f76: add eax, 0xadaa5; test rax, rax; jne 0x142f88; ret; 
0x0000000000141b3e: add eax, 0xaeedd; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x000000000009f762: add eax, 0xaef9; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x0000000000140cb9: add eax, 0xafb06; test eax, eax; je 0x140cc8; ret; 
0x0000000000138524: add eax, 0xb53b7; add rsp, 8; ret; 
0x0000000000042fd2: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000013bcf1: add eax, 0xba; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000a0402: add eax, 0xbab9; cmove rax, rdx; ret; 
0x000000000012fe86: add eax, 0xbbfcd; add rax, qword ptr fs:[0]; ret; 
0x000000000012f412: add eax, 0xbca59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120a2c: add eax, 0xbd000800; add eax, 0xeb000000; ret; 
0x000000000018e5aa: add eax, 0xc0310000; ret; 
0x000000000012d01d: add eax, 0xc2e56; pop rbp; ret; 
0x000000000017abed: add eax, 0xc428d48; ret; 
0x00000000000b85ad: add eax, 0xc478d48; ret; 
0x00000000000b8f3d: add eax, 0xc478d48; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000a09b0: add eax, 0xc54db; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a0640: add eax, 0xc582b; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04e0: add eax, 0xc838b; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000001228b6: add eax, 0xc95a5; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000121ca1: add eax, 0xca6b6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c78: add eax, 0xca6df; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c47: add eax, 0xca710; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000121c21: add eax, 0xca736; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121875: add eax, 0xcaae2; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000d422f: add eax, 0xcac1fa89; add al, byte ptr [rcx - 0x70a3d706]; add dh, byte ptr [rsi + 3]; ret; 
0x00000000001200a6: add eax, 0xcbdc5; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f8e2: add eax, 0xcc589; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8a2: add eax, 0xcc5c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fd2: add eax, 0xcdaa1; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc2: add eax, 0xcdab1; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000121cf7: add eax, 0xcdd54; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000bcdfb: add eax, 0xcecd0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000011d012: add eax, 0xcee59; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000bcd7a: add eax, 0xceef1; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000011c4ea: add eax, 0xcf981; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012158a: add eax, 0xd0858b48; idiv edi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000001197d2: add eax, 0xd2699; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011979d: add eax, 0xd26ce; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011978b: add eax, 0xd26e0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000118f5f: add eax, 0xd2f0c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001188fa: add eax, 0xd3571; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118705: add eax, 0xd3c3e; test edi, edi; je 0x118714; mov dword ptr [rip + 0xd3c34], edi; ret; 
0x000000000011914b: add eax, 0xd46e0; pop rcx; pop rbp; pop r12; pop r13; ret; 
0x00000000000b940d: add eax, 0xd478d48; ret; 
0x0000000000118bf6: add eax, 0xd4c2d; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000116d49: add eax, 0xd5122; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000001191d4: add eax, 0xd66e7; add rsp, 0x18; ret; 
0x0000000000115772: add eax, 0xd66f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011574a: add eax, 0xd6721; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000119184: add eax, 0xd6777; pop r12; pop r13; ret; 
0x0000000000115606: add eax, 0xd6865; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000118c8c: add eax, 0xd6bdf; add rsp, 8; ret; 
0x0000000000118c31: add eax, 0xd6c5a; pop rbp; pop r12; pop r13; ret; 
0x0000000000114c36: add eax, 0xd7225; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x0000000000114386: add eax, 0xd7ae5; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142ca: add eax, 0xd7ba1; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001142b6: add eax, 0xd7c0d; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000117c0b: add eax, 0xd7c40; cmp eax, 1; jg 0x117c16; ret; 
0x00000000001176ef: add eax, 0xd809c; add rsp, 8; ret; 
0x00000000001176c8: add eax, 0xd80bf; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000011767e: add eax, 0xd810d; mov rax, r8; add rsp, 8; ret; 
0x000000000011764e: add eax, 0xd813d; mov rax, r8; ret; 
0x000000000011375d: add eax, 0xd870e; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001136fc: add eax, 0xd876f; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000116ecf: add eax, 0xd889b; and ecx, dword ptr [rcx + rcx*4 - 0x40]; mov byte ptr [rsi - 1], 0; ret; 
0x000000000011314a: add eax, 0xd8d21; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000113114: add eax, 0xd8d57; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011292a: add eax, 0xd9541; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001127f2: add eax, 0xd9679; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x0000000000115e9b: add eax, 0xd979c; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000115b9d: add eax, 0xd9ad6; add rsp, 8; ret; 
0x0000000000115b8f: add eax, 0xd9adc; mov qword ptr [rip + 0xd9b05], rax; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000115b96: add eax, 0xd9b05; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000115ae2: add eax, 0xd9b59; mov eax, 1; add rsp, 8; ret; 
0x0000000000112aed: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x0000000000110da2: add eax, 0xdb0c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001989e8: add eax, 0xdb854800; jne 0x1989d0; pop rbx; ret; 
0x000000000010dc3a: add eax, 0xde231; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010dc22: add eax, 0xde249; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dbc6: add eax, 0xde2a5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010d9ea: add eax, 0xde481; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d98a: add eax, 0xde4e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d92a: add eax, 0xde541; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d89f: add eax, 0xde5cc; mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x00000000000b784d: add eax, 0xde88349; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x000000000010d5a2: add eax, 0xde8c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d542: add eax, 0xde929; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4e2: add eax, 0xde989; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d246: add eax, 0xdec15; lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000dd812: add eax, 0xe3394c01; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a046a: add eax, 0xe4851; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a08db: add eax, 0xe560; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a083b: add eax, 0xe5e0; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000a098f: add eax, 0xead4c; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x0000000000120a31: add eax, 0xeb000000; ret; 
0x00000000000a061f: add eax, 0xeb09c; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04bf: add eax, 0xeb21c; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a0590: add eax, 0xeb5cb; cmove rax, rdx; ret; 
0x00000000000fec96: add eax, 0xed31d; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x000000000016dd1a: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000a09da: add eax, 0xefa81; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a066a: add eax, 0xefdd1; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a050a: add eax, 0xeff51; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000d7a28: add eax, 0xf000003; mov bh, 5; fld dword ptr [rax + 0x3941000d]; ret 0x8c0f; 
0x00000000000a05ca: add eax, 0xf0421; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x000000000011fe67: add eax, 0xf7000cc0; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115667: add eax, 0xf7000d68; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010e967: add eax, 0xf7000dd5; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc67: add eax, 0xf7000de2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000102667: add eax, 0xf7000e98; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000016dd23: add eax, 0xf7f0ff3; ret; 
0x00000000000a1cc2: add eax, 0xf9e9; cmove rax, rdx; ret; 
0x000000000012ee8e: add eax, 0xfa834800; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x0000000000052acb: add eax, 0xfd8ee800; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000112d25: add eax, 0xfff0003d; push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x112d38; neg eax; ret; 
0x0000000000112f75: add eax, 0xfff0003d; push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x112f88; neg eax; ret; 
0x000000000012da76: add eax, 0xfff8e105; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000012d9b6: add eax, 0xfff8e1e5; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012d8f6: add eax, 0xfff8e2a5; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012dafb: add eax, 0xfff8e3f0; cmovne rax, rdx; ret; 
0x000000000009d16a: add eax, 0xfffffe71; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d107: add eax, 0xfffffed4; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0fea: add eax, 0xfffffee1; ret; 
0x00000000000d0fda: add eax, 0xfffffef1; add rsp, 0x58; ret; 
0x00000000000d0eca: add eax, 0xfffffef1; ret; 
0x00000000000d0eba: add eax, 0xffffff01; add rsp, 0x58; ret; 
0x000000000010d258: add eax, 0xffffff43; cmove rax, rdx; ret; 
0x0000000000054331: add eax, 1; cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000ec3e5: add eax, 1; cmp eax, dword ptr [rsi + 0x40]; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x0000000000121f71: add eax, 1; mov dword ptr [rdx], eax; ret; 
0x00000000000bcb38: add eax, 1; mov ecx, dword ptr [rdi + r8*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x0000000000121fb2: add eax, 1; mov word ptr [rdx], ax; ret; 
0x00000000000a8811: add eax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x00000000000a06bf: add eax, 1; ret; 
0x00000000000a88c9: add eax, 1; test cl, cl; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000a28d1: add eax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000cfae8: add eax, 2; ret; 
0x00000000000cfb01: add eax, 3; ret; 
0x0000000000157552: add eax, 4; bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157592: add eax, 4; bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bdfb4: add eax, 4; cmp edx, esi; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000001575d5: add eax, 4; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bcc33: add eax, 4; test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x0000000000117679: add eax, 8; mov qword ptr [rip + 0xd810d], rax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117649: add eax, 8; mov qword ptr [rip + 0xd813d], rax; mov rax, r8; ret; 
0x000000000002440d: add eax, dword ptr [0]; ret; 
0x000000000010cba3: add eax, dword ptr [r8]; add dh, dh; ret 0xf20; 
0x00000000000effca: add eax, dword ptr [rax - 0x6bf0a005]; ret 0xd009; 
0x00000000000f9752: add eax, dword ptr [rax]; add al, ch; mov dh, 0x8b; dec dword ptr [rax - 0x77]; ret; 
0x000000000002a97b: add eax, dword ptr [rax]; add bh, dh; ret 0; 
0x000000000013b063: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x00000000000583da: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000015b65b: add eax, dword ptr [rax]; add byte ptr [rax - 0x3f], cl; cli; adc cl, byte ptr [rax + 0x29]; retf 0x148; ret 0x2949; 
0x000000000004af7a: add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x000000000006680d: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x7d]; ret; 
0x0000000000054742: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xbf41; 
0x000000000017c952: add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000017e8bd: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181411: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e8e1: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000012187a: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000dcff8: add eax, dword ptr [rax]; add byte ptr [rax], al; cmovne eax, edx; ret; 
0x00000000000cfb43: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000010e811: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e860; ret; 
0x0000000000113345: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113358; ret; 
0x000000000013a5a7: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; ret; 
0x0000000000094600: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x0000000000029b42: add eax, dword ptr [rax]; add byte ptr [rbx + 0x4be02e0], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000051ec4: add eax, dword ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000105fbd: add eax, dword ptr [rax]; add byte ptr [rbx + 0xe95fe05], cl; add byte ptr [rbx + rcx*4 + 0x1d], al; ret; 
0x000000000002c0ee: add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000023d29: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000ff805: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000192f08: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xc148; 
0x00000000001223aa: add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0x3101; 
0x000000000012acbe: add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x0000000000027be1: add eax, dword ptr [rax]; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000012f9e8: add eax, dword ptr [rax]; add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x0000000000194de7: add eax, dword ptr [rax]; add byte ptr [rdi + rcx - 0x43], cl; ret 0x8349; 
0x00000000000d79e9: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov bh, 5; adc dword ptr [rcx + 0x3941000d], eax; ret 0x8c0f; 
0x00000000000d79f9: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov bh, 5; add eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000000d7a29: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov bh, 5; fld dword ptr [rax + 0x3941000d]; ret 0x8c0f; 
0x0000000000097f95: add eax, dword ptr [rax]; add dh, dh; ret 0xf01; 
0x000000000010cba4: add eax, dword ptr [rax]; add dh, dh; ret 0xf20; 
0x000000000012d8ba: add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000bc134: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000012da33: add eax, dword ptr [rax]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8b3: add eax, dword ptr [rax]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d973: add eax, dword ptr [rax]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a8747: add eax, dword ptr [rax]; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000de127: add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc119: add eax, dword ptr [rax]; ret; 
0x0000000000088041: add eax, dword ptr [rbx + rcx*4]; mov eax, r8d; ret; 
0x00000000000fd006: add eax, dword ptr [rbx - 0x7fbefe20]; call ptr [rdi + 0xf]; xchg esp, eax; ret 0xd009; 
0x00000000001785f9: add eax, dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x00000000000d79ff: add eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x000000000005503f: add eax, dword ptr [rcx + 0x52]; ret; 
0x0000000000028968: add eax, dword ptr [rcx + 0xf]; xchg ebp, eax; ret 0x8d47; 
0x0000000000123369: add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000b395e: add eax, dword ptr [rcx]; add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000010d95f: add eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d970; ret; 
0x00000000000d0e95: add eax, dword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb5: add eax, dword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000015fca3: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x0000000000123111: add eax, dword ptr [rdx + rcx]; ret; 
0x00000000001786f9: add eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x000000000009e920: add eax, dword ptr [rdx]; sub eax, edx; mov rdx, qword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x00000000001157e2: add eax, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000017c9e8: add eax, dword ptr fs:[rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000010d1c6: add eax, eax; cmp rdi, rsi; ja 0x10d1b8; mov eax, r8d; ret; 
0x000000000005ea38: add eax, eax; mov eax, r8d; ret; 
0x00000000000a8afb: add eax, eax; notrack jmp rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000ee328: add eax, eax; pop rbx; pop rbp; ret; 
0x0000000000184c61: add eax, eax; vzeroupper; ret; 
0x000000000013febe: add eax, ebp; lodsb al, byte ptr [rsi]; hlt; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000012db6b: add eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009f839: add eax, ecx; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000188388: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x000000000013c9b3: add eax, ecx; cmovs eax, edx; ret; 
0x00000000001482d5: add eax, ecx; notrack jmp rax; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000abf49: add eax, ecx; ret; 
0x00000000001838c6: add eax, ecx; sub rax, rdi; ret; 
0x000000000018d09d: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018872d: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x00000000001461be: add eax, ecx; sub rdx, 1; jne 0x146148; ret; 
0x00000000001845b6: add eax, ecx; vzeroupper; ret; 
0x0000000000184c5e: add eax, edi; add rax, r8; vzeroupper; ret; 
0x00000000000abf46: add eax, edi; add rax, rcx; ret; 
0x000000000018d09a: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018872a: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001845b3: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x00000000000ac77a: add eax, edi; add rax, rsi; ret; 
0x00000000000a220f: add eax, edi; dec dword ptr [rax + 0x29]; ret; 
0x00000000001144cf: add eax, edi; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x00000000000a89c5: add eax, edi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89dd: add eax, edi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a89a6: add eax, edi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x000000000014d05b: add eax, edi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000a8979: add eax, edi; ret; 
0x000000000018d155: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e5: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000018472a: add eax, edi; vzeroupper; ret; 
0x00000000000b1d56: add eax, edx; sub rax, rdi; ret; 
0x00000000000cf84b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000481e0: add eax, esi; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000bc0c1: add eax, esi; notrack jmp rax; nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x00000000000ac77d: add eax, esi; ret; 
0x000000000009901b: add ebp, 0x11; add al, ch; pop rsp; ret 0xffff; 
0x00000000000da9f0: add ebp, dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010cf8e: add ebp, ecx; ret 0xfffd; 
0x000000000015fe06: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000009e9b6: add ebx, dword ptr [rbx + 0x44]; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000009d10e: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000095181: add ebx, dword ptr [rbx + 0x5d]; ret; 
0x000000000015326e: add ebx, dword ptr [rbx - 0x39]; add eax, 0x9dba6; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000041240: add ebx, dword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000012b92b: add ebx, ebp; ret 0x9066; 
0x000000000016dee3: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000190ad2: add ecx, 0x100; cmp rdx, rcx; jne 0x190ab6; vzeroupper; ret; 
0x000000000010c686: add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000015f23c: add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000018bc0f: add ecx, 0x80; cmp rdx, rcx; jne 0x18bbfb; vzeroupper; ret; 
0x000000000013c525: add ecx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000000b3a6a: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000178665: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x0000000000135d48: add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x00000000000a6b89: add ecx, dword ptr [rax + 0x29]; ret 0x148; 
0x00000000000a33f7: add ecx, dword ptr [rax + 0x29]; ret 0x14c; 
0x0000000000095a5c: add ecx, dword ptr [rax + 0x29]; ret; 
0x00000000000f1231: add ecx, dword ptr [rax + 0x29]; retf 0x14c; ret 0x93e9; 
0x00000000000a4848: add ecx, dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000012bbee: add ecx, dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xc083; 
0x000000000013c720: add ecx, dword ptr [rax - 0x3f]; call 0x7ff44a2c; ret; 
0x000000000017c993: add ecx, dword ptr [rax - 0x73]; add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000198b12: add ecx, dword ptr [rax - 0x73]; insb byte ptr [rdi], dx; ret; 
0x000000000018a49d: add ecx, dword ptr [rax - 0x73]; jg 0x18a4a5; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1d1: add ecx, dword ptr [rax - 0x73]; jg 0x18b1d9; jne 0x18b430; vzeroupper; ret; 
0x00000000000b770c: add ecx, dword ptr [rax - 0x73]; jg 0xb7714; jne 0xb7f80; ret; 
0x00000000000b8df0: add ecx, dword ptr [rax - 0x73]; jg 0xb8df8; jne 0xb97d0; ret; 
0x0000000000198e2a: add ecx, dword ptr [rax - 0x75]; cmp eax, 0x57bee; call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x0000000000136d0e: add ecx, dword ptr [rax - 0x75]; push rdi; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b3a6e: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000178669: add ecx, dword ptr [rax - 0x77]; clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x0000000000027b05: add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000000e8645: add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000154572: add ecx, dword ptr [rax - 0x77]; or byte ptr [r8 + 1], r15b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000109d60: add ecx, dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012b2ef: add ecx, dword ptr [rax - 0x77]; ret 0xe883; 
0x00000000000f4d84: add ecx, dword ptr [rax - 0x77]; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000288ea: add ecx, dword ptr [rax - 0x77]; ror dword ptr [rax + 0x39], 1; ret; 
0x00000000000a22a5: add ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000064303: add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000a5d49: add ecx, dword ptr [rbp + 0x29]; retf 0x14d; ret 0x5be9; 
0x00000000000a57f9: add ecx, dword ptr [rbp + 0x29]; retf 0x14d; ret 0x6be9; 
0x00000000000a3d35: add ecx, dword ptr [rbp + 0x29]; retf 0x14d; ret 0xefe9; 
0x00000000000a70c1: add ecx, dword ptr [rbp + 0x39]; ret; 
0x00000000000469a7: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x000000000016dc52: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000013da08: add ecx, dword ptr [rbx - 0x6af0ebb2]; ret 0x2144; 
0x00000000000b8514: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000000b9364: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000b7784: add ecx, dword ptr [rcx + 0x357890f]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc4: add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000015bd26: add ecx, dword ptr [rcx - 0x17b7b]; dec dword ptr [rcx - 0x73]; adc byte ptr [r8 - 0x77], r9b; ret 0x2548; 
0x00000000000b3a6b: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x0000000000178666: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x000000000014a8f7: add ecx, dword ptr [rcx - 0x77]; ror byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000001532f7: add ecx, dword ptr [rcx - 0x77]; ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; ret; 
0x0000000000053213: add ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000db9e7: add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013a01c: add ecx, dword ptr [rdi]; test byte ptr [rbp - 0x7d000000], cl; ret 0x8103; 
0x00000000000f1d42: add ecx, dword ptr [rdi]; test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000018a4a1: add ecx, dword ptr [rdi]; test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7710: add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000017c997: add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000c974e: add ecx, dword ptr [rdi]; xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000c9472: add ecx, dword ptr [rdi]; xchg dl, bh; add eax, 0x89490000; ret; 
0x000000000002a5a5: add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000ca8d1: add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x00000000000ca925: add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x00000000000db682: add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bcaed: add ecx, dword ptr [rip + 0x58d4800]; jns 0xbcb1d; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x0000000000183ed0: add ecx, eax; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000cbaa6: add ecx, ebp; retf 0xfffb; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013e890: add ecx, ebp; retf 0xfffc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000119644: add ecx, ebx; ret; 
0x0000000000116d51: add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000d422a: add edi, 0x51eb850; mov edx, edi; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x00000000000e81de: add edi, 1; test al, al; jne 0xe8191; xor eax, eax; ret; 
0x000000000009eb12: add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c16b: add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000117999: add edi, dword ptr [rsi - 1]; inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x0000000000116594: add edi, eax; add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000116772: add edi, eax; add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x8004; 
0x00000000000482f2: add edi, eax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000011f891: add edi, ebp; xor eax, eax; ret; 
0x000000000013c508: add edi, edx; mov qword ptr [r9], rdi; ret; 
0x00000000000438ab: add edi, esi; ret 0; 
0x00000000000e505e: add edx, 0x4df3231b; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000093552: add edx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000013c42b: add edx, 1; mov eax, edx; cmp esi, eax; ja 0x13c41c; mov eax, 0xffffffff; ret; 
0x000000000013c92a: add edx, 1; test rdx, rdx; js 0x13c940; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000013c235: add edx, 2; mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013c45e: add edx, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000013c56f: add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000000120e05: add edx, eax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000009ef61: add edx, eax; jb 0x9ef6c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000184ba8: add edx, eax; jl 0x184be0; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184b43: add edx, eax; jl 0x184be0; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184bc8: add edx, eax; jl 0x184be0; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184af2: add edx, eax; jl 0x184be0; add rax, rdi; vzeroupper; ret; 
0x00000000000ac688: add edx, eax; jl 0xac6f0; add rax, rdi; ret; 
0x00000000000ac698: add edx, eax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac6b8: add edx, eax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac6d8: add edx, eax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000056af2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000005b4c7: add edx, ebp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000000a8a3e: add edx, edi; notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000bafc9: add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000098445: add esi, dword ptr [rbp + rdi - 0x77]; ret 0xb48b; 
0x000000000015d21c: add esi, dword ptr [rdi + 0x11]; cmp dx, cx; sete al; ret; 
0x000000000009f219: add esi, dword ptr [rdi + 1]; add byte ptr [rax - 0x73], cl; adc eax, 0xd5edc; cmovne rax, rdx; ret; 
0x000000000014874f: add esi, dword ptr [rsi + 0xe]; mov eax, 2; ret; 
0x000000000015d236: add esi, dword ptr [rsi + 7]; ret; 
0x00000000000a2e38: add esi, dword ptr [rsp + rbx + 0x31]; ror byte ptr [rdi], 0x1f; add byte ptr [rbp + 1], al; fiadd dword ptr [rbx + 0x634901c0]; rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x0000000000115f81: add esi, eax; call ptr [r8 + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000014929f: add esi, eax; cmp rsi, qword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000015751a: add esi, eax; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x00000000000ec469: add esi, eax; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000011f8cc: add esi, ebp; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000013c61e: add esi, ebx; movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000016de03: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000000bbb5e: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f247: add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000013c5d1: add esi, ebx; stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d3: add esi, ebx; stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aed: add esi, ebx; stosq qword ptr [rdi], rax; ret; 
0x00000000000bc21a: add esi, edi; int1; mov eax, eax; ret; 
0x000000000014885a: add esi, esi; ret 0x7402; 
0x0000000000102b81: add esi, esi; ret 0xf01; 
0x00000000000f5ba3: add esi, esi; ret 0xf04; 
0x00000000000ee3e4: add esi, esi; ret; 
0x00000000000bb92d: add esp, 0x100; sub rax, rdx; ret; 
0x00000000000bb9dd: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000062846: add esp, 0x1010; pop rbp; ret; 
0x0000000000062651: add esp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000118c2c: add esp, 0x10; lea rax, [rip + 0xd6c5a]; pop rbp; pop r12; pop r13; ret; 
0x000000000009d4e3: add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000000044152: add esp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000152386: add esp, 0x10; mov eax, r8d; pop r12; ret; 
0x000000000015cbd3: add esp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000046d2d: add esp, 0x10; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x000000000002ff30: add esp, 0x10; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000812d9: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000995a0: add esp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000009ce45: add esp, 0x10; mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000993a9: add esp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000008dfda: add esp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x00000000001449c0: add esp, 0x10; pop r12; ret; 
0x000000000002ff08: add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000000960c1: add esp, 0x10; pop rbp; ret; 
0x0000000000062566: add esp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000081125: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042895: add esp, 0x10; pop rbx; ret; 
0x000000000016095f: add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000015266e: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043022: add esp, 0x118; ret; 
0x000000000010f308: add esp, 0x130; pop rbp; ret; 
0x00000000000438e9: add esp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000042ef2: add esp, 0x148; ret; 
0x000000000013dc80: add esp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001470f6: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000046e6c: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000009cf7b: add esp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000062e2a: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000476c2: add esp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000007a3f8: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000429f6: add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000349eb: add esp, 0x18; ret; 
0x000000000015d1c3: add esp, 0x190; mov rax, r8; pop rbp; ret; 
0x0000000000114ec3: add esp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d61e: add esp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000000062353: add esp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000000947f8: add esp, 0x20; and eax, 0xc; pop rbx; ret; 
0x00000000000df3a1: add esp, 0x20; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000137f47: add esp, 0x20; mov eax, r8d; pop rbp; ret; 
0x00000000000dfdff: add esp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000082ca9: add esp, 0x20; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000042ab1: add esp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x0000000000042b42: add esp, 0x20; pop rbp; ret; 
0x000000000002f82d: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ca0b6: add esp, 0x20; pop rbx; ret; 
0x00000000000d42e9: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000044583: add esp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000125781: add esp, 0x260; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000152c89: add esp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000081878: add esp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000008ab9e: add esp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000006272b: add esp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000147022: add esp, 0x28; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001524c5: add esp, 0x28; pop rbx; pop r12; ret; 
0x00000000000426d3: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b05d: add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000047446: add esp, 0x28; ret; 
0x0000000000086ba8: add esp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x000000000005b9c5: add esp, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000197078: add esp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000011305d: add esp, 0x30; pop rbp; ret; 
0x0000000000091259: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196c5f: add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010e60e: add esp, 0x30; pop rbx; ret; 
0x0000000000025b96: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002448c: add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000005b878: add esp, 0x38; ret; 
0x000000000014ef39: add esp, 0x40; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112a58: add esp, 0x40; pop r12; ret; 
0x0000000000099202: add esp, 0x40; pop rbp; ret; 
0x0000000000043999: add esp, 0x40; pop rbx; ret; 
0x000000000012297c: add esp, 0x40; ret; 
0x00000000000623e3: add esp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x000000000011bfce: add esp, 0x418; ret; 
0x000000000005b5b6: add esp, 0x450; pop rbp; ret; 
0x0000000000083e3f: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000151f94: add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000008dbdb: add esp, 0x48; ret; 
0x000000000014e89f: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000015c5b1: add esp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000005520d: add esp, 0x58; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000013de86: add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000d0ea4: add esp, 0x58; ret; 
0x0000000000153f3e: add esp, 0x5c8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000011390f: add esp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113e88: add esp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000115098: add esp, 0x60; pop rbp; ret; 
0x000000000010dd5c: add esp, 0x68; pop rbp; pop r12; ret; 
0x00000000000bcf7e: add esp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001010ed: add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010e4cd: add esp, 0x68; ret; 
0x00000000000bd0d3: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010ded7: add esp, 0x78; ret; 
0x000000000015e32f: add esp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000011cb1d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x000000000004354d: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157b1c: add esp, 0x90; pop rbx; ret; 
0x00000000000436c4: add esp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044297: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024243: add esp, 0x98; ret; 
0x0000000000114176: add esp, 0xa0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000001421e7: add esp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043a8d: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120e80: add esp, 0xa0; pop rbx; ret; 
0x00000000000de746: add esp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000044425: add esp, 0xa8; ret; 
0x000000000002f6ff: add esp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000010feaa: add esp, 0xb8; pop rbx; pop r12; pop r13; pop r14; ret; 
0x00000000000e49bb: add esp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000121e64: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052c08: add esp, 0xd8; ret; 
0x00000000000d119e: add esp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000ddc58: add esp, 0xe0; pop rbx; ret; 
0x0000000000081a3d: add esp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000ee325: add esp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000013c3f1: add esp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000149339: add esp, 8; lea r8d, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000001463af: add esp, 8; lea rax, [rip + 0xaa747]; ret; 
0x00000000000dd751: add esp, 8; lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000146991: add esp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000136e67: add esp, 8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000000832e9: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000155c21: add esp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000832c7: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000089dfb: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000014ddea: add esp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000005b931: add esp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000082404: add esp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011737f: add esp, 8; mov eax, r8d; ret; 
0x0000000000102819: add esp, 8; mov eax, r9d; ret; 
0x0000000000085429: add esp, 8; mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000004779f: add esp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000a0a41: add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009efc2: add esp, 8; mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000009f9e5: add esp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x00000000000831b2: add esp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000014de23: add esp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d9: add esp, 8; movzx eax, al; neg eax; ret; 
0x0000000000148c10: add esp, 8; movzx eax, al; pop rbp; pop r12; ret; 
0x000000000014a0d7: add esp, 8; movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000000522b6: add esp, 8; movzx eax, al; ret; 
0x000000000014120e: add esp, 8; movzx eax, ax; ret; 
0x0000000000157d06: add esp, 8; not eax; shr eax, 0x1f; ret; 
0x000000000008541a: add esp, 8; pop rbp; pop r12; ret; 
0x000000000008b4e7: add esp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000055688: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024e09: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000026f79: add esp, 8; ret; 
0x0000000000162da5: add esp, 8; sar eax, 0x1f; ret; 
0x0000000000149324: add esp, 8; sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000012b99c: add esp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000935e3: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000ee533: add esp, 8; xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000046c85: add esp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000091f00: add esp, dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000b39f4: add esp, dword ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000018fab9: add qword ptr [r10 - 0x2f], r12; jl 0x18fb07; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000048d0a: add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000000ed984: add qword ptr [r8], r8; add byte ptr [rbp + rcx*4 + 0x52], cl; dec dword ptr [rcx + 0x29]; ret 0x8349; 
0x00000000001866f0: add qword ptr [r8], r8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000186990: add qword ptr [r8], rax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000496af: add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000bea47: add qword ptr [r9 - 0x77], rcx; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000006ab57: add qword ptr [rax - 0x77], rcx; lea edx, [rax - 0x77000005]; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000008df29: add qword ptr [rax - 0x77], rcx; sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x0000000000126a13: add qword ptr [rax - 0x7d], rcx; ret 0x4801; 
0x00000000000a45c6: add qword ptr [rax], r8; add byte ptr [rcx - 9], al; ret; 
0x00000000001866bc: add qword ptr [rax], r8; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000012796d: add qword ptr [rbp + 0x38], rbx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d4e4: add qword ptr [rbx + 0x18], rbp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127903: add qword ptr [rbx + 0x38], rbp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000012dcea: add qword ptr [rcx + rcx*8 - 0x76b7578b], rax; clc; ret; 
0x0000000000066692: add qword ptr [rcx - 0x77], rcx; or byte ptr [r15 + r9 - 0x4a], r8b; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001785ad: add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000017c94d: add qword ptr [rdi], rcx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000046c1c: add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c234: add r10, 2; mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013c45d: add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000004123f: add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000016dee2: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000005b9c4: add r12d, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000013c61d: add r14, r11; movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000016de72: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000016de02: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000000bcb37: add r8, 1; mov ecx, dword ptr [rdi + r8*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x000000000002a97a: add r8, qword ptr [r8]; add bh, dh; ret 0; 
0x00000000001834a0: add r8, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f934: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000a7ac1: add r8b, byte ptr [r8]; add bh, dh; ret; 
0x000000000018ac07: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189177: add r8b, byte ptr [r8]; vzeroupper; ret; 
0x000000000010d1c5: add r8d, eax; cmp rdi, rsi; ja 0x10d1b8; mov eax, r8d; ret; 
0x000000000005ea37: add r8d, eax; mov eax, r8d; ret; 
0x000000000013b879: add r9b, byte ptr [r8 + 0x39]; ret 0x1072; 
0x000000000002c0f3: add r9b, byte ptr [r8 + 0x39]; ret; 
0x00000000000ed908: add r9b, byte ptr [r9 + 0x39]; ret 0x3176; 
0x0000000000187b62: add rax, -0x7cb80000; ret 0xe910; 
0x0000000000183884: add rax, 0x10; sub edx, esi; cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x0000000000034549: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000018d174: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887f4: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184739: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000178633: add rax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x000000000017c9e4: add rax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018d194: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188814: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184759: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018d1e0: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188860: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184779: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000054330: add rax, 1; cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000a8810: add rax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x00000000000cfaf0: add rax, 1; ret; 
0x00000000000a88c8: add rax, 1; test cl, cl; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000a28d0: add rax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000cfae7: add rax, 2; ret; 
0x00000000000cfb00: add rax, 3; ret; 
0x0000000000157551: add rax, 4; bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157591: add rax, 4; bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bdfb3: add rax, 4; cmp edx, esi; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000001575d4: add rax, 4; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bcc32: add rax, 4; test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x0000000000117678: add rax, 8; mov qword ptr [rip + 0xd810d], rax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117648: add rax, 8; mov qword ptr [rip + 0xd813d], rax; mov rax, r8; ret; 
0x000000000002440c: add rax, qword ptr [0]; ret; 
0x0000000000097f94: add rax, qword ptr [rax]; add dh, dh; ret 0xf01; 
0x00000000000d0e94: add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb4: add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000015fca2: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000002440b: add rax, qword ptr fs:[0]; ret; 
0x00000000000a8afa: add rax, r8; notrack jmp rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000184c60: add rax, r8; vzeroupper; ret; 
0x000000000012db6a: add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000188387: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000001482d4: add rax, rcx; notrack jmp rax; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000abf48: add rax, rcx; ret; 
0x00000000001838c5: add rax, rcx; sub rax, rdi; ret; 
0x000000000018d09c: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018872c: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001845b5: add rax, rcx; vzeroupper; ret; 
0x0000000000184c5d: add rax, rdi; add rax, r8; vzeroupper; ret; 
0x00000000000abf45: add rax, rdi; add rax, rcx; ret; 
0x000000000018d099: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188729: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001845b2: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000ac779: add rax, rdi; add rax, rsi; ret; 
0x00000000000a89c4: add rax, rdi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89dc: add rax, rdi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a89a5: add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x000000000014d05a: add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000a8978: add rax, rdi; ret; 
0x000000000018d154: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e4: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184729: add rax, rdi; vzeroupper; ret; 
0x00000000000b1d55: add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf84a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000481df: add rax, rsi; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000bc0c0: add rax, rsi; notrack jmp rax; nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x00000000000ac77c: add rax, rsi; ret; 
0x0000000000190ad1: add rcx, 0x100; cmp rdx, rcx; jne 0x190ab6; vzeroupper; ret; 
0x000000000018bc0e: add rcx, 0x80; cmp rdx, rcx; jne 0x18bbfb; vzeroupper; ret; 
0x000000000013c524: add rcx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x000000000017c996: add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000183ecf: add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000e81dd: add rdi, 1; test al, al; jne 0xe8191; xor eax, eax; ret; 
0x00000000000482f1: add rdi, rax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000013c507: add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x00000000000e505d: add rdx, 0x4df3231b; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000093551: add rdx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000013c929: add rdx, 1; test rdx, rdx; js 0x13c940; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000056af1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000120e04: add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000009ef60: add rdx, rax; jb 0x9ef6c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000184ba7: add rdx, rax; jl 0x184be0; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184b42: add rdx, rax; jl 0x184be0; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184bc7: add rdx, rax; jl 0x184be0; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184af1: add rdx, rax; jl 0x184be0; add rax, rdi; vzeroupper; ret; 
0x00000000000ac687: add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x00000000000ac697: add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac6b7: add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac6d7: add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000a8a3d: add rdx, rdi; notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x0000000000157519: add rsi, r8; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x000000000014929e: add rsi, rax; cmp rsi, qword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000000bb92c: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb9dc: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000062845: add rsp, 0x1010; pop rbp; ret; 
0x0000000000062650: add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000118c2b: add rsp, 0x10; lea rax, [rip + 0xd6c5a]; pop rbp; pop r12; pop r13; ret; 
0x000000000009d4e2: add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000000044151: add rsp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000152385: add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x000000000015cbd2: add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000046d2c: add rsp, 0x10; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x000000000002ff2f: add rsp, 0x10; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000812d8: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000009959f: add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000009ce44: add rsp, 0x10; mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000993a8: add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000008dfd9: add rsp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x00000000001449bf: add rsp, 0x10; pop r12; ret; 
0x000000000002ff07: add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000000960c0: add rsp, 0x10; pop rbp; ret; 
0x0000000000062565: add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000081124: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042894: add rsp, 0x10; pop rbx; ret; 
0x000000000016095e: add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000015266d: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043021: add rsp, 0x118; ret; 
0x000000000010f307: add rsp, 0x130; pop rbp; ret; 
0x00000000000438e8: add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000042ef1: add rsp, 0x148; ret; 
0x000000000013dc7f: add rsp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001470f5: add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000046e6b: add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000009cf7a: add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000062e29: add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000476c1: add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000007a3f7: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000429f5: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000349ea: add rsp, 0x18; ret; 
0x000000000015d1c2: add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x0000000000114ec2: add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d61d: add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000000062352: add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000000947f7: add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x00000000000df3a0: add rsp, 0x20; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000137f46: add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x00000000000dfdfe: add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000082ca8: add rsp, 0x20; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000042ab0: add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x0000000000042b41: add rsp, 0x20; pop rbp; ret; 
0x000000000002f82c: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ca0b5: add rsp, 0x20; pop rbx; ret; 
0x00000000000d42e8: add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000044582: add rsp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000125780: add rsp, 0x260; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000152c88: add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000081877: add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000008ab9d: add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000006272a: add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000147021: add rsp, 0x28; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001524c4: add rsp, 0x28; pop rbx; pop r12; ret; 
0x00000000000426d2: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b05c: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000047445: add rsp, 0x28; ret; 
0x0000000000086ba7: add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x0000000000197077: add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000011305c: add rsp, 0x30; pop rbp; ret; 
0x0000000000091258: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196c5e: add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010e60d: add rsp, 0x30; pop rbx; ret; 
0x0000000000025b95: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002448b: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000005b877: add rsp, 0x38; ret; 
0x000000000014ef38: add rsp, 0x40; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112a57: add rsp, 0x40; pop r12; ret; 
0x0000000000099201: add rsp, 0x40; pop rbp; ret; 
0x0000000000043998: add rsp, 0x40; pop rbx; ret; 
0x000000000012297b: add rsp, 0x40; ret; 
0x00000000000623e2: add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x000000000011bfcd: add rsp, 0x418; ret; 
0x000000000005b5b5: add rsp, 0x450; pop rbp; ret; 
0x0000000000083e3e: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000151f93: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000008dbda: add rsp, 0x48; ret; 
0x000000000014e89e: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000015c5b0: add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000005520c: add rsp, 0x58; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000013de85: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000d0ea3: add rsp, 0x58; ret; 
0x0000000000153f3d: add rsp, 0x5c8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000011390e: add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113e87: add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000115097: add rsp, 0x60; pop rbp; ret; 
0x000000000010dd5b: add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000000bcf7d: add rsp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001010ec: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010e4cc: add rsp, 0x68; ret; 
0x00000000000bd0d2: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010ded6: add rsp, 0x78; ret; 
0x000000000015e32e: add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000011cb1c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000004354c: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157b1b: add rsp, 0x90; pop rbx; ret; 
0x00000000000436c3: add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044296: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024242: add rsp, 0x98; ret; 
0x0000000000114175: add rsp, 0xa0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000001421e6: add rsp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043a8c: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120e7f: add rsp, 0xa0; pop rbx; ret; 
0x00000000000de745: add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000044424: add rsp, 0xa8; ret; 
0x000000000002f6fe: add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000010fea9: add rsp, 0xb8; pop rbx; pop r12; pop r13; pop r14; ret; 
0x00000000000e49ba: add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000121e63: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052c07: add rsp, 0xd8; ret; 
0x00000000000d119d: add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000ddc57: add rsp, 0xe0; pop rbx; ret; 
0x0000000000081a3c: add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000ee324: add rsp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000013c3f0: add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000149338: add rsp, 8; lea r8d, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000001463ae: add rsp, 8; lea rax, [rip + 0xaa747]; ret; 
0x00000000000dd750: add rsp, 8; lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000146990: add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000136e66: add rsp, 8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000000832e8: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000155c20: add rsp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000832c6: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000089dfa: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000014dde9: add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000005b930: add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000082403: add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011737e: add rsp, 8; mov eax, r8d; ret; 
0x0000000000102818: add rsp, 8; mov eax, r9d; ret; 
0x0000000000085428: add rsp, 8; mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000004779e: add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000a0a40: add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009efc1: add rsp, 8; mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000009f9e4: add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x00000000000831b1: add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000014de22: add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d8: add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000148c0f: add rsp, 8; movzx eax, al; pop rbp; pop r12; ret; 
0x000000000014a0d6: add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000000522b5: add rsp, 8; movzx eax, al; ret; 
0x000000000014120d: add rsp, 8; movzx eax, ax; ret; 
0x0000000000157d05: add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000085419: add rsp, 8; pop rbp; pop r12; ret; 
0x000000000008b4e6: add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000055687: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024e08: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000026f78: add rsp, 8; ret; 
0x0000000000162da4: add rsp, 8; sar eax, 0x1f; ret; 
0x0000000000149323: add rsp, 8; sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000012b99b: add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000935e2: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000ee532: add rsp, 8; xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000046c84: add rsp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000012e65e: add sil, sil; ret 0x7420; 
0x0000000000121fcb: add word ptr [rax], 1; ret; 
0x0000000000121d05: add word ptr [rdx + rax*2], 1; ret; 
0x000000000004217b: addps xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000421ef: addps xmm0, xmm0; ret; 
0x0000000000042101: addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004217a: addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000421ee: addsd xmm0, xmm0; ret; 
0x0000000000042100: addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042460: addss xmm0, xmm0; ret; 
0x00000000000a5dce: and al, 0; add bh, dh; ret; 
0x00000000000b4221: and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000a2074: and al, 0; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000d41b5: and al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e4fc2: and al, 0; add byte ptr [rbp + 0x1c], dh; mov eax, 0xfffa; ret; 
0x00000000001156ce: and al, 0; mov rax, r12; pop r12; ret; 
0x000000000003007f: and al, 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000128561: and al, 0x10; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e2c95: and al, 0x10; add rsp, 0x28; ret; 
0x00000000000e2c8c: and al, 0x10; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000041bab: and al, 0x10; fld xword ptr [rsp + 8]; ret; 
0x00000000000a8a4b: and al, 0x10; mov qword ptr [rax], rdx; ret; 
0x00000000000a8b03: and al, 0x10; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000012290f: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122970: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000041b76: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000a89fc: and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8a05: and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x000000000005393e: and al, 0x18; add dword ptr [rdi], ecx; xchg esp, eax; ret 0x7c8b; 
0x0000000000113256: and al, 0x18; add rsp, 0x28; ret; 
0x00000000001191cb: and al, 0x18; call 0x1194d0; lea rax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x000000000011324d: and al, 0x18; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000a8973: and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000002ff05: and al, 0x20; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000001513f1: and al, 0x28; push rax; call 0x151110; add rsp, 0x28; ret; 
0x00000000000f69eb: and al, 0x30; adc al, 0x83; ret; 
0x0000000000148c90: and al, 0x30; call 0x1576d0; mov rax, r12; pop r12; ret; 
0x000000000009c51d: and al, 0x31; ror byte ptr [rax - 0x73], 0x35; sbb dword ptr [rcx - 0x76bbffef], edx; ret 0xa1e8; 
0x0000000000108cfe: and al, 0x38; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x00000000001157e4: and al, 0x38; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000015fa04: and al, 0x38; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x00000000000a1f74: and al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000000429f4: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010e9d8: and al, 0x48; add esp, 0x18; ret; 
0x0000000000120372: and al, 0x48; add esp, 0x20; pop rbp; ret; 
0x0000000000113fb0: and al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c1c6: and al, 0x48; add esp, 0x28; ret; 
0x0000000000120438: and al, 0x48; add esp, 0x30; pop rbp; ret; 
0x0000000000196cc2: and al, 0x48; add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122919: and al, 0x48; add esp, 0x38; ret; 
0x000000000012297a: and al, 0x48; add esp, 0x40; ret; 
0x000000000015662b: and al, 0x48; add esp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000001412cf: and al, 0x48; mov dword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c885: and al, 0x48; mov edx, dword ptr [rsp + 8]; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x00000000001157e9: and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000015fa09: and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000011f0ae: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x000000000015fb00: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fca9: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000012530c: and al, 0x5b; pop rbp; pop r12; ret; 
0x000000000009519d: and al, 0x5d; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000a2c0b: and al, 0x5d; pop r12; pop r13; pop r14; ret; 
0x0000000000153a50: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac0: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b30: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b91: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf5: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c60: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce3: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x00000000001539da: and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x00000000001149ad: and al, 0x71; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror dword ptr [rax - 0x75], 5; ret; 
0x000000000008ab9b: and al, 0x74; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000001097a3: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000001369dd: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000001091b1: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002fdbb: and al, 0x83; call 0x84586c3; pop rbx; ret; 
0x000000000005f4d8: and al, 0x83; ret; 
0x0000000000053bc9: and al, 0x86; add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x2074; 
0x0000000000053be5: and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000010bc68: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 1], ecx; ror dword ptr [rax + 1], 1; ret 0x8948; 
0x000000000010f619: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000a39f3: and al, 0x88; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fild dword ptr [rbp - 0x77]; ret 0x8948; 
0x000000000005131f: and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x00000000001373ac: and al, 0x88; or dh, dh; ret 0xf02; 
0x0000000000098460: and al, 0x89; ret 0xb48b; 
0x00000000000f7bd3: and al, 0x89; ret 0xe283; 
0x00000000000be4a4: and al, 0x89; ret; 
0x00000000001097fc: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001400d4: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x3be9; 
0x000000000014007c: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x9be9; 
0x000000000013fc8c: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0xd889; 
0x00000000000d0858: and al, 0x94; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000531ab: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000053b13: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x89e9; 
0x00000000001383ab: and al, 0xa8; add byte ptr [rax], al; add cl, ch; ret; 
0x000000000015eb63: and al, 0xb5; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000013fbcd: and al, 0xc8; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000e2e75: and al, 0xc; add rsp, 0x18; ret; 
0x00000000000e2d4f: and al, 0xc; add rsp, 0x28; ret; 
0x0000000000114fe1: and al, 0xc; add rsp, 0x38; ret; 
0x00000000000e2e6c: and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d46: and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fd8: and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000113b1c: and al, 0xc; lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x0000000000113b21: and al, 0xc; mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x00000000000a8ab9: and al, 0xc; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8b99: and al, 0xc; mov word ptr [rdi + 4], ax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89e4: and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x0000000000135a18: and al, 0xd0; add dword ptr [rax], eax; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000d0b29: and al, 0xd4; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000076edf: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000a04e8: and al, 0xda; or al, 0; cmovne rax, rdx; ret; 
0x0000000000107524: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000041c66: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c8c: and al, 0xe8; fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041cdc: and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x00000000000a8aa2: and al, 0xe8; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8b7a: and al, 0xe8; mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000042611: and al, 0xe8; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041d96: and al, 0xe8; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057cc9: and al, 0xe8; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057da2: and al, 0xe8; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000005b125: and al, 0xe8; pinsrw xmm0, eax, 6; ret; 
0x000000000003a568: and al, 0xe8; ret 0xfe7d; 
0x0000000000040508: and al, 0xe8; ret 0xff89; 
0x000000000003f108: and al, 0xe8; ret 0xff9d; 
0x000000000003bd08: and al, 0xe8; ret 0xffd1; 
0x00000000000301a7: and al, 0xe8; ret; 
0x00000000000f9811: and al, 0xe8; stc; mov dh, dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000003bbc7: and al, 0xe9; ret 0xffed; 
0x0000000000111e70: and al, 0xe9; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a8ac2: and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8ba2: and al, 0xe; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8aa9: and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8b81: and al, 0xec; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000013fe51: and al, 0xee; dec dword ptr [rax - 0x77]; ret; 
0x0000000000107d9f: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000107541: and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b48; 
0x00000000000a89c2: and al, 0xf0; add rax, rdi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x0000000000042616: and al, 0xf0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000d0290: and al, 0xf0; fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041cd8: and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041d9b: and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c18: and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d0294: and al, 0xf0; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000a8a8a: and al, 0xf0; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8b62: and al, 0xf0; mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041c61: and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005b11f: and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d029a: and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000d02a0: and al, 0xf0; ret; 
0x00000000000a8a91: and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8b69: and al, 0xf4; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89cc: and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89a3: and al, 0xf8; add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a8a6b: and al, 0xf8; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b33: and al, 0xf8; mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000199163: and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x000000000004395b: and al, 0xf; xchg ebp, eax; ret 0x8948; 
0x00000000000a8a73: and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b3b: and al, 0xfa; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89ae: and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000041d26: and al, 0xfc; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000041d2a: and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000be38e: and al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010e8f5: and al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e904; ret; 
0x0000000000046ad9: and al, 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000011f2ab: and al, 4; add rsp, 0x20; pop rbp; ret; 
0x0000000000120bfe: and al, 4; add rsp, 0x28; ret; 
0x0000000000120bf5: and al, 4; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000047865: and al, 4; jne 0x478ba; add rsp, 0x18; ret; 
0x00000000000b7858: and al, 7; add byte ptr [rax], al; ret; 
0x00000000000fe43d: and al, 8; add byte ptr [rdi], cl; xchg esp, eax; ret 0xd020; 
0x00000000001133f2: and al, 8; add cl, byte ptr [rbx + 0x750c2444]; ret 0xd8f7; 
0x00000000000a89da: and al, 8; add rax, rdi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000001577e6: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000349e8: and al, 8; add rsp, 0x18; ret; 
0x0000000000048277: and al, 8; add rsp, 0x28; ret; 
0x000000000011305a: and al, 8; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fd3: and al, 8; add rsp, 0x38; ret; 
0x0000000000043497: and al, 8; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001129ac: and al, 8; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e01a: and al, 8; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000113050: and al, 8; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fc9: and al, 8; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000041dd2: and al, 8; fadd st(0); ret; 
0x0000000000041d2e: and al, 8; fscale; fstp st(1); ret; 
0x0000000000041c94: and al, 8; fsubrp st(1); ret; 
0x0000000000041de6: and al, 8; fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000013c889: and al, 8; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x0000000000122914: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122975: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000013cad5: and al, 8; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000041baf: and al, 8; ret; 
0x0000000000118739: and al, 8; syscall; cmp rax, -0xfff; jae 0x118746; ret; 
0x00000000000349dc: and al, 8; xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000034a0c: and al, 8; xor esi, esi; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000008925a: and al, byte ptr [rax + rax]; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000042b3d: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000041e64: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000e2e41: and al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x000000000011f325: and al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f334; ret; 
0x0000000000155015: and al, byte ptr [rsi]; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000023a6a: and al, byte ptr [rsp + rbx - 0x7dc6b800]; fadd dword ptr [rax]; add byte ptr [rax], al; jne 0x23a3b; ret; 
0x00000000000b69fa: and al, byte ptr [rsp + riz*8 - 0xb7f68c]; ret 0xc148; 
0x000000000014def7: and al, ch; ret; 
0x000000000011fd4a: and al, cl; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000341c6: and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a6: and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034186: and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034106: and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034146: and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a6: and ax, 0x400; movzx eax, ax; ret; 
0x0000000000041cd1: and ax, 0x8000; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c5a: and ax, 0x8000; mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000034126: and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e6: and ax, 0x800; movzx eax, ax; ret; 
0x0000000000080103: and bh, dl; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x00000000000b7e2b: and bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b7e2a: and bl, r14b; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000d128c: and byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x00000000000ac631: and byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x000000000008d93a: and byte ptr [r15 + 0x12], r14b; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127ad2: and byte ptr [r15 + 0x1a], r14b; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000008d87f: and byte ptr [r15 + 0xd], r14b; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c303: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000896d7: and byte ptr [r8 + 1], r9b; ret; 
0x000000000011d5d2: and byte ptr [r8 + 2], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008c0fa: and byte ptr [r8 - 0x75], r9b; push rbx; and byte ptr [rax + 0x29], cl; ret 0x6348; 
0x00000000000bb2e6: and byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x0000000000091976: and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000011ef01: and byte ptr [rax + 0x21], cl; clc; or rax, rsi; ret; 
0x000000000008c0ff: and byte ptr [rax + 0x29], cl; ret 0x6348; 
0x0000000000098bad: and byte ptr [rax + 0x39], cl; ret 0x4273; 
0x0000000000158dd6: and byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000984a1: and byte ptr [rax + 0x39], cl; ret 0x860f; 
0x0000000000088cf6: and byte ptr [rax + 0x39], cl; ret 0x894c; 
0x0000000000159f8d: and byte ptr [rax + 0x39], cl; ret 0xac74; 
0x00000000000470aa: and byte ptr [rax + 0x39], cl; ret 0xb677; 
0x00000000000470ba: and byte ptr [rax + 0x39], cl; ret 0xe076; 
0x0000000000047060: and byte ptr [rax + 0x39], cl; ret 0xea76; 
0x00000000000860b8: and byte ptr [rax + 0x3b], cl; sub byte ptr [rbx + 0x11], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000008625f: and byte ptr [rax + 0x3b], cl; sub byte ptr [rbx + 0x12], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001507d5: and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000018d177: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887f7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018473c: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000184bc6: and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac6b6: and byte ptr [rax + 1], cl; ret 0x347c; 
0x00000000000896d8: and byte ptr [rax + 1], cl; ret; 
0x000000000011d5d3: and byte ptr [rax + 2], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004732e: and byte ptr [rax + 9], cl; clc; ret; 
0x00000000000b1d4d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf899: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000197269: and byte ptr [rax + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x0000000000128949: and byte ptr [rax - 0x49f0ffc5], al; adc byte ptr [rdi], cl; test byte ptr [rdx - 0x7d000000], ch; ret 0x8801; 
0x00000000000d012f: and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x00000000000b7b25: and byte ptr [rax - 0x73], cl; jg 0xb7b4a; jne 0xb7f80; ret; 
0x00000000000b92b9: and byte ptr [rax - 0x73], cl; jg 0xb92de; jne 0xb97d0; ret; 
0x000000000008c0fb: and byte ptr [rax - 0x75], cl; push rbx; and byte ptr [rax + 0x29], cl; ret 0x6348; 
0x0000000000135542: and byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000250e4: and byte ptr [rax - 0x77], cl; ret; 
0x0000000000197b73: and byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0x18]; ret 0xfff7; 
0x0000000000197a73: and byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0x18]; ret 0xfff8; 
0x0000000000197973: and byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0x18]; ret 0xfff9; 
0x0000000000197873: and byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0x18]; ret 0xfffa; 
0x000000000018498b: and byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x000000000012139f: and byte ptr [rax - 0x7d], cl; ret 0x4c14; 
0x00000000000dd4b9: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000008e662: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000011c6fe: and byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 0x77], cl; ret 0x8148; 
0x000000000006e408: and byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e506d: and byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e513b: and byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000bc1db: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000010e895: and byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x0000000000195cbf: and byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x2040; 
0x000000000019332e: and byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x2041; 
0x00000000000b8fac: and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000000bb2e7: and byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000012da28: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8a8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d968: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09a8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a0638: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04d8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000001663b5: and byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x000000000009d364: and byte ptr [rbp + rcx*4 + 0x60], cl; xor byte ptr [rax + 0x31], cl; ret 0x8948; 
0x000000000018c31d: and byte ptr [rbp - 0x27], dh; vzeroupper; ret; 
0x00000000000d1a07: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000000d128d: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000002f82f: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000015cb33: and byte ptr [rbx + 9], cl; add byte ptr [rcx], al; add rsp, 8; ret; 
0x000000000013f89a: and byte ptr [rbx + rsi*8 + 0x3c], dh; or dword ptr [rdi + rbp*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x0000000000148ba7: and byte ptr [rbx - 0x48], bl; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000018c4b8: and byte ptr [rbx], bh; cmp r12b, byte ptr [rax]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000011ee83: and byte ptr [rcx + 0xfffe2], al; add byte ptr [rip - 0x1000], ah; or eax, edx; ret; 
0x0000000000051be9: and byte ptr [rcx + 0xfffffe2], al; add byte ptr [rcx], cl; ret 0x8f74; 
0x000000000005f08c: and byte ptr [rcx + 9], cl; ret; 
0x00000000000df3a3: and byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000082cab: and byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000041242: and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000085412: and byte ptr [rcx + rcx*4 - 0x40], al; mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000137f49: and byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; ret; 
0x00000000000dfe01: and byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x000000000014929b: and byte ptr [rcx - 0x39feb70a], cl; cmp rsi, qword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000000d6c79: and byte ptr [rcx - 0x77], cl; ret 0xd889; 
0x000000000018a32b: and byte ptr [rcx - 0x7d], cl; rcr byte ptr [rdi + 0x49], 0x29; ror byte ptr [rax - 0x73], 1; jl 0x18a34e; and ecx, ebp; ret; 
0x0000000000053cb3: and byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000120ae4: and byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120b50; ret; 
0x00000000000d13da: and byte ptr [rcx], al; ret 0xfac1; 
0x00000000000ec998: and byte ptr [rcx], bh; push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001898a8: and byte ptr [rcx], ch; retf 0x3944; ret 0x820f; 
0x000000000005b0a1: and byte ptr [rcx], cl; ret 0x9574; 
0x0000000000091977: and byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d93b: and byte ptr [rdi + 0x12], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127ad3: and byte ptr [rdi + 0x1a], dh; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000100464: and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bbbc0: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbfa5: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008d880: and byte ptr [rdi + 0xd], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c304: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd5: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000034189: and byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x00000000001164d6: and byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000183db4: and byte ptr [rdi], cl; mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000000b7b29: and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x0000000000190d1d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x000000000010cba9: and byte ptr [rdi], cl; test ebp, edi; add al, byte ptr [rax]; add dh, dh; ret 0xf80; 
0x0000000000190c00: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000000bbf25: and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000013f865: and byte ptr [rdi], cl; xchg esp, eax; ret; 
0x000000000018fafa: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000001901ec: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000018a658: and byte ptr [rdx - 0x13abfb2], cl; jg 0x18a677; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000155014: and byte ptr [rdx], 6; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000061b1d: and byte ptr [rdx], al; add byte ptr [rax - 0x77], cl; ret 0x8944; 
0x000000000015799d: and byte ptr [rsi + 0x10], dh; add dword ptr [rbx + 0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000018d60a: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015ba6d: and byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf66; 
0x000000000018d605: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000042ab3: and byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc35d; 
0x00000000000ac632: and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x0000000000041cd4: and byte ptr [rsi - 0x77], 0x44; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c5d: and byte ptr [rsi - 0x77], 0x44; and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000116eb9: and byte ptr [rsp + rbp*8 - 0x3a], dh; inc dword ptr [rax]; mov rax, r8; ret; 
0x000000000012bdc1: and byte ptr [rsp + rcx + 0x5b], dh; ret; 
0x000000000018c4b7: and byte ptr ds:[rbx], bh; cmp r12b, byte ptr [rax]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000008ce5a: and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000bc198: and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000cfae2: and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000000bcd54: and ch, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000a08d6: and ch, 2; lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0836: and ch, 2; lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000001849d3: and ch, al; std; xlatb; ret; 
0x000000000018470c: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000189534: and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x00000000000e4f53: and ch, dh; jb 0xe4fa0; cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x00000000000cfacd: and cl, 0xf; je 0xcfaf0; ret; 
0x00000000000fbda8: and cl, bpl; ret; 
0x000000000011cc2a: and cl, byte ptr [rax + 0x39]; ret; 
0x000000000009c1ed: and cl, byte ptr [rax - 0x73]; clc; ret; 
0x00000000000a0b7e: and cl, byte ptr [rcx + rcx*4 - 0x28]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099f51: and cl, byte ptr [rdi + 0x15]; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000000f75b8: and cl, byte ptr [rdi]; mov dh, 0x57; cmp dh, dh; ret 0xf08; 
0x00000000000a08e4: and cl, byte ptr [rip + 0x450f4800]; ret 0xfc3; 
0x0000000000135366: and cl, ch; ret 0; 
0x00000000000fbda9: and cl, ch; ret; 
0x00000000000bc0fb: and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x0000000000192ad0: and dh, 0xf; je 0x192af0; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x00000000000cef50: and dh, 0xf; je 0xcef70; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x00000000000cefb0: and dh, 0xf; je 0xcefd0; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cf010: and dh, 0xf; je 0xcf020; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf060: and dh, 0xf; je 0xcf070; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x000000000009f75d: and dh, 2; lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x000000000006152f: and dh, dh; ret 0x7450; 
0x0000000000192aa2: and dl, 0xf; je 0x192ac0; mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192be0; ret; 
0x00000000000cef26: and dl, 0xf; je 0xcef40; mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000cef86: and dl, 0xf; je 0xcefa0; mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefe6: and dl, 0xf; je 0xcf000; mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf036: and dl, 0xf; je 0xcf050; mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x0000000000116d4a: and dl, byte ptr [rcx + 0xd]; add byte ptr [rbx - 0x387c0f19], al; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000e5a8a: and dl, byte ptr [rdi - 0x6f990005]; xor eax, eax; ret; 
0x0000000000096c47: and dword ptr [rax + 0x39], ecx; ret 0x840f; 
0x000000000011cc1b: and dword ptr [rax - 0x10], ebx; dec dword ptr [rbp + rcx*4 + 5]; adc edx, dword ptr [rdx - 0x7ab7fff7]; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x000000000010e8c5: and dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x000000000015a291: and dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; fild dword ptr [rcx - 0x77]; ret 0xf883; 
0x000000000006c7fb: and dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x0000000000137396: and dword ptr [rbp + 1], 0; add dh, dh; ret 0xf04; 
0x0000000000117c2b: and dword ptr [rbp + rcx], edi; syscall; ret; 
0x000000000011314b: and dword ptr [rbp - 0x389bfff3], ecx; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000027bdf: and dword ptr [rbx + 3], 0; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000087d20: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7c: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ac8ae: and dword ptr [rcx - 0x77], ecx; ret; 
0x0000000000094d2d: and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x00000000000a05cb: and dword ptr [rdi + rcx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0xf03aa; cmove rax, rdx; ret; 
0x0000000000160a9a: and dword ptr [rdi + rdx*8], eax; xor eax, eax; ret; 
0x000000000002629b: and dword ptr [rdi - 0x76b7ffe4], ebp; ret 0x2b48; 
0x000000000009389b: and dword ptr [rdi - 0x76b7ffeb], ebp; sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x000000000008dee4: and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000043be4: and dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000088537: and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x0000000000042a9e: and dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xc4e8; 
0x0000000000123de3: and dword ptr [rsi - 0x7b17fff4], edi; in eax, 0xef; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000b795b: and dword ptr [rsi], eax; add byte ptr [rax], al; ret; 
0x000000000012124b: and dword ptr [rsp + rcx + 0x64d8f700], ebp; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000002440f: and eax, 0; ret; 
0x0000000000061bc0: and eax, 0x100; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001136a7: and eax, 0x100f; ret; 
0x0000000000094c48: and eax, 0x10; ret; 
0x000000000018cf91: and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000117bf3: and eax, 0x18; test eax, eax; jne 0x117c08; sub dword ptr [rip + 0xd7c4d], 1; ret; 
0x0000000000063081: and eax, 0x18; test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f33: and eax, 0x18; test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000090fe7: and eax, 0x18; test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000938f3: and eax, 0x18; test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x000000000002fd60: and eax, 0x1f0fffff; add byte ptr [rax], r8b; ret; 
0x00000000000cf581: and eax, 0x1f; je 0xcf4c5; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf621: and eax, 0x1f; je 0xcf680; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x0000000000041dee: and eax, 0x200; ret; 
0x000000000010299c: and eax, 0x28; jne 0x1029f6; add rsp, 0x38; ret; 
0x000000000010d176: and eax, 0x28; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d32b: and eax, 0x28; jne 0x10d338; add rsp, 0x10; pop rbp; ret; 
0x000000000010d43b: and eax, 0x28; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010d48d: and eax, 0x28; jne 0x10d499; add rsp, 0x18; ret; 
0x000000000010decb: and eax, 0x28; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4c1: and eax, 0x28; jne 0x10e565; add rsp, 0x68; ret; 
0x000000000010e602: and eax, 0x28; jne 0x10e6bf; add rsp, 0x30; pop rbx; ret; 
0x000000000010e732: and eax, 0x28; jne 0x10e7ef; add rsp, 0x30; pop rbx; ret; 
0x000000000010f300: and eax, 0x28; jne 0x10f350; add rsp, 0x130; pop rbp; ret; 
0x000000000010fb8e: and eax, 0x28; jne 0x10fb9d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112a50: and eax, 0x28; jne 0x112ad6; add rsp, 0x40; pop r12; ret; 
0x00000000001133c6: and eax, 0x28; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113455: and eax, 0x28; jne 0x1134a3; add rsp, 0x18; ret; 
0x000000000011350d: and eax, 0x28; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135ab: and eax, 0x28; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113a88: and eax, 0x28; jne 0x113ab4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113af8: and eax, 0x28; jne 0x113b0b; add rsp, 0x18; ret; 
0x000000000011498a: and eax, 0x28; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a2a: and eax, 0x28; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114adf: and eax, 0x28; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114baf: and eax, 0x28; jne 0x114c2b; add rsp, 0x38; ret; 
0x0000000000114ca9: and eax, 0x28; jne 0x114cb5; add rsp, 0x28; ret; 
0x000000000011508c: and eax, 0x28; jne 0x115129; add rsp, 0x60; pop rbp; ret; 
0x00000000001157ef: and eax, 0x28; jne 0x115807; add rsp, 0x58; ret; 
0x0000000000115868: and eax, 0x28; jne 0x115874; add rsp, 0x28; ret; 
0x000000000011593f: and eax, 0x28; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b63: and eax, 0x28; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c32: and eax, 0x28; jne 0x116c75; add rsp, 0x38; ret; 
0x0000000000118293: and eax, 0x28; jne 0x1182a2; add rsp, 0xd8; ret; 
0x000000000011836c: and eax, 0x28; jne 0x11837b; add rsp, 0xd8; ret; 
0x00000000001196b4: and eax, 0x28; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011bd28: and eax, 0x28; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bde8: and eax, 0x28; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc6: and eax, 0x28; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c22f: and eax, 0x28; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c49c: and eax, 0x28; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x000000000011f0b4: and eax, 0x28; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120ab9: and eax, 0x28; jne 0x120ac5; add rsp, 0x18; ret; 
0x0000000000120e78: and eax, 0x28; jne 0x120e8f; add rsp, 0xa0; pop rbx; ret; 
0x00000000001210fe: and eax, 0x28; jne 0x12114b; add rsp, 0x58; ret; 
0x0000000000129b4a: and eax, 0x28; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b873: and eax, 0x28; jne 0x12b882; add rsp, 0xd8; ret; 
0x000000000012d0cf: and eax, 0x28; jne 0x12d1ad; leave; ret; 
0x000000000012de54: and eax, 0x28; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012df4a: and eax, 0x28; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e064: and eax, 0x28; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012e12c: and eax, 0x28; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012ef6a: and eax, 0x28; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f084: and eax, 0x28; jne 0x12f093; add rsp, 0xd8; ret; 
0x000000000012f14c: and eax, 0x28; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f593: and eax, 0x28; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f3: and eax, 0x28; jne 0x12f605; add rsp, 0x28; ret; 
0x000000000012f6bc: and eax, 0x28; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f79c: and eax, 0x28; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f87c: and eax, 0x28; jne 0x12f88b; add rsp, 0xd8; ret; 
0x00000000001365ca: and eax, 0x28; jne 0x1365f9; add rsp, 0x38; ret; 
0x0000000000136667: and eax, 0x28; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d4: and eax, 0x28; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013c6ed: and eax, 0x28; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013e124: and eax, 0x28; jne 0x13e145; add rsp, 0x20; pop rbx; ret; 
0x000000000013e179: and eax, 0x28; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1cc: and eax, 0x28; jne 0x13e1d8; add rsp, 0x28; ret; 
0x000000000013ea5b: and eax, 0x28; jne 0x13ea67; add rsp, 0x18; ret; 
0x00000000001449b8: and eax, 0x28; jne 0x1449c6; add rsp, 0x10; pop r12; ret; 
0x0000000000146326: and eax, 0x28; jne 0x146333; add rsp, 0x40; pop rbp; ret; 
0x00000000001490fc: and eax, 0x28; jne 0x149143; add rsp, 0x10; pop rbx; ret; 
0x000000000014966f: and eax, 0x28; jne 0x1496a2; add rsp, 0x10; pop rbx; ret; 
0x000000000014970d: and eax, 0x28; jne 0x149745; add rsp, 0x10; pop rbx; ret; 
0x000000000014a320: and eax, 0x28; jne 0x14a337; add rsp, 0x40; pop rbx; ret; 
0x000000000015171e: and eax, 0x28; jne 0x151741; add rsp, 0x10; pop rbx; ret; 
0x0000000000151a70: and eax, 0x28; jne 0x151aea; add rsp, 0x10; pop r12; ret; 
0x0000000000151ce7: and eax, 0x28; jne 0x151d5a; add rsp, 0x30; pop rbx; ret; 
0x0000000000151e27: and eax, 0x28; jne 0x151e9a; add rsp, 0x30; pop rbx; ret; 
0x00000000001539e0: and eax, 0x28; jne 0x1539ec; add rsp, 0x78; ret; 
0x0000000000153a56: and eax, 0x28; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac6: and eax, 0x28; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b36: and eax, 0x28; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b97: and eax, 0x28; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bfb: and eax, 0x28; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c66: and eax, 0x28; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce9: and eax, 0x28; jne 0x153cf5; add rsp, 0x78; ret; 
0x000000000015421e: and eax, 0x28; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c91: and eax, 0x28; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000155cfc: and eax, 0x28; jne 0x155d43; add rsp, 0x10; pop rbx; ret; 
0x0000000000155d8c: and eax, 0x28; jne 0x155dd2; add rsp, 0x10; pop rbx; ret; 
0x0000000000155e5c: and eax, 0x28; jne 0x155ea5; add rsp, 0x10; pop rbp; ret; 
0x00000000001562ac: and eax, 0x28; jne 0x1562f4; add rsp, 0x10; pop rbx; ret; 
0x000000000015633c: and eax, 0x28; jne 0x156383; add rsp, 0x10; pop rbx; ret; 
0x000000000015650c: and eax, 0x28; jne 0x156559; add rsp, 0x10; pop rbx; ret; 
0x000000000015659c: and eax, 0x28; jne 0x1565e3; add rsp, 0x10; pop rbx; ret; 
0x000000000015728c: and eax, 0x28; jne 0x1572d5; add rsp, 0x10; pop rbx; ret; 
0x000000000015731c: and eax, 0x28; jne 0x157365; add rsp, 0x10; pop rbx; ret; 
0x00000000001573ac: and eax, 0x28; jne 0x1573f5; add rsp, 0x10; pop rbx; ret; 
0x000000000015743c: and eax, 0x28; jne 0x157485; add rsp, 0x10; pop rbx; ret; 
0x0000000000157b14: and eax, 0x28; jne 0x157b24; add rsp, 0x90; pop rbx; ret; 
0x0000000000157b88: and eax, 0x28; jne 0x157b97; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157be9: and eax, 0x28; jne 0x157bf8; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157c55: and eax, 0x28; jne 0x157c62; add rsp, 0x10; pop rbx; ret; 
0x0000000000157cc8: and eax, 0x28; jne 0x157cd5; add rsp, 0x10; pop rbx; ret; 
0x000000000015cabd: and eax, 0x28; jne 0x15caf4; add rsp, 0x18; ret; 
0x000000000015cdb4: and eax, 0x28; jne 0x15cdec; add rsp, 0x10; pop rbp; ret; 
0x000000000015ce44: and eax, 0x28; jne 0x15ce7c; add rsp, 0x10; pop rbp; ret; 
0x000000000015fa0f: and eax, 0x28; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb06: and eax, 0x28; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcaf: and eax, 0x28; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd78: and eax, 0x28; jne 0x15fdbc; add rsp, 0x38; ret; 
0x0000000000160e0b: and eax, 0x28; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000163396: and eax, 0x28; jne 0x1633a3; add rsp, 0x10; pop rbx; ret; 
0x000000000016341c: and eax, 0x28; jne 0x163429; add rsp, 0x10; pop rbx; ret; 
0x0000000000042b90: and eax, 0x28; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042eea: and eax, 0x28; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043017: and eax, 0x28; jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000004322b: and eax, 0x28; jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043323: and eax, 0x28; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bf: and eax, 0x28; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043642: and eax, 0x28; jne 0x43658; add rsp, 0x118; ret; 
0x000000000004374d: and eax, 0x28; jne 0x4375c; add rsp, 0x98; ret; 
0x0000000000043991: and eax, 0x28; jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043ced: and eax, 0x28; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441d: and eax, 0x28; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743e: and eax, 0x28; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752e: and eax, 0x28; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047db8: and eax, 0x28; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e05: and eax, 0x28; jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e57: and eax, 0x28; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea4: and eax, 0x28; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef7: and eax, 0x28; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f44: and eax, 0x28; jne 0x47f50; add rsp, 0x18; ret; 
0x00000000000521f1: and eax, 0x28; jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c00: and eax, 0x28; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414a: and eax, 0x28; jne 0x54159; add rsp, 0xd8; ret; 
0x00000000000578bd: and eax, 0x28; jne 0x57945; leave; ret; 
0x000000000005b5ae: and eax, 0x28; jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b870: and eax, 0x28; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c73: and eax, 0x28; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d48: and eax, 0x28; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dff: and eax, 0x28; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed1: and eax, 0x28; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f93: and eax, 0x28; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062053: and eax, 0x28; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062141: and eax, 0x28; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062218: and eax, 0x28; jne 0x62227; add rsp, 0xd8; ret; 
0x000000000006283e: and eax, 0x28; jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de2: and eax, 0x28; jne 0x62df7; add rsp, 0x18; ret; 
0x000000000006316b: and eax, 0x28; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063246: and eax, 0x28; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c3: and eax, 0x28; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657f: and eax, 0x28; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086678: and eax, 0x28; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086748: and eax, 0x28; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086801: and eax, 0x28; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000008dbd3: and eax, 0x28; jne 0x8dbeb; add rsp, 0x48; ret; 
0x00000000000991fa: and eax, 0x28; jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x000000000009d5fa: and eax, 0x28; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000ca0ae: and eax, 0x28; jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000cab8b: and eax, 0x28; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac66: and eax, 0x28; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000d01ee: and eax, 0x28; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d0268: and eax, 0x28; jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d1034: and eax, 0x28; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b7: and eax, 0x28; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf87: and eax, 0x28; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000ddc50: and eax, 0x28; jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce4: and eax, 0x28; jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000df40a: and eax, 0x28; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e3661: and eax, 0x28; jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3831: and eax, 0x28; jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418a: and eax, 0x28; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422a: and eax, 0x28; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44fa: and eax, 0x28; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45aa: and eax, 0x28; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000004785d: and eax, 0x28; movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x0000000000057b3a: and eax, 0x2c7; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000014637f: and eax, 0x30; call rax; lea rax, [rip + 0xaa773]; add rsp, 8; ret; 
0x0000000000023a46: and eax, 0x30; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000000bc116: and eax, 0x3fc00; ret; 
0x00000000000bc216: and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000bc161: and eax, 0x3fffc00; ret; 
0x000000000010286a: and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x00000000000c8c42: and eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000012da17: and eax, 0x480005dc; cmove eax, edx; ret; 
0x0000000000153177: and eax, 0x4800098c; lea edx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000114c37: and eax, 0x48000d72; mov eax, dword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x00000000000a0627: and eax, 0x48000eb0; cmove eax, edx; ret; 
0x000000000009f237: and eax, 0x480014cc; lea edx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x0000000000113a8e: and eax, 0x48c88944; add esp, 0x38; ret; 
0x000000000015ca47: and eax, 0x640008f4; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000008757a: and eax, 0x6e0f4866; ret; 
0x0000000000042298: and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000342b6: and eax, 0x7f; ret; 
0x00000000000bc1ff: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x00000000000bc1b7: and eax, 0x7ff80000; ret; 
0x0000000000041ba2: and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000057c54: and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x00000000000c87c8: and eax, 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008cd56: and eax, 0x804; ret; 
0x00000000000424bb: and eax, 0x807fffff; lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000421b8: and eax, 0x80; ret; 
0x0000000000041cd2: and eax, 0x89668000; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c5b: and eax, 0x89668000; and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000044295: and eax, 0x98c48148; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000140fb7: and eax, 0xba0007b5; ret 1; 
0x000000000009466b: and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x00000000000947fb: and eax, 0xc; pop rbx; ret; 
0x0000000000051647: and eax, 0xe9ffffdc; imul esp, edx, -1; push qword ptr [rcx]; fisttp dword ptr [rcx - 0x77]; ret 0xcde9; 
0x0000000000120247: and eax, 0xf7000cbc; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000120047: and eax, 0xf7000cbe; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa47: and eax, 0xf7000cc4; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011f947: and eax, 0xf7000cc5; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b47: and eax, 0xf7000d33; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115147: and eax, 0xf7000d6d; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000114f47: and eax, 0xf7000d6f; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd47: and eax, 0xf7000dc1; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010da47: and eax, 0xf7000de4; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4447: and eax, 0xf700107a; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000102a94: and eax, 0xf; ret; 
0x000000000018eb80: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e2b3: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000001136ed: and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x000000000011ee8a: and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000113c7b: and eax, 0xfffffecf; or eax, 0x30; mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000012fb0a: and eax, 0xffffff; ret; 
0x00000000000b1c94: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c37: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x0000000000115891: and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000094e68: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x000000000013b3e7: and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000010044b: and eax, 0xfffffff9; or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000094d90: and eax, 0xfffffffd; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000009c201: and eax, 1; cmovne rax, rdx; ret; 
0x0000000000094d17: and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000122c40: and eax, 1; mov eax, r8d; ret; 
0x0000000000034246: and eax, 1; ret; 
0x00000000000340c6: and eax, 2; movzx eax, ax; ret; 
0x0000000000055bec: and eax, 2; sub eax, 1; ret; 
0x000000000011f8d3: and eax, 3; ret; 
0x0000000000034166: and eax, 4; movzx eax, ax; ret; 
0x0000000000034086: and eax, 8; movzx eax, ax; ret; 
0x00000000000424e8: and eax, 8; ret; 
0x00000000000c79e0: and eax, dword ptr [rax]; add dh, dh; ret; 
0x00000000000bc3a4: and eax, dword ptr [rbx - 0x76bbfe3a]; ror byte ptr [rcx - 0x765df00f], 1; ret 0xe283; 
0x000000000009f13d: and eax, dword ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0xf1a09; cmovne rax, rdx; ret; 
0x000000000011fac5: and eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fad4; ret; 
0x00000000001786d9: and eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x0000000000123271: and eax, dword ptr [rsi + 0x10]; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000b1912: and eax, ecx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x0000000000041b23: and eax, ecx; ret; 
0x000000000011ef03: and eax, edi; or rax, rsi; ret; 
0x000000000011f889: and eax, edx; mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000041fac: and eax, edx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000041ea3: and eax, edx; ret; 
0x0000000000041ee4: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000ac718: and eax, edx; test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x0000000000034491: and eax, esi; ret; 
0x00000000000dd14b: and ebp, ebp; adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010e14b: and ebp, ebx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000087d21: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7d: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094606: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x00000000000ee45f: and ebx, 8; je 0xee3f7; pop rbx; ret; 
0x0000000000085914: and ebx, dword ptr [rbx + 0x4c]; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000141a5d: and ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000bdf89: and ebx, dword ptr [rcx]; add dword ptr [rax], eax; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000012fbe8: and ebx, esi; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x00000000000bc130: and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000047d76: and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000000ee40e: and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x000000000018eb85: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e2b8: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000012da2b: and ecx, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8ab: and ecx, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d96b: and ecx, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09ab: and ecx, 8; lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a063b: and ecx, 8; lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04db: and ecx, 8; lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x000000000002a90d: and ecx, dword ptr [rax + 0x39]; ret 0x850f; 
0x00000000000c95e7: and ecx, dword ptr [rax + 0x63]; ret 0x8d48; 
0x0000000000121775: and ecx, dword ptr [rax - 0x77]; ret 0x2548; 
0x00000000000a43a3: and ecx, dword ptr [rbp + 0x63490e78]; ret 0xf41; 
0x00000000000d002c: and ecx, dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x00000000000957d5: and ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116ed4: and ecx, dword ptr [rcx + rcx*4 - 0x40]; mov byte ptr [rsi - 1], 0; ret; 
0x000000000011750a: and ecx, dword ptr [rdi]; xchg ebp, eax; ret 0x2f3c; 
0x00000000001175ca: and ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc084; 
0x00000000001230f5: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123108; ret; 
0x000000000012315e: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a45: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aa2: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123ab8; ret; 
0x00000000000a0844: and ecx, dword ptr [rip + 0x450f4800]; ret 0xfc3; 
0x0000000000123362: and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123347: and ecx, dword ptr [rsi + 0xc]; lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123360; ret; 
0x0000000000123c77: and ecx, dword ptr [rsi + 0xc]; lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123c90; ret; 
0x000000000018a337: and ecx, ebp; ret; 
0x00000000000420e3: and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203f: and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000102a3a: and ecx, esi; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000197267: and edi, 0x20; je 0x19727c; movss xmm0, dword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x00000000000342c6: and edi, 0xffffff80; sete al; ret; 
0x0000000000116d4e: and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000010c680: and edi, 0xfffffff8; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae2: and edi, 0xfffffff8; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x00000000000c4072: and edi, ecx; dec dword ptr [rax - 0x7d]; ret; 
0x000000000014ae8f: and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x0000000000047c97: and edx, 0x7fffffff; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x0000000000041d03: and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x000000000004227d: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x000000000012faf3: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fb81: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000011ee84: and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000008ac50: and edx, 0xffffffcf; mov dword ptr [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000095266: and edx, 0xfffffff0; test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000120e01: and edx, 0xfffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000ee40b: and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000000555fa: and edx, 1; je 0x55607; mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000055842: and edx, 1; je 0x5584f; mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000008ad43: and edx, 1; mov eax, edx; ret; 
0x00000000000ec4a0: and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000b1aae: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000012ee87: and edx, eax; lea rax, [rip + 0x5cc30]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcdf7: and edx, eax; lea rax, [rip + 0xcecd0]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000041fcb: and edx, eax; mov qword ptr [rdi], rdx; ret; 
0x0000000000042316: and edx, eax; movd xmm0, edx; mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000041f5c: and edx, eax; movq xmm0, rdx; ret; 
0x0000000000042330: and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x0000000000042360: and esi, 0x80000000; movd xmm0, esi; ret; 
0x00000000000422fd: and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x0000000000042443: and esi, 0x807fffff; shl eax, 0x17; or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000423b6: and esi, 0x807fffff; shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x0000000000057cc0: and esi, 0xd6097fff; mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x000000000012fb1c: and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000033df4: and esi, dword ptr [rdi + 0x10]; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000118749: and esi, dword ptr [rdi]; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012310a: and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000b1ba2: and esi, eax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000e5061: and esi, ebx; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000110129: and esi, ecx; dec dword ptr [rbp + rcx*4 + 0x24]; sbb byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000000b19ac: and esi, ecx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000010d9eb: and esp, 0xc764000d; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000026c81: and esp, dword ptr [rbp - 0x76b3ffe4]; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000160a99: and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000043be3: and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000094605: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x000000000018470b: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000122c3f: and r8d, 1; mov eax, r8d; ret; 
0x000000000012da2a: and r9d, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8aa: and r9d, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d96a: and r9d, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09aa: and r9d, 8; lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a063a: and r9d, 8; lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04da: and r9d, 8; lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000cf580: and rax, 0x1f; je 0xcf4c5; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf620: and rax, 0x1f; je 0xcf680; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000b1c93: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c36: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x0000000000094e67: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000b1911: and rax, rcx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x000000000011ef02: and rax, rdi; or rax, rsi; ret; 
0x0000000000041fab: and rax, rdx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000041ee3: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000a0843: and rcx, qword ptr [rip + 0x450f4800]; ret 0xfc3; 
0x00000000000420e2: and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203e: and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x000000000010c67f: and rdi, 0xfffffffffffffff8; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae1: and rdi, 0xfffffffffffffff8; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000095265: and rdx, 0xfffffffffffffff0; test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000120e00: and rdx, 0xfffffffffffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000b1aad: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000012ee86: and rdx, rax; lea rax, [rip + 0x5cc30]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcdf6: and rdx, rax; lea rax, [rip + 0xcecd0]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000041fca: and rdx, rax; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f5b: and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000b1ba1: and rsi, rax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b19ab: and rsi, rcx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000057cbf: and si, 0x7fff; or esi, edx; mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041ef4: andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x0000000000042076: andpd xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042050: andpd xmm1, xmmword ptr [rip + 0x17a688]; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041efc: andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000423f9: andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d4: andps xmm0, xmmword ptr [rip + 0x17a355]; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000041ef5: andps xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x0000000000042077: andps xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042051: andps xmm1, xmmword ptr [rip + 0x17a688]; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041efd: andps xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x0000000000134bd3: bnd call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000012fa4a: bnd jb 0x12fa60; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000041d0a: bnd je 0x41c58; ret; 
0x000000000009f12f: bnd je 0x9f14b; test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x00000000000a8819: bnd je 0xa8810; ret; 
0x00000000000bdf7f: bnd je 0xbdf98; test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bdfb8: bnd je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000000951ba: bnd jo 0x951d2; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x00000000001887f1: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847b1: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000188811: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847c1: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018885d: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847ef: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000188384: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000000ac25a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000188726: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184856: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000ac170: bsf eax, eax; add rax, rdi; ret; 
0x000000000018d151: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e1: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847a1: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000184721: bsf eax, eax; cmp rdx, rax; jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d1: bsf eax, eax; cmp rdx, rax; jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x00000000000ac180: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac190: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac160: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000ac0bf: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000b16f7: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000b14c7: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000abf39: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce119: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce380: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce390: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a0: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b0: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000a06b9: bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06da: bsf eax, edi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000b1bfa: bsf eax, edx; ret; 
0x00000000000cf737: bsf eax, edx; shr rax, 2; ret; 
0x0000000000185061: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000185081: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000185047: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000184dd1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa55a: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000aa620: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183d84: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000cf343: bsf ecx, edx; cmp rax, rcx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000000183de9: bsf ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dad: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dcd: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa3f0: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183c21: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c41: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c61: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c07: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000b1d52: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf847: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000aa381: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000b1810: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000b15f0: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a06d9: bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000b1c42: bsf rax, rdx; ret; 
0x00000000000cf736: bsf rax, rdx; shr rax, 2; ret; 
0x00000000000aa559: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000aa61f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183e53: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000cf342: bsf rcx, rdx; cmp rax, rcx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000aa3ef: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000b1d51: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf846: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000aa380: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184b70: bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184b80: bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184b90: bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x0000000000184c5a: bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x00000000000ac776: bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000ac5a6: bsr eax, eax; add rax, rdi; ret; 
0x0000000000184a7f: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac650: bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac660: bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac670: bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000188641: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000ac6d0: bsr eax, eax; sub rdx, 0x10; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac6b0: bsr eax, eax; sub rdx, 0x20; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac690: bsr eax, eax; sub rdx, 0x30; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac680: bsr eax, eax; sub rdx, 0x40; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x00000000000b1bab: bsr eax, esi; add rax, rdi; ret; 
0x00000000000b1ab9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x00000000000b19b5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x00000000000b191a: bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1baa: bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b1ab8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000b19b4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000184e3c: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000157615: bswap eax; cdqe; mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x000000000014ff1e: bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014ff7b: bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ff4b: bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d13e: bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014d19b: bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d16b: bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000015087a: bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000150782: bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000015083d: bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000014d127: bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000012fac6: bswap eax; ret; 
0x0000000000184e3e: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000001575d2: bswap edx; add rax, 4; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157555: bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157595: bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000014ff03: bswap rax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000041ec4: btr edx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ec3: btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000057d61: bts eax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000b1f13: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf843: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1e74: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x0000000000057b51: bts esi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000057d60: bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000b1f12: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf842: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1e73: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x0000000000057b50: bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000001025ff: call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025a2: call 0x102520; add rsp, 0x18; ret; 
0x000000000012326f: call 0x10585579; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000123baf: call 0x10585eb9; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000010cfe6: call 0x10c7e0; add rsp, 0x18; ret; 
0x000000000010c7aa: call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162d9f: call 0x10e470; add rsp, 8; sar eax, 0x1f; ret; 
0x000000000012e8b8: call 0x10ea70; test rax, rax; je 0x12e8d0; add rsp, 8; ret; 
0x000000000011d727: call 0x111d72c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011d927: call 0x111d92c; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000024234: call 0x113370; cmp eax, -1; je 0x24328; add rsp, 0x98; ret; 
0x00000000001346db: call 0x113529b; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000001137b5: call 0x1136d0; pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x0000000000113b28: call 0x1143a0; add rsp, 0x18; ret; 
0x0000000000094cff: call 0x114c30; cdqe; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000146fa4: call 0x114c70; mov dword ptr [rip + 0xa9bcd], eax; add rsp, 8; ret; 
0x00000000001176e8: call 0x1173e0; mov qword ptr [rip + 0xd809c], rax; add rsp, 8; ret; 
0x0000000000118c85: call 0x118f80; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x00000000001191cd: call 0x1194d0; lea rax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x0000000000198891: call 0x11a800; pop rbx; mov qword ptr [rip + 0x553de], 0; ret; 
0x0000000000121af0: call 0x121280; movsxd rbx, ebx; mov qword ptr [rip + 0xca861], rbx; pop rbx; ret; 
0x000000000012200d: call 0x121ec0; ret; 
0x000000000012b996: call 0x12b630; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000012b969: call 0x12b630; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000012dbe5: call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012ebaa: call 0x12e340; nop; mov rax, rdi; ret; 
0x000000000012ec7b: call 0x12e340; ret; 
0x0000000000148a76: call 0x12fa70; nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x000000000002f593: call 0x12fa70; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x000000000012fe76: call 0x12fa70; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x000000000009e1d6: call 0x12fa70; nop dword ptr [rax + rax]; endbr64; ret; 
0x000000000014ee18: call 0x12fa70; nop dword ptr [rax]; endbr64; ret; 
0x0000000000157b24: call 0x12fa70; nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x000000000012d832: call 0x12fa70; nop word ptr [rax + rax]; endbr64; ret; 
0x00000000001468fe: call 0x12fa70; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x00000000001578fa: call 0x12fa70; nop; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000014e5ca: call 0x12fa70; nop; endbr64; ret; 
0x000000000013633d: call 0x1358b0; add rsp, 0x18; ret; 
0x0000000000136c7a: call 0x1366f0; add rsp, 0x18; ret; 
0x000000000013b3c3: call 0x13a680; cmp eax, -0xb; je 0x13b3c0; pop rbx; ret; 
0x0000000000140ccc: call 0x140750; or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x00000000001463a2: call 0x146270; or dword ptr [rip + 0xaa732], 2; add rsp, 8; lea rax, [rip + 0xaa747]; ret; 
0x00000000000d6c9e: call 0x149ab0a4; ret; 
0x000000000014dde4: call 0x149d80; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000001513f4: call 0x151110; add rsp, 0x28; ret; 
0x0000000000157e1c: call 0x153530; mov dword ptr [rax], 0; pop rbx; ret; 
0x000000000014aecd: call 0x1565f0; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x000000000014aeed: call 0x156ae0; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000148c92: call 0x1576d0; mov rax, r12; pop r12; ret; 
0x000000000002fdd1: call 0x15fd10; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000198cff: call 0x15fd10; pop rbp; mov qword ptr [rip + 0x57160], 0; ret; 
0x00000000000ec404: call 0x16170bcf; mov eax, 1; ret; 
0x00000000000428ac: call 0x192c70; add rsp, 0x10; pop rbx; ret; 
0x0000000000042a09: call 0x192c70; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042aa7: call 0x192c70; movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x000000000004288f: call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x00000000001970f5: call 0x197200; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000196937: call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000008def7: call 0x1e96200; ret; 
0x000000000008df07: call 0x1e96211; ret; 
0x0000000000122c3e: call 0x1f2af84; mov eax, r8d; ret; 
0x0000000000123600: call 0x1f2b946; mov eax, r8d; ret; 
0x000000000012cebc: call 0x1f351cf; ret; 
0x000000000010c376: call 0x22330; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000141a55: call 0x22330; mov dword ptr fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e815e: call 0x22330; mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000157970: call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000000ff519: call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000157e10: call 0x22330; mov qword ptr [rbx], 0; call 0x153530; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001197c0: call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000198c2d: call 0x22330; mov qword ptr [rip + 0x5692b], 0; add rsp, 8; ret; 
0x0000000000198e32: call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x000000000015321c: call 0x22330; mov qword ptr fs:[rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000843fe: call 0x22330; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000198bc6: call 0x22330; pop rbx; mov qword ptr [rip + 0x56559], 0; ret; 
0x000000000019737d: call 0x22330; test rbx, rbx; jne 0x19736d; pop rbx; ret; 
0x0000000000198943: call 0x22330; test rbx, rbx; jne 0x198935; pop rbx; ret; 
0x0000000000094ccc: call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x0000000000041295: call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001120c6: call 0x22330; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001458a4: call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x000000000013c3eb: call 0x224d0; add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x00000000000a0939: call 0x224d0; pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x00000000000a8e2d: call 0x22560; add rsp, 8; ret; 
0x0000000000162c3a: call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x000000000015d290: call 0x22580; test eax, eax; sete al; add rsp, 8; ret; 
0x000000000018bd3c: call 0x2364050; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000026f6c: call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x000000000005d8d1: call 0x2a05d8d4; ret; 
0x0000000000184d88: call 0x2a9d09c; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000008dedb: call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000046c78: call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000349e0: call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000007d660: call 0x39506ead; ret 0x8f0f; 
0x000000000007e841: call 0x3950808e; ret; 
0x0000000000041c8d: call 0x3fdfdd6b; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041cb9: call 0x3fdfdd97; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000046072: call 0x4160a1d2; pop rbp; pop rbp; ret; 
0x00000000000828cf: call 0x41646a31; pop rbp; pop r14; ret; 
0x00000000000828f6: call 0x41646a58; pop rbp; pop r14; ret; 
0x000000000008d412: call 0x41651574; pop rbp; pop r14; ret; 
0x00000000000bcc02: call 0x41680d64; pop rbp; ret; 
0x00000000000e2fd1: call 0x416a7133; pop rbp; ret; 
0x00000000000e300f: call 0x416a7171; pop rbp; ret; 
0x00000000000e348b: call 0x416a75eb; pop rbp; pop rbp; ret; 
0x00000000000e4352: call 0x416a84b2; pop rbp; pop rbp; ret; 
0x000000000011a01a: call 0x416de17c; pop rbp; ret; 
0x00000000001415b4: call 0x41705716; pop rbp; pop r14; ret; 
0x0000000000141755: call 0x417058b7; pop rbp; pop r14; ret; 
0x0000000000041c10: call 0x41c15; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c67: call 0x41c6c; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d13c: call 0x41dce042; mov dword ptr [rax + 0xa8], eax; mov eax, 1; ret; 
0x000000000014ff1c: call 0x41dd0e22; mov dword ptr [rax + 0x48], eax; mov eax, 1; ret; 
0x000000000009efc7: call 0x41ec7918; pop rsp; pop r13; ret; 
0x000000000009efdc: call 0x41ec792d; pop rsp; pop r13; ret; 
0x0000000000081a3f: call 0x44081a44; mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000081bfd: call 0x44081c02; mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000047d18: call 0x47800; add rsp, 8; ret; 
0x0000000000057d63: call 0x478ec598; or byte ptr [rax + 2], bh; ret; 
0x0000000000047f7f: call 0x48120; lea rax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x000000000015f8bd: call 0x4815f8c3; mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000445bf: call 0x48aa0; add rsp, 8; ret; 
0x00000000000bcaa7: call 0x48e453f4; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000b6a04: call 0x48f45519; mov eax, edi; ret; 
0x00000000000b6af4: call 0x48f45609; mov eax, edx; ret; 
0x00000000000b9b44: call 0x48f48659; mov eax, edi; ret; 
0x0000000000198944: call 0x491971e2; test ebx, ebx; jne 0x198935; pop rbx; ret; 
0x00000000001783b3: call 0x4aa4cbc8; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x00000000001785a9: call 0x4aa4cdaf; add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000017862f: call 0x4aa4ce39; add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x0000000000178691: call 0x4aa4ce9f; or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x00000000001786b1: call 0x4aa4cec0; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x0000000000178713: call 0x4aa4cf25; or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000017c992: call 0x4aa5119a; add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017c9ba: call 0x4aa511c3; add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017c9e0: call 0x4aa511ea; add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017caa2: call 0x4aa512b1; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017cb34: call 0x4aa51346; or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018e685: call 0x4e87f67d; call 0xf7fcf41; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018f855: call 0x4e88084d; call 0xf7fe111; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016d460: call 0x4f06e457; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016ff90: call 0x4f070f87; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000094e71: call 0x5096967a; add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000522ab: call 0x51cd0; test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x000000000009869d: call 0x5496cea4; ret; 
0x00000000000578b0: call 0x56b00; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x00000000001179c3: call 0x5bf2030c; pop r12; pop r13; pop rbp; ret; 
0x000000000008f50f: call 0x5c4a526f; ret; 
0x000000000009c362: call 0x5c4b20c2; pop r13; pop r14; ret; 
0x00000000000bcba7: call 0x5c4d2907; pop r13; ret; 
0x00000000000bcbde: call 0x5c4d293e; pop r13; ret; 
0x00000000000e82d4: call 0x5c4fe034; ret; 
0x00000000000e83d5: call 0x5c4fe135; ret; 
0x0000000000114d6c: call 0x5c52aacc; pop r13; ret; 
0x000000000011a005: call 0x5c52fd65; pop r13; ret; 
0x0000000000127909: call 0x5c53d669; ret; 
0x0000000000130774: call 0x5c5464d4; pop r13; pop r14; ret; 
0x000000000014152c: call 0x5c55728c; pop r13; pop r14; ret; 
0x00000000001415ea: call 0x5c55734a; pop r13; pop r14; ret; 
0x00000000001986d7: call 0x5c5ae437; ret; 
0x000000000009f9ea: call 0x5d4b5630; ret; 
0x000000000009fa49: call 0x5d4b568f; ret; 
0x00000000001417d2: call 0x5d557418; pop r14; ret; 
0x000000000014183d: call 0x5d557483; pop r14; ret; 
0x000000000012fbe6: call 0x61d60; pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000000118cc3: call 0x61e20; mov rax, r12; pop r12; ret; 
0x0000000000119208: call 0x61e20; pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000000160afa: call 0x63a00; test rbx, rbx; jne 0x160b10; pop rbx; ret; 
0x0000000000131721: call 0x64141731; mov dword ptr [r8], r9d; add rsp, 0x18; ret; 
0x00000000000469a6: call 0x6491b5ae; ret; 
0x0000000000160b2a: call 0x6bbd0; test rbx, rbx; jne 0x160b40; pop rbx; ret; 
0x0000000000198b11: call 0x6ca6d319; ret; 
0x0000000000198b65: call 0x6ca6d36d; ret; 
0x0000000000041cdd: call 0x6cdf5cbd; and al, 8; ret; 
0x00000000000cfac5: call 0x74df7ecc; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000018eb68: call 0x75e1237d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000004a19f: call 0x7609de05; ret; 
0x000000000004cfdf: call 0x760a0c45; ret; 
0x000000000004fbdf: call 0x760a3845; ret; 
0x0000000000058e7f: call 0x760acae5; ret; 
0x00000000001164d1: call 0x7612a0df; and byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000001165c1: call 0x7612a1cf; and byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000001166b1: call 0x7612a2bf; and byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000116799: call 0x7612a3a7; and byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000018d0a4: call 0x781195ab; ret; 
0x000000000018d15c: call 0x78119663; ret; 
0x000000000018d180: call 0x78119687; ret; 
0x000000000018d1a0: call 0x781196a7; ret; 
0x000000000018d1ec: call 0x781196f3; ret; 
0x000000000018d28d: call 0x78119794; ret; 
0x000000000018d3c8: call 0x781198cf; ret; 
0x000000000018d3fa: call 0x78119901; ret; 
0x000000000018d411: call 0x78119918; ret; 
0x000000000018d435: call 0x7811993c; ret; 
0x000000000018d455: call 0x7811995c; ret; 
0x000000000018d475: call 0x7811997c; ret; 
0x000000000018d485: call 0x7811998c; ret; 
0x000000000018d4ac: call 0x781199b3; ret; 
0x000000000018d4d0: call 0x781199d7; ret; 
0x000000000018d4f0: call 0x781199f7; ret; 
0x000000000018d53c: call 0x78119a43; ret; 
0x000000000014bf51: call 0x78d54457; ret 0x548b; 
0x00000000000fe438: call 0x7c932c3f; and al, 8; add byte ptr [rdi], cl; xchg esp, eax; ret 0xd020; 
0x0000000000198663: call 0x7da4cf67; adc al, ch; ret 0xe89c; 
0x00000000000b770b: call 0x7f98bf13; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000b7726: call 0x7f98bf2f; add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x00000000000b7749: call 0x7f98bf53; add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x00000000000b780e: call 0x7f98c01e; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b782e: call 0x7f98c03f; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000b7850: call 0x7f98c062; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x00000000000b7953: call 0x7f98c16d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000000b7a0a: call 0x7f98c229; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b7a94: call 0x7f98c2b6; sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x00000000000b7b24: call 0x7f98c349; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x00000000000b8e2d: call 0x7f98d637; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000b8f44: call 0x7f98d756; or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x00000000000b9074: call 0x7f98d88d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b90a7: call 0x7f98d8c1; adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x00000000000b9169: call 0x7f98d987; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000b9228: call 0x7f98da4a; sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x000000000018a49c: call 0x7fa5eca4; add ecx, dword ptr [rdi]; test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018afe2: call 0x7fa5f7e8; add dword ptr [rdi], ecx; test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b1ac: call 0x7fa5f9b3; add cl, byte ptr [rdi]; test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000013c723: call 0x7ff44a2c; ret; 
0x0000000000157731: call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x000000000011634d: call 0x81dd0; mov eax, 1; add rsp, 8; ret; 
0x0000000000157d1c: call 0x830f0; add rsp, 8; ret; 
0x000000000002fdbd: call 0x84586c3; pop rbx; ret; 
0x000000000002fda5: call 0x84686ab; cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x00000000000832c1: call 0x86eb0; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000157d00: call 0x8b310; add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000115a8e: call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x0000000000117334: call 0x8b9e0; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000008e58b: call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x000000000008fd89: call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000090083: call 0x913e0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000093e77: call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000e2c8e: call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000011324f: call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000e2e6e: call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d48: call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fda: call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120bf7: call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000043499: call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001129ae: call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e9d1: call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010e01c: call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000113052: call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fcb: call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000012036a: call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000010c1be: call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120430: call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x00000000000e2fca: call 0x94a70; mov eax, r13d; pop rbp; pop r12; pop r13; ret; 
0x0000000000099428: call 0x952e0; mov rax, qword ptr [rip + 0x152a3c]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000bce33: call 0xbcd90; lea rax, [rax + rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047392: call 0xbd250; mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000012eb68: call 0xbd470; add rsp, 8; ret; 
0x0000000000047551: call 0xbd470; pop rbx; ret; 
0x00000000000dcfb9: call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x00000000000e2ec2: call 0xdd160; test eax, eax; jne 0xe2ed0; add rsp, 8; ret; 
0x0000000000141208: call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x00000000000f2403: call 0xeca60; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000010d041: call 0xf10d046; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000018e68a: call 0xf7fcf41; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018f85a: call 0xf7fe111; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000198cb7: call 0xffffffff80389cbb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000019901f: call 0xffffffff8038a023; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019904f: call 0xffffffff8038a053; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019907f: call 0xffffffff8038a083; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001990af: call 0xffffffff8038a0b3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001990df: call 0xffffffff8038a0e3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000f4d61: call 0xffffffff835939db; ret; 
0x00000000000f5826: call 0xffffffff835948a0; ret; 
0x0000000000070889: call 0xffffffff89070897; ret 0xc083; 
0x00000000000774f4: call 0xffffffff8907750b; ret 0xc083; 
0x0000000000057da3: call 0xffffffff890c8eb7; add bh, byte ptr [rax + 2]; ret; 
0x000000000013c9a8: call 0xffffffff8913c9b0; sar byte ptr [rdx + 0x7fffffff], 1; add eax, ecx; cmovs eax, edx; ret; 
0x0000000000093db3: call 0xffffffff89523db0; ret; 
0x00000000000a53da: call 0xffffffff895353de; ret; 
0x00000000000e7669: call 0xffffffff89577663; ret; 
0x00000000001556bb: call 0xffffffff895e1e49; ret; 
0x000000000015584b: call 0xffffffff895e1fd9; ret; 
0x000000000015083b: call 0xffffffff89dd1741; add bh, byte ptr [rax + 1]; ret; 
0x00000000000d13c7: call 0xffffffff89dd7714; ret; 
0x000000000005cf10: call 0xffffffff8a05cf13; sar dword ptr [rcx], cl; ret 0x4d74; 
0x00000000000b421c: call 0xffffffffa7915131; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000db427: call 0xffffffffaf1cfd30; ret 0xc148; 
0x00000000000a8b7b: call 0xffffffffb7199309; and al, 0xec; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8aa3: call 0xffffffffb7199b31; push rsp; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000e4f7e: call 0xffffffffb80e5080; jg 0xe4f85; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000185032: call 0xffffffffc542c636; std; xlatb; ret; 
0x000000000018bf72: call 0xffffffffc5433576; std; xlatb; ret; 
0x0000000000129474: call 0xffffffffc64ad498; mov eax, edx; cmove eax, ecx; ret; 
0x000000000005b330: call 0xffffffffc73efb39; jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000129437: call 0xffffffffc74ad45b; mov eax, edx; cmove eax, ecx; ret; 
0x000000000005aba1: call 0xffffffffc74eaba5; ret 0xffff; 
0x0000000000198bc9: call 0xffffffffc761e7cd; add eax, 0x56559; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010d5a4: call 0xffffffffc774d5b6; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000008593f: call 0xffffffffcbf36ccf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000008e2fc: call 0xffffffffcef3f68c; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000010d58c: call 0xffffffffd907d59e; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000197380: call 0xffffffffdb9ebc84; jne 0x19736d; pop rbx; ret; 
0x00000000001985f9: call 0xffffffffdb9ecefd; jne 0x1985e0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198724: call 0xffffffffdb9ed028; jne 0x198700; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198946: call 0xffffffffdb9ed24a; jne 0x198935; pop rbx; ret; 
0x0000000000198b7a: call 0xffffffffdd52d47e; jne 0x198b70; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094e6d: call 0xffffffffe8ca9683; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000760b0: call 0xffffffffe90760ab; cmpsd dword ptr [rsi], dword ptr [rdi]; ret; 
0x00000000000e7a51: call 0xffffffffe90e7a50; mov dh, 0xa8; dec dword ptr [rax - 0x77]; ret; 
0x00000000001525f6: call 0xffffffffe9d6f784; adc bh, dh; ret 0x8080; 
0x000000000015275d: call 0xffffffffe9d6f8eb; adc bh, dh; ret 0x8080; 
0x000000000004b1ac: call 0xffffffffee87faf0; add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc220; 
0x000000000004df14: call 0xffffffffee882858; add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc220; 
0x0000000000050b1c: call 0xffffffffee885460; add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc220; 
0x0000000000059dac: call 0xffffffffee88e6f0; add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc220; 
0x0000000000135d6f: call 0xffffffffeed533fd; adc bh, dh; ret 0x8080; 
0x00000000001678e3: call 0xfffffffff0750434; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a2c3: call 0xfffffffff0752e14; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677b3: call 0xfffffffff0760104; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677f1: call 0xfffffffff0760142; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167829: call 0xfffffffff076017a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167867: call 0xfffffffff07601b8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016789f: call 0xfffffffff07601f0; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678c7: call 0xfffffffff0760218; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678ef: call 0xfffffffff0760240; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a193: call 0xfffffffff0762ae4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a1d1: call 0xfffffffff0762b22; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a209: call 0xfffffffff0762b5a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a247: call 0xfffffffff0762b98; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a27f: call 0xfffffffff0762bd0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a2a7: call 0xfffffffff0762bf8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a2cf: call 0xfffffffff0762c20; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000010d0d5: call 0xfffffffff310d0da; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010cb59: call 0xfffffffff6f19ea6; ret 0x7504; 
0x0000000000055c3d: call 0xfffffffff888a54a; clc; jne 0x55c30; mov rax, rdx; ret; 
0x00000000000bc114: call 0xfffffffffc0be627; add eax, dword ptr [rax]; ret; 
0x00000000000bc15f: call 0xfffffffffc0be66a; inc dword ptr [rbx]; ret; 
0x000000000011ee82: call 0xfffffffffff46fa7; sldt word ptr [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000115f83: call ptr [r8 + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000011920c: call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x0000000000115f84: call ptr [rax + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000a093d: call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000013b535: call ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; ret; 
0x0000000000046542: call ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000000875bd: call ptr [rbp + 0x41]; pop rsp; ret; 
0x0000000000198d03: call ptr [rbp + 0x48]; mov dword ptr [rip + 0x57160], 0; ret; 
0x00000000000f2407: call ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000198895: call ptr [rbx + 0x48]; mov dword ptr [rip + 0x553de], 0; ret; 
0x0000000000198bca: call ptr [rbx + 0x48]; mov dword ptr [rip + 0x56559], 0; ret; 
0x00000000000dd757: call ptr [rbx + 0x5d]; lea rax, [rax + rdx*8]; ret; 
0x00000000000e3235: call ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000008a0d5: call ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000009e8d3: call ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000832f0: call ptr [rbx + 0x5d]; ret; 
0x0000000000149d51: call ptr [rbx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000004739b: call ptr [rbx - 0x7b]; ror byte ptr [rdi], 0x48; ret 0xfc3; 
0x00000000000fd00c: call ptr [rdi + 0xf]; xchg esp, eax; ret 0xd009; 
0x000000000009f3a8: call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000015f903: call qword ptr [rax + 0x1e0]; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015fdfe: call qword ptr [rax + 0x1e0]; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000001578fe: call qword ptr [rax - 0x5e1f00d]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000937ce: call qword ptr [rax - 0x5e1f00d]; mov rax, 0xffffffffffffffff; ret; 
0x000000000014e5ce: call qword ptr [rax - 0x5e1f00d]; ret; 
0x000000000011576e: call qword ptr [rax - 0x6fa74b8]; or ax, 0x6400; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000013f74e: call qword ptr [rax - 0x7bf03f7c]; mov eax, 0xf000004; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000120dbb: call qword ptr [rdx]; ja 0x120dcc; movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000082ac2: call rax; cmp eax, -1; je 0x82ad8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000146384: call rax; lea rax, [rip + 0xaa773]; add rsp, 8; ret; 
0x0000000000038582: call rax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd892: call rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000012bdba: call rax; xor eax, eax; test byte ptr [rbx + 0x1c], 0x20; je 0x12bdd0; pop rbx; ret; 
0x000000000009552c: cdq; adc eax, 0x48a77600; add esp, 8; ret; 
0x0000000000045feb: cdq; add byte ptr [rax], al; add al, ch; pop rsp; ret; 
0x000000000008e8ab: cdq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x0000000000181b20: cdq; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000bca03: cdq; add dword ptr es:[rax], eax; cmove rax, rdx; ret; 
0x0000000000198945: cdq; call 0xffffffffdb9ed24a; jne 0x198935; pop rbx; ret; 
0x000000000010c1d3: cdq; cld; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e0d3: cdq; fisttp qword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000047326: cdq; idiv esi; mov edi, edx; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000011f6a3: cdq; idiv r15; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000047348: cdq; idiv rsi; ret; 
0x000000000010d9d3: cdq; in al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000138a09: cdq; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000005fb6b: cdq; ret 0x18; 
0x0000000000048243: cdq; ret; 
0x0000000000042545: cdq; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000018c35f: cdq; vzeroupper; ret; 
0x00000000000472f6: cdq; xor eax, edx; sub eax, edx; ret; 
0x0000000000047308: cdq; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000094d04: cdqe; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000157617: cdqe; mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x00000000000ec463: cdqe; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000006fd9c: clc; add al, byte ptr [rcx - 9]; ret; 
0x000000000013a77c: clc; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x000000000010d04d: clc; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000008959c: clc; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000085c6e: clc; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000005cd43: clc; add cl, ch; ret 0xfff6; 
0x00000000000a45fd: clc; add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x4105; 
0x000000000013c327: clc; add dword ptr [rbp + rcx - 0x7b], esi; sal byte ptr [rbp + 0x19], 0x44; mov eax, eax; ret; 
0x0000000000157d68: clc; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000000a58c3: clc; add dword ptr [rcx - 0x7c2de63f], ecx; ret 0x8305; 
0x0000000000117c11: clc; add dword ptr [rdi + 1], edi; ret; 
0x000000000012b9e5: clc; add dword ptr [rdi + rbx*2 + 0x31], esi; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000a2223: clc; add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000103f91: clc; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xd009; 
0x000000000013b3e9: clc; add eax, 0x10; ret; 
0x000000000012bbed: clc; add ecx, dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xc083; 
0x00000000000f1d41: clc; add ecx, dword ptr [rdi]; test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014874e: clc; add esi, dword ptr [rsi + 0xe]; mov eax, 2; ret; 
0x0000000000184c5f: clc; add rax, r8; vzeroupper; ret; 
0x00000000000abf47: clc; add rax, rcx; ret; 
0x000000000018d09b: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018872b: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001845b4: clc; add rax, rcx; vzeroupper; ret; 
0x00000000000a89a4: clc; add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000ac77b: clc; add rax, rsi; ret; 
0x0000000000120e03: clc; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000342b5: clc; and eax, 0x7f; ret; 
0x000000000012fb09: clc; and eax, 0xffffff; ret; 
0x0000000000094d58: clc; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012fac5: clc; bswap eax; ret; 
0x00000000000a093c: clc; call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x0000000000198894: clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x553de], 0; ret; 
0x000000000009e8d2: clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000009f3a7: clc; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000472f5: clc; cdq; xor eax, edx; sub eax, edx; ret; 
0x0000000000055c41: clc; clc; jne 0x55c30; mov rax, rdx; ret; 
0x000000000013b3c9: clc; cmc; je 0x13b3c0; pop rbx; ret; 
0x0000000000192ad7: clc; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x000000000018e11d: clc; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f74d: clc; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x0000000000047346: clc; cqo; idiv rsi; ret; 
0x0000000000047306: clc; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x00000000000a2210: clc; dec dword ptr [rax + 0x29]; ret; 
0x000000000012da79: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8e01e; cmove rax, rdx; ret; 
0x000000000012d9b9: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8e0fe; cmove rax, rdx; ret; 
0x000000000012d8f9: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8e1be; cmove rax, rdx; ret; 
0x000000000012daf7: clc; dec dword ptr [rax - 0x73]; add eax, 0xfff8e3f0; cmovne rax, rdx; ret; 
0x000000000010c1c1: clc; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000009e952: clc; dec dword ptr [rax - 0x75]; add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000010e01f: clc; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x0000000000113055: clc; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x0000000000075cca: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000cb73b: clc; dec dword ptr [rax - 0x7d]; ret; 
0x00000000001129b1: clc; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x000000000010e84d: clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000113252: clc; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x00000000000a228a: clc; dec dword ptr [rcx - 0x77]; add byte ptr [r8 - 0x7b], r9b; sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x0000000000160b13: clc; dec dword ptr [rdi]; xchg esp, eax; ret 0x1389; 
0x0000000000075f8b: clc; idiv bh; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000007b9af: clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000000c6a98: clc; inc dword ptr [rax]; add byte ptr [rax], al; je 0xc6aa3; mov eax, r8d; ret; 
0x000000000013b90d: clc; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x000000000005b39f: clc; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000010d8a8: clc; je 0x10d8b0; mov eax, r9d; ret; 
0x000000000011f7b9: clc; je 0x11f7f4; mov eax, r8d; ret; 
0x0000000000062f2b: clc; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000bc202: clc; jg 0xbc1fc; int1; mov eax, eax; ret; 
0x00000000000e4fe5: clc; jg 0xe4ffb; add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x0000000000192ada: clc; jne 0x192be0; ret; 
0x0000000000055c42: clc; jne 0x55c30; mov rax, rdx; ret; 
0x00000000000d012c: clc; jno 0xd01ae; and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x000000000006ca58: clc; js 0x6ca6a; test byte ptr [rsi + rdx - 0x7abb0000], bl; ror byte ptr [rdi], cl; xchg ebp, eax; ret 0x8341; 
0x00000000000989c9: clc; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000018b32f: clc; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000000e366b: clc; leave; ret; 
0x0000000000189a4f: clc; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000116eca: clc; mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd889b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000116e55: clc; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000a89c6: clc; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89de: clc; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000167907: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016825b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016845b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016865b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678eb: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016822f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016842f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016862f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678bf: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168277: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d1f7: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000168477: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d167: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000168677: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d0d7: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167923: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018b327: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a47: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5f7: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000bc052: clc; mov qword ptr [rdi], rcx; ret; 
0x000000000018bc51: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000018fb30: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000bbc1e: clc; mov qword ptr [rdi], rsi; ret; 
0x000000000018e69f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f86f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000018e119: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f749: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000005b6a5: clc; mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x00000000000bbc16: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000a8a6c: clc; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b34: clc; mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89a7: clc; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000ac8c3: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000011eea6: clc; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000014d05c: clc; notrack jmp rax; xor eax, eax; ret; 
0x000000000005b6ab: clc; or dword ptr [rdi - 0x2f], esi; mov rax, r8; ret; 
0x0000000000080881: clc; or dword ptr [rdi], ecx; xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x0000000000080fc5: clc; or dword ptr [rdi], ecx; xchg dword ptr [rbx], esi; add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x000000000012fb23: clc; or eax, esi; bswap eax; ret; 
0x000000000011ef04: clc; or rax, rsi; ret; 
0x0000000000132ad9: clc; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000095652: clc; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x00000000000a8eee: clc; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000062f0f: clc; push qword ptr [rbp + rcx + 0x44]; mov eax, eax; ret; 
0x00000000000929df: clc; push qword ptr [rbp - 0x40]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001536a9: clc; push qword ptr [rbx + rdi*2 - 0x7d]; ret 0x3901; 
0x0000000000082ac5: clc; push qword ptr [rdi + rcx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011917d: clc; push qword ptr [rdi + rcx + 0x5d]; lea rax, [rip + 0xd6777]; pop r12; pop r13; ret; 
0x0000000000121fae: clc; push qword ptr [rsi + rbp - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000107a60: clc; push qword ptr [rsp + rbx*8 - 0x77]; ret 0xc085; 
0x00000000000e4f46: clc; push rbx; pop rax; jne 0xe4f50; ret; 
0x0000000000047331: clc; ret; 
0x000000000012fad5: clc; rol ax, 8; ret; 
0x000000000012f9ef: clc; sar rax, 6; ret; 
0x000000000005b4c4: clc; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000000e9ec5: clc; sbb byte ptr [rcx], bh; ret; 
0x00000000000d0029: clc; sbb dword ptr [rdi + 0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000000563ca: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000012fb99: clc; shr eax, 0x18; ret; 
0x000000000011ee7f: clc; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000000cf84f: clc; shr rax, 2; ret; 
0x000000000002fdab: clc; std; je 0x2fdc8; pop rbx; ret; 
0x00000000001783b0: clc; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x00000000001786ae: clc; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x00000000001786ce: clc; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x00000000001786ee: clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x0000000000178710: clc; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x0000000000178730: clc; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x0000000000178750: clc; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x00000000001785a6: clc; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x00000000001785c8: clc; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x00000000001785ee: clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x0000000000178606: clc; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017862c: clc; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017864e: clc; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017866c: clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x0000000000178348: clc; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x000000000017868e: clc; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000018d156: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e6: clc; sub rax, rdx; vzeroupper; ret; 
0x000000000010c682: clc; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae4: clc; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000018472b: clc; vzeroupper; ret; 
0x00000000000578b8: clc; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x000000000012d0ca: clc; xor rcx, qword ptr fs:[0x28]; jne 0x12d1ad; leave; ret; 
0x00000000000e501a: cld; add byte ptr [rax], al; ret; 
0x00000000000f9078: cld; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9007; ret 0x4801; 
0x00000000000bc133: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000bc118: cld; add eax, dword ptr [rax]; ret; 
0x0000000000198d02: cld; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x57160], 0; ret; 
0x0000000000120b40: cld; cmp dh, bh; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x0000000000192af2: cld; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; ret; 
0x0000000000192bd2: cld; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; xor eax, eax; ret; 
0x00000000001923a1: cld; cmp eax, ecx; jne 0x1925b0; xor eax, eax; ret; 
0x000000000018f773: cld; cmp ecx, dword ptr [rdi - 4]; jne 0x18f9a6; xor eax, eax; ret; 
0x000000000018e146: cld; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x00000000000542b1: cld; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000001113d7: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000005b15e: cld; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000041d27: cld; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000041d2b: cld; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000bc218: cld; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000bc163: cld; inc dword ptr [rbx]; ret; 
0x000000000018f776: cld; jne 0x18f9a6; xor eax, eax; ret; 
0x0000000000192af5: cld; jne 0x192be0; ret; 
0x0000000000192bd5: cld; jne 0x192be0; xor eax, eax; ret; 
0x000000000018b30d: cld; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a2d: cld; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000168092: cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168295: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168495: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168695: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018b306: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a26: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5d6: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000bc05a: cld; mov dword ptr [rdi], ecx; ret; 
0x000000000018bc5c: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000018fb42: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000bbc2c: cld; mov dword ptr [rdi], esi; ret; 
0x000000000018e143: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x000000000019239e: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x1925b0; xor eax, eax; ret; 
0x000000000018e3a5: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x00000000000bbc26: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000157559: cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000167aca: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167caa: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e8a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016806a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c8e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e6e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016804e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167cc6: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d386: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167ea6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d306: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168086: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d286: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167ae6: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d406: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000010c1d4: cld; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d2f6b: cld; push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x00000000000bbb6f: cld; ret; 
0x00000000000241a8: cld; sbb byte ptr [rax], al; ret; 
0x000000000018fcb1: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa77: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018ff73: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000019019f: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018a5dd: cld; vzeroupper; ret; 
0x00000000000a4f88: cld; xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000d10fb: cli; adc cl, byte ptr [rax + 0x29]; ret 0x148; 
0x000000000015b660: cli; adc cl, byte ptr [rax + 0x29]; retf 0x148; ret 0x2949; 
0x0000000000141062: cli; adc ebp, esi; dec dword ptr [rax + 0x39]; ret; 
0x00000000000bce02: cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x00000000000bc040: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x000000000010d127: cli; add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x00000000000d90d3: cli; add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000d927b: cli; add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x00000000000893dc: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000190222: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000ea372: cli; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013d9fc: cli; add dword ptr [rcx + 0xf], eax; xchg edi, eax; ret 0xd231; 
0x00000000000bc045: cli; add dword ptr [rdi + 0x15], esi; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000bbc06: cli; add dword ptr [rdi + 0x26], esi; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000157903: cli; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157913: cli; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000018bc33: cli; add dword ptr [rdi + 0x2c], esi; jb 0x18bc3b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000190afb: cli; add dword ptr [rdi + 0x3a], esi; jb 0x190b03; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018b746: cli; add dword ptr [rdi + 0x3b], esi; jb 0x18b751; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001904d6: cli; add dword ptr [rdi + 0x53], esi; jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000051102: cli; add dword ptr [rdi], ecx; xchg esp, eax; ret 0x2040; 
0x000000000019022f: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000018fb60: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000c9475: cli; add eax, 0x89490000; ret; 
0x000000000002a5a4: cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000ca8d0: cli; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x00000000000ca924: cli; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x00000000000dd05b: cli; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000bbfa4: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf24: cli; and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000013f864: cli; and byte ptr [rdi], cl; xchg esp, eax; ret; 
0x00000000001901eb: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000008dee3: cli; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000001175c9: cli; and ecx, dword ptr [rdi]; xchg ebp, eax; ret 0xc084; 
0x0000000000041ef3: cli; andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000e518b: cli; cmc; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000000a28cc: cli; cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x000000000012bd93: cli; cmp edi, 0x56; je 0x12bda0; mov eax, 7; ret; 
0x00000000001127e3: cli; cmp edx, 4; ja 0x1127f0; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x00000000000dcfa3: cli; cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x0000000000091e83: cli; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1f3: cli; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x000000000012f9e3: cli; cmp rdi, 0x3ff; ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x000000000007b673: cli; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000007c795: cli; dec dword ptr [rax - 0x77]; ret 0xd9e9; 
0x0000000000080104: cli; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000079cfc: cli; dec dword ptr [rcx - 0x77]; ret; 
0x00000000000bc137: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x0000000000081ec1: cli; inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000018bb7c: cli; ja 0x18bb8e; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bb1c: cli; ja 0x18bb97; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000001901d8: cli; jb 0x1901ea; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001891cb: cli; jg 0x1891e5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x00000000001899ab: cli; jg 0x1899c5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000189a6c: cli; jg 0x189a86; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189f6b: cli; jg 0x189f85; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018a61c: cli; jg 0x18a636; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018a6c1: cli; jg 0x18a6cb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018ac7b: cli; jg 0x18ac95; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018b34c: cli; jg 0x18b366; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018b3f1: cli; jg 0x18b3fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b75d: cli; jg 0x18b767; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018bc46: cli; jg 0x18bc50; vzeroupper; ret; 
0x000000000018fb1b: cli; jg 0x18fb25; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000001901fa: cli; jg 0x190204; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000190505: cli; jg 0x19050f; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000190b1c: cli; jg 0x190b26; vzeroupper; ret; 
0x000000000009a056: cli; jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000013b3e3: cli; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000241a3: cli; lea rax, [rip + 0x18fcf3]; ret; 
0x00000000000241b3: cli; lea rax, [rip + 0x191abc]; ret; 
0x00000000000a8a74: cli; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b3c: cli; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89af: cli; mov byte ptr [rdi + 2], dl; ret; 
0x000000000010c793: cli; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x0000000000168498: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000010dc83: cli; mov eax, 0x102; syscall; cmp rax, -0xfff; jae 0x10dc94; ret; 
0x000000000010fd03: cli; mov eax, 0x107; syscall; cmp rax, -0xfff; jae 0x10fd14; ret; 
0x00000000001143a3: cli; mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x1143b4; ret; 
0x000000000010fc43: cli; mov eax, 0x10a; syscall; cmp rax, -0xfff; jae 0x10fc54; ret; 
0x000000000011fdf3: cli; mov eax, 0x110; syscall; cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000011fe53: cli; mov eax, 0x11b; syscall; cmp rax, -0xfff; jae 0x11fe64; ret; 
0x000000000011feb3: cli; mov eax, 0x11f; syscall; cmp rax, -0xfff; jae 0x11fec4; ret; 
0x000000000011f323: cli; mov eax, 0x122; syscall; cmp rax, -0xfff; jae 0x11f334; ret; 
0x000000000011fac3: cli; mov eax, 0x123; syscall; cmp rax, -0xfff; jae 0x11fad4; ret; 
0x000000000010e8f3: cli; mov eax, 0x124; syscall; cmp rax, -0xfff; jae 0x10e904; ret; 
0x000000000010e953: cli; mov eax, 0x125; syscall; cmp rax, -0xfff; jae 0x10e964; ret; 
0x000000000011fbe3: cli; mov eax, 0x126; syscall; cmp rax, -0xfff; jae 0x11fbf4; ret; 
0x000000000011fee3: cli; mov eax, 0x12c; syscall; cmp rax, -0xfff; jae 0x11fef4; ret; 
0x000000000011fa03: cli; mov eax, 0x131; syscall; cmp rax, -0xfff; jae 0x11fa14; ret; 
0x00000000001152e3: cli; mov eax, 0x132; syscall; cmp rax, -0xfff; jae 0x1152f4; ret; 
0x000000000011ff43: cli; mov eax, 0x134; syscall; cmp rax, -0xfff; jae 0x11ff54; ret; 
0x000000000011ffd3: cli; mov eax, 0x13f; syscall; cmp rax, -0xfff; jae 0x11ffe4; ret; 
0x0000000000120003: cli; mov eax, 0x14a; syscall; cmp rax, -0xfff; jae 0x120014; ret; 
0x0000000000120033: cli; mov eax, 0x14b; syscall; cmp rax, -0xfff; jae 0x120044; ret; 
0x000000000010e133: cli; mov eax, 0x15; syscall; cmp rax, -0x1000; ja 0x10e148; ret; 
0x000000000010e923: cli; mov eax, 0x16; syscall; cmp rax, -0xfff; jae 0x10e934; ret; 
0x0000000000102713: cli; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca3: cli; mov eax, 0x18; syscall; ret; 
0x0000000000118aa3: cli; mov eax, 0x1b; syscall; cmp rax, -0xfff; jae 0x118ab4; ret; 
0x0000000000118a73: cli; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x118a84; ret; 
0x0000000000121193: cli; mov eax, 0x1e; syscall; cmp rax, -0x1000; ja 0x1211a8; ret; 
0x0000000000121233: cli; mov eax, 0x1f; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000010e893: cli; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x000000000010e8c3: cli; mov eax, 0x21; syscall; cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x00000000000d41b3: cli; mov eax, 0x24; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e2d93: cli; mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000d41e3: cli; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e40c3: cli; mov eax, 0x27; syscall; ret; 
0x00000000001207a3: cli; mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x1207b4; ret; 
0x0000000000120773: cli; mov eax, 0x30; syscall; cmp rax, -0xfff; jae 0x120784; ret; 
0x0000000000120163: cli; mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000001202c3: cli; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x1202d4; ret; 
0x0000000000120263: cli; mov eax, 0x33; syscall; cmp rax, -0xfff; jae 0x120274; ret; 
0x0000000000120233: cli; mov eax, 0x34; syscall; cmp rax, -0xfff; jae 0x120244; ret; 
0x00000000000e3173: cli; mov eax, 0x3b; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000433d3: cli; mov eax, 0x3e; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000e2b43: cli; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x0000000000121083: cli; mov eax, 0x40; syscall; cmp rax, -0x1000; ja 0x121098; ret; 
0x00000000001211c3: cli; mov eax, 0x43; syscall; cmp rax, -0x1000; ja 0x1211d8; ret; 
0x0000000000121013: cli; mov eax, 0x44; syscall; cmp rax, -0x1000; ja 0x121028; ret; 
0x0000000000121043: cli; mov eax, 0x47; syscall; cmp rax, -0x1000; ja 0x121058; ret; 
0x000000000010e573: cli; mov eax, 0x49; syscall; cmp rax, -0xfff; jae 0x10e584; ret; 
0x0000000000116cc3: cli; mov eax, 0x4c; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116cf3: cli; mov eax, 0x4d; syscall; cmp rax, -0x1000; ja 0x116d08; ret; 
0x000000000010ea13: cli; mov eax, 0x50; syscall; cmp rax, -0xfff; jae 0x10ea24; ret; 
0x000000000010ea43: cli; mov eax, 0x51; syscall; cmp rax, -0xfff; jae 0x10ea54; ret; 
0x0000000000062e83: cli; mov eax, 0x52; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x000000000010dc53: cli; mov eax, 0x53; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010fd33: cli; mov eax, 0x54; syscall; cmp rax, -0xfff; jae 0x10fd44; ret; 
0x000000000010fbb3: cli; mov eax, 0x56; syscall; cmp rax, -0xfff; jae 0x10fbc4; ret; 
0x000000000010fcd3: cli; mov eax, 0x57; syscall; cmp rax, -0xfff; jae 0x10fce4; ret; 
0x000000000010fc13: cli; mov eax, 0x58; syscall; cmp rax, -0xfff; jae 0x10fc24; ret; 
0x000000000010fc73: cli; mov eax, 0x59; syscall; cmp rax, -0xfff; jae 0x10fc84; ret; 
0x000000000010db63: cli; mov eax, 0x5a; syscall; cmp rax, -0xfff; jae 0x10db74; ret; 
0x000000000010db93: cli; mov eax, 0x5b; syscall; cmp rax, -0xfff; jae 0x10dba4; ret; 
0x000000000010f363: cli; mov eax, 0x5c; syscall; cmp rax, -0xfff; jae 0x10f374; ret; 
0x000000000010f393: cli; mov eax, 0x5d; syscall; cmp rax, -0xfff; jae 0x10f3a4; ret; 
0x000000000010f3c3: cli; mov eax, 0x5e; syscall; cmp rax, -0xfff; jae 0x10f3d4; ret; 
0x000000000010db53: cli; mov eax, 0x5f; syscall; ret; 
0x0000000000113de3: cli; mov eax, 0x62; syscall; cmp rax, -0xfff; jae 0x113df4; ret; 
0x000000000011fdc3: cli; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11fdd4; ret; 
0x00000000000e40e3: cli; mov eax, 0x66; syscall; ret; 
0x000000000011fc43: cli; mov eax, 0x67; syscall; cmp rax, -0xfff; jae 0x11fc54; ret; 
0x00000000000e4103: cli; mov eax, 0x68; syscall; ret; 
0x00000000000e40f3: cli; mov eax, 0x6b; syscall; ret; 
0x00000000000e4113: cli; mov eax, 0x6c; syscall; ret; 
0x00000000000e43a3: cli; mov eax, 0x6d; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e40d3: cli; mov eax, 0x6e; syscall; ret; 
0x00000000000e43d3: cli; mov eax, 0x6f; syscall; ret; 
0x00000000000e4433: cli; mov eax, 0x70; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4123: cli; mov eax, 0x73; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4463: cli; mov eax, 0x76; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4493: cli; mov eax, 0x78; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e4373: cli; mov eax, 0x79; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x000000000011f1c3: cli; mov eax, 0x7a; syscall; cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x000000000011f1f3: cli; mov eax, 0x7b; syscall; cmp rax, -0xfff; jae 0x11f204; ret; 
0x00000000000e4403: cli; mov eax, 0x7c; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x000000000011f9a3: cli; mov eax, 0x7d; syscall; cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x000000000011f9d3: cli; mov eax, 0x7e; syscall; cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x00000000000439c3: cli; mov eax, 0x83; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x000000000010d3d3: cli; mov eax, 0x84; syscall; cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x000000000011fe23: cli; mov eax, 0x86; syscall; cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000011f3e3: cli; mov eax, 0x87; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000010da03: cli; mov eax, 0x89; syscall; cmp rax, -0xfff; jae 0x10da14; ret; 
0x000000000010da33: cli; mov eax, 0x8a; syscall; cmp rax, -0xfff; jae 0x10da44; ret; 
0x00000000001141e3: cli; mov eax, 0x8d; syscall; cmp rax, -0xfff; jae 0x1141f4; ret; 
0x0000000000102653: cli; mov eax, 0x8e; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102683: cli; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b3: cli; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e3: cli; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102743: cli; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102773: cli; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a3: cli; mov eax, 0x94; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x0000000000118b03: cli; mov eax, 0x95; syscall; cmp rax, -0xfff; jae 0x118b14; ret; 
0x0000000000118b33: cli; mov eax, 0x96; syscall; cmp rax, -0xfff; jae 0x118b44; ret; 
0x0000000000118b63: cli; mov eax, 0x97; syscall; cmp rax, -0xfff; jae 0x118b74; ret; 
0x0000000000118b93: cli; mov eax, 0x98; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000115623: cli; mov eax, 0x99; syscall; cmp rax, -0xfff; jae 0x115634; ret; 
0x000000000011f933: cli; mov eax, 0x9a; syscall; cmp rax, -0xfff; jae 0x11f944; ret; 
0x000000000011fd03: cli; mov eax, 0x9b; syscall; cmp rax, -0xfff; jae 0x11fd14; ret; 
0x000000000011f903: cli; mov eax, 0x9e; syscall; cmp rax, -0xfff; jae 0x11f914; ret; 
0x0000000000115163: cli; mov eax, 0xa1; syscall; cmp rax, -0xfff; jae 0x115174; ret; 
0x0000000000115223: cli; mov eax, 0xa2; syscall; cmp rax, -0xfff; jae 0x115234; ret; 
0x0000000000115133: cli; mov eax, 0xa3; syscall; cmp rax, -0xfff; jae 0x115144; ret; 
0x000000000011f163: cli; mov eax, 0xa6; syscall; cmp rax, -0xfff; jae 0x11f174; ret; 
0x0000000000115653: cli; mov eax, 0xa7; syscall; cmp rax, -0xfff; jae 0x115664; ret; 
0x0000000000115683: cli; mov eax, 0xa8; syscall; cmp rax, -0xfff; jae 0x115694; ret; 
0x00000000001189a3: cli; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x1189b4; ret; 
0x0000000000114de3: cli; mov eax, 0xaa; syscall; cmp rax, -0xfff; jae 0x114df4; ret; 
0x0000000000114f33: cli; mov eax, 0xab; syscall; cmp rax, -0xfff; jae 0x114f44; ret; 
0x000000000011f013: cli; mov eax, 0xac; syscall; cmp rax, -0xfff; jae 0x11f024; ret; 
0x000000000011efe3: cli; mov eax, 0xad; syscall; cmp rax, -0xfff; jae 0x11eff4; ret; 
0x000000000011fa33: cli; mov eax, 0xae; syscall; cmp rax, -0xfff; jae 0x11fa44; ret; 
0x000000000011fa63: cli; mov eax, 0xb0; syscall; cmp rax, -0xfff; jae 0x11fa74; ret; 
0x000000000011fb23: cli; mov eax, 0xb1; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fcd3: cli; mov eax, 0xb4; syscall; cmp rax, -0xfff; jae 0x11fce4; ret; 
0x0000000000118973: cli; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x118984; ret; 
0x0000000000120063: cli; mov eax, 0xba; syscall; ret; 
0x000000000011f193: cli; mov eax, 0xbb; syscall; cmp rax, -0x1000; ja 0x11f1a8; ret; 
0x000000000011ce83: cli; mov eax, 0xc2; syscall; cmp rax, -0xfff; jae 0x11ce94; ret; 
0x000000000011cdc3: cli; mov eax, 0xc4; syscall; cmp rax, -0xfff; jae 0x11cdd4; ret; 
0x000000000011cf73: cli; mov eax, 0xc5; syscall; cmp rax, -0xfff; jae 0x11cf84; ret; 
0x000000000011cf13: cli; mov eax, 0xc6; syscall; cmp rax, -0xfff; jae 0x11cf24; ret; 
0x000000000011cdf3: cli; mov eax, 0xc7; syscall; cmp rax, -0xfff; jae 0x11ce04; ret; 
0x00000000000d0dc3: cli; mov eax, 0xc9; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x000000000011fa93: cli; mov eax, 0xd5; syscall; cmp rax, -0xfff; jae 0x11faa4; ret; 
0x000000000011f963: cli; mov eax, 0xe4; syscall; ret; 
0x0000000000120073: cli; mov eax, 0xea; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x0000000000116aa3: cli; mov eax, 0xeb; syscall; cmp rax, -0x1000; ja 0x116ab8; ret; 
0x000000000011fbb3: cli; mov eax, 0xfd; syscall; cmp rax, -0xfff; jae 0x11fbc4; ret; 
0x000000000011fb83: cli; mov eax, 0xfe; syscall; cmp rax, -0xfff; jae 0x11fb94; ret; 
0x000000000011fc13: cli; mov eax, 0xff; syscall; cmp rax, -0xfff; jae 0x11fc24; ret; 
0x00000000000479f3: cli; mov eax, 0xffffffff; ret; 
0x0000000000146253: cli; mov eax, 1; ret; 
0x0000000000113673: cli; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x113688; ret; 
0x00000000000e5213: cli; mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x0000000000148a83: cli; mov eax, 2; ret; 
0x0000000000113343: cli; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x113358; ret; 
0x000000000010e103: cli; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000010d073: cli; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000093563: cli; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000010d063: cli; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000157923: cli; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000010c783: cli; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001136a3: cli; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000094d13: cli; mov eax, dword ptr [rdi + 8]; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008cd83: cli; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008cd53: cli; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000094da3: cli; mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000de2e3: cli; mov eax, dword ptr [rdi]; ret; 
0x000000000008def3: cli; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008df03: cli; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x00000000000440a3: cli; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x0000000000044093: cli; mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x0000000000146f93: cli; mov eax, dword ptr [rip + 0xa9be2]; test eax, eax; je 0x146fa0; ret; 
0x0000000000118703: cli; mov eax, dword ptr [rip + 0xd3c3e]; test edi, edi; je 0x118714; mov dword ptr [rip + 0xd3c34], edi; ret; 
0x000000000010d113: cli; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000041b73: cli; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000342b3: cli; mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fac3: cli; mov eax, edi; bswap eax; ret; 
0x00000000000472f3: cli; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x000000000012fad3: cli; mov eax, edi; rol ax, 8; ret; 
0x0000000000168492: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000013a5a3: cli; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000015dee3: cli; mov edi, dword ptr [rip + 0x8e546]; test edi, edi; jns 0x15def0; ret; 
0x00000000000a06b3: cli; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06d3: cli; mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x0000000000163463: cli; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000928f3: cli; mov rax, 0xffffffffffffffff; ret; 
0x00000000001574a3: cli; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de293: cli; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093e93: cli; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000093853: cli; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000087493: cli; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000951f3: cli; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e43: cli; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095253: cli; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e83: cli; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000095223: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095243: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea3: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e33: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e23: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000093833: cli; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000043c53: cli; mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000344c3: cli; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e3: cli; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d53: cli; mov rax, qword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328e3: cli; mov rax, qword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a3: cli; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000024403: cli; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab3: cli; mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa3: cli; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163433: cli; mov rax, qword ptr [rip + 0x88a35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162dd3: cli; mov rax, qword ptr [rip + 0x89095]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162db3: cli; mov rax, qword ptr [rip + 0x890b5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d73: cli; mov rax, qword ptr [rip + 0x890f5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d53: cli; mov rax, qword ptr [rip + 0x89115]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d33: cli; mov rax, qword ptr [rip + 0x89135]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d13: cli; mov rax, qword ptr [rip + 0x89155]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160cc3: cli; mov rax, qword ptr [rip + 0x8b1a5]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015ca43: cli; mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153173: cli; mov rax, qword ptr [rip + 0x98c25]; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000141103: cli; mov rax, qword ptr [rip + 0xaad1d]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x00000000001411f3: cli; mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000142f73: cli; mov rax, qword ptr [rip + 0xadaa5]; test rax, rax; jne 0x142f88; ret; 
0x000000000012fe83: cli; mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x00000000001228b3: cli; mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001200a3: cli; mov rax, qword ptr [rip + 0xcbdc5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115603: cli; mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114c33: cli; mov rax, qword ptr [rip + 0xd7225]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x0000000000114383: cli; mov rax, qword ptr [rip + 0xd7ae5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dbc3: cli; mov rax, qword ptr [rip + 0xde2a5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fec93: cli; mov rax, qword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000342d3: cli; mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034453: cli; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034463: cli; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000094c43: cli; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000047343: cli; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000047303: cli; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000093863: cli; mov rax, rdi; ret; 
0x0000000000121263: cli; mov rcx, qword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121270; ret; 
0x000000000014de03: cli; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14de10; ret; 
0x0000000000154503: cli; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154510; ret; 
0x0000000000122023: cli; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x121ec0; ret; 
0x0000000000122003: cli; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x0000000000117393: cli; mov rdi, qword ptr [rip + 0xd83cd]; test rdi, rdi; jne 0x1173b0; mov eax, 1; ret; 
0x000000000005b621: cli; mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000042293: cli; movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000042a23: cli; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000271f3: cli; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000010c753: cli; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000ac8c9: cli; movzx edx, dl; sub eax, edx; ret; 
0x00000000000a8a3f: cli; notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000bc84d: cli; or al, 0; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x000000000017f186: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a674f: cli; or byte ptr [rdi], cl; add dword ptr [rbp + 0x19], 0; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000137393: cli; or byte ptr [rdi], cl; and dword ptr [rbp + 1], 0; add dh, dh; ret 0xf04; 
0x0000000000190204: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000105ec7: cli; or cl, byte ptr [rdi]; xchg ebp, eax; ret 0xd320; 
0x000000000009f2d3: cli; or dword ptr [rdi], ecx; xchg esi, eax; ret 0x3145; 
0x000000000009f282: cli; or dword ptr [rdi], ecx; xchg esi, eax; ret 0xf631; 
0x000000000013f86a: cli; or dword ptr [rdi], ecx; xchg esp, eax; ret 0xd308; 
0x00000000000d8495: cli; or edx, edi; movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x00000000000db0aa: cli; or edx, edi; movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x0000000000042633: cli; pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000421b3: cli; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000424e3: cli; pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000005b45e: cli; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000e51a7: cli; push rsp; push rbx; setne al; ret; 
0x00000000000bbf66: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000133f3e: cli; ret 0xb; 
0x0000000000023ef3: cli; ret; 
0x00000000000d4231: cli; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x0000000000094193: cli; setae al; ret; 
0x000000000008282c: cli; stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x0000000000062a3e: cli; sti; dec dword ptr [rax - 0x77]; ret 0x9ee9; 
0x000000000003006b: cli; sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x00000000000d4236: cli; sub byte ptr [rdi + rcx*4 + 2], bl; jbe 0xd4240; ret; 
0x000000000009471b: cli; sub dh, byte ptr [rbp - 0x1f]; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x000000000010c7a3: cli; sub rsp, 0x10; push 0; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000010c7c3: cli; sub rsp, 0x10; push 1; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd3: cli; sub rsp, 0x10; push 2; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000136c73: cli; sub rsp, 0x10; push 2; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf3: cli; sub rsp, 0x10; push 3; call 0x10cfc0; add rsp, 0x18; ret; 
0x00000000001176e3: cli; sub rsp, 8; call 0x1173e0; mov qword ptr [rip + 0xd809c], rax; add rsp, 8; ret; 
0x0000000000047d13: cli; sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000141203: cli; sub rsp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000157d13: cli; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000157d33: cli; test edx, edx; jne 0x157d48; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157d83: cli; test edx, edx; jne 0x157d98; mov r8d, 1; mov eax, r8d; ret; 
0x000000000002fd83: cli; test esi, esi; je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x00000000000b1c99: cli; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3c: cli; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e68: cli; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df8: cli; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf798: cli; test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72c: cli; test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000bbf53: cli; test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000b1d63: cli; test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf693: cli; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x000000000018ff81: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000342c3: cli; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000094c63: cli; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000000092873: cli; xor eax, eax; ret; 
0x0000000000113603: cli; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x113618; ret; 
0x000000000008cd63: cli; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd73: cli; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000908a3: cli; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000193dcf: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000001836f8: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000090387: cmc; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x00000000000cfae1: cmc; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000000cf8c8: cmc; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x00000000000e766a: cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000012e204: cmc; dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x7d], r9b; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20; 
0x0000000000115177: cmc; insb byte ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4f54: cmc; jb 0xe4fa0; cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x000000000013b3ca: cmc; je 0x13b3c0; pop rbx; ret; 
0x00000000000e4477: cmc; jns 0xe448a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e518c: cmc; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000001411f7: cmc; lodsd eax, dword ptr [rsi]; or al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000016d30a: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167d1e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000120277: cmc; mov ebx, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000016d303: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167e87: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ea3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000120177: cmc; mov esp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001920e3: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000162d77: cmc; nop; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010c860: cmc; or eax, 0x528b4800; sbb byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; ret 0x8207; 
0x000000000011fa77: cmc; ret; 
0x000000000010f377: cmc; retf 0xd; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001920e7: cmc; sub eax, edx; ret; 
0x0000000000118b77: cmc; xor cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112afc: cmova eax, edx; ret; 
0x00000000000de2b1: cmova edx, eax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000de2b0: cmova rdx, rax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x0000000000093e9d: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000885e4: cmovae eax, dword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000093e9c: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000885e3: cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000120e10: cmovb eax, edx; ret; 
0x0000000000189a28: cmovb ecx, dword ptr [rcx + 0x42fc0754]; mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000018b308: cmovb ecx, dword ptr [rcx + 0x4afc0754]; lea eax, [rdi + rax]; vzeroupper; ret; 
0x000000000005b461: cmovb edx, edi; mov rax, r10; ret; 
0x000000000005b460: cmovb r10, rdi; mov rax, r10; ret; 
0x0000000000120e0f: cmovb rax, rdx; ret; 
0x000000000009f35d: cmovbe eax, edx; ret; 
0x000000000009418c: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000009418b: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000000bc13d: cmove eax, ecx; ret; 
0x00000000000a06bc: cmove eax, edx; add eax, 1; ret; 
0x00000000000d0ea0: cmove eax, edx; add rsp, 0x58; ret; 
0x000000000009cb97: cmove eax, edx; add rsp, 8; ret; 
0x000000000012d018: cmove eax, edx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x0000000000033c3f: cmove eax, edx; ret; 
0x00000000000476be: cmove esp, eax; add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000476bd: cmove r12, rax; add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000bc13c: cmove rax, rcx; ret; 
0x00000000000a06dd: cmove rax, rdx; add eax, 1; ret; 
0x00000000000d0e9f: cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000009cb96: cmove rax, rdx; add rsp, 8; ret; 
0x000000000012d017: cmove rax, rdx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x0000000000033c3e: cmove rax, rdx; ret; 
0x0000000000086e1b: cmovg eax, ecx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916e3: cmovg eax, ecx; test rdx, rdx; jne 0x916d8; ret; 
0x00000000000cf196: cmovg ecx, eax; mov eax, r9d; ret; 
0x00000000000cf195: cmovg r9d, eax; mov eax, r9d; ret; 
0x0000000000086e1a: cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916e2: cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x000000000012eae0: cmovl ecx, dword ptr [rcx + 0x415d5be0]; pop rsp; ret; 
0x000000000018ac5a: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000014a904: cmovl ecx, dword ptr [rcx]; ror byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x00000000000cf174: cmovl ecx, eax; mov eax, r9d; ret; 
0x00000000000cf173: cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000a289b: cmovne eax, eax; mov rax, r8; ret; 
0x000000000008a724: cmovne eax, ecx; ret; 
0x00000000000a1ff7: cmovne eax, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c3e: cmovne eax, edi; ret; 
0x000000000015c60a: cmovne eax, edx; add rsp, 8; ret; 
0x0000000000086ef7: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000095272: cmovne eax, edx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x00000000000ee414: cmovne eax, edx; pop rbx; ret; 
0x000000000009c205: cmovne eax, edx; ret; 
0x0000000000188164: cmovne eax, edx; vzeroupper; ret; 
0x00000000001294b3: cmovne eax, esi; ret; 
0x00000000000b1ab1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000032849: cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000008ce60: cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000b1ab5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000a289a: cmovne r8, rax; mov rax, r8; ret; 
0x000000000008a723: cmovne rax, rcx; ret; 
0x00000000000a1ff6: cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c3d: cmovne rax, rdi; ret; 
0x000000000015c609: cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000095271: cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000009c204: cmovne rax, rdx; ret; 
0x0000000000188163: cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b1ab0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000b1ab4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000127ae1: cmovns eax, dword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000e5c6d: cmovns eax, dword ptr [rbx + 0x394810c1]; ret; 
0x00000000000b7af1: cmovns eax, dword ptr [rbx - 0x72b7e018]; jg 0xb7b19; jne 0xb7f80; ret; 
0x00000000000b798f: cmovns eax, dword ptr [rbx - 0x72b7e818]; jg 0xb79af; jne 0xb7f80; ret; 
0x00000000000b790d: cmovns eax, dword ptr [rbx - 0x72b7ec18]; jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b8fcb: cmovns eax, dword ptr [rbx - 0x72b7ef18]; jg 0xb8fe4; jne 0xb97d0; ret; 
0x00000000000b77c8: cmovns eax, dword ptr [rbx - 0x72b7f618]; jg 0xb77da; jne 0xb7f80; ret; 
0x00000000000b7746: cmovns eax, dword ptr [rbx - 0x72b7fa18]; jg 0xb7754; jne 0xb7f80; ret; 
0x000000000007d78f: cmovns eax, dword ptr [rbx - 0x76b20f20]; ret 0x8d48; 
0x0000000000078bbe: cmovns eax, dword ptr [rbx - 0x76b20f20]; ret; 
0x00000000001141bc: cmovns eax, edx; ret; 
0x00000000000b798e: cmovns r8, qword ptr [r11 - 0x72b7e818]; jg 0xb79af; jne 0xb7f80; ret; 
0x00000000000b790c: cmovns r8, qword ptr [r11 - 0x72b7ec18]; jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b8fca: cmovns r8d, dword ptr [r11 - 0x72b7ef18]; jg 0xb8fe4; jne 0xb97d0; ret; 
0x0000000000127ae0: cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000189a4a: cmovp ecx, dword ptr [rcx + 0x42f80754]; mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000018b32a: cmovp ecx, dword ptr [rcx + 0x4af80754]; lea eax, [rdi + rax]; vzeroupper; ret; 
0x000000000007f320: cmovs eax, dword ptr [rbx + 0x149f0e0]; ret; 
0x0000000000147538: cmovs eax, dword ptr [rbx - 0x3fcef73c]; pop rbx; pop rbp; ret; 
0x00000000001041a1: cmovs eax, dword ptr [rbx - 0x76b70f20]; ret; 
0x00000000000ac440: cmovs eax, dword ptr [rbx - 0x7cb7ef39]; ret 0x4810; 
0x0000000000027200: cmovs eax, edx; ret; 
0x00000000000fbe4e: cmovs ebp, dword ptr [rcx]; ret 0x8348; 
0x00000000000b8fa5: cmovs ecx, dword ptr [rbp - 0x7af0f081]; and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000000b7891: cmovs ecx, dword ptr [rbp - 0x7af0f081]; in al, 6; add byte ptr [rax], al; ret; 
0x000000000017cb95: cmovs ecx, dword ptr [rbp - 0x7af0f0b6]; mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b8e26: cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f98d637; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x0000000000082ac8: cmovs ecx, dword ptr [rbx + 0x48082444]; add esp, 0x18; ret; 
0x000000000010fd7d: cmovs ecx, dword ptr [rbx + 0x48c03116]; cmp ecx, edx; seta al; sbb eax, 0; ret; 
0x000000000018fb29: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000011f7ad: cmovs ecx, dword ptr [rbx + 0xcc6bb15]; add byte ptr [rbx + rcx*4 + 2], ah; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x000000000010d89c: cmovs ecx, dword ptr [rbx + 0xde5cc05]; add byte ptr [rbx + rcx*4], ah; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x0000000000096965: cmovs ecx, dword ptr [rbx - 0x173ef7be]; add al, 0x39; ret; 
0x0000000000126bab: cmovs ecx, dword ptr [rcx + 0x42b60fd1]; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x00000000000e097b: cmovs ecx, dword ptr [rcx + 0x42b60fd1]; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000bb0a9: cmovs ecx, dword ptr [rcx - 0x12cff8a9]; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000bb089: cmovs ecx, dword ptr [rcx - 0x12cff9a9]; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb069: cmovs ecx, dword ptr [rcx - 0x12cffaa9]; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b8f69: cmovs ecx, dword ptr [rcx - 0x72b7f9a9]; or eax, 0xee88349; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b8f39: cmovs ecx, dword ptr [rcx - 0x72b7faa9]; or al, 0x49; sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b7849: cmovs ecx, dword ptr [rcx - 0x7cb6faa9]; call 0x7f98c062; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x0000000000092a18: cmovs edi, dword ptr [rcx]; int1; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000012ce58: cmovs edi, dword ptr [rcx]; js 0x12ce65; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000018c4bb: cmp ah, byte ptr [rax]; jne 0x18c2f9; vzeroupper; ret; 
0x0000000000183db8: cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000183b3f: cmp ah, byte ptr [rbx - 0x25]; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000018393a: cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000180bea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018174a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180f2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000018070a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000018126a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180a4a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018022a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000018140a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000018056a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001806a0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001813a0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180ec0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001816e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001809e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000180500: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181200: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000183b96: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000162c38: cmp al, 0; call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x0000000000074c66: cmp al, 0x17; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000116eb8: cmp al, 0x20; je 0x116ea8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000156531: cmp al, 0x24; add byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x000000000010299b: cmp al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01ed: cmp al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd0209; add rsp, 0x28; ret; 
0x0000000000099430: cmp al, 0x2a; adc eax, 0xc0314500; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000e819f: cmp al, 0x2a; je 0xe81a7; cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c0: cmp al, 0x2a; je 0xe81a7; cmp al, 0x3f; jne 0xe81f9; mov eax, 1; ret; 
0x00000000000ec438: cmp al, 0x2e; je 0xec480; mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000a2893: cmp al, 0x3d; mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000e81a3: cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c4: cmp al, 0x3f; jne 0xe81f9; mov eax, 1; ret; 
0x0000000000116c38: cmp al, 0x48; add esp, 0x38; ret; 
0x000000000018c487: cmp al, 0xa; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c90d: cmp al, 0xa; jne 0x18c769; vzeroupper; ret; 
0x0000000000062b6a: cmp al, 0xc; ret 0x4489; 
0x0000000000118707: cmp al, 0xd; add byte ptr [rbp - 0x76f98b01], al; cmp eax, 0xd3c34; ret; 
0x00000000001125a6: cmp al, 0xe8; push rsp; ret 0xffff; 
0x000000000018c484: cmp al, 0xe; cmp edi, dword ptr [rdx + rcx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c90a: cmp al, 0xe; cmp edi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x00000000000d0905: cmp al, 0xf; xchg esp, eax; ret 0xc031; 
0x0000000000032847: cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000042832: cmp al, 0xff; dec dword ptr [rdi]; mov word ptr [rbp - 0x7f000000], es; sti; push rax; ret; 
0x000000000018f753: cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7a40: cmp al, 5; add byte ptr [rax], al; ret; 
0x000000000018b1f2: cmp al, byte ptr [rdx]; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000162144: cmp al, byte ptr [rip + 0x3d54e800]; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000019244e: cmp al, byte ptr [rsi - 1]; jne 0x1925c5; xor eax, eax; ret; 
0x000000000018e2ab: cmp al, cl; jne 0x18eb80; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000192502: cmp al, cl; jne 0x1925c5; cmp eax, ecx; jne 0x1925c5; xor eax, eax; ret; 
0x00000000001925bf: cmp al, cl; jne 0x1925c5; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000ac166: cmp al, dh; ret; 
0x00000000000ac165: cmp al, r14b; ret; 
0x0000000000121fac: cmp ax, -1; je 0x121fe0; add eax, 1; mov word ptr [rdx], ax; ret; 
0x0000000000041b7a: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x000000000009e951: cmp bh, al; dec dword ptr [rax - 0x75]; add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000012943a: cmp bh, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000002fdd2: cmp bh, bh; adc al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000001294b1: cmp bh, cl; cmovne eax, esi; ret; 
0x00000000000832e0: cmp bl, ch; movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000928ec: cmp bl, ch; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000091f07: cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000cf066: cmp byte ptr [r11], r15b; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x00000000000926c0: cmp byte ptr [r13 + 0x41], r11b; pop rsp; ret; 
0x000000000012ad0a: cmp byte ptr [r13 - 0x77], r9b; outsd dx, dword ptr [rsi]; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000012ac60: cmp byte ptr [r13 - 0x77], r9b; sbb byte ptr [eax - 0x77], cl; ret 0x2b49; 
0x0000000000153ca9: cmp byte ptr [r14 + 0xf], r12b; insb byte ptr [rdi], dx; ret 0x8948; 
0x0000000000043b42: cmp byte ptr [r15], r9b; adc dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000127787: cmp byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000088e1d: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000012806e: cmp byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x000000000012a90b: cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x0000000000128321: cmp byte ptr [r8 - 0x7d], cl; ret; 
0x00000000000fed68: cmp byte ptr [r8], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000091e60: cmp byte ptr [r9 - 0x3b7cb7fd], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d307: cmp byte ptr [rax + 0x39], cl; adc byte ptr [r10 + 0x32], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000158ba1: cmp byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000007e829: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000010c447: cmp byte ptr [rax + 0x63], cl; ret 0xc283; 
0x000000000014d152: cmp byte ptr [rax + 0xf000000], 0xc8; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000054334: cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000ac1a7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x00000000000ec462: cmp byte ptr [rax - 0x68], cl; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec461: cmp byte ptr [rax - 0x68], r9b; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000001157e5: cmp byte ptr [rax - 0x75], cl; and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000015fa05: cmp byte ptr [rax - 0x75], cl; and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x0000000000088e1e: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000089ed4: cmp byte ptr [rax - 0x75], cl; xor byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x0000000000127906: cmp byte ptr [rax - 0x77], cl; call 0x5c53d669; ret; 
0x000000000012806f: cmp byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000012a90c: cmp byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000009268d: cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000128322: cmp byte ptr [rax - 0x7d], cl; ret; 
0x0000000000054309: cmp byte ptr [rax - 1], 0x2f; jne 0x54300; pop rbx; ret; 
0x0000000000116d56: cmp byte ptr [rax - 1], bh; ret; 
0x000000000017c6e8: cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b6619: cmp byte ptr [rax], 1; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000183db3: cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000ac196: cmp byte ptr [rax], ah; ret; 
0x00000000000f4448: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x3c], cl; ret 0x8348; 
0x0000000000091e87: cmp byte ptr [rax], al; je 0x91e90; ret; 
0x00000000000fed69: cmp byte ptr [rax], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b14d4: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x00000000000ac676: cmp byte ptr [rax], dh; ret; 
0x00000000000ac186: cmp byte ptr [rax], dl; ret; 
0x00000000000ac185: cmp byte ptr [rax], r10b; ret; 
0x0000000000183db2: cmp byte ptr [rax], r12b; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000ac195: cmp byte ptr [rax], r12b; ret; 
0x00000000000ac675: cmp byte ptr [rax], r14b; ret; 
0x00000000000b14d3: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cf06a: cmp byte ptr [rbp + 0x13], dh; ret; 
0x00000000000cf069: cmp byte ptr [rbp + 0x13], r14b; ret; 
0x000000000002a9b6: cmp byte ptr [rbp + 0x39], cl; ret 0x820f; 
0x00000000000926c1: cmp byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000011cd82: cmp byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000012ad0b: cmp byte ptr [rbp - 0x77], cl; outsd dx, dword ptr [rsi]; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000012ac61: cmp byte ptr [rbp - 0x77], cl; sbb byte ptr [eax - 0x77], cl; ret 0x2b49; 
0x00000000000e1b57: cmp byte ptr [rbx + 0x10d9812d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc27: cmp byte ptr [rbx + 0x10f7412d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000084fcf: cmp byte ptr [rbx + 0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000025b98: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000091f08: cmp byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000002448e: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000138657: cmp byte ptr [rbx + 0xb7de12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000126347: cmp byte ptr [rbx + 0xc9ae12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124897: cmp byte ptr [rbx + 0xcb4392d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000cf067: cmp byte ptr [rbx], bh; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x000000000015dfeb: cmp byte ptr [rcx + rcx*4 - 0x10], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000086406: cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000008af98: cmp byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000feca0: cmp byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x00000000000a39ef: cmp byte ptr [rcx + rcx*4 - 0x4c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; fild dword ptr [rbp - 0x77]; ret 0x8948; 
0x0000000000091e61: cmp byte ptr [rcx - 0x3b7cb7fd], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000edb8f: cmp byte ptr [rcx - 0x6bf0f7b0], cl; ret 0x8040; 
0x000000000004fe8e: cmp byte ptr [rcx - 0x77], al; ret 0x4489; 
0x0000000000139a65: cmp byte ptr [rcx - 0xa], al; ret; 
0x000000000012126a: cmp byte ptr [rcx], 0; je 0x121270; ret; 
0x0000000000092a14: cmp byte ptr [rcx], 0xa; je 0x92a28; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000017c6e9: cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000b661a: cmp byte ptr [rcx], al; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000b8e94: cmp byte ptr [rcx], cl; add byte ptr [rax], al; ret; 
0x0000000000127970: cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000009685e: cmp byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000146334: cmp byte ptr [rdi + 0x1f0ffffe], dl; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000004229b: cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x000000000004736c: cmp byte ptr [rdi], 0; jne 0x47378; pop rbx; ret; 
0x0000000000043b43: cmp byte ptr [rdi], cl; adc dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x00000000000f07ce: cmp byte ptr [rdi], cl; mov dh, 0x14; cmp ch, cl; ret; 
0x000000000018eb10: cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000018eaf9: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018eae2: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018d59e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018dffd: cmp byte ptr [rdi], dl; ret; 
0x00000000000f07cd: cmp byte ptr [rdi], r9b; mov dh, 0x14; cmp ch, cl; ret; 
0x00000000001379fb: cmp byte ptr [rdx + 0x4401000b], cl; mov eax, eax; pop rbp; ret; 
0x0000000000087de5: cmp byte ptr [rdx], cl; je 0x87df8; cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x00000000001136ec: cmp byte ptr [rip - 0x1010], ah; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x000000000015d28c: cmp byte ptr [rip - 0x1417fff7], bh; push rdx; in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x00000000001984e1: cmp byte ptr [rip - 0x74b79c00], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000328ad: cmp byte ptr [rsi + 0x17], dh; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000153caa: cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8948; 
0x0000000000115f86: cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x00000000000e5138: cmp byte ptr [rsi], ah; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5008: cmp byte ptr [rsi], ah; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e51f9: cmp byte ptr [rsi], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000ee47a: cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000115a8d: cmp ch, al; pop r15; idiv edi; mov eax, 1; add rsp, 8; ret; 
0x0000000000127922: cmp ch, byte ptr [rbx - 0x76b70011]; ret; 
0x0000000000183b42: cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000f07d2: cmp ch, cl; ret; 
0x00000000000ec400: cmp cl, 0x2d; jne 0xec3ed; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3cf: cmp cl, 0x5e; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000646c1: cmp cl, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x0000000000134848: cmp cl, 5; jbe 0x1347b9; xor eax, eax; pop rbx; ret; 
0x0000000000100466: cmp cl, bh; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000018393d: cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000010c4dd: cmp cl, byte ptr [rax + 0x63]; ret 0xc283; 
0x00000000000bb4d4: cmp cl, byte ptr [rax + rdx + 2]; jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb584: cmp cl, byte ptr [rax + rdx + 2]; jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x000000000013e56b: cmp cl, byte ptr [rax - 0x77]; ret; 
0x0000000000183883: cmp cl, byte ptr [rax - 0x7d]; rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x000000000013e52c: cmp cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000d6dae: cmp cl, byte ptr [rbp + 0x3941000d]; ret 0x8c0f; 
0x0000000000080d1b: cmp cl, byte ptr [rcx - 0x77]; ror byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x00000000001269a9: cmp cl, byte ptr [rdi]; test byte ptr [rdi + 0xf000002], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000005448c: cmp cl, byte ptr [rdi]; xchg esp, eax; ret; 
0x0000000000057be5: cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x000000000015d233: cmp cx, 3; jbe 0x15d240; ret; 
0x00000000001280c4: cmp dh, al; add byte ptr [rax], ah; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001280a9: cmp dh, al; add byte ptr [rdx], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000129477: cmp dh, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000120bf9: cmp dh, bh; dec dword ptr [rbx + 0x48042444]; add esp, 0x28; ret; 
0x0000000000120b41: cmp dh, bh; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x0000000000188161: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000190afe: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000001294e8: cmp dh, cl; cmovne eax, edx; ret; 
0x00000000000b21e5: cmp dh, dh; ret 0x7501; 
0x00000000000f75bc: cmp dh, dh; ret 0xf08; 
0x00000000000f7e1c: cmp dh, dh; ret; 
0x0000000000120db9: cmp di, 0x12; ja 0x120dcc; movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000129439: cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000001294b0: cmp dil, cl; cmovne eax, esi; ret; 
0x00000000001901ea: cmp dl, 0x20; jb 0x1901f9; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000001901d7: cmp dl, 0x40; jb 0x1901ea; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018b745: cmp dl, 1; ja 0x18b785; jb 0x18b751; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018bc32: cmp dl, 1; ja 0x18bc63; jb 0x18bc3b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000001904d5: cmp dl, 1; ja 0x19052d; jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000190afa: cmp dl, 1; ja 0x190b39; jb 0x190b03; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000bbc05: cmp dl, 1; ja 0xbbc30; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000bc044: cmp dl, 1; ja 0xbc05e; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x000000000018fb5f: cmp dl, 1; jb 0x18fb68; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000019022e: cmp dl, 1; jb 0x190235; mov byte ptr [rdi], cl; ret; 
0x0000000000190221: cmp dl, 2; jb 0x19022e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000009f31b: cmp dl, 2; je 0x9f32e; cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x000000000009f320: cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x0000000000190216: cmp dl, 4; jb 0x190221; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000190203: cmp dl, 8; jb 0x190212; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000009c26d: cmp dl, al; jne 0x9c258; sub rax, 0x10; ret; 
0x0000000000042b32: cmp dl, byte ptr [rbx + 0xf66001a]; outsd dx, dword ptr [rsi]; ret 0xc764; 
0x00000000000a86e3: cmp dl, cl; jne 0xa86d0; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x000000000009c26c: cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x0000000000041233: cmp dword ptr [r8 + rax*4 + 4], r10d; jne 0x41220; mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x00000000000bcccb: cmp dword ptr [r9], edx; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x000000000008749c: cmp dword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000012ce5a: cmp dword ptr [rax + 8], edi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x0000000000041234: cmp dword ptr [rax + rax*4 + 4], edx; jne 0x41220; mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000044e9d: cmp dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000000e5137: cmp dword ptr [rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5007: cmp dword ptr [rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e51f8: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000087de4: cmp dword ptr [rax], 0xa; je 0x87df8; cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x0000000000158ac9: cmp dword ptr [rax], eax; add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x000000000012126b: cmp dword ptr [rax], eax; je 0x121270; ret; 
0x000000000015376d: cmp dword ptr [rax], ebx; je 0x153780; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094eab: cmp dword ptr [rbp + rdx], esi; ret; 
0x0000000000120133: cmp dword ptr [rbp - 0x2708fff4], edi; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000099f4e: cmp dword ptr [rbx + 0x154f222d], eax; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000000949f6: cmp dword ptr [rbx + 0x159e022d], eax; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000098843: cmp dword ptr [rbx + 0x15], eax; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000127ad7: cmp dword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000085620: cmp dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000011c02f: cmp dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x000000000015cc76: cmp dword ptr [rbx + 0x949da2d], eax; add byte ptr [rcx], al; mov rax, r8; pop rbp; ret; 
0x0000000000115333: cmp dword ptr [rbx + 0xd], ebp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000016ce38: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000000a2053: cmp dword ptr [rbx], 0; je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x0000000000048333: cmp dword ptr [rbx], edi; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000122054: cmp dword ptr [rcx + 0x10], edx; jb 0x122061; seta al; movzx eax, al; neg eax; ret; 
0x00000000000bcccc: cmp dword ptr [rcx], edx; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x0000000000093e99: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008d309: cmp dword ptr [rdi + 0x10], eax; jb 0x8d340; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d769: cmp dword ptr [rdi + 0x10], eax; jb 0x8d7b0; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000001028ac: cmp dword ptr [rdi + 0x10], edx; jb 0x1028b9; setne al; movzx eax, al; neg eax; ret; 
0x0000000000102a7d: cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x000000000008cd2a: cmp dword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x0000000000091e85: cmp dword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x00000000000cef0b: cmp dword ptr [rdi + 0xc], ecx; jne 0xcf080; xor eax, eax; ret; 
0x00000000001028cc: cmp dword ptr [rdi + 4], edx; ja 0x1028d7; setne al; movzx eax, al; ret; 
0x000000000009ef1f: cmp dword ptr [rdi + 8], esi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x00000000000c9bef: cmp dword ptr [rdi + rcx], edx; xchg ebx, eax; ret 0x3948; 
0x000000000012cedc: cmp dword ptr [rdi], 0; je 0x12cef0; ret; 
0x00000000000328ab: cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000008a721: cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x0000000000023a6f: cmp dword ptr [rdx + 0xd8], eax; jne 0x23a3b; ret; 
0x00000000000885e0: cmp dword ptr [rdx + 8], eax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x00000000000a07f3: cmp dword ptr [rdx], eax; or eax, 0x450f4800; ret 0xfc3; 
0x0000000000092a15: cmp dword ptr [rdx], ecx; je 0x92a28; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000012d833: cmp dword ptr [rdx], esp; add byte ptr [rax], al; nop word ptr [rax + rax]; endbr64; ret; 
0x000000000009e1f5: cmp dword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x0000000000095529: cmp dword ptr [rip + 0x159961], edi; jbe 0x954d8; add rsp, 8; ret; 
0x00000000001196f1: cmp dword ptr [rsi], 0; mov rbx, rsi; je 0x119700; pop rbx; ret; 
0x000000000012489a: cmp dword ptr [rsp + rcx + 0x45640100], esi; mov dword ptr [rax], ecx; add rsp, 8; ret; 
0x00000000000e5136: cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5006: cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e51f7: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000158ac8: cmp dword ptr fs:[rax], eax; add byte ptr [rcx - 0x77], al; ret 0xf883; 
0x0000000000102a03: cmp dx, 0xa; je 0x102a48; mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x0000000000102a0e: cmp dx, 2; je 0x102a18; ret; 
0x000000000015d21f: cmp dx, cx; sete al; ret; 
0x00000000000dcff4: cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x0000000000112d2d: cmp eax, -0x5f; je 0x112d38; neg eax; ret; 
0x0000000000112f7d: cmp eax, -0x5f; je 0x112f88; neg eax; ret; 
0x000000000013b3c8: cmp eax, -0xb; je 0x13b3c0; pop rbx; ret; 
0x000000000009cb93: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000121f6c: cmp eax, -1; je 0x121fe0; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x0000000000121fad: cmp eax, -1; je 0x121fe0; add eax, 1; mov word ptr [rdx], ax; ret; 
0x0000000000024239: cmp eax, -1; je 0x24328; add rsp, 0x98; ret; 
0x0000000000062f0e: cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x0000000000082ac4: cmp eax, -1; je 0x82ad8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000929de: cmp eax, -1; jne 0x929a3; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c270: cmp eax, -1; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000160b12: cmp eax, -1; sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x000000000002fdaa: cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x0000000000055c40: cmp eax, -8; jne 0x55c30; mov rax, rdx; ret; 
0x0000000000083f3e: cmp eax, 0x10016a8; ret; 
0x000000000008ded6: cmp eax, 0x1274e9; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000e4fe4: cmp eax, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e4fb6: cmp eax, 0x138f; je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x000000000009c1cc: cmp eax, 0x152c96; add dword ptr [rax - 0x77], ecx; ret 0x4974; 
0x0000000000098dad: cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa9: cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x000000000009552a: cmp eax, 0x159961; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000094a51: cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093927: cmp eax, 0x15ae94; syscall; ret; 
0x000000000009101f: cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f67: cmp eax, 0x16a814; syscall; ret; 
0x0000000000046c73: cmp eax, 0x16d861; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000d0028: cmp eax, 0x19; jg 0xd0050; mov rax, r12; pop r12; ret; 
0x0000000000047651: cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x00000000000951f8: cmp eax, 0x2000000; jbe 0x95200; ret; 
0x00000000000e4fbf: cmp eax, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x000000000010d8a7: cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x000000000011f7b8: cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x0000000000062f2a: cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000000098094: cmp eax, 0x31450015; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000015fd7e: cmp eax, 0x38c48348; ret; 
0x0000000000094e48: cmp eax, 0x408; jbe 0x94e50; ret; 
0x000000000011764f: cmp eax, 0x4c000d81; mov eax, eax; ret; 
0x0000000000098daf: cmp eax, 0x50f0015; pop rbp; ret; 
0x00000000000e50e1: cmp eax, 0x517b; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e5111: cmp eax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000198aa1: cmp eax, 0x55d5a; syscall; pop rbx; ret; 
0x0000000000198dd1: cmp eax, 0x57742; syscall; pop rbp; ret; 
0x0000000000198e2d: cmp eax, 0x57bee; call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x00000000000e4f45: cmp eax, 0x58465342; jne 0xe4f50; ret; 
0x00000000000e509d: cmp eax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000344e7: cmp eax, 0x64001b7a; add rax, qword ptr [0]; ret; 
0x00000000000d012b: cmp eax, 0x71; jg 0xd0150; lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x00000000000d012a: cmp eax, 0x7f71f883; and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x000000000009146f: cmp eax, 0x830015d3; ret 0x8901; 
0x00000000000a28cd: cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000000062f0a: cmp eax, 0x83c08941; clc; push qword ptr [rbp + rcx + 0x44]; mov eax, eax; ret; 
0x00000000000c3f71: cmp eax, 0x850f0c00; ret; 
0x0000000000188554: cmp eax, 0x89000001; ret 0x8948; 
0x000000000015066d: cmp eax, 0x89480006; ret; 
0x0000000000162149: cmp eax, 0x8948ffee; ret; 
0x00000000001132ff: cmp eax, 0x8bfff813; and al, 8; add rsp, 0x28; ret; 
0x00000000000ee2dd: cmp eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x000000000015dee5: cmp eax, 0x8e546; test edi, edi; jns 0x15def0; ret; 
0x000000000015d28b: cmp eax, 0x93d38; call 0x22580; test eax, eax; sete al; add rsp, 8; ret; 
0x0000000000095258: cmp eax, 0xa0; jbe 0x95260; ret; 
0x0000000000142461: cmp eax, 0xae5b2; syscall; pop rbp; ret; 
0x00000000000e50cb: cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000011870f: cmp eax, 0xd3c34; ret; 
0x0000000000117c2a: cmp eax, 0xd7c21; syscall; ret; 
0x0000000000117396: cmp eax, 0xd83cd; test rdi, rdi; jne 0x1173b0; mov eax, 1; ret; 
0x000000000015d28d: cmp eax, 0xebe80009; push rdx; in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x00000000000c6a97: cmp eax, 0xff; je 0xc6aa3; mov eax, r8d; ret; 
0x0000000000094e88: cmp eax, 0xffff; jbe 0x94e90; ret; 
0x000000000010c16b: cmp eax, 0xfffff000; ja 0x10c1d0; ret; 
0x000000000010c21b: cmp eax, 0xfffff000; ja 0x10c280; ret; 
0x000000000010d3b3: cmp eax, 0xfffff000; ja 0x10d37a; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d4bb: cmp eax, 0xfffff000; ja 0x10d4c8; ret; 
0x000000000010d51a: cmp eax, 0xfffff000; ja 0x10d528; ret; 
0x000000000010d57b: cmp eax, 0xfffff000; ja 0x10d588; ret; 
0x000000000010d903: cmp eax, 0xfffff000; ja 0x10d910; ret; 
0x000000000010d966: cmp eax, 0xfffff000; ja 0x10d970; ret; 
0x000000000010d9c0: cmp eax, 0xfffff000; ja 0x10d9d0; ret; 
0x000000000010dbf9: cmp eax, 0xfffff000; ja 0x10dc08; ret; 
0x000000000010dfd3: cmp eax, 0xfffff000; ja 0x10e030; ret; 
0x000000000010e078: cmp eax, 0xfffff000; ja 0x10e0d0; ret; 
0x000000000010e10c: cmp eax, 0xfffff000; ja 0x10e118; ret; 
0x000000000010e13c: cmp eax, 0xfffff000; ja 0x10e148; ret; 
0x000000000010e818: cmp eax, 0xfffff000; ja 0x10e860; ret; 
0x000000000010e998: cmp eax, 0xfffff000; ja 0x10e9e0; ret; 
0x0000000000112968: cmp eax, 0xfffff000; ja 0x1129c0; ret; 
0x0000000000112feb: cmp eax, 0xfffff000; ja 0x113068; ret; 
0x00000000001130af: cmp eax, 0xfffff000; ja 0x1130c0; ret; 
0x00000000001130f4: cmp eax, 0xfffff000; ja 0x113100; ret; 
0x00000000001131fb: cmp eax, 0xfffff000; ja 0x113260; ret; 
0x00000000001132ab: cmp eax, 0xfffff000; ja 0x113310; ret; 
0x000000000011334c: cmp eax, 0xfffff000; ja 0x113358; ret; 
0x0000000000113609: cmp eax, 0xfffff000; ja 0x113618; ret; 
0x000000000011363f: cmp eax, 0xfffff000; ja 0x113650; ret; 
0x000000000011367c: cmp eax, 0xfffff000; ja 0x113688; ret; 
0x0000000000113b62: cmp eax, 0xfffff000; ja 0x113bb8; ret; 
0x0000000000113d75: cmp eax, 0xfffff000; ja 0x113d80; ret; 
0x0000000000113db6: cmp eax, 0xfffff000; ja 0x113dc0; ret; 
0x00000000001143e8: cmp eax, 0xfffff000; ja 0x114440; ret; 
0x0000000000114488: cmp eax, 0xfffff000; ja 0x1144e0; ret; 
0x000000000011452e: cmp eax, 0xfffff000; ja 0x114598; ret; 
0x00000000001145ee: cmp eax, 0xfffff000; ja 0x114658; ret; 
0x0000000000114f7b: cmp eax, 0xfffff000; ja 0x114ff0; ret; 
0x00000000001151a8: cmp eax, 0xfffff000; ja 0x1151f0; ret; 
0x0000000000115268: cmp eax, 0xfffff000; ja 0x1152b0; ret; 
0x0000000000115328: cmp eax, 0xfffff000; ja 0x115330; ret; 
0x0000000000116aac: cmp eax, 0xfffff000; ja 0x116ab8; ret; 
0x0000000000116c91: cmp eax, 0xfffff000; ja 0x116ca0; ret; 
0x0000000000116ccc: cmp eax, 0xfffff000; ja 0x116cd8; ret; 
0x0000000000116cfc: cmp eax, 0xfffff000; ja 0x116d08; ret; 
0x00000000001188e7: cmp eax, 0xfffff000; ja 0x118950; pop rbx; pop rbp; ret; 
0x00000000001189e8: cmp eax, 0xfffff000; ja 0x118a40; ret; 
0x000000000011c4c3: cmp eax, 0xfffff000; ja 0x11c4d0; ret; 
0x000000000011f19c: cmp eax, 0xfffff000; ja 0x11f1a8; ret; 
0x000000000011f241: cmp eax, 0xfffff000; ja 0x11f2b8; ret; 
0x000000000011f2f4: cmp eax, 0xfffff000; ja 0x11f300; ret; 
0x000000000011f42b: cmp eax, 0xfffff000; ja 0x11f490; ret; 
0x000000000011f4db: cmp eax, 0xfffff000; ja 0x11f540; ret; 
0x000000000011f58b: cmp eax, 0xfffff000; ja 0x11f5f0; ret; 
0x000000000011f63b: cmp eax, 0xfffff000; ja 0x11f6b8; ret; 
0x000000000011f708: cmp eax, 0xfffff000; ja 0x11f760; ret; 
0x000000000011f7d0: cmp eax, 0xfffff000; ja 0x11f808; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011f834: cmp eax, 0xfffff000; ja 0x11f840; ret; 
0x00000000001200d8: cmp eax, 0xfffff000; ja 0x120130; ret; 
0x00000000001201a8: cmp eax, 0xfffff000; ja 0x120200; ret; 
0x0000000000120311: cmp eax, 0xfffff000; ja 0x120380; ret; 
0x00000000001203cb: cmp eax, 0xfffff000; ja 0x120440; ret; 
0x0000000000120488: cmp eax, 0xfffff000; ja 0x1204e0; ret; 
0x0000000000120531: cmp eax, 0xfffff000; ja 0x1205a0; ret; 
0x00000000001205e8: cmp eax, 0xfffff000; ja 0x120640; ret; 
0x000000000012068b: cmp eax, 0xfffff000; ja 0x120708; ret; 
0x0000000000120aeb: cmp eax, 0xfffff000; ja 0x120b50; ret; 
0x0000000000120b9b: cmp eax, 0xfffff000; ja 0x120c08; ret; 
0x0000000000120c4b: cmp eax, 0xfffff000; ja 0x120cb0; ret; 
0x0000000000120ebb: cmp eax, 0xfffff000; ja 0x120f20; ret; 
0x0000000000120f6b: cmp eax, 0xfffff000; ja 0x120fe0; ret; 
0x000000000012101c: cmp eax, 0xfffff000; ja 0x121028; ret; 
0x000000000012104c: cmp eax, 0xfffff000; ja 0x121058; ret; 
0x000000000012108c: cmp eax, 0xfffff000; ja 0x121098; ret; 
0x000000000012115f: cmp eax, 0xfffff000; ja 0x121170; ret; 
0x000000000012119c: cmp eax, 0xfffff000; ja 0x1211a8; ret; 
0x00000000001211cc: cmp eax, 0xfffff000; ja 0x1211d8; ret; 
0x00000000001211ff: cmp eax, 0xfffff000; ja 0x121210; ret; 
0x000000000012123c: cmp eax, 0xfffff000; ja 0x121248; ret; 
0x000000000012e7ae: cmp eax, 0xfffff000; ja 0x12e7c0; ret; 
0x0000000000043411: cmp eax, 0xfffff000; ja 0x43420; ret; 
0x000000000004345d: cmp eax, 0xfffff000; ja 0x434b0; ret; 
0x0000000000048228: cmp eax, 0xfffff000; ja 0x48280; ret; 
0x0000000000062e8c: cmp eax, 0xfffff000; ja 0x62e98; ret; 
0x0000000000062ebf: cmp eax, 0xfffff000; ja 0x62ed0; ret; 
0x00000000000d0dcc: cmp eax, 0xfffff000; ja 0xd0dd8; ret; 
0x00000000000d0ee1: cmp eax, 0xfffff000; ja 0xd0ef0; ret; 
0x00000000000d1081: cmp eax, 0xfffff000; ja 0xd1090; ret; 
0x00000000000dd078: cmp eax, 0xfffff000; ja 0xdd047; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd0f8: cmp eax, 0xfffff000; ja 0xdd0c7; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd126: cmp eax, 0xfffff000; ja 0xdd130; ret; 
0x00000000000de2bc: cmp eax, 0xfffff000; ja 0xde2c8; ret; 
0x00000000000e2c3b: cmp eax, 0xfffff000; ja 0xe2ca0; ret; 
0x00000000000e2cee: cmp eax, 0xfffff000; ja 0xe2d60; ret; 
0x00000000000e2e48: cmp eax, 0xfffff000; ja 0xe2e80; ret; 
0x0000000000112d26: cmp eax, 0xfffff000; jbe 0x112d48; cmp eax, -0x5f; je 0x112d38; neg eax; ret; 
0x0000000000112f76: cmp eax, 0xfffff000; jbe 0x112f98; cmp eax, -0x5f; je 0x112f88; neg eax; ret; 
0x0000000000112af2: cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x000000000010265c: cmp eax, 0xfffff001; jae 0x102664; ret; 
0x000000000010268c: cmp eax, 0xfffff001; jae 0x102694; ret; 
0x00000000001026bc: cmp eax, 0xfffff001; jae 0x1026c4; ret; 
0x00000000001026ec: cmp eax, 0xfffff001; jae 0x1026f4; ret; 
0x000000000010271c: cmp eax, 0xfffff001; jae 0x102724; ret; 
0x000000000010274c: cmp eax, 0xfffff001; jae 0x102754; ret; 
0x000000000010277c: cmp eax, 0xfffff001; jae 0x102784; ret; 
0x00000000001027ac: cmp eax, 0xfffff001; jae 0x1027b4; ret; 
0x000000000010d3dc: cmp eax, 0xfffff001; jae 0x10d3e4; ret; 
0x000000000010da0c: cmp eax, 0xfffff001; jae 0x10da14; ret; 
0x000000000010da3c: cmp eax, 0xfffff001; jae 0x10da44; ret; 
0x000000000010db6c: cmp eax, 0xfffff001; jae 0x10db74; ret; 
0x000000000010db9c: cmp eax, 0xfffff001; jae 0x10dba4; ret; 
0x000000000010dc5c: cmp eax, 0xfffff001; jae 0x10dc64; ret; 
0x000000000010dc8c: cmp eax, 0xfffff001; jae 0x10dc94; ret; 
0x000000000010e57c: cmp eax, 0xfffff001; jae 0x10e584; ret; 
0x000000000010e89c: cmp eax, 0xfffff001; jae 0x10e8a4; ret; 
0x000000000010e8cc: cmp eax, 0xfffff001; jae 0x10e8d4; ret; 
0x000000000010e8fc: cmp eax, 0xfffff001; jae 0x10e904; ret; 
0x000000000010e92c: cmp eax, 0xfffff001; jae 0x10e934; ret; 
0x000000000010e95c: cmp eax, 0xfffff001; jae 0x10e964; ret; 
0x000000000010ea1c: cmp eax, 0xfffff001; jae 0x10ea24; ret; 
0x000000000010ea4c: cmp eax, 0xfffff001; jae 0x10ea54; ret; 
0x000000000010f36c: cmp eax, 0xfffff001; jae 0x10f374; ret; 
0x000000000010f39c: cmp eax, 0xfffff001; jae 0x10f3a4; ret; 
0x000000000010f3cc: cmp eax, 0xfffff001; jae 0x10f3d4; ret; 
0x000000000010f3ff: cmp eax, 0xfffff001; jae 0x10f407; ret; 
0x000000000010fbbc: cmp eax, 0xfffff001; jae 0x10fbc4; ret; 
0x000000000010fbef: cmp eax, 0xfffff001; jae 0x10fbf7; ret; 
0x000000000010fc1c: cmp eax, 0xfffff001; jae 0x10fc24; ret; 
0x000000000010fc4c: cmp eax, 0xfffff001; jae 0x10fc54; ret; 
0x000000000010fc7c: cmp eax, 0xfffff001; jae 0x10fc84; ret; 
0x000000000010fcaf: cmp eax, 0xfffff001; jae 0x10fcb7; ret; 
0x000000000010fcdc: cmp eax, 0xfffff001; jae 0x10fce4; ret; 
0x000000000010fd0c: cmp eax, 0xfffff001; jae 0x10fd14; ret; 
0x000000000010fd3c: cmp eax, 0xfffff001; jae 0x10fd44; ret; 
0x0000000000112faf: cmp eax, 0xfffff001; jae 0x112fb7; ret; 
0x0000000000113dec: cmp eax, 0xfffff001; jae 0x113df4; ret; 
0x00000000001141ec: cmp eax, 0xfffff001; jae 0x1141f4; ret; 
0x00000000001143ac: cmp eax, 0xfffff001; jae 0x1143b4; ret; 
0x0000000000114dec: cmp eax, 0xfffff001; jae 0x114df4; ret; 
0x0000000000114f3c: cmp eax, 0xfffff001; jae 0x114f44; ret; 
0x000000000011513c: cmp eax, 0xfffff001; jae 0x115144; ret; 
0x000000000011516c: cmp eax, 0xfffff001; jae 0x115174; ret; 
0x000000000011522c: cmp eax, 0xfffff001; jae 0x115234; ret; 
0x00000000001152ec: cmp eax, 0xfffff001; jae 0x1152f4; ret; 
0x000000000011562c: cmp eax, 0xfffff001; jae 0x115634; ret; 
0x000000000011565c: cmp eax, 0xfffff001; jae 0x115664; ret; 
0x000000000011568c: cmp eax, 0xfffff001; jae 0x115694; ret; 
0x000000000011873e: cmp eax, 0xfffff001; jae 0x118746; ret; 
0x000000000011897c: cmp eax, 0xfffff001; jae 0x118984; ret; 
0x00000000001189ac: cmp eax, 0xfffff001; jae 0x1189b4; ret; 
0x0000000000118a7c: cmp eax, 0xfffff001; jae 0x118a84; ret; 
0x0000000000118aac: cmp eax, 0xfffff001; jae 0x118ab4; ret; 
0x0000000000118adf: cmp eax, 0xfffff001; jae 0x118ae7; ret; 
0x0000000000118b0c: cmp eax, 0xfffff001; jae 0x118b14; ret; 
0x0000000000118b3c: cmp eax, 0xfffff001; jae 0x118b44; ret; 
0x0000000000118b6c: cmp eax, 0xfffff001; jae 0x118b74; ret; 
0x0000000000118b9c: cmp eax, 0xfffff001; jae 0x118ba4; ret; 
0x000000000011cd9f: cmp eax, 0xfffff001; jae 0x11cda7; ret; 
0x000000000011cdcc: cmp eax, 0xfffff001; jae 0x11cdd4; ret; 
0x000000000011cdfc: cmp eax, 0xfffff001; jae 0x11ce04; ret; 
0x000000000011ce2f: cmp eax, 0xfffff001; jae 0x11ce37; ret; 
0x000000000011ce5f: cmp eax, 0xfffff001; jae 0x11ce67; ret; 
0x000000000011ce8c: cmp eax, 0xfffff001; jae 0x11ce94; ret; 
0x000000000011cebf: cmp eax, 0xfffff001; jae 0x11cec7; ret; 
0x000000000011ceec: cmp eax, 0xfffff001; jae 0x11cef4; ret; 
0x000000000011cf1c: cmp eax, 0xfffff001; jae 0x11cf24; ret; 
0x000000000011cf4f: cmp eax, 0xfffff001; jae 0x11cf57; ret; 
0x000000000011cf7c: cmp eax, 0xfffff001; jae 0x11cf84; ret; 
0x000000000011cfaf: cmp eax, 0xfffff001; jae 0x11cfb7; ret; 
0x000000000011efec: cmp eax, 0xfffff001; jae 0x11eff4; ret; 
0x000000000011f01c: cmp eax, 0xfffff001; jae 0x11f024; ret; 
0x000000000011f16c: cmp eax, 0xfffff001; jae 0x11f174; ret; 
0x000000000011f1cc: cmp eax, 0xfffff001; jae 0x11f1d4; ret; 
0x000000000011f1fc: cmp eax, 0xfffff001; jae 0x11f204; ret; 
0x000000000011f32c: cmp eax, 0xfffff001; jae 0x11f334; ret; 
0x000000000011f3bf: cmp eax, 0xfffff001; jae 0x11f3c7; ret; 
0x000000000011f3ec: cmp eax, 0xfffff001; jae 0x11f3f4; ret; 
0x000000000011f90c: cmp eax, 0xfffff001; jae 0x11f914; ret; 
0x000000000011f93c: cmp eax, 0xfffff001; jae 0x11f944; ret; 
0x000000000011f97f: cmp eax, 0xfffff001; jae 0x11f987; ret; 
0x000000000011f9ac: cmp eax, 0xfffff001; jae 0x11f9b4; ret; 
0x000000000011f9dc: cmp eax, 0xfffff001; jae 0x11f9e4; ret; 
0x000000000011fa0c: cmp eax, 0xfffff001; jae 0x11fa14; ret; 
0x000000000011fa3c: cmp eax, 0xfffff001; jae 0x11fa44; ret; 
0x000000000011fa6c: cmp eax, 0xfffff001; jae 0x11fa74; ret; 
0x000000000011fa9c: cmp eax, 0xfffff001; jae 0x11faa4; ret; 
0x000000000011facc: cmp eax, 0xfffff001; jae 0x11fad4; ret; 
0x000000000011faff: cmp eax, 0xfffff001; jae 0x11fb07; ret; 
0x000000000011fb2c: cmp eax, 0xfffff001; jae 0x11fb34; ret; 
0x000000000011fb5f: cmp eax, 0xfffff001; jae 0x11fb67; ret; 
0x000000000011fb8c: cmp eax, 0xfffff001; jae 0x11fb94; ret; 
0x000000000011fbbc: cmp eax, 0xfffff001; jae 0x11fbc4; ret; 
0x000000000011fbec: cmp eax, 0xfffff001; jae 0x11fbf4; ret; 
0x000000000011fc1c: cmp eax, 0xfffff001; jae 0x11fc24; ret; 
0x000000000011fc4c: cmp eax, 0xfffff001; jae 0x11fc54; ret; 
0x000000000011fc7f: cmp eax, 0xfffff001; jae 0x11fc87; ret; 
0x000000000011fcaf: cmp eax, 0xfffff001; jae 0x11fcb7; ret; 
0x000000000011fcdc: cmp eax, 0xfffff001; jae 0x11fce4; ret; 
0x000000000011fd0c: cmp eax, 0xfffff001; jae 0x11fd14; ret; 
0x000000000011fd3f: cmp eax, 0xfffff001; jae 0x11fd47; ret; 
0x000000000011fd6f: cmp eax, 0xfffff001; jae 0x11fd77; ret; 
0x000000000011fd9f: cmp eax, 0xfffff001; jae 0x11fda7; ret; 
0x000000000011fdcc: cmp eax, 0xfffff001; jae 0x11fdd4; ret; 
0x000000000011fdfc: cmp eax, 0xfffff001; jae 0x11fe04; ret; 
0x000000000011fe2c: cmp eax, 0xfffff001; jae 0x11fe34; ret; 
0x000000000011fe5c: cmp eax, 0xfffff001; jae 0x11fe64; ret; 
0x000000000011fe8f: cmp eax, 0xfffff001; jae 0x11fe97; ret; 
0x000000000011febc: cmp eax, 0xfffff001; jae 0x11fec4; ret; 
0x000000000011feec: cmp eax, 0xfffff001; jae 0x11fef4; ret; 
0x000000000011ff1f: cmp eax, 0xfffff001; jae 0x11ff27; ret; 
0x000000000011ff4c: cmp eax, 0xfffff001; jae 0x11ff54; ret; 
0x000000000011ff7f: cmp eax, 0xfffff001; jae 0x11ff87; ret; 
0x000000000011ffaf: cmp eax, 0xfffff001; jae 0x11ffb7; ret; 
0x000000000011ffdc: cmp eax, 0xfffff001; jae 0x11ffe4; ret; 
0x000000000012000c: cmp eax, 0xfffff001; jae 0x120014; ret; 
0x000000000012003c: cmp eax, 0xfffff001; jae 0x120044; ret; 
0x000000000012007c: cmp eax, 0xfffff001; jae 0x120084; ret; 
0x000000000012016c: cmp eax, 0xfffff001; jae 0x120174; ret; 
0x000000000012023c: cmp eax, 0xfffff001; jae 0x120244; ret; 
0x000000000012026c: cmp eax, 0xfffff001; jae 0x120274; ret; 
0x000000000012029f: cmp eax, 0xfffff001; jae 0x1202a7; ret; 
0x00000000001202cc: cmp eax, 0xfffff001; jae 0x1202d4; ret; 
0x000000000012074f: cmp eax, 0xfffff001; jae 0x120757; ret; 
0x000000000012077c: cmp eax, 0xfffff001; jae 0x120784; ret; 
0x00000000001207ac: cmp eax, 0xfffff001; jae 0x1207b4; ret; 
0x00000000001207df: cmp eax, 0xfffff001; jae 0x1207e7; ret; 
0x00000000000433dc: cmp eax, 0xfffff001; jae 0x433e4; ret; 
0x00000000000439cc: cmp eax, 0xfffff001; jae 0x439d4; ret; 
0x0000000000054f02: cmp eax, 0xfffff001; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41bc: cmp eax, 0xfffff001; jae 0xd41c4; ret; 
0x00000000000d41ec: cmp eax, 0xfffff001; jae 0xd41f4; ret; 
0x00000000000e2b4c: cmp eax, 0xfffff001; jae 0xe2b54; ret; 
0x00000000000e2d9c: cmp eax, 0xfffff001; jae 0xe2da4; ret; 
0x00000000000e317c: cmp eax, 0xfffff001; jae 0xe3184; ret; 
0x00000000000e412c: cmp eax, 0xfffff001; jae 0xe4134; ret; 
0x00000000000e437c: cmp eax, 0xfffff001; jae 0xe4384; ret; 
0x00000000000e43ac: cmp eax, 0xfffff001; jae 0xe43b4; ret; 
0x00000000000e440c: cmp eax, 0xfffff001; jae 0xe4414; ret; 
0x00000000000e443c: cmp eax, 0xfffff001; jae 0xe4444; ret; 
0x00000000000e446c: cmp eax, 0xfffff001; jae 0xe4474; ret; 
0x00000000000e449c: cmp eax, 0xfffff001; jae 0xe44a4; ret; 
0x00000000000ac7af: cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000000189be1: cmp eax, 1; ja 0x1899f0; je 0x1899e0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a8d1: cmp eax, 1; ja 0x18a5a0; je 0x18a590; vzeroupper; ret; 
0x000000000018a7ad: cmp eax, 1; ja 0x18a680; je 0x18a670; vzeroupper; ret; 
0x000000000018b4dd: cmp eax, 1; ja 0x18b3b0; je 0x18b3a0; vzeroupper; ret; 
0x00000000000a2222: cmp eax, 1; ja 0xa2200; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c326: cmp eax, 1; je 0x13c338; test eax, eax; jne 0x13c348; mov eax, r8d; ret; 
0x000000000014829b: cmp eax, 1; je 0x1482f0; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000001482f7: cmp eax, 1; je 0x148310; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bc6f1: cmp eax, 1; je 0xbc700; cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x0000000000117c10: cmp eax, 1; jg 0x117c16; ret; 
0x00000000000947f2: cmp eax, 1; sbb eax, eax; add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x0000000000157d67: cmp eax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x00000000000bc6f6: cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x0000000000155df5: cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000014874d: cmp eax, 3; jbe 0x148760; mov eax, 2; ret; 
0x00000000000f1f92: cmp eax, 3; je 0xf1ff0; xor eax, eax; pop rbp; ret; 
0x000000000004830a: cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x000000000009466e: cmp eax, 4; je 0x94674; ret; 
0x0000000000094c8b: cmp eax, 4; sete al; movzx eax, al; sub eax, 2; add rsp, 8; ret; 
0x000000000015d372: cmp eax, 9; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000005b6aa: cmp eax, 9; ja 0x5b680; mov rax, r8; ret; 
0x00000000000e3175: cmp eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000a2054: cmp eax, dword ptr [rax]; je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086034: cmp eax, dword ptr [rbx + 0x445b012f]; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000013228c: cmp eax, dword ptr [rbx + 0xbde142d]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013163c: cmp eax, dword ptr [rbx + 0xbe99c2d]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001258f4: cmp eax, dword ptr [rbx + 0xca4102d]; add byte ptr [rcx], al; mov eax, r8d; add rsp, 8; ret; 
0x00000000000d79bf: cmp eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000001138e4: cmp eax, dword ptr [rcx - 0x77]; ret; 
0x0000000000189801: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000121cf6: cmp eax, dword ptr [rip + 0xcdd54]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000cef8e: cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefa3: cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000cefb8: cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cefd3: cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cefee: cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf003: cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cf018: cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf023: cmp eax, dword ptr [rsi + 0x2c]; jne 0xcf080; ret; 
0x00000000000cf03e: cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000cf053: cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x00000000000cf068: cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000cf073: cmp eax, dword ptr [rsi + 0x3c]; jne 0xcf080; ret; 
0x00000000000ec3e8: cmp eax, dword ptr [rsi + 0x40]; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000cef73: cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x00000000000cef43: cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x00000000000cef58: cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x0000000000192aaa: cmp eax, dword ptr [rsi - 0x10]; jne 0x192be0; ret; 
0x0000000000192ac3: cmp eax, dword ptr [rsi - 0xc]; jne 0x192be0; ret; 
0x0000000000192af3: cmp eax, dword ptr [rsi - 4]; jne 0x192be0; ret; 
0x0000000000192bd3: cmp eax, dword ptr [rsi - 4]; jne 0x192be0; xor eax, eax; ret; 
0x0000000000192ad8: cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x00000000000cef2d: cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000e4f57: cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x00000000000cf18e: cmp eax, eax; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x0000000000086e18: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916e0: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x00000000000cf347: cmp eax, ecx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x000000000008803e: cmp eax, ecx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000000a88a2: cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000001923a2: cmp eax, ecx; jne 0x1925b0; xor eax, eax; ret; 
0x000000000019250a: cmp eax, ecx; jne 0x1925c5; xor eax, eax; ret; 
0x00000000000cf158: cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000001925c3: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000a87e7: cmp eax, ecx; setne r9b; test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x000000000013b90c: cmp eax, edi; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x000000000005b39e: cmp eax, edi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000012eb5d: cmp eax, edx; ja 0x12eb72; lea rdx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x000000000012ce55: cmp eax, edx; jae 0x12ce68; cmp qword ptr [rax + 8], rdi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x0000000000157637: cmp eax, edx; jae 0x157648; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000009397f: cmp eax, edx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x00000000001532f4: cmp eax, edx; je 0x1532fb; mov r8, rax; mov rax, r8; pop rbx; ret; 
0x00000000001533b4: cmp eax, edx; je 0x1533bf; lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153484: cmp eax, edx; je 0x15348f; lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153554: cmp eax, edx; je 0x15355f; lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x000000000013b94a: cmp eax, edx; jne 0x13b920; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000000a87b1: cmp eax, edx; jne 0xa87a0; mov rax, r8; ret; 
0x00000000000bcd07: cmp eax, edx; lea rdx, [rip + 0xcf2d0]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc847: cmp eax, edx; lea rdx, [rip + 0xcfa60]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f7: cmp eax, edx; lea rdx, [rip + 0xcfd00]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae7: cmp eax, edx; lea rdx, [rip + 0xd0360]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc807: cmp eax, edx; lea rdx, [rip + 0xd0410]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc957: cmp eax, edx; lea rdx, [rip + 0xd06e0]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd7: cmp eax, edx; lea rdx, [rip + 0xdbd70]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c77: cmp eax, edx; lea rdx, [rip + 0xe2b80]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f7: cmp eax, edx; lea rdx, [rip + 0xe4130]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb7: cmp eax, edx; lea rdx, [rip + 0xe6650]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f807: cmp eax, edx; lea rdx, [rip + 0xe8cf0]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f657: cmp eax, edx; lea rdx, [rip + 0xe9070]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f697: cmp eax, edx; lea rdx, [rip + 0xe91d0]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000e5065: cmp eax, edx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000033c35: cmp eax, edx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000a8923: cmp eax, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x0000000000087dea: cmp eax, esi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000012765d: cmp eax, esi; jb 0x127670; mov eax, 1; ret; 
0x000000000013c4d1: cmp eax, esi; jb 0x13c4bd; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000160da2: cmp eax, esi; jb 0x160d85; mov qword ptr [rip + 0x8e0eb], r8; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x00000000000a877d: cmp eax, esi; jne 0xa8770; mov rax, r8; ret; 
0x00000000000cf18d: cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000a1fdb: cmp ebp, eax; jbe 0xa2001; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006d067: cmp ebp, eax; ret; 
0x00000000000dd133: cmp ebp, ebp; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000198b7d: cmp ebp, ebx; jne 0x198b70; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015193a: cmp ebp, ebx; ret; 
0x000000000013e887: cmp ebp, esi; dec dword ptr [rax - 0x77]; ret; 
0x000000000009460a: cmp ebx, 0xa; je 0x94610; ret; 
0x00000000000ee2d9: cmp ebx, 0xa; je 0xee31b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000048284: cmp ebx, dword ptr [rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000048304: cmp ebx, dword ptr [rdx]; add byte ptr [rbx + rcx*4], ah; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000099eac: cmp ebx, ebp; jne 0x99e90; pop rbx; pop rbp; pop r12; ret; 
0x000000000013501c: cmp ebx, ebp; or eax, 0x42b60f90; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000013f07d: cmp ebx, ecx; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x00000000000dd815: cmp ebx, esp; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056524: cmp ecx, -1; jne 0x56518; mov rax, rdx; ret; 
0x0000000000052941: cmp ecx, 0x40; je 0x52953; mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x000000000013da05: cmp ecx, 0x4e8b0308; adc al, 0xf; xchg ebp, eax; ret 0x2144; 
0x000000000004234c: cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000102aa2: cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000011c4eb: cmp ecx, 0xc764000c; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000a15f5: cmp ecx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x0000000000057be6: cmp ecx, 0xe0757fff; mov eax, 1; ret; 
0x000000000015d234: cmp ecx, 3; jbe 0x15d240; ret; 
0x000000000009f350: cmp ecx, 9; jbe 0x9f338; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000015f806: cmp ecx, dword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x0000000000024d88: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000102a3c: cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x000000000018f774: cmp ecx, dword ptr [rdi - 4]; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000000860ba: cmp ecx, dword ptr [rdx + 0x28]; jae 0x860d0; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086261: cmp ecx, dword ptr [rdx + 0x28]; jae 0x86278; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000018c4b9: cmp ecx, dword ptr [rdx + rdi + 0x20]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c4e9: cmp ecx, dword ptr [rdx + rdi + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c94f: cmp ecx, dword ptr [rdx + rdi]; jne 0x18c769; vzeroupper; ret; 
0x000000000009c1e6: cmp ecx, dword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009c1dd: cmp ecx, dword ptr [rip + 0x152cb5]; jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x00000000000bcdf3: cmp ecx, dword ptr [rip - 0x3ddeb800]; lea rax, [rip + 0xcecd0]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000018c31a: cmp ecx, dword ptr [rsi + rdx + 0x20]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c33a: cmp ecx, dword ptr [rsi + rdx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c35a: cmp ecx, dword ptr [rsi + rdx + 0x60]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c67f: cmp ecx, dword ptr [rsi + rdx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c796: cmp ecx, dword ptr [rsi + rdx]; jne 0x18c769; vzeroupper; ret; 
0x000000000018cb54: cmp ecx, dword ptr [rsi]; jne 0x18c769; vzeroupper; ret; 
0x000000000018c4e7: cmp ecx, dword ptr ds:[rdx + rdi + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c94e: cmp ecx, dword ptr ds:[rdx + rdi]; jne 0x18c769; vzeroupper; ret; 
0x000000000018e725: cmp ecx, eax; jne 0x18eb53; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e1cb: cmp ecx, eax; jne 0x18eb53; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e11f: cmp ecx, eax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018e216: cmp ecx, eax; jne 0x18eb5f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e147: cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x000000000018e418: cmp ecx, eax; jne 0x18eb6a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018f74f: cmp ecx, eax; jne 0x18f993; xor eax, eax; ret; 
0x000000000018f99f: cmp ecx, eax; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000000cf16c: cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x0000000000055be8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000000a8850: cmp ecx, edx; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x0000000000120e08: cmp ecx, edx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000010fd84: cmp ecx, edx; seta al; sbb eax, 0; ret; 
0x0000000000092a1a: cmp ecx, esi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x00000000000a8854: cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a88d0: cmp ecx, esi; jne 0xa88c0; ret; 
0x0000000000120dba: cmp edi, 0x12; ja 0x120dcc; movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012f9e5: cmp edi, 0x3ff; ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x000000000012bd94: cmp edi, 0x56; je 0x12bda0; mov eax, 7; ret; 
0x00000000000d4245: cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x000000000013bcc5: cmp edi, 0xa; je 0x13bd0f; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013bcca: cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013bcef: cmp edi, 5; mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x0000000000122c56: cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x0000000000149279: cmp edi, dword ptr [rdx + 0x60]; ja 0x149290; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000018c60d: cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c486: cmp edi, dword ptr [rdx + rcx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c90c: cmp edi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x000000000011429e: cmp edi, eax; ja 0x1142c8; xor eax, eax; ret; 
0x00000000000482f5: cmp edi, eax; jb 0x482d5; xor eax, eax; ret; 
0x000000000005b333: cmp edi, eax; jbe 0x5b32a; mov rax, r10; ret; 
0x000000000005ea21: cmp edi, ecx; ja 0x5ea08; mov eax, r8d; ret; 
0x000000000018b728: cmp edi, ecx; jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001904b3: cmp edi, ecx; jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbed: cmp edi, ecx; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbb5b: cmp edi, edx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011d006: cmp edi, edx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000120c9f: cmp edi, esi; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x000000000010d1c9: cmp edi, esi; ja 0x10d1b8; mov eax, r8d; ret; 
0x0000000000094c67: cmp edi, esi; sete al; ret; 
0x00000000000e51be: cmp edx, 0x1badface; setne al; ret; 
0x00000000000e51d9: cmp edx, 0x1cd1; setne al; ret; 
0x00000000000bbfa3: cmp edx, 0x20; ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf23: cmp edx, 0x20; ja 0xbbfbc; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000d4235: cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x000000000009471a: cmp edx, 0x2a; jne 0x94700; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000e51d1: cmp edx, 0x2f; je 0xe51ea; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000018bb7b: cmp edx, 0x40; ja 0x18bb8e; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bb1b: cmp edx, 0x40; ja 0x18bb97; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000000e51b3: cmp edx, 0x414a53; je 0xe51ea; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51a6: cmp edx, 0x5346544e; setne al; ret; 
0x000000000012faf9: cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000001909a1: cmp edx, 0x80; ja 0x190a34; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000a09db: cmp edx, 0x8d48000e; adc eax, 0xefa0a; cmove rax, rdx; ret; 
0x0000000000102a04: cmp edx, 0xa; je 0x102a48; mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x00000000000e518a: cmp edx, 0xadf5; setne al; ret; 
0x00000000000bc136: cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000001890d6: cmp edx, 1; ja 0x189170; je 0x189160; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189e76: cmp edx, 1; ja 0x189f10; je 0x189f00; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000102a0f: cmp edx, 2; je 0x102a18; ret; 
0x000000000008d2e9: cmp edx, 2; je 0x8d320; mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d749: cmp edx, 2; je 0x8d780; mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x00000000000bce01: cmp edx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000001127e4: cmp edx, 4; ja 0x1127f0; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x000000000010d126: cmp edx, 4; je 0x10d134; mov eax, 0x1c; syscall; neg eax; ret; 
0x0000000000085584: cmp edx, dword ptr [rax + 8]; jae 0x85598; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000008570e: cmp edx, dword ptr [rax + 8]; jae 0x85720; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000055037: cmp edx, dword ptr [rax]; mov eax, 0; jne 0x55043; push r10; ret; 
0x0000000000055540: cmp edx, dword ptr [rax]; mov eax, 0; jne 0x5554c; push r10; ret; 
0x00000000000d7fd1: cmp edx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000018bd89: cmp edx, dword ptr [rsi + rcx]; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000018bda4: cmp edx, dword ptr [rsi]; jne 0x18bd8c; ret; 
0x0000000000184735: cmp edx, eax; jbe 0x184790; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184755: cmp edx, eax; jbe 0x184790; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184775: cmp edx, eax; jbe 0x184790; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184725: cmp edx, eax; jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x000000000018c1e5: cmp edx, eax; jbe 0x18c240; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c205: cmp edx, eax; jbe 0x18c240; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c225: cmp edx, eax; jbe 0x18c240; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d5: cmp edx, eax; jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x0000000000183b02: cmp edx, eax; jg 0x183b14; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183bb0; ret; 
0x000000000012dbdd: cmp edx, eax; jne 0x12dbc8; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012ed05: cmp edx, eax; jne 0x12ecf0; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000013b88a: cmp edx, eax; sbb eax, eax; ret; 
0x0000000000148c93: cmp edx, ebp; add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x000000000005b626: cmp edx, ecx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000155df1: cmp edx, ecx; je 0x155e10; cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000018388a: cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x0000000000183b0c: cmp edx, ecx; jle 0x183bb0; ret; 
0x000000000018bc16: cmp edx, ecx; jne 0x18bbfb; vzeroupper; ret; 
0x0000000000190ad9: cmp edx, ecx; jne 0x190ab6; vzeroupper; ret; 
0x000000000015d220: cmp edx, ecx; sete al; ret; 
0x000000000009a055: cmp edx, edi; jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000005b45d: cmp edx, edi; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x0000000000094192: cmp edx, edi; setae al; ret; 
0x00000000000a8818: cmp edx, esi; je 0xa8810; ret; 
0x00000000000bdfb7: cmp edx, esi; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x000000000013bcae: cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000013c572: cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000002c132: cmp esi, 0x860f07ff; pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x00000000000dcfa4: cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x000000000008ce5d: cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000010d0f9: cmp esi, 2; ja 0x10d106; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000015d21a: cmp esi, 3; ja 0x15d230; cmp dx, cx; sete al; ret; 
0x000000000002fd88: cmp esi, 3; je 0x2fd90; ret; 
0x000000000009f355: cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000018cca0: cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000dd11b: cmp esi, dword ptr [rdi + 0x2a]; mov eax, 0xe3; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000001492a2: cmp esi, dword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000018b749: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018c515: cmp esi, dword ptr [rdx + rcx + 0x60]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c9cb: cmp esi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x0000000000028edc: cmp esi, dword ptr [rdx - 0x5417ffe8]; mov al, 0; add byte ptr [rcx - 0x77], al; ret 0xcde9; 
0x000000000013c430: cmp esi, eax; ja 0x13c41c; mov eax, 0xffffffff; ret; 
0x000000000013c75e: cmp esi, eax; jae 0x13c76b; shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000188a65: cmp esi, eax; jbe 0x188ae0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000010e033: cmp esi, ebx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000008749b: cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000012ce59: cmp qword ptr [rax + 8], rdi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000015376c: cmp qword ptr [rax], rbx; je 0x153780; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127ad6: cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000a2052: cmp qword ptr [rbx], 0; je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x0000000000122053: cmp qword ptr [rcx + 0x10], rdx; jb 0x122061; seta al; movzx eax, al; neg eax; ret; 
0x0000000000093e98: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008d308: cmp qword ptr [rdi + 0x10], rax; jb 0x8d340; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d768: cmp qword ptr [rdi + 0x10], rax; jb 0x8d7b0; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008cd29: cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x0000000000091e84: cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009ef1e: cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000012cedb: cmp qword ptr [rdi], 0; je 0x12cef0; ret; 
0x000000000008a720: cmp qword ptr [rdx + 0x48], r8; cmovne eax, ecx; ret; 
0x0000000000023a6e: cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x00000000000885df: cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000009e1f4: cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x0000000000095528: cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x00000000001196f0: cmp qword ptr [rsi], 0; mov rbx, rsi; je 0x119700; pop rbx; ret; 
0x0000000000055036: cmp r10, qword ptr [rax]; mov eax, 0; jne 0x55043; push r10; ret; 
0x000000000005553f: cmp r10, qword ptr [rax]; mov eax, 0; jne 0x5554c; push r10; ret; 
0x000000000005b45c: cmp r10, rdi; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000001904d4: cmp r10b, 1; ja 0x19052d; jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000008d2e8: cmp r10d, 2; je 0x8d320; mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d748: cmp r10d, 2; je 0x8d780; mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x00000000000832df: cmp r11b, r13b; movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000928eb: cmp r11b, r13b; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000094609: cmp r11d, 0xa; je 0x94610; ret; 
0x000000000013f07c: cmp r11d, r9d; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x000000000018c4ba: cmp r12b, byte ptr [rax]; jne 0x18c2f9; vzeroupper; ret; 
0x0000000000120bf8: cmp r14b, dil; dec dword ptr [rbx + 0x48042444]; add esp, 0x28; ret; 
0x000000000013bcc9: cmp r15d, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x0000000000055c3f: cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x00000000000e4fe3: cmp r8, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e4fb5: cmp r8, 0x138f; je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e4fbe: cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e4f44: cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000000947f1: cmp r8, 1; sbb eax, eax; add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x00000000000e4f56: cmp r8, rax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x000000000013b90b: cmp r8, rdi; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x00000000000c6a96: cmp r8d, 0xff; je 0xc6aa3; mov eax, r8d; ret; 
0x0000000000189be0: cmp r8d, 1; ja 0x1899f0; je 0x1899e0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a8d0: cmp r8d, 1; ja 0x18a5a0; je 0x18a590; vzeroupper; ret; 
0x000000000018a7ac: cmp r8d, 1; ja 0x18a680; je 0x18a670; vzeroupper; ret; 
0x000000000018b4dc: cmp r8d, 1; ja 0x18b3b0; je 0x18b3a0; vzeroupper; ret; 
0x00000000000a8922: cmp r8d, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000010c16a: cmp rax, -0x1000; ja 0x10c1d0; ret; 
0x000000000010c21a: cmp rax, -0x1000; ja 0x10c280; ret; 
0x000000000010d3b2: cmp rax, -0x1000; ja 0x10d37a; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d4ba: cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x000000000010d519: cmp rax, -0x1000; ja 0x10d528; ret; 
0x000000000010d57a: cmp rax, -0x1000; ja 0x10d588; ret; 
0x000000000010d902: cmp rax, -0x1000; ja 0x10d910; ret; 
0x000000000010d965: cmp rax, -0x1000; ja 0x10d970; ret; 
0x000000000010d9bf: cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x000000000010dbf8: cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000010dfd2: cmp rax, -0x1000; ja 0x10e030; ret; 
0x000000000010e077: cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x000000000010e10b: cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000010e13b: cmp rax, -0x1000; ja 0x10e148; ret; 
0x000000000010e817: cmp rax, -0x1000; ja 0x10e860; ret; 
0x000000000010e997: cmp rax, -0x1000; ja 0x10e9e0; ret; 
0x0000000000112967: cmp rax, -0x1000; ja 0x1129c0; ret; 
0x0000000000112fea: cmp rax, -0x1000; ja 0x113068; ret; 
0x00000000001130ae: cmp rax, -0x1000; ja 0x1130c0; ret; 
0x00000000001130f3: cmp rax, -0x1000; ja 0x113100; ret; 
0x00000000001131fa: cmp rax, -0x1000; ja 0x113260; ret; 
0x00000000001132aa: cmp rax, -0x1000; ja 0x113310; ret; 
0x000000000011334b: cmp rax, -0x1000; ja 0x113358; ret; 
0x0000000000113608: cmp rax, -0x1000; ja 0x113618; ret; 
0x000000000011363e: cmp rax, -0x1000; ja 0x113650; ret; 
0x000000000011367b: cmp rax, -0x1000; ja 0x113688; ret; 
0x0000000000113b61: cmp rax, -0x1000; ja 0x113bb8; ret; 
0x0000000000113d74: cmp rax, -0x1000; ja 0x113d80; ret; 
0x0000000000113db5: cmp rax, -0x1000; ja 0x113dc0; ret; 
0x00000000001143e7: cmp rax, -0x1000; ja 0x114440; ret; 
0x0000000000114487: cmp rax, -0x1000; ja 0x1144e0; ret; 
0x000000000011452d: cmp rax, -0x1000; ja 0x114598; ret; 
0x00000000001145ed: cmp rax, -0x1000; ja 0x114658; ret; 
0x0000000000114f7a: cmp rax, -0x1000; ja 0x114ff0; ret; 
0x00000000001151a7: cmp rax, -0x1000; ja 0x1151f0; ret; 
0x0000000000115267: cmp rax, -0x1000; ja 0x1152b0; ret; 
0x0000000000115327: cmp rax, -0x1000; ja 0x115330; ret; 
0x0000000000116aab: cmp rax, -0x1000; ja 0x116ab8; ret; 
0x0000000000116c90: cmp rax, -0x1000; ja 0x116ca0; ret; 
0x0000000000116ccb: cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116cfb: cmp rax, -0x1000; ja 0x116d08; ret; 
0x00000000001188e6: cmp rax, -0x1000; ja 0x118950; pop rbx; pop rbp; ret; 
0x00000000001189e7: cmp rax, -0x1000; ja 0x118a40; ret; 
0x000000000011c4c2: cmp rax, -0x1000; ja 0x11c4d0; ret; 
0x000000000011f19b: cmp rax, -0x1000; ja 0x11f1a8; ret; 
0x000000000011f240: cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x000000000011f2f3: cmp rax, -0x1000; ja 0x11f300; ret; 
0x000000000011f42a: cmp rax, -0x1000; ja 0x11f490; ret; 
0x000000000011f4da: cmp rax, -0x1000; ja 0x11f540; ret; 
0x000000000011f58a: cmp rax, -0x1000; ja 0x11f5f0; ret; 
0x000000000011f63a: cmp rax, -0x1000; ja 0x11f6b8; ret; 
0x000000000011f707: cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f7cf: cmp rax, -0x1000; ja 0x11f808; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011f833: cmp rax, -0x1000; ja 0x11f840; ret; 
0x00000000001200d7: cmp rax, -0x1000; ja 0x120130; ret; 
0x00000000001201a7: cmp rax, -0x1000; ja 0x120200; ret; 
0x0000000000120310: cmp rax, -0x1000; ja 0x120380; ret; 
0x00000000001203ca: cmp rax, -0x1000; ja 0x120440; ret; 
0x0000000000120487: cmp rax, -0x1000; ja 0x1204e0; ret; 
0x0000000000120530: cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205e7: cmp rax, -0x1000; ja 0x120640; ret; 
0x000000000012068a: cmp rax, -0x1000; ja 0x120708; ret; 
0x0000000000120aea: cmp rax, -0x1000; ja 0x120b50; ret; 
0x0000000000120b9a: cmp rax, -0x1000; ja 0x120c08; ret; 
0x0000000000120c4a: cmp rax, -0x1000; ja 0x120cb0; ret; 
0x0000000000120eba: cmp rax, -0x1000; ja 0x120f20; ret; 
0x0000000000120f6a: cmp rax, -0x1000; ja 0x120fe0; ret; 
0x000000000012101b: cmp rax, -0x1000; ja 0x121028; ret; 
0x000000000012104b: cmp rax, -0x1000; ja 0x121058; ret; 
0x000000000012108b: cmp rax, -0x1000; ja 0x121098; ret; 
0x000000000012115e: cmp rax, -0x1000; ja 0x121170; ret; 
0x000000000012119b: cmp rax, -0x1000; ja 0x1211a8; ret; 
0x00000000001211cb: cmp rax, -0x1000; ja 0x1211d8; ret; 
0x00000000001211fe: cmp rax, -0x1000; ja 0x121210; ret; 
0x000000000012123b: cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000012e7ad: cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x0000000000043410: cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000004345c: cmp rax, -0x1000; ja 0x434b0; ret; 
0x0000000000048227: cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000062e8b: cmp rax, -0x1000; ja 0x62e98; ret; 
0x0000000000062ebe: cmp rax, -0x1000; ja 0x62ed0; ret; 
0x00000000000d0dcb: cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000d0ee0: cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000d1080: cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000dd077: cmp rax, -0x1000; ja 0xdd047; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd0f7: cmp rax, -0x1000; ja 0xdd0c7; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd125: cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2bb: cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000e2c3a: cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2ced: cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000e2e47: cmp rax, -0x1000; ja 0xe2e80; ret; 
0x000000000010265b: cmp rax, -0xfff; jae 0x102664; ret; 
0x000000000010268b: cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026bb: cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026eb: cmp rax, -0xfff; jae 0x1026f4; ret; 
0x000000000010271b: cmp rax, -0xfff; jae 0x102724; ret; 
0x000000000010274b: cmp rax, -0xfff; jae 0x102754; ret; 
0x000000000010277b: cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027ab: cmp rax, -0xfff; jae 0x1027b4; ret; 
0x000000000010d3db: cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x000000000010da0b: cmp rax, -0xfff; jae 0x10da14; ret; 
0x000000000010da3b: cmp rax, -0xfff; jae 0x10da44; ret; 
0x000000000010db6b: cmp rax, -0xfff; jae 0x10db74; ret; 
0x000000000010db9b: cmp rax, -0xfff; jae 0x10dba4; ret; 
0x000000000010dc5b: cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010dc8b: cmp rax, -0xfff; jae 0x10dc94; ret; 
0x000000000010e57b: cmp rax, -0xfff; jae 0x10e584; ret; 
0x000000000010e89b: cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x000000000010e8cb: cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x000000000010e8fb: cmp rax, -0xfff; jae 0x10e904; ret; 
0x000000000010e92b: cmp rax, -0xfff; jae 0x10e934; ret; 
0x000000000010e95b: cmp rax, -0xfff; jae 0x10e964; ret; 
0x000000000010ea1b: cmp rax, -0xfff; jae 0x10ea24; ret; 
0x000000000010ea4b: cmp rax, -0xfff; jae 0x10ea54; ret; 
0x000000000010f36b: cmp rax, -0xfff; jae 0x10f374; ret; 
0x000000000010f39b: cmp rax, -0xfff; jae 0x10f3a4; ret; 
0x000000000010f3cb: cmp rax, -0xfff; jae 0x10f3d4; ret; 
0x000000000010f3fe: cmp rax, -0xfff; jae 0x10f407; ret; 
0x000000000010fbbb: cmp rax, -0xfff; jae 0x10fbc4; ret; 
0x000000000010fbee: cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x000000000010fc1b: cmp rax, -0xfff; jae 0x10fc24; ret; 
0x000000000010fc4b: cmp rax, -0xfff; jae 0x10fc54; ret; 
0x000000000010fc7b: cmp rax, -0xfff; jae 0x10fc84; ret; 
0x000000000010fcae: cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x000000000010fcdb: cmp rax, -0xfff; jae 0x10fce4; ret; 
0x000000000010fd0b: cmp rax, -0xfff; jae 0x10fd14; ret; 
0x000000000010fd3b: cmp rax, -0xfff; jae 0x10fd44; ret; 
0x0000000000112fae: cmp rax, -0xfff; jae 0x112fb7; ret; 
0x0000000000113deb: cmp rax, -0xfff; jae 0x113df4; ret; 
0x00000000001141eb: cmp rax, -0xfff; jae 0x1141f4; ret; 
0x00000000001143ab: cmp rax, -0xfff; jae 0x1143b4; ret; 
0x0000000000114deb: cmp rax, -0xfff; jae 0x114df4; ret; 
0x0000000000114f3b: cmp rax, -0xfff; jae 0x114f44; ret; 
0x000000000011513b: cmp rax, -0xfff; jae 0x115144; ret; 
0x000000000011516b: cmp rax, -0xfff; jae 0x115174; ret; 
0x000000000011522b: cmp rax, -0xfff; jae 0x115234; ret; 
0x00000000001152eb: cmp rax, -0xfff; jae 0x1152f4; ret; 
0x000000000011562b: cmp rax, -0xfff; jae 0x115634; ret; 
0x000000000011565b: cmp rax, -0xfff; jae 0x115664; ret; 
0x000000000011568b: cmp rax, -0xfff; jae 0x115694; ret; 
0x000000000011873d: cmp rax, -0xfff; jae 0x118746; ret; 
0x000000000011897b: cmp rax, -0xfff; jae 0x118984; ret; 
0x00000000001189ab: cmp rax, -0xfff; jae 0x1189b4; ret; 
0x0000000000118a7b: cmp rax, -0xfff; jae 0x118a84; ret; 
0x0000000000118aab: cmp rax, -0xfff; jae 0x118ab4; ret; 
0x0000000000118ade: cmp rax, -0xfff; jae 0x118ae7; ret; 
0x0000000000118b0b: cmp rax, -0xfff; jae 0x118b14; ret; 
0x0000000000118b3b: cmp rax, -0xfff; jae 0x118b44; ret; 
0x0000000000118b6b: cmp rax, -0xfff; jae 0x118b74; ret; 
0x0000000000118b9b: cmp rax, -0xfff; jae 0x118ba4; ret; 
0x000000000011cd9e: cmp rax, -0xfff; jae 0x11cda7; ret; 
0x000000000011cdcb: cmp rax, -0xfff; jae 0x11cdd4; ret; 
0x000000000011cdfb: cmp rax, -0xfff; jae 0x11ce04; ret; 
0x000000000011ce2e: cmp rax, -0xfff; jae 0x11ce37; ret; 
0x000000000011ce5e: cmp rax, -0xfff; jae 0x11ce67; ret; 
0x000000000011ce8b: cmp rax, -0xfff; jae 0x11ce94; ret; 
0x000000000011cebe: cmp rax, -0xfff; jae 0x11cec7; ret; 
0x000000000011ceeb: cmp rax, -0xfff; jae 0x11cef4; ret; 
0x000000000011cf1b: cmp rax, -0xfff; jae 0x11cf24; ret; 
0x000000000011cf4e: cmp rax, -0xfff; jae 0x11cf57; ret; 
0x000000000011cf7b: cmp rax, -0xfff; jae 0x11cf84; ret; 
0x000000000011cfae: cmp rax, -0xfff; jae 0x11cfb7; ret; 
0x000000000011efeb: cmp rax, -0xfff; jae 0x11eff4; ret; 
0x000000000011f01b: cmp rax, -0xfff; jae 0x11f024; ret; 
0x000000000011f16b: cmp rax, -0xfff; jae 0x11f174; ret; 
0x000000000011f1cb: cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x000000000011f1fb: cmp rax, -0xfff; jae 0x11f204; ret; 
0x000000000011f32b: cmp rax, -0xfff; jae 0x11f334; ret; 
0x000000000011f3be: cmp rax, -0xfff; jae 0x11f3c7; ret; 
0x000000000011f3eb: cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f90b: cmp rax, -0xfff; jae 0x11f914; ret; 
0x000000000011f93b: cmp rax, -0xfff; jae 0x11f944; ret; 
0x000000000011f97e: cmp rax, -0xfff; jae 0x11f987; ret; 
0x000000000011f9ab: cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x000000000011f9db: cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x000000000011fa0b: cmp rax, -0xfff; jae 0x11fa14; ret; 
0x000000000011fa3b: cmp rax, -0xfff; jae 0x11fa44; ret; 
0x000000000011fa6b: cmp rax, -0xfff; jae 0x11fa74; ret; 
0x000000000011fa9b: cmp rax, -0xfff; jae 0x11faa4; ret; 
0x000000000011facb: cmp rax, -0xfff; jae 0x11fad4; ret; 
0x000000000011fafe: cmp rax, -0xfff; jae 0x11fb07; ret; 
0x000000000011fb2b: cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fb5e: cmp rax, -0xfff; jae 0x11fb67; ret; 
0x000000000011fb8b: cmp rax, -0xfff; jae 0x11fb94; ret; 
0x000000000011fbbb: cmp rax, -0xfff; jae 0x11fbc4; ret; 
0x000000000011fbeb: cmp rax, -0xfff; jae 0x11fbf4; ret; 
0x000000000011fc1b: cmp rax, -0xfff; jae 0x11fc24; ret; 
0x000000000011fc4b: cmp rax, -0xfff; jae 0x11fc54; ret; 
0x000000000011fc7e: cmp rax, -0xfff; jae 0x11fc87; ret; 
0x000000000011fcae: cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x000000000011fcdb: cmp rax, -0xfff; jae 0x11fce4; ret; 
0x000000000011fd0b: cmp rax, -0xfff; jae 0x11fd14; ret; 
0x000000000011fd3e: cmp rax, -0xfff; jae 0x11fd47; ret; 
0x000000000011fd6e: cmp rax, -0xfff; jae 0x11fd77; ret; 
0x000000000011fd9e: cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000011fdcb: cmp rax, -0xfff; jae 0x11fdd4; ret; 
0x000000000011fdfb: cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000011fe2b: cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000011fe5b: cmp rax, -0xfff; jae 0x11fe64; ret; 
0x000000000011fe8e: cmp rax, -0xfff; jae 0x11fe97; ret; 
0x000000000011febb: cmp rax, -0xfff; jae 0x11fec4; ret; 
0x000000000011feeb: cmp rax, -0xfff; jae 0x11fef4; ret; 
0x000000000011ff1e: cmp rax, -0xfff; jae 0x11ff27; ret; 
0x000000000011ff4b: cmp rax, -0xfff; jae 0x11ff54; ret; 
0x000000000011ff7e: cmp rax, -0xfff; jae 0x11ff87; ret; 
0x000000000011ffae: cmp rax, -0xfff; jae 0x11ffb7; ret; 
0x000000000011ffdb: cmp rax, -0xfff; jae 0x11ffe4; ret; 
0x000000000012000b: cmp rax, -0xfff; jae 0x120014; ret; 
0x000000000012003b: cmp rax, -0xfff; jae 0x120044; ret; 
0x000000000012007b: cmp rax, -0xfff; jae 0x120084; ret; 
0x000000000012016b: cmp rax, -0xfff; jae 0x120174; ret; 
0x000000000012023b: cmp rax, -0xfff; jae 0x120244; ret; 
0x000000000012026b: cmp rax, -0xfff; jae 0x120274; ret; 
0x000000000012029e: cmp rax, -0xfff; jae 0x1202a7; ret; 
0x00000000001202cb: cmp rax, -0xfff; jae 0x1202d4; ret; 
0x000000000012074e: cmp rax, -0xfff; jae 0x120757; ret; 
0x000000000012077b: cmp rax, -0xfff; jae 0x120784; ret; 
0x00000000001207ab: cmp rax, -0xfff; jae 0x1207b4; ret; 
0x00000000001207de: cmp rax, -0xfff; jae 0x1207e7; ret; 
0x00000000000433db: cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000439cb: cmp rax, -0xfff; jae 0x439d4; ret; 
0x0000000000054f01: cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41bb: cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000d41eb: cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e2b4b: cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000e2d9b: cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000e317b: cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e412b: cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e437b: cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e43ab: cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e440b: cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e443b: cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e446b: cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e449b: cmp rax, -0xfff; jae 0xe44a4; ret; 
0x000000000009cb92: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000d0027: cmp rax, 0x19; jg 0xd0050; mov rax, r12; pop r12; ret; 
0x00000000000951f7: cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e47: cmp rax, 0x408; jbe 0x94e50; ret; 
0x00000000000e50e0: cmp rax, 0x517b; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e5110: cmp rax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e509c: cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000095257: cmp rax, 0xa0; jbe 0x95260; ret; 
0x00000000000e50ca: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000094e87: cmp rax, 0xffff; jbe 0x94e90; ret; 
0x00000000000a2221: cmp rax, 1; ja 0xa2200; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157d66: cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x000000000005b6a9: cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x0000000000121cf5: cmp rax, qword ptr [rip + 0xcdd54]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000086e17: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916df: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x00000000000cf346: cmp rax, rcx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x000000000008803d: cmp rax, rcx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x000000000005b39d: cmp rax, rdi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000012eb5c: cmp rax, rdx; ja 0x12eb72; lea rdx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x000000000012ce54: cmp rax, rdx; jae 0x12ce68; cmp qword ptr [rax + 8], rdi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000009397e: cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x00000000001532f3: cmp rax, rdx; je 0x1532fb; mov r8, rax; mov rax, r8; pop rbx; ret; 
0x00000000001533b3: cmp rax, rdx; je 0x1533bf; lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153483: cmp rax, rdx; je 0x15348f; lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153553: cmp rax, rdx; je 0x15355f; lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x00000000000bcd06: cmp rax, rdx; lea rdx, [rip + 0xcf2d0]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc846: cmp rax, rdx; lea rdx, [rip + 0xcfa60]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f6: cmp rax, rdx; lea rdx, [rip + 0xcfd00]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae6: cmp rax, rdx; lea rdx, [rip + 0xd0360]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc806: cmp rax, rdx; lea rdx, [rip + 0xd0410]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc956: cmp rax, rdx; lea rdx, [rip + 0xd06e0]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd6: cmp rax, rdx; lea rdx, [rip + 0xdbd70]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c76: cmp rax, rdx; lea rdx, [rip + 0xe2b80]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f6: cmp rax, rdx; lea rdx, [rip + 0xe4130]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb6: cmp rax, rdx; lea rdx, [rip + 0xe6650]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f806: cmp rax, rdx; lea rdx, [rip + 0xe8cf0]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f656: cmp rax, rdx; lea rdx, [rip + 0xe9070]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f696: cmp rax, rdx; lea rdx, [rip + 0xe91d0]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000e5064: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000033c34: cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000000087de9: cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000012765c: cmp rax, rsi; jb 0x127670; mov eax, 1; ret; 
0x0000000000160da1: cmp rax, rsi; jb 0x160d85; mov qword ptr [rip + 0x8e0eb], r8; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x00000000000a1fda: cmp rbp, rax; jbe 0xa2001; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198b7c: cmp rbp, rbx; jne 0x198b70; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000dd814: cmp rbx, r12; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099eab: cmp rbx, rbp; jne 0x99e90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056523: cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x00000000000a15f4: cmp rcx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x000000000015f805: cmp rcx, qword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x00000000000860b9: cmp rcx, qword ptr [rdx + 0x28]; jae 0x860d0; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086260: cmp rcx, qword ptr [rdx + 0x28]; jae 0x86278; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000009c1e5: cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009c1dc: cmp rcx, qword ptr [rip + 0x152cb5]; jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000018e724: cmp rcx, rax; jne 0x18eb53; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e1ca: cmp rcx, rax; jne 0x18eb53; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e11e: cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f74e: cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x0000000000055be7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000120e07: cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000010fd83: cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x0000000000092a19: cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000012f9e4: cmp rdi, 0x3ff; ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x0000000000149278: cmp rdi, qword ptr [rdx + 0x60]; ja 0x149290; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000482f4: cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000018b727: cmp rdi, r9; jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001904b2: cmp rdi, r9; jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbec: cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011429d: cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x000000000005b332: cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x00000000000bbb5a: cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011d005: cmp rdi, rdx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x000000000010d1c8: cmp rdi, rsi; ja 0x10d1b8; mov eax, r8d; ret; 
0x0000000000094c66: cmp rdi, rsi; sete al; ret; 
0x00000000000e51bd: cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51d8: cmp rdx, 0x1cd1; setne al; ret; 
0x00000000000bbfa2: cmp rdx, 0x20; ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf22: cmp rdx, 0x20; ja 0xbbfbc; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000094719: cmp rdx, 0x2a; jne 0x94700; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000e51d0: cmp rdx, 0x2f; je 0xe51ea; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000018bb7a: cmp rdx, 0x40; ja 0x18bb8e; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bb1a: cmp rdx, 0x40; ja 0x18bb97; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000000e51b2: cmp rdx, 0x414a53; je 0xe51ea; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51a5: cmp rdx, 0x5346544e; setne al; ret; 
0x00000000001909a0: cmp rdx, 0x80; ja 0x190a34; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000e5189: cmp rdx, 0xadf5; setne al; ret; 
0x00000000000bce00: cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000085583: cmp rdx, qword ptr [rax + 8]; jae 0x85598; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000008570d: cmp rdx, qword ptr [rax + 8]; jae 0x85720; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000012dbdc: cmp rdx, r8; jne 0x12dbc8; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012ed04: cmp rdx, r8; jne 0x12ecf0; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x0000000000184734: cmp rdx, rax; jbe 0x184790; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184754: cmp rdx, rax; jbe 0x184790; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184774: cmp rdx, rax; jbe 0x184790; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184724: cmp rdx, rax; jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x000000000018c1e4: cmp rdx, rax; jbe 0x18c240; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c204: cmp rdx, rax; jbe 0x18c240; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c224: cmp rdx, rax; jbe 0x18c240; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d4: cmp rdx, rax; jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x000000000013b889: cmp rdx, rax; sbb eax, eax; ret; 
0x000000000005b625: cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000155df0: cmp rdx, rcx; je 0x155e10; cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000018bc15: cmp rdx, rcx; jne 0x18bbfb; vzeroupper; ret; 
0x0000000000190ad8: cmp rdx, rcx; jne 0x190ab6; vzeroupper; ret; 
0x000000000009a054: cmp rdx, rdi; jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x0000000000094191: cmp rdx, rdi; setae al; ret; 
0x00000000001492a1: cmp rsi, qword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000013c75d: cmp rsi, rax; jae 0x13c76b; shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000188a64: cmp rsi, rax; jbe 0x188ae0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000015d219: cmp si, 3; ja 0x15d230; cmp dx, cx; sete al; ret; 
0x0000000000129476: cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000188160: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001294e7: cmp sil, cl; cmovne eax, edx; ret; 
0x0000000000186c07: cmpsb byte ptr [rsi], byte ptr [rdi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000186f07: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000e6ec6: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, 0; add byte ptr [rdi], cl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000187e07: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187b07: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x83480000; ret 0x4910; 
0x000000000018e5a9: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000007a8f6: cmpsb byte ptr [rsi], byte ptr [rdi]; fist word ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000000d33a6: cmpsb byte ptr [rsi], byte ptr [rdi]; lodsd eax, dword ptr [rsi]; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000017ff16: cmpsb byte ptr [rsi], byte ptr [rdi]; mov ch, 1; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000121c7a: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000180d26: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187807: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187507: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001125a0: cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rbx + 0x54e83c7d], cl; ret 0xffff; 
0x0000000000095530: cmpsd dword ptr [rsi], dword ptr [rdi]; add rsp, 8; ret; 
0x00000000000b4220: cmpsd dword ptr [rsi], dword ptr [rdi]; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000117335: cmpsd dword ptr [rsi], dword ptr [rdi]; idiv edi; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x00000000001556b5: cmpsd dword ptr [rsi], dword ptr [rdi]; int 0xec; dec dword ptr [rax - 0x2f]; call 0xffffffff895e1e49; ret; 
0x0000000000136ed5: cmpsd dword ptr [rsi], dword ptr [rdi]; mov eax, 0x448b0007; ret 0x4804; 
0x0000000000121c49: cmpsd dword ptr [rsi], dword ptr [rdi]; or al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000121c23: cmpsd dword ptr [rsi], dword ptr [rdi]; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121c3c: cmpsd dword ptr [rsi], dword ptr [rdi]; or al, 0; mov qword ptr [rdi + 0x10], rax; jb 0x121c58; mov qword ptr [rip + 0xca710], 2; ret; 
0x000000000014638a: cmpsd dword ptr [rsi], dword ptr [rdi]; or al, byte ptr [rax]; add rsp, 8; ret; 
0x00000000001463b6: cmpsd dword ptr [rsi], dword ptr [rdi]; or al, byte ptr [rax]; ret; 
0x0000000000106fb5: cmpsd dword ptr [rsi], dword ptr [rdi]; pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x00000000000760b5: cmpsd dword ptr [rsi], dword ptr [rdi]; ret; 
0x0000000000121c22: cmpsd dword ptr ss:[rsi], dword ptr [rdi]; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000960b2: cmpxchg dword ptr [rip + 0x156ac7], edx; lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x0000000000093898: cmpxchg dword ptr [rip + 0x15af21], edx; mov qword ptr [rip + 0x15af22], rbx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000047347: cqo; idiv rsi; ret; 
0x0000000000047307: cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000153770: cvtdq2ps xmm3, xmmword ptr [rbp + 0x41]; pop rsp; ret; 
0x00000000000436c6: cwde; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000044299: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000f1600: cwde; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000018cfeb: cwde; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000094d05: cwde; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000157618: cwde; mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x00000000000ec464: cwde; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000bce3b: cwde; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116144: cwde; ret 0xfff0; 
0x000000000004c644: cwde; ret; 
0x00000000000b5769: dec byte ptr [r8 + 0x29]; ret 0x149; 
0x00000000000b3751: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x00000000000b576a: dec byte ptr [rax + 0x29]; ret 0x149; 
0x00000000000b3752: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x00000000001905c9: dec byte ptr [rax + 0x7f]; je 0x1905e5; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x00000000001907a7: dec byte ptr [rax + 0x7f]; jg 0x1907af; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190931: dec byte ptr [rax + 0x7f]; jg 0x190939; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000001905d1: dec byte ptr [rax + 0x7f]; jl 0x1905ed; cld; vzeroupper; ret; 
0x00000000001906da: dec byte ptr [rax + 0x7f]; jns 0x1906dd; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190865: dec byte ptr [rax + 0x7f]; jns 0x190868; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000001906e1: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000009d360: dec byte ptr [rax - 0x77]; and byte ptr [rbp + rcx*4 + 0x60], cl; xor byte ptr [rax + 0x31], cl; ret 0x8948; 
0x000000000003746d: dec byte ptr [rax - 0x77]; ret; 
0x00000000000c9c72: dec byte ptr [rax - 0x7d]; ret 0x4102; 
0x00000000000dc03c: dec byte ptr [rax - 0x7d]; ret; 
0x000000000013b77a: dec byte ptr [rbp + 0x2c6fe48]; add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x0000000000119c88: dec byte ptr [rbp - 0x75]; pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x0000000000047328: dec byte ptr [rcx - 0x183eb729]; and byte ptr [rax + 9], cl; clc; ret; 
0x000000000009f356: dec byte ptr [rcx]; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000000bbc34: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000011acb7: dec byte ptr [rdi]; test dword ptr [rsi], eax; add eax, 0x8b4d0000; adc byte ptr [r13 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 4; 
0x000000000018b2f1: dec byte ptr [rdx - 0x73]; add al, 7; vzeroupper; ret; 
0x00000000000fbbc2: dec dword ptr [eax - 0x77]; ret 0x8548; 
0x0000000000031761: dec dword ptr [r15]; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000005cff7: dec dword ptr [r8 - 0x77]; ret 0xf748; 
0x000000000009728e: dec dword ptr [r9 - 0x7b]; ret 0x850f; 
0x00000000000b58ea: dec dword ptr [rax + 0x29]; ret 0x149; 
0x00000000000b3892: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000000e6d03: dec dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000101d11: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x0000000000095054: dec dword ptr [rax + 0x29]; ret 0x8d49; 
0x000000000007ba28: dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000007c4eb: dec dword ptr [rax + 0x29]; ret 0xf48; 
0x0000000000037e25: dec dword ptr [rax + 0x29]; ret; 
0x000000000009cf5e: dec dword ptr [rax + 0x31]; ret 0x894c; 
0x00000000000b19a7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000029e09: dec dword ptr [rax + 0x3948074a]; ret; 
0x00000000000a53d3: dec dword ptr [rax + 0x39]; fmul dword ptr [rdi]; test dword ptr [rax + rbp*8 - 0x76b70001], esi; ret; 
0x0000000000198b7b: dec dword ptr [rax + 0x39]; fnsave dword ptr [rbp - 0x11]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007a967: dec dword ptr [rax + 0x39]; ret 0x2675; 
0x000000000008e8b1: dec dword ptr [rax + 0x39]; ret 0x830f; 
0x000000000006dc4a: dec dword ptr [rax + 0x39]; ret 0x840f; 
0x0000000000075813: dec dword ptr [rax + 0x39]; ret 0x850f; 
0x00000000000ed93f: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000000e274c: dec dword ptr [rax + 0x39]; ret 0x870f; 
0x0000000000044ead: dec dword ptr [rax + 0x39]; ret 0xe575; 
0x00000000000eda32: dec dword ptr [rax + 0x39]; ret 0xe76; 
0x00000000000408aa: dec dword ptr [rax + 0x39]; ret; 
0x0000000000121af4: dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0xca861; pop rbx; ret; 
0x00000000000bc259: dec dword ptr [rax + 0x63]; ret 0xfac1; 
0x0000000000031268: dec dword ptr [rax + 0x63]; ret; 
0x000000000002fb07: dec dword ptr [rax + 0x63]; ror byte ptr [rcx - 0x2d94b73b], 1; push -0x1605feb4; ret 0xfffe; 
0x00000000000b1ba9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x00000000000a06d8: dec dword ptr [rax + 0xf]; mov esp, 0x440f48c7; ret 0xc083; 
0x00000000000446c7: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x000000000012796c: dec dword ptr [rax + 1]; pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000068207: dec dword ptr [rax + 1]; ret 0x348; 
0x0000000000052449: dec dword ptr [rax + 1]; ret; 
0x00000000001537bb: dec dword ptr [rax - 0x2d]; ret 0x2149; 
0x0000000000043bdf: dec dword ptr [rax - 0x2d]; ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x00000000001556b8: dec dword ptr [rax - 0x2f]; call 0xffffffff895e1e49; ret; 
0x0000000000155848: dec dword ptr [rax - 0x2f]; call 0xffffffff895e1fd9; ret; 
0x00000000000695cc: dec dword ptr [rax - 0x39]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x94e8; 
0x00000000001983fa: dec dword ptr [rax - 0x39]; add eax, 0x5556a; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198c31: dec dword ptr [rax - 0x39]; add eax, 0x5692b; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198e36: dec dword ptr [rax - 0x39]; add eax, 0x57bde; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000004a0f4: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000004f398: dec dword ptr [rax - 0x39]; ret; 
0x000000000012da7a: dec dword ptr [rax - 0x73]; adc eax, 0xfff8e01e; cmove rax, rdx; ret; 
0x000000000012d9ba: dec dword ptr [rax - 0x73]; adc eax, 0xfff8e0fe; cmove rax, rdx; ret; 
0x000000000012d8fa: dec dword ptr [rax - 0x73]; adc eax, 0xfff8e1be; cmove rax, rdx; ret; 
0x00000000000bce37: dec dword ptr [rax - 0x73]; add al, 0x98; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e842f: dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x0000000000120dc1: dec dword ptr [rax - 0x73]; add eax, 0x918b7; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012daf8: dec dword ptr [rax - 0x73]; add eax, 0xfff8e3f0; cmovne rax, rdx; ret; 
0x00000000000ed905: dec dword ptr [rax - 0x73]; add r9b, byte ptr [r9 + 0x39]; ret 0x3176; 
0x000000000013553e: dec dword ptr [rax - 0x73]; and byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000e832f: dec dword ptr [rax - 0x73]; or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000006e872: dec dword ptr [rax - 0x73]; or byte ptr [r8 - 0x77], cl; ret; 
0x000000000015eb5f: dec dword ptr [rax - 0x73]; xchg esp, eax; and al, 0xb5; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000000fa79b: dec dword ptr [rax - 0x75]; adc byte ptr [rax - 0x7b], r9b; sal byte ptr [rbp + rax + 0x48], 0x39; ret 0xc675; 
0x000000000012036e: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x20; pop rbp; ret; 
0x000000000010c1c2: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000120434: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x30; pop rbp; ret; 
0x00000000001087fb: dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x2e74; 
0x000000000010860a: dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000178aba: dec dword ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000009e953: dec dword ptr [rax - 0x75]; add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009942c: dec dword ptr [rax - 0x75]; add eax, 0x152a3c; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000118f5c: dec dword ptr [rax - 0x75]; add eax, 0xd2f0c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000349e4: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x18; ret; 
0x000000000010e020: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x0000000000113056: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fcf: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x38; ret; 
0x00000000000578b4: dec dword ptr [rax - 0x75]; clc; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x0000000000088e1a: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000012b26f: dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000006d064: dec dword ptr [rax - 0x75]; cmp ebp, eax; ret; 
0x00000000000ff6aa: dec dword ptr [rax - 0x75]; je 0xff6d3; adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x0000000000137b4b: dec dword ptr [rax - 0x75]; jnp 0x137b98; test rdi, rdi; jne 0x137b40; pop rbx; ret; 
0x0000000000153835: dec dword ptr [rax - 0x75]; mov al, ch; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000049d2b: dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax - 0x39], cl; ret; 
0x000000000005131b: dec dword ptr [rax - 0x75]; pushfq; and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x000000000013fc6b: dec dword ptr [rax - 0x75]; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000013fbc9: dec dword ptr [rax - 0x75]; test byte ptr [rax + rcx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000138521: dec dword ptr [rax - 0x77]; add eax, 0xb53b7; add rsp, 8; ret; 
0x00000000001176ec: dec dword ptr [rax - 0x77]; add eax, 0xd809c; add rsp, 8; ret; 
0x000000000009d10b: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000109d5d: dec dword ptr [rax - 0x77]; add ecx, dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000011d5cf: dec dword ptr [rax - 0x77]; and byte ptr [r8 + 2], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018b61f: dec dword ptr [rax - 0x77]; clc; vzeroupper; ret; 
0x000000000004a171: dec dword ptr [rax - 0x77]; fadd dword ptr [rcx + 0xf]; xchg esp, eax; ret; 
0x000000000006d0fb: dec dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000036181: dec dword ptr [rax - 0x77]; fucompi st(0); push rsi; ret; 
0x000000000007c595: dec dword ptr [rax - 0x77]; lea esi, [rax]; idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x000000000015a5b1: dec dword ptr [rax - 0x77]; mov edi, 0xffff0885; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000041291: dec dword ptr [rax - 0x77]; out dx, eax; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001383a7: dec dword ptr [rax - 0x77]; pushfq; and al, 0xa8; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000628cf: dec dword ptr [rax - 0x77]; ret 0x12eb; 
0x000000000015a8c1: dec dword ptr [rax - 0x77]; ret 0x14c; 
0x00000000000e6e0c: dec dword ptr [rax - 0x77]; ret 0x14eb; 
0x00000000000db76c: dec dword ptr [rax - 0x77]; ret 0x2548; 
0x00000000000cf8c9: dec dword ptr [rax - 0x77]; ret 0x2948; 
0x0000000000129f95: dec dword ptr [rax - 0x77]; ret 0x2b49; 
0x00000000001114f9: dec dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000096c50: dec dword ptr [rax - 0x77]; ret 0x394c; 
0x0000000000111301: dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000008f614: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015b1e7: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x0000000000048f4b: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000026c87: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000029cdf: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000010049a: dec dword ptr [rax - 0x77]; ret 0x8b64; 
0x0000000000117015: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000e75c3: dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x0000000000062a40: dec dword ptr [rax - 0x77]; ret 0x9ee9; 
0x000000000007f742: dec dword ptr [rax - 0x77]; ret 0xa1e9; 
0x000000000007b674: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000014fbbe: dec dword ptr [rax - 0x77]; ret 0xbeeb; 
0x0000000000035d5b: dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000000f5101: dec dword ptr [rax - 0x77]; ret 0xc148; 
0x000000000007c796: dec dword ptr [rax - 0x77]; ret 0xd9e9; 
0x0000000000038717: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x00000000000e2744: dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x0000000000026843: dec dword ptr [rax - 0x77]; ret; 
0x00000000000780fa: dec dword ptr [rax - 0x77]; retf 0x894c; fimul word ptr [rcx + rcx*4 - 0x19]; mov dword ptr [rbp - 0x4f8], r9d; mov qword ptr [rbp - 0x4f0], r10; call qword ptr [rax + 0x38]; 
0x0000000000077792: dec dword ptr [rax - 0x77]; retf 0x894c; fimul word ptr [rcx + rcx*4 - 0x19]; mov dword ptr [rbp - 0x500], r9d; mov qword ptr [rbp - 0x4f0], r10; call qword ptr [rbx + 0x38]; 
0x000000000007b7a4: dec dword ptr [rax - 0x77]; retf 0x894c; out 0x4c, al; mov edi, ebp; call qword ptr [rax + 0x38]; 
0x000000000015772b: dec dword ptr [rax - 0x77]; sal dword ptr [rcx], 0xc0; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000471e2: dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000108380: dec dword ptr [rax - 0x77]; test dword ptr [rax], ecx; idiv edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012d013: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret 0x8948; 
0x0000000000119767: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000008282e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x0000000000121591: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000006ddc7: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xa; 
0x000000000008292d: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000b5c0e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000d2f6e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x000000000017cfac: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; retf 0xfff6; jmp qword ptr [rsi + 0xf]; 
0x0000000000161127: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], cl; test bh, bh; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000011cbe1: dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x00000000001532be: dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x00000000000a2958: dec dword ptr [rax - 0x7b]; sal byte ptr [rsi + rcx + 0x48], 0x89; ret 0x894c; 
0x000000000005cd3e: dec dword ptr [rax - 0x7d]; adc al, 0xf8; add cl, ch; ret 0xfff6; 
0x0000000000075cc7: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000153617: dec dword ptr [rax - 0x7d]; mov eax, 0xe0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000053d18: dec dword ptr [rax - 0x7d]; ret 0x4101; 
0x00000000000786d7: dec dword ptr [rax - 0x7d]; ret 0x4420; 
0x000000000010abfb: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000015a341: dec dword ptr [rax - 0x7d]; ret 0x4802; 
0x000000000015100c: dec dword ptr [rax - 0x7d]; ret 0x4807; 
0x0000000000038c42: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000080a9b: dec dword ptr [rax - 0x7d]; ret 0xe902; 
0x000000000003816a: dec dword ptr [rax - 0x7d]; ret; 
0x00000000000539c8: dec dword ptr [rax - 0x7d]; rol dword ptr [rcx], 0x88; add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x000000000016ce3c: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000011c6f9: dec dword ptr [rax - 0x7f]; ret; 
0x000000000009533d: dec dword ptr [rax - 9]; fisttp dword ptr [rax + 0x21]; ret; 
0x00000000000a6cf5: dec dword ptr [rbp + 0x39]; ret; 
0x000000000007b9b2: dec dword ptr [rbp + 0x63]; ret; 
0x0000000000078df6: dec dword ptr [rbp + rcx*4 + 0x1d]; ret 0x1354; 
0x000000000011012b: dec dword ptr [rbp + rcx*4 + 0x24]; sbb byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x0000000000105736: dec dword ptr [rbp + rcx*4 + 0x25]; ret 0xac3; 
0x0000000000088533: dec dword ptr [rbp + rcx*4 + 0x2c]; and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x00000000001215f9: dec dword ptr [rbp + rcx*4 + 0x53]; add dword ptr [rcx + 0x39], ecx; ret 0x4f73; 
0x000000000011cc1e: dec dword ptr [rbp + rcx*4 + 5]; adc edx, dword ptr [rdx - 0x7ab7fff7]; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x00000000000388fb: dec dword ptr [rbp - 0x73]; je 0x38906; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000038853: dec dword ptr [rbp - 0x73]; jl 0x3885f; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000193b28: dec dword ptr [rbp - 0x76b63fb6]; ret 0xd349; 
0x000000000002c817: dec dword ptr [rbp - 0x77]; ret 0x2de9; 
0x000000000002e119: dec dword ptr [rbp - 0x77]; ret 0x87e9; 
0x00000000000e34b9: dec dword ptr [rbp - 0x77]; ret; 
0x0000000000155101: dec dword ptr [rbp - 0x7b]; in al, 0xf; xchg esp, eax; ret 0x854d; 
0x00000000000f9f85: dec dword ptr [rbp - 0x7b]; test byte ptr [rbx + rcx*4 + 0x54], 0x24; adc byte ptr [rdi], cl; xchg esp, eax; ret 0x8548; 
0x00000000001093dd: dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret 1; 
0x000000000011f2a8: dec dword ptr [rbx + 0x48042444]; add esp, 0x20; pop rbp; ret; 
0x0000000000120bfb: dec dword ptr [rbx + 0x48042444]; add esp, 0x28; ret; 
0x000000000011f74e: dec dword ptr [rbx + 0x48082444]; add esp, 0x18; ret; 
0x00000000001129b2: dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x00000000000e2e72: dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000e2d4c: dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x0000000000114fde: dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000000e2c92: dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x0000000000113253: dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x000000000009c0ad: dec dword ptr [rbx + 0x9082454]; ret 0x37e9; 
0x00000000000be52c: dec dword ptr [rbx + 0xeb8087b]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000003bbc3: dec dword ptr [rbx + rcx*4 + 4]; and al, 0xe9; ret 0xffed; 
0x00000000000e8029: dec dword ptr [rbx - 0x4ef6b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000053bb3: dec dword ptr [rbx - 0x72e7dbb4]; inc byte ptr [r11 - 0x6bf00220]; ret 0xf983; 
0x00000000000eeb7e: dec dword ptr [rbx - 0x7cb7d3ad]; rol byte ptr [rcx], 0x39; ret 0xee7f; 
0x0000000000074f6e: dec dword ptr [rbx - 0x8ef4b]; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x0000000000074f4b: dec dword ptr [rbx - 0x8ef7b]; inc dword ptr [rcx]; ret; 
0x000000000007ba22: dec dword ptr [rbx - 0x8ff4b]; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000013bccb: dec dword ptr [rbx]; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000001952e5: dec dword ptr [rcx + 0x21]; ret; 
0x00000000000e339f: dec dword ptr [rcx + 0x29]; ret 0x8348; 
0x00000000000ed98b: dec dword ptr [rcx + 0x29]; ret 0x8349; 
0x00000000000e35ab: dec dword ptr [rcx + 0x29]; ret; 
0x000000000002c57c: dec dword ptr [rcx + 0x3948fc51]; ret; 
0x000000000005b45b: dec dword ptr [rcx + 0x39]; cli; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000ed923: dec dword ptr [rcx + 0x39]; ret 0x1776; 
0x00000000000e4319: dec dword ptr [rcx + 0x39db01da]; ret 0x9674; 
0x0000000000075f33: dec dword ptr [rcx + 0x63]; ret 0x8545; 
0x00000000000313c4: dec dword ptr [rcx + 1]; ret 0x8d48; 
0x00000000000c81eb: dec dword ptr [rcx + 1]; ret; 
0x000000000013c23a: dec dword ptr [rcx + r9*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013c23b: dec dword ptr [rcx + rcx*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000005e6e3: dec dword ptr [rcx + rcx*4 + 0x44]; ret 0xe9f8; 
0x0000000000167aae: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000005d61c: dec dword ptr [rcx + rcx*4 + 4]; ret 0x85c7; 
0x0000000000118cc7: dec dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x0000000000084402: dec dword ptr [rcx + rcx*4 - 0x20]; pop rbp; pop r12; pop r13; ret; 
0x000000000011432d: dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d4019: dec dword ptr [rcx - 0x107cb736]; adc byte ptr [rcx], ch; ret 0x5589; 
0x0000000000102b34: dec dword ptr [rcx - 0x17f3dbbc]; ret 0xfffe; 
0x000000000015a359: dec dword ptr [rcx - 0x3f7cb739]; add dword ptr [rax + 0x39], ecx; ret 0xeb75; 
0x00000000000e9f09: dec dword ptr [rcx - 0x3f7cb73f]; add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x00000000000649ff: dec dword ptr [rcx - 0x60f43]; dec dword ptr [rax + 0x39]; ret; 
0x00000000000dd4b1: dec dword ptr [rcx - 0x72b2bfbd]; je 0xdd4dd; and byte ptr [rax - 0x7d], cl; ret; 
0x000000000015bd2c: dec dword ptr [rcx - 0x73]; adc byte ptr [r8 - 0x77], r9b; ret 0x2548; 
0x0000000000110831: dec dword ptr [rcx - 0x73]; push rsi; add dword ptr [rax + 0x39], ecx; ret 0xe72; 
0x000000000012e205: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x7d], r9b; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20; 
0x0000000000027b02: dec dword ptr [rcx - 0x75]; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000012ad07: dec dword ptr [rcx - 0x75]; cmp byte ptr [r13 - 0x77], r9b; outsd dx, dword ptr [rsi]; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000012ac5d: dec dword ptr [rcx - 0x75]; cmp byte ptr [r13 - 0x77], r9b; sbb byte ptr [eax - 0x77], cl; ret 0x2b49; 
0x000000000012aafc: dec dword ptr [rcx - 0x75]; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x00000000000a228b: dec dword ptr [rcx - 0x77]; add byte ptr [r8 - 0x7b], r9b; sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x000000000006661d: dec dword ptr [rcx - 0x77]; fmul qword ptr [rax - 0x77]; ret; 
0x00000000000eb29c: dec dword ptr [rcx - 0x77]; fmul qword ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a1863: dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x000000000007518f: dec dword ptr [rcx - 0x77]; ret 0x8445; 
0x0000000000075145: dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000196288: dec dword ptr [rcx - 0x77]; ret 0x8948; 
0x000000000007dcc0: dec dword ptr [rcx - 0x77]; ret 0x894c; 
0x00000000000751c5: dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000079777: dec dword ptr [rcx - 0x77]; ret 0x8e9; 
0x000000000007dc80: dec dword ptr [rcx - 0x77]; ret 0xbd83; 
0x0000000000079bb9: dec dword ptr [rcx - 0x77]; ret 0xbfe9; 
0x000000000019392e: dec dword ptr [rcx - 0x77]; ret 0xc148; 
0x000000000007dfc8: dec dword ptr [rcx - 0x77]; ret 0xcee9; 
0x000000000005b15f: dec dword ptr [rcx - 0x77]; ret; 
0x000000000009cf76: dec dword ptr [rcx - 0x77]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop r12; ret; 
0x000000000009728f: dec dword ptr [rcx - 0x7b]; ret 0x850f; 
0x000000000006ed34: dec dword ptr [rcx - 0x7d]; ret 0x4904; 
0x000000000002d5f4: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000000c974a: dec dword ptr [rcx - 0x7d]; sti; add ecx, dword ptr [rdi]; xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000c946e: dec dword ptr [rcx - 0x7d]; sti; add ecx, dword ptr [rdi]; xchg dl, bh; add eax, 0x89490000; ret; 
0x000000000013a96c: dec dword ptr [rcx - 0x8b7b]; inc dword ptr [rbp - 0x77]; ret; 
0x0000000000094f42: dec dword ptr [rcx - 9]; ret; 
0x000000000009003a: dec dword ptr [rcx]; ret 0x1389; 
0x000000000012a2af: dec dword ptr [rcx]; ret; 
0x0000000000122c57: dec dword ptr [rcx]; setbe r8b; mov eax, r8d; ret; 
0x00000000000c8d3c: dec dword ptr [rdi + rcx + 0x46]; ret 0x8548; 
0x0000000000041f83: dec dword ptr [rdi]; add byte ptr [rax - 0x7b], cl; ret 0x574; 
0x000000000011ee86: dec dword ptr [rdi]; add byte ptr [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000051bed: dec dword ptr [rdi]; add byte ptr [rcx], cl; ret 0x8f74; 
0x0000000000068d64: dec dword ptr [rdi]; lahf; ret 0xd729; 
0x00000000000e6dcc: dec dword ptr [rdi]; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000031762: dec dword ptr [rdi]; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000615b9: dec dword ptr [rdi]; mov dh, 0x53; or al, 0xf6; ret 0xf40; 
0x000000000005d7b6: dec dword ptr [rdi]; mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x000000000005c113: dec dword ptr [rdi]; mov dh, 0x58; or al, 0xf6; ret; 
0x0000000000053be1: dec dword ptr [rdi]; mov dh, 0x84; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000053e9c: dec dword ptr [rdi]; mov dh, 0x8c; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000184ca3: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000ac775: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000a06b8: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 1; ret; 
0x0000000000042834: dec dword ptr [rdi]; mov word ptr [rbp - 0x7f000000], es; sti; push rax; ret; 
0x00000000000cb506: dec dword ptr [rdi]; mov word ptr [rbx], fs; add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000583d6: dec dword ptr [rdi]; mov word ptr [rbx], gs; add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000032848: dec dword ptr [rdi]; ror byte ptr [r8 - 0x73], 1; add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x00000000000d1fe7: dec dword ptr [rdi]; sub dword ptr [rax], eax; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000004c7f5: dec dword ptr [rdi]; test ah, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000a4f85: dec dword ptr [rdi]; test ah, bh; xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000499cd: dec dword ptr [rdi]; test ah, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000f1e12: dec dword ptr [rdi]; test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000018b619: dec dword ptr [rdi]; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000002a3ef: dec dword ptr [rdi]; test byte ptr [rbp + rax], al; add bh, dh; ret 0; 
0x000000000006f61c: dec dword ptr [rdi]; test byte ptr [rsi], cl; add eax, 0x83480000; ret; 
0x00000000000a5dca: dec dword ptr [rdi]; test byte ptr [rsp], dh; add bh, dh; ret; 
0x00000000001393a7: dec dword ptr [rdi]; test dl, bl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000185026: dec dword ptr [rdi]; test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x000000000013e362: dec dword ptr [rdi]; test dword ptr [rdi], eax; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x00000000000615b3: dec dword ptr [rdi]; test dword ptr [rip + 0xfffffff], edx; mov dh, 0x53; or al, 0xf6; ret 0xf40; 
0x0000000000192450: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000006d15d: dec dword ptr [rdi]; test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000113845: dec dword ptr [rdi]; xchg dword ptr [rcx + rax], eax; add byte ptr [rcx - 0x77], al; ret 0x8341; 
0x00000000001138b9: dec dword ptr [rdi]; xchg eax, esi; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret 0x8941; 
0x0000000000105ec2: dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x00000000001173c6: dec dword ptr [rdi]; xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000a4783: dec dword ptr [rdi]; xchg ebx, eax; ret; 
0x0000000000160b14: dec dword ptr [rdi]; xchg esp, eax; ret 0x1389; 
0x000000000006a480: dec dword ptr [rdi]; xchg esp, eax; ret; 
0x00000000001215f1: dec dword ptr [rdx - 0x77]; mov esp, 0xfffa9015; dec dword ptr [rbp + rcx*4 + 0x53]; add dword ptr [rcx + 0x39], ecx; ret 0x4f73; 
0x000000000013bcc6: dec dword ptr [rdx]; je 0x13bd0f; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000a050c: dec dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0xefeda; cmove rax, rdx; ret; 
0x00000000000ff5c7: dec dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000b58e9: dec qword ptr [r8 + 0x29]; ret 0x149; 
0x00000000000b3891: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x00000000000b19a6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000029e08: dec qword ptr [rax + 0x3948074a]; ret; 
0x00000000000b5c0d: dec qword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000038c41: dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000000fbcdb: dec word ptr [rax - 0x77]; ret 0x8548; 
0x0000000000114fdc: div bh; dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000000499f3: div bh; ret 0; 
0x000000000002fd85: div byte ptr [rax + rcx - 0x7d]; inc byte ptr [rbx]; je 0x2fd90; ret; 
0x0000000000094d2a: div byte ptr [rbp + 0x13]; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000057b38: div byte ptr [rbp + 0x25]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057d46: div byte ptr [rbp + 0x27]; test rax, rax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000057bc9: div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000d0ed6: div byte ptr [rbp + 0x2f]; mov eax, 0x60; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x000000000011a763: div byte ptr [rbp + 0xa]; pop rbp; pop r12; pop r13; ret; 
0x0000000000042c39: div byte ptr [rbp + 0xc]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000000b1d66: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000011a6b5: div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000e5a86: div byte ptr [rbp + rdx - 0x17]; and dl, byte ptr [rdi - 0x6f990005]; xor eax, eax; ret; 
0x00000000000a861e: div byte ptr [rbp - 0x11]; mov qword ptr [rdx], rcx; ret; 
0x0000000000057be2: div byte ptr [rbp - 0x13]; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x000000000011374e: div byte ptr [rbp - 0x25]; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000a2857: div byte ptr [rbp - 0x6a]; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000f75b6: div byte ptr [rdx + riz + 0xf]; mov dh, 0x57; cmp dh, dh; ret 0xf08; 
0x000000000010d1ca: div dword ptr [rdi - 0x15]; mov eax, r8d; ret; 
0x0000000000056521: div eax; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x000000000005ea35: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000000bc204: div ecx; mov eax, eax; ret; 
0x0000000000056520: div r8; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x0000000000197275: divps xmm0, xmmword ptr [rip + 0x27418]; ret; 
0x0000000000197274: divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x0000000000157900: endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157910: endbr64; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x00000000000dd058: endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000008dee0: endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000041ef0: endbr64; andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x000000000012bd90: endbr64; cmp edi, 0x56; je 0x12bda0; mov eax, 7; ret; 
0x00000000001127e0: endbr64; cmp edx, 4; ja 0x1127f0; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x00000000000dcfa0: endbr64; cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x0000000000091e80: endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1f0: endbr64; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x000000000012f9e0: endbr64; cmp rdi, 0x3ff; ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x000000000013b3e0: endbr64; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000241a0: endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x00000000000241b0: endbr64; lea rax, [rip + 0x191abc]; ret; 
0x000000000010c790: endbr64; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x000000000010dc80: endbr64; mov eax, 0x102; syscall; cmp rax, -0xfff; jae 0x10dc94; ret; 
0x000000000010fd00: endbr64; mov eax, 0x107; syscall; cmp rax, -0xfff; jae 0x10fd14; ret; 
0x00000000001143a0: endbr64; mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x1143b4; ret; 
0x000000000010fc40: endbr64; mov eax, 0x10a; syscall; cmp rax, -0xfff; jae 0x10fc54; ret; 
0x000000000011fdf0: endbr64; mov eax, 0x110; syscall; cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000011fe50: endbr64; mov eax, 0x11b; syscall; cmp rax, -0xfff; jae 0x11fe64; ret; 
0x000000000011feb0: endbr64; mov eax, 0x11f; syscall; cmp rax, -0xfff; jae 0x11fec4; ret; 
0x000000000011f320: endbr64; mov eax, 0x122; syscall; cmp rax, -0xfff; jae 0x11f334; ret; 
0x000000000011fac0: endbr64; mov eax, 0x123; syscall; cmp rax, -0xfff; jae 0x11fad4; ret; 
0x000000000010e8f0: endbr64; mov eax, 0x124; syscall; cmp rax, -0xfff; jae 0x10e904; ret; 
0x000000000010e950: endbr64; mov eax, 0x125; syscall; cmp rax, -0xfff; jae 0x10e964; ret; 
0x000000000011fbe0: endbr64; mov eax, 0x126; syscall; cmp rax, -0xfff; jae 0x11fbf4; ret; 
0x000000000011fee0: endbr64; mov eax, 0x12c; syscall; cmp rax, -0xfff; jae 0x11fef4; ret; 
0x000000000011fa00: endbr64; mov eax, 0x131; syscall; cmp rax, -0xfff; jae 0x11fa14; ret; 
0x00000000001152e0: endbr64; mov eax, 0x132; syscall; cmp rax, -0xfff; jae 0x1152f4; ret; 
0x000000000011ff40: endbr64; mov eax, 0x134; syscall; cmp rax, -0xfff; jae 0x11ff54; ret; 
0x000000000011ffd0: endbr64; mov eax, 0x13f; syscall; cmp rax, -0xfff; jae 0x11ffe4; ret; 
0x0000000000120000: endbr64; mov eax, 0x14a; syscall; cmp rax, -0xfff; jae 0x120014; ret; 
0x0000000000120030: endbr64; mov eax, 0x14b; syscall; cmp rax, -0xfff; jae 0x120044; ret; 
0x000000000010e130: endbr64; mov eax, 0x15; syscall; cmp rax, -0x1000; ja 0x10e148; ret; 
0x000000000010e920: endbr64; mov eax, 0x16; syscall; cmp rax, -0xfff; jae 0x10e934; ret; 
0x0000000000102710: endbr64; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca0: endbr64; mov eax, 0x18; syscall; ret; 
0x0000000000118aa0: endbr64; mov eax, 0x1b; syscall; cmp rax, -0xfff; jae 0x118ab4; ret; 
0x0000000000118a70: endbr64; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x118a84; ret; 
0x0000000000121190: endbr64; mov eax, 0x1e; syscall; cmp rax, -0x1000; ja 0x1211a8; ret; 
0x0000000000121230: endbr64; mov eax, 0x1f; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000010e890: endbr64; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x000000000010e8c0: endbr64; mov eax, 0x21; syscall; cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x00000000000d41b0: endbr64; mov eax, 0x24; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e2d90: endbr64; mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000d41e0: endbr64; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e40c0: endbr64; mov eax, 0x27; syscall; ret; 
0x00000000001207a0: endbr64; mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x1207b4; ret; 
0x0000000000120770: endbr64; mov eax, 0x30; syscall; cmp rax, -0xfff; jae 0x120784; ret; 
0x0000000000120160: endbr64; mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000001202c0: endbr64; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x1202d4; ret; 
0x0000000000120260: endbr64; mov eax, 0x33; syscall; cmp rax, -0xfff; jae 0x120274; ret; 
0x0000000000120230: endbr64; mov eax, 0x34; syscall; cmp rax, -0xfff; jae 0x120244; ret; 
0x00000000000e3170: endbr64; mov eax, 0x3b; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000433d0: endbr64; mov eax, 0x3e; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000e2b40: endbr64; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x0000000000121080: endbr64; mov eax, 0x40; syscall; cmp rax, -0x1000; ja 0x121098; ret; 
0x00000000001211c0: endbr64; mov eax, 0x43; syscall; cmp rax, -0x1000; ja 0x1211d8; ret; 
0x0000000000121010: endbr64; mov eax, 0x44; syscall; cmp rax, -0x1000; ja 0x121028; ret; 
0x0000000000121040: endbr64; mov eax, 0x47; syscall; cmp rax, -0x1000; ja 0x121058; ret; 
0x000000000010e570: endbr64; mov eax, 0x49; syscall; cmp rax, -0xfff; jae 0x10e584; ret; 
0x0000000000116cc0: endbr64; mov eax, 0x4c; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116cf0: endbr64; mov eax, 0x4d; syscall; cmp rax, -0x1000; ja 0x116d08; ret; 
0x000000000010ea10: endbr64; mov eax, 0x50; syscall; cmp rax, -0xfff; jae 0x10ea24; ret; 
0x000000000010ea40: endbr64; mov eax, 0x51; syscall; cmp rax, -0xfff; jae 0x10ea54; ret; 
0x0000000000062e80: endbr64; mov eax, 0x52; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x000000000010dc50: endbr64; mov eax, 0x53; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010fd30: endbr64; mov eax, 0x54; syscall; cmp rax, -0xfff; jae 0x10fd44; ret; 
0x000000000010fbb0: endbr64; mov eax, 0x56; syscall; cmp rax, -0xfff; jae 0x10fbc4; ret; 
0x000000000010fcd0: endbr64; mov eax, 0x57; syscall; cmp rax, -0xfff; jae 0x10fce4; ret; 
0x000000000010fc10: endbr64; mov eax, 0x58; syscall; cmp rax, -0xfff; jae 0x10fc24; ret; 
0x000000000010fc70: endbr64; mov eax, 0x59; syscall; cmp rax, -0xfff; jae 0x10fc84; ret; 
0x000000000010db60: endbr64; mov eax, 0x5a; syscall; cmp rax, -0xfff; jae 0x10db74; ret; 
0x000000000010db90: endbr64; mov eax, 0x5b; syscall; cmp rax, -0xfff; jae 0x10dba4; ret; 
0x000000000010f360: endbr64; mov eax, 0x5c; syscall; cmp rax, -0xfff; jae 0x10f374; ret; 
0x000000000010f390: endbr64; mov eax, 0x5d; syscall; cmp rax, -0xfff; jae 0x10f3a4; ret; 
0x000000000010f3c0: endbr64; mov eax, 0x5e; syscall; cmp rax, -0xfff; jae 0x10f3d4; ret; 
0x000000000010db50: endbr64; mov eax, 0x5f; syscall; ret; 
0x0000000000113de0: endbr64; mov eax, 0x62; syscall; cmp rax, -0xfff; jae 0x113df4; ret; 
0x000000000011fdc0: endbr64; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11fdd4; ret; 
0x00000000000e40e0: endbr64; mov eax, 0x66; syscall; ret; 
0x000000000011fc40: endbr64; mov eax, 0x67; syscall; cmp rax, -0xfff; jae 0x11fc54; ret; 
0x00000000000e4100: endbr64; mov eax, 0x68; syscall; ret; 
0x00000000000e40f0: endbr64; mov eax, 0x6b; syscall; ret; 
0x00000000000e4110: endbr64; mov eax, 0x6c; syscall; ret; 
0x00000000000e43a0: endbr64; mov eax, 0x6d; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e40d0: endbr64; mov eax, 0x6e; syscall; ret; 
0x00000000000e43d0: endbr64; mov eax, 0x6f; syscall; ret; 
0x00000000000e4430: endbr64; mov eax, 0x70; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4120: endbr64; mov eax, 0x73; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4460: endbr64; mov eax, 0x76; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4490: endbr64; mov eax, 0x78; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e4370: endbr64; mov eax, 0x79; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x000000000011f1c0: endbr64; mov eax, 0x7a; syscall; cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x000000000011f1f0: endbr64; mov eax, 0x7b; syscall; cmp rax, -0xfff; jae 0x11f204; ret; 
0x00000000000e4400: endbr64; mov eax, 0x7c; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x000000000011f9a0: endbr64; mov eax, 0x7d; syscall; cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x000000000011f9d0: endbr64; mov eax, 0x7e; syscall; cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x00000000000439c0: endbr64; mov eax, 0x83; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x000000000010d3d0: endbr64; mov eax, 0x84; syscall; cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x000000000011fe20: endbr64; mov eax, 0x86; syscall; cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000011f3e0: endbr64; mov eax, 0x87; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000010da00: endbr64; mov eax, 0x89; syscall; cmp rax, -0xfff; jae 0x10da14; ret; 
0x000000000010da30: endbr64; mov eax, 0x8a; syscall; cmp rax, -0xfff; jae 0x10da44; ret; 
0x00000000001141e0: endbr64; mov eax, 0x8d; syscall; cmp rax, -0xfff; jae 0x1141f4; ret; 
0x0000000000102650: endbr64; mov eax, 0x8e; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102680: endbr64; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b0: endbr64; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e0: endbr64; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102740: endbr64; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102770: endbr64; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a0: endbr64; mov eax, 0x94; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x0000000000118b00: endbr64; mov eax, 0x95; syscall; cmp rax, -0xfff; jae 0x118b14; ret; 
0x0000000000118b30: endbr64; mov eax, 0x96; syscall; cmp rax, -0xfff; jae 0x118b44; ret; 
0x0000000000118b60: endbr64; mov eax, 0x97; syscall; cmp rax, -0xfff; jae 0x118b74; ret; 
0x0000000000118b90: endbr64; mov eax, 0x98; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000115620: endbr64; mov eax, 0x99; syscall; cmp rax, -0xfff; jae 0x115634; ret; 
0x000000000011f930: endbr64; mov eax, 0x9a; syscall; cmp rax, -0xfff; jae 0x11f944; ret; 
0x000000000011fd00: endbr64; mov eax, 0x9b; syscall; cmp rax, -0xfff; jae 0x11fd14; ret; 
0x000000000011f900: endbr64; mov eax, 0x9e; syscall; cmp rax, -0xfff; jae 0x11f914; ret; 
0x0000000000115160: endbr64; mov eax, 0xa1; syscall; cmp rax, -0xfff; jae 0x115174; ret; 
0x0000000000115220: endbr64; mov eax, 0xa2; syscall; cmp rax, -0xfff; jae 0x115234; ret; 
0x0000000000115130: endbr64; mov eax, 0xa3; syscall; cmp rax, -0xfff; jae 0x115144; ret; 
0x000000000011f160: endbr64; mov eax, 0xa6; syscall; cmp rax, -0xfff; jae 0x11f174; ret; 
0x0000000000115650: endbr64; mov eax, 0xa7; syscall; cmp rax, -0xfff; jae 0x115664; ret; 
0x0000000000115680: endbr64; mov eax, 0xa8; syscall; cmp rax, -0xfff; jae 0x115694; ret; 
0x00000000001189a0: endbr64; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x1189b4; ret; 
0x0000000000114de0: endbr64; mov eax, 0xaa; syscall; cmp rax, -0xfff; jae 0x114df4; ret; 
0x0000000000114f30: endbr64; mov eax, 0xab; syscall; cmp rax, -0xfff; jae 0x114f44; ret; 
0x000000000011f010: endbr64; mov eax, 0xac; syscall; cmp rax, -0xfff; jae 0x11f024; ret; 
0x000000000011efe0: endbr64; mov eax, 0xad; syscall; cmp rax, -0xfff; jae 0x11eff4; ret; 
0x000000000011fa30: endbr64; mov eax, 0xae; syscall; cmp rax, -0xfff; jae 0x11fa44; ret; 
0x000000000011fa60: endbr64; mov eax, 0xb0; syscall; cmp rax, -0xfff; jae 0x11fa74; ret; 
0x000000000011fb20: endbr64; mov eax, 0xb1; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fcd0: endbr64; mov eax, 0xb4; syscall; cmp rax, -0xfff; jae 0x11fce4; ret; 
0x0000000000118970: endbr64; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x118984; ret; 
0x0000000000120060: endbr64; mov eax, 0xba; syscall; ret; 
0x000000000011f190: endbr64; mov eax, 0xbb; syscall; cmp rax, -0x1000; ja 0x11f1a8; ret; 
0x000000000011ce80: endbr64; mov eax, 0xc2; syscall; cmp rax, -0xfff; jae 0x11ce94; ret; 
0x000000000011cdc0: endbr64; mov eax, 0xc4; syscall; cmp rax, -0xfff; jae 0x11cdd4; ret; 
0x000000000011cf70: endbr64; mov eax, 0xc5; syscall; cmp rax, -0xfff; jae 0x11cf84; ret; 
0x000000000011cf10: endbr64; mov eax, 0xc6; syscall; cmp rax, -0xfff; jae 0x11cf24; ret; 
0x000000000011cdf0: endbr64; mov eax, 0xc7; syscall; cmp rax, -0xfff; jae 0x11ce04; ret; 
0x00000000000d0dc0: endbr64; mov eax, 0xc9; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x000000000011fa90: endbr64; mov eax, 0xd5; syscall; cmp rax, -0xfff; jae 0x11faa4; ret; 
0x000000000011f960: endbr64; mov eax, 0xe4; syscall; ret; 
0x0000000000120070: endbr64; mov eax, 0xea; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x0000000000116aa0: endbr64; mov eax, 0xeb; syscall; cmp rax, -0x1000; ja 0x116ab8; ret; 
0x000000000011fbb0: endbr64; mov eax, 0xfd; syscall; cmp rax, -0xfff; jae 0x11fbc4; ret; 
0x000000000011fb80: endbr64; mov eax, 0xfe; syscall; cmp rax, -0xfff; jae 0x11fb94; ret; 
0x000000000011fc10: endbr64; mov eax, 0xff; syscall; cmp rax, -0xfff; jae 0x11fc24; ret; 
0x00000000000479f0: endbr64; mov eax, 0xffffffff; ret; 
0x0000000000146250: endbr64; mov eax, 1; ret; 
0x0000000000113670: endbr64; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x113688; ret; 
0x00000000000e5210: endbr64; mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x0000000000148a80: endbr64; mov eax, 2; ret; 
0x0000000000113340: endbr64; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x113358; ret; 
0x000000000010e100: endbr64; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000010d070: endbr64; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000093560: endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000010d060: endbr64; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000157920: endbr64; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000010c780: endbr64; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001136a0: endbr64; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000094d10: endbr64; mov eax, dword ptr [rdi + 8]; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008cd80: endbr64; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008cd50: endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000094da0: endbr64; mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000de2e0: endbr64; mov eax, dword ptr [rdi]; ret; 
0x000000000008def0: endbr64; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008df00: endbr64; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x00000000000440a0: endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x0000000000044090: endbr64; mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x0000000000146f90: endbr64; mov eax, dword ptr [rip + 0xa9be2]; test eax, eax; je 0x146fa0; ret; 
0x0000000000118700: endbr64; mov eax, dword ptr [rip + 0xd3c3e]; test edi, edi; je 0x118714; mov dword ptr [rip + 0xd3c34], edi; ret; 
0x000000000010d110: endbr64; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000041b70: endbr64; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000342b0: endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fac0: endbr64; mov eax, edi; bswap eax; ret; 
0x00000000000472f0: endbr64; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x000000000012fad0: endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000013a5a0: endbr64; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000015dee0: endbr64; mov edi, dword ptr [rip + 0x8e546]; test edi, edi; jns 0x15def0; ret; 
0x00000000000a06b0: endbr64; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06d0: endbr64; mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x0000000000163460: endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000928f0: endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000001574a0: endbr64; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de290: endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093e90: endbr64; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000093850: endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000087490: endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000951f0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e40: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095250: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e80: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000095220: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095240: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea0: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e30: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e20: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000093830: endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000043c50: endbr64; mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000344c0: endbr64; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e0: endbr64; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d50: endbr64; mov rax, qword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328e0: endbr64; mov rax, qword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a0: endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000024400: endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab0: endbr64; mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa0: endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163430: endbr64; mov rax, qword ptr [rip + 0x88a35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162dd0: endbr64; mov rax, qword ptr [rip + 0x89095]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162db0: endbr64; mov rax, qword ptr [rip + 0x890b5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d70: endbr64; mov rax, qword ptr [rip + 0x890f5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d50: endbr64; mov rax, qword ptr [rip + 0x89115]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d30: endbr64; mov rax, qword ptr [rip + 0x89135]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d10: endbr64; mov rax, qword ptr [rip + 0x89155]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160cc0: endbr64; mov rax, qword ptr [rip + 0x8b1a5]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015ca40: endbr64; mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153170: endbr64; mov rax, qword ptr [rip + 0x98c25]; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000141100: endbr64; mov rax, qword ptr [rip + 0xaad1d]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x00000000001411f0: endbr64; mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000142f70: endbr64; mov rax, qword ptr [rip + 0xadaa5]; test rax, rax; jne 0x142f88; ret; 
0x000000000012fe80: endbr64; mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x00000000001228b0: endbr64; mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001200a0: endbr64; mov rax, qword ptr [rip + 0xcbdc5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115600: endbr64; mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114c30: endbr64; mov rax, qword ptr [rip + 0xd7225]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x0000000000114380: endbr64; mov rax, qword ptr [rip + 0xd7ae5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dbc0: endbr64; mov rax, qword ptr [rip + 0xde2a5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fec90: endbr64; mov rax, qword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000342d0: endbr64; mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034450: endbr64; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034460: endbr64; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000094c40: endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000047340: endbr64; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000047300: endbr64; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000093860: endbr64; mov rax, rdi; ret; 
0x0000000000121260: endbr64; mov rcx, qword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121270; ret; 
0x000000000014de00: endbr64; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14de10; ret; 
0x0000000000154500: endbr64; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154510; ret; 
0x0000000000122020: endbr64; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x121ec0; ret; 
0x0000000000122000: endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x0000000000117390: endbr64; mov rdi, qword ptr [rip + 0xd83cd]; test rdi, rdi; jne 0x1173b0; mov eax, 1; ret; 
0x0000000000042290: endbr64; movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000042a20: endbr64; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000271f0: endbr64; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000010c750: endbr64; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000042630: endbr64; pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000421b0: endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000424e0: endbr64; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000023ef0: endbr64; ret; 
0x000000000010c7a0: endbr64; sub rsp, 0x10; push 0; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000010c7c0: endbr64; sub rsp, 0x10; push 1; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd0: endbr64; sub rsp, 0x10; push 2; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000136c70: endbr64; sub rsp, 0x10; push 2; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf0: endbr64; sub rsp, 0x10; push 3; call 0x10cfc0; add rsp, 0x18; ret; 
0x00000000001176e0: endbr64; sub rsp, 8; call 0x1173e0; mov qword ptr [rip + 0xd809c], rax; add rsp, 8; ret; 
0x0000000000047d10: endbr64; sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000141200: endbr64; sub rsp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000157d10: endbr64; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000157d30: endbr64; test edx, edx; jne 0x157d48; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157d80: endbr64; test edx, edx; jne 0x157d98; mov r8d, 1; mov eax, r8d; ret; 
0x000000000002fd80: endbr64; test esi, esi; je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x00000000000bbf50: endbr64; test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000b1d60: endbr64; test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf690: endbr64; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x00000000000342c0: endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000094c60: endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000000092870: endbr64; xor eax, eax; ret; 
0x0000000000113600: endbr64; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x113618; ret; 
0x000000000008cd60: endbr64; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd70: endbr64; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000908a0: endbr64; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000023a71: fadd dword ptr [rax]; add byte ptr [rax], al; jne 0x23a3b; ret; 
0x000000000008e5b1: fadd dword ptr [rax]; add byte ptr [rax], al; lea rcx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000000827ef: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000052c0a: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000118ad8: fadd dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ae7; ret; 
0x000000000010fd8a: fadd dword ptr [rax]; ret; 
0x00000000000627a8: fadd dword ptr [rbp - 0x7b]; sal byte ptr [rbp + 2], 0x5b; ret; 
0x000000000006e18a: fadd dword ptr [rbx + 0x10df9e0]; adc byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000158914: fadd dword ptr [rbx + 0x14807e0]; ret; 
0x000000000007550f: fadd dword ptr [rbx - 0x1f3efe20]; add al, 0x89; ret 0xf41; 
0x000000000015a604: fadd dword ptr [rbx - 0x76b7f820]; ret; 
0x00000000000d6c68: fadd dword ptr [rbx - 0x76b7f840]; ret; 
0x000000000017c974: fadd dword ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000ec7db: fadd dword ptr [rcx + 0x5c]; pop r13; pop r14; pop r15; ret; 
0x00000000000c7e02: fadd dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x000000000004a174: fadd dword ptr [rcx + 0xf]; xchg esp, eax; ret; 
0x000000000007ea2b: fadd dword ptr [rcx - 0x77]; ret; 
0x00000000000d44e4: fadd dword ptr [rip - 0x76b80000]; ret; 
0x00000000000445c0: fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000121158: fadd qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121170; ret; 
0x00000000000993a3: fadd qword ptr [rcx - 0x78]; or al, 0x18; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x0000000000190c10: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x190bd0; lea rax, [rdi + 7]; ret; 
0x000000000012da11: fadd qword ptr [rip + 0x158d4800]; and eax, 0x480005dc; cmove eax, edx; ret; 
0x000000000012da18: fadd qword ptr [rip + 0x440f4800]; ret 0xf6c3; 
0x0000000000041e28: fadd st(0); add rsp, 8; ret; 
0x0000000000041dd4: fadd st(0); ret; 
0x0000000000121c79: fbld tbyte ptr [rsi + 0xc]; add byte ptr [rax], al; ret; 
0x000000000018e1a1: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e19f: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000125c92: fcmovb st(0), st(6); out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000043f2e: fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000018884b: fcmovnb st(0), st(5); std; xlatb; ret; 
0x00000000000e1c33: fcom dword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e17d4: fcom qword ptr [rax]; add al, ch; xchg esp, eax; or esi, esp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000023a53: fcomp dword ptr [rax + rax]; ret; 
0x0000000000088136: fcomp dword ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000a2c3b: fcomp dword ptr [rbx + 0x48]; cmovne eax, edi; ret; 
0x00000000000c9ffb: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000c9f07: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000008d885: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000089dff: fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000197265: fcomp dword ptr [rbx + 0x7420e783]; adc bl, dh; movups xmm0, xmmword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x0000000000115b90: fcomp qword ptr [rdx - 0x76b7fff3]; add eax, 0xd9b05; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x000000000018e66f: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e46f: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f4d02: fdiv st(2); dec dword ptr [rax - 0x77]; ret; 
0x000000000005d7bc: fdiv st(6); ret; 
0x000000000006e3ec: fdiv st(7), st(0); inc dword ptr [rbx + rcx*4 + 0x63]; or byte ptr [rcx - 0x7d], al; retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000001837e4: fdivr dword ptr [rcx + rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000005d9dc: fdivr dword ptr [rsi - 0x7cbeffec]; in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000009f868: fdivr st(6), st(0); adc al, 0; ret; 
0x00000000000a273e: fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000012a2ad: fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000017c6ed: fdivr st(7); ret; 
0x00000000000b661e: fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000f0525: fdivrp st(6); ret; 
0x0000000000190d72: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x190e60; lea rax, [rdi + 0xf]; ret; 
0x0000000000048d84: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x000000000004b47f: fiadd dword ptr [rbp + 0x450f48ed]; ret 0x8948; 
0x00000000000a2e42: fiadd dword ptr [rbx + 0x634901c0]; rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x00000000000a478e: fiadd dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x000000000006bf53: fiadd dword ptr [rcx + 1]; retf 0x8948; ret; 
0x0000000000198503: fiadd dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000018b252: fiadd dword ptr [rcx]; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000e431b: fiadd dword ptr [rcx]; fstp xword ptr [rcx]; ret 0x9674; 
0x00000000000810ad: fiadd dword ptr [rcx]; rol byte ptr [rcx + rbp - 0x36], 0x39; ret 0x2b7c; 
0x00000000000a3fe3: fiadd dword ptr [rdi + rcx - 0x4a]; add byte ptr [r9 + 0xf], 0x93; ret; 
0x000000000009f23e: fiadd word ptr [rbp + 0xe]; add dh, dh; jb 0x9f256; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000c945d: fiadd word ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x00000000001845ae: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000018a51e: fiadd word ptr [rcx]; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000048104: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048153: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000018441f: fidiv dword ptr [rbx - 0x32]; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000018e56f: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e26f: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000007bc63: fidivr dword ptr [rcx]; ret 0x820f; 
0x0000000000075568: fidivr dword ptr [rcx]; ret 0x830f; 
0x0000000000112af1: fidivr dword ptr [rip - 0x1000]; mov eax, 0; cmova eax, edx; ret; 
0x0000000000054488: fild dword ptr [rax + 0xf3a007d]; xchg esp, eax; ret; 
0x0000000000075ff8: fild dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000011390a: fild dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x00000000001964f2: fild dword ptr [rbp + 0x31]; imul cl; stosb byte ptr [rdi], al; idiv bh; dec dword ptr [rbp - 0x76b63fb6]; ret 0xd349; 
0x00000000000a39fa: fild dword ptr [rbp - 0x77]; ret 0x8948; 
0x000000000006dc6a: fild dword ptr [rcx + 0x80e2]; add byte ptr [rbx - 0x9bef71d], al; ret; 
0x00000000000a8744: fild dword ptr [rcx - 0x3a]; add eax, dword ptr [rax]; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x000000000015a296: fild dword ptr [rcx - 0x77]; ret 0xf883; 
0x00000000000a4f2d: fild dword ptr [rcx - 0x7d]; ret; 
0x00000000000428ff: fild dword ptr [rip + 0x179e6b]; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x000000000004263e: fild dword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000041d28: fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000d0292: fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000013c454: fild word ptr [rax + rcx*4 + 0x19]; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000e9571: fild word ptr [rbx - 0x6bf0bf06]; ret 0xf883; 
0x00000000000a674c: fild word ptr [rcx - 0x7d]; cli; or byte ptr [rdi], cl; add dword ptr [rbp + 0x19], 0; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000000ca04d: fild word ptr [rdx + 0x1f0ffff5]; add byte ptr [rax], 0; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000c1a6e: fild word ptr [rsi]; add cl, ch; ret 0xf61c; 
0x00000000000967a2: fimul dword ptr [rax + 0x21]; ret 0x8949; 
0x000000000002768a: fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000005e3f5: fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x00000000000b1f15: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf845: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000000425d8: fimul dword ptr [rax + 9]; ret 0x8948; 
0x000000000017efa6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a04e9: fimul dword ptr [rax + rax]; cmovne rax, rdx; ret; 
0x0000000000121fd4: fimul dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc4: fimul dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000299ab: fimul dword ptr [rax - 0x75]; add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x000000000006d0fe: fimul dword ptr [rax - 0x77]; ret; 
0x00000000001529db: fimul dword ptr [rax - 0x7d]; ret 0x4812; 
0x0000000000135d4b: fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x0000000000041689: fimul dword ptr [rax - 0x7d]; ret; 
0x00000000000a4f08: fimul dword ptr [rbp + 0x29]; fld qword ptr [rbp + 1]; ret 0x8341; 
0x00000000000c9439: fimul dword ptr [rcx + 0x29]; ret 0xc149; 
0x000000000015cc79: fimul dword ptr [rcx + 9]; add byte ptr [rcx], al; mov rax, r8; pop rbp; ret; 
0x00000000000f3a4b: fimul dword ptr [rcx]; ret 0x840f; 
0x0000000000041b56: fimul dword ptr [rcx]; ret 0xc889; 
0x0000000000167b31: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000049dfa: fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x0000000000064825: fimul word ptr [rax - 0x77]; ret; 
0x0000000000066812: fimul word ptr [rax - 0x7d]; ret; 
0x0000000000132290: fimul word ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000167b32: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a87f1: fimul word ptr [rcx + rcx*4 - 0x40]; ret; 
0x0000000000027bdd: fimul word ptr [rdi]; and dword ptr [rbx + 3], 0; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000000f0898: fimul word ptr [rdi]; mov cs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000010e034: fimul word ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000c66c6: fimul word ptr [rsi]; add al, ch; ret 0xf6d8; 
0x00000000000de2cc: fist dword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000140bc1: fist dword ptr [rdx - 0x10]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000a09b1: fist dword ptr [rsp + rcx]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000df847: fist word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000019904d: fist word ptr [rdx + 0x1f0fffe8]; add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000007a8f7: fist word ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000034545: fistp qword ptr [rcx + 0x1b]; add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000095340: fisttp dword ptr [rax + 0x21]; ret; 
0x000000000013b6b4: fisttp dword ptr [rax + 1]; ret; 
0x0000000000196c42: fisttp dword ptr [rax + 9]; ror dword ptr [rdi], cl; xchg esp, eax; ret; 
0x0000000000056a55: fisttp dword ptr [rax - 0x77]; ret; 
0x0000000000121af7: fisttp dword ptr [rax - 0x77]; sbb eax, 0xca861; pop rbx; ret; 
0x0000000000121add: fisttp dword ptr [rax - 0x77]; sbb eax, 0xca87b; pop rbx; ret; 
0x00000000000c0eef: fisttp dword ptr [rcx - 0x77]; ret 0x48e9; 
0x0000000000056a6f: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000051651: fisttp dword ptr [rcx - 0x77]; ret 0xcde9; 
0x00000000000c6219: fisttp dword ptr [rcx - 0x77]; ret 0xcfe9; 
0x00000000000e65eb: fisttp dword ptr [rcx - 0x77]; test byte ptr [rdi], -0x6c; ret; 
0x000000000015f0fb: fisttp dword ptr [rcx]; ret; 
0x0000000000193325: fisttp dword ptr [rdi]; test byte ptr [rbx + rcx + 0x3d0000], dl; and byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x2041; 
0x000000000013b491: fisttp dword ptr [rdi]; test dword ptr [rax], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000042636: fisttp dword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000113750: fisttp dword ptr [rip - 0x80000000]; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000167d11: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000121d02: fisttp qword ptr [rax + rax]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000121cf9: fisttp qword ptr [rax + rax]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000e3380: fisttp qword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000000bb922: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000132371: fisttp qword ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000167d12: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000eb530: fisttp qword ptr [rcx - 0x77]; ret; 
0x00000000000eb4e6: fisttp qword ptr [rcx - 0x7d]; ret; 
0x000000000014e164: fisttp qword ptr [rcx]; add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x000000000014bea3: fisttp qword ptr [rdi]; xchg ebx, eax; ret 0x841; 
0x000000000010e14c: fisttp qword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e0d4: fisttp qword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000167961: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a5d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679a9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000005419f: fisttp word ptr [rax - 0x77]; ret 0x8949; 
0x0000000000038c63: fisttp word ptr [rax - 0x7d]; ret 0x4001; 
0x0000000000038e1a: fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000056aef: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000001320c4: fisttp word ptr [rbx]; add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; add ch, bh; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000167962: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a5e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679aa: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000037ff1: fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a6078: fisttp word ptr [rdi]; xchg ebx, eax; ret 0x841; 
0x00000000000c8f0b: fisttp word ptr [rdi]; xchg ebx, eax; ret; 
0x00000000001858bd: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000018e571: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000190bb3: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000001953e6: fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x000000000018e271: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000190bf1: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000000d7a2f: fld dword ptr [rax + 0x3941000d]; ret 0x8c0f; 
0x00000000000cf283: fld dword ptr [rax]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000000de2b5: fld dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000c7e11: fld dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x00000000000cf18c: fld dword ptr [rcx + rdi - 0x40]; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000001215cb: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x52], cl; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000a4f0b: fld qword ptr [rbp + 1]; ret 0x8341; 
0x000000000009959a: fld qword ptr [rcx - 0x78]; or al, 0x28; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000012d951: fld qword ptr [rip + 0x158d4800]; add eax, 0x480005dd; cmove eax, edx; ret; 
0x000000000012d898: fld qword ptr [rip + 0x440f4800]; ret 0xf6c3; 
0x0000000000041c8e: fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000188526: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000000d6c64: fld xword ptr [rcx]; ret; 
0x0000000000151639: fld xword ptr [rip - 0x76b7fffa]; ret; 
0x0000000000041dd0: fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000041d2c: fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000041c92: fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041bad: fld xword ptr [rsp + 8]; ret; 
0x0000000000041cda: fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c1c: fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d1093: fldcw word ptr [rbp - 0x2708ffef]; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000ce289: fldenv [rsi + 0xf]; jbe 0xce2dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac0a9: fldenv [rsi + 0xf]; je 0xac0fd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac397: fldenv [rsi + 0xf]; je 0xac3eb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000018e5f1: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000abfa1: fldenv [rsi + 0xf]; xlatb; ret; 
0x00000000000cf46c: fldenv [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x0000000000055a71: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000ee214: fldpi; leave; nop word ptr [rax + rax]; ret; 
0x00000000000579a1: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000055bb4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000004f6a8: fmul dword ptr [rax - 0x39]; ret; 
0x00000000000469a3: fmul dword ptr [rax - 0x3f]; call 0x6491b5ae; ret; 
0x0000000000198b0e: fmul dword ptr [rax - 0x3f]; call 0x6ca6d319; ret; 
0x0000000000198b62: fmul dword ptr [rax - 0x3f]; call 0x6ca6d36d; ret; 
0x000000000008a25e: fmul dword ptr [rax - 0x77]; ret; 
0x0000000000127819: fmul dword ptr [rax - 0x77]; ror byte ptr [rcx + 0x2b], 1; cmp byte ptr [r8 + 0x39], r9b; ret; 
0x00000000001032d7: fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x00000000000e8146: fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000158911: fmul dword ptr [rax - 9]; fadd dword ptr [rbx + 0x14807e0]; ret; 
0x000000000006bf01: fmul dword ptr [rbx + 0xf660446]; insb byte ptr [rdi], dx; ret; 
0x000000000011cc4c: fmul dword ptr [rcx + rcx*4 - 0x40]; pop rbx; ret; 
0x0000000000064be5: fmul dword ptr [rdi]; test byte ptr [rax], dh; adc al, 0; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000000a53d6: fmul dword ptr [rdi]; test dword ptr [rax + rbp*8 - 0x76b70001], esi; ret; 
0x00000000000c856a: fmul dword ptr [rdi]; xchg ebx, eax; ret; 
0x000000000010e588: fmul dword ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000167f01: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000066620: fmul qword ptr [rax - 0x77]; ret; 
0x00000000000de7d3: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000132456: fmul qword ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000167f02: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a9149: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000000acfaf: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000000eb29f: fmul qword ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000198b7e: fnsave dword ptr [rbp - 0x11]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000188524: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000010d216: fnsave dword ptr [rdi - 0x19]; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000018e36f: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f0896: fnstcw word ptr [rcx]; fimul word ptr [rdi]; mov cs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000cf16b: fnstcw word ptr [rcx]; sar dword ptr [rax + 1], 0x44; cmovl ecx, eax; mov eax, r9d; ret; 
0x0000000000041e23: fnstcw word ptr [rdx + 0xa]; jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x0000000000138a03: fnstcw word ptr [rdx + 0xb]; add al, ch; cdq; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000041e55: fnstcw word ptr [rdx - 0x2e]; jne 0x41e2a; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000098093: fnstcw word ptr [rip + 0x31450015]; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x00000000000784e1: fnstenv [rcx]; fucomi st(1); ret 0xfff1; 
0x000000000018e5ef: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000041dea: fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000018e371: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000041d30: fscale; fstp st(1); ret; 
0x00000000000e1b5b: fst dword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000bd613: fst dword ptr [rdx]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e16f3: fst qword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000141b0e: fstp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000a2226: fstp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001413e1: fstp qword ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001412af: fstp qword ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x000000000012cf8d: fstp qword ptr [rbx - 0x48]; add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x00000000000d0298: fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041c58: fstp st(0); and ax, 0x8000; mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041dec: fstp st(0); and eax, 0x200; ret; 
0x0000000000041e22: fstp st(1); jp 0x41e30; jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x0000000000041d32: fstp st(1); ret; 
0x00000000000e431d: fstp xword ptr [rcx]; ret 0x9674; 
0x0000000000041c90: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041cde: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c1a: fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000018393c: fstp xword ptr [rdx]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000041d94: fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000433ec: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000043428: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000048288: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142b0: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000041ded: fsub dword ptr [rip + 0x200]; ret; 
0x0000000000183b3c: fsub dword ptr [rsi + 0xf]; cmp ah, byte ptr [rbx - 0x25]; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000008d5c4: fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret 0xf66; 
0x0000000000063dbf: fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000018e671: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b25c4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000018e471: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b164c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000198fcc: fsub st(3), st(0); mov cl, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fdd0: fsubp st(0); cmp bh, bh; adc al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000d0296: fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000026f73: fsubr qword ptr [rcx + 0x1c]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000041c96: fsubrp st(1); ret; 
0x0000000000153951: fucomi st(1); in al, dx; inc dword ptr [rbp + 0x5b0775db]; pop rbp; pop r12; ret; 
0x00000000000784e3: fucomi st(1); ret 0xfff1; 
0x00000000000ef7c3: fucomi st(1); ret; 
0x000000000011cd0d: fucomi st(3); or al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000184d82: fucomi st(4); vptest ymm5, ymm0; jae 0x185020; xor eax, eax; vzeroupper; ret; 
0x000000000018bd36: fucomi st(4); vptest ymm5, ymm0; jae 0x18bf60; xor eax, eax; vzeroupper; ret; 
0x0000000000141b3f: fucomp st(6); or al, byte ptr [rax]; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x0000000000117997: fucompi st(0); add edi, dword ptr [rsi - 1]; inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x000000000011cc19: fucompi st(0); and dword ptr [rax - 0x10], ebx; dec dword ptr [rbp + rcx*4 + 5]; adc edx, dword ptr [rdx - 0x7ab7fff7]; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x0000000000036184: fucompi st(0); push rsi; ret; 
0x0000000000124717: fucompi st(0); ret; 
0x0000000000041de8: fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000011f493: fxch st(1); or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000002a782: hlt; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x000000000011920b: hlt; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000011576d: hlt; call qword ptr [rax - 0x6fa74b8]; or ax, 0x6400; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000013fec1: hlt; cmc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000192ac2: hlt; cmp eax, dword ptr [rsi - 0xc]; jne 0x192be0; ret; 
0x00000000000a8853: hlt; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000df5ba: hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000d4418: hlt; dec dword ptr [rax - 0x77]; ret; 
0x0000000000118cc6: hlt; dec dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x00000000001151dc: hlt; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000001156c5: hlt; inc dword ptr [rbp + 0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000db9e4: hlt; inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000db67f: hlt; inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000102a3e: hlt; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000192ac5: hlt; jne 0x192be0; ret; 
0x0000000000109898: hlt; js 0x1098a9; add byte ptr [rbx + rcx*4 + 0x34], cl; ret 0x88e9; 
0x00000000000a8a92: hlt; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8b6a: hlt; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89cd: hlt; mov byte ptr [rdi + 4], dl; ret; 
0x000000000016d28a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f0e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d283: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168067: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168083: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000183b9b: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000001920d3: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000015ca48: hlt; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114648: hlt; push rdi; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000001221e3: hlt; ret 0x4566; 
0x0000000000122211: hlt; ret 0xf66; 
0x00000000000a881b: hlt; ret; 
0x00000000001920d7: hlt; sub eax, edx; ret; 
0x00000000000bc7d0: idiv bh; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000007c4e9: idiv bh; dec dword ptr [rax + 0x29]; ret 0xf48; 
0x0000000000075f8c: idiv bh; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x000000000007b7a2: idiv bh; dec dword ptr [rax - 0x77]; retf 0x894c; out 0x4c, al; mov edi, ebp; call qword ptr [rax + 0x38]; 
0x000000000005cd3c: idiv bh; dec dword ptr [rax - 0x7d]; adc al, 0xf8; add cl, ch; ret 0xfff6; 
0x00000000000d3687: idiv bh; dec dword ptr [rax - 0x7d]; ret; 
0x000000000007b9b0: idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000001964f8: idiv bh; dec dword ptr [rbp - 0x76b63fb6]; ret 0xd349; 
0x00000000001093db: idiv bh; dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret 1; 
0x000000000007ba20: idiv bh; dec dword ptr [rbx - 0x8ff4b]; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000007518d: idiv bh; dec dword ptr [rcx - 0x77]; ret 0x8445; 
0x0000000000075143: idiv bh; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x00000000000751c3: idiv bh; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000116350: idiv bh; mov eax, 1; add rsp, 8; ret; 
0x00000000000bc91b: idiv bh; pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000271fa: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x00000000000a8e30: idiv edi; add rsp, 8; ret; 
0x000000000007ba26: idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x000000000007a965: idiv edi; dec dword ptr [rax + 0x39]; ret 0x2675; 
0x0000000000075811: idiv edi; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000121af2: idiv edi; dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0xca861; pop rbx; ret; 
0x00000000000d8b15: idiv edi; dec dword ptr [rax + 1]; ret; 
0x00000000001087f9: idiv edi; dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x2e74; 
0x0000000000108608: idiv edi; dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000108385: idiv edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000012158f: idiv edi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x0000000000075cc5: idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000075341: idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000074f72: idiv edi; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x0000000000075b4d: idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x0000000000074f4f: idiv edi; inc dword ptr [rcx]; ret; 
0x0000000000115a91: idiv edi; mov eax, 1; add rsp, 8; ret; 
0x0000000000120b42: idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000001151dd: idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f480: idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fdd: idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000011f2a7: idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000120bfa: idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x000000000011f74d: idiv edi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000118a31: idiv edi; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000117337: idiv edi; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000011f531: idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011f6a5: idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fce: idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000012036d: idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000011464a: idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120433: idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x0000000000047327: idiv esi; mov edi, edx; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000004734a: idiv esi; ret; 
0x000000000011f6a4: idiv r15; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120120: idiv r15d; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001204cf: idiv r15d; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000075b4c: idiv rdi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x000000000011f74c: idiv rdi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000047349: idiv rsi; ret; 
0x00000000000445be: imul al; fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x000000000015b2e7: imul al; ret; 
0x00000000000a8e2c: imul al; xchg edi, eax; idiv edi; add rsp, 8; ret; 
0x000000000013633a: imul byte ptr [rdx + 2]; call 0x1358b0; add rsp, 0x18; ret; 
0x000000000007c4a5: imul cl; or eax, 0xf6fffff8; ret 0xf10; 
0x000000000005e855: imul cl; ret 0xfffb; 
0x00000000000b5e18: imul cl; ret 8; 
0x00000000000c059c: imul cl; ret; 
0x00000000001964f5: imul cl; stosb byte ptr [rdi], al; idiv bh; dec dword ptr [rbp - 0x76b63fb6]; ret 0xd349; 
0x00000000001945c7: imul dword ptr [rcx]; ret 0xd189; 
0x00000000000de195: imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000de23c: imul eax, dword ptr [rcx + rax], 0x5b; pop rbp; pop r12; ret; 
0x00000000000490b1: imul eax, dword ptr [rcx], 0; add byte ptr [rax - 0x7bf0cf07], al; ret 1; 
0x0000000000190c31: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x00000000000a4043: imul eax, dword ptr [rcx], 0x634c0000; ret 0x7a8d; 
0x0000000000195a73: imul eax, dword ptr [rdi], 0x89480000; ret 0x8949; 
0x000000000018fe1e: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x18fe73; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000192c66: imul eax, edi; shr rax, 0x38; ret; 
0x0000000000160e4a: imul eax; adc byte ptr [rsi], dl; in al, dx; dec dword ptr [rax - 0x77]; ret 0x8b64; 
0x00000000000e3f0e: imul eax; jl 0xe3ef6; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000003d06b: imul eax; mov edi, 0xe9fffe52; retf 0xfffd; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ddaff: imul eax; pop rbx; hlt; dec dword ptr [rax - 0x77]; ret; 
0x0000000000125fda: imul eax; push rax; ret; 
0x0000000000031d37: imul eax; ret; 
0x00000000000f1b63: imul eax; xchg edi, eax; ret; 
0x000000000012aaf7: imul eax; xor edi, dword ptr [rax - 0x11]; dec dword ptr [rcx - 0x75]; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x00000000001579a1: imul ebp, dword ptr [rax], 0x5b; pop rbp; pop r12; ret; 
0x000000000008088a: imul ebp, dword ptr [rsp + rcx*2], -0x77; ret 0x8348; 
0x0000000000149bfb: imul ebx, dword ptr [rax + 0x48], -0x77; ret 0x2948; 
0x0000000000026f5b: imul ebx, dword ptr [rax + rax], 0x674c085; ret; 
0x0000000000127a94: imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008d4e6: imul ebx, dword ptr [rax], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000004757f: imul ebx, dword ptr [rbp + 0x1a], 0x408b0000; pop rax; ret; 
0x0000000000042901: imul ebx, dword ptr [rsi + 0xf660017], -0x15; add eax, 0x179ea3; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x0000000000081bf9: imul ecx, dword ptr [rax - 0x7f], -0x3c; call 0x44081c02; mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000081a3b: imul ecx, dword ptr [rax - 0x7f], 0xe8c4; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000001279f4: imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009ea46: imul ecx, dword ptr [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001197c1: imul ecx, dword ptr [rbx - 0x38b70010], 3; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000896d4: imul ecx, dword ptr [rcx + 0x2b], 0x47; and byte ptr [rax + 1], cl; ret; 
0x0000000000118c82: imul ecx, dword ptr [rip + 0x2f6e800], 0; add byte ptr [rax - 0x73], cl; add eax, 0xd6bdf; add rsp, 8; ret; 
0x00000000001152b4: imul ecx, dword ptr [rip + 0x64d8f700], -0x77; add bh, byte ptr [rax - 1]; ret; 
0x0000000000118c8e: imul ecx, dword ptr [rip - 0x3b7cb800], 8; ret; 
0x000000000011f303: imul ecx, ebx, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000127905: imul edi, dword ptr [rax], 0x48; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000048303: imul edi, dword ptr [rbx], 0x8b64001a; add byte ptr [rbx - 0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x000000000018fcb7: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa7d: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000df5b3: imul edi, ebp, 0xb4e80010; sub eax, 0x8948fff4; ret 0x8548; 
0x0000000000196285: imul edi, ebx, -1; dec dword ptr [rcx - 0x77]; ret 0x8948; 
0x0000000000095051: imul edi, edi, -1; dec dword ptr [rax + 0x29]; ret 0x8d49; 
0x00000000000e842c: imul edi, edi, -1; dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x00000000000a5f9f: imul edi, esp, 0x894cffff; ret 0xf41; 
0x0000000000127a44: imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000013c9a6: imul edx, edx, 0x3e8; mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000006e624: imul esi, edx, -1; inc dword ptr [rcx - 9]; ret; 
0x00000000000dfd02: imul esi, esi, 0x64010010; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x0000000000093469: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000009519c: imul esp, dword ptr [rbx*2 + 0x10438941], 0x41; mov dword ptr [rbx + 0x14], 0; ret; 
0x00000000000c4071: imul esp, dword ptr [rbx], -7; dec dword ptr [rax - 0x7d]; ret; 
0x000000000005164c: imul esp, edx, -1; push qword ptr [rcx]; fisttp dword ptr [rcx - 0x77]; ret 0xcde9; 
0x0000000000192c65: imul rax, rdi; shr rax, 0x38; ret; 
0x0000000000192af8: in al, 0; add byte ptr [rax], al; ret; 
0x000000000011f965: in al, 0; add byte ptr [rax], al; syscall; ret; 
0x0000000000029a4f: in al, 0x29; ret; 
0x00000000000df788: in al, 0x2b; hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001984e0: in al, 0x38; add eax, 0x8b486400; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013efd8: in al, 0x44; mov eax, edx; ret; 
0x00000000001424f4: in al, 0x48; add esp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000012816e: in al, 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000167f06: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000d0072: in al, 0x4c; mov eax, esp; pop r12; ret; 
0x000000000002ffb4: in al, 0x4c; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000000095448: in al, 0x5b; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008e243: in al, 0x5b; mov rax, r12; pop rbp; pop r12; pop r14; ret; 
0x000000000010d22a: in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000034b45: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000a0396: in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x00000000000d0059: in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000421e5: in al, 0x66; ucomiss xmm0, xmm4; jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x00000000000b69fc: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000000a2af1: in al, 0x74; ret 0x1f0f; 
0x0000000000155a73: in al, 0x74; ret; 
0x000000000012eade: in al, 0x75; cmovl ecx, dword ptr [rcx + 0x415d5be0]; pop rsp; ret; 
0x000000000011c02d: in al, 0x75; cmp dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x00000000000be4f3: in al, 0x75; ret 0x894c; 
0x00000000000cf5f6: in al, 0x75; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000010da18: in al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010d974: in al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000e3f11: in al, 0xf3; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000016d26a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000bc032: in al, 0xf3; ret; 
0x000000000012daf6: in al, 0xf8; dec dword ptr [rax - 0x73]; add eax, 0xfff8e3f0; cmovne rax, rdx; ret; 
0x0000000000074f77: in al, 0xf; lahf; ret; 
0x00000000000cf5ad: in al, 0xf; test dword ptr [rax + rax - 0xf580000], ebp; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000009e8cd: in al, 0xf; test dword ptr [rdx + 0x4e], ebx; clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000155104: in al, 0xf; xchg esp, eax; ret 0x854d; 
0x00000000000b7898: in al, 6; add byte ptr [rax], al; ret; 
0x000000000010c7c6: in al, dx; adc byte ptr [rdx + 1], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd6: in al, dx; adc byte ptr [rdx + 2], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000136c76: in al, dx; adc byte ptr [rdx + 2], ch; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf6: in al, dx; adc byte ptr [rdx + 3], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000010c7a6: in al, dx; adc byte ptr [rdx], ch; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000113250: in al, dx; adc edi, eax; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x0000000000151ba9: in al, dx; add byte ptr [rcx + rcx*4 - 0x40], 0x5d; ret; 
0x000000000017e670: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x00000000001556b7: in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e1e49; ret; 
0x0000000000155847: in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e1fd9; ret; 
0x000000000015b1e6: in al, dx; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x0000000000160e4e: in al, dx; dec dword ptr [rax - 0x77]; ret 0x8b64; 
0x000000000015a51a: in al, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001532bd: in al, dx; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000155100: in al, dx; dec dword ptr [rbp - 0x7b]; in al, 0xf; xchg esp, eax; ret 0x854d; 
0x0000000000048103: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048152: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000153953: in al, dx; inc dword ptr [rbp + 0x5b0775db]; pop rbp; pop r12; ret; 
0x000000000015d293: in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x0000000000125f70: in al, dx; js 0x125f7f; add byte ptr [rax - 0x77], cl; ret 0xcce9; 
0x000000000016d660: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000116ebb: in al, dx; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000094667: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x0000000000167f0a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a8aaa: in al, dx; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8b82: in al, dx; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a0740: in al, dx; mov word ptr [rip + 0x450f4800], cs; ret 0xfc3; 
0x000000000016d66a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000012fabb: in al, dx; nop dword ptr [rax]; endbr64; mov eax, edi; bswap eax; ret; 
0x00000000000bcdfd: in al, dx; or al, 0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000052a50: in al, dx; or al, ch; or esi, edi; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000141bbe: in al, dx; or al, ch; retf; and ebp, edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000cf8c3: in al, dx; or al, ch; sub al, 0xf5; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000012e95b: in al, dx; or byte ptr [rax + 0x39], cl; ret 0x976; 
0x000000000012806a: in al, dx; or byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x0000000000157d16: in al, dx; or byte ptr [rax - 0x75], cl; jg 0x157d34; call 0x830f0; add rsp, 8; ret; 
0x00000000000a8e26: in al, dx; or byte ptr [rax - 0x77], cl; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000017f394: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000445b6: in al, dx; or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x000000000008e1a2: in al, dx; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000a88d3: in al, dx; ret; 
0x000000000010dab9: in al, dx; sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x000000000012da53: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d993: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8d3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x00000000000a09d3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0663: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0503: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x0000000000184d83: in al, dx; vptest ymm5, ymm0; jae 0x185020; xor eax, eax; vzeroupper; ret; 
0x000000000018bd37: in al, dx; vptest ymm5, ymm0; jae 0x18bf60; xor eax, eax; vzeroupper; ret; 
0x0000000000137882: in eax, 0; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000a08dd: in eax, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xd22c9; cmovne rax, rdx; ret; 
0x00000000000a083d: in eax, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xd2349; cmovne rax, rdx; ret; 
0x0000000000118a87: in eax, 0x33; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118987: in eax, 0x34; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000167d16: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000008d7a5: in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000000e4387: in eax, 0x7a; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008ce5b: in eax, 0x7f; cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000014e503: in eax, 0x89; ret; 
0x00000000000e3187: in eax, 0x8c; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120787: in eax, 0xb6; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015f80a: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000120087: in eax, 0xbd; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc87: in eax, 0xc1; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e7664: in eax, 0xc; add al, ch; xor al, 0xe8; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000010e587: in eax, 0xd8; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d914: in eax, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000010d8a1: in eax, 0xd; add byte ptr [rbx + rcx*4], ah; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x000000000012d9b7: in eax, 0xe1; clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8e0fe; cmove rax, rdx; ret; 
0x0000000000198cfe: in eax, 0xe8; or al, 0x70; cld; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x57160], 0; ret; 
0x000000000011cf87: in eax, 0xee; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000123de9: in eax, 0xef; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000bc199: in eax, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000016d2ea: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000cfae3: in eax, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000000c0eeb: in eax, 0xff; push qword ptr [rcx]; fisttp dword ptr [rcx - 0x77]; ret 0x48e9; 
0x00000000000bcd55: in eax, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000a08d7: in eax, 2; lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0837: in eax, 2; lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000dd14c: in eax, dx; adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd134: in eax, dx; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000002a966: in eax, dx; add al, byte ptr [rax]; add byte ptr [rbp - 0x1a77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000005d9e2: in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000119643: in eax, dx; add ecx, ebx; ret; 
0x000000000009fa42: in eax, dx; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x0000000000198942: in eax, dx; call 0x22330; test rbx, rbx; jne 0x198935; pop rbx; ret; 
0x0000000000057be4: in eax, dx; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x000000000014c2ea: in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000146cf8: in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000014f448: in eax, dx; inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x00000000001986d5: in eax, dx; jne 0x1986c0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094aab: in eax, dx; jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d6e0: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000bb702: in eax, dx; lea rax, [rcx - 1]; ret; 
0x00000000000bb0c9: in eax, dx; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000bb0df: in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb101: in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb11f: in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb13f: in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb165: in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb181: in eax, dx; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb1a1: in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1c1: in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb1e7: in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb209: in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb227: in eax, dx; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb247: in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb263: in eax, dx; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb283: in eax, dx; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb2a3: in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2c3: in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2e9: in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb339: in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bb00f: in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb02d: in eax, dx; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb04d: in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bb06f: in eax, dx; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000bb08f: in eax, dx; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb0af: in eax, dx; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000baf45: in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000baf57: in eax, dx; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000baf6d: in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf85: in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000baf9b: in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafad: in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000bafcb: in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000bafd7: in eax, dx; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000bafed: in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000baf31: in eax, dx; mov byte ptr [rdi], ch; ret; 
0x0000000000167d1a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000e83d2: in eax, dx; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d6ea: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000182f00: in eax, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000006fb2d: in eax, dx; ret 0xffff; 
0x0000000000086e22: in eax, dx; ret; 
0x00000000000bb852: in eax, dx; sub rax, 1; ret; 
0x000000000009e852: in eax, dx; xor eax, eax; ret; 
0x0000000000102aa4: inc al; add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000053bb9: inc byte ptr [r11 - 0x6bf00220]; ret 0xf983; 
0x000000000011fb85: inc byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb94; ret; 
0x0000000000119df6: inc byte ptr [rbp - 0x60f0be2e]; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x0000000000055841: inc byte ptr [rbx + 0x87401e2]; mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x00000000000555f9: inc byte ptr [rbx + 0x87401e2]; mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000053bba: inc byte ptr [rbx - 0x6bf00220]; ret 0xf983; 
0x000000000015d21b: inc byte ptr [rbx]; ja 0x15d230; cmp dx, cx; sete al; ret; 
0x000000000002fd89: inc byte ptr [rbx]; je 0x2fd90; ret; 
0x00000000000bf99d: inc byte ptr [rcx + 0x29]; ret; 
0x00000000000c4b78: inc byte ptr [rcx + 0x29]; sar dword ptr [rcx], cl; ret 0x1d74; 
0x00000000000dcfa5: inc byte ptr [rcx]; je 0xdcfb0; xor eax, eax; ret; 
0x00000000001191ce: inc byte ptr [rdx]; add byte ptr [rax], al; lea rax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x000000000008ce5e: inc byte ptr [rdx]; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000010d0fa: inc byte ptr [rdx]; ja 0x10d106; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x00000000000a8629: inc dword ptr [r8]; mov qword ptr [rdx], rcx; ret; 
0x00000000000fed66: inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000035a22: inc dword ptr [rax - 0x76b7bcc8]; ret; 
0x00000000000e83e8: inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x00000000000e556b: inc dword ptr [rax - 0x7af0f506]; ret; 
0x00000000001953e2: inc dword ptr [rax]; add bh, dh; fisub dword ptr [rsi - 0x7f]; ret 0x7fff; 
0x0000000000196d7a: inc dword ptr [rax]; add byte ptr [rax - 0x75], cl; je 0x196da5; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000193fcb: inc dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8949; 
0x0000000000075343: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000063c06: inc dword ptr [rax]; add byte ptr [rax], al; add dh, dh; ret; 
0x000000000018eb81: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000000bc138: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x00000000000c6a99: inc dword ptr [rax]; add byte ptr [rax], al; je 0xc6aa3; mov eax, r8d; ret; 
0x00000000000e5149: inc dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000018eb87: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x000000000011fc15: inc dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc24; ret; 
0x0000000000195361: inc dword ptr [rax]; add byte ptr [rcx], bl; sal bh, cl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000195480: inc dword ptr [rax]; add byte ptr [rcx], bl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000094e8a: inc dword ptr [rax]; add byte ptr [rsi + 1], dh; ret; 
0x000000000012fb20: inc dword ptr [rax]; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000000a862a: inc dword ptr [rax]; mov qword ptr [rdx], rcx; ret; 
0x0000000000116e58: inc dword ptr [rax]; mov rax, r8; ret; 
0x0000000000042927: inc dword ptr [rax]; or byte ptr [rax - 0x3f], 0xe0; xor byte ptr [rax + 0x21], cl; retf 0x948; ret 0x8948; 
0x0000000000116eda: inc dword ptr [rax]; ret; 
0x0000000000102814: inc dword ptr [rbp + 0x31]; leave; add rsp, 8; mov eax, r9d; ret; 
0x00000000001353ea: inc dword ptr [rbp + 0x31]; rol byte ptr [rbp - 0x6bf0be40], cl; ret 0xf741; 
0x000000000002bf69: inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x7d], cl; ret 0x4b01; 
0x00000000000ed9c5: inc dword ptr [rbp + 0x31]; shl byte ptr [rsi + 0xf], cl; outsb dx, byte ptr [rsi]; ret; 
0x00000000001156c6: inc dword ptr [rbp + 0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000e2ec6: inc dword ptr [rbp + 0x480575c0]; add esp, 8; ret; 
0x000000000015ca15: inc dword ptr [rbp + 0x480e78c0]; add esp, 8; pop rbp; pop r12; ret; 
0x00000000000db2ee: inc dword ptr [rbp + 0x51850fd2]; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000153954: inc dword ptr [rbp + 0x5b0775db]; pop rbp; pop r12; ret; 
0x00000000000a387e: inc dword ptr [rbp + rcx*4 + 0x60]; add dword ptr [rcx - 0x7d], eax; ret 0x4801; 
0x000000000014de1c: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000522af: inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; movzx eax, al; ret; 
0x000000000015d294: inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x00000000000787fd: inc dword ptr [rbp - 0x557af02e]; add al, 0; add byte ptr [rbx - 0x78f0d008], al; sbb eax, 0x8900000b; ret 0xc083; 
0x000000000011259b: inc dword ptr [rbp - 0x587af040]; add dword ptr [rax], eax; add byte ptr [rbx + 0x54e83c7d], cl; ret 0xffff; 
0x000000000010c5d7: inc dword ptr [rbp - 0x74f38a40]; push rbx; add al, 0xeb; ret; 
0x00000000000a4c29: inc dword ptr [rbp - 0x77]; ret 0x8d4e; 
0x000000000013a972: inc dword ptr [rbp - 0x77]; ret; 
0x000000000011c02a: inc dword ptr [rbp - 0x7b]; in al, 0x75; cmp dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x0000000000074f74: inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x00000000000dad7e: inc dword ptr [rbp - 0x7b]; ror byte ptr [rdi], 0x85; retf; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000011799c: inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x0000000000026f70: inc dword ptr [rbx + 0x1c69dc0d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000113c7f: inc dword ptr [rbx + 0x478930c8]; or byte ptr [rax + 0x100], bh; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000001463a6: inc dword ptr [rbx + 0xaa7320d]; add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xaa747]; ret; 
0x0000000000140cd0: inc dword ptr [rbx + 0xafaec0d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x000000000006e3ee: inc dword ptr [rbx + rcx*4 + 0x63]; or byte ptr [rcx - 0x7d], al; retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000006ddc0: inc dword ptr [rbx + rcx*4 - 0x6b]; sar dl, 0xff; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xa; 
0x0000000000070883: inc dword ptr [rbx - 0x78f0d008]; call 0xffffffff89070897; ret 0xc083; 
0x000000000007965e: inc dword ptr [rbx - 0x78f0d008]; mov ecx, 0x89000002; ret 0xc083; 
0x00000000000709c3: inc dword ptr [rbx - 0x78f0d008]; mov edi, 0x89000009; ret 0xc083; 
0x000000000007fc61: inc dword ptr [rbx - 0x78f0d008]; ret 3; 
0x0000000000071182: inc dword ptr [rbx - 0x78f0d008]; ret; 
0x000000000003fc0c: inc dword ptr [rbx - 0x7af0fe08]; ret 0xfff2; 
0x000000000013b3c7: inc dword ptr [rbx - 0xc8b0a08]; pop rbx; ret; 
0x000000000012f9e7: inc dword ptr [rbx]; add byte ptr [rax], al; ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x0000000000047d78: inc dword ptr [rbx]; add byte ptr [rax], al; xor eax, ecx; ret; 
0x00000000000bc219: inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000bc164: inc dword ptr [rbx]; ret; 
0x000000000012faf2: inc dword ptr [rcx + 0xe2]; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000000eb5a5: inc dword ptr [rcx + 0xf]; mov dh, 0x43; add dword ptr [rcx - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000d60b2: inc dword ptr [rcx + 0xf]; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007c935: inc dword ptr [rcx + 0xf]; mov dh, 0x56; or al, 0xf6; ret 0xf08; 
0x000000000005f22d: inc dword ptr [rcx + 0xf]; xchg esp, eax; ret 0x8545; 
0x000000000014f449: inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x00000000000784de: inc dword ptr [rcx + 1]; fnstenv [rcx]; fucomi st(1); ret 0xfff1; 
0x0000000000057d9b: inc dword ptr [rcx + rbp - 0x38]; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057de1: inc dword ptr [rcx + rbp - 0x40]; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000011c88e: inc dword ptr [rcx + rcx*4 + 0x25]; ret 0xcfa; 
0x00000000000e2fce: inc dword ptr [rcx + rcx*4 - 0x18]; pop rbp; pop r12; pop r13; ret; 
0x0000000000081ec2: inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c6b49: inc dword ptr [rcx + rcx*4 - 0x38]; pop rbx; ret; 
0x0000000000041cff: inc dword ptr [rcx + rcx*4 - 0x3e]; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x0000000000085431: inc dword ptr [rcx + rcx*4 - 0x40]; pop rbp; pop r12; ret; 
0x0000000000054db5: inc dword ptr [rcx + rcx*4 - 0x40]; ret; 
0x00000000000e2b8f: inc dword ptr [rcx - 0x48]; add byte ptr [rax], al; add byte ptr [rax], al; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000117338: inc dword ptr [rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; add rsp, 8; ret; 
0x0000000000064822: inc dword ptr [rcx - 0x77]; fimul word ptr [rax - 0x77]; ret; 
0x0000000000102c7b: inc dword ptr [rcx - 0x77]; ret 0xce0f; 
0x00000000000a46f9: inc dword ptr [rcx - 0x7d]; ret; 
0x000000000006d4c7: inc dword ptr [rcx - 0xa]; ret; 
0x0000000000075b4f: inc dword ptr [rcx - 1]; push rsp; ret; 
0x000000000006ced4: inc dword ptr [rcx - 9]; ret; 
0x000000000007d0c0: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000015a5ba: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000162bc3: inc dword ptr [rcx]; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000074f51: inc dword ptr [rcx]; ret; 
0x0000000000192db0: inc dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0x8548; 
0x0000000000094d01: inc dword ptr [rdi]; add byte ptr [rax - 0x68], cl; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000000a43cd: inc dword ptr [rdx - 0x73]; add cl, byte ptr cs:[rcx - 0x76b774fc]; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000013bcf0: inc dword ptr [rip + 0xba]; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x000000000018609d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x00000000000cf5ab: inc dword ptr [rsp + riz*8 + 0xac850f]; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000013bceb: inc dword ptr [rsp + rsi*2]; sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000bb92a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb927: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb924: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000041b7d: inc eax; shr eax, 0x1f; ret; 
0x000000000018502c: inc ebp; std; xlatb; ret 0xe883; 
0x00000000000da9ee: inc edi; add ebp, dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000db9e5: inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000db680: inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bb929: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb926: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb923: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000009563a: insb byte ptr [rdi], dx; adc eax, 0x5be97500; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000017fb14: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000151ced: insb byte ptr [rdi], dx; add rsp, 0x30; pop rbx; ret; 
0x0000000000041cdb: insb byte ptr [rdi], dx; and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c1d: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000d0293: insb byte ptr [rdi], dx; and al, 0xf0; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041dd1: insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x0000000000041d2d: insb byte ptr [rdi], dx; and al, 8; fscale; fstp st(1); ret; 
0x0000000000041c93: insb byte ptr [rdi], dx; and al, 8; fsubrp st(1); ret; 
0x0000000000041bae: insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000007b672: insb byte ptr [rdi], dx; cli; dec dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000014f446: insb byte ptr [rdi], dx; in eax, dx; inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x000000000014d0e8: insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x0000000000118c33: insb byte ptr [rdi], dx; or eax, 0x5c415d00; pop r13; ret; 
0x0000000000115178: insb byte ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001151f4: insb byte ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012b9bc: insb byte ptr [rdi], dx; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000057d38: insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000014ad42: insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000016064a: insb byte ptr [rdi], dx; ret 0x44c7; 
0x0000000000089d6d: insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000051f05: insb byte ptr [rdi], dx; ret 0x7c89; 
0x0000000000153cad: insb byte ptr [rdi], dx; ret 0x8948; 
0x000000000016022e: insb byte ptr [rdi], dx; ret 0x8d48; 
0x0000000000025393: insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000008d5c7: insb byte ptr [rdi], dx; ret 0xf66; 
0x0000000000025803: insb byte ptr [rdi], dx; ret; 
0x0000000000047ce6: insb byte ptr [rdi], dx; rol dword ptr [rcx + rcx*4 - 0x40], 0xf; adc dword ptr [rdi], eax; ret; 
0x0000000000089ef1: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x0000000000095dfb: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x00000000001149b4: insb byte ptr [rdi], dx; ror dword ptr [rax - 0x75], 5; ret; 
0x0000000000091f03: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000874f8: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000182780: insd dword ptr [rdi], dx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a4441: insd dword ptr [rdi], dx; adc dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret; 
0x0000000000183680: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000d849e: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x00000000000db0b3: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000d123c: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add cl, al; stc; add cl, byte ptr [rax - 0x77]; ret; 
0x00000000000471df: insd dword ptr [rdi], dx; mov bl, 0xfd; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x00000000000529f4: insd dword ptr [rdi], dx; mov esp, 0x8d480019; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000115148: insd dword ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000048150: insd dword ptr [rdi], dx; out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000086e98: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918f1: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000008c084: insd dword ptr [rdi], dx; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000033d57: insd dword ptr [rdi], dx; sbb byte ptr [rbx], 0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000055073: insd dword ptr [rdi], dx; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015c866: insd dword ptr [rdi], dx; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000094723: int 0x15; add byte ptr [rbx - 0x39], bl; add eax, 0x15cd5f; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000e2e6f: int 0x17; sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000117371: int 0x41; mov eax, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x00000000000bcd77: int 0x48; lea eax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0467: int 0x48; lea eax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000001866ef: int 0x4d; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000010c26f: int 0x83; clc; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000117397: int 0x83; or eax, 0xff854800; jne 0x1173b0; mov eax, 1; ret; 
0x00000000000c9edf: int 0x91; add eax, 0x74db8500; sbb dword ptr [rcx], edi; ret; 
0x0000000000146fab: int 0x9b; or al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000012fe87: int 0xbf; or eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x000000000011f141: int 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001556b6: int 0xec; dec dword ptr [rax - 0x2f]; call 0xffffffff895e1e49; ret; 
0x00000000000f57d9: int 0xf2; dec dword ptr [rax - 0x77]; ret; 
0x000000000018e2af: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000029b5d: int1; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret 0x860f; 
0x0000000000116e65: int1; add dword ptr [rax - 0x7d], ecx; mov dword ptr [rcx], 0x1f0fa6eb; add byte ptr [rax + 0x7522017f], al; ret 0x8d48; 
0x000000000005ea36: int1; add r8d, eax; mov eax, r8d; ret; 
0x00000000000aa558: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000102a3b: int1; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x00000000001907a6: int1; dec byte ptr [rax + 0x7f]; jg 0x1907af; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190930: int1; dec byte ptr [rax + 0x7f]; jg 0x190939; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000001905d0: int1; dec byte ptr [rax + 0x7f]; jl 0x1905ed; cld; vzeroupper; ret; 
0x00000000001114f8: int1; dec dword ptr [rax - 0x77]; ret 0x348; 
0x0000000000111300: int1; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x0000000000105cb9: int1; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000011012a: int1; dec dword ptr [rbp + rcx*4 + 0x24]; sbb byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x0000000000110830: int1; dec dword ptr [rcx - 0x73]; push rsi; add dword ptr [rax + 0x39], ecx; ret 0xe72; 
0x000000000011f74b: int1; idiv rdi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000102813: int1; inc dword ptr [rbp + 0x31]; leave; add rsp, 8; mov eax, r9d; ret; 
0x0000000000092a1b: int1; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x00000000000a8855: int1; je 0xa8848; ret; 
0x000000000018fab5: int1; jl 0x18fb00; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001901a1: int1; jl 0x1901ec; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a8: int1; jl 0x1901f3; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901af: int1; jl 0x1901fa; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001901c2: int1; jl 0x19020d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901c9: int1; jl 0x190214; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901d0: int1; jl 0x19021b; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001901dd: int1; jl 0x190228; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901e3: int1; jl 0x19022e; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001902aa: int1; jl 0x1902f5; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001902b1: int1; jl 0x1902fc; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001902b8: int1; jl 0x190303; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000190302: int1; jl 0x19034d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190309: int1; jl 0x190354; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190310: int1; jl 0x19035b; adc dword ptr [rsi + 3], edx; ret; 
0x000000000019039f: int1; jl 0x1903ea; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903a6: int1; jl 0x1903f1; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903ad: int1; jl 0x1903f8; adc dword ptr [rsi + 7], edx; ret; 
0x00000000000a88d1: int1; jne 0xa88c0; ret; 
0x000000000018ac83: int1; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000011cc46: int1; mov byte ptr [rdx], 0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x00000000000bc205: int1; mov eax, eax; ret; 
0x000000000016d0db: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001684df: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000149280: int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000012ce5e: int1; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000016d0d3: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000168657: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168673: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014d055: int1; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000001920a3: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000000bcd7b: int1; out dx, al; or al, 0; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000010e84b: int1; pop rbp; clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x000000000005430e: int1; pop rbx; ret; 
0x000000000005557b: int1; push -0x2708ffe7; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001120c9: int1; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000bdfbe: int1; ret; 
0x0000000000129435: int1; shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000001920a7: int1; sub eax, edx; ret; 
0x0000000000184e11: int1; sub rax, rcx; je 0x184e20; sbb eax, eax; or eax, 1; ret; 
0x000000000015f800: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x000000000018ac79: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891c9: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x00000000001891d3: int1; vzeroupper; ret; 
0x0000000000135f30: invd; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000074c78: iretd; adc al, 0; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000000e4533: iretd; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e44db: iretd; adc byte ptr [rax], al; test eax, eax; jne 0xe4510; mov eax, 0x75; syscall; 
0x00000000000e458b: iretd; adc byte ptr [rax], al; test eax, eax; jne 0xe45c0; mov eax, 0x77; syscall; 
0x000000000014382d: iretd; adc dword ptr [rax + rcx*2 + 0x33], esp; cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000001854cd: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000d4241: iretd; add al, 0x31; rol byte ptr [rcx - 0x5c28f401], 0; setb al; add eax, 0x16d; ret; 
0x00000000000a849a: iretd; add byte ptr [rax - 0x78], 0x7d; ret 0x2bf; 
0x00000000000a44ff: iretd; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x0000000000187fde: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000c9751: iretd; add eax, 0x89490000; ret; 
0x00000000000dd769: iretd; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000006be9d: iretd; call qword ptr [rdi]; 
0x00000000001113d6: iretd; cld; dec dword ptr [rax - 0x77]; ret; 
0x00000000001294b2: iretd; cmovne eax, esi; ret; 
0x00000000000b1ab3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000010cdee: iretd; dec dword ptr [rcx + 0x75b8c6]; add byte ptr [rax], al; syscall; 
0x000000000010ce17: iretd; dec dword ptr [rcx + 0x77b8c6]; add byte ptr [rax], al; syscall; 
0x000000000005ea22: iretd; ja 0x5ea08; mov eax, r8d; ret; 
0x000000000018b729: iretd; jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001904b4: iretd; jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbee: iretd; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000361bd: iretd; mov dl, 0x1b; add byte ptr [rbx + 0x6c0f6600], cl; ret 0xf41; 
0x000000000008ac52: iretd; mov dword ptr [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e2d43: iretd; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fd5: iretd; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120bf2: iretd; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000120fc5: iretd; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x00000000000aa622: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183d86: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000011e6c3: iretd; or dword ptr [rcx], 0xd8d4800; ret 0x5f1; 
0x00000000001331bb: iretd; or eax, dword ptr [rax]; syscall; 
0x000000000011e0dd: iretd; ret 0xfff8; 
0x000000000008dee6: iretd; ret; 
0x00000000000e30b9: iretd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005b4be: iretd; rstorssp dword ptr [r8 - 8]; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000000309c8: iretd; sbb eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ef25: iretd; sub rsp, 8; call rsi; 
0x0000000000085f66: iretd; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000000e4532: iretq; adc byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001028cf: ja 0x1028d7; setne al; movzx eax, al; ret; 
0x000000000010c170: ja 0x10c1d0; ret; 
0x000000000010c220: ja 0x10c280; ret; 
0x000000000010c6ee: ja 0x10c758; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c795: ja 0x10c79b; xor eax, eax; ret; 
0x000000000010c742: ja 0x10c7ac; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0fc: ja 0x10d106; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000010d1cb: ja 0x10d1b8; mov eax, r8d; ret; 
0x000000000010d217: ja 0x10d200; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d3b8: ja 0x10d37a; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d4c0: ja 0x10d4c8; ret; 
0x000000000010d4b1: ja 0x10d4e0; mov eax, 4; syscall; cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x000000000010d51f: ja 0x10d528; ret; 
0x000000000010d510: ja 0x10d540; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x10d528; ret; 
0x000000000010d580: ja 0x10d588; ret; 
0x000000000010d571: ja 0x10d5a0; mov eax, 6; syscall; cmp rax, -0x1000; ja 0x10d588; ret; 
0x000000000010d908: ja 0x10d910; ret; 
0x000000000010d96b: ja 0x10d970; ret; 
0x000000000010d9c5: ja 0x10d9d0; ret; 
0x000000000010d9b6: ja 0x10d9e8; mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x000000000010dbfe: ja 0x10dc08; ret; 
0x000000000010dfd8: ja 0x10e030; ret; 
0x000000000010e07d: ja 0x10e0d0; ret; 
0x000000000010e111: ja 0x10e118; ret; 
0x000000000010e141: ja 0x10e148; ret; 
0x000000000010e81d: ja 0x10e860; ret; 
0x000000000010e99d: ja 0x10e9e0; ret; 
0x00000000001127e7: ja 0x1127f0; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x000000000011296d: ja 0x1129c0; ret; 
0x0000000000112ff0: ja 0x113068; ret; 
0x00000000001130b4: ja 0x1130c0; ret; 
0x00000000001130f9: ja 0x113100; ret; 
0x0000000000113200: ja 0x113260; ret; 
0x00000000001132b0: ja 0x113310; ret; 
0x0000000000113351: ja 0x113358; ret; 
0x000000000011360e: ja 0x113618; ret; 
0x0000000000113644: ja 0x113650; ret; 
0x0000000000113681: ja 0x113688; ret; 
0x00000000001136f7: ja 0x113701; ret; 
0x00000000001136eb: ja 0x113725; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000113740: ja 0x11374a; ret; 
0x0000000000113b67: ja 0x113bb8; ret; 
0x0000000000113d7a: ja 0x113d80; ret; 
0x0000000000113dbb: ja 0x113dc0; ret; 
0x00000000001141b1: ja 0x1141c0; mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000001142a0: ja 0x1142c8; xor eax, eax; ret; 
0x00000000001143ed: ja 0x114440; ret; 
0x000000000011448d: ja 0x1144e0; ret; 
0x0000000000114533: ja 0x114598; ret; 
0x00000000001145f3: ja 0x114658; ret; 
0x0000000000114f80: ja 0x114ff0; ret; 
0x00000000001151ad: ja 0x1151f0; ret; 
0x000000000011526d: ja 0x1152b0; ret; 
0x000000000011532d: ja 0x115330; ret; 
0x0000000000116ab1: ja 0x116ab8; ret; 
0x0000000000116c96: ja 0x116ca0; ret; 
0x0000000000116cd1: ja 0x116cd8; ret; 
0x0000000000116d01: ja 0x116d08; ret; 
0x00000000001183e5: ja 0x11845b; or eax, 0x74db8500; or al, 0xf7; ret; 
0x00000000001188ec: ja 0x118950; pop rbx; pop rbp; ret; 
0x00000000001189ed: ja 0x118a40; ret; 
0x0000000000119185: ja 0x1191ee; or eax, 0x415c4100; pop rbp; ret; 
0x000000000011c4c8: ja 0x11c4d0; ret; 
0x000000000011f0a9: ja 0x11f0c0; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x000000000011f1a1: ja 0x11f1a8; ret; 
0x000000000011f246: ja 0x11f2b8; ret; 
0x000000000011f2f9: ja 0x11f300; ret; 
0x000000000011f430: ja 0x11f490; ret; 
0x000000000011f4e0: ja 0x11f540; ret; 
0x000000000011f590: ja 0x11f5f0; ret; 
0x000000000011f640: ja 0x11f6b8; ret; 
0x000000000011f70d: ja 0x11f760; ret; 
0x000000000011f7d5: ja 0x11f808; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011f839: ja 0x11f840; ret; 
0x00000000001200dd: ja 0x120130; ret; 
0x00000000001201ad: ja 0x120200; ret; 
0x0000000000120316: ja 0x120380; ret; 
0x00000000001203d0: ja 0x120440; ret; 
0x000000000012048d: ja 0x1204e0; ret; 
0x0000000000120536: ja 0x1205a0; ret; 
0x00000000001205ed: ja 0x120640; ret; 
0x0000000000120690: ja 0x120708; ret; 
0x0000000000120af0: ja 0x120b50; ret; 
0x0000000000120ba0: ja 0x120c08; ret; 
0x0000000000120c50: ja 0x120cb0; ret; 
0x0000000000120dbd: ja 0x120dcc; movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000120ec0: ja 0x120f20; ret; 
0x0000000000120f70: ja 0x120fe0; ret; 
0x0000000000121021: ja 0x121028; ret; 
0x0000000000121051: ja 0x121058; ret; 
0x0000000000121091: ja 0x121098; ret; 
0x0000000000121164: ja 0x121170; ret; 
0x00000000001211a1: ja 0x1211a8; ret; 
0x00000000001211d1: ja 0x1211d8; ret; 
0x0000000000121204: ja 0x121210; ret; 
0x0000000000121241: ja 0x121248; ret; 
0x0000000000127ad4: ja 0x127af0; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000012daf5: ja 0x12dadb; clc; dec dword ptr [rax - 0x73]; add eax, 0xfff8e3f0; cmovne rax, rdx; ret; 
0x000000000012e7b3: ja 0x12e7c0; ret; 
0x000000000012e7a7: ja 0x12e7d4; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x000000000012eb5f: ja 0x12eb72; lea rdx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x000000000012f9eb: ja 0x12f9f5; mov rax, rdi; sar rax, 6; ret; 
0x000000000013c176: ja 0x13c179; ret; 
0x000000000013c432: ja 0x13c41c; mov eax, 0xffffffff; ret; 
0x000000000014746f: ja 0x1474b9; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001492a5: ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000014927c: ja 0x149290; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000001546ac: ja 0x1546b7; add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x00000000001574e6: ja 0x157500; mov eax, r8d; ret; 
0x000000000015751e: ja 0x157538; mov rax, r8; ret; 
0x0000000000157de3: ja 0x157dfd; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x000000000015d21d: ja 0x15d230; cmp dx, cx; sete al; ret; 
0x0000000000188a68: ja 0x188ab2; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x00000000001890d9: ja 0x189170; je 0x189160; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000001897f9: ja 0x189950; je 0x189940; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189be4: ja 0x1899f0; je 0x1899e0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189e79: ja 0x189f10; je 0x189f00; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a8d4: ja 0x18a5a0; je 0x18a590; vzeroupper; ret; 
0x000000000018a7b0: ja 0x18a680; je 0x18a670; vzeroupper; ret; 
0x000000000018a7fa: ja 0x18a83c; sub r8, 0x20; jb 0x18a415; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018ab69: ja 0x18ac00; je 0x18abf0; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000018b614: ja 0x18b2d0; je 0x18b2c0; mov rax, rdi; vzeroupper; ret; 
0x000000000018b4e0: ja 0x18b3b0; je 0x18b3a0; vzeroupper; ret; 
0x000000000018b748: ja 0x18b785; jb 0x18b751; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018b98c: ja 0x18b9ce; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018baa8: ja 0x18baea; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018bb7e: ja 0x18bb8e; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bb1e: ja 0x18bb97; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bc35: ja 0x18bc63; jb 0x18bc3b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018d408: ja 0x18d452; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018ff87: ja 0x18ff82; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001904d8: ja 0x19052d; jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001907a3: ja 0x1907a7; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019092d: ja 0x190931; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190a17: ja 0x190a2b; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000001909a7: ja 0x190a34; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190afd: ja 0x190b39; jb 0x190b03; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000198cb5: ja 0x198c4d; call 0xffffffff80389cbb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198d6b: ja 0x198d72; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000246ec: ja 0x2470a; add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000033c2e: ja 0x33ca8; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000000033df5: ja 0x33e07; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000043416: ja 0x43420; ret; 
0x0000000000043462: ja 0x434b0; ret; 
0x0000000000043af5: ja 0x43a7a; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004822d: ja 0x48280; ret; 
0x000000000005b6ad: ja 0x5b680; mov rax, r8; ret; 
0x000000000005ea23: ja 0x5ea08; mov eax, r8d; ret; 
0x0000000000062e91: ja 0x62e98; ret; 
0x0000000000062ec4: ja 0x62ed0; ret; 
0x0000000000062f09: ja 0x62f48; mov r8d, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x0000000000087dec: ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000008d881: ja 0x8d890; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d93c: ja 0x8d950; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000092a1c: ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000009cb8a: ja 0x9cb93; add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000009ef20: ja 0x9ef2a; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000009ef19: ja 0x9ef30; mov rax, r8; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000009f21a: ja 0x9f21d; add byte ptr [rax - 0x73], cl; adc eax, 0xd5edc; cmovne rax, rdx; ret; 
0x00000000000a2225: ja 0xa2200; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6e87: ja 0xb6e8b; ret; 
0x00000000000b6ea3: ja 0xb6ea9; mov dword ptr [rdi], ecx; ret; 
0x00000000000b6ee4: ja 0xb6eee; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f69: ja 0xb6f7b; ret; 
0x00000000000b6fbf: ja 0xb6fd5; ret; 
0x00000000000b7041: ja 0xb705b; ret; 
0x00000000000b7707: ja 0xb770b; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b7743: ja 0xb7749; mov dword ptr [rdi], ecx; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b77c4: ja 0xb77ce; mov qword ptr [rdi], rcx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b78c9: ja 0xb78db; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b794f: ja 0xb7965; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b79d1: ja 0xb79eb; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b8077: ja 0xb8099; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b84c7: ja 0xb84cb; lea rax, [rdi + 2]; ret; 
0x00000000000b84e3: ja 0xb84e9; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b8534: ja 0xb853e; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b8619: ja 0xb862b; lea rax, [rdi + 0x10]; ret; 
0x00000000000b868f: ja 0xb86a5; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8711: ja 0xb872b; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8de7: ja 0xb8deb; lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x00000000000b8fe9: ja 0xb8ffb; lea rax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b909f: ja 0xb90b5; lea rax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b98c7: ja 0xb98e9; sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000ba197: ja 0xba19b; ret; 
0x00000000000ba1b3: ja 0xba1b9; mov dword ptr [rdi], ecx; ret; 
0x00000000000ba1f4: ja 0xba1fe; mov qword ptr [rdi], rcx; ret; 
0x00000000000ba279: ja 0xba28b; ret; 
0x00000000000ba2cf: ja 0xba2e5; ret; 
0x00000000000ba351: ja 0xba36b; ret; 
0x00000000000bac87: ja 0xbac8b; ret; 
0x00000000000baca3: ja 0xbaca9; mov dword ptr [rdi], ecx; ret; 
0x00000000000bace4: ja 0xbacee; mov qword ptr [rdi], rcx; ret; 
0x00000000000bad69: ja 0xbad7b; ret; 
0x00000000000badbf: ja 0xbadd5; ret; 
0x00000000000bae41: ja 0xbae5b; ret; 
0x00000000000bbc08: ja 0xbbc30; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000bbbc1: ja 0xbbc41; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbdd4: ja 0xbbdf6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbea2: ja 0xbbec4; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbfa6: ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf26: ja 0xbbfbc; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfc0: ja 0xbbfd8; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bc047: ja 0xbc05e; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000cb17e: ja 0xcb1cc; or eax, 0x80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000cf281: ja 0xcf360; add rax, rdi; add rax, rcx; ret; 
0x00000000000cf349: ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000d0dd1: ja 0xd0dd8; ret; 
0x00000000000d0ee6: ja 0xd0ef0; ret; 
0x00000000000d1086: ja 0xd1090; ret; 
0x00000000000dd07d: ja 0xdd047; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd0fd: ja 0xdd0c7; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd12b: ja 0xdd130; ret; 
0x00000000000dd11c: ja 0xdd148; mov eax, 0xe3; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2c1: ja 0xde2c8; ret; 
0x00000000000e2c40: ja 0xe2ca0; ret; 
0x00000000000e2cf3: ja 0xe2d60; ret; 
0x00000000000e2e4d: ja 0xe2e80; ret; 
0x00000000000e2e68: ja 0xe2e92; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000102661: jae 0x102664; ret; 
0x0000000000102691: jae 0x102694; ret; 
0x00000000001026c1: jae 0x1026c4; ret; 
0x00000000001026f1: jae 0x1026f4; ret; 
0x0000000000102721: jae 0x102724; ret; 
0x0000000000102751: jae 0x102754; ret; 
0x0000000000102781: jae 0x102784; ret; 
0x00000000001027b1: jae 0x1027b4; ret; 
0x000000000010d3e1: jae 0x10d3e4; ret; 
0x000000000010da11: jae 0x10da14; ret; 
0x000000000010da41: jae 0x10da44; ret; 
0x000000000010db71: jae 0x10db74; ret; 
0x000000000010dba1: jae 0x10dba4; ret; 
0x000000000010dc61: jae 0x10dc64; ret; 
0x000000000010dc91: jae 0x10dc94; ret; 
0x000000000010e581: jae 0x10e584; ret; 
0x000000000010e8a1: jae 0x10e8a4; ret; 
0x000000000010e8d1: jae 0x10e8d4; ret; 
0x000000000010e901: jae 0x10e904; ret; 
0x000000000010e931: jae 0x10e934; ret; 
0x000000000010e961: jae 0x10e964; ret; 
0x000000000010ea21: jae 0x10ea24; ret; 
0x000000000010ea51: jae 0x10ea54; ret; 
0x000000000010f371: jae 0x10f374; ret; 
0x000000000010f3a1: jae 0x10f3a4; ret; 
0x000000000010f3d1: jae 0x10f3d4; ret; 
0x000000000010f404: jae 0x10f407; ret; 
0x000000000010fbc1: jae 0x10fbc4; ret; 
0x000000000010fbf4: jae 0x10fbf7; ret; 
0x000000000010fc21: jae 0x10fc24; ret; 
0x000000000010fc51: jae 0x10fc54; ret; 
0x000000000010fc81: jae 0x10fc84; ret; 
0x000000000010fcb4: jae 0x10fcb7; ret; 
0x000000000010fce1: jae 0x10fce4; ret; 
0x000000000010fd11: jae 0x10fd14; ret; 
0x000000000010fd41: jae 0x10fd44; ret; 
0x0000000000112fb4: jae 0x112fb7; ret; 
0x0000000000113b29: jae 0x113b33; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000113df1: jae 0x113df4; ret; 
0x00000000001141f1: jae 0x1141f4; ret; 
0x00000000001143b1: jae 0x1143b4; ret; 
0x0000000000114df1: jae 0x114df4; ret; 
0x0000000000114f41: jae 0x114f44; ret; 
0x0000000000115141: jae 0x115144; ret; 
0x0000000000115171: jae 0x115174; ret; 
0x0000000000115231: jae 0x115234; ret; 
0x00000000001152f1: jae 0x1152f4; ret; 
0x0000000000115631: jae 0x115634; ret; 
0x0000000000115661: jae 0x115664; ret; 
0x0000000000115691: jae 0x115694; ret; 
0x0000000000118743: jae 0x118746; ret; 
0x0000000000118981: jae 0x118984; ret; 
0x00000000001189b1: jae 0x1189b4; ret; 
0x0000000000118a81: jae 0x118a84; ret; 
0x0000000000118ab1: jae 0x118ab4; ret; 
0x0000000000118ae4: jae 0x118ae7; ret; 
0x0000000000118b11: jae 0x118b14; ret; 
0x0000000000118b41: jae 0x118b44; ret; 
0x0000000000118b71: jae 0x118b74; ret; 
0x0000000000118ba1: jae 0x118ba4; ret; 
0x000000000011cda4: jae 0x11cda7; ret; 
0x000000000011cdd1: jae 0x11cdd4; ret; 
0x000000000011ce01: jae 0x11ce04; ret; 
0x000000000011ce34: jae 0x11ce37; ret; 
0x000000000011ce64: jae 0x11ce67; ret; 
0x000000000011ce91: jae 0x11ce94; ret; 
0x000000000011cec4: jae 0x11cec7; ret; 
0x000000000011cef1: jae 0x11cef4; ret; 
0x000000000011cf21: jae 0x11cf24; ret; 
0x000000000011cf54: jae 0x11cf57; ret; 
0x000000000011cf81: jae 0x11cf84; ret; 
0x000000000011cfb4: jae 0x11cfb7; ret; 
0x000000000011eff1: jae 0x11eff4; ret; 
0x000000000011f021: jae 0x11f024; ret; 
0x000000000011f171: jae 0x11f174; ret; 
0x000000000011f1d1: jae 0x11f1d4; ret; 
0x000000000011f201: jae 0x11f204; ret; 
0x000000000011f331: jae 0x11f334; ret; 
0x000000000011f3c4: jae 0x11f3c7; ret; 
0x000000000011f3f1: jae 0x11f3f4; ret; 
0x000000000011f911: jae 0x11f914; ret; 
0x000000000011f941: jae 0x11f944; ret; 
0x000000000011f984: jae 0x11f987; ret; 
0x000000000011f9b1: jae 0x11f9b4; ret; 
0x000000000011f9e1: jae 0x11f9e4; ret; 
0x000000000011fa11: jae 0x11fa14; ret; 
0x000000000011fa41: jae 0x11fa44; ret; 
0x000000000011fa71: jae 0x11fa74; ret; 
0x000000000011faa1: jae 0x11faa4; ret; 
0x000000000011fad1: jae 0x11fad4; ret; 
0x000000000011fb04: jae 0x11fb07; ret; 
0x000000000011fb31: jae 0x11fb34; ret; 
0x000000000011fb64: jae 0x11fb67; ret; 
0x000000000011fb91: jae 0x11fb94; ret; 
0x000000000011fbc1: jae 0x11fbc4; ret; 
0x000000000011fbf1: jae 0x11fbf4; ret; 
0x000000000011fc21: jae 0x11fc24; ret; 
0x000000000011fc51: jae 0x11fc54; ret; 
0x000000000011fc84: jae 0x11fc87; ret; 
0x000000000011fcb4: jae 0x11fcb7; ret; 
0x000000000011fce1: jae 0x11fce4; ret; 
0x000000000011fd11: jae 0x11fd14; ret; 
0x000000000011fd44: jae 0x11fd47; ret; 
0x000000000011fd74: jae 0x11fd77; ret; 
0x000000000011fda4: jae 0x11fda7; ret; 
0x000000000011fdd1: jae 0x11fdd4; ret; 
0x000000000011fe01: jae 0x11fe04; ret; 
0x000000000011fe31: jae 0x11fe34; ret; 
0x000000000011fe61: jae 0x11fe64; ret; 
0x000000000011fe94: jae 0x11fe97; ret; 
0x000000000011fec1: jae 0x11fec4; ret; 
0x000000000011fef1: jae 0x11fef4; ret; 
0x000000000011ff24: jae 0x11ff27; ret; 
0x000000000011ff51: jae 0x11ff54; ret; 
0x000000000011ff84: jae 0x11ff87; ret; 
0x000000000011ffb4: jae 0x11ffb7; ret; 
0x000000000011ffe1: jae 0x11ffe4; ret; 
0x0000000000120011: jae 0x120014; ret; 
0x0000000000120041: jae 0x120044; ret; 
0x0000000000120081: jae 0x120084; ret; 
0x0000000000120171: jae 0x120174; ret; 
0x0000000000120241: jae 0x120244; ret; 
0x0000000000120271: jae 0x120274; ret; 
0x00000000001202a4: jae 0x1202a7; ret; 
0x00000000001202d1: jae 0x1202d4; ret; 
0x0000000000120754: jae 0x120757; ret; 
0x0000000000120781: jae 0x120784; ret; 
0x00000000001207b1: jae 0x1207b4; ret; 
0x00000000001207e4: jae 0x1207e7; ret; 
0x0000000000121cfc: jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000012ce57: jae 0x12ce68; cmp qword ptr [rax + 8], rdi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000013b90e: jae 0x13b923; mov eax, 0xffffffff; ret; 
0x000000000013c760: jae 0x13c76b; shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000146389: jae 0x146332; or al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000149dc9: jae 0x149deb; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000151a76: jae 0x151ac0; add esp, 0x10; pop r12; ret; 
0x0000000000157639: jae 0x157648; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000015f809: jae 0x15f7f0; mov eax, 1; ret; 
0x0000000000183b9a: jae 0x183b90; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000018408b: jae 0x1843f0; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184d89: jae 0x185020; xor eax, eax; vzeroupper; ret; 
0x000000000018a8ca: jae 0x18a5b0; cmp r8d, 1; ja 0x18a5a0; je 0x18a590; vzeroupper; ret; 
0x000000000018a7a6: jae 0x18a690; cmp r8d, 1; ja 0x18a680; je 0x18a670; vzeroupper; ret; 
0x000000000018b4d6: jae 0x18b3c0; cmp r8d, 1; ja 0x18b3b0; je 0x18b3a0; vzeroupper; ret; 
0x000000000018bd3d: jae 0x18bf60; xor eax, eax; vzeroupper; ret; 
0x0000000000042219: jae 0x42230; mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004253f: jae 0x42558; mov rax, qword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042c3d: jae 0x42c7f; xor eax, eax; pop rbx; ret; 
0x0000000000042c60: jae 0x42ca2; pop rbx; ret; 
0x00000000000433e1: jae 0x433e4; ret; 
0x00000000000439d1: jae 0x439d4; ret; 
0x0000000000054f07: jae 0x54f0c; xor eax, eax; ret; 
0x0000000000056432: jae 0x5647d; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000005b15d: jae 0x5b15b; dec dword ptr [rcx - 0x77]; ret; 
0x000000000005b3a0: jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000005b628: jae 0x5b60c; mov rax, r8; ret; 
0x0000000000085587: jae 0x85598; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000085711: jae 0x85720; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x00000000000860bd: jae 0x860d0; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086264: jae 0x86278; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000863fa: jae 0x86410; lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x0000000000088040: jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x000000000008df25: jae 0x8df38; lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x000000000008e025: jae 0x8e038; lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x0000000000093981: jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000009c1ec: jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009e848: jae 0x9e860; mov rax, qword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x00000000000bc042: jae 0xbc057; cmp dl, 1; ja 0xbc05e; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000d41c1: jae 0xd41c4; ret; 
0x00000000000d41f1: jae 0xd41f4; ret; 
0x00000000000d4aa4: jae 0xd4ab7; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x00000000000e2b51: jae 0xe2b54; ret; 
0x00000000000e2da1: jae 0xe2da4; ret; 
0x00000000000e3181: jae 0xe3184; ret; 
0x00000000000e4125: jae 0xe4127; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4131: jae 0xe4134; ret; 
0x00000000000e4381: jae 0xe4384; ret; 
0x00000000000e43b1: jae 0xe43b4; ret; 
0x00000000000e4411: jae 0xe4414; ret; 
0x00000000000e4441: jae 0xe4444; ret; 
0x00000000000e4471: jae 0xe4474; ret; 
0x00000000000e44a1: jae 0xe44a4; ret; 
0x00000000000e5112: jae 0xe515d; push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000ec3ec: jae 0xec3b4; or byte ptr [r9], r8b; mov eax, 1; ret; 
0x00000000001028af: jb 0x1028b9; setne al; movzx eax, al; neg eax; ret; 
0x000000000010d254: jb 0x10d1d6; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x000000000010fbfa: jb 0x10fbbe; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115f80: jb 0x115f83; mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x0000000000121c43: jb 0x121c58; mov qword ptr [rip + 0xca710], 2; ret; 
0x0000000000122057: jb 0x122061; seta al; movzx eax, al; neg eax; ret; 
0x000000000012310b: jb 0x12311d; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000123173: jb 0x123185; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000123a5b: jb 0x123a6d; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000123abb: jb 0x123acd; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000012765f: jb 0x127670; mov eax, 1; ret; 
0x000000000012fa4b: jb 0x12fa60; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000013b87e: jb 0x13b890; movzx eax, byte ptr [rdi + 1]; lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000013b948: jb 0x13b910; cmp eax, edx; jne 0x13b920; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x000000000013c4d3: jb 0x13c4bd; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000013c522: jb 0x13c4d5; add rcx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000001492a9: jb 0x1492cb; ret; 
0x00000000001492a3: jb 0x1492cd; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000015b1e5: jb 0x15b1d3; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000015d217: jb 0x15d218; cmp si, 3; ja 0x15d230; cmp dx, cx; sete al; ret; 
0x0000000000160da4: jb 0x160d85; mov qword ptr [rip + 0x8e0eb], r8; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x000000000017cada: jb 0x17cade; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000189b00: jb 0x1898e5; vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018a800: jb 0x18a415; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b530: jb 0x18b145; vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x000000000018b74a: jb 0x18b751; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018b72a: jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000018bc37: jb 0x18bc3b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018fafb: jb 0x18fb11; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018fb28: jb 0x18fb39; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000018fb3c: jb 0x18fb4a; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000018fb4d: jb 0x18fb5f; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000018fb62: jb 0x18fb68; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001901da: jb 0x1901ea; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901ed: jb 0x1901f9; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000190206: jb 0x190212; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000190219: jb 0x190221; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000190224: jb 0x19022e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000190231: jb 0x190235; mov byte ptr [rdi], cl; ret; 
0x00000000001904da: jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001904b5: jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000190aff: jb 0x190b03; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000482f7: jb 0x482d5; xor eax, eax; ret; 
0x000000000005b456: jb 0x5b380; cmp r10, rdi; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000860c5: jb 0x860e7; mov dword ptr [rcx], eax; ret; 
0x000000000008626c: jb 0x8628e; mov dword ptr [rcx], eax; ret; 
0x000000000008d30c: jb 0x8d340; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d76c: jb 0x8d7b0; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000094fdf: jb 0x94ff6; add byte ptr [rbp + 0x39], cl; ret 0xd977; 
0x00000000000993a2: jb 0x99380; mov byte ptr [r8 + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x0000000000099599: jb 0x99578; mov byte ptr [r8 + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000009c1e3: jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009ef22: jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000009ef63: jb 0x9ef6c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009f244: jb 0x9f256; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009f834: jb 0x9f846; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009faf4: jb 0x9fb06; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x00000000000b806e: jb 0xb7629; movdqu xmmword ptr [rdi + 0x20], xmm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b807d: jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98cd: jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8e5a: jb 0xb8e65; add byte ptr [rax], al; ret; 
0x00000000000bb32d: jb 0xbabc9; movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bbb5d: jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbc0a: jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000bbbef: jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bc049: jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000bdf84: jb 0xbdf8e; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000c6b42: jb 0xc6ae0; mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x00000000000e4f55: jb 0xe4fa0; cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x000000000010c6f2: jbe 0x10c754; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c73e: jbe 0x10c7a0; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d047: jbe 0x10d0a9; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d0d0: jbe 0x10d132; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000112d2b: jbe 0x112d48; cmp eax, -0x5f; je 0x112d38; neg eax; ret; 
0x0000000000112f7b: jbe 0x112f98; cmp eax, -0x5f; je 0x112f88; neg eax; ret; 
0x0000000000116eb6: jbe 0x116ea8; cmp al, 0x20; je 0x116ea8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000001183de: jbe 0x118454; or eax, 0x25894400; ja 0x11845b; or eax, 0x74db8500; or al, 0xf7; ret; 
0x0000000000119787: jbe 0x119720; mov rax, qword ptr [rip + 0xd26e0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000013484b: jbe 0x1347b9; xor eax, eax; pop rbx; ret; 
0x0000000000148750: jbe 0x148760; mov eax, 2; ret; 
0x00000000001498b7: jbe 0x149900; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000001524c3: jbe 0x15250d; add esp, 0x28; pop rbx; pop r12; ret; 
0x000000000015799e: jbe 0x1579b0; add dword ptr [rbx + 0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000015d237: jbe 0x15d240; ret; 
0x0000000000165e37: jbe 0x165e44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fc77: jbe 0x17fc84; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000001841f7: jbe 0x1843f0; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184231: jbe 0x1843f0; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000184737: jbe 0x184790; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184757: jbe 0x184790; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184777: jbe 0x184790; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184727: jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x0000000000188a87: jbe 0x188ae0; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188aa7: jbe 0x188ae0; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188ac7: jbe 0x188ae0; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188a67: jbe 0x188ae0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018b2b6: jbe 0x18b2b9; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018bd71: jbe 0x18bd8a; vpmovmskb eax, ymm2; sub eax, -1; jne 0x18bd80; vzeroupper; ret; 
0x000000000018bdf7: jbe 0x18bdca; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x000000000018be37: jbe 0x18be50; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x000000000018bf46: jbe 0x18bf5f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x18bd80; vzeroupper; ret; 
0x000000000018c1e7: jbe 0x18c240; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c207: jbe 0x18c240; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c227: jbe 0x18c240; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d7: jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x000000000018d407: jbe 0x18d480; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000002c9fd: jbe 0x2ca17; add al, ch; mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000328ae: jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000043b87: jbe 0x43ba0; mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043bd7: jbe 0x43bf0; mov rax, 0xfffffffffffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000005b335: jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000094e4d: jbe 0x94e50; ret; 
0x0000000000094e8d: jbe 0x94e90; ret; 
0x00000000000951fd: jbe 0x95200; ret; 
0x000000000009525d: jbe 0x95260; ret; 
0x000000000009552f: jbe 0x954d8; add rsp, 8; ret; 
0x000000000009f353: jbe 0x9f338; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000000a1fdd: jbe 0xa2001; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000abe97: jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abf3f: jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a6: jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b6: jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c6: jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d6: jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000b21f9: jbe 0xb21f1; ret 0xf10; 
0x00000000000b3e19: jbe 0xb3e11; ret 0xf10; 
0x00000000000ce28c: jbe 0xce2dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ce32e: jbe 0xce37f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ce11f: jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce386: jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce396: jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a6: jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b6: jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000d423b: jbe 0xd4240; ret; 
0x00000000000e4465: jbe 0xe4467; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x0000000000102a12: je 0x102a18; ret; 
0x0000000000102a07: je 0x102a48; mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x0000000000106fb4: je 0x106f5d; pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x0000000000106f5b: je 0x106fb6; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000010d129: je 0x10d134; mov eax, 0x1c; syscall; neg eax; ret; 
0x000000000010d8aa: je 0x10d8b0; mov eax, r9d; ret; 
0x0000000000111e6a: je 0x111e90; sub byte ptr [rcx + rcx*4 + 0x34], cl; and al, 0xe9; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000112d30: je 0x112d38; neg eax; ret; 
0x0000000000112f80: je 0x112f88; neg eax; ret; 
0x00000000001130ea: je 0x113112; mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x113100; ret; 
0x0000000000114c42: je 0x114c45; ret; 
0x0000000000115a8c: je 0x115ac8; call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x0000000000115ade: je 0x115af8; mov qword ptr [rip + 0xd9b59], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000116c87: je 0x116cb8; mov eax, 0x105; syscall; cmp rax, -0x1000; ja 0x116ca0; ret; 
0x0000000000116dae: je 0x116db4; mov qword ptr [rdx + 8], rax; test rax, rax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x0000000000116db7: je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x0000000000116eba: je 0x116ea8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000117370: je 0x11733f; mov r8d, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000117646: je 0x117653; add rax, 8; mov qword ptr [rip + 0xd813d], rax; mov rax, r8; ret; 
0x0000000000117676: je 0x117683; add rax, 8; mov qword ptr [rip + 0xd810d], rax; mov rax, r8; add rsp, 8; ret; 
0x00000000001183df: je 0x1183ee; add byte ptr [rcx + rcx*4 + 0x25], al; ja 0x11845b; or eax, 0x74db8500; or al, 0xf7; ret; 
0x00000000001183e6: je 0x1183f5; add byte ptr [rbp - 0x8f38b25], al; ret; 
0x000000000011870c: je 0x118714; mov dword ptr [rip + 0xd3c34], edi; ret; 
0x000000000011917f: je 0x119190; pop rbp; lea rax, [rip + 0xd6777]; pop r12; pop r13; ret; 
0x00000000001196f7: je 0x119700; pop rbx; ret; 
0x000000000011cc45: je 0x11cc38; mov byte ptr [rdx], 0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x000000000011d003: je 0x11d010; cmp rdi, rdx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x000000000011f12a: je 0x11f12d; ret; 
0x000000000011f7bb: je 0x11f7f4; mov eax, r8d; ret; 
0x000000000011f82a: je 0x11f858; mov eax, 0x149; syscall; cmp rax, -0x1000; ja 0x11f840; ret; 
0x000000000012126d: je 0x121270; ret; 
0x0000000000121ad9: je 0x121af0; movsxd rbx, ebx; mov qword ptr [rip + 0xca87b], rbx; pop rbx; ret; 
0x0000000000121f6f: je 0x121fe0; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x0000000000121fb0: je 0x121fe0; add eax, 1; mov word ptr [rdx], ax; ret; 
0x00000000001252f4: je 0x125308; pop rbx; pop rbp; pop r12; ret; 
0x000000000012b9e7: je 0x12ba48; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000012bcdf: je 0x12bd05; adc byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000012bd97: je 0x12bda0; mov eax, 7; ret; 
0x000000000012bdc2: je 0x12bdd0; pop rbx; ret; 
0x000000000012cedf: je 0x12cef0; ret; 
0x000000000012cf78: je 0x12cf8e; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000012d887: je 0x12d8a0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012d947: je 0x12d960; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012da07: je 0x12da20; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012dad3: je 0x12daf0; test eax, eax; lea rdx, [rip + 0x5e012]; lea rax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x000000000012e8c0: je 0x12e8d0; add rsp, 8; ret; 
0x000000000012ec70: je 0x12ec80; test rdx, rdx; jne 0x12ec60; sub rsp, 8; call 0x12e340; ret; 
0x0000000000134868: je 0x1347e6; mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x000000000013b3cb: je 0x13b3c0; pop rbx; ret; 
0x000000000013bcac: je 0x13bcc0; cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000013bced: je 0x13bd09; cmp edi, 5; mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000013bcc8: je 0x13bd0f; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013c329: je 0x13c338; test eax, eax; jne 0x13c348; mov eax, r8d; ret; 
0x000000000013f07a: je 0x13f028; cmp r11d, r9d; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x0000000000140cc0: je 0x140cc8; ret; 
0x0000000000141b46: je 0x141b50; add rsp, 8; ret; 
0x00000000001427ea: je 0x1427c9; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000145900: je 0x1458e8; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000146f9c: je 0x146fa0; ret; 
0x0000000000148042: je 0x148050; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148217: je 0x148220; xor eax, eax; ret; 
0x0000000000148299: je 0x1482b0; cmp eax, 1; je 0x1482f0; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x000000000014829e: je 0x1482f0; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000001482fa: je 0x148310; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000149305: je 0x149318; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000014a0b2: je 0x14a0c0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014afc2: je 0x14afd0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b082: je 0x14b090; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b182: je 0x14b190; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001532c2: je 0x153245; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000153243: je 0x153250; pop rbx; ret; 
0x00000000001532f6: je 0x1532fb; mov r8, rax; mov rax, r8; pop rbx; ret; 
0x00000000001533b6: je 0x1533bf; lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153486: je 0x15348f; lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153556: je 0x15355f; lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x000000000015376f: je 0x153780; pop rbx; pop rbp; pop r12; ret; 
0x0000000000155bde: je 0x155bf0; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000155df3: je 0x155e10; cmp eax, 2; sete al; movzx eax, al; ret; 
0x0000000000155f45: je 0x155f6b; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000156035: je 0x15605b; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000156125: je 0x15614b; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000156215: je 0x15623b; or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000015662a: je 0x156650; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000001571be: je 0x1571d0; xor r8d, r8d; test eax, eax; je 0x1571f0; mov eax, r8d; ret; 
0x00000000001571c5: je 0x1571f0; mov eax, r8d; ret; 
0x000000000015720e: je 0x157220; xor r8d, r8d; test eax, eax; je 0x157240; mov eax, r8d; ret; 
0x0000000000157215: je 0x157240; mov eax, r8d; ret; 
0x000000000015776c: je 0x1577d0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000015796e: je 0x15797d; call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x0000000000178ab5: je 0x178660; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000017ec75: je 0x17ec78; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fc5a: je 0x17fc5d; xchg edx, eax; sub eax, edx; ret; 
0x00000000001838c0: je 0x183898; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000183a18: je 0x1839f8; xor eax, eax; ret; 
0x0000000000184853: je 0x184870; tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000001849d1: je 0x184a32; and ch, al; std; xlatb; ret; 
0x0000000000184abf: je 0x184b20; and ch, al; std; xlatb; ret; 
0x0000000000184c58: je 0x184be0; bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x0000000000184c0a: je 0x184be0; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000184dc1: je 0x184dda; vpmovmskb eax, ymm2; sub eax, -1; jne 0x184dd0; vzeroupper; ret; 
0x0000000000184e15: je 0x184e20; sbb eax, eax; or eax, 1; ret; 
0x0000000000184eb9: je 0x184e8c; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x0000000000184ef7: je 0x184f10; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x0000000000185006: je 0x18501f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x184dd0; vzeroupper; ret; 
0x0000000000188381: je 0x1883a0; tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000018867f: je 0x188634; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000001886a4: je 0x1886c0; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000001890df: je 0x189160; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189532: je 0x18958a; and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x00000000001897ff: je 0x189940; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189bea: je 0x1899e0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189e7f: je 0x189f00; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189ff5: je 0x18a04d; and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x000000000018a8da: je 0x18a590; vzeroupper; ret; 
0x000000000018a7b6: je 0x18a670; vzeroupper; ret; 
0x000000000018ab6f: je 0x18abf0; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000018ad02: je 0x18ad5a; and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x000000000018b61a: je 0x18b2c0; mov rax, rdi; vzeroupper; ret; 
0x000000000018b4e6: je 0x18b3a0; vzeroupper; ret; 
0x000000000018c2f7: je 0x18c301; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000018c767: je 0x18c771; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000018cfea: je 0x18cf84; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018d01f: je 0x18d030; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018e8e7: je 0x18e8eb; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001905cc: je 0x1905e5; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000192aa5: je 0x192ac0; mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192be0; ret; 
0x0000000000192ad3: je 0x192af0; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x0000000000196d7f: je 0x196da5; adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000019726a: je 0x19727c; movss xmm0, dword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x000000000019913e: je 0x199128; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000002423c: je 0x24328; add rsp, 0x98; ret; 
0x0000000000026f60: je 0x26f68; ret; 
0x000000000002fd86: je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x000000000002fd8b: je 0x2fd90; ret; 
0x000000000002fdcf: je 0x2fdaf; call 0x15fd10; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000002fdad: je 0x2fdc8; pop rbx; ret; 
0x0000000000033df2: je 0x33dff; and esi, dword ptr [rdi + 0x10]; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000000388fe: je 0x38906; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000041d0b: je 0x41c58; ret; 
0x0000000000041f89: je 0x41f90; ret; 
0x0000000000042359: je 0x42360; ret; 
0x00000000000440cb: je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x0000000000047368: je 0x473a8; xor eax, eax; cmp byte ptr [rdi], 0; jne 0x47378; pop rbx; ret; 
0x0000000000047464: je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000047548: je 0x47560; lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x0000000000047575: je 0x47590; mov rax, qword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000004823a: je 0x48260; adc byte ptr [rax - 0x77], cl; jl 0x48265; or al, ch; cdq; ret; 
0x000000000004830d: je 0x482d0; mov eax, 0xffffffff; ret; 
0x00000000000482ef: je 0x48330; add rdi, rax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x0000000000052944: je 0x52953; mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x0000000000052ac7: je 0x52a88; add dword ptr [rax], eax; add eax, 0xfd8ee800; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000054307: je 0x5430f; cmp byte ptr [rax - 1], 0x2f; jne 0x54300; pop rbx; ret; 
0x00000000000555fd: je 0x55607; mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000055845: je 0x5584f; mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x0000000000055be5: je 0x55bd0; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000058975: je 0x5899b; or byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x39], cl; ret; 
0x000000000005b32c: je 0x5b344; sub rax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x000000000005b517: je 0x5b58d; jns 0x5b4e1; or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000005b518: je 0x5b593; mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000005ea1c: je 0x5ea30; movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x5ea08; mov eax, r8d; ret; 
0x0000000000062f11: je 0x62f20; mov eax, r8d; ret; 
0x0000000000062f2d: je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000761d1: je 0x761d7; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000082ac7: je 0x82ad8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000831af: je 0x831f1; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000843e2: je 0x843f0; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008561f: je 0x8565a; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000086efc: je 0x86f46; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000874a0: je 0x874a8; ret; 
0x0000000000087593: je 0x8754d; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000087500: je 0x8755d; pop rbp; pop r12; ret; 
0x0000000000087d1e: je 0x87d23; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7a: je 0x87d7f; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000087de7: je 0x87df8; cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x0000000000089df8: je 0x89db6; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000089de2: je 0x89dfa; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008ab9c: je 0x8abe6; add esp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000008aeaa: je 0x8aeb8; mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x8aeb8; ret; 
0x000000000008c92f: je 0x8c971; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000008d2f5: je 0x8d300; ret; 
0x000000000008d2ec: je 0x8d320; mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d755: je 0x8d760; ret; 
0x000000000008d74c: je 0x8d780; mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x000000000008e593: je 0x8e5a0; pop rbx; ret; 
0x0000000000091e89: je 0x91e90; ret; 
0x000000000009278b: je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000092949: je 0x9294e; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000092a17: je 0x92a28; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x0000000000093543: je 0x93555; mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x0000000000093978: je 0x93990; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000009460d: je 0x94610; ret; 
0x0000000000094671: je 0x94674; ret; 
0x0000000000094d27: je 0x94d38; test esi, esi; jne 0x94d40; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000094d83: je 0x94d90; or eax, 2; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000095180: je 0x95185; pop rbx; pop rbp; ret; 
0x00000000000958fc: je 0x95910; mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000098f4c: je 0x98f53; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000993d6: je 0x993fc; or al, ch; ret 0xffb1; 
0x000000000009a9a9: je 0x9a9cf; or cl, ch; ret 0xfffe; 
0x000000000009e1fc: je 0x9e200; ret; 
0x000000000009e2f7: je 0x9e350; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f130: je 0x9f14b; test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000009f31e: je 0x9f32e; cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x000000000009f323: je 0x9f330; movsx eax, dl; ret; 
0x000000000009f416: je 0x9f420; pop rbx; pop rbp; pop r12; ret; 
0x000000000009f75b: je 0x9f772; and dh, 2; lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x000000000009f89a: je 0x9f8aa; lea rax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000a00d7: je 0xa00e5; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x00000000000a0466: je 0xa0435; lea rax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a0476: je 0xa0435; ret; 
0x00000000000a04b7: je 0xa04d0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a0583: je 0xa05a0; test eax, eax; lea rdx, [rip + 0xeb572]; lea rax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x00000000000a0617: je 0xa0630; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a0834: je 0xa084b; and ch, 2; lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000a08d4: je 0xa08eb; and ch, 2; lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0987: je 0xa09a0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a15ee: je 0xa15fe; xor byte ptr [rdx + 0xd], 0x2a; cmp rcx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000a15f8: je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000a2056: je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a2891: je 0xa2863; cmp al, 0x3d; mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000a326b: je 0xa326e; add dword ptr [rax + 0x38], eax; je 0xa3282; add eax, 0x3949eb74; ret 0x1674; 
0x00000000000a3270: je 0xa3282; add eax, 0x3949eb74; ret 0x1674; 
0x00000000000a8617: je 0xa8628; movzx esi, byte ptr [rcx]; test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000a8743: je 0xa8720; mov byte ptr [r11], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000a877b: je 0xa8781; cmp eax, esi; jne 0xa8770; mov rax, r8; ret; 
0x00000000000a87af: je 0xa87b5; cmp eax, edx; jne 0xa87a0; mov rax, r8; ret; 
0x00000000000a881a: je 0xa8810; ret; 
0x00000000000a8852: je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a8856: je 0xa8848; ret; 
0x00000000000a88a4: je 0xa8888; mov rax, r8; ret; 
0x00000000000a88ce: je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000aa3ed: je 0xaa400; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000aa619: je 0xaa4b5; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000ac0ac: je 0xac0fd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac14e: je 0xac19f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac258: je 0xac270; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac39a: je 0xac3eb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac602: je 0xac613; pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac630: je 0xac681; and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000000ac770: je 0xac6f0; bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000ac71c: je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x00000000000b16f5: je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000b1914: je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1ba4: je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b19ae: je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000b1bf0: je 0xb1bd2; pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000b1bf8: je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000b1c9d: je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c40: je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e64: je 0xb1e73; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df4: je 0xb1e73; sar rdx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000b1e6c: je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1dfc: je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000b718d: je 0xb71d5; adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000b885a: je 0xb88a2; adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000ba75a: je 0xba7a2; adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000bbb54: je 0xbbb61; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbc97: je 0xbbcb0; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000000bc1ad: je 0xbc0d2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000bc155: je 0xbc0d2; mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x00000000000bc6f4: je 0xbc700; cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x00000000000bc6f9: je 0xbc708; xor eax, eax; ret; 
0x00000000000bc744: je 0xbc728; ret; 
0x00000000000bc7a2: je 0xbc780; ret; 
0x00000000000bc8c7: je 0xbc8b0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bcaa6: je 0xbca90; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bcd76: je 0xbcd45; lea rax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000bcd86: je 0xbcd45; ret; 
0x00000000000bd20c: je 0xbd217; mov edx, dword ptr [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000000bdf80: je 0xbdf98; test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bdfb9: je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000000c6a9d: je 0xc6aa3; mov eax, r8d; ret; 
0x00000000000cba95: je 0xcbabb; or byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x39], cl; ret; 
0x00000000000ce087: je 0xce09a; nop dword ptr [rax]; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cef29: je 0xcef40; mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000cef53: je 0xcef70; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x00000000000cef89: je 0xcefa0; mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefb3: je 0xcefd0; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cefe9: je 0xcf000; mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf013: je 0xcf020; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf039: je 0xcf050; mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000cf063: je 0xcf070; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000cf153: je 0xcf160; xor r9d, r9d; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000cf566: je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf584: je 0xcf4c5; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf616: je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf624: je 0xcf680; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf79c: je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf730: je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cfac9: je 0xcfae0; mov cl, dl; and cl, 0xf; je 0xcfaf0; ret; 
0x00000000000cfad0: je 0xcfaf0; ret; 
0x00000000000cfae5: je 0xcfb00; add rax, 2; ret; 
0x00000000000d0b12: je 0xd0b38; adc byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000d0d03: je 0xd0d29; adc byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000000d7fcd: je 0xd7ff3; or al, ch; cmp edx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000dcfa7: je 0xdcfb0; xor eax, eax; ret; 
0x00000000000dd4b7: je 0xdd4dd; and byte ptr [rax - 0x7d], cl; ret; 
0x00000000000dd797: je 0xdd7c4; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e4fbc: je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e509a: je 0xe50e8; cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e50c8: je 0xe50e8; cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e519f: je 0xe51e8; jle 0xe51b0; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000e51b9: je 0xe51ea; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51d4: je 0xe51ea; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x00000000000e5185: je 0xe51ea; xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x00000000000e81a1: je 0xe81a7; cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c2: je 0xe81a7; cmp al, 0x3f; jne 0xe81f9; mov eax, 1; ret; 
0x00000000000ec4a3: je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ec43a: je 0xec480; mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ecaef: je 0xecb15; sbb al, 0x89; ret 0x8348; 
0x00000000000edf2d: je 0xedf68; ret; 
0x00000000000ee2dc: je 0xee31b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ee443: je 0xee3bd; ret; 
0x00000000000ee462: je 0xee3f7; pop rbx; ret; 
0x00000000000ee45d: je 0xee417; and ebx, 8; je 0xee3f7; pop rbx; ret; 
0x00000000000f1f90: je 0xf1fa0; cmp eax, 3; je 0xf1ff0; xor eax, eax; pop rbp; ret; 
0x00000000000f1f95: je 0xf1ff0; xor eax, eax; pop rbp; ret; 
0x00000000000f3f05: je 0xf3f2b; adc al, ch; ret; 
0x00000000000f57d8: je 0xf57a7; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ff61f: je 0xff5f9; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000ff6ad: je 0xff6d3; adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x0000000000102a7e: jg 0x102a94; add byte ptr [rax], al; add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x000000000010c6f7: jg 0x10c771; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c74b: jg 0x10c7c5; ret; 
0x0000000000112a56: jg 0x112aa0; add esp, 0x40; pop r12; ret; 
0x0000000000117c13: jg 0x117c16; ret; 
0x000000000013a01a: jg 0x13a01e; add ecx, dword ptr [rdi]; test byte ptr [rbp - 0x7d000000], cl; ret 0x8103; 
0x000000000013f07f: jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x000000000014de06: jg 0x14de48; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14de10; ret; 
0x0000000000154506: jg 0x154548; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154510; ret; 
0x0000000000157d1a: jg 0x157d34; call 0x830f0; add rsp, 8; ret; 
0x000000000015a519: jg 0x15a507; dec dword ptr [rax - 0x77]; ret; 
0x00000000001680c9: jg 0x16811a; ret; 
0x000000000016814f: jg 0x168198; ret; 
0x00000000001682c9: jg 0x16831a; ret 0x894c; 
0x000000000016834f: jg 0x168398; ret 0x894c; 
0x000000000016aaa9: jg 0x16aafa; ret; 
0x000000000016ab2f: jg 0x16ab78; ret; 
0x000000000016aca9: jg 0x16acfa; ret 0x894c; 
0x000000000016ad2f: jg 0x16ad78; ret 0x894c; 
0x000000000016d0b8: jg 0x16d101; loope 0x16d0af; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d12f: jg 0x16d178; ret 0xff2; 
0x000000000016d1bf: jg 0x16d208; ret; 
0x000000000016d268: jg 0x16d2b1; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d2e8: jg 0x16d331; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d368: jg 0x16d3b1; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d3e8: jg 0x16d431; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d668: jg 0x16d6b1; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6e8: jg 0x16d731; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d778: jg 0x16d7c1; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d7f8: jg 0x16d841; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d86c: jg 0x16d875; ret; 
0x000000000016d8c6: jg 0x16d8d7; ret; 
0x000000000016d8c1: jg 0x16d90a; psllq mm1, qword ptr [rdi]; jg 0x16d8d7; ret; 
0x000000000016d936: jg 0x16d947; ret; 
0x000000000016d9a6: jg 0x16d9b7; ret; 
0x000000000016d993: jg 0x16d9dc; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d9a1: jg 0x16d9ea; or eax, 0xf7f0ff3; ret; 
0x000000000016da16: jg 0x16da27; ret; 
0x000000000016da11: jg 0x16da5a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000016da86: jg 0x16da97; ret; 
0x000000000016da81: jg 0x16daca; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000016daf6: jg 0x16db07; ret; 
0x000000000016daf1: jg 0x16db3a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000016db66: jg 0x16db77; ret; 
0x000000000016db61: jg 0x16dbaa; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000016dbd6: jg 0x16dbe7; ret; 
0x000000000016dbd1: jg 0x16dc1a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000016dc46: jg 0x16dc57; ret; 
0x000000000016dcb6: jg 0x16dcc7; ret; 
0x000000000016dd26: jg 0x16dd37; ret; 
0x000000000016dd13: jg 0x16dd5c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd21: jg 0x16dd6a; add eax, 0xf7f0ff3; ret; 
0x000000000016dd96: jg 0x16dda7; ret; 
0x000000000016dd91: jg 0x16ddda; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000016de06: jg 0x16de17; ret; 
0x000000000016de01: jg 0x16de4a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000016de76: jg 0x16de87; ret; 
0x000000000016de71: jg 0x16deba; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000016dee6: jg 0x16def7; ret; 
0x000000000016dee1: jg 0x16df2a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000016fbe8: jg 0x16fc31; loope 0x16fbdf; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016fc5f: jg 0x16fca8; ret 0xff2; 
0x000000000016fcef: jg 0x16fd38; ret; 
0x000000000016fd98: jg 0x16fde1; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016fe18: jg 0x16fe61; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016fe98: jg 0x16fee1; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016ff18: jg 0x16ff61; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000170198: jg 0x1701e1; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000170218: jg 0x170261; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000001702a8: jg 0x1702f1; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000170328: jg 0x170371; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000017039c: jg 0x1703a5; ret; 
0x00000000001703f6: jg 0x170407; ret; 
0x00000000001703f1: jg 0x17043a; psllq mm1, qword ptr [rdi]; jg 0x170407; ret; 
0x0000000000170466: jg 0x170477; ret; 
0x00000000001704d6: jg 0x1704e7; ret; 
0x00000000001704c3: jg 0x17050c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000001704d1: jg 0x17051a; or eax, 0xf7f0ff3; ret; 
0x0000000000170546: jg 0x170557; ret; 
0x0000000000170541: jg 0x17058a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000001705b6: jg 0x1705c7; ret; 
0x00000000001705b1: jg 0x1705fa; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000170626: jg 0x170637; ret; 
0x0000000000170621: jg 0x17066a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000170696: jg 0x1706a7; ret; 
0x0000000000170691: jg 0x1706da; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000170706: jg 0x170717; ret; 
0x0000000000170701: jg 0x17074a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000170776: jg 0x170787; ret; 
0x00000000001707e6: jg 0x1707f7; ret; 
0x0000000000170856: jg 0x170867; ret; 
0x0000000000170843: jg 0x17088c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000170851: jg 0x17089a; add eax, 0xf7f0ff3; ret; 
0x00000000001708c6: jg 0x1708d7; ret; 
0x00000000001708c1: jg 0x17090a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000170936: jg 0x170947; ret; 
0x0000000000170931: jg 0x17097a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000001709a6: jg 0x1709b7; ret; 
0x00000000001709a1: jg 0x1709ea; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000170a16: jg 0x170a27; ret; 
0x0000000000170a11: jg 0x170a5a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000183b04: jg 0x183b14; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183bb0; ret; 
0x00000000001891cc: jg 0x1891e5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x00000000001891ec: jg 0x189205; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x00000000001899ac: jg 0x1899c5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x00000000001899cc: jg 0x1899e5; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000189a6d: jg 0x189a86; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189a8d: jg 0x189aa6; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189aae: jg 0x189ac7; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x0000000000189b09: jg 0x189b6b; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x0000000000189f6c: jg 0x189f85; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000189f8c: jg 0x189fa5; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018a2ce: jg 0x18a2d1; jne 0x18a700; vzeroupper; ret; 
0x000000000018a47c: jg 0x18a480; jne 0x18a700; vzeroupper; ret; 
0x000000000018a4a0: jg 0x18a4a5; jne 0x18a700; vzeroupper; ret; 
0x000000000018a4ba: jg 0x18a4c0; jne 0x18a700; vzeroupper; ret; 
0x000000000018a61d: jg 0x18a636; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018a63d: jg 0x18a656; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018a65e: jg 0x18a677; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x000000000018a6c2: jg 0x18a6cb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018a809: jg 0x18a86b; vzeroupper; ret; 
0x000000000018a7f9: jg 0x18a872; sub r8, 0x20; jb 0x18a415; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018ac7c: jg 0x18ac95; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018ac9c: jg 0x18acb5; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018afe6: jg 0x18afe9; jne 0x18b430; vzeroupper; ret; 
0x000000000018b1b0: jg 0x18b1b4; jne 0x18b430; vzeroupper; ret; 
0x000000000018b1d4: jg 0x18b1d9; jne 0x18b430; vzeroupper; ret; 
0x000000000018b1ee: jg 0x18b1f4; jne 0x18b430; vzeroupper; ret; 
0x000000000018b34d: jg 0x18b366; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018b36d: jg 0x18b386; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018b38e: jg 0x18b3a7; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018b3f2: jg 0x18b3fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b539: jg 0x18b59b; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x000000000018b697: jg 0x18b6a0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018b703: jg 0x18b70c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018b75e: jg 0x18b767; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018b82a: jg 0x18b833; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b8ef: jg 0x18b914; vzeroupper; ret; 
0x000000000018b8e9: jg 0x18b92c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018b8e4: jg 0x18b95f; rol ch, 0x7e; jg 0x18b92c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018b996: jg 0x18b99b; vzeroupper; ret; 
0x000000000018b991: jg 0x18b9f3; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018ba22: jg 0x18ba47; vzeroupper; ret; 
0x000000000018ba1c: jg 0x18ba5f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018ba17: jg 0x18ba92; rol ch, 0x7e; jg 0x18ba5f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bab2: jg 0x18bab7; vzeroupper; ret; 
0x000000000018baad: jg 0x18bb0f; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018bb28: jg 0x18bb31; vzeroupper; ret; 
0x000000000018bb88: jg 0x18bb91; vzeroupper; ret; 
0x000000000018bba2: jg 0x18bbab; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018bc47: jg 0x18bc50; vzeroupper; ret; 
0x000000000018fae4: jg 0x18faed; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018fb08: jg 0x18fb11; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018fb1c: jg 0x18fb25; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018ff8e: jg 0x18ff88; ret; 
0x00000000001901fb: jg 0x190204; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000001901f1: jg 0x19020a; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000190420: jg 0x190429; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000019048c: jg 0x190495; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000001904ee: jg 0x1904f7; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000190506: jg 0x19050f; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000001905fc: jg 0x190605; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x00000000001906ea: jg 0x19070f; vzeroupper; ret; 
0x00000000001906e3: jg 0x190726; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000001907aa: jg 0x1907af; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000001907b0: jg 0x1907b5; vzeroupper; ret; 
0x0000000000190875: jg 0x19089a; vzeroupper; ret; 
0x000000000019086e: jg 0x1908b1; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190934: jg 0x190939; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019093a: jg 0x19093f; vzeroupper; ret; 
0x00000000001909b9: jg 0x1909c2; vzeroupper; ret; 
0x0000000000190a25: jg 0x190a2e; vzeroupper; ret; 
0x0000000000190a41: jg 0x190a4a; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000190b0f: jg 0x190b18; vzeroupper; ret; 
0x0000000000190b1d: jg 0x190b26; vzeroupper; ret; 
0x0000000000192be5: jg 0x192bf0; neg eax; ret; 
0x0000000000193173: jg 0x193175; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000019587d: jg 0x19587f; add byte ptr [rdi], cl; test byte ptr [rdx], bh; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xc148; 
0x0000000000195b07: jg 0x195b09; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000196545: jg 0x196547; add byte ptr [rdi], cl; test bh, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000001990ad: jg 0x199041; call 0xffffffff8038a0b3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000041ba4: jg 0x41ba6; add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x0000000000041d08: jg 0x41d13; bnd je 0x41c58; ret; 
0x0000000000041ebd: jg 0x41f25; movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041edd: jg 0x41f45; movq rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000423ba: jg 0x4233c; shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x0000000000042357: jg 0x42359; je 0x42360; ret; 
0x0000000000042447: jg 0x423c9; shl eax, 0x17; or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000424be: jg 0x42440; lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000425f4: jg 0x4263e; sub eax, edx; shr rax, 0x3f; ret; 
0x000000000004340a: jg 0x4340c; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x00000000000440c7: jg 0x440e0; test edi, edi; je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x0000000000047c9c: jg 0x47c27; adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x0000000000057bc4: jg 0x57c3b; sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057c57: jg 0x57c59; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x0000000000075566: jg 0x75591; fidivr dword ptr [rcx]; ret 0x830f; 
0x000000000007bad7: jg 0x7bae8; test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000007bc61: jg 0x7bc8c; fidivr dword ptr [rcx]; ret 0x820f; 
0x000000000008ce5c: jg 0x8cde1; inc byte ptr [rdx]; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x0000000000094cca: jg 0x94cf4; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x00000000000b6f56: jg 0xb6f5f; ret; 
0x00000000000b6f66: jg 0xb6f6f; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6f7a: jg 0xb6f83; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f99: jg 0xb6fa2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b6fa9: jg 0xb6fb2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b6fb9: jg 0xb6fc2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fda: jg 0xb6fe3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6ffa: jg 0xb7003; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b701a: jg 0xb7023; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b703a: jg 0xb7043; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b705e: jg 0xb7067; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b707d: jg 0xb7086; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b709d: jg 0xb70a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b70bb: jg 0xb70c4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b70db: jg 0xb70e4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70fb: jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b711b: jg 0xb7124; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b76c8: jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000b76ec: jg 0xb76f0; jne 0xb7f80; ret; 
0x00000000000b770f: jg 0xb7714; jne 0xb7f80; ret; 
0x00000000000b772a: jg 0xb7730; jne 0xb7f80; ret; 
0x00000000000b774d: jg 0xb7754; jne 0xb7f80; ret; 
0x00000000000b7772: jg 0xb777a; jne 0xb7f80; ret; 
0x00000000000b7790: jg 0xb7799; jne 0xb7f80; ret; 
0x00000000000b77ac: jg 0xb77b6; jne 0xb7f80; ret; 
0x00000000000b77cf: jg 0xb77da; jne 0xb7f80; ret; 
0x00000000000b77f4: jg 0xb7800; jne 0xb7f80; ret; 
0x00000000000b7812: jg 0xb781f; jne 0xb7f80; ret; 
0x00000000000b7832: jg 0xb7840; jne 0xb7f80; ret; 
0x00000000000b7854: jg 0xb7863; jne 0xb7f80; ret; 
0x00000000000b7874: jg 0xb7884; jne 0xb7f80; ret; 
0x00000000000b7894: jg 0xb78a5; jne 0xb7f80; ret; 
0x00000000000b78a6: jg 0xb78af; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b78ae: jg 0xb78c0; jne 0xb7f80; ret; 
0x00000000000b78c6: jg 0xb78cf; mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b78d1: jg 0xb78e4; jne 0xb7f80; ret; 
0x00000000000b78ea: jg 0xb78f3; mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b78f6: jg 0xb790a; jne 0xb7f80; ret; 
0x00000000000b7909: jg 0xb7912; mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b7914: jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b7929: jg 0xb7932; mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b7934: jg 0xb794a; jne 0xb7f80; ret; 
0x00000000000b7957: jg 0xb796e; jne 0xb7f80; ret; 
0x00000000000b796a: jg 0xb7973; mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b7976: jg 0xb798e; jne 0xb7f80; ret; 
0x00000000000b798a: jg 0xb7993; mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b7996: jg 0xb79af; jne 0xb7f80; ret; 
0x00000000000b79aa: jg 0xb79b3; mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b79b6: jg 0xb79d0; jne 0xb7f80; ret; 
0x00000000000b79d9: jg 0xb79f4; jne 0xb7f80; ret; 
0x00000000000b7a0e: jg 0xb7a2a; jne 0xb7f80; ret; 
0x00000000000b7a3c: jg 0xb7a59; jne 0xb7f80; ret; 
0x00000000000b7a6c: jg 0xb7a8a; jne 0xb7f80; ret; 
0x00000000000b7a8b: jg 0xb7a94; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b7a98: jg 0xb7ab7; jne 0xb7f80; ret; 
0x00000000000b7abb: jg 0xb7ac4; movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b7ac8: jg 0xb7ae8; jne 0xb7f80; ret; 
0x00000000000b7a8f: jg 0xb7ae8; or eax, 0x1de88349; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b7aeb: jg 0xb7af4; movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b7af8: jg 0xb7b19; jne 0xb7f80; ret; 
0x00000000000b7aef: jg 0xb7b48; cmovns eax, dword ptr [rbx - 0x72b7e018]; jg 0xb7b19; jne 0xb7f80; ret; 
0x00000000000b7b28: jg 0xb7b4a; jne 0xb7f80; ret; 
0x00000000000b7c46: jg 0xb7c4f; ret; 
0x00000000000b7c59: jg 0xb7c62; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b7c6a: jg 0xb7c73; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b7c89: jg 0xb7c92; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7c99: jg 0xb7ca2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b7cac: jg 0xb7cb5; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7cca: jg 0xb7cd3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b7cea: jg 0xb7cf3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7d0a: jg 0xb7d13; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b7d2d: jg 0xb7d36; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7d4e: jg 0xb7d57; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b7d6d: jg 0xb7d76; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7d8d: jg 0xb7d96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7dab: jg 0xb7db4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7dcb: jg 0xb7dd4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7deb: jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7e0b: jg 0xb7e14; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b7e2e: jg 0xb7e37; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b7f42: jg 0xb7f4b; ret; 
0x00000000000b8086: jg 0xb80b8; ret; 
0x00000000000b8606: jg 0xb860f; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8616: jg 0xb861f; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b862a: jg 0xb8633; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b8649: jg 0xb8652; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b8669: jg 0xb8672; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b8689: jg 0xb8692; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b86aa: jg 0xb86b3; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b86ca: jg 0xb86d3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b86ea: jg 0xb86f3; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b870a: jg 0xb8713; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b872e: jg 0xb8737; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b874d: jg 0xb8756; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b876d: jg 0xb8776; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b878b: jg 0xb8794; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b87ab: jg 0xb87b4; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b87cb: jg 0xb87d4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b878f: jg 0xb87e8; or eax, 0x1c478d48; ret; 
0x00000000000b87eb: jg 0xb87f4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b8dab: jg 0xb8dae; jne 0xb97d0; ret; 
0x00000000000b8dd0: jg 0xb8dd4; jne 0xb97d0; ret; 
0x00000000000b8df3: jg 0xb8df8; jne 0xb97d0; ret; 
0x00000000000b8e0e: jg 0xb8e14; jne 0xb97d0; ret; 
0x00000000000b8e31: jg 0xb8e38; jne 0xb97d0; ret; 
0x00000000000b8e56: jg 0xb8e5e; jne 0xb97d0; ret; 
0x00000000000b8e74: jg 0xb8e7d; jne 0xb97d0; ret; 
0x00000000000b8e90: jg 0xb8e9a; jne 0xb97d0; ret; 
0x00000000000b8eb3: jg 0xb8ebe; jne 0xb97d0; ret; 
0x00000000000b8ed8: jg 0xb8ee4; jne 0xb97d0; ret; 
0x00000000000b8f06: jg 0xb8f13; jne 0xb97d0; ret; 
0x00000000000b8f26: jg 0xb8f34; jne 0xb97d0; ret; 
0x00000000000b8f48: jg 0xb8f57; jne 0xb97d0; ret; 
0x00000000000b8f78: jg 0xb8f88; jne 0xb97d0; ret; 
0x00000000000b8fa8: jg 0xb8fb9; jne 0xb97d0; ret; 
0x00000000000b8fc6: jg 0xb8fcf; lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b8fd2: jg 0xb8fe4; jne 0xb97d0; ret; 
0x00000000000b8ff5: jg 0xb9008; jne 0xb97d0; ret; 
0x00000000000b901a: jg 0xb902e; jne 0xb97d0; ret; 
0x00000000000b9048: jg 0xb905d; jne 0xb97d0; ret; 
0x00000000000b9078: jg 0xb908e; jne 0xb97d0; ret; 
0x00000000000b90ab: jg 0xb90c2; jne 0xb97d0; ret; 
0x00000000000b90da: jg 0xb90f2; jne 0xb97d0; ret; 
0x00000000000b910a: jg 0xb9123; jne 0xb97d0; ret; 
0x00000000000b913a: jg 0xb9154; jne 0xb97d0; ret; 
0x00000000000b916d: jg 0xb9188; jne 0xb97d0; ret; 
0x00000000000b91a2: jg 0xb91be; jne 0xb97d0; ret; 
0x00000000000b91d0: jg 0xb91ed; jne 0xb97d0; ret; 
0x00000000000b9200: jg 0xb921e; jne 0xb97d0; ret; 
0x00000000000b922c: jg 0xb924b; jne 0xb97d0; ret; 
0x00000000000b921f: jg 0xb9278; or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b925c: jg 0xb927c; jne 0xb97d0; ret; 
0x00000000000b928c: jg 0xb92ad; jne 0xb97d0; ret; 
0x00000000000b92bc: jg 0xb92de; jne 0xb97d0; ret; 
0x00000000000b9466: jg 0xb946f; lea rax, [rdi + 0x10]; ret; 
0x00000000000b9479: jg 0xb9482; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b949a: jg 0xb94a3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b9: jg 0xb94c2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d9: jg 0xb94e2; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b94fc: jg 0xb9505; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b951a: jg 0xb9523; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b953a: jg 0xb9543; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b955a: jg 0xb9563; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b957d: jg 0xb9586; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959e: jg 0xb95a7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bd: jg 0xb95c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95dd: jg 0xb95e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95fb: jg 0xb9604; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b961b: jg 0xb9624; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b963b: jg 0xb9644; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b95ff: jg 0xb9658; or eax, 0x1d478d48; ret; 
0x00000000000b965b: jg 0xb9664; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b967e: jg 0xb9687; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9792: jg 0xb979b; ret; 
0x00000000000b98d6: jg 0xb9908; lea rax, [rdi + 0x40]; ret; 
0x00000000000ba266: jg 0xba26f; ret; 
0x00000000000ba276: jg 0xba27f; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000ba28a: jg 0xba293; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000ba2a9: jg 0xba2b2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000ba2b9: jg 0xba2c2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000ba2c9: jg 0xba2d2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000ba2ea: jg 0xba2f3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000ba30a: jg 0xba313; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000ba32a: jg 0xba333; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000ba34a: jg 0xba353; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000ba36e: jg 0xba377; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000ba38d: jg 0xba396; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000ba3ad: jg 0xba3b6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000ba3cb: jg 0xba3d4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000ba3eb: jg 0xba3f4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000ba40b: jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000ba42b: jg 0xba434; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bad56: jg 0xbad5f; ret; 
0x00000000000bad66: jg 0xbad6f; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000bad7a: jg 0xbad83; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bad99: jg 0xbada2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000bada9: jg 0xbadb2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000badb9: jg 0xbadc2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000badda: jg 0xbade3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000badfa: jg 0xbae03; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000bae1a: jg 0xbae23; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bae3a: jg 0xbae43; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000bae5e: jg 0xbae67; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bae7d: jg 0xbae86; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bae9d: jg 0xbaea6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000baebb: jg 0xbaec4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000baedb: jg 0xbaee4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000baefb: jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000baf1b: jg 0xbaf24; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb0c6: jg 0xbb0cf; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000bb0d9: jg 0xbb0e2; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb0fa: jg 0xbb103; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb119: jg 0xbb122; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb139: jg 0xbb142; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb15c: jg 0xbb165; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb17a: jg 0xbb183; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb19a: jg 0xbb1a3; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1ba: jg 0xbb1c3; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb1dd: jg 0xbb1e6; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb1fe: jg 0xbb207; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb21d: jg 0xbb226; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb23d: jg 0xbb246; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb25b: jg 0xbb264; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb27b: jg 0xbb284; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb29b: jg 0xbb2a4; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2bb: jg 0xbb2c4; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2de: jg 0xbb2e7; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb29f: jg 0xbb2f8; wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2bf: jg 0xbb318; adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2e2: jg 0xbb33b; adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb336: jg 0xbb368; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bb335: jg 0xbb3b6; xor byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bbdd8: jg 0xbbe0a; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbea6: jg 0xbbed8; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbf34: jg 0xbbf3d; ret; 
0x00000000000bbfb0: jg 0xbbfb9; ret; 
0x00000000000bbfc4: jg 0xbbfcd; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bbfc8: jg 0xbc011; adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bc090: jg 0xbc0cb; ret 0x3b77; 
0x00000000000bc203: jg 0xbc1fc; int1; mov eax, eax; ret; 
0x00000000000cf085: jg 0xcf089; neg eax; ret; 
0x00000000000d002b: jg 0xd0050; mov rax, r12; pop r12; ret; 
0x00000000000d012e: jg 0xd0150; lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x00000000000dd64a: jg 0xdd618; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000e3574: jg 0xe3585; test byte ptr [rcx], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x00000000000e3744: jg 0xe3755; test byte ptr [rcx], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x00000000000e3a55: jg 0xe3a66; test ah, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000e3c4d: jg 0xe3c5e; test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000e4f83: jg 0xe4f85; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e4f43: jg 0xe4f8e; cmp eax, 0x58465342; jne 0xe4f50; ret; 
0x00000000000e4f9d: jg 0xe4f9f; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e4fda: jg 0xe4fdc; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e4feb: jg 0xe4fed; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000e4fe6: jg 0xe4ffb; add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e500b: jg 0xe500d; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000010c1bf: jge 0x10c145; clc; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000011f9a5: jge 0x11f9a7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x000000000012d88b: jge 0x12d88f; lea rax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012d8d6: jge 0x12d8da; lea rax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012d8f2: jge 0x12d8f6; lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d94b: jge 0x12d94f; lea rax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d996: jge 0x12d99a; lea rax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d9b2: jge 0x12d9b6; lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da0b: jge 0x12da0f; lea rax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012da56: jge 0x12da5a; lea rax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012da72: jge 0x12da76; lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000012db16: jge 0x12db1a; lea rax, [rip + 0x62ec1]; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x000000000013865b: jge 0x138668; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000138733: jge 0x138740; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000184d86: jge 0x184d9f; call 0x2a9d09c; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000018bd3a: jge 0x18bd53; call 0x2364050; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000018c55d: jge 0x18c59a; ret 0xe2c4; 
0x000000000018ca0d: jge 0x18ca4a; ret 0xe2c4; 
0x0000000000042074: jge 0x420d0; andpd xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x00000000000423f3: jge 0x42440; movd xmm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x000000000005448a: jge 0x5448c; cmp cl, byte ptr [rdi]; xchg esp, eax; ret; 
0x0000000000056318: jge 0x56363; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000578c4: jge 0x578c6; add byte ptr [rax], al; leave; ret; 
0x00000000000587a3: jge 0x587a5; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x0000000000090884: jge 0x90886; sbb eax, 0xe9ebe374; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000a04bb: jge 0xa04bf; lea rax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a0506: jge 0xa050a; lea rax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a0522: jge 0xa0526; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05c6: jge 0xa05ca; lea rax, [rip + 0xf0421]; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x00000000000a061b: jge 0xa061f; lea rax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a0666: jge 0xa066a; lea rax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0682: jge 0xa0686; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a098b: jge 0xa098f; lea rax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a09d6: jge 0xa09da; lea rax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a09f2: jge 0xa09f6; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000b1df5: jge 0xb1e3f; sar edx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cb8c3: jge 0xcb8c5; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x00000000000e4138: jge 0xe414a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4803: jge 0xe4805; add cl, ch; ret; 
0x00000000000e4f99: jge 0xe4f9b; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x00000000000e4fd6: jge 0xe4fd8; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x00000000000ea5d8: jge 0xea5cd; dec dword ptr [rax - 0x77]; ret; 
0x00000000000f23c9: jge 0xf23fb; pop rbx; pop rbp; pop r12; ret; 
0x000000000010b2e6: jl 0x10b30c; js 0x10b2d2; ret 0xffbd; 
0x000000000010e0c0: jl 0x10e127; clc; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x00000000001141c4: jl 0x1141d3; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001141f8: jl 0x114207; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000117bff: jl 0x117c0e; add byte ptr [rcx], al; ret; 
0x0000000000117c0d: jl 0x117c1c; add byte ptr [rbx + 0x17f01f8], al; ret; 
0x000000000011f128: jl 0x11f13d; je 0x11f12d; ret; 
0x0000000000125b77: jl 0x125b85; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000012d950: jl 0x12d92f; add eax, 0x158d4800; add eax, 0x480005dd; cmove eax, edx; ret; 
0x000000000013b908: jl 0x13b912; add cl, byte ptr [rcx + 0x39]; clc; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x000000000015c600: jl 0x15c64b; or dword ptr [rax], eax; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000184baa: jl 0x184be0; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184b45: jl 0x184be0; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184bca: jl 0x184be0; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184af4: jl 0x184be0; add rax, rdi; vzeroupper; ret; 
0x000000000018a335: jl 0x18a34e; and ecx, ebp; ret; 
0x000000000018a480: jl 0x18a484; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018a57d: jl 0x18a596; add dword ptr [rdi], ecx; test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b2b1: jl 0x18b2ca; add dword ptr [rdi], ecx; test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018c60a: jl 0x18c61a; cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c60e: jl 0x18c61a; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018f9ab: jl 0x18f9b0; neg eax; ret; 
0x000000000018fa73: jl 0x18fabd; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fa7a: jl 0x18fac4; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fa81: jl 0x18facb; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fa88: jl 0x18fad2; adc dword ptr [rcx - 1], edi; ret; 
0x000000000018fab0: jl 0x18fafa; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fab6: jl 0x18fb00; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fabd: jl 0x18fb07; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fac4: jl 0x18fb0e; adc dword ptr [rcx - 1], ebx; ret; 
0x000000000018fcad: jl 0x18fcf7; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcb4: jl 0x18fcfe; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcbb: jl 0x18fd05; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcc2: jl 0x18fd0c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000018fe1b: jl 0x18fe65; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe22: jl 0x18fe6c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe29: jl 0x18fe73; adc dword ptr [rcx + 7], edi; ret; 
0x000000000018ff76: jl 0x18ffc0; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff7d: jl 0x18ffc7; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff84: jl 0x18ffce; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff8b: jl 0x18ffd5; adc dword ptr [rdi - 8], edi; ret; 
0x000000000019019b: jl 0x1901e5; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a2: jl 0x1901ec; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a9: jl 0x1901f3; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901b0: jl 0x1901fa; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001901bd: jl 0x190207; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901c3: jl 0x19020d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901ca: jl 0x190214; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901d1: jl 0x19021b; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001901de: jl 0x190228; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901e4: jl 0x19022e; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001902a4: jl 0x1902ee; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001902ab: jl 0x1902f5; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001902b2: jl 0x1902fc; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001902b9: jl 0x190303; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001902fd: jl 0x190347; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190303: jl 0x19034d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019030a: jl 0x190354; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190311: jl 0x19035b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000001903a0: jl 0x1903ea; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903a7: jl 0x1903f1; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903ae: jl 0x1903f8; adc dword ptr [rsi + 7], edx; ret; 
0x00000000001905d4: jl 0x1905ed; cld; vzeroupper; ret; 
0x0000000000196b02: jl 0x196b28; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000038856: jl 0x3885f; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000004823f: jl 0x48265; or al, ch; cdq; ret; 
0x00000000000496aa: jl 0x49683; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000497c2: jl 0x4979b; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004c4ca: jl 0x4c4a3; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004c5e2: jl 0x4c5bb; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004f09a: jl 0x4f073; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004f1c2: jl 0x4f19b; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000005819a: jl 0x58173; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000582c2: jl 0x5829b; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000062564: jl 0x625ae; add esp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000098d08: jl 0x98d0a; add byte ptr [rax], al; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x000000000009c0a2: jl 0x9c0c8; sbb byte ptr [rcx - 0x17f7dbac], cl; ret 0xffa6; 
0x00000000000a1a62: jl 0xa1a98; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x00000000000a4eca: jl 0xa4ee6; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a540a: jl 0xa5424; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a5467: jl 0xa5483; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ac68a: jl 0xac6f0; add rax, rdi; ret; 
0x00000000000ac69a: jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac6ba: jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac6da: jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000c9bee: jl 0xc9c29; adc al, 0xf; xchg ebx, eax; ret 0x3948; 
0x00000000000cd0d5: jl 0xcd0fb; or byte ptr [rcx - 0x77], al; ret 0x7b75; 
0x00000000000cd206: jl 0xcd22c; or byte ptr [rcx - 0x77], al; ret 0x2a74; 
0x00000000000d41c8: jl 0xd41db; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41f8: jl 0xd420b; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000d8ceb: jl 0xd8d11; sbb byte ptr [rax + 0x63], cl; ret 0x8944; 
0x00000000000e3f10: jl 0xe3ef6; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000e4405: jl 0xe4407; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000ec3eb: jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000f7993: jl 0xf79a4; pushfq; ret 0x5c3b; 
0x00000000000fd67e: jl 0xfd6b9; ret 0x8f0f; 
0x000000000010c6fb: jle 0x10c76d; ret; 
0x000000000010c747: jle 0x10c7b9; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d053: jle 0x10d0c5; ret; 
0x000000000010d0dc: jle 0x10d14e; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000011082e: jle 0x11084b; int1; dec dword ptr [rcx - 0x73]; push rsi; add dword ptr [rax + 0x39], ecx; ret 0xe72; 
0x000000000011634e: jle 0x11630a; idiv bh; mov eax, 1; add rsp, 8; ret; 
0x000000000011799a: jle 0x11799b; inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x0000000000117a47: jle 0x117a56; add byte ptr [rcx + 0xd7e1035], cl; add byte ptr [rbp - 0x8f38b2e], al; ret 0xfc07; 
0x0000000000117a4d: jle 0x117a5c; add byte ptr [rbp - 0x8f38b2e], al; ret 0xfc07; 
0x000000000011f9d5: jle 0x11f9d7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x000000000014e651: jle 0x14e653; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000000152bdc: jle 0x152be8; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000018388c: jle 0x1838a4; movsxd rax, ecx; ret; 
0x0000000000183b0e: jle 0x183bb0; ret; 
0x0000000000184eb5: jle 0x184ecd; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x000000000018b8e8: jle 0x18b969; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018ba1b: jle 0x18ba9c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bdf3: jle 0x18be0b; vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x0000000000190214: jle 0x1901d7; cmp dl, 4; jb 0x190221; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000198941: jle 0x198930; call 0x22330; test rbx, rbx; jne 0x198935; pop rbx; ret; 
0x000000000002fdba: jle 0x2fde0; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000041ec1: jle 0x41e85; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ee1: jle 0x41ea3; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042276: jle 0x4223a; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000042296: jle 0x42258; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000423b4: jle 0x423f0; and esi, 0x807fffff; shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x000000000005b9e9: jle 0x5b8ea; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000082a75: jle 0x82a7a; or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000089ed2: jle 0x89f2b; cmp byte ptr [rax - 0x75], cl; xor byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x000000000008ccdc: jle 0x8ccf8; mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000008ce0c: jle 0x8ce28; mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000097d49: jle 0x97ccd; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x110f; 
0x00000000000b1c41: jle 0xb1c8b; bsf eax, edx; ret; 
0x00000000000bbbc2: jle 0xbbbd3; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000e4f3d: jle 0xe4f68; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000000e5021: jle 0xe5023; add byte ptr [rax], al; ret; 
0x00000000000e51a1: jle 0xe51b0; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000f1ff2: jle 0xf201c; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001010e6: jne 0x1015f5; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000001029a1: jne 0x1029f6; add rsp, 0x38; ret; 
0x0000000000102a7b: jne 0x102a14; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x0000000000102a3f: jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000106b33: jne 0x106b18; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c161: jne 0x10c178; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x10c1d0; ret; 
0x000000000010c211: jne 0x10c228; mov eax, 0x12; syscall; cmp rax, -0x1000; ja 0x10c280; ret; 
0x000000000010c76e: jne 0x10c775; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000010d17b: jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d330: jne 0x10d338; add rsp, 0x10; pop rbp; ret; 
0x000000000010d440: jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010d492: jne 0x10d499; add rsp, 0x18; ret; 
0x000000000010d617: jne 0x10d871; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x000000000010d8f9: jne 0x10d928; mov eax, 0x85; syscall; cmp rax, -0x1000; ja 0x10d910; ret; 
0x000000000010d95c: jne 0x10d988; mov eax, 0x103; syscall; cmp rax, -0x1000; ja 0x10d970; ret; 
0x000000000010dab5: jne 0x10dacf; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010db32: jne 0x10db47; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010dbef: jne 0x10dc38; mov eax, 0x10c; syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000010dd55: jne 0x10de01; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000010ded0: jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010dfce: jne 0x10dfe0; syscall; cmp rax, -0x1000; ja 0x10e030; ret; 
0x000000000010e06e: jne 0x10e080; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x000000000010e4c6: jne 0x10e565; add rsp, 0x68; ret; 
0x000000000010e607: jne 0x10e6bf; add rsp, 0x30; pop rbx; ret; 
0x000000000010e737: jne 0x10e7ef; add rsp, 0x30; pop rbx; ret; 
0x000000000010e80e: jne 0x10e820; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x10e860; ret; 
0x000000000010e98e: jne 0x10e9a0; mov eax, 0x55; syscall; cmp rax, -0x1000; ja 0x10e9e0; ret; 
0x000000000010f305: jne 0x10f350; add rsp, 0x130; pop rbp; ret; 
0x000000000010fb93: jne 0x10fb9d; movzx eax, al; add rsp, 0x58; ret; 
0x000000000011295e: jne 0x112970; mov eax, 7; syscall; cmp rax, -0x1000; ja 0x1129c0; ret; 
0x0000000000112a55: jne 0x112ad6; add rsp, 0x40; pop r12; ret; 
0x0000000000112fe1: jne 0x112ff8; mov eax, 0x146; syscall; cmp rax, -0x1000; ja 0x113068; ret; 
0x00000000001131f1: jne 0x113208; mov eax, 0x115; syscall; cmp rax, -0x1000; ja 0x113260; ret; 
0x00000000001132a1: jne 0x1132b8; mov eax, 0x11d; syscall; cmp rax, -0x1000; ja 0x113310; ret; 
0x00000000001133cb: jne 0x113413; add rsp, 0x68; ret; 
0x000000000011345a: jne 0x1134a3; add rsp, 0x18; ret; 
0x0000000000113512: jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135b0: jne 0x1135fb; add rsp, 0x58; ret; 
0x000000000011374f: jne 0x11372c; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000113908: jne 0x1139e9; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113a8d: jne 0x113ab4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113afd: jne 0x113b0b; add rsp, 0x18; ret; 
0x0000000000113cf6: jne 0x113d59; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000113df7: jne 0x113d79; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113e81: jne 0x113f48; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000113faf: jne 0x113fd5; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000001141f7: jne 0x114275; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001143de: jne 0x1143f0; mov eax, 0x13; syscall; cmp rax, -0x1000; ja 0x114440; ret; 
0x000000000011447e: jne 0x114490; mov eax, 0x14; syscall; cmp rax, -0x1000; ja 0x1144e0; ret; 
0x000000000011498f: jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a2f: jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114ae5: jne 0x114b2f; add esp, 0x38; ret; 
0x0000000000114ae4: jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bb5: jne 0x114bff; add esp, 0x38; ret; 
0x0000000000114bb4: jne 0x114c2b; add rsp, 0x38; ret; 
0x0000000000114cae: jne 0x114cb5; add rsp, 0x28; ret; 
0x0000000000114df7: jne 0x114e69; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114ec0: jne 0x114f1f; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x0000000000114f71: jne 0x114f88; mov eax, 0x17; syscall; cmp rax, -0x1000; ja 0x114ff0; ret; 
0x0000000000115091: jne 0x115129; add rsp, 0x60; pop rbp; ret; 
0x000000000011519e: jne 0x1151b0; mov eax, 0x4a; syscall; cmp rax, -0x1000; ja 0x1151f0; ret; 
0x000000000011525e: jne 0x115270; mov eax, 0x4b; syscall; cmp rax, -0x1000; ja 0x1152b0; ret; 
0x00000000001152f7: jne 0x115364; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001155a9: jne 0x1155f5; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001157f4: jne 0x115807; add rsp, 0x58; ret; 
0x000000000011586d: jne 0x115874; add rsp, 0x28; ret; 
0x0000000000115944: jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000115d2a: jne 0x115d00; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000115e0b: jne 0x115de0; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000115f32: jne 0x115ef4; xor eax, eax; pop rbp; ret; 
0x0000000000115f8d: jne 0x115f60; ret; 
0x000000000011631c: jne 0x116338; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000116b68: jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c37: jne 0x116c75; add rsp, 0x38; ret; 
0x000000000011739e: jne 0x1173b0; mov eax, 1; ret; 
0x0000000000117bfa: jne 0x117c08; sub dword ptr [rip + 0xd7c4d], 1; ret; 
0x0000000000118298: jne 0x1182a2; add rsp, 0xd8; ret; 
0x0000000000118371: jne 0x11837b; add rsp, 0xd8; ret; 
0x0000000000118659: jne 0x1186c0; sub dword ptr [rip + 0xd71ee], 1; add rsp, 8; ret; 
0x00000000001189de: jne 0x1189f0; mov eax, 0x1a; syscall; cmp rax, -0x1000; ja 0x118a40; ret; 
0x00000000001196b9: jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011a6b6: jne 0x11a6c0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000011a764: jne 0x11a770; pop rbp; pop r12; pop r13; ret; 
0x000000000011bd2d: jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bded: jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfcb: jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c02e: jne 0x11c069; pop rbx; pop rbp; pop r12; ret; 
0x000000000011c234: jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c4a1: jne 0x11c4ab; add rsp, 0xd8; ret; 
0x000000000011c4b9: jne 0x11c4e8; mov eax, 0x88; syscall; cmp rax, -0x1000; ja 0x11c4d0; ret; 
0x000000000011cb1a: jne 0x11cb26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011cbaa: jne 0x11cbb6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011cef7: jne 0x11cee8; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d008: jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x000000000011eff7: jne 0x11efc7; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f0b9: jne 0x11f0d3; add rsp, 0x68; ret; 
0x000000000011f3f7: jne 0x11f3c3; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f421: jne 0x11f438; mov eax, 0xe8; syscall; cmp rax, -0x1000; ja 0x11f490; ret; 
0x000000000011f4d1: jne 0x11f4e8; mov eax, 0x114; syscall; cmp rax, -0x1000; ja 0x11f540; ret; 
0x000000000011f581: jne 0x11f598; mov eax, 0x116; syscall; cmp rax, -0x1000; ja 0x11f5f0; ret; 
0x000000000011f631: jne 0x11f648; mov eax, 0x113; syscall; cmp rax, -0x1000; ja 0x11f6b8; ret; 
0x000000000011f6fe: jne 0x11f710; mov eax, 0x130; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011fbf7: jne 0x11fbbb; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fef7: jne 0x11feb8; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200ce: jne 0x1200e0; mov eax, 0x2b; syscall; cmp rax, -0x1000; ja 0x120130; ret; 
0x000000000012019e: jne 0x1201b0; mov eax, 0x2a; syscall; cmp rax, -0x1000; ja 0x120200; ret; 
0x00000000001203c1: jne 0x1203d8; mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120440; ret; 
0x000000000012047e: jne 0x120490; mov eax, 0x2f; syscall; cmp rax, -0x1000; ja 0x1204e0; ret; 
0x00000000001205de: jne 0x1205f0; mov eax, 0x2e; syscall; cmp rax, -0x1000; ja 0x120640; ret; 
0x0000000000120681: jne 0x120698; mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x120708; ret; 
0x000000000012086a: jne 0x120878; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120abe: jne 0x120ac5; add rsp, 0x18; ret; 
0x0000000000120ae1: jne 0x120af8; mov eax, 0x120; syscall; cmp rax, -0x1000; ja 0x120b50; ret; 
0x0000000000120b91: jne 0x120ba8; mov eax, 0x12b; syscall; cmp rax, -0x1000; ja 0x120c08; ret; 
0x0000000000120c41: jne 0x120c58; mov eax, 0x133; syscall; cmp rax, -0x1000; ja 0x120cb0; ret; 
0x0000000000120d28: jne 0x120d70; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000120e7d: jne 0x120e8f; add rsp, 0xa0; pop rbx; ret; 
0x0000000000120eb1: jne 0x120ec8; mov eax, 0x45; syscall; cmp rax, -0x1000; ja 0x120f20; ret; 
0x0000000000120f61: jne 0x120f78; mov eax, 0x46; syscall; cmp rax, -0x1000; ja 0x120fe0; ret; 
0x0000000000121103: jne 0x12114b; add rsp, 0x58; ret; 
0x0000000000123101: jne 0x123108; ret; 
0x000000000012316a: jne 0x123170; ret; 
0x0000000000123353: jne 0x123360; ret; 
0x0000000000123a51: jne 0x123a58; ret; 
0x0000000000123aae: jne 0x123ab8; ret; 
0x0000000000123c83: jne 0x123c90; ret; 
0x0000000000123cfe: jne 0x123d30; sub dword ptr [rip + 0xcbea1], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000124896: jne 0x1248d0; sub dword ptr [rip + 0xcb439], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012496e: jne 0x124988; sub dword ptr [rip + 0xcb361], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001258f3: jne 0x125930; sub dword ptr [rip + 0xca410], 1; mov eax, r8d; add rsp, 8; ret; 
0x00000000001259ce: jne 0x125a00; sub dword ptr [rip + 0xca389], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000126346: jne 0x126380; sub dword ptr [rip + 0xc9ae1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012641e: jne 0x126438; sub dword ptr [rip + 0xc9a09], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012792e: jne 0x127938; pop rbx; pop rbp; pop r12; ret; 
0x000000000012816d: jne 0x128153; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000129b4f: jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b680: jne 0x12b6b0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012b878: jne 0x12b882; add rsp, 0xd8; ret; 
0x000000000012b916: jne 0x12b8fe; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ce5d: jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000012cef5: jne 0x12cee1; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000012ced9: jne 0x12cee8; cmp qword ptr [rdi], 0; je 0x12cef0; ret; 
0x000000000012cf8c: jne 0x12cf6b; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x000000000012d0d4: jne 0x12d1ad; leave; ret; 
0x000000000012d8d2: jne 0x12d8c0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012d8a9: jne 0x12d8f0; and ecx, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d992: jne 0x12d980; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d969: jne 0x12d9b0; and ecx, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012da52: jne 0x12da40; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012da29: jne 0x12da70; and ecx, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012db12: jne 0x12db04; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ec1]; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x000000000012dbdf: jne 0x12dbc8; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012dcee: jne 0x12dc98; mov rax, rdi; ret; 
0x000000000012de59: jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012df4f: jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e069: jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012e131: jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012eadf: jne 0x12eaf0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000012eba4: jne 0x12eb90; sub rsp, 8; call 0x12e340; nop; mov rax, rdi; ret; 
0x000000000012ec75: jne 0x12ec60; sub rsp, 8; call 0x12e340; ret; 
0x000000000012ed07: jne 0x12ecf0; sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012edce: jne 0x12ed79; mov rax, rdi; ret; 
0x000000000012ef6f: jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f089: jne 0x12f093; add rsp, 0xd8; ret; 
0x000000000012f151: jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f598: jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f8: jne 0x12f605; add rsp, 0x28; ret; 
0x000000000012f6c1: jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f7a1: jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f881: jne 0x12f88b; add rsp, 0xd8; ret; 
0x000000000012fbe7: jne 0x12fc0a; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000012fcd3: jne 0x12fe76; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000013163b: jne 0x131678; sub dword ptr [rip + 0xbe99c], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000131801: jne 0x131820; sub dword ptr [rip + 0xbe7de], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013228b: jne 0x1322c8; sub dword ptr [rip + 0xbde14], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013236c: jne 0x1323b0; sub dword ptr [rip + 0xbdd3b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000132451: jne 0x132470; sub dword ptr [rip + 0xbdc56], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000132fce: jne 0x133000; sub dword ptr [rip + 0xbd181], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013309c: jne 0x1330e0; sub dword ptr [rip + 0xbd0bb], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013317e: jne 0x133198; sub dword ptr [rip + 0xbcfd9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013442e: jne 0x134460; sub dword ptr [rip + 0xbbe89], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001345de: jne 0x1345f8; sub dword ptr [rip + 0xbbce1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001365cf: jne 0x1365f9; add rsp, 0x38; ret; 
0x000000000013666c: jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d9: jne 0x1366e0; add rsp, 0x28; ret; 
0x0000000000136ec0: jne 0x136dda; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000137b53: jne 0x137b40; pop rbx; ret; 
0x0000000000137c15: jne 0x137c80; sub dword ptr [rip + 0xb881a], 1; add rsp, 8; ret; 
0x0000000000137f3d: jne 0x137fa0; sub dword ptr [rip + 0xb84f2], 1; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x0000000000138656: jne 0x138690; sub dword ptr [rip + 0xb7de1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013872e: jne 0x138748; sub dword ptr [rip + 0xb7d09], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013891e: jne 0x138950; sub dword ptr [rip + 0xb7b79], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000139d68: jne 0x139def; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a20e: jne 0x13a200; mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a64d: jne 0x13a677; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013b94c: jne 0x13b920; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x000000000013c167: jne 0x13c190; shr esi, 3; mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000013c32d: jne 0x13c348; mov eax, r8d; ret; 
0x000000000013c6f2: jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013c718: jne 0x13c730; movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x000000000013c7ed: jne 0x13c835; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013c88b: jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x000000000013cb54: jne 0x13cc1c; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000013cc9b: jne 0x13ccf1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013d66b: jne 0x13d6c0; sub dword ptr [rip + 0xb2ea4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013de7f: jne 0x13df14; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000013e129: jne 0x13e145; add rsp, 0x20; pop rbx; ret; 
0x000000000013e17e: jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1d1: jne 0x13e1d8; add rsp, 0x28; ret; 
0x000000000013ea60: jne 0x13ea67; add rsp, 0x18; ret; 
0x000000000013efd7: jne 0x13efbd; mov eax, r10d; ret; 
0x0000000000141110: jne 0x141118; ret; 
0x0000000000141154: jne 0x141140; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014123e: jne 0x141248; pop rbx; pop rbp; pop r12; ret; 
0x00000000001423f6: jne 0x142440; sub dword ptr [rip + 0xae619], 1; pop rbp; ret; 
0x0000000000142f7e: jne 0x142f88; ret; 
0x00000000001430db: jne 0x143103; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000001449bd: jne 0x1449c6; add rsp, 0x10; pop r12; ret; 
0x00000000001461c4: jne 0x146148; ret; 
0x000000000014632b: jne 0x146333; add rsp, 0x40; pop rbp; ret; 
0x00000000001463a0: jne 0x146386; call 0x146270; or dword ptr [rip + 0xaa732], 2; add rsp, 8; lea rax, [rip + 0xaa747]; ret; 
0x00000000001463d7: jne 0x1463e8; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001470f3: jne 0x147116; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000001472cb: jne 0x147378; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000014746e: jne 0x1474e7; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000147537: jne 0x147548; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001476df: jne 0x147715; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001480a7: jne 0x1480b8; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148157: jne 0x148168; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001481b7: jne 0x1481c8; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148233: jne 0x148240; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001482b7: jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x0000000000149101: jne 0x149143; add rsp, 0x10; pop rbx; ret; 
0x0000000000149197: jne 0x149240; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000149674: jne 0x1496a2; add rsp, 0x10; pop rbx; ret; 
0x0000000000149712: jne 0x149745; add rsp, 0x10; pop rbx; ret; 
0x0000000000149c7c: jne 0x149bec; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000149d4c: jne 0x149cbc; pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000014a325: jne 0x14a337; add rsp, 0x40; pop rbx; ret; 
0x000000000014af6c: jne 0x14af80; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014b007: jne 0x14b018; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014b09e: jne 0x14b0b0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014c1fe: jne 0x14c230; sub dword ptr [rip + 0xa4ac1], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000014c66c: jne 0x14c6b0; sub dword ptr [rip + 0xa46b3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000014c74e: jne 0x14c768; sub dword ptr [rip + 0xa45d1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014de0c: jne 0x14de10; ret; 
0x000000000014de5f: jne 0x14de70; mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000014e567: jne 0x14e5ca; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000014e64f: jne 0x14e6d3; add rsp, 0x20; pop rbx; ret; 
0x000000000014e898: jne 0x14e942; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000014e9e2: jne 0x14ea7d; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000151723: jne 0x151741; add rsp, 0x10; pop rbx; ret; 
0x0000000000151925: jne 0x1519b7; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000151a75: jne 0x151aea; add rsp, 0x10; pop r12; ret; 
0x0000000000151ba5: jne 0x151c16; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x0000000000151cec: jne 0x151d5a; add rsp, 0x30; pop rbx; ret; 
0x0000000000151e2c: jne 0x151e9a; add rsp, 0x30; pop rbx; ret; 
0x0000000000151f8d: jne 0x152032; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000015212d: jne 0x1521d2; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000001522b3: jne 0x1522c3; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000152383: jne 0x1523f6; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x00000000001524c2: jne 0x15253a; add rsp, 0x28; pop rbx; pop r12; ret; 
0x000000000015266b: jne 0x1526ad; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000152c86: jne 0x152cb8; add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000153957: jne 0x153960; pop rbx; pop rbp; pop r12; ret; 
0x00000000001539e5: jne 0x1539ec; add rsp, 0x78; ret; 
0x0000000000153a5b: jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153acb: jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b3b: jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b9c: jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153c00: jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c6b: jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153cee: jne 0x153cf5; add rsp, 0x78; ret; 
0x0000000000154223: jne 0x154248; add rsp, 0x28; ret; 
0x000000000015450c: jne 0x154510; ret; 
0x000000000015455f: jne 0x154570; mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000155c96: jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000155d01: jne 0x155d43; add rsp, 0x10; pop rbx; ret; 
0x0000000000155d91: jne 0x155dd2; add rsp, 0x10; pop rbx; ret; 
0x0000000000155e61: jne 0x155ea5; add rsp, 0x10; pop rbp; ret; 
0x0000000000155ef1: jne 0x155f8f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000155fe1: jne 0x15607f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001560d1: jne 0x15616f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001561c1: jne 0x15625f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001562b1: jne 0x1562f4; add rsp, 0x10; pop rbx; ret; 
0x0000000000156341: jne 0x156383; add rsp, 0x10; pop rbx; ret; 
0x00000000001563d0: jne 0x156420; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000156470: jne 0x1564c0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000156511: jne 0x156559; add rsp, 0x10; pop rbx; ret; 
0x00000000001565a1: jne 0x1565e3; add rsp, 0x10; pop rbx; ret; 
0x000000000015689a: jne 0x1569ce; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000156e35: jne 0x156ecf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000156f25: jne 0x156fbf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157015: jne 0x1570af; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157105: jne 0x15719f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157291: jne 0x1572d5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157321: jne 0x157365; add rsp, 0x10; pop rbx; ret; 
0x00000000001573b1: jne 0x1573f5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157441: jne 0x157485; add rsp, 0x10; pop rbx; ret; 
0x0000000000157b19: jne 0x157b24; add rsp, 0x90; pop rbx; ret; 
0x0000000000157b8d: jne 0x157b97; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157bee: jne 0x157bf8; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157c5a: jne 0x157c62; add rsp, 0x10; pop rbx; ret; 
0x0000000000157ccd: jne 0x157cd5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157d36: jne 0x157d48; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157d86: jne 0x157d98; mov r8d, 1; mov eax, r8d; ret; 
0x000000000015c5ae: jne 0x15c5cf; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000015cac2: jne 0x15caf4; add rsp, 0x18; ret; 
0x000000000015cb2f: jne 0x15cb60; sub dword ptr [rip + 0x94b20], 1; add rsp, 8; ret; 
0x000000000015cbc9: jne 0x15cc10; sub dword ptr [rip + 0x94a86], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cc75: jne 0x15ccb0; sub dword ptr [rip + 0x949da], 1; mov rax, r8; pop rbp; ret; 
0x000000000015cd0f: jne 0x15cd40; sub dword ptr [rip + 0x94940], 1; add rsp, 8; ret; 
0x000000000015cdb9: jne 0x15cdec; add rsp, 0x10; pop rbp; ret; 
0x000000000015ce49: jne 0x15ce7c; add rsp, 0x10; pop rbp; ret; 
0x000000000015ced9: jne 0x15cf28; sub dword ptr [rip + 0x94776], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cfb9: jne 0x15d008; sub dword ptr [rip + 0x94696], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015d1c0: jne 0x15d1f5; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x000000000015e328: jne 0x15e3f9; add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000015e928: jne 0x15e93f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fa14: jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb0b: jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcb4: jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd7d: jne 0x15fdbc; add rsp, 0x38; ret; 
0x000000000016095c: jne 0x1609af; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000160a1a: jne 0x160a25; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160b02: jne 0x160b10; pop rbx; ret; 
0x0000000000160b32: jne 0x160b40; pop rbx; ret; 
0x0000000000160e10: jne 0x160e17; add rsp, 0x28; ret; 
0x000000000016339b: jne 0x1633a3; add rsp, 0x10; pop rbx; ret; 
0x0000000000163421: jne 0x163429; add rsp, 0x10; pop rbx; ret; 
0x0000000000178351: jne 0x178900; ret; 
0x000000000017c6e2: jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017de8c: jne 0x17dec0; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000183a14: jne 0x183a80; test esi, esi; je 0x1839f8; xor eax, eax; ret; 
0x0000000000183f0d: jne 0x183ef0; sub eax, ecx; vzeroupper; ret; 
0x00000000001843e2: jne 0x1843c0; sub eax, ecx; vzeroupper; ret; 
0x0000000000184713: jne 0x184730; xor eax, eax; vzeroupper; ret; 
0x00000000001846d6: jne 0x184770; xor eax, eax; vzeroupper; ret; 
0x0000000000184ec4: jne 0x184dd0; ret; 
0x0000000000184dca: jne 0x184dd0; vzeroupper; ret; 
0x0000000000188a53: jne 0x188a80; mov rax, r8; vzeroupper; ret; 
0x0000000000188a1a: jne 0x188ac0; mov rax, r8; vzeroupper; ret; 
0x000000000018a2d0: jne 0x18a700; vzeroupper; ret; 
0x000000000018afe8: jne 0x18b430; vzeroupper; ret; 
0x000000000018bc18: jne 0x18bbfb; vzeroupper; ret; 
0x000000000018be02: jne 0x18bd80; ret; 
0x000000000018bd7a: jne 0x18bd80; vzeroupper; ret; 
0x000000000018bda6: jne 0x18bd8c; ret; 
0x000000000018c1c3: jne 0x18c1e0; xor eax, eax; vzeroupper; ret; 
0x000000000018c186: jne 0x18c220; xor eax, eax; vzeroupper; ret; 
0x000000000018c31e: jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c63b: jne 0x18c620; sub eax, ecx; vzeroupper; ret; 
0x000000000018c799: jne 0x18c769; vzeroupper; ret; 
0x000000000018cb10: jne 0x18caf0; sub eax, ecx; vzeroupper; ret; 
0x000000000018d3f3: jne 0x18d420; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x000000000018d3bd: jne 0x18d460; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x000000000018e727: jne 0x18eb53; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e1cd: jne 0x18eb53; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e121: jne 0x18eb53; xor eax, eax; ret; 
0x000000000018e218: jne 0x18eb5f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e149: jne 0x18eb5f; xor eax, eax; ret; 
0x000000000018e41a: jne 0x18eb6a; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e2ad: jne 0x18eb80; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000018f751: jne 0x18f993; xor eax, eax; ret; 
0x000000000018f777: jne 0x18f9a6; xor eax, eax; ret; 
0x0000000000190adb: jne 0x190ab6; vzeroupper; ret; 
0x0000000000190ce0: jne 0x190bd0; lea rax, [rdi + 0xb]; ret; 
0x0000000000190c9a: jne 0x190bd0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190c45: jne 0x190bd0; lea rax, [rdi + 3]; ret; 
0x0000000000190c17: jne 0x190bd0; lea rax, [rdi + 7]; ret; 
0x0000000000190bc6: jne 0x190bd4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000190c3c: jne 0x190db0; test dl, 4; jne 0x190bd0; lea rax, [rdi + 3]; ret; 
0x0000000000190d1e: jne 0x190de0; test al, 0x40; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x0000000000190d26: jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x0000000000190c0e: jne 0x190df0; test dl, 0x40; jne 0x190bd0; lea rax, [rdi + 7]; ret; 
0x0000000000190cd7: jne 0x190e20; test dh, 4; jne 0x190bd0; lea rax, [rdi + 0xb]; ret; 
0x0000000000190d70: jne 0x190e50; test ah, 0x40; jne 0x190e60; lea rax, [rdi + 0xf]; ret; 
0x0000000000190d79: jne 0x190e60; lea rax, [rdi + 0xf]; ret; 
0x0000000000190c91: jne 0x190e60; test dh, 0x40; jne 0x190bd0; lea rax, [rdi + 0xf]; ret; 
0x0000000000192075: jne 0x1920f0; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000001923a4: jne 0x1925b0; xor eax, eax; ret; 
0x0000000000192504: jne 0x1925c5; cmp eax, ecx; jne 0x1925c5; xor eax, eax; ret; 
0x00000000001925c1: jne 0x1925c5; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000001925a0: jne 0x1925c5; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x1925c5; xor eax, eax; ret; 
0x0000000000192451: jne 0x1925c5; xor eax, eax; ret; 
0x0000000000192bce: jne 0x192be0; mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; xor eax, eax; ret; 
0x0000000000192aad: jne 0x192be0; ret; 
0x0000000000192bd6: jne 0x192be0; xor eax, eax; ret; 
0x00000000001969dd: jne 0x196930; add rsp, 0x38; ret; 
0x0000000000196c5c: jne 0x196cb3; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000196e03: jne 0x196e99; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000197075: jne 0x1970f2; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000019737b: jne 0x197368; call 0x22330; test rbx, rbx; jne 0x19736d; pop rbx; ret; 
0x0000000000197385: jne 0x19736d; pop rbx; ret; 
0x00000000001985fe: jne 0x1985e0; pop rbx; pop rbp; pop r12; ret; 
0x00000000001986d6: jne 0x1986c0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198729: jne 0x198700; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000019894b: jne 0x198935; pop rbx; ret; 
0x00000000001989ed: jne 0x1989d0; pop rbx; ret; 
0x0000000000198a55: jne 0x198a80; sub dword ptr [rip + 0x55da2], 1; pop rbx; ret; 
0x0000000000198b7f: jne 0x198b70; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198d66: jne 0x198db0; sub dword ptr [rip + 0x577a9], 1; pop rbp; ret; 
0x000000000009e8ce: jne 0x2372e; pop rbx; pop rbp; pop r12; ret; 
0x0000000000023a65: jne 0x23a3b; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000023a75: jne 0x23a3b; ret; 
0x0000000000024489: jne 0x244c0; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000002ca02: jne 0x2ca04; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000002f6f8: jne 0x2f7bf; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000002f82a: jne 0x2f85d; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000003007a: jne 0x30050; mov byte ptr [r12], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000033d9f: jne 0x33da8; mov eax, r8d; ret; 
0x0000000000040fbd: jne 0x40f98; ret; 
0x0000000000041238: jne 0x41220; mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000041cfa: jne 0x41c50; mov edx, r8d; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x0000000000041e58: jne 0x41e2a; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e26: jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x00000000000421ec: jne 0x421f8; addsd xmm0, xmm0; ret; 
0x00000000000422fb: jne 0x42310; and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x0000000000042352: jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000042518: jne 0x42520; addss xmm0, xmm0; ret; 
0x00000000000428a6: jne 0x4282f; movdqa xmm1, xmm0; call 0x192c70; add rsp, 0x10; pop rbx; ret; 
0x0000000000042b95: jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042c3a: jne 0x42c48; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000042eef: jne 0x42ef9; add rsp, 0x148; ret; 
0x000000000004301c: jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x0000000000043230: jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043328: jne 0x433c6; add rsp, 0x98; ret; 
0x000000000004354a: jne 0x43558; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000435c4: jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043647: jne 0x43658; add rsp, 0x118; ret; 
0x00000000000436c1: jne 0x436f8; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000043752: jne 0x4375c; add rsp, 0x98; ret; 
0x00000000000437cd: jne 0x437e7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000438e6: jne 0x4390f; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000043996: jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043a8a: jne 0x43ab6; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043cf2: jne 0x43cfc; add rsp, 0x148; ret; 
0x0000000000043dd7: jne 0x43de8; mov edx, dword ptr [rdi]; test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x0000000000044319: jne 0x44337; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000004439c: jne 0x443b7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044422: jne 0x4442c; add rsp, 0xa8; ret; 
0x00000000000466ff: jne 0x4671b; add byte ptr [rcx], al; xor eax, eax; pop rbx; ret; 
0x00000000000466fa: jne 0x46728; sub dword ptr [rip + 0x1a7585], 1; xor eax, eax; pop rbx; ret; 
0x000000000004736f: jne 0x47378; pop rbx; ret; 
0x0000000000047443: jne 0x4744a; add rsp, 0x28; ret; 
0x0000000000047533: jne 0x4753a; add rsp, 0x28; ret; 
0x00000000000475f7: jne 0x47630; sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x0000000000047867: jne 0x478ba; add rsp, 0x18; ret; 
0x0000000000047dbd: jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e0a: jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e5c: jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea9: jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047efc: jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f49: jne 0x47f50; add rsp, 0x18; ret; 
0x000000000004821e: jne 0x48230; mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000051aea: jne 0x51b1c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051b9a: jne 0x51bfb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051c68: jne 0x51cc4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000521f6: jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c05: jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414f: jne 0x54159; add rsp, 0xd8; ret; 
0x000000000005430d: jne 0x54300; pop rbx; ret; 
0x0000000000054338: jne 0x54330; pop rbx; ret; 
0x000000000005503e: jne 0x55043; push r10; ret; 
0x0000000000055547: jne 0x5554c; push r10; ret; 
0x0000000000055626: jne 0x555ac; sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x000000000005562c: jne 0x55610; mov eax, 1; ret; 
0x000000000005586e: jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x0000000000055874: jne 0x55858; mov eax, 1; ret; 
0x0000000000055c43: jne 0x55c30; mov rax, rdx; ret; 
0x0000000000056527: jne 0x56518; mov rax, rdx; ret; 
0x00000000000578c2: jne 0x57945; leave; ret; 
0x0000000000057b34: jne 0x57b50; test rsi, rsi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057b39: jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057bea: jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057be3: jne 0x57bd2; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057bc5: jne 0x57be0; test rsi, rsi; jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057bca: jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057d47: jne 0x57d70; test rax, rax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000057d4c: jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000005b05a: jne 0x5b0ad; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000005b39b: jne 0x5b390; cmp rax, rdi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000005b5b3: jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b875: jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061050: jne 0x61088; sub dword ptr [rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x0000000000061c78: jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d4d: jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061e04: jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed6: jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f98: jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062058: jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062146: jne 0x62150; add rsp, 0xd8; ret; 
0x000000000006221d: jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000062350: jne 0x6235f; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000000623e0: jne 0x623fc; add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x0000000000062563: jne 0x625e1; add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x000000000006264e: jne 0x626b1; add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000062728: jne 0x6275d; add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000000627ac: jne 0x627b0; pop rbx; ret; 
0x0000000000062843: jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de7: jne 0x62df7; add rsp, 0x18; ret; 
0x0000000000063010: jne 0x63028; mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000063088: jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000063170: jne 0x6317a; add rsp, 0xd8; ret; 
0x000000000006324b: jne 0x63255; add rsp, 0xd8; ret; 
0x0000000000063393: jne 0x633a2; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x0000000000081a3a: jne 0x81aa5; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000081bf8: jne 0x81c65; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000081d33: jne 0x81dca; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000083f3a: jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x00000000000864c8: jne 0x864d2; add rsp, 0xd8; ret; 
0x0000000000086584: jne 0x8658e; add rsp, 0xd8; ret; 
0x000000000008667d: jne 0x86687; add rsp, 0xd8; ret; 
0x000000000008674d: jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086806: jne 0x86810; add rsp, 0xd8; ret; 
0x0000000000086ba5: jne 0x86bb4; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x0000000000086e21: jne 0x86e10; ret; 
0x0000000000087733: jne 0x8767e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000000878bb: jne 0x8780e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000087e9c: jne 0x87eb0; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000089073: jne 0x89096; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000089a50: jne 0x89aea; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008a3fd: jne 0x8a4ec; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000008a71c: jne 0x8a730; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000008ac3e: jne 0x8ac80; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008ba73: jne 0x8ba98; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cd24: jne 0x8cd32; xor r8d, r8d; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x000000000008d36d: jne 0x8d380; mov rdi, rbp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000008d7cd: jne 0x8d7e0; mov rdi, rbp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000008dbd8: jne 0x8dbeb; add rsp, 0x48; ret; 
0x000000000008e162: jne 0x8e170; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000908a9: jne 0x908b0; ret; 
0x0000000000090fee: jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000916e9: jne 0x916d8; ret; 
0x0000000000092726: jne 0x92718; ret; 
0x00000000000929e1: jne 0x929a3; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009354e: jne 0x93540; ret; 
0x0000000000093587: jne 0x93598; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000938fa: jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000094603: jne 0x945ec; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x0000000000094666: jne 0x94654; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000009471d: jne 0x94700; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000949f5: jne 0x94a30; sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x0000000000094aac: jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094d2b: jne 0x94d40; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000094fb7: jne 0x94f98; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000009563d: jne 0x95628; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000098d06: jne 0x98d88; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x00000000000991ff: jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x0000000000099eae: jne 0x99e90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099f4d: jne 0x99f88; sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x000000000009a057: jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000009a05c: jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000009c26f: jne 0x9c258; sub rax, 0x10; ret; 
0x000000000009d4dc: jne 0x9d58f; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d5ff: jne 0x9d6b2; add rsp, 0x18; ret; 
0x000000000009e851: jne 0x9e840; xor eax, eax; ret; 
0x000000000009e92b: jne 0x9e920; ret; 
0x000000000009f0e0: jne 0x9f0f8; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x000000000009f210: jne 0x9f228; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f6f0: jne 0x9f708; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f7c0: jne 0x9f7d8; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f85c: jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000a0502: jne 0xa04f0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a04d9: jne 0xa0520; and ecx, 8; lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000a05c2: jne 0xa05b4; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0421]; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x00000000000a0662: jne 0xa0650; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0639: jne 0xa0680; and ecx, 8; lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a0730: jne 0xa0748; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x00000000000a0790: jne 0xa07a8; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x00000000000a09d2: jne 0xa09c0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a09a9: jne 0xa09f0; and ecx, 8; lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a13f4: jne 0xa13e0; ret; 
0x00000000000a1df7: jne 0xa1de0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a20bb: jne 0xa20a0; pop rbx; mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x00000000000a2858: jne 0xa27f0; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000a28ce: jne 0xa28c0; add rax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000a861f: jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000a86e5: jne 0xa86d0; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x00000000000a877f: jne 0xa8770; mov rax, r8; ret; 
0x00000000000a87b3: jne 0xa87a0; mov rax, r8; ret; 
0x00000000000a87f0: jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a880e: jne 0xa8820; add rax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x00000000000a88a0: jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000000a88d2: jne 0xa88c0; ret; 
0x00000000000a892c: jne 0xa8908; ret; 
0x00000000000aa64c: jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x00000000000ac0b5: jne 0xac190; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac157: jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac127: jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac3a3: jne 0xac3f0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac60a: jne 0xac680; xor eax, eax; ret; 
0x00000000000ac639: jne 0xac6b0; xor eax, eax; ret; 
0x00000000000b1d67: jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000b76ca: jne 0xb7f80; ret; 
0x00000000000b8dad: jne 0xb97d0; ret; 
0x00000000000bb4e1: jne 0xbb4d0; ret; 
0x00000000000bb4d8: jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb591: jne 0xbb580; ret; 
0x00000000000bb588: jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x00000000000bb701: jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000bb6f8: jne 0xbb710; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000bb851: jne 0xbb840; sub rax, 1; ret; 
0x00000000000bb848: jne 0xbb860; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x00000000000bbf57: jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000bcb41: jne 0xbcb18; mov rax, r8; ret; 
0x00000000000bcc38: jne 0xbcc28; xor eax, eax; ret; 
0x00000000000bccce: jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x00000000000bccd2: jne 0xbccb0; ret; 
0x00000000000bcd52: jne 0xbcd69; and ch, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000bd5c7: jne 0xbd630; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bdfbd: jne 0xbdfb0; ret; 
0x00000000000beeb2: jne 0xbeead; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000c680b: jne 0xc686c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000c68e9: jne 0xc6945; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000c69bb: jne 0xc69ed; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ca0b3: jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000ca59c: jne 0xca641; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cab90: jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac6b: jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000cadb8: jne 0xcadc7; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x00000000000cdfbb: jne 0xce00e; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000ce295: jne 0xce370; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce337: jne 0xce390; xor eax, eax; ret; 
0x00000000000ce307: jne 0xce3b0; xor eax, eax; ret; 
0x00000000000cef2f: jne 0xcf080; ret; 
0x00000000000cef0e: jne 0xcf080; xor eax, eax; ret; 
0x00000000000cf15a: jne 0xcf160; mov eax, r9d; ret; 
0x00000000000cf4e7: jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf4df: jne 0xcf660; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf697: jne 0xcf69d; xor rax, rax; ret; 
0x00000000000d01f3: jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d026d: jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d0ed7: jne 0xd0f08; mov eax, 0x60; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000d1039: jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000d119b: jne 0xd11fe; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000d290a: jne 0xd2940; sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x00000000000d41f7: jne 0xd4275; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d42e6: jne 0xd42f0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000d4a8d: jne 0xd4aa0; mov rax, r8; add rsp, 8; ret; 
0x00000000000da6bc: jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf8c: jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000dd768: jne 0xdd739; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000dd817: jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ddc55: jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce9: jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000de192: jne 0xde1c0; sub dword ptr [rbx + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000de239: jne 0xde268; sub dword ptr [rbx + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000de743: jne 0xde77a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000000df40f: jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000df4ce: jne 0xdf500; sub dword ptr [rip + 0x10fe09], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000dfc26: jne 0xdfc60; sub dword ptr [rip + 0x10f741], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfcfe: jne 0xdfd18; sub dword ptr [rip + 0x10f669], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e14a4: jne 0xe14dc; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x00000000000e160b: jne 0xe167c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e1b56: jne 0xe1b90; sub dword ptr [rip + 0x10d981], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1c2e: jne 0xe1c48; sub dword ptr [rip + 0x10d8a9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e2c31: jne 0xe2c48; mov eax, 0x3d; syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2e15: jne 0xe2e25; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000e2e3e: jne 0xe2e50; mov eax, 0x22; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x00000000000e2ec9: jne 0xe2ed0; add rsp, 8; ret; 
0x00000000000e3666: jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3836: jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418f: jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422f: jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44ff: jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45af: jne 0xe4613; add rsp, 0x38; ret; 
0x00000000000e49b4: jne 0xe4ed4; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000e4f4b: jne 0xe4f50; ret; 
0x00000000000e4f59: jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x00000000000e4fc5: jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e50e6: jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e57a0: jne 0xe597d; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000e81e3: jne 0xe8191; xor eax, eax; ret; 
0x00000000000e81a5: jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c6: jne 0xe81f9; mov eax, 1; ret; 
0x00000000000e82d0: jne 0xe82c0; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e83d1: jne 0xe83c0; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec403: jne 0xec3ed; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3d2: jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000ee434: jne 0xee3bd; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x00000000000ee495: jne 0xee3bd; ret; 
0x00000000000ee580: jne 0xee5d8; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000f15ff: jne 0xf1599; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000094d28: jne 0xffffffff831cc324; or dh, bh; xor eax, eax; ret; 
0x000000000011865e: jno 0x11866d; add byte ptr [rcx], al; add rsp, 8; ret; 
0x0000000000152384: jno 0x1523ce; add esp, 0x10; mov eax, r8d; pop r12; ret; 
0x00000000001578fb: jno 0x15787e; std; call qword ptr [rax - 0x5e1f00d]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000018b8e0: jno 0x18b8c2; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018ba13: jno 0x18b9f5; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018e3de: jno 0x18e3e7; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018fa84: jno 0x18fa84; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcbe: jno 0x18fcbe; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fe25: jno 0x18fe2d; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018ff75: jno 0x18fff3; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff7c: jno 0x18fffa; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff83: jno 0x190001; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff8a: jno 0x190008; adc qword ptr [rdi - 8], rdi; ret; 
0x00000000001906e0: jno 0x1906e0; jg 0x190726; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000019086b: jno 0x19086b; jg 0x1908b1; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000422b9: jno 0x422d1; add byte ptr [rdi], cl; push rsp; ret; 
0x00000000000860c1: jno 0x860c7; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086268: jno 0x8626e; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000095197: jno 0x951ae; add byte ptr [rcx - 0x77], al; imul esp, dword ptr [rbx*2 + 0x10438941], 0x41; mov dword ptr [rbx + 0x14], 0; ret; 
0x000000000009f0e4: jno 0x9f0e8; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x000000000009f214: jno 0x9f218; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f6f4: jno 0x9f6f8; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f7c4: jno 0x9f7c8; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x00000000000a0734: jno 0xa0738; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x00000000000a0794: jno 0xa0798; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x00000000000bbd48: jno 0xbbd3a; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbe36: jno 0xbbe28; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bc874: jno 0xbc878; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000d012d: jno 0xd01ae; and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x00000000001142cc: jnp 0x1142db; add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000117d54: jnp 0x117d63; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011f1f5: jnp 0x11f1f7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f204; ret; 
0x0000000000121ae1: jnp 0x121a8b; or al, 0; pop rbx; ret; 
0x0000000000127ad8: jnp 0x127b02; add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000137b4e: jnp 0x137b98; test rdi, rdi; jne 0x137b40; pop rbx; ret; 
0x0000000000138923: jnp 0x138930; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001536ac: jnp 0x153631; ret 0x3901; 
0x0000000000197076: jnp 0x1970c0; add esp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000047f87: jnp 0x47f1c; sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000081122: jnp 0x8113c; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000084438: jnp 0x84450; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000bcd61: jnp 0xbcdbb; or eax, 0x450f4800; ret 0x66c3; 
0x00000000000cf4e1: jnp 0xcf4e4; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf5f4: jnp 0xcf57a; in al, 0x75; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000e50e2: jnp 0xe5135; add byte ptr [rax], al; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000ea417: jnp 0xea41a; sub byte ptr [rsp + rdx + 0x3c], dh; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ff517: jnp 0xff541; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000005ef80: jnp 0xffffffff8947869a; adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000005f0e4: jnp 0xffffffff894786fe; adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000005f699: jnp 0xffffffff894787b3; adc byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000007ea51: jnp 0xffffffff89497b6b; adc cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000043dd8: jnp 0xffffffffbad6c2f5; add dword ptr [rax], eax; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000001144e4: jns 0x1144f3; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114ff3: jns 0x115063; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001151f3: jns 0x115261; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001156c9: jns 0x1156d0; mov byte ptr [r12], 0; mov rax, r12; pop r12; ret; 
0x000000000011f5f3: jns 0x11f5bd; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000138922: jns 0x13899f; or eax, dword ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000015deec: jns 0x15def0; ret; 
0x0000000000185377: jns 0x1853dc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001853c8: jns 0x18542d; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001854c7: jns 0x18552c; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185666: jns 0x1856cb; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001858b7: jns 0x18591c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000185a58: jns 0x185abd; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000185b57: jns 0x185bbc; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185ba8: jns 0x185c0d; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000185ca7: jns 0x185d0c; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000186097: jns 0x1860fc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000186388: jns 0x1863ed; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000186487: jns 0x1864ec; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018b8e5: jns 0x18b8a7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018ba18: jns 0x18b9da; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018fa8b: jns 0x18fa8c; ret; 
0x000000000018fcc5: jns 0x18fcc6; ret; 
0x000000000018fe2c: jns 0x18fe35; ret; 
0x00000000001906dd: jns 0x1906dd; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190868: jns 0x190868; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000344a8: jns 0x344c5; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000034546: jns 0x34563; add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000043bf3: jns 0x43b77; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df3: jns 0x43d75; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000479c9: jns 0x47989; xor eax, eax; ret; 
0x000000000005b519: jns 0x5b4e1; or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x00000000000bbd4c: jns 0xbbd2e; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbe3a: jns 0xbbe1c; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bc853: jns 0xbc870; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000bcaf3: jns 0xbcb1d; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000d0ef3: jns 0xd0ea4; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e4375: jns 0xe4377; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e4478: jns 0xe448a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e44a8: jns 0xe44ba; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000b7808: jns 0xffffffff83547f65; call 0x7f98c01e; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000bafc6: jns 0xffffffffed3bb323; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000bb028: jns 0xffffffffed3bb785; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb048: jns 0xffffffffed3bb8a5; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000010c748: jo 0x10c759; adc dword ptr [rdi + 0x78], edi; ret; 
0x000000000010d0dd: jo 0x10d0ee; adc dword ptr [rdi + 0xf8], edi; ret; 
0x0000000000114df8: jo 0x114e07; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011d745: jo 0x11d6d0; ret 0xeac1; 
0x0000000000120fcc: jo 0x121004; idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000015305c: jo 0x1530b9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000198d01: jo 0x198cff; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x57160], 0; ret; 
0x0000000000029e05: jo 0x29e16; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x000000000002ab61: jo 0x2ab72; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x000000000002d389: jo 0x2d39a; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x000000000002eae1: jo 0x2eaf2; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x0000000000042038: jo 0x34e4e186; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000087f5e: jo 0x87fa0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000000951bb: jo 0x951d2; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x00000000000951db: jo 0x951f2; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x0000000000095204: jo 0x9521b; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x000000000009f744: jo 0x9f73d; ret 0; 
0x00000000000a8bdc: jo 0xa8b9b; or eax, 0x58d4800; sbb dword ptr [rax], edi; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000bd0d5: jo 0xbd132; pop rbp; pop r12; ret; 
0x00000000000bd5cc: jo 0xbd629; pop rbp; pop r12; ret; 
0x00000000000e4435: jo 0xe4437; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000f8fab: jo 0xf8f30; ret 0x4801; 
0x00000000000f9082: jo 0xf9007; ret 0x4801; 
0x00000000000f90fb: jo 0xf9080; ret 0x4901; 
0x00000000001143b8: jp 0x1143c7; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000114444: jp 0x114453; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f1c5: jp 0x11f1c7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x0000000000138a04: jp 0x138a11; add al, ch; cdq; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014927a: jp 0x1492dc; ja 0x149290; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000149283: jp 0x1492dd; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000001619b1: jp 0x1619b4; add byte ptr [rdi], cl; test byte ptr [rsi + 0xf000004], dl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x000000000018a582: jp 0x18a585; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000024408: jp 0x24426; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000328ac: jp 0x328e6; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000344c8: jp 0x344e5; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000344e8: jp 0x34505; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000041e56: jp 0x41e2a; jne 0x41e2a; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e24: jp 0x41e30; jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x00000000000421ea: jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000042516: jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000095173: jp 0x9518a; add byte ptr [rcx + 1], al; adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000000e4388: jp 0xe439a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b8: jp 0xe43ca; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4418: jp 0xe442a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4448: jp 0xe445a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e6ec1: jp 0xe6ec4; add byte ptr [rdi], cl; test byte ptr [rsi + 0xf000004], ah; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000109899: js 0x1098a9; add byte ptr [rbx + rcx*4 + 0x34], cl; ret 0x88e9; 
0x000000000010b2e8: js 0x10b2d2; ret 0xffbd; 
0x000000000010c6f8: js 0x10c709; adc dword ptr [rsi + 0x70], edi; ret; 
0x00000000001136ba: js 0x1136c4; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000114373: js 0x114327; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000011459c: js 0x1145ab; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000011465c: js 0x11466b; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000116d76: js 0x116d80; movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000125f71: js 0x125f7f; add byte ptr [rax - 0x77], cl; ret 0xcce9; 
0x000000000012aafa: js 0x12aaeb; dec dword ptr [rcx - 0x75]; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x000000000012ce5b: js 0x12ce65; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000013c930: js 0x13c940; mov rax, rdx; movsxd rdx, ecx; ret; 
0x00000000001536a8: js 0x1536a2; push qword ptr [rbx + rdi*2 - 0x7d]; ret 0x3901; 
0x000000000015b1e4: js 0x15b258; in al, dx; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000015c5fb: js 0x15c618; lea rax, [rip + 0x9497c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000015ca18: js 0x15ca28; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000018b1b4: js 0x18b1b8; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000001987ab: js 0x198824; ret 0x8b49; 
0x0000000000033c2f: js 0x33c95; mov qword ptr [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000000054335: js 0x54338; add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x000000000006ca59: js 0x6ca6a; test byte ptr [rsi + rdx - 0x7abb0000], bl; ror byte ptr [rdi], cl; xchg ebp, eax; ret 0x8341; 
0x0000000000087f5a: js 0x87f6c; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000008aeb1: js 0x8aeb8; ret; 
0x000000000008e4ec: js 0x8e517; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a2c34: js 0xa2c37; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x00000000000d0026: js 0xd0070; cmp eax, 0x19; jg 0xd0050; mov rax, r12; pop r12; ret; 
0x00000000000d0129: js 0xd0168; cmp eax, 0x71; jg 0xd0150; lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x00000000000e4495: js 0xe4497; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e521b: js 0xe5220; ret; 
0x00000000000b7705: js 0xffffffff83547982; call 0x7f98bf13; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000baf68: js 0xffffffffed3bb1c5; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf96: js 0xffffffffed3bb3f3; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafe8: js 0xffffffffed3bb845; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000134847: lahf; cmp cl, 5; jbe 0x1347b9; xor eax, eax; pop rbx; ret; 
0x0000000000185dfd: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000138380: lahf; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000004754d: lahf; popfq; sbb al, byte ptr [rax]; call 0xbd470; pop rbx; ret; 
0x000000000006eb9d: lahf; ret 0x2941; 
0x0000000000093fa8: lahf; ret 0x3949; 
0x0000000000067622: lahf; ret 0xd129; 
0x00000000000edba4: lahf; ret 0xd189; 
0x00000000000940d2: lahf; ret 0xd1e9; 
0x0000000000065834: lahf; ret 0xd629; 
0x0000000000068d66: lahf; ret 0xd729; 
0x00000000000bc089: lahf; ret 0xea81; 
0x0000000000074f79: lahf; ret; 
0x0000000000119dfb: lahf; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x000000000018648d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000009a495: lar eax, word ptr [rax]; add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x000000000016d85c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016dae6: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da76: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da06: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d996: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d926: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d8b6: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ded6: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de66: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddf6: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd86: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd16: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dca6: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc36: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbc6: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db56: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d046: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016d7ec: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d76c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6dc: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d65c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5dc: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d55c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4dc: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d45c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3dc: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d35c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2dc: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d25c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d1cc: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d13c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d0ac: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d03c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016d866: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016d7f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d771: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6e1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d661: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5e1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d561: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4e1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d461: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3e1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d361: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2e1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d261: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d1d1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d141: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d0b1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016daeb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da7b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da0b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d99b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d92b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d8bb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dedb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddfb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd8b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd1b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dcab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc3b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbcb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db5b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000013c23f: lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x00000000001533b9: lea eax, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153489: lea eax, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153559: lea eax, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x00000000000ce096: lea eax, [rax + rax - 1]; ret; 
0x0000000000102aab: lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000bce39: lea eax, [rax + rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ac184: lea eax, [rax + rdi + 0x10]; ret; 
0x00000000000ac194: lea eax, [rax + rdi + 0x20]; ret; 
0x00000000000ac674: lea eax, [rax + rdi + 0x30]; ret; 
0x00000000000ac164: lea eax, [rax + rdi - 0x10]; ret; 
0x00000000000dd75b: lea eax, [rax + rdx*8]; ret; 
0x000000000009c1ef: lea eax, [rax - 8]; ret; 
0x00000000001141e5: lea eax, [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1141f4; ret; 
0x00000000000e8431: lea eax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e8331: lea eax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c3f4: lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x000000000013c240: lea eax, [rcx + rax + 2]; pop rbx; ret; 
0x0000000000047c2c: lea eax, [rcx + rax*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000b1abd: lea eax, [rcx + rsi]; ret; 
0x0000000000051442: lea eax, [rcx - 0x43]; add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000087dff: lea eax, [rcx - 1]; ret; 
0x00000000000b861c: lea eax, [rdi + 0x10]; ret; 
0x00000000000b8fec: lea eax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b8631: lea eax, [rdi + 0x11]; ret; 
0x00000000000b9011: lea eax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b864f: lea eax, [rdi + 0x12]; ret; 
0x00000000000b903f: lea eax, [rdi + 0x12]; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b866f: lea eax, [rdi + 0x13]; ret; 
0x00000000000b906f: lea eax, [rdi + 0x13]; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b8692: lea eax, [rdi + 0x14]; ret; 
0x00000000000b90a2: lea eax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b86b1: lea eax, [rdi + 0x15]; ret; 
0x00000000000b90d1: lea eax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b86d1: lea eax, [rdi + 0x16]; ret; 
0x00000000000b9101: lea eax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b86f1: lea eax, [rdi + 0x17]; ret; 
0x00000000000b9131: lea eax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b8714: lea eax, [rdi + 0x18]; ret; 
0x00000000000b9164: lea eax, [rdi + 0x18]; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b8739: lea eax, [rdi + 0x19]; ret; 
0x00000000000b9199: lea eax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b8757: lea eax, [rdi + 0x1a]; ret; 
0x00000000000b91c7: lea eax, [rdi + 0x1a]; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b8777: lea eax, [rdi + 0x1b]; ret; 
0x00000000000b91f7: lea eax, [rdi + 0x1b]; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b8793: lea eax, [rdi + 0x1c]; ret; 
0x00000000000b9223: lea eax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b87b3: lea eax, [rdi + 0x1d]; ret; 
0x00000000000b9253: lea eax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b87d3: lea eax, [rdi + 0x1e]; ret; 
0x00000000000b9283: lea eax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b87f3: lea eax, [rdi + 0x1f]; ret; 
0x00000000000b92b3: lea eax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b9663: lea eax, [rdi + 0x20]; ret; 
0x00000000000b98d9: lea eax, [rdi + 0x40]; ret; 
0x000000000018b399: lea eax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018b53c: lea eax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b856d: lea eax, [rdi + 0xa]; ret; 
0x00000000000b8efd: lea eax, [rdi + 0xa]; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b858d: lea eax, [rdi + 0xb]; ret; 
0x00000000000b8f1d: lea eax, [rdi + 0xb]; sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b85af: lea eax, [rdi + 0xc]; ret; 
0x00000000000b8f3f: lea eax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b85cf: lea eax, [rdi + 0xd]; ret; 
0x00000000000b8f6f: lea eax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b85ef: lea eax, [rdi + 0xe]; ret; 
0x00000000000b8f9f: lea eax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b8609: lea eax, [rdi + 0xf]; ret; 
0x00000000000b8fc9: lea eax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b84b7: lea eax, [rdi + 1]; ret; 
0x00000000000b8dc7: lea eax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018abf7: lea eax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b84ca: lea eax, [rdi + 2]; ret; 
0x000000000018b1cb: lea eax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b8dea: lea eax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018ac0b: lea eax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b84d5: lea eax, [rdi + 3]; ret; 
0x000000000018b1e5: lea eax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b8e05: lea eax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000018ac25: lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b84e8: lea eax, [rdi + 4]; ret; 
0x00000000000b8e28: lea eax, [rdi + 4]; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b84fd: lea eax, [rdi + 5]; ret; 
0x00000000000b8e4d: lea eax, [rdi + 5]; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b851b: lea eax, [rdi + 6]; ret; 
0x00000000000b8e6b: lea eax, [rdi + 6]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b8527: lea eax, [rdi + 7]; ret; 
0x00000000000b8e87: lea eax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b853a: lea eax, [rdi + 8]; ret; 
0x00000000000b8eaa: lea eax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x000000000013b3e4: lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000b854f: lea eax, [rdi + 9]; ret; 
0x00000000000b8ecf: lea eax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000ac1b9: lea eax, [rdi + rax + 0x10]; ret; 
0x000000000018cdd7: lea eax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188297: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000ac1c9: lea eax, [rdi + rax + 0x20]; ret; 
0x00000000000ac0c3: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000018cdf7: lea eax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882b7: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018ce35: lea eax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882f5: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000013b885: lea eax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x0000000000188645: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000b14d0: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018cc9d: lea eax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018815d: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b16fb: lea eax, [rdi + rax]; ret; 
0x000000000018b2f3: lea eax, [rdi + rax]; vzeroupper; ret; 
0x00000000000a8b09: lea eax, [rdi + rdx - 1]; ret; 
0x000000000018ac3d: lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000013c767: lea eax, [rdi + rsi + 8]; mov rax, r8; ret; 
0x00000000000b19b9: lea eax, [rdi + rsi]; ret; 
0x00000000000cf4ee: lea eax, [rdi - 0x10]; ret; 
0x00000000000cf651: lea eax, [rdi - 0xc]; ret; 
0x000000000005ea30: lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000000cf671: lea eax, [rdi - 4]; ret; 
0x00000000000cf661: lea eax, [rdi - 8]; ret; 
0x00000000000b84a3: lea eax, [rdi]; ret; 
0x000000000018afde: lea eax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b8da3: lea eax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018ab75: lea eax, [rdi]; vzeroupper; ret; 
0x000000000017abad: lea eax, [rdx + 0xa]; ret; 
0x000000000017abcd: lea eax, [rdx + 0xb]; ret; 
0x000000000017abef: lea eax, [rdx + 0xc]; ret; 
0x000000000017ac0f: lea eax, [rdx + 0xd]; ret; 
0x000000000017ce77: lea eax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac2f: lea eax, [rdx + 0xe]; ret; 
0x000000000017aabf: lea eax, [rdx + 0xf]; ret; 
0x000000000017aae7: lea eax, [rdx + 1]; ret; 
0x000000000017aafd: lea eax, [rdx + 2]; ret; 
0x000000000017ab15: lea eax, [rdx + 3]; ret; 
0x000000000017ab2b: lea eax, [rdx + 4]; ret; 
0x000000000017ab3d: lea eax, [rdx + 5]; ret; 
0x000000000017ab5b: lea eax, [rdx + 6]; ret; 
0x000000000017cf22: lea eax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aa67: lea eax, [rdx + 7]; ret; 
0x000000000017ab6d: lea eax, [rdx + 8]; ret; 
0x000000000017ab8d: lea eax, [rdx + 9]; ret; 
0x00000000001229e7: lea eax, [rdx + rax*4]; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x000000000014933d: lea eax, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000121cf2: lea eax, [rdx + rcx]; cmp rax, qword ptr [rip + 0xcdd54]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000087dee: lea eax, [rdx + rdi]; ret; 
0x00000000000bc1b3: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000009c211: lea eax, [rdx - 0x10]; ret; 
0x00000000000440f0: lea eax, [rdx - 1]; mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x000000000017aad5: lea eax, [rdx]; ret; 
0x00000000000bcd58: lea eax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000bcd11: lea eax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bdf87: lea eax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bc851: lea eax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000d0131: lea eax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x000000000009f811: lea eax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f13a: lea eax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000009f661: lea eax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x00000000000bca01: lea eax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x000000000009f6a1: lea eax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000bcaf1: lea eax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc877: lea eax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000bc811: lea eax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc961: lea eax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x000000000009f89d: lea eax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f85f: lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000960ba: lea eax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x0000000000094720: lea eax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000a0737: lea eax, [rip + 0x162d3]; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x000000000009f217: lea eax, [rip + 0x17703]; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x00000000000328c1: lea eax, [rip + 0x181ab6]; ret; 
0x00000000000328a5: lea eax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000241a5: lea eax, [rip + 0x18fcf3]; ret; 
0x00000000000241b5: lea eax, [rip + 0x191abc]; ret; 
0x00000000000529f9: lea eax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000009f0e7: lea eax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x0000000000047f85: lea eax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x00000000000a030a: lea eax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x00000000000a09f5: lea eax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0685: lea eax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0525: lea eax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05aa: lea eax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000003284d: lea eax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000009faf7: lea eax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f837: lea eax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f247: lea eax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a8be1: lea eax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x000000000012da2f: lea eax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8af: lea eax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d96f: lea eax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012ee8a: lea eax, [rip + 0x5cc30]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000012da0e: lea eax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d94e: lea eax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d88e: lea eax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012dadf: lea eax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x000000000012da59: lea eax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d999: lea eax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8d9: lea eax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db19: lea eax, [rip + 0x62ec1]; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x00000000000a0797: lea eax, [rip + 0x86f3]; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x0000000000120dc3: lea eax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015c5fe: lea eax, [rip + 0x9497c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009f7c7: lea eax, [rip + 0x9733]; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f6f7: lea eax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000000a1c81: lea eax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000001463b3: lea eax, [rip + 0xaa747]; ret; 
0x0000000000146387: lea eax, [rip + 0xaa773]; add rsp, 8; ret; 
0x000000000009f761: lea eax, [rip + 0xaef9]; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a0401: lea eax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a09af: lea eax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a063f: lea eax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04df: lea eax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000bcdfa: lea eax, [rip + 0xcecd0]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcd79: lea eax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000001191d3: lea eax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x0000000000119183: lea eax, [rip + 0xd6777]; pop r12; pop r13; ret; 
0x0000000000118c8b: lea eax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000118c30: lea eax, [rip + 0xd6c5a]; pop rbp; pop r12; pop r13; ret; 
0x0000000000115b9c: lea eax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x00000000000a0469: lea eax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a08da: lea eax, [rip + 0xe560]; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a083a: lea eax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000a098e: lea eax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a061e: lea eax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04be: lea eax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a058f: lea eax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x00000000000a09d9: lea eax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0669: lea eax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0509: lea eax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a05c9: lea eax, [rip + 0xf0421]; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x00000000000a1cc1: lea eax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x00000000000d0fd9: lea eax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0ec9: lea eax, [rip - 0x10f]; ret; 
0x00000000000d0fe9: lea eax, [rip - 0x11f]; ret; 
0x000000000009d106: lea eax, [rip - 0x12c]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d169: lea eax, [rip - 0x18f]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012dafa: lea eax, [rip - 0x71c10]; cmovne rax, rdx; ret; 
0x000000000012d8f5: lea eax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9b5: lea eax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da75: lea eax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000010d257: lea eax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0eb9: lea eax, [rip - 0xff]; add rsp, 0x58; ret; 
0x0000000000123275: lea eax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000007b494: lea eax, [rsi + rsi*8 - 0x76b30001]; ret 0x894c; 
0x00000000001129af: lea ebx, [rax + rdi*8]; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x000000000013837f: lea ebx, [rdi - 0x76b70012]; ret; 
0x00000000000786d3: lea ebx, [rdx + rdi*8 - 0x7cb70001]; ret 0x4420; 
0x00000000000989ca: lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000000989cb: lea ecx, [rax + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000000b8125: lea ecx, [rbx + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d5: lea ecx, [rbx + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8491: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e51: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000013efd2: lea ecx, [rdi + 1]; test al, al; jne 0x13efbd; mov eax, r10d; ret; 
0x000000000011f8ce: lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x00000000001783b6: lea ecx, [rdx + 0x10]; jne 0x178900; ret; 
0x000000000017c747: lea ecx, [rdx + 0x10]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001786b4: lea ecx, [rdx + 0xa]; jne 0x178900; ret; 
0x000000000017caa5: lea ecx, [rdx + 0xa]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001786d4: lea ecx, [rdx + 0xb]; jne 0x178900; ret; 
0x000000000017cad5: lea ecx, [rdx + 0xb]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001786f4: lea ecx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000017cb05: lea ecx, [rdx + 0xc]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178716: lea ecx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017cb37: lea ecx, [rdx + 0xd]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178736: lea ecx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017cb67: lea ecx, [rdx + 0xe]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178756: lea ecx, [rdx + 0xf]; jne 0x178900; ret; 
0x000000000017cb97: lea ecx, [rdx + 0xf]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785ac: lea ecx, [rdx + 1]; jne 0x178900; ret; 
0x000000000017c94c: lea ecx, [rdx + 1]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000008df28: lea ecx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001785ce: lea ecx, [rdx + 2]; jne 0x178900; ret; 
0x000000000017c96f: lea ecx, [rdx + 2]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785f4: lea ecx, [rdx + 3]; jne 0x178900; ret; 
0x000000000017c995: lea ecx, [rdx + 3]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017860c: lea ecx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017c9bd: lea ecx, [rdx + 4]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000008558a: lea ecx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000178632: lea ecx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017c9e3: lea ecx, [rdx + 5]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178654: lea ecx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017ca15: lea ecx, [rdx + 6]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178672: lea ecx, [rdx + 7]; jne 0x178900; ret; 
0x000000000017ca43: lea ecx, [rdx + 7]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017834e: lea ecx, [rdx + 8]; jne 0x178900; ret; 
0x000000000017c6df: lea ecx, [rdx + 8]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178694: lea ecx, [rdx + 9]; jne 0x178900; ret; 
0x000000000017ca75: lea ecx, [rdx + 9]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017e027: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000001230f9: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123108; ret; 
0x0000000000123162: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a49: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aa6: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123ab8; ret; 
0x0000000000134845: lea ecx, [rdx - 0x61]; cmp cl, 5; jbe 0x1347b9; xor eax, eax; pop rbx; ret; 
0x000000000018806e: lea ecx, [rip + 0x1344c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018698d: lea ecx, [rip + 0x14b2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001866b9: lea ecx, [rip + 0x14e01]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000008e5b6: lea ecx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000001852a4: lea ecx, [rip + 0x16216]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001837ae: lea ecx, [rip + 0x17d0c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001817e9: lea ecx, [rip + 0x19cd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017ff14: lea ecx, [rip + 0x1b5a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001130c4: lea ecx, [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011314c: lea ecx, [rip + 0xc76400]; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000118c7f: lea ecx, [rip + 0xd6beb]; call 0x118f80; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000123366: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012334b: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123360; ret; 
0x0000000000123c7b: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123c90; ret; 
0x000000000018b724: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001904af: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbe9: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000a2c33: lea edi, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x0000000000162c37: lea edi, [rax + rax]; call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x000000000013b907: lea edi, [rax + rcx + 2]; cmp r8, rdi; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x000000000012c5e8: lea edi, [rbx - 0x76ffffff]; ret 0x2944; 
0x00000000000b78ad: lea edi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fd1: lea edi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b78d0: lea edi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8ff4: lea edi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b78f5: lea edi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9019: lea edi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b7913: lea edi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9047: lea edi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b7933: lea edi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9077: lea edi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7956: lea edi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90aa: lea edi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7975: lea edi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d9: lea edi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7995: lea edi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9109: lea edi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b5: lea edi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9139: lea edi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b79d8: lea edi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b916c: lea edi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a0d: lea edi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b91a1: lea edi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a3b: lea edi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91cf: lea edi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a6b: lea edi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91ff: lea edi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a97: lea edi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b922b: lea edi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac7: lea edi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b925b: lea edi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af7: lea edi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b928b: lea edi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b7b27: lea edi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92bb: lea edi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b77f3: lea edi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed7: lea edi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000b7811: lea edi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f05: lea edi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b7831: lea edi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f25: lea edi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b7853: lea edi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f47: lea edi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b7873: lea edi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f77: lea edi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b7893: lea edi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa7: lea edi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x000000000018a2cd: lea edi, [rdi + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018afe5: lea edi, [rdi + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76c7: lea edi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8daa: lea edi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a47b: lea edi, [rdi + 2]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1af: lea edi, [rdi + 2]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76eb: lea edi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dcf: lea edi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018a49f: lea edi, [rdi + 3]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1d3: lea edi, [rdi + 3]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b770e: lea edi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8df2: lea edi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018a4b9: lea edi, [rdi + 4]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1ed: lea edi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b7729: lea edi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e0d: lea edi, [rdi + 4]; jne 0xb97d0; ret; 
0x00000000000b774c: lea edi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e30: lea edi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b7771: lea edi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e55: lea edi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b778f: lea edi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e73: lea edi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b77ab: lea edi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8f: lea edi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b77ce: lea edi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8eb2: lea edi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000bbb63: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000313c0: lea edi, [rdi + rdi*8 - 1]; dec dword ptr [rcx + 1]; ret 0x8d48; 
0x000000000018a4e4: lea edi, [rdi + rdx + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b218: lea edi, [rdi + rdx + 1]; jne 0x18b430; vzeroupper; ret; 
0x000000000008ded5: lea edi, [rip + 0x1274e9]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000098dac: lea edi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa8: lea edi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a50: lea edi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093926: lea edi, [rip + 0x15ae94]; syscall; ret; 
0x000000000009101e: lea edi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f66: lea edi, [rip + 0x16a814]; syscall; ret; 
0x0000000000046c72: lea edi, [rip + 0x16d861]; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000047650: lea edi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198aa0: lea edi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dd0: lea edi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x000000000015d28a: lea edi, [rip + 0x93d38]; call 0x22580; test eax, eax; sete al; add rsp, 8; ret; 
0x0000000000142460: lea edi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c29: lea edi, [rip + 0xd7c21]; syscall; ret; 
0x00000000000440cd: lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x00000000000863fd: lea edx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000008df4f: lea edx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000094e74: lea edx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x0000000000087f55: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f24: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000006ab5b: lea edx, [rax - 0x77000005]; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000006a8af: lea edx, [rax - 0x7c000005]; ret 0x4830; 
0x00000000000424c0: lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000dd755: lea edx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000033d97: lea edx, [rdi + rdx*4]; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x0000000000033df8: lea edx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x000000000012310e: lea edx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000bdf8e: lea edx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f0ee: lea edx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000001880c7: lea edx, [rip + 0x133f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001880a2: lea edx, [rip + 0x13418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009f6fe: lea edx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000186707: lea edx, [rip + 0x14db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001866ed: lea edx, [rip + 0x14dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183807: lea edx, [rip + 0x17cb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001837e2: lea edx, [rip + 0x17cd8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181837: lea edx, [rip + 0x19c83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004754b: lea edx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x00000000000a09fc: lea edx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a068c: lea edx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a052c: lea edx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05a3: lea edx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x00000000001750e7: lea edx, [rip + 0x263d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750c2: lea edx, [rip + 0x263f8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b77: lea edx, [rip + 0x28943]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b5d: lea edx, [rip + 0x2895d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000012da36: lea edx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8b6: lea edx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d976: lea edx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012da15: lea edx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d955: lea edx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d895: lea edx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012dad8: lea edx, [rip + 0x5e012]; lea rax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x000000000012da60: lea edx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d9a0: lea edx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8e0: lea edx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db20: lea edx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x0000000000136ed3: lea edx, [rip + 0x7b8a7]; mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015317c: lea edx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000bc86c: lea edx, [rip + 0xc101e]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000012eb62: lea edx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x000000000009f19e: lea edx, [rip + 0xc42dc]; cmovne rax, rdx; ret; 
0x000000000009f768: lea edx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a09b6: lea edx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a0646: lea edx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04e6: lea edx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000bcd0a: lea edx, [rip + 0xcf2d0]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc84a: lea edx, [rip + 0xcfa60]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9fa: lea edx, [rip + 0xcfd00]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a0891: lea edx, [rip + 0xd01b9]; cmovne rax, rdx; ret; 
0x00000000000a07f1: lea edx, [rip + 0xd0239]; cmovne rax, rdx; ret; 
0x00000000000bcaea: lea edx, [rip + 0xd0360]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc80a: lea edx, [rip + 0xd0410]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc95a: lea edx, [rip + 0xd06e0]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a08e1: lea edx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0841: lea edx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000bcd5f: lea edx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x000000000009f21e: lea edx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f7ce: lea edx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x00000000000a073e: lea edx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x00000000000a079e: lea edx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x00000000000a8bda: lea edx, [rip + 0xdbd70]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c7a: lea edx, [rip + 0xe2b80]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x000000000009faec: lea edx, [rip + 0xe3fae]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82c: lea edx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x00000000000a03fa: lea edx, [rip + 0xe4130]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x000000000009f23c: lea edx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a1cba: lea edx, [rip + 0xe6650]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f80a: lea edx, [rip + 0xe8cf0]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f65a: lea edx, [rip + 0xe9070]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f69a: lea edx, [rip + 0xe91d0]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000b1467: lea edx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1442: lea edx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a0995: lea edx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a0625: lea edx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04c5: lea edx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a0588: lea edx, [rip + 0xeb572]; lea rax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x00000000000aee07: lea edx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aeded: lea edx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a09e0: lea edx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0670: lea edx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0510: lea edx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a05d0: lea edx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x00000000000a044f: lea edx, [rip + 0xf0a1b]; cmovne rax, rdx; ret; 
0x000000000009f141: lea edx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000012d00e: lea edx, [rip - 0x104]; test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x000000000012daf3: lea edx, [rip - 0x71b89]; lea rax, [rip - 0x71c10]; cmovne rax, rdx; ret; 
0x000000000012d8fc: lea edx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9bc: lea edx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da7c: lea edx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000010d24c: lea edx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0e99: lea edx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb9: lea edx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000000115f8a: lea edx, [rsi + 1]; jne 0x115f60; ret; 
0x00000000000bbb57: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000113b1f: lea edx, [rsp + 0xc]; mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x000000000007c598: lea esi, [rax]; idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x00000000000860c0: lea esi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000115f7f: lea esi, [rdx + 1]; mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x0000000000077585: lea esi, [rdx + rdi*8 - 0x76b60001]; ret; 
0x000000000015d216: lea esi, [rdx - 1]; cmp si, 3; ja 0x15d230; cmp dx, cx; sete al; ret; 
0x000000000014589e: lea esi, [rip + 0x6fde0]; call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x00000000000bbb68: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000349da: lea esi, [rsp + 8]; xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000075cc3: lea esp, [rax]; idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e14a7: lea esp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000046070: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000001533b8: lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153488: lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153558: lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x000000000013c766: lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x000000000014933c: lea r8d, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000018b723: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001904ae: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbe8: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000047c2b: lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000e5201: lea rax, [rax + rax - 1]; ret; 
0x00000000000bce38: lea rax, [rax + rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ac183: lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac193: lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac673: lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000ac163: lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000dd75a: lea rax, [rax + rdx*8]; ret; 
0x000000000009c1ee: lea rax, [rax - 8]; ret; 
0x00000000000e8430: lea rax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e8330: lea rax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b1abc: lea rax, [rcx + rsi]; ret; 
0x00000000000bb703: lea rax, [rcx - 1]; ret; 
0x00000000000b861b: lea rax, [rdi + 0x10]; ret; 
0x00000000000b8feb: lea rax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b8630: lea rax, [rdi + 0x11]; ret; 
0x00000000000b9010: lea rax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b864e: lea rax, [rdi + 0x12]; ret; 
0x00000000000b903e: lea rax, [rdi + 0x12]; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b866e: lea rax, [rdi + 0x13]; ret; 
0x00000000000b906e: lea rax, [rdi + 0x13]; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b8691: lea rax, [rdi + 0x14]; ret; 
0x00000000000b90a1: lea rax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b86b0: lea rax, [rdi + 0x15]; ret; 
0x00000000000b90d0: lea rax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b86d0: lea rax, [rdi + 0x16]; ret; 
0x00000000000b9100: lea rax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b86f0: lea rax, [rdi + 0x17]; ret; 
0x00000000000b9130: lea rax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b8713: lea rax, [rdi + 0x18]; ret; 
0x00000000000b9163: lea rax, [rdi + 0x18]; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b8738: lea rax, [rdi + 0x19]; ret; 
0x00000000000b9198: lea rax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b8756: lea rax, [rdi + 0x1a]; ret; 
0x00000000000b91c6: lea rax, [rdi + 0x1a]; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b8776: lea rax, [rdi + 0x1b]; ret; 
0x00000000000b91f6: lea rax, [rdi + 0x1b]; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b8792: lea rax, [rdi + 0x1c]; ret; 
0x00000000000b9222: lea rax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b87b2: lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9252: lea rax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b87d2: lea rax, [rdi + 0x1e]; ret; 
0x00000000000b9282: lea rax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b87f2: lea rax, [rdi + 0x1f]; ret; 
0x00000000000b92b2: lea rax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b9662: lea rax, [rdi + 0x20]; ret; 
0x00000000000b98d8: lea rax, [rdi + 0x40]; ret; 
0x000000000018b398: lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018b53b: lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b856c: lea rax, [rdi + 0xa]; ret; 
0x00000000000b8efc: lea rax, [rdi + 0xa]; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b858c: lea rax, [rdi + 0xb]; ret; 
0x00000000000b8f1c: lea rax, [rdi + 0xb]; sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b85ae: lea rax, [rdi + 0xc]; ret; 
0x00000000000b8f3e: lea rax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b85ce: lea rax, [rdi + 0xd]; ret; 
0x00000000000b8f6e: lea rax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b85ee: lea rax, [rdi + 0xe]; ret; 
0x00000000000b8f9e: lea rax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b8608: lea rax, [rdi + 0xf]; ret; 
0x00000000000b8fc8: lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b84b6: lea rax, [rdi + 1]; ret; 
0x00000000000b8dc6: lea rax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018abf6: lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b84c9: lea rax, [rdi + 2]; ret; 
0x000000000018b1ca: lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b8de9: lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018ac0a: lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b84d4: lea rax, [rdi + 3]; ret; 
0x000000000018b1e4: lea rax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b8e04: lea rax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000018ac24: lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b84e7: lea rax, [rdi + 4]; ret; 
0x00000000000b8e27: lea rax, [rdi + 4]; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b84fc: lea rax, [rdi + 5]; ret; 
0x00000000000b8e4c: lea rax, [rdi + 5]; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b851a: lea rax, [rdi + 6]; ret; 
0x00000000000b8e6a: lea rax, [rdi + 6]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b8526: lea rax, [rdi + 7]; ret; 
0x00000000000b8e86: lea rax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b8539: lea rax, [rdi + 8]; ret; 
0x00000000000b8ea9: lea rax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000b854e: lea rax, [rdi + 9]; ret; 
0x00000000000b8ece: lea rax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x000000000018b2f2: lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000000ac1b8: lea rax, [rdi + rax + 0x10]; ret; 
0x000000000018cdd6: lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188296: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000ac1c8: lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac0c2: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000018cdf6: lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882b6: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018ce34: lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882f4: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000013b884: lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x0000000000188644: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000b14cf: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018cc9c: lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018815c: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b16fa: lea rax, [rdi + rax]; ret; 
0x00000000000a8b08: lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ac3c: lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000000b19b8: lea rax, [rdi + rsi]; ret; 
0x00000000000cf4ed: lea rax, [rdi - 0x10]; ret; 
0x00000000000cf650: lea rax, [rdi - 0xc]; ret; 
0x00000000000cf670: lea rax, [rdi - 4]; ret; 
0x00000000000cf660: lea rax, [rdi - 8]; ret; 
0x00000000000b84a2: lea rax, [rdi]; ret; 
0x000000000018afdd: lea rax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b8da2: lea rax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018ab74: lea rax, [rdi]; vzeroupper; ret; 
0x000000000017abac: lea rax, [rdx + 0xa]; ret; 
0x000000000017abcc: lea rax, [rdx + 0xb]; ret; 
0x000000000017abee: lea rax, [rdx + 0xc]; ret; 
0x000000000017ac0e: lea rax, [rdx + 0xd]; ret; 
0x000000000017ce76: lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac2e: lea rax, [rdx + 0xe]; ret; 
0x000000000017aabe: lea rax, [rdx + 0xf]; ret; 
0x000000000017aae6: lea rax, [rdx + 1]; ret; 
0x000000000017aafc: lea rax, [rdx + 2]; ret; 
0x000000000017ab14: lea rax, [rdx + 3]; ret; 
0x000000000017ab2a: lea rax, [rdx + 4]; ret; 
0x000000000017ab3c: lea rax, [rdx + 5]; ret; 
0x000000000017ab5a: lea rax, [rdx + 6]; ret; 
0x000000000017cf21: lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aa66: lea rax, [rdx + 7]; ret; 
0x000000000017ab6c: lea rax, [rdx + 8]; ret; 
0x000000000017ab8c: lea rax, [rdx + 9]; ret; 
0x00000000001229e6: lea rax, [rdx + rax*4]; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000121cf1: lea rax, [rdx + rcx]; cmp rax, qword ptr [rip + 0xcdd54]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000009c210: lea rax, [rdx - 0x10]; ret; 
0x000000000017aad4: lea rax, [rdx]; ret; 
0x00000000000bcd57: lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x00000000000bcd10: lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bdf86: lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bc850: lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000d0130: lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x000000000009f810: lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f139: lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000009f660: lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x00000000000bca00: lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x000000000009f6a0: lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000bcaf0: lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc876: lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000bc810: lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc960: lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x000000000009f89c: lea rax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f85e: lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000960b9: lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x000000000009471f: lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000a0736: lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x000000000009f216: lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x00000000000328c0: lea rax, [rip + 0x181ab6]; ret; 
0x00000000000328a4: lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000241a4: lea rax, [rip + 0x18fcf3]; ret; 
0x00000000000241b4: lea rax, [rip + 0x191abc]; ret; 
0x00000000000529f8: lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000009f0e6: lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x0000000000047f84: lea rax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x00000000000a0309: lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x00000000000a09f4: lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0684: lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0524: lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05a9: lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000003284c: lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000009faf6: lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f836: lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f246: lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a8be0: lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x000000000012da2e: lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8ae: lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d96e: lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012ee89: lea rax, [rip + 0x5cc30]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000012da0d: lea rax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d94d: lea rax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d88d: lea rax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012dade: lea rax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x000000000012da58: lea rax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d998: lea rax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8d8: lea rax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db18: lea rax, [rip + 0x62ec1]; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x00000000000a0796: lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x0000000000120dc2: lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015c5fd: lea rax, [rip + 0x9497c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009f7c6: lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f6f6: lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000000a1c80: lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000001463b2: lea rax, [rip + 0xaa747]; ret; 
0x0000000000146386: lea rax, [rip + 0xaa773]; add rsp, 8; ret; 
0x000000000009f760: lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a0400: lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a09ae: lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a063e: lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04de: lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000bcdf9: lea rax, [rip + 0xcecd0]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcd78: lea rax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000001191d2: lea rax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x0000000000119182: lea rax, [rip + 0xd6777]; pop r12; pop r13; ret; 
0x0000000000118c8a: lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000118c2f: lea rax, [rip + 0xd6c5a]; pop rbp; pop r12; pop r13; ret; 
0x0000000000115b9b: lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x00000000000a0468: lea rax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a08d9: lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0839: lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000a098d: lea rax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a061d: lea rax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04bd: lea rax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a058e: lea rax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x00000000000a09d8: lea rax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0668: lea rax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0508: lea rax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a05c8: lea rax, [rip + 0xf0421]; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x00000000000a1cc0: lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x00000000000d0fd8: lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0ec8: lea rax, [rip - 0x10f]; ret; 
0x00000000000d0fe8: lea rax, [rip - 0x11f]; ret; 
0x000000000009d105: lea rax, [rip - 0x12c]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d168: lea rax, [rip - 0x18f]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012daf9: lea rax, [rip - 0x71c10]; cmovne rax, rdx; ret; 
0x000000000012d8f4: lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9b4: lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da74: lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000010d256: lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0eb8: lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x0000000000123274: lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000cf629: lea rax, es:[rdi - 0x10]; ret; 
0x00000000000b8124: lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d4: lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8490: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e50: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000013efd1: lea rcx, [rdi + 1]; test al, al; jne 0x13efbd; mov eax, r10d; ret; 
0x00000000001783b5: lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x000000000017c746: lea rcx, [rdx + 0x10]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001786b3: lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x000000000017caa4: lea rcx, [rdx + 0xa]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001786d3: lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x000000000017cad4: lea rcx, [rdx + 0xb]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001786f3: lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000017cb04: lea rcx, [rdx + 0xc]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178715: lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017cb36: lea rcx, [rdx + 0xd]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178735: lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017cb66: lea rcx, [rdx + 0xe]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178755: lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x000000000017cb96: lea rcx, [rdx + 0xf]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785ab: lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x000000000017c94b: lea rcx, [rdx + 1]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000008df27: lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001785cd: lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x000000000017c96e: lea rcx, [rdx + 2]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001785f3: lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x000000000017c994: lea rcx, [rdx + 3]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017860b: lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017c9bc: lea rcx, [rdx + 4]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000085589: lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000178631: lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017c9e2: lea rcx, [rdx + 5]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178653: lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017ca14: lea rcx, [rdx + 6]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178671: lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x000000000017ca42: lea rcx, [rdx + 7]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017834d: lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x000000000017c6de: lea rcx, [rdx + 8]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178693: lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000017ca74: lea rcx, [rdx + 9]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017e026: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x00000000001230f8: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123108; ret; 
0x0000000000123161: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a48: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aa5: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123ab8; ret; 
0x000000000018806d: lea rcx, [rip + 0x1344c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018698c: lea rcx, [rip + 0x14b2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001866b8: lea rcx, [rip + 0x14e01]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000008e5b5: lea rcx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000001852a3: lea rcx, [rip + 0x16216]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001837ad: lea rcx, [rip + 0x17d0c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001817e8: lea rcx, [rip + 0x19cd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017ff13: lea rcx, [rip + 0x1b5a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000118c7e: lea rcx, [rip + 0xd6beb]; call 0x118f80; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000123365: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012334a: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123360; ret; 
0x0000000000123c7a: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123c90; ret; 
0x0000000000162c36: lea rdi, [r8 + rax]; call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x00000000000a2c32: lea rdi, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000013b906: lea rdi, [rax + rcx + 2]; cmp r8, rdi; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x00000000000b78ac: lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fd0: lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b78cf: lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8ff3: lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b78f4: lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9018: lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b7912: lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9046: lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b7932: lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9076: lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7955: lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a9: lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7974: lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d8: lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7994: lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9108: lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b4: lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9138: lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b79d7: lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b916b: lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a0c: lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b91a0: lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a3a: lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91ce: lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a6a: lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fe: lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a96: lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b922a: lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac6: lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b925a: lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af6: lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b928a: lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b7b26: lea rdi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92ba: lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b77f2: lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed6: lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000b7810: lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f04: lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b7830: lea rdi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f24: lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b7852: lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f46: lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b7872: lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f76: lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b7892: lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa6: lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x000000000018a2cc: lea rdi, [rdi + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018afe4: lea rdi, [rdi + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76c6: lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8da9: lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a47a: lea rdi, [rdi + 2]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1ae: lea rdi, [rdi + 2]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76ea: lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dce: lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018a49e: lea rdi, [rdi + 3]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1d2: lea rdi, [rdi + 3]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b770d: lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8df1: lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018a4b8: lea rdi, [rdi + 4]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1ec: lea rdi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b7728: lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e0c: lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x00000000000b774b: lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e2f: lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b7770: lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e54: lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b778e: lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e72: lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b77aa: lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8e: lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b77cd: lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8eb1: lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000bbb62: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000018a4e3: lea rdi, [rdi + rdx + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b217: lea rdi, [rdi + rdx + 1]; jne 0x18b430; vzeroupper; ret; 
0x000000000008ded4: lea rdi, [rip + 0x1274e9]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000098dab: lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa7: lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a4f: lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093925: lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x000000000009101d: lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f65: lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000046c71: lea rdi, [rip + 0x16d861]; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x000000000004764f: lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198a9f: lea rdi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dcf: lea rdi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x000000000015d289: lea rdi, [rip + 0x93d38]; call 0x22580; test eax, eax; sete al; add rsp, 8; ret; 
0x000000000014245f: lea rdi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c28: lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x0000000000087f54: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f23: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000000863fc: lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000008df4e: lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000094e73: lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000dd754: lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000033d96: lea rdx, [rdi + rdx*4]; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x0000000000033df7: lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x000000000012310d: lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000bdf8d: lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f0ed: lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000001880c6: lea rdx, [rip + 0x133f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001880a1: lea rdx, [rip + 0x13418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009f6fd: lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000186706: lea rdx, [rip + 0x14db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001866ec: lea rdx, [rip + 0x14dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183806: lea rdx, [rip + 0x17cb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001837e1: lea rdx, [rip + 0x17cd8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181836: lea rdx, [rip + 0x19c83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004754a: lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x00000000000a09fb: lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a068b: lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a052b: lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05a2: lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x00000000001750e6: lea rdx, [rip + 0x263d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750c1: lea rdx, [rip + 0x263f8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b76: lea rdx, [rip + 0x28943]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b5c: lea rdx, [rip + 0x2895d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000012da35: lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8b5: lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d975: lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012da14: lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d954: lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d894: lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012dad7: lea rdx, [rip + 0x5e012]; lea rax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x000000000012da5f: lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d99f: lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8df: lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db1f: lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x0000000000136ed2: lea rdx, [rip + 0x7b8a7]; mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015317b: lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000bc86b: lea rdx, [rip + 0xc101e]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000012eb61: lea rdx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x000000000009f19d: lea rdx, [rip + 0xc42dc]; cmovne rax, rdx; ret; 
0x000000000009f767: lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000a09b5: lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a0645: lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04e5: lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000bcd09: lea rdx, [rip + 0xcf2d0]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc849: lea rdx, [rip + 0xcfa60]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f9: lea rdx, [rip + 0xcfd00]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a0890: lea rdx, [rip + 0xd01b9]; cmovne rax, rdx; ret; 
0x00000000000a07f0: lea rdx, [rip + 0xd0239]; cmovne rax, rdx; ret; 
0x00000000000bcae9: lea rdx, [rip + 0xd0360]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc809: lea rdx, [rip + 0xd0410]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc959: lea rdx, [rip + 0xd06e0]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a08e0: lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0840: lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x00000000000bcd5e: lea rdx, [rip + 0xd587b]; cmovne rax, rdx; ret; 
0x000000000009f21d: lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f7cd: lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x00000000000a073d: lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x00000000000a079d: lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x00000000000a8bd9: lea rdx, [rip + 0xdbd70]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c79: lea rdx, [rip + 0xe2b80]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x000000000009faeb: lea rdx, [rip + 0xe3fae]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82b: lea rdx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x00000000000a03f9: lea rdx, [rip + 0xe4130]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x000000000009f23b: lea rdx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a1cb9: lea rdx, [rip + 0xe6650]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f809: lea rdx, [rip + 0xe8cf0]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f659: lea rdx, [rip + 0xe9070]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f699: lea rdx, [rip + 0xe91d0]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000b1466: lea rdx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1441: lea rdx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a0994: lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a0624: lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04c4: lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a0587: lea rdx, [rip + 0xeb572]; lea rax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x00000000000aee06: lea rdx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aedec: lea rdx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a09df: lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a066f: lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a050f: lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a05cf: lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x00000000000a044e: lea rdx, [rip + 0xf0a1b]; cmovne rax, rdx; ret; 
0x000000000009f140: lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000012d00d: lea rdx, [rip - 0x104]; test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x000000000012daf2: lea rdx, [rip - 0x71b89]; lea rax, [rip - 0x71c10]; cmovne rax, rdx; ret; 
0x000000000012d8fb: lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9bb: lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da7b: lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x000000000010d24b: lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0e98: lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb8: lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000000115f89: lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x00000000000bbb56: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000113b1e: lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x00000000000860bf: lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000115f7e: lea rsi, [rdx + 1]; mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x000000000014589d: lea rsi, [rip + 0x6fde0]; call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x00000000000bbb67: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000349d9: lea rsi, [rsp + 8]; xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000e14a6: lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x000000000004606f: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000e14a5: lea rsp, ss:[rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x00000000000e6ecf: leave; add cl, byte ptr [rax - 0x7d]; ret 0xe902; 
0x0000000000043f2a: leave; add dword ptr [rsi + 0xf], esp; fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001838c4: leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000102817: leave; add rsp, 8; mov eax, r9d; ret; 
0x0000000000042179: leave; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000a08e3: leave; and cl, byte ptr [rip + 0x450f4800]; ret 0xfc3; 
0x00000000001025fe: leave; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000160af9: leave; call 0x63a00; test rbx, rbx; jne 0x160b10; pop rbx; ret; 
0x0000000000160b29: leave; call 0x6bbd0; test rbx, rbx; jne 0x160b40; pop rbx; ret; 
0x000000000010d5a3: leave; call 0xffffffffc774d5b6; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000bb9e6: leave; cmove rax, rdx; ret; 
0x00000000000cf157: leave; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000c66c5: leave; fimul word ptr [rsi]; add al, ch; ret 0xf6d8; 
0x000000000013f079: leave; je 0x13f028; cmp r11d, r9d; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x00000000000a88cd: leave; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x0000000000123100: leave; jne 0x123108; ret; 
0x0000000000123169: leave; jne 0x123170; ret; 
0x0000000000123a50: leave; jne 0x123a58; ret; 
0x0000000000123aad: leave; jne 0x123ab8; ret; 
0x000000000012dced: leave; jne 0x12dc98; mov rax, rdi; ret; 
0x000000000005586d: leave; jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x000000000008a71b: leave; jne 0x8a730; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000000bb4e0: leave; jne 0xbb4d0; ret; 
0x00000000000bb590: leave; jne 0xbb580; ret; 
0x00000000000bb850: leave; jne 0xbb840; sub rax, 1; ret; 
0x00000000000bcb40: leave; jne 0xbcb18; mov rax, r8; ret; 
0x0000000000184e3f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000000b6621: leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001205a3: leave; mov eax, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000c6b51: leave; mov eax, r9d; ret; 
0x0000000000093e73: leave; movsxd rdx, edx; call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000aa55c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000ee216: leave; nop word ptr [rax + rax]; ret; 
0x000000000011f494: leave; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f544: leave; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000038ca2: leave; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x000000000007c793: leave; pop rsp; cli; dec dword ptr [rax - 0x77]; ret 0xd9e9; 
0x000000000010259f: leave; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bf: leave; push 1; call 0x102520; add rsp, 0x18; ret; 
0x0000000000116ca3: leave; push rcx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8ca: leave; rdpkru; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x00000000000c7aa3: leave; ret 0xfff6; 
0x00000000000578c8: leave; ret; 
0x0000000000129472: leave; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000005584e: leave; xor eax, eax; ret; 
0x0000000000107da0: lock add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000001138bc: lock add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret 0x8941; 
0x0000000000107542: lock add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b48; 
0x000000000018d930: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009ef0a: lock add dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], cl; xchg esp, eax; ret 0xd084; 
0x00000000001160fe: lock dec dword ptr [rax + 1]; ret; 
0x0000000000115bb8: lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000117014: lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000119766: lock dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000011cbe0: lock dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x000000000012b001: lock dec dword ptr [rax - 0x7d]; ret; 
0x000000000011cc1d: lock dec dword ptr [rbp + rcx*4 + 5]; adc edx, dword ptr [rdx - 0x7ab7fff7]; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x000000000017e9b0: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000192050: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000001369dc: lodsb al, byte ptr [rsi]; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000000cb73a: lodsb al, byte ptr [rsi]; clc; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013f07b: lodsb al, byte ptr [rsi]; cmp r11d, r9d; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x000000000013fec0: lodsb al, byte ptr [rsi]; hlt; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000017efd4: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000121174: lodsb al, byte ptr [rsi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211ac: lodsb al, byte ptr [rsi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c869: lodsb al, byte ptr [rsi]; ret 0x8207; 
0x0000000000041254: lodsb al, byte ptr [rsi]; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000e81e4: lodsb al, byte ptr [rsi]; xor eax, eax; ret; 
0x00000000000d1094: lodsd eax, dword ptr [rsi]; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e518d: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000000f256f: lodsd eax, dword ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], al; ret 0x3941; 
0x0000000000182b40: lodsd eax, dword ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a0649: lodsd eax, dword ptr [rsi]; or al, 0; cmovne rax, rdx; ret; 
0x000000000012109c: lodsd eax, dword ptr [rsi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000141108: lodsd eax, dword ptr [rsi]; or al, byte ptr [rax]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x00000000001411f8: lodsd eax, dword ptr [rsi]; or al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000056492: lodsd eax, dword ptr [rsi]; ret; 
0x00000000000e2c8f: lodsd eax, dword ptr [rsi]; sbb ebx, edi; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x00000000000d33a7: lodsd eax, dword ptr [rsi]; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000010d58b: loope 0x10d575; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010dc98: loope 0x10dca7; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011368b: loope 0x113614; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011531e: loope 0x11531e; mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115330; ret; 
0x000000000012d8ac: loope 0x12d8b6; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d96c: loope 0x12d976; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012d9b8: loope 0x12d9b2; dec dword ptr [rax - 0x73]; adc eax, 0xfff8e0fe; cmove rax, rdx; ret; 
0x000000000012da2c: loope 0x12da36; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012da78: loope 0x12da72; dec dword ptr [rax - 0x73]; adc eax, 0xfff8e01e; cmove rax, rdx; ret; 
0x000000000014cfc2: loope 0x14d02a; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x00000000001684d7: loope 0x168525; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016851f: loope 0x16856d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016855d: loope 0x1685ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168595: loope 0x1685e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001685d3: loope 0x168621; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016860b: loope 0x168659; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168633: loope 0x168681; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aeb7: loope 0x16af05; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aeff: loope 0x16af4d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016af3d: loope 0x16af8b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016af75: loope 0x16afc3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016afb3: loope 0x16b001; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016afeb: loope 0x16b039; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b013: loope 0x16b061; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d0ba: loope 0x16d0af; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016fbea: loope 0x16fbdf; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000017871b: loope 0x17871e; add byte ptr [rax], al; ret; 
0x000000000018aca3: loope 0x18aced; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000190d7b: loope 0x190d7d; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x00000000001989ee: loope 0x198a4b; ret; 
0x000000000005631b: loope 0x56369; mov dword ptr [rdi], ecx; ret; 
0x000000000005634c: loope 0x5639a; mov dword ptr [rdi - 8], ecx; ret; 
0x00000000000563cd: loope 0x5641b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000005ef4d: loope 0x5ef63; add byte ptr [rcx - 0x77], cl; ret 0x8b48; 
0x000000000006e020: loope 0x6e021; inc dword ptr [rcx - 0xa]; ret; 
0x00000000000759a2: loope 0x759a4; add byte ptr [rax + 0x39], cl; ret; 
0x000000000008282b: loope 0x82827; stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000009471e: loope 0x94768; lea eax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000a04dc: loope 0xa04e6; lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000a063c: loope 0xa0646; lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a09ac: loope 0xa09b6; lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000b1d4c: loope 0xb1d6e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000b1f68: loope 0xb1f8a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000b6e56: loope 0xb6ebe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b8496: loope 0xb84fe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000ba166: loope 0xba1ce; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000bac56: loope 0xbacbe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000bc131: loope 0xbc133; cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000cface: loope 0xcfadf; je 0xcfaf0; ret; 
0x00000000000df677: loope 0xdf689; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000ee3e2: loope 0xee3e3; add esi, esi; ret; 
0x00000000000f5ba1: loope 0xf5ba2; add esi, esi; ret 0xf04; 
0x00000000000f722a: loope 0xf722b; add esi, esi; ret 0xf04; 
0x00000000000f81e8: loope 0xf81e9; add esi, esi; ret 0xf04; 
0x0000000000119180: minps xmm1, xmmword ptr [rax - 0x73]; add eax, 0xd6777; pop r12; pop r13; ret; 
0x000000000014d1a0: mov ah, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000011fcd5: mov ah, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fce4; ret; 
0x0000000000114588: mov ah, 0; clc; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x00000000001097a2: mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000001091b0: mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001097fb: mov ah, 0x24; nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000df5b8: mov ah, 0x2d; hlt; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000060fdf: mov ah, 0x5b; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000014c4b8: mov ah, 0x5e; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000a0648: mov ah, 0xad; or al, 0; cmovne rax, rdx; ret; 
0x0000000000125ab8: mov ah, 0xc8; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012489b: mov ah, 0xc; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012da38: mov ah, 0xd9; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000117013: mov ah, 0xf0; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000e8e22: mov ah, byte ptr [rdx - 0x76befffd]; ret 0x3b4c; 
0x000000000011fa65: mov al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fa74; ret; 
0x0000000000028ee2: mov al, 0; add byte ptr [rcx - 0x77], al; ret 0xcde9; 
0x00000000000d0ddc: mov al, 0x11; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d40d2: mov al, 0x11; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000cfe49: mov al, 0x1e; test ebx, ebp; push rcx; mov eax, 0x148051e; ret 0xb848; 
0x0000000000112921: mov al, 0x66; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000c7c10: mov al, 0x89; ret 0xff25; 
0x00000000001882df: mov al, 0xc5; std; xlatb; ret; 
0x00000000000e36a8: mov al, 0xe8; ret 0x4c3; 
0x00000000000a0621: mov al, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xeb025; cmove rax, rdx; ret; 
0x000000000017cb9c: mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000043f32: mov al, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f24: mov al, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044064: mov al, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000639af: mov al, 3; add byte ptr [rax + rax*8 - 0x74b7cd8c], al; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000000b7acc: mov al, 4; add byte ptr [rax], al; ret; 
0x00000000000b76cc: mov al, 8; add byte ptr [rax], al; ret; 
0x000000000008e586: mov al, ah; add byte ptr [rax], al; add al, ch; movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000000d4c4c: mov al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000010da35: mov al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10da44; ret; 
0x000000000017c9c2: mov al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aaf6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39fb: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000017ab24: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a29: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000b3aad: mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x000000000017aad0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b39d5: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000184e40: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000153838: mov al, ch; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000017ab34: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a49: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000000b3acd: mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000017aae0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017aaf0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f5: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b39e5: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000014aecf: mov bh, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x0000000000051c90: mov bh, 0x16; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000018abf1: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000018b2d1: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001899f1: mov bh, 0x16; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016de81: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000189161: mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000120dc5: mov bh, 0x18; or dword ptr [rax], eax; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000bbc36: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000a8b7f: mov bh, 0x44; and al, 0xec; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000033dfa: mov bh, 0x44; mov eax, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000000d13f6: mov bh, 0x47; adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xb70f; 
0x0000000000190c18: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x0000000000138525: mov bh, 0x53; or eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000000a89fa: mov bh, 0x54; and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8ab7: mov bh, 0x54; and al, 0xc; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a89e2: mov bh, 0x54; and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a8aa7: mov bh, 0x54; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8a69: mov bh, 0x54; and al, 0xf8; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x000000000014d0df: mov bh, 0x80; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000003408a: mov bh, 0xc0; ret; 
0x000000000012faed: mov bh, 0xc7; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012075b: mov bh, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000012070c: mov bh, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d0d4: mov bh, 0xe8; add byte ptr [rax], al; add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000018ac01: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189171: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a5b1: mov bh, 0xe; movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000e6c3a: mov bh, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x000000000012fb3c: mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000136339: mov bh, 0xf6; push 2; call 0x1358b0; add rsp, 0x18; ret; 
0x0000000000120dc0: mov bh, 0xff; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000121faa: mov bh, 2; cmp ax, -1; je 0x121fe0; add eax, 1; mov word ptr [rdx], ax; ret; 
0x000000000012ceb7: mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x00000000000d6ddc: mov bh, 5; adc byte ptr [rbp + 0x3941000d], cl; ret 0x8c0f; 
0x00000000000d79ed: mov bh, 5; adc dword ptr [rcx + 0x3941000d], eax; ret 0x8c0f; 
0x00000000000d6dec: mov bh, 5; add cl, byte ptr [rbp + 0x3941000d]; ret 0x8c0f; 
0x00000000000d79fd: mov bh, 5; add eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000000d6dac: mov bh, 5; cmp cl, byte ptr [rbp + 0x3941000d]; ret 0x8c0f; 
0x00000000000d79bd: mov bh, 5; cmp eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000000d7a2d: mov bh, 5; fld dword ptr [rax + 0x3941000d]; ret 0x8c0f; 
0x000000000010c755: mov bh, 7; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000eaf38: mov bh, byte ptr [rcx]; ret 0x840f; 
0x000000000010ded2: mov bl, 0; add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000011fd98: mov bl, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000019250e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000986c9: mov bl, 0x44; adc eax, 0x4c834a00; xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000186709: mov bl, 0x4d; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183809: mov bl, 0x7c; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009089e: mov bl, 0x90; endbr64; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000120b54: mov bl, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000124973: mov bl, 0xc; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000471e0: mov bl, 0xfd; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000043423: mov bl, byte ptr [r10]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000433e8: mov bl, byte ptr [rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000043424: mov bl, byte ptr [rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000013c238: mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013f081: mov byte ptr [r10], 0; ret; 
0x00000000000a8745: mov byte ptr [r11], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000001419ed: mov byte ptr [r12 + 0x18], 0; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000152bf6: mov byte ptr [r12 + rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001156cb: mov byte ptr [r12], 0; mov rax, r12; pop r12; ret; 
0x000000000003007c: mov byte ptr [r12], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009f9de: mov byte ptr [r13 + rax], 0; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000013c5d5: mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x000000000013c5dc: mov byte ptr [r8 + 2], 0; ret; 
0x000000000009959b: mov byte ptr [r8 + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000993a4: mov byte ptr [r8 + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x00000000000266e2: mov byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000a86e7: mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x000000000009f249: mov byte ptr [r9], 0; cmovne rax, rdx; ret; 
0x0000000000192127: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000012dce9: mov byte ptr [rax + 1], cl; test cl, cl; jne 0x12dc98; mov rax, rdi; ret; 
0x000000000013c5d6: mov byte ptr [rax + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x000000000013c5dd: mov byte ptr [rax + 2], 0; ret; 
0x00000000000a8a75: mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8a93: mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8ac4: mov byte ptr [rax + 6], dl; ret; 
0x000000000009959c: mov byte ptr [rax + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000993a5: mov byte ptr [rax + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x00000000000529ff: mov byte ptr [rax + rdx], 0; ret; 
0x00000000000271f7: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000266e3: mov byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a867e: mov byte ptr [rax], 0; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000000a86e8: mov byte ptr [rax], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000038c74: mov byte ptr [rax], 0; mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a8a58: mov byte ptr [rax], 0; ret; 
0x00000000001280c5: mov byte ptr [rax], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001280aa: mov byte ptr [rax], 0xa; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c76b: mov byte ptr [rax], 0xff; jne 0x10c775; mov word ptr [rdi], si; xor eax, eax; ret; 
0x00000000000f7980: mov byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, eax; ret 0xca09; 
0x000000000015e331: mov byte ptr [rax], al; add byte ptr [rax], al; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000063015: mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000014d0e1: mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000011cb1f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000011c4bc: mov byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11c4d0; ret; 
0x0000000000055068: mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008af97: mov byte ptr [rax], bh; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086405: mov byte ptr [rax], bh; mov eax, r9d; ret; 
0x00000000000639cf: mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000639d0: mov byte ptr [rax], ch; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6622: mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000008af96: mov byte ptr [rax], dil; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086404: mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000009f9df: mov byte ptr [rbp + rax], 0; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000011d725: mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a8746: mov byte ptr [rbx], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x0000000000137c1a: mov byte ptr [rbx], cl; add byte ptr [rcx], al; add rsp, 8; ret; 
0x0000000000122c35: mov byte ptr [rcx + 0x48b44f9], cl; adc byte ptr [rcx - 0x2d], al; call 0x1f2af84; mov eax, r8d; ret; 
0x00000000001235f7: mov byte ptr [rcx + 0x48b44f9], cl; adc byte ptr [rcx - 0x2d], al; call 0x1f2b946; mov eax, r8d; ret; 
0x0000000000178793: mov byte ptr [rcx + 2], dl; ret; 
0x00000000001787b2: mov byte ptr [rcx + 4], dl; ret; 
0x00000000001787f3: mov byte ptr [rcx + 8], dl; ret; 
0x00000000000a8628: mov byte ptr [rcx - 1], 0; mov qword ptr [rdx], rcx; ret; 
0x0000000000115f82: mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x00000000000b1916: mov byte ptr [rcx], 0; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000009f24a: mov byte ptr [rcx], 0; cmovne rax, rdx; ret; 
0x000000000013f897: mov byte ptr [rcx], 0x3c; and byte ptr [rbx + rsi*8 + 0x3c], dh; or dword ptr [rdi + rbp*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x0000000000090381: mov byte ptr [rcx], 0x84; ror byte ptr [rdi], cl; test ch, dh; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x0000000000116683: mov byte ptr [rcx], 0xc7; add bl, byte ptr [rax + rsi + 0x34]; xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000013c456: mov byte ptr [rcx], bl; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000e862a: mov byte ptr [rcx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000178770: mov byte ptr [rcx], dl; ret; 
0x000000000013c455: mov byte ptr [rcx], r11b; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000bb0ca: mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000b947b: mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c5b: mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0db: mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8618: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8fe8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b6f68: mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b78c8: mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000bb0e0: mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb102: mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb120: mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb140: mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b868e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b909e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b6fbe: mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b794e: mov byte ptr [rdi + 0x14], dh; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b9501: mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7cb1: mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb161: mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb166: mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb182: mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb1a2: mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1c2: mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9583: mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d33: mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1e3: mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b8710: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7040: mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b79d0: mov byte ptr [rdi + 0x18], dh; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000bb1e8: mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb20a: mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb228: mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb248: mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb264: mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb284: mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb2a4: mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2c4: mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b7e35: mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2e5: mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb2ea: mov byte ptr [rdi + 0x21], ch; ret; 
0x0000000000100451: mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bb33a: mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000018b395: mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000189ab5: mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018a665: mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000189ab8: mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x0000000000189b0b: mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x00000000000bb010: mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb02e: mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb04e: mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bb070: mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000bb090: mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb0b0: mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000001899e5: mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x00000000000baf46: mov byte ptr [rdi + 1], ch; ret; 
0x000000000013c175: mov byte ptr [rdi + 1], dh; ret; 
0x000000000013c174: mov byte ptr [rdi + 1], sil; ret; 
0x000000000018ac06: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189176: mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000a8b3d: mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000baf58: mov byte ptr [rdi + 2], ch; ret; 
0x00000000000b84c6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b8de6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x00000000000b6e86: mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7706: mov byte ptr [rdi + 2], dh; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b9309: mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000a89b0: mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf69: mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf6e: mov byte ptr [rdi + 3], ch; ret; 
0x000000000013c61c: mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000000a8b6b: mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000baf86: mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b84e2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6ea2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b7742: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b9337: mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000a89ce: mov byte ptr [rdi + 4], dl; ret; 
0x00000000000baf97: mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000baf9c: mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a8ba4: mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000bafae: mov byte ptr [rdi + 6], ch; ret; 
0x000000000014ae88: mov byte ptr [rdi + 6], dl; movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000a8a07: mov byte ptr [rdi + 6], dl; ret; 
0x000000000014ae96: mov byte ptr [rdi + 7], al; ret; 
0x00000000000bafcc: mov byte ptr [rdi + 7], ch; ret; 
0x000000000005b51a: mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x00000000000ec450: mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000ec405: mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3d4: mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000ec480: mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000ec490: mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000ec4a5: mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ec46a: mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec43c: mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3ed: mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000ec410: mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000bafd8: mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b8533: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ee3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b77c3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b9389: mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd9: mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe9: mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000bafee: mov byte ptr [rdi + 9], ch; ret; 
0x0000000000189a12: mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189a13: mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000004205c: mov byte ptr [rdi + rdx + 0x560f6600], ch; or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x000000000013c33e: mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000167a6b: mov byte ptr [rdi - 1], dl; ret; 
0x00000000000a8b10: mov byte ptr [rdi], 0; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ab71: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000116ecb: mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd889b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x000000000018a2c5: mov byte ptr [rdi], 0; sub r8, 1; lea rdi, [rdi + 1]; jne 0x18a700; vzeroupper; ret; 
0x00000000001890e1: mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000000ec445: mov byte ptr [rdi], 0x5b; ret; 
0x000000000012eb64: mov byte ptr [rdi], ah; or al, 0; call 0xbd470; add rsp, 8; ret; 
0x00000000000ec46e: mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000baf32: mov byte ptr [rdi], ch; ret; 
0x00000000000bbc0f: mov byte ptr [rdi], cl; ret; 
0x000000000018bc39: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000a8981: mov byte ptr [rdi], dh; add rax, rdi; ret; 
0x00000000000b84a0: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b8da0: mov byte ptr [rdi], dh; lea rax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x00000000000b6e60: mov byte ptr [rdi], dh; ret; 
0x00000000000b76c0: mov byte ptr [rdi], dh; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b92e2: mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x000000000018b2c3: mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000001899e3: mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x00000000000b7b52: mov byte ptr [rdi], dl; ret; 
0x000000000018a593: mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000baf42: mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000a8980: mov byte ptr [rdi], sil; add rax, rdi; ret; 
0x00000000000b67aa: mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39d2: mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b39e2: mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000017aaf9: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39fe: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000001785e9: mov byte ptr [rdx + 2], al; mov rax, rdi; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x00000000000b3a12: mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000017ab27: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a2c: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000178627: mov byte ptr [rdx + 4], al; mov rax, rdi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x00000000000b6740: mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3a82: mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3ab0: mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x000000000019204b: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x000000000013c239: mov byte ptr [rdx - 1], al; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000011cc47: mov byte ptr [rdx], 0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x0000000000134b4a: mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000013f082: mov byte ptr [rdx], 0; ret; 
0x000000000017aad2: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000008df2f: mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000000b39d7: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000001785a2: mov byte ptr [rdx], al; mov rax, rdi; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x00000000000529f2: mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000032853: mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000011361c: mov byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000116ece: mov byte ptr [rip + 0xd889b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000116ed1: mov byte ptr [rip - 0x76b3dd00], cl; rol dh, 0x46; inc dword ptr [rax]; ret; 
0x0000000000042054: mov byte ptr [rsi + 0xff20017], ah; adc byte ptr [rip + 0x17ac88], al; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x000000000013486e: mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x00000000000a13f0: mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000a13ed: mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x0000000000116e56: mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000116ed8: mov byte ptr [rsi - 1], 0; ret; 
0x000000000002a3e5: mov byte ptr [rsi], cl; add al, 0; add bh, dh; ret 0xf800; 
0x00000000001419ee: mov byte ptr [rsp + 0x18], 0; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000152bf7: mov byte ptr [rsp + rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001156cc: mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x000000000003007d: mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000007ba24: mov ch, 0; idiv edi; dec dword ptr [rax + 0x29]; ret 0xb8; 
0x0000000000074f70: mov ch, 0x10; idiv edi; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x000000000009c1df: mov ch, 0x2c; adc eax, 0x482b7200; cmp ecx, dword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x00000000000ff6a7: mov ch, 0x2d; dec dword ptr [rax - 0x75]; je 0xff6d3; adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x0000000000118ab7: mov ch, 0x33; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001189b7: mov ch, 0x34; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013f080: mov ch, 0x41; mov byte ptr [rdx], 0; ret; 
0x00000000000e43b7: mov ch, 0x7a; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001143b7: mov ch, 0x7a; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000162db7: mov ch, 0x90; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000a09f7: mov ch, 0xb1; add dword ptr [rax], eax; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000001207b7: mov ch, 0xb6; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9b7: mov ch, 0xc4; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a058b: mov ch, 0xe; add byte ptr [rax - 0x73], cl; add eax, 0xeb5cb; cmove rax, rdx; ret; 
0x00000000000a0688: mov ch, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x1b41e; cmove rax, rdx; ret; 
0x000000000017ff17: mov ch, 1; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x000000000018e4a6: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000002a96d: mov ch, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x00000000000cfae0: mov ch, dh; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x000000000011fb25: mov cl, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x0000000000093899: mov cl, 0x15; and dword ptr [rdi - 0x76b7ffeb], ebp; sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x00000000001388d7: mov cl, 0x15; ret; 
0x000000000014472c: mov cl, 0x15; sahf; ret; 
0x0000000000051bcd: mov cl, 0x16; add byte ptr [rax + 0x21], cl; ret 0x8948; 
0x000000000012058b: mov cl, 0x40; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000013c523: mov cl, 0x48; add ecx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000116abb: mov cl, 0x53; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bbb: mov cl, 0x82; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000198fce: mov cl, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f6bb: mov cl, 0xc7; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120cb4: mov cl, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000011f2bb: mov cl, 0xcb; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121fc3: mov cl, 0xda; or al, 0; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000123fbb: mov cl, 0xe3; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015f244: mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000a09f8: mov cl, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x1b0ce; cmove rax, rdx; ret; 
0x00000000000d699a: mov cl, byte ptr [rax + 1]; ret 0x8d48; 
0x0000000000163438: mov cl, byte ptr [rax]; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001230fb: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123108; ret; 
0x0000000000123164: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123170; ret; 
0x0000000000123a4b: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123a58; ret; 
0x0000000000123aa8: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123ab8; ret; 
0x00000000000aedf5: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000001379fc: mov cl, byte ptr [rbx]; add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x00000000000b9474: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c54: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d4: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b9578: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d28: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7e29: mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000018a659: mov cl, byte ptr [rsi + 0x40]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000184e44: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000018fb64: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000cfacb: mov cl, dl; and cl, 0xf; je 0xcfaf0; ret; 
0x000000000012bbea: mov cs, word ptr [rax - 0x3f]; clc; add ecx, dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xc083; 
0x00000000000f089a: mov cs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000012334d: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x123360; ret; 
0x0000000000123c7d: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x123c90; ret; 
0x0000000000112fbb: mov cs, word ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011306c: mov cs, word ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000018590e: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000018fb52: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000b8624: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9494: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f74: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b8728: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9598: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7058: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000167eb4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b9300: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b70: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x000000000016de14: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84c0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e80: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000018fb51: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000014aeaa: mov dh, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x000000000008b4e4: mov dh, 0; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000091b41: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000032845: mov dh, 0; cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000008b644: mov dh, 0; pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008df57: mov dh, 0; ret; 
0x0000000000040fb9: mov dh, 0x11; test dl, dl; jne 0x40f98; ret; 
0x00000000000f075d: mov dh, 0x14; adc al, 0xf6; ret 0x7580; 
0x00000000000f1431: mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x000000000009c269: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x9c258; sub rax, 0x10; ret; 
0x00000000000f07d0: mov dh, 0x14; cmp ch, cl; ret; 
0x000000000018b2c1: mov dh, 0x16; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000001899e1: mov dh, 0x16; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016def1: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000018a591: mov dh, 0x16; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000ac8a5: mov dh, 0x16; sub eax, edx; ret; 
0x00000000000328c3: mov dh, 0x1a; sbb byte ptr [rax], al; ret; 
0x00000000000a861a: mov dh, 0x31; test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000e6ecb: mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000126bb0: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x00000000000300bb: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000e6ee1: mov dh, 0x42; add dword ptr [rbx - 0x7cb7fb37], eax; ret 0xe901; 
0x00000000000ea571: mov dh, 0x43; add cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000eb762: mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000005b3c2: mov dh, 0x43; add dword ptr [rax + rax*8 - 0x7cb6f78c], eax; ret; 
0x0000000000037ff3: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000eb5a8: mov dh, 0x43; add dword ptr [rcx - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000a8ba0: mov dh, 0x44; and al, 0xe; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b67: mov dh, 0x44; and al, 0xf4; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000199161: mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x00000000000a8b39: mov dh, 0x44; and al, 0xfa; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000183db1: mov dh, 0x44; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000006669e: mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000063e52: mov dh, 0x45; add dword ptr [rax - 0x7d], ecx; ret 0xbe02; 
0x0000000000074534: mov dh, 0x46; or al, 0x83; ret; 
0x00000000000e81da: mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x00000000001920e1: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920d1: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001920a1: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000001920c1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920b1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000029e07: mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x0000000000048d09: mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a7cd6: mov dh, 0x4c; adc eax, 0xe0c14901; or byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000a3fe6: mov dh, 0x4d; add byte ptr [rcx + 0xf], 0x93; ret; 
0x000000000013c4e1: mov dh, 0x51; add dword ptr [rbp - 0x76fdefbc], ecx; ret 0xc639; 
0x000000000013c442: mov dh, 0x52; add dword ptr [rbp - 0x76fdefbc], ecx; ret 0x8041; 
0x000000000013c45a: mov dh, 0x52; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x0000000000031764: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000613a1: mov dh, 0x53; or al, 0xf6; ret 0x7401; 
0x000000000005f3a9: mov dh, 0x53; or al, 0xf6; ret 0xf01; 
0x0000000000081161: mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x00000000000615bb: mov dh, 0x53; or al, 0xf6; ret 0xf40; 
0x00000000000a8a03: mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8ac0: mov dh, 0x54; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8a8f: mov dh, 0x54; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a89ca: mov dh, 0x54; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a8a71: mov dh, 0x54; and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a89ac: mov dh, 0x54; and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000183db6: mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000001920e5: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x00000000001920d5: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x00000000001920a5: mov dh, 0x56; int1; sub eax, edx; ret; 
0x000000000007ad8a: mov dh, 0x56; or al, 0xf6; ret 0xf08; 
0x00000000001920b5: mov dh, 0x56; sub eax, edx; ret; 
0x00000000000f75ba: mov dh, 0x57; cmp dh, dh; ret 0xf08; 
0x00000000000f7e1a: mov dh, 0x58; cmp dh, dh; ret; 
0x000000000005d7b8: mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x000000000005c115: mov dh, 0x58; or al, 0xf6; ret; 
0x00000000001989e6: mov dh, 0x5d; add eax, 0xdb854800; jne 0x1989d0; pop rbx; ret; 
0x00000000000680f6: mov dh, 0x6b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d4ebb: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000053be3: mov dh, 0x84; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000f9756: mov dh, 0x8b; dec dword ptr [rax - 0x77]; ret; 
0x0000000000053e9e: mov dh, 0x8c; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000121ca2: mov dh, 0xa6; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000e7a56: mov dh, 0xa8; dec dword ptr [rax - 0x77]; ret; 
0x000000000013219f: mov dh, 0xb; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000014de27: mov dh, 0xc0; add eax, 1; ret; 
0x0000000000157b90: mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000010fb96: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000014a145: mov dh, 0xc0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ce094: mov dh, 0xc0; lea eax, [rax + rax - 1]; ret; 
0x00000000000e51ff: mov dh, 0xc0; lea rax, [rax + rax - 1]; ret; 
0x0000000000052b38: mov dh, 0xc0; neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e6c: mov dh, 0xc0; neg eax; pop rbp; ret; 
0x00000000000246dd: mov dh, 0xc0; neg eax; ret; 
0x0000000000149d6e: mov dh, 0xc0; pop r12; ret; 
0x0000000000148c14: mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000008dfde: mov dh, 0xc0; pop rbx; neg eax; ret; 
0x000000000014a0db: mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x0000000000043c30: mov dh, 0xc0; ret; 
0x00000000000ac8c5: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000094c92: mov dh, 0xc0; sub eax, 2; add rsp, 8; ret; 
0x00000000000bc149: mov dh, 0xc1; pop rbx; ret; 
0x00000000000bc0f9: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x00000000000bbf62: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000271f6: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000120788: mov dh, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001373aa: mov dh, 0xc; and al, 0x88; or dh, dh; ret 0xf02; 
0x00000000000ecbc1: mov dh, 0xc; or byte ptr [rax + 0x63], cl; ret; 
0x00000000000bc191: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000ac8cb: mov dh, 0xd2; sub eax, edx; ret; 
0x000000000011eea9: mov dh, 0xd7; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000012dce7: mov dh, 0xe; mov byte ptr [rax + 1], cl; test cl, cl; jne 0x12dc98; mov rax, rdi; ret; 
0x00000000000bbc0d: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x00000000000aa3a1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000184401: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000184e54: mov dh, 0xe; sub eax, ecx; ret; 
0x000000000012fb59: mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000012faf1: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000157e07: mov dh, 0xff; dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000157e43: mov dh, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x00000000000a0528: mov dh, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x00000000000f1192: mov dh, 4; adc byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000529ea: mov dh, 4; adc byte ptr [rdx + 6], bh; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000ec467: mov dh, 4; add esi, eax; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000001461bc: mov dh, 7; add eax, ecx; sub rdx, 1; jne 0x146148; ret; 
0x000000000013efcf: mov dh, 7; lea rcx, [rdi + 1]; test al, al; jne 0x13efbd; mov eax, r10d; ret; 
0x00000000001880c4: mov dh, 7; lea rdx, [rip + 0x133f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000186704: mov dh, 7; lea rdx, [rip + 0x14db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183804: mov dh, 7; lea rdx, [rip + 0x17cb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181834: mov dh, 7; lea rdx, [rip + 0x19c83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750e4: mov dh, 7; lea rdx, [rip + 0x263d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b74: mov dh, 7; lea rdx, [rip + 0x28943]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1464: mov dh, 7; lea rdx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aee04: mov dh, 7; lea rdx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000184e51: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000ac8a2: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000aa3a4: mov dh, 7; sub eax, ecx; ret; 
0x0000000000184404: mov dh, 7; sub eax, ecx; vzeroupper; ret; 
0x00000000000f9814: mov dh, dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001231d2: mov dh, dl; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x000000000010e609: mov dl, 0; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000011fd68: mov dl, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd77; ret; 
0x0000000000028edd: mov dl, 0x18; add al, ch; stosd dword ptr [rdi], eax; mov al, 0; add byte ptr [rcx - 0x77], al; ret 0xcde9; 
0x00000000000361be: mov dl, 0x1b; add byte ptr [rbx + 0x6c0f6600], cl; ret 0xf41; 
0x0000000000114374: mov dl, 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112fba: mov dl, 0x8e; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffba: mov dl, 0xbe; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcba: mov dl, 0xc1; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fcba: mov dl, 0xc1; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120c0c: mov dl, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000142462: mov dl, 0xe5; or al, byte ptr [rax]; syscall; pop rbp; ret; 
0x00000000000a04c1: mov dl, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xeb1a5; cmove rax, rdx; ret; 
0x000000000011cfba: mov dl, 0xee; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000123110: mov dl, 3; add al, 0xa; ret; 
0x000000000017c99a: mov dl, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000319ba: mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x00000000000ea371: mov dl, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b7ca7: mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b9303: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b73: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf63: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b9332: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b92: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000baf92: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b9383: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd3: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe3: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000167af0: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000b92e0: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x00000000000b7b50: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000baf40: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x000000000007adbb: mov dl, cl; sbb al, 0; add dh, dh; ret 0xf40; 
0x0000000000102868: mov dword ptr [0x40], 0; mov eax, r8d; ret; 
0x000000000009519f: mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000951a3: mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000009519a: mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000047a72: mov dword ptr [r11], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047af3: mov dword ptr [r11], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008ab98: mov dword ptr [r12 + 0x74], eax; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000014fe9e: mov dword ptr [r8 + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000014ff20: mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014ff7d: mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ff4d: mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d140: mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014d19d: mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d16d: mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000014d110: mov dword ptr [r8 + 4], 0; mov eax, 1; ret; 
0x000000000014d100: mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x000000000012edc8: mov dword ptr [r8 + 4], eax; test eax, eax; jne 0x12ed79; mov rax, rdi; ret; 
0x000000000013c461: mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000013c528: mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000131726: mov dword ptr [r8], r9d; add rsp, 0x18; ret; 
0x00000000000dfc30: mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x000000000018fb5a: mov dword ptr [r9 - 2], ecx; ret; 
0x000000000018fb45: mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000dfdfb: mov dword ptr [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d8: mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000141b70: mov dword ptr [rax + 0x10], 0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086e9b: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f1d: mov dword ptr [rax + 0x10], ecx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f59: mov dword ptr [rax + 0x10], edi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086e5d: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000014fe9f: mov dword ptr [rax + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000008762c: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000095907: mov dword ptr [rax + 0x20], edx; add rsp, 8; ret; 
0x000000000008cdc0: mov dword ptr [rax + 0x20], edx; pop rbx; ret; 
0x0000000000086401: mov dword ptr [rax + 0x28], edx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x0000000000087628: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000086e61: mov dword ptr [rax + 0x40], ecx; ret; 
0x0000000000086e9f: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f5d: mov dword ptr [rax + 0x40], esi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000014ff21: mov dword ptr [rax + 0x48], eax; mov eax, 1; ret; 
0x0000000000087cc2: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000014ff7e: mov dword ptr [rax + 0x54], eax; mov eax, 1; ret; 
0x000000000014ff4e: mov dword ptr [rax + 0x58], eax; mov eax, 1; ret; 
0x000000000014d141: mov dword ptr [rax + 0xa8], eax; mov eax, 1; ret; 
0x000000000014d19e: mov dword ptr [rax + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d16e: mov dword ptr [rax + 0xb8], eax; mov eax, 1; ret; 
0x000000000008e585: mov dword ptr [rax + 0xe0], ecx; call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x000000000012faee: mov dword ptr [rax + 0xf], 0xe281ffb6; add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000014d111: mov dword ptr [rax + 4], 0; mov eax, 1; ret; 
0x000000000014d101: mov dword ptr [rax + 4], 1; mov eax, 1; ret; 
0x000000000012edc9: mov dword ptr [rax + 4], eax; test eax, eax; jne 0x12ed79; mov rax, rdi; ret; 
0x00000000000a8abc: mov dword ptr [rax + 4], edx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8aac: mov dword ptr [rax + 4], edx; ret; 
0x00000000001412d1: mov dword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000092795: mov dword ptr [rax + 8], 0; ret; 
0x0000000000086e52: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000116d75: mov dword ptr [rax + 8], edi; movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000008cdb8: mov dword ptr [rax + 8], edx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000000ef963: mov dword ptr [rax + rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000189152: mov dword ptr [rax - 0x17], 0xffffff50; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000157557: mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000009278e: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000157e21: mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000000ca412: mov dword ptr [rax], 0x14c0000; ret 0x2de9; 
0x0000000000043068: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001127f8: mov dword ptr [rax], 0x16; mov eax, 1; ret; 
0x000000000015cf60: mov dword ptr [rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000042f28: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000001197d8: mov dword ptr [rax], 0x16; ret; 
0x00000000000d0178: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000000042b3b: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000041e62: mov dword ptr [rax], 0x22; add rsp, 8; ret; 
0x0000000000043c5c: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011438c: mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000160ccc: mov dword ptr [rax], 0x26; xor eax, eax; ret; 
0x0000000000041258: mov dword ptr [rax], 0x2a; mov rax, r11; ret; 
0x00000000001379f5: mov dword ptr [rax], 0x2d830000; cmp byte ptr [rdx + 0x4401000b], cl; mov eax, eax; pop rbp; ret; 
0x00000000000d005b: mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0158: mov dword ptr [rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000011cdf5: mov dword ptr [rax], 0x50f0000; cmp rax, -0xfff; jae 0x11ce04; ret; 
0x000000000010dc40: mov dword ptr [rax], 0x5f; mov eax, 0xffffffff; ret; 
0x0000000000082834: mov dword ptr [rax], 0x89480000; ret; 
0x000000000009961b: mov dword ptr [rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000001142d0: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000009809b: mov dword ptr [rax], 0xc; mov rax, r8; ret; 
0x0000000000119791: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009e95c: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x00000000001142bc: mov dword ptr [rax], 0xffffffff; xor eax, eax; ret; 
0x000000000011d018: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x0000000000048338: mov dword ptr [rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000412b8: mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246f0: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000d4df8: mov dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000521f8: mov dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceff3: mov dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000010da05: mov dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10da14; ret; 
0x0000000000057c0e: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057c2b: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000121c9d: mov dword ptr [rax], eax; mov qword ptr [rip + 0xca6b6], 0; ret; 
0x0000000000121c1d: mov dword ptr [rax], eax; mov qword ptr [rip + 0xca736], 0; ret; 
0x00000000000ec844: mov dword ptr [rax], ebp; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bba3: mov dword ptr [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c529: mov dword ptr [rax], ebx; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000131727: mov dword ptr [rax], ecx; add rsp, 0x18; ret; 
0x00000000000dfc31: mov dword ptr [rax], ecx; add rsp, 8; ret; 
0x000000000008558e: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000009a0bc: mov dword ptr [rax], ecx; mov rax, qword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c2: mov dword ptr [rax], ecx; mov rax, qword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000a8a80: mov dword ptr [rax], ecx; ret; 
0x0000000000116d55: mov dword ptr [rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000fec9f: mov dword ptr [rax], edi; mov rax, r8; ret; 
0x000000000009a0d0: mov dword ptr [rax], edi; ret; 
0x000000000011efc7: mov dword ptr [rax], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c23d: mov dword ptr [rax], edx; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x0000000000047c9d: mov dword ptr [rax], edx; mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x0000000000149377: mov dword ptr [rax], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000008774d: mov dword ptr [rax], edx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c462: mov dword ptr [rax], edx; mov qword ptr [r9], r10; ret; 
0x0000000000086e5a: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000a8a8c: mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a6e: mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8aa4: mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x0000000000033d18: mov dword ptr [rax], edx; ret; 
0x0000000000087f28: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x000000000009a0c6: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961cc: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000a8a61: mov dword ptr [rax], esi; ret; 
0x00000000000f2490: mov dword ptr [rbp + 0x30], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f23c8: mov dword ptr [rbp + 0x30], edi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f248f: mov dword ptr [rbp + 0x30], r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087591: mov dword ptr [rbp + 0x74], eax; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000e8164: mov dword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000154574: mov dword ptr [rbp + 8], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a20bf: mov dword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x000000000014de61: mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000926b6: mov dword ptr [rbp], eax; mov eax, 1; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x0000000000087e4a: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093464: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a037e: mov dword ptr [rbp], eax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000004806f: mov dword ptr [rbp], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013a212: mov dword ptr [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a211: mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fdd7: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000951a0: mov dword ptr [rbx + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000008cdd1: mov dword ptr [rbx + 0x10], eax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000015f90a: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000094d07: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x0000000000127a43: mov dword ptr [rbx + 0x10], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000951a4: mov dword ptr [rbx + 0x14], 0; ret; 
0x0000000000157976: mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000008c10e: mov dword ptr [rbx + 0x18], eax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000015f8c2: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000127a93: mov dword ptr [rbx + 0x18], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000081121: mov dword ptr [rbx + 0x18], edi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000149e08: mov dword ptr [rbx + 0x20], eax; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000011d5d1: mov dword ptr [rbx + 0x20], eax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091975: mov dword ptr [rbx + 0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000149dc8: mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009519b: mov dword ptr [rbx + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000ff51f: mov dword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000008cdd9: mov dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000001376a5: mov dword ptr [rbx + 0x30], eax; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011d7cd: mov dword ptr [rbx + 0x38], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000042c5f: mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000042c3c: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000000919be: mov dword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000001159d8: mov dword ptr [rbx + 0x60], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087e4e: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093468: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000001259d2: mov dword ptr [rbx + 0x6401000c], esp; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000008fd8e: mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000086efa: mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000874fe: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e4ef: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008f507: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e649: mov dword ptr [rbx + 0x90], esi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000011d91f: mov dword ptr [rbx + 0x98], edx; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c3d3: mov dword ptr [rbx + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c4fb: mov dword ptr [rbx + 4], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000935df: mov dword ptr [rbx + 8], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000002fda7: mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x000000000010c2da: mov dword ptr [rbx + 8], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001279f3: mov dword ptr [rbx + 8], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000025b07: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000157e16: mov dword ptr [rbx], 0; call 0x153530; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001197c6: mov dword ptr [rbx], 0; pop rbx; ret; 
0x0000000000091e62: mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a0a3e: mov dword ptr [rbx], eax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009eb11: mov dword ptr [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000015fe05: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015326d: mov dword ptr [rbx], eax; pop rbx; mov dword ptr [rip + 0x9dba6], 2; ret; 
0x000000000009e9b5: mov dword ptr [rbx], eax; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000009d10d: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001532c6: mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000011976c: mov dword ptr [rbx], eax; pop rbx; setne al; movzx eax, al; ret; 
0x0000000000060ef6: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000047af4: mov dword ptr [rbx], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000087631: mov dword ptr [rbx], ecx; pop rbx; ret; 
0x00000000000bcd13: mov dword ptr [rbx], edx; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000639cd: mov dword ptr [rbx], edx; mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bba1: mov dword ptr [rbx], edx; mov dword ptr [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160b18: mov dword ptr [rbx], edx; pop rbx; ret; 
0x0000000000082c06: mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000957d4: mov dword ptr [rbx], esp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085913: mov dword ptr [rbx], esp; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000141a5c: mov dword ptr [rbx], esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085912: mov dword ptr [rbx], r12d; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000141a5b: mov dword ptr [rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000005b4ca: mov dword ptr [rcx + 0x3a8], edi; mov rsp, rdx; ret; 
0x00000000001144e3: mov dword ptr [rcx + 0xd], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001787d2: mov dword ptr [rcx + 3], edx; ret; 
0x00000000001787c3: mov dword ptr [rcx + 4], edx; ret; 
0x0000000000178834: mov dword ptr [rcx + 5], edx; ret; 
0x0000000000178844: mov dword ptr [rcx + 6], edx; ret; 
0x0000000000178813: mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178804: mov dword ptr [rcx + 8], edx; ret; 
0x000000000005584c: mov dword ptr [rcx + rcx*8], eax; xor eax, eax; ret; 
0x000000000005b92d: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000001204e3: mov dword ptr [rcx - 0x2708fff4], edi; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000009958e: mov dword ptr [rcx - 0x78], 0x29481004; ret 0x3948; 
0x000000000018fb5b: mov dword ptr [rcx - 2], ecx; ret; 
0x000000000018fb46: mov dword ptr [rcx - 4], ecx; ret; 
0x000000000018fb35: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000163465: mov dword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x0000000000116e69: mov dword ptr [rcx], 0x1f0fa6eb; add byte ptr [rax + 0x7522017f], al; ret 0x8d48; 
0x0000000000134b22: mov dword ptr [rcx], 0x83480288; ret 0xf01; 
0x00000000000e81df: mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x000000000003175e: mov dword ptr [rcx], 0xfff4788; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000433ee: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000860c7: mov dword ptr [rcx], eax; ret; 
0x000000000008aa1a: mov dword ptr [rcx], eax; xor eax, eax; pop rbx; ret; 
0x00000000000dfdfc: mov dword ptr [rcx], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d9: mov dword ptr [rcx], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013c52d: mov dword ptr [rcx], ecx; ret; 
0x000000000013c50b: mov dword ptr [rcx], edi; ret; 
0x0000000000178791: mov dword ptr [rcx], edx; mov byte ptr [rcx + 2], dl; ret; 
0x00000000001787b0: mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000001787f1: mov dword ptr [rcx], edx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000001787d0: mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x0000000000178811: mov dword ptr [rcx], edx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178821: mov dword ptr [rcx], edx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178831: mov dword ptr [rcx], edx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178841: mov dword ptr [rcx], edx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178851: mov dword ptr [rcx], edx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178861: mov dword ptr [rcx], edx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000003453c: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000001787c0: mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x0000000000178801: mov dword ptr [rcx], edx; mov word ptr [rcx + 8], dx; ret; 
0x000000000013c465: mov dword ptr [rcx], edx; ret; 
0x0000000000033c32: mov dword ptr [rcx], esi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000010d116: mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000121c40: mov dword ptr [rdi + 0x10], eax; jb 0x121c58; mov qword ptr [rip + 0xca710], 2; ret; 
0x00000000000b862d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b900d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b949d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b866b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94db: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b86ed: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b912d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b955d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b868b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fbb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b794b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b94fe: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7cae: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb15e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b870d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b703d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b79cd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000564df: mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b78ed: mov dword ptr [rdi + 0x10], ecx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b792b: mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b79ad: mov dword ptr [rdi + 0x10], ecx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb0fd: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb13b: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb1bd: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9580: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d30: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1e0: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b8750: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95c0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7080: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7a30: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000bb220: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b8770: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95e0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b70a0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7a60: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000bb240: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b8731: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b95a1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7061: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb201: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000010d0fe: mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000113c8c: mov dword ptr [rdi + 0x16], eax; ret; 
0x00000000000b8753: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b91c3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b95c3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7083: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7a33: mov dword ptr [rdi + 0x17], ecx; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000bb223: mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000015755b: mov dword ptr [rdi + 0x18], eax; mov eax, r8d; ret; 
0x00000000000918c7: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008d30f: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000b8735: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9195: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b95a5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b8773: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b91f3: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b95e3: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7065: mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7a05: mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b7a63: mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000bb205: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb243: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000015761d: mov dword ptr [rdi + 0x18], edx; mov eax, r8d; ret; 
0x00000000000918f4: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000157de2: mov dword ptr [rdi + 0x18], esi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000001574e5: mov dword ptr [rdi + 0x18], esi; mov eax, r8d; ret; 
0x000000000015751d: mov dword ptr [rdi + 0x18], esi; mov rax, r8; ret; 
0x0000000000157ded: mov dword ptr [rdi + 0x20], 0; ret; 
0x00000000000d128b: mov dword ptr [rdi + 0x20], eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000157de5: mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000157516: mov dword ptr [rdi + 0x28], eax; add rsi, r8; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x00000000001574e1: mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x00000000001576ea: mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x00000000001136ea: mov dword ptr [rdi + 0x38], esi; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000918f8: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000918c3: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000918bb: mov dword ptr [rdi + 0x58], eax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000013b40e: mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000000827ed: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000b86ad: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b90cd: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b951d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fdd: mov dword ptr [rdi + 0xe], ecx; ret; 
0x00000000000b796d: mov dword ptr [rdi + 0xe], ecx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb17d: mov dword ptr [rdi + 0xe], ecx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b864b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b903b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b94bb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b86cd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b90fd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b953d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6f9b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b790b: mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b798d: mov dword ptr [rdi + 0xf], ecx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb11b: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb19d: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000016dd35: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016db78: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000016de18: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x000000000016dcc5: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016db08: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8517: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b8e67: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b9367: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x000000000016dc55: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016da98: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6ec7: mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b7787: mov dword ptr [rdi + 3], edx; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc7: mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000a8b84: mov dword ptr [rdi + 4], eax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b9c: mov dword ptr [rdi + 4], eax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000481e9: mov dword ptr [rdi + 4], eax; xor eax, eax; ret; 
0x00000000000b84f9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x00000000000b9349: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 6]; ret; 
0x000000000016da28: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000a89ff: mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a89e7: mov dword ptr [rdi + 4], edx; ret; 
0x00000000000b7769: mov dword ptr [rdi + 4], edx; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bafa9: mov dword ptr [rdi + 4], edx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000010c794: mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000b85ab: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b8f3b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b940b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000016d9b8: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f2b: mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b784b: mov dword ptr [rdi + 5], edx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb06b: mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85cb: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b8f6b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b942b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xe]; ret; 
0x000000000016d948: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f3b: mov dword ptr [rdi + 6], edx; ret; 
0x00000000000b786b: mov dword ptr [rdi + 6], edx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb08b: mov dword ptr [rdi + 6], edx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b8569: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8ef9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b93c9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b85eb: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b8f9b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b944b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xf]; ret; 
0x000000000016d8d8: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f09: mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7809: mov dword ptr [rdi + 7], edx; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b788b: mov dword ptr [rdi + 7], edx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb029: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb0ab: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000009ef33: mov dword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000013b407: mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000001576e7: mov dword ptr [rdi + 8], eax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x0000000000113c83: mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000057dda: mov dword ptr [rdi + 8], eax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057d66: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x0000000000157dde: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000918cb: mov dword ptr [rdi + 8], eax; ret; 
0x00000000000564d8: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000094d88: mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000062fb6: mov dword ptr [rdi + 8], ebp; add dword ptr [rdi + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000056468: mov dword ptr [rdi + 8], ecx; ret; 
0x00000000000b93ab: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8589: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b8f19: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b93e9: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b854b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x00000000000b8ecb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x0000000000055bb0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000055a78: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000008df53: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax]; ret; 
0x00000000000b6efb: mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b77eb: mov dword ptr [rdi + 8], edx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb00b: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb049: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000001136f6: mov dword ptr [rdi + 8], esi; ret; 
0x000000000018b2ed: mov dword ptr [rdi + r8 - 2], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a0d: mov dword ptr [rdi + r8 - 2], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5bd: mov dword ptr [rdi + r8 - 2], edx; vzeroupper; ret; 
0x000000000018b309: mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a29: mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5d9: mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018b2ee: mov dword ptr [rdi + rax - 2], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a0e: mov dword ptr [rdi + rax - 2], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5be: mov dword ptr [rdi + rax - 2], edx; vzeroupper; ret; 
0x000000000018b30a: mov dword ptr [rdi + rax - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a2a: mov dword ptr [rdi + rax - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5da: mov dword ptr [rdi + rax - 4], edx; vzeroupper; ret; 
0x000000000018b32c: mov dword ptr [rdi + rax - 8], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a4c: mov dword ptr [rdi + rax - 8], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5fc: mov dword ptr [rdi + rax - 8], edx; vzeroupper; ret; 
0x0000000000055c38: mov dword ptr [rdi + rax], eax; sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x0000000000056aed: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000bc05f: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x000000000018bc64: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000bbc39: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x000000000018ac38: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000189198: mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000bc057: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000018bc59: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000000bbc29: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018ac5c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891ac: mov dword ptr [rdi + rdx - 7], ecx; vzeroupper; ret; 
0x00000000000bc04f: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x000000000018bc4e: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000bbc1b: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x00000000001677b5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677f3: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000563cf: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000167968: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a64: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679b0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b38: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d18: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f08: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680d9: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001682d9: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684d9: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677b1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677ef: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167964: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a60: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679ac: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b34: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d14: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f04: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680d5: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001682d5: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684d5: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677ad: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677eb: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167960: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a5c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679a8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b30: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d10: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f00: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680d1: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001682d1: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684d1: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677a9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677e7: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b3c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d388: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167d1c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d308: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f0c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d288: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001680dd: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d1f9: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001682dd: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d169: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001684dd: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d0d9: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000b7e70: mov dword ptr [rdi - 1], edx; ret; 
0x0000000000167ebd: mov dword ptr [rdi - 2], ecx; ret; 
0x0000000000167cd5: mov dword ptr [rdi - 2], edx; ret; 
0x0000000000167eb9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000168299: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016796f: mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168296: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168496: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168696: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000563c8: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634e: mov dword ptr [rdi - 8], ecx; ret; 
0x00000000001677f7: mov dword ptr [rdi - 8], edx; ret; 
0x000000000016796c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a68: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679b4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d408: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000047466: mov dword ptr [rdi], 0; pop rbx; ret; 
0x00000000000a89b9: mov dword ptr [rdi], eax; add rax, rdi; ret; 
0x00000000000a8b06: mov dword ptr [rdi], eax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000014a5ff: mov dword ptr [rdi], eax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000a874a: mov dword ptr [rdi], eax; mov rax, r12; pop r12; ret; 
0x00000000000a86ec: mov dword ptr [rdi], eax; mov rax, r9; ret; 
0x000000000005b51f: mov dword ptr [rdi], eax; mov rax, rdi; ret; 
0x00000000000a8b64: mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b36: mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b7c: mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000056348: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056462: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000481e2: mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000041fb4: mov dword ptr [rdi], eax; subsd xmm0, xmm1; ret; 
0x0000000000113756: mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000bc963: mov dword ptr [rdi], ebp; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000563c1: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000000564d1: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000b84e5: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b8e25: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b8537: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x00000000000b8ea7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000a8b50: mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ac04: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189174: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b84c4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e84: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7704: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b9307: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b77: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf67: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b9335: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b95: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000baf95: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b9387: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b8515: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b9365: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b7785: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b8567: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f07: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7807: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000bb027: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b8587: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000bb047: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000018b307: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a27: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5d7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000019021b: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000018ac32: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000189192: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000b85a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9408: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f28: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7848: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb068: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85c8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9428: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f38: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7868: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb088: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b85e8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9448: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f48: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b7888: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb0a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000018b329: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a49: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5f9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000018ac59: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891a9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b84f6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9346: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7766: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bafa6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b93a8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8548: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b77e8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb008: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000018b2ea: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a0a: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5ba: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000190227: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x00000000001576e0: mov dword ptr [rdi], ecx; punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 8], rax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000004217e: mov dword ptr [rdi], ecx; ret; 
0x00000000000b7745: mov dword ptr [rdi], ecx; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b77c7: mov dword ptr [rdi], ecx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x000000000018bc53: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000000a8976: mov dword ptr [rdi], edx; add rax, rdi; ret; 
0x000000000008ac53: mov dword ptr [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041d92: mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b84b4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x00000000000b8dc4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018abf4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b92f4: mov dword ptr [rdi], edx; lea rax, [rdi + 2]; ret; 
0x000000000018b2d4: mov dword ptr [rdi], edx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b84d2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000000b8e02: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000018ac22: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b9322: mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b8524: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b8e84: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b9374: mov dword ptr [rdi], edx; lea rax, [rdi + 8]; ret; 
0x00000000001899f4: mov dword ptr [rdi], edx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b7e90: mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7ed1: mov dword ptr [rdi], edx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b7ef1: mov dword ptr [rdi], edx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7f01: mov dword ptr [rdi], edx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000018a6a0: mov dword ptr [rdi], edx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000b7f11: mov dword ptr [rdi], edx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f21: mov dword ptr [rdi], edx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000157ddb: mov dword ptr [rdi], edx; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x000000000018a6b1: mov dword ptr [rdi], edx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ea0: mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7ee1: mov dword ptr [rdi], edx; mov word ptr [rdi + 8], dx; ret; 
0x000000000018a691: mov dword ptr [rdi], edx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000424c9: mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000a89c7: mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89a9: mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a89f7: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0x14]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a89df: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000041fce: mov dword ptr [rdi], edx; ret; 
0x0000000000047d71: mov dword ptr [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000018a474: mov dword ptr [rdi], edx; sub r8, 2; lea rdi, [rdi + 2]; jne 0x18a700; vzeroupper; ret; 
0x00000000000b76e4: mov dword ptr [rdi], edx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x000000000018a4b2: mov dword ptr [rdi], edx; sub r8, 4; lea rdi, [rdi + 4]; jne 0x18a700; vzeroupper; ret; 
0x00000000000b7722: mov dword ptr [rdi], edx; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b77a4: mov dword ptr [rdi], edx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x000000000004231c: mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000189164: mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000000baf54: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000baf82: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000bafd4: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000a8b21: mov dword ptr [rdi], esi; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018fb43: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000057b76: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018fb32: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000018fb57: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x0000000000042336: mov dword ptr [rdi], esi; ret; 
0x000000000010c771: mov dword ptr [rdi], esi; xor eax, eax; ret; 
0x00000000000a89b8: mov dword ptr [rdi], r8d; add rax, rdi; ret; 
0x000000000015087c: mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000121c99: mov dword ptr [rdx + 0x10], ecx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca6b6], 0; ret; 
0x0000000000121c19: mov dword ptr [rdx + 0x10], ecx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca736], 0; ret; 
0x00000000000860c4: mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x00000000001492a8: mov dword ptr [rdx + 0x20], esi; ret; 
0x00000000000958ff: mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000149282: mov dword ptr [rdx + 0x58], edi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000014d0da: mov dword ptr [rdx + 0x68], eax; movzx eax, word ptr [r8 + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000149286: mov dword ptr [rdx + 0x68], ecx; ret; 
0x000000000014d0e6: mov dword ptr [rdx + 0x6c], eax; mov eax, 1; ret; 
0x0000000000150784: mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000008e5bd: mov dword ptr [rdx + 0xe0], ecx; pop rbx; ret; 
0x00000000000827fb: mov dword ptr [rdx + 0xe0], ecx; ret; 
0x000000000017ab57: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a6c: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000178667: mov dword ptr [rdx + 3], eax; mov rax, rdi; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x000000000006301d: mov dword ptr [rdx + 4], 1; ret; 
0x000000000017ab39: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000cb186: mov dword ptr [rdx + 4], eax; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000b3a4e: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000178649: mov dword ptr [rdx + 4], eax; mov rax, rdi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x00000000000cb185: mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000017abeb: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x000000000017ab69: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176819: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017870b: mov dword ptr [rdx + 5], eax; mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x0000000000178689: mov dword ptr [rdx + 5], eax; mov rax, rdi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000017ac0b: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x000000000017ab89: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176829: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x00000000001786a9: mov dword ptr [rdx + 6], eax; mov rax, rdi; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x000000000017872b: mov dword ptr [rdx + 6], eax; mov rax, rdi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017aba9: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000017ce73: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac2b: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x00000000000b3af0: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000001786c9: mov dword ptr [rdx + 7], eax; mov rax, rdi; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x000000000017874b: mov dword ptr [rdx + 7], eax; mov rax, rdi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x000000000017abc9: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000017aabb: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x00000000000b3ad2: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000001783ab: mov dword ptr [rdx + 8], eax; mov rax, rdi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x00000000001786e9: mov dword ptr [rdx + 8], eax; mov rax, rdi; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000002fdbf: mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000116db1: mov dword ptr [rdx + 8], eax; test rax, rax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x000000000006301a: mov dword ptr [rdx + 8], ecx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000057b3b: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057d4e: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000015cf6a: mov dword ptr [rdx], 0; ret; 
0x0000000000057c32: mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000011429b: mov dword ptr [rdx], eax; cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x000000000017aae4: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x000000000017ab12: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000017cf1f: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aa64: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x000000000017aaf4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f9: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000017ab22: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a27: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000017ab32: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a47: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000004342a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000057b78: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057da7: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000017ab52: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a67: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000017ab64: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176814: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ab84: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176824: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017aba4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176834: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017abc4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176844: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000102890: mov dword ptr [rdx], eax; mov eax, r8d; ret; 
0x0000000000102830: mov dword ptr [rdx], eax; mov eax, r9d; ret; 
0x000000000004828a: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000017abe4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176854: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ac04: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176874: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ac24: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176894: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017aab4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000176784: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000d1db9: mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000001142b2: mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000d4aaa: mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000b39e9: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000001785c4: mov dword ptr [rdx], eax; mov rax, rdi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x0000000000178602: mov dword ptr [rdx], eax; mov rax, rdi; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x0000000000178344: mov dword ptr [rdx], eax; mov rax, rdi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x0000000000034551: mov dword ptr [rdx], eax; ret; 
0x00000000000cb189: mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000434b4: mov dword ptr [rdx], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000871ac: mov dword ptr [rdx], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010257b: mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000000a8622: mov dword ptr [rdx], ecx; ret; 
0x00000000000dd000: mov dword ptr [rdx], edi; xor eax, eax; ret; 
0x0000000000085417: mov dword ptr [rdx], esp; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000a0b7d: mov dword ptr [rdx], esp; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085416: mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f8a4: mov dword ptr [rip + 0x14f69e], eax; add rsp, 8; ret; 
0x000000000009f866: mov dword ptr [rip + 0x14f6dc], eax; ret; 
0x000000000009d70f: mov dword ptr [rip + 0x151793], 1; mov eax, r12d; pop r12; ret; 
0x000000000009a05e: mov dword ptr [rip + 0x154e10], 0; ret; 
0x0000000000095232: mov dword ptr [rip + 0x157074], eax; ret; 
0x000000000009520c: mov dword ptr [rip + 0x15707e], eax; ret; 
0x0000000000095228: mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951e3: mov dword ptr [rip + 0x15709f], eax; ret; 
0x0000000000095201: mov dword ptr [rip + 0x1570a9], 1; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951c3: mov dword ptr [rip + 0x1570b7], eax; ret; 
0x00000000000951d8: mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b8: mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000094ea9: mov dword ptr [rip + 0x157439], eax; ret; 
0x0000000000094e92: mov dword ptr [rip + 0x157448], eax; ret; 
0x0000000000094e78: mov dword ptr [rip + 0x157452], edx; ret; 
0x0000000000094e39: mov dword ptr [rip + 0x157459], eax; ret; 
0x0000000000094e29: mov dword ptr [rip + 0x157471], eax; ret; 
0x0000000000095276: mov dword ptr [rip + 0x159c24], eax; ret; 
0x0000000000095248: mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000093940: mov dword ptr [rip + 0x15ae7e], 0; ret; 
0x00000000000938a0: mov dword ptr [rip + 0x15af22], ebx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000094727: mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000440f3: mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x00000000000440d0: mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x000000000004757d: mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000023a50: mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x00000000000226b8: mov dword ptr [rip + 0x1ceae2], edx; pop rax; pop rbx; pop rbp; ret; 
0x0000000000198898: mov dword ptr [rip + 0x553de], 0; ret; 
0x00000000001983fc: mov dword ptr [rip + 0x5556a], 0; add rsp, 8; ret; 
0x00000000001989e4: mov dword ptr [rip + 0x55db6], ebx; test rbx, rbx; jne 0x1989d0; pop rbx; ret; 
0x0000000000198bcd: mov dword ptr [rip + 0x56559], 0; ret; 
0x0000000000198c33: mov dword ptr [rip + 0x5692b], 0; add rsp, 8; ret; 
0x0000000000198d06: mov dword ptr [rip + 0x57160], 0; ret; 
0x0000000000198e38: mov dword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x0000000000160db0: mov dword ptr [rip + 0x8e0da], esi; ret; 
0x0000000000160da7: mov dword ptr [rip + 0x8e0eb], eax; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x000000000015d36f: mov dword ptr [rip + 0x93dc7], 0; add rsp, 8; ret; 
0x0000000000153270: mov dword ptr [rip + 0x9dba6], 2; ret; 
0x0000000000146fa9: mov dword ptr [rip + 0xa9bcd], eax; add rsp, 8; ret; 
0x0000000000138523: mov dword ptr [rip + 0xb53b7], eax; add rsp, 8; ret; 
0x000000000012d01c: mov dword ptr [rip + 0xc2e56], eax; pop rbp; ret; 
0x0000000000121ca0: mov dword ptr [rip + 0xca6b6], 0; ret; 
0x0000000000121c77: mov dword ptr [rip + 0xca6df], 0; ret; 
0x0000000000121c46: mov dword ptr [rip + 0xca710], 2; ret; 
0x0000000000121c20: mov dword ptr [rip + 0xca736], 0; ret; 
0x0000000000121af9: mov dword ptr [rip + 0xca861], ebx; pop rbx; ret; 
0x0000000000121adf: mov dword ptr [rip + 0xca87b], ebx; pop rbx; ret; 
0x0000000000121874: mov dword ptr [rip + 0xcaae2], 3; add rsp, 8; ret; 
0x000000000011870e: mov dword ptr [rip + 0xd3c34], edi; ret; 
0x00000000001176ee: mov dword ptr [rip + 0xd809c], eax; add rsp, 8; ret; 
0x00000000001176c7: mov dword ptr [rip + 0xd80bf], 0; add rsp, 8; ret; 
0x000000000011767d: mov dword ptr [rip + 0xd810d], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000011764d: mov dword ptr [rip + 0xd813d], eax; mov rax, r8; ret; 
0x0000000000115e9a: mov dword ptr [rip + 0xd979c], 0; add rsp, 8; ret; 
0x0000000000115b95: mov dword ptr [rip + 0xd9b05], eax; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000115ae1: mov dword ptr [rip + 0xd9b59], eax; mov eax, 1; add rsp, 8; ret; 
0x000000000014820e: mov dword ptr [rsi + 0x10], 2; test eax, eax; je 0x148220; xor eax, eax; ret; 
0x000000000014830b: mov dword ptr [rsi + 0x10], eax; ret; 
0x000000000004810a: mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048159: mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000047c30: mov dword ptr [rsi + 0x10], ecx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x0000000000047c34: mov dword ptr [rsi + 0x28], eax; xor eax, eax; ret; 
0x000000000008df2c: mov dword ptr [rsi + 0x28], ecx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001131cf: mov dword ptr [rsi + 0x48], eax; ret; 
0x00000000001131c7: mov dword ptr [rsi + 0x50], ecx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000134432: mov dword ptr [rsi + 0x6401000b], edi; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001127ea: mov dword ptr [rsi + 0x66], edx; xor eax, eax; ret; 
0x000000000004810f: mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048192: mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000004819b: mov dword ptr [rsi + 0xe], eax; xor eax, eax; ret; 
0x0000000000148341: mov dword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000148303: mov dword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482a7: mov dword ptr [rsi + 8], eax; ret; 
0x0000000000055604: mov dword ptr [rsi + rax*8], edx; xor eax, eax; ret; 
0x0000000000120fe3: mov dword ptr [rsi - 0x2708fff4], ebp; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000019022a: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000019021d: mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000100468: mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000001482b9: mov dword ptr [rsi], 0; ret; 
0x000000000014833a: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482fc: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482a0: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x0000000000148354: mov dword ptr [rsi], 0xa; ret; 
0x000000000014835b: mov dword ptr [rsi], 0xb; ret; 
0x0000000000148330: mov dword ptr [rsi], 0xc; ret; 
0x0000000000148325: mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000148313: mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x000000000014834d: mov dword ptr [rsi], 8; ret; 
0x00000000001482df: mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000015761a: mov dword ptr [rsi], eax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x000000000004814c: mov dword ptr [rsi], eax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000008d313: mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000013b412: mov dword ptr [rsi], edi; ret; 
0x000000000013b94f: mov dword ptr [rsi], edi; xor eax, eax; ret; 
0x0000000000047c9f: mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x0000000000157597: mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000100454: mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000e2c8a: mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000041ba9: mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000011324b: mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000148c8e: mov dword ptr [rsp + 0x30], eax; call 0x1576d0; mov rax, r12; pop r12; ret; 
0x000000000008ab99: mov dword ptr [rsp + 0x74], eax; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000e2e6a: mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d44: mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fd6: mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120bf3: mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000043495: mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001129aa: mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e018: mov dword ptr [rsp + 8], eax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011304e: mov dword ptr [rsp + 8], eax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fc7: mov dword ptr [rsp + 8], eax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000041cd6: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041d99: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c16: mov dword ptr [rsp - 0x10], eax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c5f: mov dword ptr [rsp - 0x10], eax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005b11d: mov dword ptr [rsp - 0x10], edx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d028e: mov dword ptr [rsp - 0x10], esi; fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000057ccc: mov dword ptr [rsp - 0x10], esi; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c64: mov dword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057cc7: mov dword ptr [rsp - 0x18], eax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000196934: mov dword ptr [rsp], eax; call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010e9ce: mov dword ptr [rsp], eax; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000a2c09: mov dword ptr [rsp], ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000a1f72: mov dword ptr [rsp], esi; pop r12; pop r13; pop r14; ret; 
0x0000000000102867: mov dword ptr fs:[0x40], 0; mov eax, r8d; ret; 
0x0000000000131725: mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000000dfc2f: mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfdfa: mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d7: mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000043067: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001127f7: mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x000000000015cf5f: mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000042f27: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000001197d7: mov dword ptr fs:[rax], 0x16; ret; 
0x00000000000d0177: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000042b3a: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000041e61: mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043c5b: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011438b: mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000160ccb: mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000041257: mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000d005a: mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0157: mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000010dc3f: mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000009961a: mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000001142cf: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000009809a: mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000119790: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009e95b: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000011d017: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000048337: mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000412b7: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246ef: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000116d54: mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000013a210: mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000141a5a: mov dword ptr fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000433ed: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000043429: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010288f: mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000010282f: mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000000048289: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142b1: mov dword ptr fs:[rdx], eax; mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000bbc28: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000016de10: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84f2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9342: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000bafa2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b93a3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8543: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000bb003: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000167cd0: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000167eb0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b84b0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92f0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b6e70: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b76e0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000baf50: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000001971d9: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret; 
0x0000000000041fc1: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000041f91: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x00000000000bc193: mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000112af7: mov eax, 0; cmova eax, edx; ret; 
0x00000000000a2895: mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000127adb: mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000055039: mov eax, 0; jne 0x55043; push r10; ret; 
0x0000000000055542: mov eax, 0; jne 0x5554c; push r10; ret; 
0x0000000000148f15: mov eax, 0x100; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000113c86: mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000013bd09: mov eax, 0x100; ret; 
0x000000000013bd00: mov eax, 0x101; ret; 
0x000000000013bcf7: mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000010dc84: mov eax, 0x102; syscall; cmp rax, -0xfff; jae 0x10dc94; ret; 
0x000000000010d95e: mov eax, 0x103; syscall; cmp rax, -0x1000; ja 0x10d970; ret; 
0x000000000010f3f7: mov eax, 0x104; syscall; cmp rax, -0xfff; jae 0x10f407; ret; 
0x0000000000116c89: mov eax, 0x105; syscall; cmp rax, -0x1000; ja 0x116ca0; ret; 
0x000000000010d9b8: mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x000000000010fd04: mov eax, 0x107; syscall; cmp rax, -0xfff; jae 0x10fd14; ret; 
0x0000000000062eb7: mov eax, 0x108; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010fbe7: mov eax, 0x109; syscall; cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x000000000009526c: mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000146994: mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000000bc1e1: mov eax, 0x10; pop rbx; ret; 
0x0000000000063028: mov eax, 0x10; ret; 
0x0000000000113b5a: mov eax, 0x10; syscall; cmp rax, -0x1000; ja 0x113bb8; ret; 
0x00000000001143a4: mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x1143b4; ret; 
0x000000000010fc44: mov eax, 0x10a; syscall; cmp rax, -0xfff; jae 0x10fc54; ret; 
0x000000000010fca7: mov eax, 0x10b; syscall; cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x000000000010dbf1: mov eax, 0x10c; syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000011fdf4: mov eax, 0x110; syscall; cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000011f633: mov eax, 0x113; syscall; cmp rax, -0x1000; ja 0x11f6b8; ret; 
0x000000000011f4d3: mov eax, 0x114; syscall; cmp rax, -0x1000; ja 0x11f540; ret; 
0x00000000001131f3: mov eax, 0x115; syscall; cmp rax, -0x1000; ja 0x113260; ret; 
0x000000000011f583: mov eax, 0x116; syscall; cmp rax, -0x1000; ja 0x11f5f0; ret; 
0x00000000001130a7: mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x1130c0; ret; 
0x00000000001130ec: mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x113100; ret; 
0x000000000011f239: mov eax, 0x119; syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x000000000010c163: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x10c1d0; ret; 
0x0000000000113637: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x113650; ret; 
0x000000000011fe54: mov eax, 0x11b; syscall; cmp rax, -0xfff; jae 0x11fe64; ret; 
0x00000000001132a3: mov eax, 0x11d; syscall; cmp rax, -0x1000; ja 0x113310; ret; 
0x000000000011fe87: mov eax, 0x11e; syscall; cmp rax, -0xfff; jae 0x11fe97; ret; 
0x000000000011feb4: mov eax, 0x11f; syscall; cmp rax, -0xfff; jae 0x11fec4; ret; 
0x0000000000120ae3: mov eax, 0x120; syscall; cmp rax, -0x1000; ja 0x120b50; ret; 
0x000000000011f324: mov eax, 0x122; syscall; cmp rax, -0xfff; jae 0x11f334; ret; 
0x000000000011fac4: mov eax, 0x123; syscall; cmp rax, -0xfff; jae 0x11fad4; ret; 
0x000000000010e8f4: mov eax, 0x124; syscall; cmp rax, -0xfff; jae 0x10e904; ret; 
0x000000000010e954: mov eax, 0x125; syscall; cmp rax, -0xfff; jae 0x10e964; ret; 
0x000000000011fbe4: mov eax, 0x126; syscall; cmp rax, -0xfff; jae 0x11fbf4; ret; 
0x0000000000114526: mov eax, 0x127; syscall; cmp rax, -0x1000; ja 0x114598; ret; 
0x00000000001145e6: mov eax, 0x128; syscall; cmp rax, -0x1000; ja 0x114658; ret; 
0x000000000010c213: mov eax, 0x12; syscall; cmp rax, -0x1000; ja 0x10c280; ret; 
0x0000000000120b93: mov eax, 0x12b; syscall; cmp rax, -0x1000; ja 0x120c08; ret; 
0x000000000011fee4: mov eax, 0x12c; syscall; cmp rax, -0xfff; jae 0x11fef4; ret; 
0x000000000011f977: mov eax, 0x12d; syscall; cmp rax, -0xfff; jae 0x11f987; ret; 
0x000000000011f3b7: mov eax, 0x12e; syscall; cmp rax, -0xfff; jae 0x11f3c7; ret; 
0x0000000000113d6b: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113d80; ret; 
0x0000000000113dac: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113dc0; ret; 
0x000000000011ff17: mov eax, 0x12f; syscall; cmp rax, -0xfff; jae 0x11ff27; ret; 
0x000000000011f700: mov eax, 0x130; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011fa04: mov eax, 0x131; syscall; cmp rax, -0xfff; jae 0x11fa14; ret; 
0x00000000001152e4: mov eax, 0x132; syscall; cmp rax, -0xfff; jae 0x1152f4; ret; 
0x0000000000120c43: mov eax, 0x133; syscall; cmp rax, -0x1000; ja 0x120cb0; ret; 
0x000000000011ff44: mov eax, 0x134; syscall; cmp rax, -0xfff; jae 0x11ff54; ret; 
0x000000000011ff77: mov eax, 0x136; syscall; cmp rax, -0xfff; jae 0x11ff87; ret; 
0x000000000011ffa7: mov eax, 0x137; syscall; cmp rax, -0xfff; jae 0x11ffb7; ret; 
0x00000000001143e0: mov eax, 0x13; syscall; cmp rax, -0x1000; ja 0x114440; ret; 
0x0000000000048220: mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x000000000011ffd4: mov eax, 0x13f; syscall; cmp rax, -0xfff; jae 0x11ffe4; ret; 
0x0000000000112fe3: mov eax, 0x146; syscall; cmp rax, -0x1000; ja 0x113068; ret; 
0x00000000000cfe4e: mov eax, 0x148051e; ret 0xb848; 
0x000000000011f82c: mov eax, 0x149; syscall; cmp rax, -0x1000; ja 0x11f840; ret; 
0x0000000000114480: mov eax, 0x14; syscall; cmp rax, -0x1000; ja 0x1144e0; ret; 
0x0000000000120004: mov eax, 0x14a; syscall; cmp rax, -0xfff; jae 0x120014; ret; 
0x0000000000120034: mov eax, 0x14b; syscall; cmp rax, -0xfff; jae 0x120044; ret; 
0x000000000010e134: mov eax, 0x15; syscall; cmp rax, -0x1000; ja 0x10e148; ret; 
0x00000000000911f0: mov eax, 0x15d5; add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x000000000010d0f4: mov eax, 0x16; cmp esi, 2; ja 0x10d106; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000094e09: mov eax, 0x16; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000a8cae: mov eax, 0x16; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000094d40: mov eax, 0x16; ret; 
0x000000000010e924: mov eax, 0x16; syscall; cmp rax, -0xfff; jae 0x10e934; ret; 
0x0000000000114f73: mov eax, 0x17; syscall; cmp rax, -0x1000; ja 0x114ff0; ret; 
0x0000000000102714: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca4: mov eax, 0x18; syscall; ret; 
0x000000000011fca7: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x00000000001189e0: mov eax, 0x1a; syscall; cmp rax, -0x1000; ja 0x118a40; ret; 
0x0000000000118aa4: mov eax, 0x1b; syscall; cmp rax, -0xfff; jae 0x118ab4; ret; 
0x0000000000118a74: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x118a84; ret; 
0x000000000010d12b: mov eax, 0x1c; syscall; neg eax; ret; 
0x00000000001211f7: mov eax, 0x1d; syscall; cmp rax, -0x1000; ja 0x121210; ret; 
0x0000000000121194: mov eax, 0x1e; syscall; cmp rax, -0x1000; ja 0x1211a8; ret; 
0x0000000000121234: mov eax, 0x1f; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000003426b: mov eax, 0x200; ret; 
0x00000000000e506c: mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e513a: mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000bc1da: mov eax, 0x20; pop rbx; ret; 
0x000000000010e894: mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x000000000010e8c4: mov eax, 0x21; syscall; cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x00000000000e2e40: mov eax, 0x22; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x00000000000d41b4: mov eax, 0x24; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e2d94: mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000d41e4: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e40c4: mov eax, 0x27; syscall; ret; 
0x0000000000112fa7: mov eax, 0x28; syscall; cmp rax, -0xfff; jae 0x112fb7; ret; 
0x00000000001207a4: mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x1207b4; ret; 
0x00000000001201a0: mov eax, 0x2a; syscall; cmp rax, -0x1000; ja 0x120200; ret; 
0x00000000001200d0: mov eax, 0x2b; syscall; cmp rax, -0x1000; ja 0x120130; ret; 
0x0000000000120529: mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x0000000000120683: mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x120708; ret; 
0x0000000000120309: mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120380; ret; 
0x00000000001203c3: mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120440; ret; 
0x00000000001205e0: mov eax, 0x2e; syscall; cmp rax, -0x1000; ja 0x120640; ret; 
0x0000000000120480: mov eax, 0x2f; syscall; cmp rax, -0x1000; ja 0x1204e0; ret; 
0x00000000000bc1d3: mov eax, 0x30; pop rbx; ret; 
0x0000000000120774: mov eax, 0x30; syscall; cmp rax, -0xfff; jae 0x120784; ret; 
0x0000000000120164: mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000001202c4: mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x1202d4; ret; 
0x0000000000120264: mov eax, 0x33; syscall; cmp rax, -0xfff; jae 0x120274; ret; 
0x0000000000120234: mov eax, 0x34; syscall; cmp rax, -0xfff; jae 0x120244; ret; 
0x00000000001207d7: mov eax, 0x35; syscall; cmp rax, -0xfff; jae 0x1207e7; ret; 
0x0000000000120747: mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x120757; ret; 
0x0000000000120297: mov eax, 0x37; syscall; cmp rax, -0xfff; jae 0x1202a7; ret; 
0x00000000000e3174: mov eax, 0x3b; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e2c33: mov eax, 0x3d; syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000433d4: mov eax, 0x3e; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000e2b44: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000bc1cc: mov eax, 0x40; pop rbx; ret; 
0x00000000000e50e8: mov eax, 0x40; ret; 
0x0000000000121084: mov eax, 0x40; syscall; cmp rax, -0x1000; ja 0x121098; ret; 
0x00000000000e5b04: mov eax, 0x40fffffd; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000001211c4: mov eax, 0x43; syscall; cmp rax, -0x1000; ja 0x1211d8; ret; 
0x000000000002f701: mov eax, 0x44000000; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000136ed6: mov eax, 0x448b0007; ret 0x4804; 
0x0000000000121014: mov eax, 0x44; syscall; cmp rax, -0x1000; ja 0x121028; ret; 
0x0000000000120eb3: mov eax, 0x45; syscall; cmp rax, -0x1000; ja 0x120f20; ret; 
0x0000000000120f63: mov eax, 0x46; syscall; cmp rax, -0x1000; ja 0x120fe0; ret; 
0x0000000000121044: mov eax, 0x47; syscall; cmp rax, -0x1000; ja 0x121058; ret; 
0x000000000010e574: mov eax, 0x49; syscall; cmp rax, -0xfff; jae 0x10e584; ret; 
0x00000000001151a0: mov eax, 0x4a; syscall; cmp rax, -0x1000; ja 0x1151f0; ret; 
0x0000000000115260: mov eax, 0x4b; syscall; cmp rax, -0x1000; ja 0x1152b0; ret; 
0x0000000000116cc4: mov eax, 0x4c; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116cf4: mov eax, 0x4d; syscall; cmp rax, -0x1000; ja 0x116d08; ret; 
0x000000000010ea14: mov eax, 0x50; syscall; cmp rax, -0xfff; jae 0x10ea24; ret; 
0x000000000010ea44: mov eax, 0x51; syscall; cmp rax, -0xfff; jae 0x10ea54; ret; 
0x0000000000062e84: mov eax, 0x52; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x000000000010dc54: mov eax, 0x53; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010fd34: mov eax, 0x54; syscall; cmp rax, -0xfff; jae 0x10fd44; ret; 
0x000000000010e990: mov eax, 0x55; syscall; cmp rax, -0x1000; ja 0x10e9e0; ret; 
0x000000000010fbb4: mov eax, 0x56; syscall; cmp rax, -0xfff; jae 0x10fbc4; ret; 
0x000000000010fcd4: mov eax, 0x57; syscall; cmp rax, -0xfff; jae 0x10fce4; ret; 
0x000000000010fc14: mov eax, 0x58; syscall; cmp rax, -0xfff; jae 0x10fc24; ret; 
0x000000000010fc74: mov eax, 0x59; syscall; cmp rax, -0xfff; jae 0x10fc84; ret; 
0x000000000010db64: mov eax, 0x5a; syscall; cmp rax, -0xfff; jae 0x10db74; ret; 
0x000000000010feac: mov eax, 0x5b000000; pop r12; pop r13; pop r14; ret; 
0x00000000000e49bd: mov eax, 0x5b000000; pop rbp; ret; 
0x000000000010db94: mov eax, 0x5b; syscall; cmp rax, -0xfff; jae 0x10dba4; ret; 
0x000000000010f364: mov eax, 0x5c; syscall; cmp rax, -0xfff; jae 0x10f374; ret; 
0x000000000010f394: mov eax, 0x5d; syscall; cmp rax, -0xfff; jae 0x10f3a4; ret; 
0x000000000010f3c4: mov eax, 0x5e; syscall; cmp rax, -0xfff; jae 0x10f3d4; ret; 
0x000000000010db54: mov eax, 0x5f; syscall; ret; 
0x00000000000bc1c5: mov eax, 0x60; pop rbx; ret; 
0x00000000000d0ed9: mov eax, 0x60; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x0000000000113de4: mov eax, 0x62; syscall; cmp rax, -0xfff; jae 0x113df4; ret; 
0x000000000011fdc4: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11fdd4; ret; 
0x00000000000e40e4: mov eax, 0x66; syscall; ret; 
0x000000000011fc44: mov eax, 0x67; syscall; cmp rax, -0xfff; jae 0x11fc54; ret; 
0x00000000000e4104: mov eax, 0x68; syscall; ret; 
0x00000000000e40f4: mov eax, 0x6b; syscall; ret; 
0x00000000000e4114: mov eax, 0x6c; syscall; ret; 
0x00000000000e43a4: mov eax, 0x6d; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e40d4: mov eax, 0x6e; syscall; ret; 
0x00000000000e43d4: mov eax, 0x6f; syscall; ret; 
0x00000000000e4434: mov eax, 0x70; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4124: mov eax, 0x73; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000ee45e: mov eax, 0x7408e383; xchg ebx, eax; pop rbx; ret; 
0x00000000000e4464: mov eax, 0x76; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4494: mov eax, 0x78; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e4374: mov eax, 0x79; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x000000000011f1c4: mov eax, 0x7a; syscall; cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x000000000011f1f4: mov eax, 0x7b; syscall; cmp rax, -0xfff; jae 0x11f204; ret; 
0x00000000000e4404: mov eax, 0x7c; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e4f5b: mov eax, 0x7d00; ret; 
0x000000000011f9a4: mov eax, 0x7d; syscall; cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x00000000000e5020: mov eax, 0x7e; ret; 
0x000000000011f9d4: mov eax, 0x7e; syscall; cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x0000000000042278: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000000e4f82: mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e500a: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000000043409: mov eax, 0x7f; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x00000000000e4f3f: mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x000000000013c9c0: mov eax, 0x7fffffff; ret; 
0x00000000000bc1ef: mov eax, 0x80; pop rbx; ret; 
0x0000000000043455: mov eax, 0x82; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x00000000000439c4: mov eax, 0x83; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x000000000013b3c4: mov eax, 0x83fffff2; clc; cmc; je 0x13b3c0; pop rbx; ret; 
0x000000000010d3d4: mov eax, 0x84; syscall; cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x000000000010d8fb: mov eax, 0x85; syscall; cmp rax, -0x1000; ja 0x10d910; ret; 
0x000000000011fe24: mov eax, 0x86; syscall; cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000011f3e4: mov eax, 0x87; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011c4bb: mov eax, 0x88; syscall; cmp rax, -0x1000; ja 0x11c4d0; ret; 
0x00000000000f89eb: mov eax, 0x89000000; ret; 
0x000000000012d412: mov eax, 0x89483e74; ret; 
0x0000000000146cf7: mov eax, 0x8948ffed; ret; 
0x000000000010da04: mov eax, 0x89; syscall; cmp rax, -0xfff; jae 0x10da14; ret; 
0x000000000010da34: mov eax, 0x8a; syscall; cmp rax, -0xfff; jae 0x10da44; ret; 
0x000000000015299e: mov eax, 0x8bda8948; xor cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000001141e4: mov eax, 0x8d; syscall; cmp rax, -0xfff; jae 0x1141f4; ret; 
0x0000000000102654: mov eax, 0x8e; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102684: mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b4: mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e4: mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102744: mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102774: mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a4: mov eax, 0x94; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x0000000000118b04: mov eax, 0x95; syscall; cmp rax, -0xfff; jae 0x118b14; ret; 
0x0000000000118b34: mov eax, 0x96; syscall; cmp rax, -0xfff; jae 0x118b44; ret; 
0x0000000000118b64: mov eax, 0x97; syscall; cmp rax, -0xfff; jae 0x118b74; ret; 
0x0000000000118b94: mov eax, 0x98; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000115624: mov eax, 0x99; syscall; cmp rax, -0xfff; jae 0x115634; ret; 
0x000000000011f934: mov eax, 0x9a; syscall; cmp rax, -0xfff; jae 0x11f944; ret; 
0x000000000011fd04: mov eax, 0x9b; syscall; cmp rax, -0xfff; jae 0x11fd14; ret; 
0x000000000011fd37: mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11fd47; ret; 
0x000000000011f904: mov eax, 0x9e; syscall; cmp rax, -0xfff; jae 0x11f914; ret; 
0x0000000000115164: mov eax, 0xa1; syscall; cmp rax, -0xfff; jae 0x115174; ret; 
0x0000000000115224: mov eax, 0xa2; syscall; cmp rax, -0xfff; jae 0x115234; ret; 
0x0000000000115134: mov eax, 0xa3; syscall; cmp rax, -0xfff; jae 0x115144; ret; 
0x00000000000d1077: mov eax, 0xa4; xor edi, edi; syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x000000000011fc77: mov eax, 0xa5; syscall; cmp rax, -0xfff; jae 0x11fc87; ret; 
0x000000000011f164: mov eax, 0xa6; syscall; cmp rax, -0xfff; jae 0x11f174; ret; 
0x0000000000115654: mov eax, 0xa7; syscall; cmp rax, -0xfff; jae 0x115664; ret; 
0x0000000000115684: mov eax, 0xa8; syscall; cmp rax, -0xfff; jae 0x115694; ret; 
0x0000000000115320: mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115330; ret; 
0x0000000000136e6a: mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000001189a4: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x1189b4; ret; 
0x0000000000114de4: mov eax, 0xaa; syscall; cmp rax, -0xfff; jae 0x114df4; ret; 
0x0000000000114f34: mov eax, 0xab; syscall; cmp rax, -0xfff; jae 0x114f44; ret; 
0x000000000011f014: mov eax, 0xac; syscall; cmp rax, -0xfff; jae 0x11f024; ret; 
0x000000000011efe4: mov eax, 0xad; syscall; cmp rax, -0xfff; jae 0x11eff4; ret; 
0x000000000011fa34: mov eax, 0xae; syscall; cmp rax, -0xfff; jae 0x11fa44; ret; 
0x000000000011fb57: mov eax, 0xaf; syscall; cmp rax, -0xfff; jae 0x11fb67; ret; 
0x000000000011fa64: mov eax, 0xb0; syscall; cmp rax, -0xfff; jae 0x11fa74; ret; 
0x000000000011fb24: mov eax, 0xb1; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fd67: mov eax, 0xb2; syscall; cmp rax, -0xfff; jae 0x11fd77; ret; 
0x000000000011fd97: mov eax, 0xb3; syscall; cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000011fcd4: mov eax, 0xb4; syscall; cmp rax, -0xfff; jae 0x11fce4; ret; 
0x000000000014d170: mov eax, 0xb8000000; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000118974: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x118984; ret; 
0x0000000000120064: mov eax, 0xba; syscall; ret; 
0x000000000011f194: mov eax, 0xbb; syscall; cmp rax, -0x1000; ja 0x11f1a8; ret; 
0x000000000011cfa7: mov eax, 0xbc; syscall; cmp rax, -0xfff; jae 0x11cfb7; ret; 
0x000000000011cf47: mov eax, 0xbd; syscall; cmp rax, -0xfff; jae 0x11cf57; ret; 
0x000000000011ce27: mov eax, 0xbe; syscall; cmp rax, -0xfff; jae 0x11ce37; ret; 
0x000000000011ce57: mov eax, 0xbf; syscall; cmp rax, -0xfff; jae 0x11ce67; ret; 
0x000000000010d1c3: mov eax, 0xc00141c0; cmp rdi, rsi; ja 0x10d1b8; mov eax, r8d; ret; 
0x000000000011ceb7: mov eax, 0xc0; syscall; cmp rax, -0xfff; jae 0x11cec7; ret; 
0x000000000011cd97: mov eax, 0xc1; syscall; cmp rax, -0xfff; jae 0x11cda7; ret; 
0x000000000011ce84: mov eax, 0xc2; syscall; cmp rax, -0xfff; jae 0x11ce94; ret; 
0x000000000011cdc4: mov eax, 0xc4; syscall; cmp rax, -0xfff; jae 0x11cdd4; ret; 
0x000000000011cf74: mov eax, 0xc5; syscall; cmp rax, -0xfff; jae 0x11cf84; ret; 
0x000000000011cf14: mov eax, 0xc6; syscall; cmp rax, -0xfff; jae 0x11cf24; ret; 
0x000000000011cdf4: mov eax, 0xc7; syscall; cmp rax, -0xfff; jae 0x11ce04; ret; 
0x00000000000d0dc4: mov eax, 0xc9; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000f23d1: mov eax, 0xc; pop rbp; pop r12; ret; 
0x00000000000f24a0: mov eax, 0xc; ret; 
0x0000000000098da6: mov eax, 0xca; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa2: mov eax, 0xca; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a4a: mov eax, 0xca; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093920: mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091018: mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f60: mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x000000000004764a: mov eax, 0xca; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198a9a: mov eax, 0xca; lea rdi, [rip + 0x55d5a]; syscall; pop rbx; ret; 
0x0000000000198dca: mov eax, 0xca; lea rdi, [rip + 0x57742]; syscall; pop rbp; ret; 
0x000000000014245a: mov eax, 0xca; lea rdi, [rip + 0xae5b2]; syscall; pop rbp; ret; 
0x0000000000117c23: mov eax, 0xca; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x00000000000630a4: mov eax, 0xca; syscall; ret; 
0x000000000011fa94: mov eax, 0xd5; syscall; cmp rax, -0xfff; jae 0x11faa4; ret; 
0x0000000000118ad7: mov eax, 0xd8; syscall; cmp rax, -0xfff; jae 0x118ae7; ret; 
0x00000000001205a4: mov eax, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de2b4: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x0000000000121157: mov eax, 0xdc; syscall; cmp rax, -0x1000; ja 0x121170; ret; 
0x000000000004814f: mov eax, 0xdeece66d; add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000015361a: mov eax, 0xe0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000dd11e: mov eax, 0xe3; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x000000000011f964: mov eax, 0xe4; syscall; ret; 
0x000000000011f423: mov eax, 0xe8; syscall; cmp rax, -0x1000; ja 0x11f490; ret; 
0x000000000011faf7: mov eax, 0xe9; syscall; cmp rax, -0xfff; jae 0x11fb07; ret; 
0x0000000000054efa: mov eax, 0xe; syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x0000000000120074: mov eax, 0xea; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000000cfe48: mov eax, 0xeb851eb0; push rcx; mov eax, 0x148051e; ret 0xb848; 
0x0000000000116aa4: mov eax, 0xeb; syscall; cmp rax, -0x1000; ja 0x116ab8; ret; 
0x000000000013f754: mov eax, 0xf000004; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018e639: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000e2ce6: mov eax, 0xf7; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x0000000000102a09: mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x00000000000d422d: mov eax, 0xfa89051e; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x00000000000e5018: mov eax, 0xfc17; ret; 
0x00000000000c8567: mov eax, 0xfd83949; xchg ebx, eax; ret; 
0x000000000011fbb4: mov eax, 0xfd; syscall; cmp rax, -0xfff; jae 0x11fbc4; ret; 
0x000000000011fb84: mov eax, 0xfe; syscall; cmp rax, -0xfff; jae 0x11fb94; ret; 
0x00000000000e5148: mov eax, 0xff; ret; 
0x000000000011fc14: mov eax, 0xff; syscall; cmp rax, -0xfff; jae 0x11fc24; ret; 
0x00000000000e4fc7: mov eax, 0xfffa; ret; 
0x0000000000041b65: mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000057c10: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057ddd: mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000160dc9: mov eax, 0xfffffffe; ret; 
0x0000000000043bda: mov eax, 0xfffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000013bcb6: mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000001028c7: mov eax, 0xffffffff; cmp dword ptr [rdi + 4], edx; ja 0x1028d7; setne al; movzx eax, al; ret; 
0x0000000000088038: mov eax, 0xffffffff; cmp rax, rcx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000000dd053: mov eax, 0xffffffff; endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000015cf5a: mov eax, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x000000000010288a: mov eax, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000008542d: mov eax, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000054db1: mov eax, 0xffffffff; mov eax, r8d; ret; 
0x000000000013c941: mov eax, 0xffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000013b531: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000004653e: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x00000000000875b9: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000000412be: mov eax, 0xffffffff; pop rbp; ret; 
0x000000000008a0d1: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000832ec: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008e663: mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000246f6: mov eax, 0xffffffff; ret; 
0x000000000008d2ee: mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d74e: mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x00000000001276df: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000dcfbe: mov eax, 1; add rsp, 8; ret; 
0x00000000000cf190: mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf16e: mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x0000000000192be0: mov eax, 1; jg 0x192bf0; neg eax; ret; 
0x00000000000cf080: mov eax, 1; jg 0xcf089; neg eax; ret; 
0x000000000018f9a6: mov eax, 1; jl 0x18f9b0; neg eax; ret; 
0x00000000000ec440: mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000001574dc: mov eax, 1; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x0000000000057c2d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000011733a: mov eax, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000008cd41: mov eax, 1; mov eax, r8d; ret; 
0x0000000000057b55: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000048195: mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001507c4: mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000926b9: mov eax, 1; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000014d07e: mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014fec6: mov eax, 1; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001507d6: mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507b6: mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000117373: mov eax, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000060f09: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000087594: mov eax, 1; pop rbp; pop r12; ret; 
0x000000000009eb13: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832ca: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000010c570: mov eax, 1; pop rbx; ret; 
0x000000000005562e: mov eax, 1; ret; 
0x0000000000043b89: mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010e070: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x0000000000113674: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x113688; ret; 
0x00000000000e5214: mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x000000000011d5d4: mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000057d54: mov eax, 2; ret; 
0x000000000013c16c: mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x00000000000dcff7: mov eax, 3; cmovne eax, edx; ret; 
0x00000000000cfb41: mov eax, 3; ret; 
0x000000000010e810: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x10e860; ret; 
0x0000000000113344: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x113358; ret; 
0x000000000013a5a6: mov eax, 3; syscall; ret; 
0x00000000000cfb51: mov eax, 4; ret; 
0x000000000010d4b3: mov eax, 4; syscall; cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x000000000012cf8f: mov eax, 5; pop r12; pop rbp; ret; 
0x0000000000106fb7: mov eax, 5; pop rbp; pop r12; ret; 
0x00000000000cfb61: mov eax, 5; ret; 
0x000000000010d512: mov eax, 5; syscall; cmp rax, -0x1000; ja 0x10d528; ret; 
0x00000000000cfb71: mov eax, 6; ret; 
0x000000000010d573: mov eax, 6; syscall; cmp rax, -0x1000; ja 0x10d588; ret; 
0x00000000000cfb81: mov eax, 7; ret; 
0x0000000000112960: mov eax, 7; syscall; cmp rax, -0x1000; ja 0x1129c0; ret; 
0x00000000000bc1e8: mov eax, 8; pop rbx; ret; 
0x000000000010e104: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000010c509: mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000094c46: mov eax, dword ptr [0x10]; ret; 
0x0000000000125309: mov eax, dword ptr [r12]; pop rbx; pop rbp; pop r12; ret; 
0x000000000014ff00: mov eax, dword ptr [r8 + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014ff60: mov eax, dword ptr [r8 + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014ff30: mov eax, dword ptr [r8 + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014d150: mov eax, dword ptr [r8 + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000bc79a: mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x000000000014d0f0: mov eax, dword ptr [r8]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000150857: mov eax, dword ptr [rax + 0x10]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000047578: mov eax, dword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000121fd8: mov eax, dword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc8: mov eax, dword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000014110b: mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x0000000000114c3c: mov eax, dword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x000000000011d031: mov eax, dword ptr [rax + 0x1c8]; ret; 
0x000000000012ce60: mov eax, dword ptr [rax + 0x30]; ret; 
0x00000000001228bb: mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011cd80: mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000014fdd1: mov eax, dword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000034486: mov eax, dword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000014ff01: mov eax, dword ptr [rax + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000034296: mov eax, dword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000150711: mov eax, dword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014ff61: mov eax, dword ptr [rax + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014ff31: mov eax, dword ptr [rax + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000034266: mov eax, dword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003453f: mov eax, dword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000473ce: mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000092720: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x000000000014cf94: mov eax, dword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000328f2: mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000014d151: mov eax, dword ptr [rax + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000015088f: mov eax, dword ptr [rax + 0xc]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000011d00b: mov eax, dword ptr [rax + 8]; ret; 
0x000000000009e84b: mov eax, dword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x00000000000bc79b: mov eax, dword ptr [rax + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x0000000000055848: mov eax, dword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x00000000001229ea: mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000034269: mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003445b: mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000033d63: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000123278: mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000122c39: mov eax, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x00000000000d0e92: mov eax, dword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb2: mov eax, dword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000000150817: mov eax, dword ptr [rax]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000010d8a5: mov eax, dword ptr [rax]; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x0000000000048308: mov eax, dword ptr [rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x000000000014d0f1: mov eax, dword ptr [rax]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000328f0: mov eax, dword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000088043: mov eax, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000000fec9c: mov eax, dword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000871a9: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034483: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034293: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034263: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000033d60: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328ed: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000034480: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034290: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034260: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341c0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034180: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034100: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034140: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034120: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000034240: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340c0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000034160: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000034080: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012ceb4: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000000473cb: mov eax, dword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001411fd: mov eax, dword ptr [rax]; ret; 
0x0000000000093549: mov eax, dword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x0000000000112942: mov eax, dword ptr [rbp + 0x10]; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ee330: mov eax, dword ptr [rbp + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034cb0: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000578b6: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x0000000000127a3f: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127a8f: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cdd5: mov eax, dword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000008b6f8: mov eax, dword ptr [rbx + 0x28]; sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000008cdcd: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000001279ef: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a04e1: mov eax, dword ptr [rbx - 0x72b7fff4]; adc eax, 0xcda24; cmovne rax, rdx; ret; 
0x000000000015323e: mov eax, dword ptr [rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x000000000017ab54: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a69: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000017ab35: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a4a: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000017ab66: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176816: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017abe7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176857: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ab86: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176826: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017ac07: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176877: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017aba6: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000000b3aed: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017ce6f: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac27: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176897: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017abc6: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000000b3b0d: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017aab7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000176787: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000b3ace: mov eax, dword ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000009c1f9: mov eax, dword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000017ff1a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000bc73d: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000001817f2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000008774f: mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017ab10: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000017ab20: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a25: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000017ab30: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a45: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000017ab50: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a65: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000000b3a15: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000017cf1c: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aa61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017ab61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176811: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ab81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176821: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017aba1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176831: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017abc1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176841: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017abe1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176851: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ac01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176871: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ac21: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176891: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017aab1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000176781: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000176731: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000017aae1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017aaf1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f6: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b39e6: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000010d074: mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000cef8b: mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x000000000014fdc5: mov eax, dword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150705: mov eax, dword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000093564: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000009358c: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000087e9e: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000087eb0: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000010d064: mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000cefa0: mov eax, dword ptr [rdi + 0x14]; cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000cefb5: mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000918ec: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000001574a5: mov eax, dword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000cefd0: mov eax, dword ptr [rdi + 0x1c]; cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cefeb: mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x0000000000148310: mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000de295: mov eax, dword ptr [rdi + 0x20]; ret; 
0x00000000000cf000: mov eax, dword ptr [rdi + 0x24]; cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cf015: mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x0000000000157634: mov eax, dword ptr [rdi + 0x28]; cmp eax, edx; jae 0x157648; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000093e95: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000095903: mov eax, dword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000157924: mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000008ce29: mov eax, dword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000cf020: mov eax, dword ptr [rdi + 0x2c]; cmp eax, dword ptr [rsi + 0x2c]; jne 0xcf080; ret; 
0x00000000000cf03b: mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000001482b1: mov eax, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x00000000000cf050: mov eax, dword ptr [rdi + 0x34]; cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x00000000000cf065: mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000cf070: mov eax, dword ptr [rdi + 0x3c]; cmp eax, dword ptr [rsi + 0x3c]; jne 0xcf080; ret; 
0x0000000000127655: mov eax, dword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127670; mov eax, 1; ret; 
0x000000000008ccf9: mov eax, dword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000918bf: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000093855: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000008aeac: mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x8aeb8; ret; 
0x0000000000087495: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000cef70: mov eax, dword ptr [rdi + 0xc]; cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x00000000000cef40: mov eax, dword ptr [rdi + 4]; cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x000000000010c784: mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001136a4: mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000113733: mov eax, dword ptr [rdi + 8]; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000094d14: mov eax, dword ptr [rdi + 8]; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000cef55: mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x000000000009397b: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x0000000000094d54: mov eax, dword ptr [rdi + 8]; sar eax, 1; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012ced4: mov eax, dword ptr [rdi + 8]; test eax, eax; jne 0x12cee8; cmp qword ptr [rdi], 0; je 0x12cef0; ret; 
0x0000000000192aa7: mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192be0; ret; 
0x0000000000192ac0: mov eax, dword ptr [rdi - 0xc]; cmp eax, dword ptr [rsi - 0xc]; jne 0x192be0; ret; 
0x0000000000192af0: mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; ret; 
0x0000000000192bd0: mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; xor eax, eax; ret; 
0x000000000018e144: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x000000000019239c: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x1925b0; xor eax, eax; ret; 
0x000000000018e3a3: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x0000000000192ad5: mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x000000000018e6a1: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f871: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000018e117: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f747: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000008cd84: mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008cd54: mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x00000000000cef2b: mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000951f5: mov eax, dword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e45: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095255: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e85: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000094da4: mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000121271: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000093556: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000095225: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095245: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea5: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e35: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e25: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x00000000000de2e4: mov eax, dword ptr [rdi]; ret; 
0x000000000008def4: mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008df04: mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x000000000014de08: mov eax, dword ptr [rdi]; test eax, eax; jne 0x14de10; ret; 
0x0000000000154508: mov eax, dword ptr [rdi]; test eax, eax; jne 0x154510; ret; 
0x00000000000885dc: mov eax, dword ptr [rdx + 0x20]; cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce16: mov eax, dword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce6: mov eax, dword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000008a71e: mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000001131c3: mov eax, dword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000102a41: mov eax, dword ptr [rdx + 8]; ret; 
0x00000000000341f7: mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000aedf6: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000136ed9: mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000033dfc: mov eax, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000033d9a: mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x00000000000328b1: mov eax, dword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000014ff79: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ff49: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d199: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d169: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x0000000000121f6a: mov eax, dword ptr [rdx]; cmp eax, -1; je 0x121fe0; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x000000000011f7b6: mov eax, dword ptr [rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x0000000000062f28: mov eax, dword ptr [rdx]; cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000000150871: mov eax, dword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000150779: mov eax, dword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000085590: mov eax, dword ptr [rdx]; ret; 
0x000000000014ff19: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d139: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000de12a: mov eax, dword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd149: mov eax, dword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000d1dbc: mov eax, dword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d0171: mov eax, dword ptr [rip + 0x11bcf9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0151: mov eax, dword ptr [rip + 0x11bd19]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d0051: mov eax, dword ptr [rip + 0x11be19]; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000009f825: mov eax, dword ptr [rip + 0x14c635]; lea rdx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f235: mov eax, dword ptr [rip + 0x14cc25]; lea rdx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e955: mov eax, dword ptr [rip + 0x14d515]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009f854: mov eax, dword ptr [rip + 0x151c36]; test eax, eax; jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009a0c9: mov eax, dword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009a0bf: mov eax, dword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009942e: mov eax, dword ptr [rip + 0x152a3c]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000098091: mov eax, dword ptr [rip + 0x153dd9]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000961cf: mov eax, dword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000961c5: mov eax, dword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x0000000000095194: mov eax, dword ptr [rip + 0x15711e]; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000093835: mov eax, dword ptr [rip + 0x159d65]; ret; 
0x000000000008d341: mov eax, dword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb9: mov eax, dword ptr [rip + 0x160fb1]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000084731: mov eax, dword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000048331: mov eax, dword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000048301: mov eax, dword ptr [rip + 0x1a3b69]; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000047c59: mov eax, dword ptr [rip + 0x1a4211]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004407a: mov eax, dword ptr [rip + 0x1a7df0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f3a: mov eax, dword ptr [rip + 0x1a7f30]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df1: mov eax, dword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000440a4: mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x0000000000044094: mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x0000000000043d31: mov eax, dword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c55: mov eax, dword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000043c39: mov eax, dword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bf1: mov eax, dword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ba1: mov eax, dword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b52: mov eax, dword ptr [rip + 0x1a8318]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043af3: mov eax, dword ptr [rip + 0x1a8377]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000432a1: mov eax, dword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043061: mov eax, dword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f21: mov eax, dword ptr [rip + 0x1a8f49]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000042542: mov eax, dword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004221c: mov eax, dword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e5b: mov eax, dword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000412b1: mov eax, dword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000041251: mov eax, dword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000344c5: mov eax, dword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e5: mov eax, dword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d55: mov eax, dword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000033d11: mov eax, dword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x00000000000328e5: mov eax, dword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a5: mov eax, dword ptr [rip + 0x1be3bd]; ret; 
0x0000000000026f58: mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x00000000000246e9: mov eax, dword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000024405: mov eax, dword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab5: mov eax, dword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa5: mov eax, dword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163435: mov eax, dword ptr [rip + 0x88a35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162dd5: mov eax, dword ptr [rip + 0x89095]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162db5: mov eax, dword ptr [rip + 0x890b5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d75: mov eax, dword ptr [rip + 0x890f5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d55: mov eax, dword ptr [rip + 0x89115]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d35: mov eax, dword ptr [rip + 0x89135]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d15: mov eax, dword ptr [rip + 0x89155]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160cc5: mov eax, dword ptr [rip + 0x8b1a5]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000160ad1: mov eax, dword ptr [rip + 0x8b399]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015ca45: mov eax, dword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153175: mov eax, dword ptr [rip + 0x98c25]; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000146f94: mov eax, dword ptr [rip + 0xa9be2]; test eax, eax; je 0x146fa0; ret; 
0x0000000000141105: mov eax, dword ptr [rip + 0xaad1d]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x00000000001411f5: mov eax, dword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000142f75: mov eax, dword ptr [rip + 0xadaa5]; test rax, rax; jne 0x142f88; ret; 
0x0000000000141b3d: mov eax, dword ptr [rip + 0xaeedd]; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x0000000000140cb8: mov eax, dword ptr [rip + 0xafb06]; test eax, eax; je 0x140cc8; ret; 
0x000000000012fe85: mov eax, dword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x000000000012f411: mov eax, dword ptr [rip + 0xbca59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001228b5: mov eax, dword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001200a5: mov eax, dword ptr [rip + 0xcbdc5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f8e1: mov eax, dword ptr [rip + 0xcc589]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8a1: mov eax, dword ptr [rip + 0xcc5c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fd1: mov eax, dword ptr [rip + 0xcdaa1]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc1: mov eax, dword ptr [rip + 0xcdab1]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011d011: mov eax, dword ptr [rip + 0xcee59]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011c4e9: mov eax, dword ptr [rip + 0xcf981]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001197d1: mov eax, dword ptr [rip + 0xd2699]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011979c: mov eax, dword ptr [rip + 0xd26ce]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011978a: mov eax, dword ptr [rip + 0xd26e0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000118f5e: mov eax, dword ptr [rip + 0xd2f0c]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001188f9: mov eax, dword ptr [rip + 0xd3571]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118704: mov eax, dword ptr [rip + 0xd3c3e]; test edi, edi; je 0x118714; mov dword ptr [rip + 0xd3c34], edi; ret; 
0x000000000011914a: mov eax, dword ptr [rip + 0xd46e0]; pop rcx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118bf5: mov eax, dword ptr [rip + 0xd4c2d]; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000116d48: mov eax, dword ptr [rip + 0xd5122]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000115771: mov eax, dword ptr [rip + 0xd66f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115749: mov eax, dword ptr [rip + 0xd6721]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115605: mov eax, dword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114c35: mov eax, dword ptr [rip + 0xd7225]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x0000000000114385: mov eax, dword ptr [rip + 0xd7ae5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142c9: mov eax, dword ptr [rip + 0xd7ba1]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001142b5: mov eax, dword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000011375c: mov eax, dword ptr [rip + 0xd870e]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001136fb: mov eax, dword ptr [rip + 0xd876f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000113149: mov eax, dword ptr [rip + 0xd8d21]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000113113: mov eax, dword ptr [rip + 0xd8d57]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112929: mov eax, dword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001127f1: mov eax, dword ptr [rip + 0xd9679]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x0000000000115b8e: mov eax, dword ptr [rip + 0xd9adc]; mov qword ptr [rip + 0xd9b05], rax; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000110da1: mov eax, dword ptr [rip + 0xdb0c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc39: mov eax, dword ptr [rip + 0xde231]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010dc21: mov eax, dword ptr [rip + 0xde249]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dbc5: mov eax, dword ptr [rip + 0xde2a5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010d9e9: mov eax, dword ptr [rip + 0xde481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d989: mov eax, dword ptr [rip + 0xde4e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d929: mov eax, dword ptr [rip + 0xde541]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d89e: mov eax, dword ptr [rip + 0xde5cc]; mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x000000000010d5a1: mov eax, dword ptr [rip + 0xde8c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d541: mov eax, dword ptr [rip + 0xde929]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4e1: mov eax, dword ptr [rip + 0xde989]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d245: mov eax, dword ptr [rip + 0xdec15]; lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000fec95: mov eax, dword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000001239f1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123969: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000001238e1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001236a1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001237c1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123471: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123731: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123501: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000123581: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000123851: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000001233e1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034435: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000034415: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000343f5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034375: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000343b5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000034315: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034395: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000034355: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000342d5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034335: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000343d5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000342f5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034455: mov eax, dword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034465: mov eax, dword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000328d1: mov eax, dword ptr [rsi + rax*8 + 0x80]; ret; 
0x000000000012edc6: mov eax, dword ptr [rsi]; mov dword ptr [r8 + 4], eax; test eax, eax; jne 0x12ed79; mov rax, rdi; ret; 
0x000000000010d114: mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x00000000000e2c93: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000a8b01: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041b74: mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000113254: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000001513ef: mov eax, dword ptr [rsp + 0x28]; push rax; call 0x151110; add rsp, 0x28; ret; 
0x000000000015fa02: mov eax, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x0000000000153a4e: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153abe: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b2e: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b8f: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf3: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c5e: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce1: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x00000000000e2e73: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d4d: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fdf: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000011f2a9: mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000120bfc: mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x00000000001577e4: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000349e6: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000048275: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000113058: mov eax, dword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fd1: mov eax, dword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000042614: mov eax, dword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000a8b60: mov eax, dword ptr [rsp - 0x10]; mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b78: mov eax, dword ptr [rsp - 0x18]; mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000010e9d6: mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000120370: mov eax, dword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000010c1c4: mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120436: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x0000000000196cc0: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122917: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122978: mov eax, dword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000014e564: mov eax, dword ptr [rsp]; jne 0x14e5ca; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001412cd: mov eax, dword ptr [rsp]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c883: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x000000000012530a: mov eax, dword ptr [rsp]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000125308: mov eax, dword ptr fs:[r12]; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d8a4: mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x0000000000048307: mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x000000000011f7b5: mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x0000000000062f27: mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000000046c1a: mov eax, eax; add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004301f: mov eax, eax; add rsp, 0x118; ret; 
0x000000000009cf78: mov eax, eax; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x00000000000d4a90: mov eax, eax; add rsp, 8; ret; 
0x0000000000062f0c: mov eax, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x000000000009ef1c: mov eax, eax; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000013c5da: mov eax, eax; mov byte ptr [r8 + 2], 0; ret; 
0x000000000013c33c: mov eax, eax; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000116ed6: mov eax, eax; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000085414: mov eax, eax; mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000148338: mov eax, eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000011f7d8: mov eax, eax; mov eax, r8d; ret; 
0x000000000015cf67: mov eax, eax; mov qword ptr [rdx], 0; ret; 
0x000000000014d129: mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000001532f9: mov eax, eax; mov rax, r8; pop rbx; ret; 
0x00000000000627a4: mov eax, eax; mov rax, rbx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000047ce9: mov eax, eax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000dfb26: mov eax, eax; pop r12; pop r13; pop r14; ret; 
0x000000000009a49b: mov eax, eax; pop r12; pop r13; ret; 
0x000000000008b649: mov eax, eax; pop r12; ret; 
0x000000000009a507: mov eax, eax; pop r13; ret; 
0x0000000000084563: mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000013b731: mov eax, eax; pop rbp; pop r12; pop r13; ret; 
0x000000000002f706: mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000995a4: mov eax, eax; pop rbp; ret; 
0x000000000009cf7f: mov eax, eax; pop rbx; pop r12; ret; 
0x0000000000046600: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046d31: mov eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046c8c: mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000000438f0: mov eax, eax; pop rbx; ret; 
0x0000000000033da2: mov eax, eax; ret; 
0x000000000018d3c4: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000188a21: mov eax, eax; vzeroupper; ret; 
0x000000000009efc6: mov eax, ebp; mov rdx, r12; pop r12; pop r13; ret; 
0x00000000001417d1: mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000009f9e9: mov eax, ebp; pop r12; pop r13; ret; 
0x00000000000828ce: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000bcc01: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x00000000000bcba6: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008f50e: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055bb3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000008d93f: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094669: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000011cc4b: mov eax, ebx; mov rax, r8; pop rbx; ret; 
0x00000000000a2c3a: mov eax, ebx; pop rbx; cmovne rax, rdi; ret; 
0x00000000000c9f06: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008d884: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000089dfe: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000113913: mov eax, ebx; pop rbx; ret; 
0x0000000000041244: mov eax, ebx; ret; 
0x00000000000627a7: mov eax, ebx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000055a7b: mov eax, ecx; adc eax, eax; ret; 
0x0000000000043233: mov eax, ecx; add rsp, 0x148; ret; 
0x0000000000113a90: mov eax, ecx; add rsp, 0x38; ret; 
0x0000000000087f21: mov eax, ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000118734: mov eax, ecx; mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118746; ret; 
0x0000000000038ca6: mov eax, ecx; pop r12; ret; 
0x000000000007a178: mov eax, ecx; pop r14; ret; 
0x000000000007a0c7: mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000038c78: mov eax, ecx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c6b4b: mov eax, ecx; pop rbx; ret; 
0x00000000000bc110: mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000000bc15b: mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000086408: mov eax, ecx; ret; 
0x0000000000052946: mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x00000000000342b4: mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fb08: mov eax, edi; and eax, 0xffffff; ret; 
0x000000000012fac4: mov eax, edi; bswap eax; ret; 
0x00000000000472f4: mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x0000000000047345: mov eax, edi; cqo; idiv rsi; ret; 
0x0000000000047305: mov eax, edi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000116ec9: mov eax, edi; mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd889b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000116e54: mov eax, edi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x000000000005b6a4: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x000000000011eea5: mov eax, edi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000012fb22: mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000095651: mov eax, edi; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x00000000000a8eed: mov eax, edi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b522: mov eax, edi; ret; 
0x000000000012fad4: mov eax, edi; rol ax, 8; ret; 
0x000000000012f9ee: mov eax, edi; sar rax, 6; ret; 
0x000000000012fb98: mov eax, edi; shr eax, 0x18; ret; 
0x000000000011ee7e: mov eax, edi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001783af: mov eax, edi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x00000000001786ad: mov eax, edi; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x00000000001786cd: mov eax, edi; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x00000000001786ed: mov eax, edi; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000017870f: mov eax, edi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017872f: mov eax, edi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017874f: mov eax, edi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x00000000001785a5: mov eax, edi; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x00000000001785c7: mov eax, edi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x00000000001785ed: mov eax, edi; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x0000000000178605: mov eax, edi; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017862b: mov eax, edi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017864d: mov eax, edi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017866b: mov eax, edi; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x0000000000178347: mov eax, edi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x000000000017868d: mov eax, edi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000018a8f1: mov eax, edi; vzeroupper; ret; 
0x00000000000bc12e: mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000012943c: mov eax, edx; cmove eax, ecx; ret; 
0x00000000000a1ff4: mov eax, edx; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c4cf: mov eax, edx; cmp eax, esi; jb 0x13c4bd; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000013c42e: mov eax, edx; cmp esi, eax; ja 0x13c41c; mov eax, 0xffffffff; ret; 
0x000000000013c9ac: mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000015fafb: mov eax, edx; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000018863c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000013c933: mov eax, edx; movsxd rdx, ecx; ret; 
0x0000000000056af5: mov eax, edx; pop rbx; ret; 
0x00000000000440f9: mov eax, edx; ret; 
0x00000000000bc212: mov eax, edx; xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x000000000014fe9c: mov eax, esi; mov dword ptr [r8 + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000150794: mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d06c: mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000107062: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000134872: mov eax, esi; pop rbx; ret; 
0x0000000000041033: mov eax, esp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000085af5: mov eax, esp; pop r12; pop r13; pop r14; ret; 
0x00000000000a0399: mov eax, esp; pop r12; pop r13; ret; 
0x0000000000034b49: mov eax, esp; pop r12; ret; 
0x0000000000085a13: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000002ff34: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x000000000008e246: mov eax, esp; pop rbp; pop r12; pop r14; ret; 
0x00000000000477a3: mov eax, esp; pop rbp; pop r12; ret; 
0x00000000001179c5: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000005b935: mov eax, esp; pop rbx; pop r12; ret; 
0x0000000000080ad1: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22c: mov eax, esp; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000034aab: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000011920f: mov eax, esp; pop rdx; pop r12; ret; 
0x000000000013efd9: mov eax, r10d; ret; 
0x0000000000094668: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x0000000000113912: mov eax, r11d; pop rbx; ret; 
0x0000000000085af4: mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x000000000009d4e6: mov eax, r12d; pop r12; ret; 
0x0000000000085a12: mov eax, r12d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000125787: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000014dded: mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000001179c4: mov eax, r12d; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000005b934: mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000000868b2: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000044155: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e2fcf: mov eax, r13d; pop rbp; pop r12; pop r13; ret; 
0x0000000000114d6a: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000015c4aa: mov eax, r14d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000004301e: mov eax, r8d; add rsp, 0x118; ret; 
0x000000000011733f: mov eax, r8d; add rsp, 8; ret; 
0x000000000013c33b: mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000085413: mov eax, r8d; mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000148337: mov eax, r8d; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000015cf66: mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000047ce8: mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000dfb25: mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x000000000008b648: mov eax, r8d; pop r12; ret; 
0x0000000000084562: mov eax, r8d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000150320: mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x000000000002f705: mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000137a00: mov eax, r8d; pop rbp; ret; 
0x00000000000465ff: mov eax, r8d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046d30: mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046e6f: mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000438ef: mov eax, r8d; pop rbx; ret; 
0x0000000000033da1: mov eax, r8d; ret; 
0x0000000000043232: mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000113a8f: mov eax, r9d; add rsp, 0x38; ret; 
0x00000000000c6b4a: mov eax, r9d; pop rbx; ret; 
0x0000000000086407: mov eax, r9d; ret; 
0x00000000000938fe: mov ebp, 0x10015ae; ret; 
0x0000000000060f07: mov ebp, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000184b71: mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x0000000000184b81: mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000000ac661: mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac671: mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000ac651: mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000009f89f: mov ebp, 0x480014f6; mov dword ptr [rip + 0x14f69e], eax; add rsp, 8; ret; 
0x000000000018e334: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000184b91: mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x0000000000134501: mov ebp, 0x6401000b; mov dword ptr [r8], r9d; add rsp, 0x18; ret; 
0x00000000000e1a67: mov ebp, 0x89480010; ret 0x8548; 
0x0000000000026841: mov ebp, 0x8948ffff; ret; 
0x00000000000a8bdd: mov ebp, 0x8d48000d; add eax, 0x3819; cmove rax, rdx; ret; 
0x00000000000d0154: mov ebp, 0xc7640011; add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000120088: mov ebp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120134: mov ebp, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000184ae8: mov ebp, 0xea8148c0; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000ac6d1: mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac681: mov ebp, 0xea8348c0; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184bc1: mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac6b1: mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x00000000000ac691: mov ebp, 0xea8348c0; xor byte ptr [rax + 1], cl; ret 0x547c; 
0x000000000018e339: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000184c5b: mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000ac777: mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000ac5a7: mov ebp, 0xf80148c0; ret; 
0x0000000000184a80: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000b1bac: mov ebp, 0xf80148c6; ret; 
0x00000000000696a8: mov ebp, ds; sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000014e5c9: mov ebp, eax; movabs eax, dword ptr [0xfa1e0ff390fffe14]; ret; 
0x000000000011f8e3: mov ebp, eax; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000198cfd: mov ebp, esp; call 0x15fd10; pop rbp; mov qword ptr [rip + 0x57160], 0; ret; 
0x00000000001330a0: mov ebx, 0x1000bd0; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000052ad9: mov ebx, 0x39480019; ret; 
0x0000000000157971: mov ebx, 0x48ffeca9; mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000000a33b4: mov ebx, 0x4bb; add byte ptr [rax + 0x29], cl; ret; 
0x000000000011f7b1: mov ebx, 0x64000cc6; mov eax, dword ptr [rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x00000000001346dc: mov ebx, 0x6401000b; mov dword ptr [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000038db4: mov ebx, 0x850f5f3c; test byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000012c5e9: mov ebx, 0x89000001; ret 0x2944; 
0x0000000000078cb5: mov ebx, 0x89000005; ret 0xc083; 
0x0000000000124087: mov ebx, 0x8948000c; ret 0x8548; 
0x00000000000edb9d: mov ebx, 0xa4; add dword ptr [rdi], ecx; lahf; ret 0xd189; 
0x0000000000094608: mov ebx, 0xafb8341; je 0x94610; ret; 
0x0000000000154190: mov ebx, 0xbc0f48eb; ret; 
0x000000000014aeef: mov ebx, 0xc0850000; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000120278: mov ebx, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018e4b9: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000004123b: mov ebx, dword ptr [rax + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x00000000000e3669: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000004c951: mov ebx, dword ptr [rdx - 0x7cb80000]; ret; 
0x0000000000153236: mov ebx, dword ptr [rip + 0x98b64]; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x0000000000167901: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678e5: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001197bb: mov ebx, edi; mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000001196f5: mov ebx, esi; je 0x119700; pop rbx; ret; 
0x000000000005b4cb: mov ecx, 0x3a8; mov rsp, rdx; ret; 
0x00000000000a0403: mov ecx, 0x480000ba; cmove eax, edx; ret; 
0x000000000009f6a3: mov ecx, 0x48000126; cmove eax, edx; ret; 
0x00000000000a0893: mov ecx, 0x48000d01; cmovne eax, edx; ret; 
0x00000000000412b3: mov ecx, 0x64001aab; mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000c9d32: mov ecx, 0x83480e8b; ret 0x4804; 
0x0000000000079664: mov ecx, 0x89000002; ret 0xc083; 
0x00000000000a05a6: mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x00000000001204e4: mov ecx, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dfc06: mov ecx, 0xe8000d5d; add dword ptr [rdi + 6], ecx; add byte ptr [rbx + rcx*4 + 5], cl; pop rdx; ret 0x10; 
0x00000000000e17d3: mov ecx, 0xe80010dc; xchg esp, eax; or esi, esp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000018e5b9: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000120cb3: mov ecx, 0xf7000cb1; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001152b3: mov ecx, 0xf7000d6b; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000434b3: mov ecx, 0xf7001a89; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000010282a: mov ecx, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000c6b45: mov ecx, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x000000000010263d: mov ecx, 1; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000102619: mov ecx, 1; push 0; call 0x102520; add rsp, 0x18; ret; 
0x0000000000086e56: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000a3f1f: mov ecx, dword ptr [rax - 0x77]; ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000012d0c8: mov ecx, dword ptr [rbp - 8]; xor rcx, qword ptr fs:[0x28]; jne 0x12d1ad; leave; ret; 
0x00000000001230fc: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123108; ret; 
0x0000000000123165: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a4c: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aa9: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123ab8; ret; 
0x000000000018fb53: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000018fb40: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000018fb2e: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000121265: mov ecx, dword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121270; ret; 
0x00000000000bcb3b: mov ecx, dword ptr [rdi + r8*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x00000000000bcb3c: mov ecx, dword ptr [rdi + rax*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x000000000018c316: mov ecx, dword ptr [rdi + rdx + 0x20]; cmp ecx, dword ptr [rsi + rdx + 0x20]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c336: mov ecx, dword ptr [rdi + rdx + 0x40]; cmp ecx, dword ptr [rsi + rdx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c356: mov ecx, dword ptr [rdi + rdx + 0x60]; cmp ecx, dword ptr [rsi + rdx + 0x60]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c67c: mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c793: mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c769; vzeroupper; ret; 
0x000000000018cb52: mov ecx, dword ptr [rdi]; cmp ecx, dword ptr [rsi]; jne 0x18c769; vzeroupper; ret; 
0x0000000000055062: mov ecx, dword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x0000000000102a37: mov ecx, dword ptr [rdx + 4]; and ecx, esi; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x00000000000aedf3: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000e44a5: mov ecx, dword ptr [rip + 0x1079c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4475: mov ecx, dword ptr [rip + 0x1079f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4445: mov ecx, dword ptr [rip + 0x107a25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4415: mov ecx, dword ptr [rip + 0x107a55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b5: mov ecx, dword ptr [rip + 0x107ab5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4385: mov ecx, dword ptr [rip + 0x107ae5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4135: mov ecx, dword ptr [rip + 0x107d35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3185: mov ecx, dword ptr [rip + 0x108ce5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2da5: mov ecx, dword ptr [rip + 0x1090c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b55: mov ecx, dword ptr [rip + 0x109315]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41f5: mov ecx, dword ptr [rip + 0x117c75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41c5: mov ecx, dword ptr [rip + 0x117ca5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055579: mov ecx, dword ptr [rip + 0x1968f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000439d5: mov ecx, dword ptr [rip + 0x1a8495]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000433e5: mov ecx, dword ptr [rip + 0x1a8a85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113314: mov ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001207e8: mov ecx, dword ptr [rip + 0xcb682]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001207b5: mov ecx, dword ptr [rip + 0xcb6b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120785: mov ecx, dword ptr [rip + 0xcb6e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120758: mov ecx, dword ptr [rip + 0xcb712]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202d5: mov ecx, dword ptr [rip + 0xcbb95]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202a8: mov ecx, dword ptr [rip + 0xcbbc2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120275: mov ecx, dword ptr [rip + 0xcbbf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120245: mov ecx, dword ptr [rip + 0xcbc25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120175: mov ecx, dword ptr [rip + 0xcbcf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120085: mov ecx, dword ptr [rip + 0xcbde5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120045: mov ecx, dword ptr [rip + 0xcbe25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120015: mov ecx, dword ptr [rip + 0xcbe55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffe5: mov ecx, dword ptr [rip + 0xcbe85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffb8: mov ecx, dword ptr [rip + 0xcbeb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff88: mov ecx, dword ptr [rip + 0xcbee2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff55: mov ecx, dword ptr [rip + 0xcbf15]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff28: mov ecx, dword ptr [rip + 0xcbf42]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fef5: mov ecx, dword ptr [rip + 0xcbf75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fec5: mov ecx, dword ptr [rip + 0xcbfa5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe98: mov ecx, dword ptr [rip + 0xcbfd2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe65: mov ecx, dword ptr [rip + 0xcc005]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe35: mov ecx, dword ptr [rip + 0xcc035]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe05: mov ecx, dword ptr [rip + 0xcc065]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fdd5: mov ecx, dword ptr [rip + 0xcc095]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fda8: mov ecx, dword ptr [rip + 0xcc0c2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd78: mov ecx, dword ptr [rip + 0xcc0f2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd48: mov ecx, dword ptr [rip + 0xcc122]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd15: mov ecx, dword ptr [rip + 0xcc155]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fce5: mov ecx, dword ptr [rip + 0xcc185]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcb8: mov ecx, dword ptr [rip + 0xcc1b2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc88: mov ecx, dword ptr [rip + 0xcc1e2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc55: mov ecx, dword ptr [rip + 0xcc215]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc25: mov ecx, dword ptr [rip + 0xcc245]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbf5: mov ecx, dword ptr [rip + 0xcc275]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbc5: mov ecx, dword ptr [rip + 0xcc2a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fb95: mov ecx, dword ptr [rip + 0xcc2d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa45: mov ecx, dword ptr [rip + 0xcc425]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa15: mov ecx, dword ptr [rip + 0xcc455]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9e5: mov ecx, dword ptr [rip + 0xcc485]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9b5: mov ecx, dword ptr [rip + 0xcc4b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f988: mov ecx, dword ptr [rip + 0xcc4e2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f945: mov ecx, dword ptr [rip + 0xcc525]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f915: mov ecx, dword ptr [rip + 0xcc555]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3f5: mov ecx, dword ptr [rip + 0xcca75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3c8: mov ecx, dword ptr [rip + 0xccaa2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f335: mov ecx, dword ptr [rip + 0xccb35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f205: mov ecx, dword ptr [rip + 0xccc65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f1d5: mov ecx, dword ptr [rip + 0xccc95]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f175: mov ecx, dword ptr [rip + 0xcccf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f13e: mov ecx, dword ptr [rip + 0xccd2c]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f025: mov ecx, dword ptr [rip + 0xcce45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eff5: mov ecx, dword ptr [rip + 0xcce75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfb8: mov ecx, dword ptr [rip + 0xceeb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf85: mov ecx, dword ptr [rip + 0xceee5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf58: mov ecx, dword ptr [rip + 0xcef12]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf25: mov ecx, dword ptr [rip + 0xcef45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cef5: mov ecx, dword ptr [rip + 0xcef75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cec8: mov ecx, dword ptr [rip + 0xcefa2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce95: mov ecx, dword ptr [rip + 0xcefd5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce68: mov ecx, dword ptr [rip + 0xcf002]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce38: mov ecx, dword ptr [rip + 0xcf032]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce05: mov ecx, dword ptr [rip + 0xcf065]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cdd5: mov ecx, dword ptr [rip + 0xcf095]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cda8: mov ecx, dword ptr [rip + 0xcf0c2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ba5: mov ecx, dword ptr [rip + 0xd32c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b75: mov ecx, dword ptr [rip + 0xd32f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b45: mov ecx, dword ptr [rip + 0xd3325]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b15: mov ecx, dword ptr [rip + 0xd3355]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ae8: mov ecx, dword ptr [rip + 0xd3382]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ab5: mov ecx, dword ptr [rip + 0xd33b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118a85: mov ecx, dword ptr [rip + 0xd33e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001189b5: mov ecx, dword ptr [rip + 0xd34b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118985: mov ecx, dword ptr [rip + 0xd34e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118747: mov ecx, dword ptr [rip + 0xd3723]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115695: mov ecx, dword ptr [rip + 0xd67d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115665: mov ecx, dword ptr [rip + 0xd6805]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115635: mov ecx, dword ptr [rip + 0xd6835]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001152f5: mov ecx, dword ptr [rip + 0xd6b75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115235: mov ecx, dword ptr [rip + 0xd6c35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115175: mov ecx, dword ptr [rip + 0xd6cf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115145: mov ecx, dword ptr [rip + 0xd6d25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114f45: mov ecx, dword ptr [rip + 0xd6f25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114df5: mov ecx, dword ptr [rip + 0xd7075]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001143b5: mov ecx, dword ptr [rip + 0xd7ab5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f5: mov ecx, dword ptr [rip + 0xd7c75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113df5: mov ecx, dword ptr [rip + 0xd8075]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112fb8: mov ecx, dword ptr [rip + 0xd8eb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd45: mov ecx, dword ptr [rip + 0xdc125]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd15: mov ecx, dword ptr [rip + 0xdc155]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fce5: mov ecx, dword ptr [rip + 0xdc185]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fcb8: mov ecx, dword ptr [rip + 0xdc1b2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc85: mov ecx, dword ptr [rip + 0xdc1e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc55: mov ecx, dword ptr [rip + 0xdc215]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc25: mov ecx, dword ptr [rip + 0xdc245]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fbf8: mov ecx, dword ptr [rip + 0xdc272]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fbc5: mov ecx, dword ptr [rip + 0xdc2a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f408: mov ecx, dword ptr [rip + 0xdca62]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f3d5: mov ecx, dword ptr [rip + 0xdca95]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f3a5: mov ecx, dword ptr [rip + 0xdcac5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f375: mov ecx, dword ptr [rip + 0xdcaf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea55: mov ecx, dword ptr [rip + 0xdd415]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea25: mov ecx, dword ptr [rip + 0xdd445]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e965: mov ecx, dword ptr [rip + 0xdd505]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e935: mov ecx, dword ptr [rip + 0xdd535]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e905: mov ecx, dword ptr [rip + 0xdd565]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e8d5: mov ecx, dword ptr [rip + 0xdd595]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e8a5: mov ecx, dword ptr [rip + 0xdd5c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e585: mov ecx, dword ptr [rip + 0xdd8e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc95: mov ecx, dword ptr [rip + 0xde1d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc65: mov ecx, dword ptr [rip + 0xde205]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dba5: mov ecx, dword ptr [rip + 0xde2c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010db75: mov ecx, dword ptr [rip + 0xde2f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010da45: mov ecx, dword ptr [rip + 0xde425]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010da15: mov ecx, dword ptr [rip + 0xde455]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d3e5: mov ecx, dword ptr [rip + 0xdea85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001027b5: mov ecx, dword ptr [rip + 0xe96b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102785: mov ecx, dword ptr [rip + 0xe96e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102755: mov ecx, dword ptr [rip + 0xe9715]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102725: mov ecx, dword ptr [rip + 0xe9745]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026f5: mov ecx, dword ptr [rip + 0xe9775]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026c5: mov ecx, dword ptr [rip + 0xe97a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102695: mov ecx, dword ptr [rip + 0xe97d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102665: mov ecx, dword ptr [rip + 0xe9805]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102575: mov ecx, dword ptr [rip + 0xed00d]; mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000000b7ca4: mov ecx, dword ptr [rsi + 0x10]; mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b8664: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8684: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000bb134: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b86e5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9555: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8705: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7035: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7015: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b8625: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9495: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f75: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b8748: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95b8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7078: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b8768: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95d8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7098: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b8729: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9599: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7059: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000cef08: mov ecx, dword ptr [rsi + 0xc]; cmp dword ptr [rdi + 0xc], ecx; jne 0xcf080; xor eax, eax; ret; 
0x00000000000b86a5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9515: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000bb175: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b8644: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f94: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000bb114: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b86c5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9535: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000bb195: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000018c4b5: mov ecx, dword ptr [rsi + rdi + 0x20]; cmp ecx, dword ptr [rdx + rdi + 0x20]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c4e5: mov ecx, dword ptr [rsi + rdi + 0x40]; cmp ecx, dword ptr [rdx + rdi + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c94c: mov ecx, dword ptr [rsi + rdi]; cmp ecx, dword ptr [rdx + rdi]; jne 0x18c769; vzeroupper; ret; 
0x000000000018ac34: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000189194: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000bbc23: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018ac54: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891a4: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000bbc13: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018c636: mov ecx, dword ptr [rsi + rdx]; test eax, eax; jne 0x18c620; sub eax, ecx; vzeroupper; ret; 
0x000000000018cb0b: mov ecx, dword ptr [rsi + rdx]; test eax, eax; jne 0x18caf0; sub eax, ecx; vzeroupper; ret; 
0x0000000000167ca5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167cc1: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e85: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ea1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168065: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168081: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168255: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168271: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168455: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168471: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168655: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168671: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167eb5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000019239f: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x1925b0; xor eax, eax; ret; 
0x000000000018f771: mov ecx, dword ptr [rsi - 4]; cmp ecx, dword ptr [rdi - 4]; jne 0x18f9a6; xor eax, eax; ret; 
0x000000000018e3a6: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x0000000000168293: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168493: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168693: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018e141: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x18eb5f; xor eax, eax; ret; 
0x000000000016d384: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d304: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d284: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d404: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018e11b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f74b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000016d1f5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d165: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d0d5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000018e69d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f86d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x0000000000167ac5: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ae1: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b84e0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6ea0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b8531: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ee1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b9301: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b71: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b9330: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b90: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b9381: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd1: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000016dd33: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dcc3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dc53: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000189190: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000b84f0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9340: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b93a1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8541: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b8510: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b9360: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b8561: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f01: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b8581: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000018a5d0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000016db75: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db05: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da95: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da25: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d9b5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d945: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d8d5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000001891a1: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b85a1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9401: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f21: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b85c1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9421: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f31: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b85e1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9441: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f41: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000018a5f1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000016de15: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84c1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e81: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000001157e7: mov ecx, dword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000015fa07: mov ecx, dword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000011f0ac: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x000000000015fafe: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fca7: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x00000000001539d8: mov ecx, dword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x0000000000122912: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122973: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000118737: mov ecx, dword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118746; ret; 
0x000000000018fb3f: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000123360: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000bc73b: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000bc12c: mov ecx, eax; mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000007a171: mov ecx, eax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x000000000015772d: mov ecx, eax; xor eax, eax; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000a8639: mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x0000000000122c36: mov ecx, edi; mov r8d, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x00000000001229ed: mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000bbf5e: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000bbbf6: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000014d054: mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x000000000015f7ff: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x00000000000428ad: mov edi, 0x48001503; add esp, 0x10; pop rbx; ret; 
0x000000000012fe88: mov edi, 0x4864000b; add eax, dword ptr [0]; ret; 
0x00000000000709c9: mov edi, 0x89000009; ret 0xc083; 
0x00000000000e1897: mov edi, 0x89480010; ret 0x8548; 
0x000000000011fe9b: mov edi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000019839d: mov edi, 0xe9000555; retf 0xf805; jmp qword ptr [rsi + 0x2e]; 
0x000000000003d06d: mov edi, 0xe9fffe52; retf 0xfffd; jmp qword ptr [rsi + 0x2e]; 
0x000000000018e169: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000010d04c: mov edi, 0xf8; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d0e0: mov edi, 0xf8; ret; 
0x000000000011531b: mov edi, 0xfee1dead; mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115330; ret; 
0x000000000015a5b4: mov edi, 0xffff0885; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ff516: mov edi, dword ptr [rbx + 0x28]; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000137b4d: mov edi, dword ptr [rbx + 0x48]; test rdi, rdi; jne 0x137b40; pop rbx; ret; 
0x0000000000157d19: mov edi, dword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000094cc9: mov edi, dword ptr [rdi + 0x28]; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x000000000014de05: mov edi, dword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14de10; ret; 
0x0000000000154505: mov edi, dword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154510; ret; 
0x00000000001197be: mov edi, dword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000013a5a4: mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x0000000000122025: mov edi, dword ptr [rdx + 0xa8]; mov esi, 1; call 0x121ec0; ret; 
0x0000000000122005: mov edi, dword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x0000000000198e2c: mov edi, dword ptr [rip + 0x57bee]; call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x000000000015dee4: mov edi, dword ptr [rip + 0x8e546]; test edi, edi; jns 0x15def0; ret; 
0x0000000000117395: mov edi, dword ptr [rip + 0xd83cd]; test rdi, rdi; jne 0x1173b0; mov eax, 1; ret; 
0x00000000000f1ff1: mov edi, dword ptr [rsi + 0x28]; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000018c609: mov edi, dword ptr [rsi + rcx + 0x40]; cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c483: mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c909: mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x000000000005b623: mov edi, eax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x00000000000e2c88: mov edi, eax; mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000113249: mov edi, eax; mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000113b9e: mov edi, eax; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f477: mov edi, eax; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000043493: mov edi, eax; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001129a8: mov edi, eax; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e9cc: mov edi, eax; mov dword ptr [rsp], eax; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010e015: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000196931: mov edi, eax; mov qword ptr [rsp], rax; call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000041293: mov edi, ebp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000e2d42: mov edi, ecx; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fd4: mov edi, ecx; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120bf1: mov edi, ecx; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000120fc4: mov edi, ecx; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000012308f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000122ff7: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000122f5f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000122cef: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000122e2f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000122a8f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000122d8f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000122b2f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000122bbf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000122ecf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000001229ff: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001239f4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000012396c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000001238e4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001236a4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001237c4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123474: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123734: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123504: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000123584: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000123854: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000001233e4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001970f3: mov edi, edx; call 0x197200; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000005b6a7: mov edi, edx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x0000000000047329: mov edi, edx; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000018cf8f: mov edi, esi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018863f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000001970f2: mov edi, r10d; call 0x197200; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000000e2c87: mov edi, r8d; mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000113248: mov edi, r8d; mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000113b9d: mov edi, r8d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f476: mov edi, r8d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000043492: mov edi, r8d; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001129a7: mov edi, r8d; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e9cb: mov edi, r8d; mov dword ptr [rsp], eax; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010e014: mov edi, r8d; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000196930: mov edi, r8d; mov qword ptr [rsp], rax; call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000e2d41: mov edi, r9d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114fd3: mov edi, r9d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120bf0: mov edi, r9d; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000120fc3: mov edi, r9d; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000120e0a: mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000a28d6: mov edx, 0; cmove rax, rdx; ret; 
0x000000000015c604: mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009cb8d: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000b14ca: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000013bcf2: mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x00000000000bc0fe: mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x00000000000e5067: mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000013bccd: mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013bcb1: mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000001141b3: mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000000e50a2: mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000011cd7b: mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x00000000000e4f97: mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e4fea: mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000013c9ae: mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x00000000001041ce: mov edx, 0x83000002; stc; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x00000000001383c9: mov edx, 0x89480000; ret; 
0x000000000012b479: mov edx, 0x89480008; ret 0x57e9; 
0x0000000000057d62: mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x00000000000e9f06: mov edx, 0x89fffff5; ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x00000000000427fd: mov edx, 0x9483ff2; ret 0x840f; 
0x000000000019530a: mov edx, 0x94d3ff3; ret; 
0x0000000000122026: mov edx, 0xa8; mov esi, 1; call 0x121ec0; ret; 
0x0000000000122006: mov edx, 0xa8; xor esi, esi; call 0x121ec0; ret; 
0x00000000000445b8: mov edx, 0xa; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x00000000000db9e2: mov edx, 0xc7fff46a; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000120384: mov edx, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000042fd7: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000018e539: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000e4f7d: mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000a06b4: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06d4: mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x000000000009f358: mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x0000000000033c38: mov edx, 0xffffffff; cmove rax, rdx; ret; 
0x00000000000271fb: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000e5130: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5000: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000000047397: mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000013c948: mov edx, 0xffffffff; ret; 
0x0000000000043ddd: mov edx, 1; cmove eax, edx; ret; 
0x000000000006309a: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000102a84: mov edx, 2; cmove eax, edx; ret; 
0x00000000000529ed: mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000011f2ec: mov edx, 8; syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x000000000008cdbc: mov edx, dword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000150874: mov edx, dword ptr [rax + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000015077c: mov edx, dword ptr [rax + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000033d0a: mov edx, dword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x0000000000055600: mov edx, dword ptr [rax + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000008cdb5: mov edx, dword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000011efc4: mov edx, dword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001817ef: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000017ff1d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000012334e: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123360; ret; 
0x0000000000123c7e: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123c90; ret; 
0x000000000012cef7: mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000000ee489: mov edx, dword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee437: mov edx, dword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x0000000000063013: mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000827f4: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000008ce0f: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccdf: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000bccc9: mov edx, dword ptr [rdi]; cmp dword ptr [r9], edx; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x000000000018bda2: mov edx, dword ptr [rdi]; cmp edx, dword ptr [rsi]; jne 0x18bd8c; ret; 
0x0000000000043dd9: mov edx, dword ptr [rdi]; test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x00000000000bd20e: mov edx, dword ptr [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000034224: mov edx, dword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f4: mov edx, dword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055066: mov edx, dword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000009e925: mov edx, dword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x0000000000086e15: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916dd: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x0000000000034221: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f1: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003421e: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ee: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e2e81: mov edx, dword ptr [rip + 0x108fe9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d61: mov edx, dword ptr [rip + 0x109109]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c9: mov edx, dword ptr [rip + 0x10dba1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dd131: mov edx, dword ptr [rip + 0x10ed39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d4aa1: mov edx, dword ptr [rip + 0x117391]; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000d1091: mov edx, dword ptr [rip + 0x11add9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ef1: mov edx, dword ptr [rip + 0x11af79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dd9: mov edx, dword ptr [rip + 0x11b091]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062ed1: mov edx, dword ptr [rip + 0x188f99]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e99: mov edx, dword ptr [rip + 0x188fd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048281: mov edx, dword ptr [rip + 0x1a3be9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000434b1: mov edx, dword ptr [rip + 0x1a89b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000043421: mov edx, dword ptr [rip + 0x1a8a49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000034543: mov edx, dword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000023a68: mov edx, dword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x000000000012e7c1: mov edx, dword ptr [rip + 0xbd6a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121249: mov edx, dword ptr [rip + 0xcac21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211a9: mov edx, dword ptr [rip + 0xcacc1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121099: mov edx, dword ptr [rip + 0xcadd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121059: mov edx, dword ptr [rip + 0xcae11]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121029: mov edx, dword ptr [rip + 0xcae41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120fe1: mov edx, dword ptr [rip + 0xcae89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120f21: mov edx, dword ptr [rip + 0xcaf49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120cb1: mov edx, dword ptr [rip + 0xcb1b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120c09: mov edx, dword ptr [rip + 0xcb261]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120b51: mov edx, dword ptr [rip + 0xcb319]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120709: mov edx, dword ptr [rip + 0xcb761]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120641: mov edx, dword ptr [rip + 0xcb829]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001205a1: mov edx, dword ptr [rip + 0xcb8c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001204e1: mov edx, dword ptr [rip + 0xcb989]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120441: mov edx, dword ptr [rip + 0xcba29]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120381: mov edx, dword ptr [rip + 0xcbae9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120201: mov edx, dword ptr [rip + 0xcbc69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120131: mov edx, dword ptr [rip + 0xcbd39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f841: mov edx, dword ptr [rip + 0xcc629]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f7af: mov edx, dword ptr [rip + 0xcc6bb]; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x000000000011f761: mov edx, dword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f6b9: mov edx, dword ptr [rip + 0xcc7b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5f1: mov edx, dword ptr [rip + 0xcc879]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f541: mov edx, dword ptr [rip + 0xcc929]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f491: mov edx, dword ptr [rip + 0xcc9d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f301: mov edx, dword ptr [rip + 0xccb69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2b9: mov edx, dword ptr [rip + 0xccbb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f1a9: mov edx, dword ptr [rip + 0xcccc1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121cff: mov edx, dword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000118a41: mov edx, dword ptr [rip + 0xd3429]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116d09: mov edx, dword ptr [rip + 0xd5161]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd9: mov edx, dword ptr [rip + 0xd5191]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ca1: mov edx, dword ptr [rip + 0xd51c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ab9: mov edx, dword ptr [rip + 0xd53b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115331: mov edx, dword ptr [rip + 0xd6b39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001152b1: mov edx, dword ptr [rip + 0xd6bb9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001151f1: mov edx, dword ptr [rip + 0xd6c79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114ff1: mov edx, dword ptr [rip + 0xd6e79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114659: mov edx, dword ptr [rip + 0xd7811]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114599: mov edx, dword ptr [rip + 0xd78d1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144e1: mov edx, dword ptr [rip + 0xd7989]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114441: mov edx, dword ptr [rip + 0xd7a29]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114294: mov edx, dword ptr [rip + 0xd7c2e]; mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x00000000001141c1: mov edx, dword ptr [rip + 0xd7ca9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dc1: mov edx, dword ptr [rip + 0xd80a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113d81: mov edx, dword ptr [rip + 0xd80e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bb9: mov edx, dword ptr [rip + 0xd82b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113689: mov edx, dword ptr [rip + 0xd87e1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113651: mov edx, dword ptr [rip + 0xd8819]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113619: mov edx, dword ptr [rip + 0xd8851]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113359: mov edx, dword ptr [rip + 0xd8b11]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113311: mov edx, dword ptr [rip + 0xd8b59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113261: mov edx, dword ptr [rip + 0xd8c09]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113101: mov edx, dword ptr [rip + 0xd8d69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001130c1: mov edx, dword ptr [rip + 0xd8da9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113069: mov edx, dword ptr [rip + 0xd8e01]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001129c1: mov edx, dword ptr [rip + 0xd94a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e9e1: mov edx, dword ptr [rip + 0xdd489]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e861: mov edx, dword ptr [rip + 0xdd609]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e149: mov edx, dword ptr [rip + 0xddd21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e119: mov edx, dword ptr [rip + 0xddd51]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e0d1: mov edx, dword ptr [rip + 0xddd99]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e031: mov edx, dword ptr [rip + 0xdde39]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dc09: mov edx, dword ptr [rip + 0xde261]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d9d1: mov edx, dword ptr [rip + 0xde499]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d971: mov edx, dword ptr [rip + 0xde4f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d911: mov edx, dword ptr [rip + 0xde559]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d589: mov edx, dword ptr [rip + 0xde8e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d529: mov edx, dword ptr [rip + 0xde941]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4c9: mov edx, dword ptr [rip + 0xde9a1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c281: mov edx, dword ptr [rip + 0xdfbe9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c1d1: mov edx, dword ptr [rip + 0xdfc99]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000102881: mov edx, dword ptr [rip + 0xe95e9]; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102821: mov edx, dword ptr [rip + 0xe9649]; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000b7d25: mov edx, dword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7075: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7095: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000016de11: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000016dd30: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016db71: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dcc0: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016db01: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8512: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b9362: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000bafc2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000016dc50: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016da91: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b84f3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9343: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000bafa3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000016da21: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9404: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f24: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000bb064: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000016d9b1: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85c4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9424: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f34: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000bb084: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000016d941: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8563: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f03: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000bb023: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b85e4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9444: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f44: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000bb0a4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000016d8d1: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8583: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f13: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000bb043: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b93a4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8544: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000bb004: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000018b302: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a22: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5d2: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018b303: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a23: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5d3: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018b324: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a44: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5f4: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000328a1: mov edx, dword ptr [rsi + rax*8]; lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000016d381: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d301: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d281: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d1f1: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d161: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d0d1: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167cd1: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000167eb1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000168090: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ac8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ca8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e88: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168068: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167cc4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ea4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168084: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ae4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168290: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168490: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168690: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167905: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168259: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168459: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168659: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678e9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168275: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168475: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168675: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167921: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d401: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b84d0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000018ac20: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b9320: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e90: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000b7720: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x0000000000189180: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000000baf80: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b8521: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b9371: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ed1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000b77a1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000bafd1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b84b1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92f1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b6e71: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b76e1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000baf51: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000010fd7f: mov edx, dword ptr [rsi]; xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x00000000000a8a49: mov edx, dword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x000000000012290d: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012296e: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000a8971: mov edx, dword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000013c887: mov edx, dword ptr [rsp + 8]; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x00000000000a8a88: mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8aa0: mov edx, dword ptr [rsp - 0x18]; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x0000000000041d01: mov edx, eax; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x000000000013f091: mov edx, eax; mov byte ptr [r10], 0; ret; 
0x00000000000bc798: mov edx, eax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x0000000000093546: mov edx, eax; mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x00000000000dcff0: mov edx, eax; neg edx; cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x0000000000112aee: mov edx, eax; neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x000000000011f88c: mov edx, eax; or eax, esi; wrpkru; xor eax, eax; ret; 
0x000000000010f3f5: mov edx, ecx; mov eax, 0x104; syscall; cmp rax, -0xfff; jae 0x10f407; ret; 
0x0000000000062eb5: mov edx, ecx; mov eax, 0x108; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010fbe5: mov edx, ecx; mov eax, 0x109; syscall; cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x000000000010fca5: mov edx, ecx; mov eax, 0x10b; syscall; cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x00000000001130a5: mov edx, ecx; mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x1130c0; ret; 
0x0000000000113635: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x113650; ret; 
0x000000000011fe85: mov edx, ecx; mov eax, 0x11e; syscall; cmp rax, -0xfff; jae 0x11fe97; ret; 
0x000000000011f975: mov edx, ecx; mov eax, 0x12d; syscall; cmp rax, -0xfff; jae 0x11f987; ret; 
0x000000000011f3b5: mov edx, ecx; mov eax, 0x12e; syscall; cmp rax, -0xfff; jae 0x11f3c7; ret; 
0x000000000011ff15: mov edx, ecx; mov eax, 0x12f; syscall; cmp rax, -0xfff; jae 0x11ff27; ret; 
0x000000000011ff75: mov edx, ecx; mov eax, 0x136; syscall; cmp rax, -0xfff; jae 0x11ff87; ret; 
0x000000000011ffa5: mov edx, ecx; mov eax, 0x137; syscall; cmp rax, -0xfff; jae 0x11ffb7; ret; 
0x000000000011fca5: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x0000000000112fa5: mov edx, ecx; mov eax, 0x28; syscall; cmp rax, -0xfff; jae 0x112fb7; ret; 
0x00000000001207d5: mov edx, ecx; mov eax, 0x35; syscall; cmp rax, -0xfff; jae 0x1207e7; ret; 
0x0000000000120745: mov edx, ecx; mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x120757; ret; 
0x0000000000120295: mov edx, ecx; mov eax, 0x37; syscall; cmp rax, -0xfff; jae 0x1202a7; ret; 
0x000000000011fd35: mov edx, ecx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11fd47; ret; 
0x000000000011fc75: mov edx, ecx; mov eax, 0xa5; syscall; cmp rax, -0xfff; jae 0x11fc87; ret; 
0x000000000011fb55: mov edx, ecx; mov eax, 0xaf; syscall; cmp rax, -0xfff; jae 0x11fb67; ret; 
0x000000000011fd65: mov edx, ecx; mov eax, 0xb2; syscall; cmp rax, -0xfff; jae 0x11fd77; ret; 
0x000000000011fd95: mov edx, ecx; mov eax, 0xb3; syscall; cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000011cfa5: mov edx, ecx; mov eax, 0xbc; syscall; cmp rax, -0xfff; jae 0x11cfb7; ret; 
0x000000000011cf45: mov edx, ecx; mov eax, 0xbd; syscall; cmp rax, -0xfff; jae 0x11cf57; ret; 
0x000000000011ce25: mov edx, ecx; mov eax, 0xbe; syscall; cmp rax, -0xfff; jae 0x11ce37; ret; 
0x000000000011ce55: mov edx, ecx; mov eax, 0xbf; syscall; cmp rax, -0xfff; jae 0x11ce67; ret; 
0x000000000011ceb5: mov edx, ecx; mov eax, 0xc0; syscall; cmp rax, -0xfff; jae 0x11cec7; ret; 
0x000000000011cd95: mov edx, ecx; mov eax, 0xc1; syscall; cmp rax, -0xfff; jae 0x11cda7; ret; 
0x0000000000118ad5: mov edx, ecx; mov eax, 0xd8; syscall; cmp rax, -0xfff; jae 0x118ae7; ret; 
0x0000000000121155: mov edx, ecx; mov eax, 0xdc; syscall; cmp rax, -0x1000; ja 0x121170; ret; 
0x000000000011faf5: mov edx, ecx; mov eax, 0xe9; syscall; cmp rax, -0xfff; jae 0x11fb07; ret; 
0x000000000005b620: mov edx, edi; mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x00000000000bbf65: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000d4230: mov edx, edi; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x000000000013c56a: mov edx, esi; shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x00000000000a8e29: mov edx, esi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000009efc9: mov edx, esp; pop r12; pop r13; ret; 
0x0000000000041d00: mov edx, r8d; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x000000000011f88b: mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000102655: mov es, word ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000123368: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x00000000000b913e: mov es, word ptr [rsi]; add byte ptr [rax], al; ret; 
0x00000000000d0054: mov esi, 0x31450011; in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000cf58e: mov esi, 0x48000000; lea eax, [rdi - 0x10]; ret; 
0x000000000012d8fe: mov esi, 0x48fff8e1; cmove eax, edx; ret; 
0x0000000000113b23: mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x000000000015317e: mov esi, 0x640009dc; mov qword ptr [rax], rdx; ret; 
0x0000000000134433: mov esi, 0x6401000b; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000123d03: mov esi, 0x6401000c; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000c690d: mov esi, 0x6a9005d9; str word ptr [rax - 0x77]; ret 0xc148; 
0x000000000009391b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091013: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117c1e: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xd7c21]; syscall; ret; 
0x000000000006309f: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000005d9dd: mov esi, 0x83410014; in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000105442: mov esi, 0x83480142; ret 0x8401; 
0x0000000000026d8a: mov esi, 0x83480142; ret 0xf01; 
0x0000000000048b52: mov esi, 0x83480143; ret; 
0x0000000000126a12: mov esi, 0x8348014a; ret 0x4801; 
0x000000000012a4a2: mov esi, 0x8348014b; ret; 
0x00000000000e094a: mov esi, 0x83480153; ret; 
0x000000000004a185: mov esi, 0x8348016b; ret; 
0x0000000000123de4: mov esi, 0x84e8000c; in eax, 0xef; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000010534e: mov esi, 0x89480045; ret 0xb70f; 
0x000000000009d35e: mov esi, 0x8948feda; and byte ptr [rbp + rcx*4 + 0x60], cl; xor byte ptr [rax + 0x31], cl; ret 0x8948; 
0x000000000012b00b: mov esi, 0x894c0008; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x000000000009942a: mov esi, 0x8b48ffff; add eax, 0x152a3c; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000011f47e: mov esi, 0x8bfff751; and al, 0xc; add rsp, 0x28; ret; 
0x00000000000effb9: mov esi, 0xb60f000f; ret; 
0x000000000014de1a: mov esi, 0xc085ffff; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000a884d: mov esi, 0xd139070c; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x000000000011ff8b: mov esi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bc084: mov esi, 0xf000000; lahf; ret 0xea81; 
0x00000000000a8815: mov esi, 0xf2390714; je 0xa8810; ret; 
0x000000000018e239: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000049f2b: mov esi, 0xf98341d5; adc byte ptr [rbx - 0x6af069c4], cl; ret 0x8941; 
0x00000000001054ac: mov esi, 0xfc085c0; xchg esp, eax; ret 0x1589; 
0x000000000012202b: mov esi, 1; call 0x121ec0; ret; 
0x000000000002ca01: mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x0000000000033c2d: mov esi, dword ptr [rdi + 0x78]; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000018c511: mov esi, dword ptr [rsi + rcx + 0x60]; cmp esi, dword ptr [rdx + rcx + 0x60]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c9c8: mov esi, dword ptr [rsi + rcx]; cmp esi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x000000000018fb50: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000bbc27: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018fb3e: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000bbc18: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018fb2b: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000123108: mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000015f243: mov esi, eax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000115f2d: mov esi, eax; test rax, rax; jne 0x115ef4; xor eax, eax; pop rbp; ret; 
0x0000000000116e51: mov esi, ecx; mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000dcfb5: mov esi, edi; xor edi, edi; call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x00000000000f9757: mov esi, edx; dec dword ptr [rax - 0x77]; ret; 
0x000000000014929c: mov esi, esi; add rsi, rax; cmp rsi, qword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x0000000000157514: mov esi, esi; mov dword ptr [rdi + 0x28], eax; add rsi, r8; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000184af5: mov esi, fs; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000046c1f: mov esp, 0x1001aa6; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002c68b: mov esp, 0x24448b48; or byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x75]; add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000052a5e: mov esp, 0x39480019; ret; 
0x00000000000a06db: mov esp, 0x440f48c7; ret 0xc083; 
0x0000000000118a30: mov esp, 0x448bfff7; and al, 8; add rsp, 0x28; ret; 
0x00000000000ac161: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000ac191: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac181: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000183dae: mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000018cdd2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188292: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cdf2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882b2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018ce30: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882f0: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cdb2: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188272: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000529fc: mov esp, 0x4c60019; adc byte ptr [rax], al; ret; 
0x000000000018e434: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000183999: mov esp, 0x63480002; ret 0x8348; 
0x00000000001345e3: mov esp, 0x6401000b; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x00000000000d3567: mov esp, 0x83480011; ret; 
0x000000000012b1d5: mov esp, 0x89480008; ret 0x894c; 
0x000000000012b209: mov esp, 0x894c0008; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x000000000018c678: mov esp, 0x8bc031d1; or al, 0x17; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c2f9; vzeroupper; ret; 
0x0000000000089df9: mov esp, 0x8c48348; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000000529f5: mov esp, 0x8d480019; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000091f32: mov esp, 0x93ebffff; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000190d20: mov esp, 0xa8000000; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x00000000000b14c8: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018d192: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188812: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847c2: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x00000000001887f2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001847b2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000000abf3a: mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a1: mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b1: mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c1: mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d1: mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11a: mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce381: mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce391: mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a1: mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b1: mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000184732: mov esp, 0xc23948c0; jbe 0x184790; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184752: mov esp, 0xc23948c0; jbe 0x184790; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184772: mov esp, 0xc23948c0; jbe 0x184790; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184722: mov esp, 0xc23948c0; jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x000000000018c1e2: mov esp, 0xc23948c0; jbe 0x18c240; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c202: mov esp, 0xc23948c0; jbe 0x18c240; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c222: mov esp, 0xc23948c0; jbe 0x18c240; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d2: mov esp, 0xc23948c0; jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x00000000000a06ba: mov esp, 0xc2440fc7; add eax, 1; ret; 
0x0000000000188a62: mov esp, 0xc63948c0; jbe 0x188ae0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188385: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x00000000000cf344: mov esp, 0xc83948ca; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000b1d53: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf848: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000165e32: mov esp, 0xd32949d2; jbe 0x165e44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fc72: mov esp, 0xd32949d2; jbe 0x17fc84; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abe92: mov esp, 0xd32949d2; jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000120178: mov esp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120204: mov esp, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000024a64: mov esp, 0xe80018f5; ret; 
0x000000000018e439: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000ac25b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000018d097: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188727: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184857: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000000ac171: mov esp, 0xf80148c0; ret; 
0x000000000018d152: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e2: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x00000000001847a2: mov esp, 0xf80148c0; vzeroupper; ret; 
0x00000000001215f4: mov esp, 0xfffa9015; dec dword ptr [rbp + rcx*4 + 0x53]; add dword ptr [rcx + 0x39], ecx; ret 0x4f73; 
0x00000000001215ec: mov esp, 0xfffa901d; dec dword ptr [rdx - 0x77]; mov esp, 0xfffa9015; dec dword ptr [rbp + rcx*4 + 0x53]; add dword ptr [rcx + 0x39], ecx; ret 0x4f73; 
0x0000000000114328: mov esp, 0xffffffff; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e194: mov esp, eax; mov rax, r12; pop r12; ret; 
0x000000000008e1a1: mov esp, ebp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000010e9e3: mov esp, edx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005b4d1: mov esp, edx; ret; 
0x0000000000125d56: mov fs, word ptr [rax - 0x76b7fff4]; ret 0x8548; 
0x0000000000148c8d: mov qword ptr [r12 + 0x30], rax; call 0x1576d0; mov rax, r12; pop r12; ret; 
0x00000000000a1f71: mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x00000000000a2c08: mov qword ptr [r12], rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000086400: mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x0000000000057c0d: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057c2a: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000121c9c: mov qword ptr [r8], rax; mov qword ptr [rip + 0xca6b6], 0; ret; 
0x0000000000121c1c: mov qword ptr [r8], rax; mov qword ptr [rip + 0xca736], 0; ret; 
0x000000000005b4c9: mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x000000000005584b: mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000018fb34: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000013c464: mov qword ptr [r9], r10; ret; 
0x000000000013c52c: mov qword ptr [r9], rcx; ret; 
0x000000000013c50a: mov qword ptr [r9], rdi; ret; 
0x0000000000141b6f: mov qword ptr [rax + 0x10], 0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086e9a: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f1c: mov qword ptr [rax + 0x10], rcx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f58: mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086e5c: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000008762b: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000095906: mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000008cdbf: mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000087627: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000086e60: mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000086e9e: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f5c: mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087cc1: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000008e584: mov qword ptr [rax + 0xe0], rcx; call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x00000000001412d0: mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000092794: mov qword ptr [rax + 8], 0; ret; 
0x0000000000086e51: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000116d74: mov qword ptr [rax + 8], rdi; movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000008cdb7: mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000009278d: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000001142bb: mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000013c23c: mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000008558d: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000009a0bb: mov qword ptr [rax], rcx; mov rax, qword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c1: mov qword ptr [rax], rcx; mov rax, qword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000fec9e: mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x000000000009a0cf: mov qword ptr [rax], rdi; ret; 
0x000000000011efc6: mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008774c: mov qword ptr [rax], rdx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086e59: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000033d17: mov qword ptr [rax], rdx; ret; 
0x0000000000087f27: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000009a0c5: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961cb: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000e8163: mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000154573: mov qword ptr [rbp + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a20be: mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x0000000000087e49: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093463: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a037d: mov qword ptr [rbp], rax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000004806e: mov qword ptr [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002fdd6: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008cdd0: mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000015f909: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000094d06: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000127a42: mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000157975: mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000008c10d: mov qword ptr [rbx + 0x18], rax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000015f8c1: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000127a92: mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000081120: mov qword ptr [rbx + 0x18], rdi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000149e07: mov qword ptr [rbx + 0x20], rax; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000011d5d0: mov qword ptr [rbx + 0x20], rax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091974: mov qword ptr [rbx + 0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000149dc7: mov qword ptr [rbx + 0x20], rsi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ff51e: mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000008cdd8: mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000001376a4: mov qword ptr [rbx + 0x30], rax; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011d7cc: mov qword ptr [rbx + 0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000919bd: mov qword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000001159d7: mov qword ptr [rbx + 0x60], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087e4d: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093467: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e4ee: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008f506: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e648: mov qword ptr [rbx + 0x90], rsi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000011d91e: mov qword ptr [rbx + 0x98], rdx; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000935de: mov qword ptr [rbx + 8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000010c2d9: mov qword ptr [rbx + 8], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001279f2: mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000025b06: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000157e15: mov qword ptr [rbx], 0; call 0x153530; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001197c5: mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000000957d3: mov qword ptr [rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000060ef5: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a0a3d: mov qword ptr [rbx], rax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009eb10: mov qword ptr [rbx], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000015fe04: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015326c: mov qword ptr [rbx], rax; pop rbx; mov dword ptr [rip + 0x9dba6], 2; ret; 
0x000000000009e9b4: mov qword ptr [rbx], rax; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000009d10c: mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001532c5: mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000011976b: mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000639cc: mov qword ptr [rbx], rdx; mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bba0: mov qword ptr [rbx], rdx; mov dword ptr [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000178833: mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178843: mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178853: mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178863: mov qword ptr [rcx + 8], rdx; ret; 
0x000000000005b92c: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000163464: mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x000000000008aa19: mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000001787f0: mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x0000000000178810: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178820: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178830: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178840: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178850: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178860: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000003453b: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000178800: mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001787e0: mov qword ptr [rcx], rdx; ret; 
0x0000000000033c31: mov qword ptr [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000564de: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000121c3f: mov qword ptr [rdi + 0x10], rax; jb 0x121c58; mov qword ptr [rip + 0xca710], 2; ret; 
0x00000000000b86ec: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b912c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b955c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b870c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b703c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b79cc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b701c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b79ac: mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb1bc: mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b957f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1df: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b874f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b707f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7a2f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000bb21f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b876f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95df: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7a5f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000bb23f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b8730: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b95a0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7060: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb200: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000015755a: mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000918c6: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008d30e: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000015761c: mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x00000000000918f3: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000157de1: mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000001574e4: mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x000000000015751c: mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000157dec: mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000d128a: mov qword ptr [rdi + 0x20], rax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000918f7: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000918c2: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000918ba: mov qword ptr [rdi + 0x58], rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000827ec: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000b86ac: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b90cc: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b951c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fdc: mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b796c: mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb17c: mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86cc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b90fc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b953c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ffc: mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b798c: mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb19c: mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000016db77: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db07: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da97: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da27: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85aa: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b8f3a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b940a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000016d9b7: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f2a: mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b784a: mov qword ptr [rdi + 5], rdx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb06a: mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85ca: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b8f6a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b942a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000016d947: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f3a: mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b786a: mov qword ptr [rdi + 6], rdx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb08a: mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b85ea: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b8f9a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b944a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x000000000016d8d7: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f4a: mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b788a: mov qword ptr [rdi + 7], rdx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb0aa: mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000009ef32: mov qword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x0000000000055baf: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000055a77: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000564d7: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000056467: mov qword ptr [rdi + 8], r9; ret; 
0x00000000001576e6: mov qword ptr [rdi + 8], rax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x0000000000057dd9: mov qword ptr [rdi + 8], rax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057d65: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000157ddd: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000918ca: mov qword ptr [rdi + 8], rax; ret; 
0x0000000000062fb5: mov qword ptr [rdi + 8], rbp; add dword ptr [rdi + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008df52: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000056aec: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000018b32b: mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a4b: mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5fb: mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x0000000000055c37: mov qword ptr [rdi + r8], rax; sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x000000000018ac5b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891ab: mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000bc04e: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x000000000018bc4d: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000bbc1a: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000001677b4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677f2: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000563ce: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000167967: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a63: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679af: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b37: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d17: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f07: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680d8: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001682d8: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684d8: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677b0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677ee: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167963: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a5f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679ab: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b33: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d13: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f03: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680d4: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001682d4: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684d4: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677ac: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677ea: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016795f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a5b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679a7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b2f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d0f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167eff: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680d0: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001682d0: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684d0: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677a8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677e6: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b3b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d387: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167d1b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d307: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f0b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d287: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001680dc: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d1f8: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001682dc: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d168: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001684dc: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d0d8: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000b7eb0: mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000563c7: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634d: mov qword ptr [rdi - 8], r9; ret; 
0x00000000001677b8: mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677f6: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016796b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a67: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679b3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d407: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000563c0: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000000564d0: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000014a5fe: mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000a8749: mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x0000000000056347: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056461: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000005631c: mov qword ptr [rdi], r9; ret; 
0x00000000000a8b05: mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a86eb: mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x000000000005b51e: mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000041fb3: mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000000b8536: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b8ea6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000b9386: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd6: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe6: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b8566: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f06: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7806: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000bb026: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b8586: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000bb046: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b85a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9407: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f27: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7847: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb067: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85c7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9427: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f37: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7867: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb087: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b85e7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9447: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f47: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b7887: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb0a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000018b328: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a48: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5f8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000018ac58: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891a8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b93a7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8547: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b77e7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb007: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b6ee6: mov qword ptr [rdi], rcx; ret; 
0x00000000000b77c6: mov qword ptr [rdi], rcx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x000000000018bc52: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000a8975: mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000b8523: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b8e83: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b9373: mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b7ed0: mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b7ef0: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7f00: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f10: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f20: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018a6b0: mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ee0: mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000041fcd: mov qword ptr [rdi], rdx; ret; 
0x00000000000b77a3: mov qword ptr [rdi], rdx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000bafd3: mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x0000000000057b75: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018fb31: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000057b5a: mov qword ptr [rdi], rsi; ret; 
0x0000000000121c98: mov qword ptr [rdx + 0x10], rcx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca6b6], 0; ret; 
0x0000000000121c18: mov qword ptr [rdx + 0x10], rcx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca736], 0; ret; 
0x00000000000860c3: mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001492a7: mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000000958fe: mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000149281: mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000149285: mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000008e5bc: mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000000827fa: mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000017abea: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000017685a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017870a: mov qword ptr [rdx + 5], rax; mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017ac0a: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000017687a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017872a: mov qword ptr [rdx + 6], rax; mov rax, rdi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017ce72: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac2a: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000017689a: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017874a: mov qword ptr [rdx + 7], rax; mov rax, rdi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x000000000017aaba: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000017678a: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000001783aa: mov qword ptr [rdx + 8], rax; mov rax, rdi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x0000000000116db0: mov qword ptr [rdx + 8], rax; test rax, rax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x0000000000063019: mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000015cf69: mov qword ptr [rdx], 0; ret; 
0x00000000000a0b7c: mov qword ptr [rdx], r12; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x000000000011429a: mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x000000000017cf1e: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aa63: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000121273: mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000017ab63: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176813: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ab83: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176823: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017aba3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176833: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017abc3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176843: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017abe3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176853: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ac03: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176873: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ac23: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176893: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017aab3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000176783: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000d1db8: mov qword ptr [rdx], rax; mov rax, qword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x0000000000176733: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000178343: mov qword ptr [rdx], rax; mov rax, rdi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x0000000000034550: mov qword ptr [rdx], rax; ret; 
0x00000000000871ab: mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a8621: mov qword ptr [rdx], rcx; ret; 
0x000000000009f8a3: mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f865: mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009520b: mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951e2: mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951c2: mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000094ea8: mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e91: mov qword ptr [rip + 0x157448], rax; ret; 
0x0000000000094e77: mov qword ptr [rip + 0x157452], rdx; ret; 
0x0000000000094e38: mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e28: mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000095275: mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000009393f: mov qword ptr [rip + 0x15ae7e], 0; ret; 
0x000000000009389f: mov qword ptr [rip + 0x15af22], rbx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x000000000004757c: mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000023a4f: mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000000226b7: mov qword ptr [rip + 0x1ceae2], rdx; pop rax; pop rbx; pop rbp; ret; 
0x0000000000198897: mov qword ptr [rip + 0x553de], 0; ret; 
0x00000000001983fb: mov qword ptr [rip + 0x5556a], 0; add rsp, 8; ret; 
0x00000000001989e3: mov qword ptr [rip + 0x55db6], rbx; test rbx, rbx; jne 0x1989d0; pop rbx; ret; 
0x0000000000198bcc: mov qword ptr [rip + 0x56559], 0; ret; 
0x0000000000198c32: mov qword ptr [rip + 0x5692b], 0; add rsp, 8; ret; 
0x0000000000198d05: mov qword ptr [rip + 0x57160], 0; ret; 
0x0000000000198e37: mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x0000000000160daf: mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x0000000000160da6: mov qword ptr [rip + 0x8e0eb], r8; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x000000000015d36e: mov qword ptr [rip + 0x93dc7], 0; add rsp, 8; ret; 
0x0000000000138522: mov qword ptr [rip + 0xb53b7], rax; add rsp, 8; ret; 
0x000000000012d01b: mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x0000000000121c9f: mov qword ptr [rip + 0xca6b6], 0; ret; 
0x0000000000121c76: mov qword ptr [rip + 0xca6df], 0; ret; 
0x0000000000121c45: mov qword ptr [rip + 0xca710], 2; ret; 
0x0000000000121c1f: mov qword ptr [rip + 0xca736], 0; ret; 
0x0000000000121af8: mov qword ptr [rip + 0xca861], rbx; pop rbx; ret; 
0x0000000000121ade: mov qword ptr [rip + 0xca87b], rbx; pop rbx; ret; 
0x0000000000121873: mov qword ptr [rip + 0xcaae2], 3; add rsp, 8; ret; 
0x00000000001176ed: mov qword ptr [rip + 0xd809c], rax; add rsp, 8; ret; 
0x00000000001176c6: mov qword ptr [rip + 0xd80bf], 0; add rsp, 8; ret; 
0x000000000011767c: mov qword ptr [rip + 0xd810d], rax; mov rax, r8; add rsp, 8; ret; 
0x000000000011764c: mov qword ptr [rip + 0xd813d], rax; mov rax, r8; ret; 
0x0000000000115e99: mov qword ptr [rip + 0xd979c], 0; add rsp, 8; ret; 
0x0000000000115b94: mov qword ptr [rip + 0xd9b05], rax; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000115ae0: mov qword ptr [rip + 0xd9b59], rax; mov eax, 1; add rsp, 8; ret; 
0x000000000014820d: mov qword ptr [rsi + 0x10], 2; test eax, eax; je 0x148220; xor eax, eax; ret; 
0x0000000000047c2f: mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014830a: mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000048109: mov qword ptr [rsi + 0x10], rax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048158: mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000047c33: mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000008df2b: mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001131ce: mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001131c6: mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000148340: mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000148302: mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482a6: mov qword ptr [rsi + 8], rax; ret; 
0x0000000000055603: mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000157619: mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x000000000008d312: mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000013b411: mov qword ptr [rsi], rdi; ret; 
0x000000000013b94e: mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x000000000010e017: mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011304d: mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fc6: mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000005b11c: mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d028d: mov qword ptr [rsp - 0x10], rsi; fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041c63: mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057cc6: mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000196933: mov qword ptr [rsp], rax; call 0x197200; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000153182: mov qword ptr fs:[rax], rdx; ret; 
0x0000000000153221: mov qword ptr fs:[rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000957d2: mov qword ptr fs:[rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000015326b: mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9dba6], 2; ret; 
0x00000000001532c4: mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x000000000003453a: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000033c30: mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000003454f: mov qword ptr fs:[rdx], rax; ret; 
0x00000000000bbc19: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000013f090: mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000bc797: mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x000000000010f3f4: mov r10, rcx; mov eax, 0x104; syscall; cmp rax, -0xfff; jae 0x10f407; ret; 
0x0000000000062eb4: mov r10, rcx; mov eax, 0x108; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010fbe4: mov r10, rcx; mov eax, 0x109; syscall; cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x000000000010fca4: mov r10, rcx; mov eax, 0x10b; syscall; cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x0000000000113634: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x113650; ret; 
0x000000000011fe84: mov r10, rcx; mov eax, 0x11e; syscall; cmp rax, -0xfff; jae 0x11fe97; ret; 
0x000000000011f974: mov r10, rcx; mov eax, 0x12d; syscall; cmp rax, -0xfff; jae 0x11f987; ret; 
0x000000000011f3b4: mov r10, rcx; mov eax, 0x12e; syscall; cmp rax, -0xfff; jae 0x11f3c7; ret; 
0x000000000011ff14: mov r10, rcx; mov eax, 0x12f; syscall; cmp rax, -0xfff; jae 0x11ff27; ret; 
0x000000000011ff74: mov r10, rcx; mov eax, 0x136; syscall; cmp rax, -0xfff; jae 0x11ff87; ret; 
0x000000000011ffa4: mov r10, rcx; mov eax, 0x137; syscall; cmp rax, -0xfff; jae 0x11ffb7; ret; 
0x000000000011fca4: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x0000000000112fa4: mov r10, rcx; mov eax, 0x28; syscall; cmp rax, -0xfff; jae 0x112fb7; ret; 
0x00000000001207d4: mov r10, rcx; mov eax, 0x35; syscall; cmp rax, -0xfff; jae 0x1207e7; ret; 
0x0000000000120744: mov r10, rcx; mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x120757; ret; 
0x0000000000120294: mov r10, rcx; mov eax, 0x37; syscall; cmp rax, -0xfff; jae 0x1202a7; ret; 
0x000000000011fd34: mov r10, rcx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11fd47; ret; 
0x000000000011fc74: mov r10, rcx; mov eax, 0xa5; syscall; cmp rax, -0xfff; jae 0x11fc87; ret; 
0x000000000011fb54: mov r10, rcx; mov eax, 0xaf; syscall; cmp rax, -0xfff; jae 0x11fb67; ret; 
0x000000000011fd64: mov r10, rcx; mov eax, 0xb2; syscall; cmp rax, -0xfff; jae 0x11fd77; ret; 
0x000000000011fd94: mov r10, rcx; mov eax, 0xb3; syscall; cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000011cfa4: mov r10, rcx; mov eax, 0xbc; syscall; cmp rax, -0xfff; jae 0x11cfb7; ret; 
0x000000000011cf44: mov r10, rcx; mov eax, 0xbd; syscall; cmp rax, -0xfff; jae 0x11cf57; ret; 
0x000000000011ce24: mov r10, rcx; mov eax, 0xbe; syscall; cmp rax, -0xfff; jae 0x11ce37; ret; 
0x000000000011ce54: mov r10, rcx; mov eax, 0xbf; syscall; cmp rax, -0xfff; jae 0x11ce67; ret; 
0x000000000011ceb4: mov r10, rcx; mov eax, 0xc0; syscall; cmp rax, -0xfff; jae 0x11cec7; ret; 
0x000000000011cd94: mov r10, rcx; mov eax, 0xc1; syscall; cmp rax, -0xfff; jae 0x11cda7; ret; 
0x0000000000118ad4: mov r10, rcx; mov eax, 0xd8; syscall; cmp rax, -0xfff; jae 0x118ae7; ret; 
0x0000000000121154: mov r10, rcx; mov eax, 0xdc; syscall; cmp rax, -0x1000; ja 0x121170; ret; 
0x000000000011faf4: mov r10, rcx; mov eax, 0xe9; syscall; cmp rax, -0xfff; jae 0x11fb07; ret; 
0x00000000001130a4: mov r10d, ecx; mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x1130c0; ret; 
0x0000000000167900: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678e4: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000004123a: mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000114327: mov r12, 0xffffffffffffffff; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e193: mov r12, rax; mov rax, r12; pop r12; ret; 
0x000000000008e1a0: mov r12, rbp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000fec9b: mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x0000000000118733: mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118746; ret; 
0x000000000009cf77: mov r8, rax; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x00000000001532f8: mov r8, rax; mov rax, r8; pop rbx; ret; 
0x000000000011cc4a: mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x0000000000087f20: mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000116ec8: mov r8, rdi; mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd889b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000116e53: mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000095650: mov r8, rdi; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x00000000000e2b90: mov r8d, 0; cmovne r8, rax; mov rax, r8; ret; 
0x000000000010dbf0: mov r8d, 0x10c; syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x00000000000c8566: mov r8d, 0xfd83949; xchg ebx, eax; ret; 
0x0000000000088037: mov r8d, 0xffffffff; cmp rax, rcx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x000000000015cf59: mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000102889: mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000008542c: mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000054db0: mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000001574db: mov r8d, 1; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x0000000000117339: mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000008cd40: mov r8d, 1; mov eax, r8d; ret; 
0x0000000000117372: mov r8d, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000122c38: mov r8d, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000088042: mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000001482b0: mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x0000000000033dfb: mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000062f0b: mov r8d, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x000000000011f7d7: mov r8d, eax; mov eax, r8d; ret; 
0x00000000000627a3: mov r8d, eax; mov rax, rbx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000055061: mov r9, qword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000018ac53: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891a3: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000118736: mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118746; ret; 
0x00000000000bc73a: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x000000000007a170: mov r9, rax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000102829: mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000c6b44: mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x000000000010263c: mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000102618: mov r9d, 1; push 0; call 0x102520; add rsp, 0x18; ret; 
0x0000000000043bd9: mov rax, 0xfffffffffffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000013c940: mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000000042f2e: mov rax, 0xffffffffffffffff; ret; 
0x00000000000cfb20: mov rax, 1; ret; 
0x00000000000cfb30: mov rax, 2; ret; 
0x00000000000cfb40: mov rax, 3; ret; 
0x00000000000cfb50: mov rax, 4; ret; 
0x00000000000cfb60: mov rax, 5; ret; 
0x00000000000cfb70: mov rax, 6; ret; 
0x00000000000cfb80: mov rax, 7; ret; 
0x0000000000094c45: mov rax, qword ptr [0x10]; ret; 
0x00000000001412cc: mov rax, qword ptr [r12]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112941: mov rax, qword ptr [r13 + 0x10]; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000047577: mov rax, qword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000121fd7: mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc7: mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000114c3b: mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x000000000011d030: mov rax, qword ptr [rax + 0x1c8]; ret; 
0x000000000012ce5f: mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000014fdd0: mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000034485: mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034295: mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000150710: mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000034265: mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003453e: mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000011d028: mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000009271f: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x000000000014cf93: mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000011d00a: mov rax, qword ptr [rax + 8]; ret; 
0x000000000009e84a: mov rax, qword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x0000000000055847: mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x0000000000034298: mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000033d62: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000d0e91: mov rax, qword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb1: mov rax, qword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000328ef: mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000034482: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034292: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034262: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000033d5f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328ec: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003447f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000003428f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003425f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341bf: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000003419f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000003417f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000340ff: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003413f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000003409f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003411f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340df: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003423f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340bf: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003415f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000003407f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012ceb3: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000000473ca: mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001411fc: mov rax, qword ptr [rax]; ret; 
0x0000000000093548: mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x00000000000578b5: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x0000000000127a3e: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127a8e: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cdd4: mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000008b6f7: mov rax, qword ptr [rbx + 0x28]; sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000008cdcc: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000001279ee: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015323d: mov rax, qword ptr [rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x000000000017abe6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176856: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ac06: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176876: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ce6e: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac26: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176896: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017aab6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000176786: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000009c1f8: mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000017cf1b: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017aa60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017ab60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176810: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ab80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176820: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017aba0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176830: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017abc0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176840: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017abe0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176850: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ac00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176870: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ac20: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176890: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017aab0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000176780: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000176730: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000014fdc4: mov rax, qword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150704: mov rax, qword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000918eb: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000001574a4: mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de294: mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093e94: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000095902: mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000008ce28: mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000127654: mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127670; mov eax, 1; ret; 
0x000000000008ccf8: mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000918be: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000093854: mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000087494: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000009397a: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000018e6a0: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f870: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000018e116: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f746: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x00000000000951f4: mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e44: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095254: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e84: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000121270: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000093555: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000095224: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095244: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea4: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e34: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e24: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x00000000000885db: mov rax, qword ptr [rdx + 0x20]; cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce15: mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce5: mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000001131c2: mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000034226: mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000328b0: mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000014ff78: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000014ff48: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d198: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d168: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x0000000000150870: mov rax, qword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000150778: mov rax, qword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000014ff18: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d138: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000de129: mov rax, qword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd148: mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000d1dbb: mov rax, qword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d0170: mov rax, qword ptr [rip + 0x11bcf9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0150: mov rax, qword ptr [rip + 0x11bd19]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d0050: mov rax, qword ptr [rip + 0x11be19]; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000009f824: mov rax, qword ptr [rip + 0x14c635]; lea rdx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f234: mov rax, qword ptr [rip + 0x14cc25]; lea rdx, [rip + 0xe45de]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e954: mov rax, qword ptr [rip + 0x14d515]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009a0c8: mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009a0be: mov rax, qword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009942d: mov rax, qword ptr [rip + 0x152a3c]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000098090: mov rax, qword ptr [rip + 0x153dd9]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000961ce: mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000961c4: mov rax, qword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x0000000000095193: mov rax, qword ptr [rip + 0x15711e]; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000093834: mov rax, qword ptr [rip + 0x159d65]; ret; 
0x000000000008d340: mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb8: mov rax, qword ptr [rip + 0x160fb1]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000084730: mov rax, qword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000048330: mov rax, qword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000048300: mov rax, qword ptr [rip + 0x1a3b69]; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000047c58: mov rax, qword ptr [rip + 0x1a4211]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044079: mov rax, qword ptr [rip + 0x1a7df0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f39: mov rax, qword ptr [rip + 0x1a7f30]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df0: mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d30: mov rax, qword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c54: mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000043c38: mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bf0: mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ba0: mov rax, qword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b51: mov rax, qword ptr [rip + 0x1a8318]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043af2: mov rax, qword ptr [rip + 0x1a8377]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000432a0: mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043060: mov rax, qword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f20: mov rax, qword ptr [rip + 0x1a8f49]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000042541: mov rax, qword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004221b: mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e5a: mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000412b0: mov rax, qword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000041250: mov rax, qword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000344c4: mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e4: mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d54: mov rax, qword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000033d10: mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x00000000000328e4: mov rax, qword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a4: mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x00000000000246e8: mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000024404: mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab4: mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa4: mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163434: mov rax, qword ptr [rip + 0x88a35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162dd4: mov rax, qword ptr [rip + 0x89095]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162db4: mov rax, qword ptr [rip + 0x890b5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d74: mov rax, qword ptr [rip + 0x890f5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d54: mov rax, qword ptr [rip + 0x89115]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d34: mov rax, qword ptr [rip + 0x89135]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d14: mov rax, qword ptr [rip + 0x89155]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160cc4: mov rax, qword ptr [rip + 0x8b1a5]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000160ad0: mov rax, qword ptr [rip + 0x8b399]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015ca44: mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153174: mov rax, qword ptr [rip + 0x98c25]; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000141104: mov rax, qword ptr [rip + 0xaad1d]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x00000000001411f4: mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000142f74: mov rax, qword ptr [rip + 0xadaa5]; test rax, rax; jne 0x142f88; ret; 
0x0000000000141b3c: mov rax, qword ptr [rip + 0xaeedd]; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x000000000012fe84: mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x000000000012f410: mov rax, qword ptr [rip + 0xbca59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001228b4: mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001200a4: mov rax, qword ptr [rip + 0xcbdc5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f8e0: mov rax, qword ptr [rip + 0xcc589]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f8a0: mov rax, qword ptr [rip + 0xcc5c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fd0: mov rax, qword ptr [rip + 0xcdaa1]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc0: mov rax, qword ptr [rip + 0xcdab1]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011d010: mov rax, qword ptr [rip + 0xcee59]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011c4e8: mov rax, qword ptr [rip + 0xcf981]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001197d0: mov rax, qword ptr [rip + 0xd2699]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011979b: mov rax, qword ptr [rip + 0xd26ce]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000119789: mov rax, qword ptr [rip + 0xd26e0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000118f5d: mov rax, qword ptr [rip + 0xd2f0c]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001188f8: mov rax, qword ptr [rip + 0xd3571]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000119149: mov rax, qword ptr [rip + 0xd46e0]; pop rcx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118bf4: mov rax, qword ptr [rip + 0xd4c2d]; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000116d47: mov rax, qword ptr [rip + 0xd5122]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000115770: mov rax, qword ptr [rip + 0xd66f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115748: mov rax, qword ptr [rip + 0xd6721]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115604: mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114c34: mov rax, qword ptr [rip + 0xd7225]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114c45; ret; 
0x0000000000114384: mov rax, qword ptr [rip + 0xd7ae5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142c8: mov rax, qword ptr [rip + 0xd7ba1]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001142b4: mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000011375b: mov rax, qword ptr [rip + 0xd870e]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001136fa: mov rax, qword ptr [rip + 0xd876f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000113148: mov rax, qword ptr [rip + 0xd8d21]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000113112: mov rax, qword ptr [rip + 0xd8d57]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112928: mov rax, qword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001127f0: mov rax, qword ptr [rip + 0xd9679]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x0000000000115b8d: mov rax, qword ptr [rip + 0xd9adc]; mov qword ptr [rip + 0xd9b05], rax; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000110da0: mov rax, qword ptr [rip + 0xdb0c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc38: mov rax, qword ptr [rip + 0xde231]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010dc20: mov rax, qword ptr [rip + 0xde249]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dbc4: mov rax, qword ptr [rip + 0xde2a5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010d9e8: mov rax, qword ptr [rip + 0xde481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d988: mov rax, qword ptr [rip + 0xde4e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d928: mov rax, qword ptr [rip + 0xde541]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d89d: mov rax, qword ptr [rip + 0xde5cc]; mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x000000000010d5a0: mov rax, qword ptr [rip + 0xde8c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d540: mov rax, qword ptr [rip + 0xde929]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4e0: mov rax, qword ptr [rip + 0xde989]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d244: mov rax, qword ptr [rip + 0xdec15]; lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000fec94: mov rax, qword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000001239f0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123968: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000001238e0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001236a0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001237c0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123470: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123730: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123500: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000123580: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000123850: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000001233e0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034434: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000034414: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000343f4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034374: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000343b4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000034314: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034394: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000034354: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000342d4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034334: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000343d4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000342f4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034454: mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034464: mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000328d0: mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x00000000000a8b00: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000015fa01: mov rax, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x0000000000153a4d: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153abd: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b2d: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b8e: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf2: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c5d: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce0: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x00000000000349e5: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000048274: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000113057: mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000120fd0: mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000042613: mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000012036f: mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000010c1c3: mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120435: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x0000000000196cbf: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122916: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122977: mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000014e563: mov rax, qword ptr [rsp]; jne 0x14e5ca; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013c882: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x0000000000094c44: mov rax, qword ptr fs:[0x10]; ret; 
0x00000000001412cb: mov rax, qword ptr fs:[r12]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000033d5e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328eb: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003447e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000003428e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003425e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341be: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000003419e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000003417e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000340fe: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003413e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000003409e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003411e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340de: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003423e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340be: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003415e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000003407e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012ceb2: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000001411fb: mov rax, qword ptr fs:[rax]; ret; 
0x000000000015323c: mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x000000000005b3a2: mov rax, r10; pop rbx; ret; 
0x000000000005b337: mov rax, r10; ret; 
0x00000000000a0b7f: mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x0000000000041243: mov rax, r11; ret; 
0x0000000000041032: mov rax, r12; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000d1cd5: mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x00000000000a0398: mov rax, r12; pop r12; pop r13; ret; 
0x0000000000034b48: mov rax, r12; pop r12; ret; 
0x000000000008c0b5: mov rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000002ff33: mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008e245: mov rax, r12; pop rbp; pop r12; pop r14; ret; 
0x00000000000477a2: mov rax, r12; pop rbp; pop r12; ret; 
0x000000000006272e: mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000080ad0: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22b: mov rax, r12; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000034aaa: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000011920e: mov rax, r12; pop rdx; pop r12; ret; 
0x000000000009efc5: mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x00000000001417d0: mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000009f9e8: mov rax, r13; pop r12; pop r13; ret; 
0x00000000000828cd: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000bcc00: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x00000000000bcba5: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000107061: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000046c19: mov rax, r8; add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d4a8f: mov rax, r8; add rsp, 8; ret; 
0x000000000009ef1b: mov rax, r8; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000013c5d9: mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x0000000000116ed5: mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x000000000009a49a: mov rax, r8; pop r12; pop r13; ret; 
0x0000000000095655: mov rax, r8; pop r12; ret; 
0x000000000009a506: mov rax, r8; pop r13; ret; 
0x0000000000084832: mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000013b730: mov rax, r8; pop rbp; pop r12; pop r13; ret; 
0x0000000000085916: mov rax, r8; pop rbp; pop r12; ret; 
0x00000000000995a3: mov rax, r8; pop rbp; ret; 
0x000000000009cf7e: mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000082714: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000099cb1: mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046c8b: mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000993ac: mov rax, r8; pop rbx; ret; 
0x0000000000046c80: mov rax, r8; ret; 
0x000000000018d3c3: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000188a20: mov rax, r8; vzeroupper; ret; 
0x0000000000038ca5: mov rax, r9; pop r12; ret; 
0x000000000007a177: mov rax, r9; pop r14; ret; 
0x000000000007a0c6: mov rax, r9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000038c77: mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a86ee: mov rax, r9; ret; 
0x000000000008d410: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008f50d: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d93e: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c39: mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000008d883: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000627a6: mov rax, rbx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000047344: mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000047304: mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x000000000005b6a3: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x000000000011eea4: mov rax, rdi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000a8eec: mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b521: mov rax, rdi; ret; 
0x000000000012f9ed: mov rax, rdi; sar rax, 6; ret; 
0x000000000011ee7d: mov rax, rdi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001783ae: mov rax, rdi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x00000000001786ac: mov rax, rdi; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x00000000001786cc: mov rax, rdi; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x00000000001786ec: mov rax, rdi; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000017870e: mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017872e: mov rax, rdi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017874e: mov rax, rdi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x00000000001785a4: mov rax, rdi; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x00000000001785c6: mov rax, rdi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x00000000001785ec: mov rax, rdi; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x0000000000178604: mov rax, rdi; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017862a: mov rax, rdi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017864c: mov rax, rdi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017866a: mov rax, rdi; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x0000000000178346: mov rax, rdi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x000000000017868c: mov rax, rdi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x000000000018a8f0: mov rax, rdi; vzeroupper; ret; 
0x00000000000a1ff3: mov rax, rdx; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015fafa: mov rax, rdx; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000013c932: mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000056af4: mov rax, rdx; pop rbx; ret; 
0x0000000000055c45: mov rax, rdx; ret; 
0x0000000000134871: mov rax, rsi; pop rbx; ret; 
0x0000000000198cfc: mov rbp, rsp; call 0x15fd10; pop rbp; mov qword ptr [rip + 0x57160], 0; ret; 
0x00000000000e3668: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000153235: mov rbx, qword ptr [rip + 0x98b64]; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x00000000001197ba: mov rbx, rdi; mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000001196f4: mov rbx, rsi; je 0x119700; pop rbx; ret; 
0x0000000000086e55: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000012d0c7: mov rcx, qword ptr [rbp - 8]; xor rcx, qword ptr fs:[0x28]; jne 0x12d1ad; leave; ret; 
0x000000000018fb2d: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000121264: mov rcx, qword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121270; ret; 
0x00000000000e44a4: mov rcx, qword ptr [rip + 0x1079c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4474: mov rcx, qword ptr [rip + 0x1079f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4444: mov rcx, qword ptr [rip + 0x107a25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4414: mov rcx, qword ptr [rip + 0x107a55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b4: mov rcx, qword ptr [rip + 0x107ab5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4384: mov rcx, qword ptr [rip + 0x107ae5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4134: mov rcx, qword ptr [rip + 0x107d35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3184: mov rcx, qword ptr [rip + 0x108ce5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2da4: mov rcx, qword ptr [rip + 0x1090c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b54: mov rcx, qword ptr [rip + 0x109315]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41f4: mov rcx, qword ptr [rip + 0x117c75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41c4: mov rcx, qword ptr [rip + 0x117ca5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055578: mov rcx, qword ptr [rip + 0x1968f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000439d4: mov rcx, qword ptr [rip + 0x1a8495]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000433e4: mov rcx, qword ptr [rip + 0x1a8a85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001207e7: mov rcx, qword ptr [rip + 0xcb682]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001207b4: mov rcx, qword ptr [rip + 0xcb6b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120784: mov rcx, qword ptr [rip + 0xcb6e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120757: mov rcx, qword ptr [rip + 0xcb712]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202d4: mov rcx, qword ptr [rip + 0xcbb95]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202a7: mov rcx, qword ptr [rip + 0xcbbc2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120274: mov rcx, qword ptr [rip + 0xcbbf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120244: mov rcx, qword ptr [rip + 0xcbc25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120174: mov rcx, qword ptr [rip + 0xcbcf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120084: mov rcx, qword ptr [rip + 0xcbde5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120044: mov rcx, qword ptr [rip + 0xcbe25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120014: mov rcx, qword ptr [rip + 0xcbe55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffe4: mov rcx, qword ptr [rip + 0xcbe85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffb7: mov rcx, qword ptr [rip + 0xcbeb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff87: mov rcx, qword ptr [rip + 0xcbee2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff54: mov rcx, qword ptr [rip + 0xcbf15]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff27: mov rcx, qword ptr [rip + 0xcbf42]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fef4: mov rcx, qword ptr [rip + 0xcbf75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fec4: mov rcx, qword ptr [rip + 0xcbfa5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe97: mov rcx, qword ptr [rip + 0xcbfd2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe64: mov rcx, qword ptr [rip + 0xcc005]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe34: mov rcx, qword ptr [rip + 0xcc035]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe04: mov rcx, qword ptr [rip + 0xcc065]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fdd4: mov rcx, qword ptr [rip + 0xcc095]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fda7: mov rcx, qword ptr [rip + 0xcc0c2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd77: mov rcx, qword ptr [rip + 0xcc0f2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd47: mov rcx, qword ptr [rip + 0xcc122]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd14: mov rcx, qword ptr [rip + 0xcc155]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fce4: mov rcx, qword ptr [rip + 0xcc185]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcb7: mov rcx, qword ptr [rip + 0xcc1b2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc87: mov rcx, qword ptr [rip + 0xcc1e2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc54: mov rcx, qword ptr [rip + 0xcc215]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc24: mov rcx, qword ptr [rip + 0xcc245]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbf4: mov rcx, qword ptr [rip + 0xcc275]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbc4: mov rcx, qword ptr [rip + 0xcc2a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fb94: mov rcx, qword ptr [rip + 0xcc2d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa44: mov rcx, qword ptr [rip + 0xcc425]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa14: mov rcx, qword ptr [rip + 0xcc455]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9e4: mov rcx, qword ptr [rip + 0xcc485]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9b4: mov rcx, qword ptr [rip + 0xcc4b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f987: mov rcx, qword ptr [rip + 0xcc4e2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f944: mov rcx, qword ptr [rip + 0xcc525]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f914: mov rcx, qword ptr [rip + 0xcc555]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3f4: mov rcx, qword ptr [rip + 0xcca75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3c7: mov rcx, qword ptr [rip + 0xccaa2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f334: mov rcx, qword ptr [rip + 0xccb35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f204: mov rcx, qword ptr [rip + 0xccc65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f1d4: mov rcx, qword ptr [rip + 0xccc95]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f174: mov rcx, qword ptr [rip + 0xcccf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f13d: mov rcx, qword ptr [rip + 0xccd2c]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f024: mov rcx, qword ptr [rip + 0xcce45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eff4: mov rcx, qword ptr [rip + 0xcce75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfb7: mov rcx, qword ptr [rip + 0xceeb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf84: mov rcx, qword ptr [rip + 0xceee5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf57: mov rcx, qword ptr [rip + 0xcef12]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf24: mov rcx, qword ptr [rip + 0xcef45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cef4: mov rcx, qword ptr [rip + 0xcef75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cec7: mov rcx, qword ptr [rip + 0xcefa2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce94: mov rcx, qword ptr [rip + 0xcefd5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce67: mov rcx, qword ptr [rip + 0xcf002]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce37: mov rcx, qword ptr [rip + 0xcf032]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce04: mov rcx, qword ptr [rip + 0xcf065]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cdd4: mov rcx, qword ptr [rip + 0xcf095]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cda7: mov rcx, qword ptr [rip + 0xcf0c2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ba4: mov rcx, qword ptr [rip + 0xd32c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b74: mov rcx, qword ptr [rip + 0xd32f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b44: mov rcx, qword ptr [rip + 0xd3325]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b14: mov rcx, qword ptr [rip + 0xd3355]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ae7: mov rcx, qword ptr [rip + 0xd3382]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ab4: mov rcx, qword ptr [rip + 0xd33b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118a84: mov rcx, qword ptr [rip + 0xd33e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001189b4: mov rcx, qword ptr [rip + 0xd34b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118984: mov rcx, qword ptr [rip + 0xd34e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118746: mov rcx, qword ptr [rip + 0xd3723]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115694: mov rcx, qword ptr [rip + 0xd67d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115664: mov rcx, qword ptr [rip + 0xd6805]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115634: mov rcx, qword ptr [rip + 0xd6835]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001152f4: mov rcx, qword ptr [rip + 0xd6b75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115234: mov rcx, qword ptr [rip + 0xd6c35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115174: mov rcx, qword ptr [rip + 0xd6cf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115144: mov rcx, qword ptr [rip + 0xd6d25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114f44: mov rcx, qword ptr [rip + 0xd6f25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114df4: mov rcx, qword ptr [rip + 0xd7075]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001143b4: mov rcx, qword ptr [rip + 0xd7ab5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f4: mov rcx, qword ptr [rip + 0xd7c75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113df4: mov rcx, qword ptr [rip + 0xd8075]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112fb7: mov rcx, qword ptr [rip + 0xd8eb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd44: mov rcx, qword ptr [rip + 0xdc125]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd14: mov rcx, qword ptr [rip + 0xdc155]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fce4: mov rcx, qword ptr [rip + 0xdc185]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fcb7: mov rcx, qword ptr [rip + 0xdc1b2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc84: mov rcx, qword ptr [rip + 0xdc1e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc54: mov rcx, qword ptr [rip + 0xdc215]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc24: mov rcx, qword ptr [rip + 0xdc245]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fbf7: mov rcx, qword ptr [rip + 0xdc272]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fbc4: mov rcx, qword ptr [rip + 0xdc2a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f407: mov rcx, qword ptr [rip + 0xdca62]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f3d4: mov rcx, qword ptr [rip + 0xdca95]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f3a4: mov rcx, qword ptr [rip + 0xdcac5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f374: mov rcx, qword ptr [rip + 0xdcaf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea54: mov rcx, qword ptr [rip + 0xdd415]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea24: mov rcx, qword ptr [rip + 0xdd445]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e964: mov rcx, qword ptr [rip + 0xdd505]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e934: mov rcx, qword ptr [rip + 0xdd535]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e904: mov rcx, qword ptr [rip + 0xdd565]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e8d4: mov rcx, qword ptr [rip + 0xdd595]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e8a4: mov rcx, qword ptr [rip + 0xdd5c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e584: mov rcx, qword ptr [rip + 0xdd8e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc94: mov rcx, qword ptr [rip + 0xde1d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc64: mov rcx, qword ptr [rip + 0xde205]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dba4: mov rcx, qword ptr [rip + 0xde2c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010db74: mov rcx, qword ptr [rip + 0xde2f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010da44: mov rcx, qword ptr [rip + 0xde425]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010da14: mov rcx, qword ptr [rip + 0xde455]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d3e4: mov rcx, qword ptr [rip + 0xdea85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001027b4: mov rcx, qword ptr [rip + 0xe96b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102784: mov rcx, qword ptr [rip + 0xe96e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102754: mov rcx, qword ptr [rip + 0xe9715]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102724: mov rcx, qword ptr [rip + 0xe9745]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026f4: mov rcx, qword ptr [rip + 0xe9775]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026c4: mov rcx, qword ptr [rip + 0xe97a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102694: mov rcx, qword ptr [rip + 0xe97d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102664: mov rcx, qword ptr [rip + 0xe9805]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b86e4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9554: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8704: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7034: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7014: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b86a4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9514: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000bb174: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86c4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9534: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000bb194: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bbc12: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000167ca4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167cc0: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e84: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ea0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168064: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168080: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168254: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168270: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168454: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168470: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168654: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168670: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018e11a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f74a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x000000000016d1f4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d164: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d0d4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000018e69c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18eb53; xor eax, eax; ret; 
0x000000000018f86c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18f993; xor eax, eax; ret; 
0x0000000000167ac4: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ae0: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b8530: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ee0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b9380: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd0: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b93a0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8540: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b8560: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f00: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b8580: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000016db74: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db04: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da94: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da24: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d9b4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d944: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016d8d4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000001891a0: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b85a0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9400: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f20: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b85c0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9420: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f30: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b85e0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9440: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f40: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000018a5f0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000001157e6: mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000015fa06: mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000011f0ab: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x000000000015fafd: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fca6: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x00000000001539d7: mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x0000000000122911: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122972: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000018fb2c: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000015772c: mov rcx, rax; xor eax, eax; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000a8638: mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000bbf5d: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000bbbf5: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f7fe: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x00000000000ff515: mov rdi, qword ptr [rbx + 0x28]; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000137b4c: mov rdi, qword ptr [rbx + 0x48]; test rdi, rdi; jne 0x137b40; pop rbx; ret; 
0x0000000000157d18: mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000094cc8: mov rdi, qword ptr [rdi + 0x28]; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x000000000014de04: mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14de10; ret; 
0x0000000000154504: mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154510; ret; 
0x00000000001197bd: mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000122024: mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x121ec0; ret; 
0x0000000000122004: mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x0000000000198e2b: mov rdi, qword ptr [rip + 0x57bee]; call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x0000000000117394: mov rdi, qword ptr [rip + 0xd83cd]; test rdi, rdi; jne 0x1173b0; mov eax, 1; ret; 
0x00000000000f1ff0: mov rdi, qword ptr [rsi + 0x28]; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000005b622: mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000041292: mov rdi, rbp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000005b6a6: mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x000000000018cf8e: mov rdi, rsi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018863e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000033c37: mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000e512f: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e4fff: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000013c947: mov rdx, 0xffffffffffffffff; ret; 
0x0000000000150873: mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000015077b: mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x00000000000555ff: mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000008cdbb: mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000033d09: mov rdx, qword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x000000000008cdb4: mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000011efc3: mov rdx, qword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ee488: mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee436: mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x0000000000063012: mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000827f3: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000008ce0e: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccde: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000034223: mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f3: mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055065: mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000009e924: mov rdx, qword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x0000000000086e14: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916dc: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x0000000000034220: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f0: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003421d: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ed: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e2e80: mov rdx, qword ptr [rip + 0x108fe9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d60: mov rdx, qword ptr [rip + 0x109109]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c8: mov rdx, qword ptr [rip + 0x10dba1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dd130: mov rdx, qword ptr [rip + 0x10ed39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d4aa0: mov rdx, qword ptr [rip + 0x117391]; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000d1090: mov rdx, qword ptr [rip + 0x11add9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ef0: mov rdx, qword ptr [rip + 0x11af79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dd8: mov rdx, qword ptr [rip + 0x11b091]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062ed0: mov rdx, qword ptr [rip + 0x188f99]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e98: mov rdx, qword ptr [rip + 0x188fd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048280: mov rdx, qword ptr [rip + 0x1a3be9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000434b0: mov rdx, qword ptr [rip + 0x1a89b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000043420: mov rdx, qword ptr [rip + 0x1a8a49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000034542: mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000023a67: mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x000000000012e7c0: mov rdx, qword ptr [rip + 0xbd6a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121248: mov rdx, qword ptr [rip + 0xcac21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211a8: mov rdx, qword ptr [rip + 0xcacc1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121098: mov rdx, qword ptr [rip + 0xcadd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121058: mov rdx, qword ptr [rip + 0xcae11]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121028: mov rdx, qword ptr [rip + 0xcae41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120fe0: mov rdx, qword ptr [rip + 0xcae89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120f20: mov rdx, qword ptr [rip + 0xcaf49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120cb0: mov rdx, qword ptr [rip + 0xcb1b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120c08: mov rdx, qword ptr [rip + 0xcb261]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120b50: mov rdx, qword ptr [rip + 0xcb319]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120708: mov rdx, qword ptr [rip + 0xcb761]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120640: mov rdx, qword ptr [rip + 0xcb829]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001205a0: mov rdx, qword ptr [rip + 0xcb8c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001204e0: mov rdx, qword ptr [rip + 0xcb989]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120440: mov rdx, qword ptr [rip + 0xcba29]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120380: mov rdx, qword ptr [rip + 0xcbae9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120200: mov rdx, qword ptr [rip + 0xcbc69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120130: mov rdx, qword ptr [rip + 0xcbd39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f840: mov rdx, qword ptr [rip + 0xcc629]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f7ae: mov rdx, qword ptr [rip + 0xcc6bb]; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x000000000011f760: mov rdx, qword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f6b8: mov rdx, qword ptr [rip + 0xcc7b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5f0: mov rdx, qword ptr [rip + 0xcc879]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f540: mov rdx, qword ptr [rip + 0xcc929]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f490: mov rdx, qword ptr [rip + 0xcc9d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f300: mov rdx, qword ptr [rip + 0xccb69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2b8: mov rdx, qword ptr [rip + 0xccbb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f1a8: mov rdx, qword ptr [rip + 0xcccc1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121cfe: mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000118a40: mov rdx, qword ptr [rip + 0xd3429]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116d08: mov rdx, qword ptr [rip + 0xd5161]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd8: mov rdx, qword ptr [rip + 0xd5191]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ca0: mov rdx, qword ptr [rip + 0xd51c9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ab8: mov rdx, qword ptr [rip + 0xd53b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115330: mov rdx, qword ptr [rip + 0xd6b39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001152b0: mov rdx, qword ptr [rip + 0xd6bb9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001151f0: mov rdx, qword ptr [rip + 0xd6c79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114ff0: mov rdx, qword ptr [rip + 0xd6e79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114658: mov rdx, qword ptr [rip + 0xd7811]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114598: mov rdx, qword ptr [rip + 0xd78d1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144e0: mov rdx, qword ptr [rip + 0xd7989]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114440: mov rdx, qword ptr [rip + 0xd7a29]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114293: mov rdx, qword ptr [rip + 0xd7c2e]; mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x00000000001141c0: mov rdx, qword ptr [rip + 0xd7ca9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dc0: mov rdx, qword ptr [rip + 0xd80a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113d80: mov rdx, qword ptr [rip + 0xd80e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bb8: mov rdx, qword ptr [rip + 0xd82b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113688: mov rdx, qword ptr [rip + 0xd87e1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113650: mov rdx, qword ptr [rip + 0xd8819]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113618: mov rdx, qword ptr [rip + 0xd8851]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113358: mov rdx, qword ptr [rip + 0xd8b11]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113310: mov rdx, qword ptr [rip + 0xd8b59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113260: mov rdx, qword ptr [rip + 0xd8c09]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113100: mov rdx, qword ptr [rip + 0xd8d69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001130c0: mov rdx, qword ptr [rip + 0xd8da9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113068: mov rdx, qword ptr [rip + 0xd8e01]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001129c0: mov rdx, qword ptr [rip + 0xd94a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e9e0: mov rdx, qword ptr [rip + 0xdd489]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e860: mov rdx, qword ptr [rip + 0xdd609]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e148: mov rdx, qword ptr [rip + 0xddd21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e118: mov rdx, qword ptr [rip + 0xddd51]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e0d0: mov rdx, qword ptr [rip + 0xddd99]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e030: mov rdx, qword ptr [rip + 0xdde39]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dc08: mov rdx, qword ptr [rip + 0xde261]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d9d0: mov rdx, qword ptr [rip + 0xde499]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d970: mov rdx, qword ptr [rip + 0xde4f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d910: mov rdx, qword ptr [rip + 0xde559]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d588: mov rdx, qword ptr [rip + 0xde8e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d528: mov rdx, qword ptr [rip + 0xde941]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4c8: mov rdx, qword ptr [rip + 0xde9a1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c280: mov rdx, qword ptr [rip + 0xdfbe9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c1d0: mov rdx, qword ptr [rip + 0xdfc99]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000102880: mov rdx, qword ptr [rip + 0xe95e9]; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102820: mov rdx, qword ptr [rip + 0xe9649]; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000b7d24: mov rdx, qword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7074: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7094: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000016db70: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db00: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da90: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016da20: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9403: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f23: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000bb063: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000016d9b0: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85c3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9423: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f33: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000bb083: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000016d940: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85e3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9443: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f43: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000bb0a3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000016d8d0: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000018b323: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a43: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5f3: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000328a0: mov rdx, qword ptr [rsi + rax*8]; lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000016d380: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d300: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d280: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d1f0: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d160: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d0d0: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167904: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168258: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168458: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168658: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678e8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168274: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168474: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168674: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167920: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d400: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b8520: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b9370: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ed0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000b77a0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000bafd0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x000000000010fd7e: mov rdx, qword ptr [rsi]; xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x00000000000a8a48: mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x000000000012290c: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012296d: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000a8970: mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000013c886: mov rdx, qword ptr [rsp + 8]; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x000000000003421c: mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ec: mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000009efc8: mov rdx, r12; pop r12; pop r13; ret; 
0x0000000000093545: mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x000000000005b61f: mov rdx, rdi; mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x00000000000bbf64: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000a8e28: mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000033c2c: mov rsi, qword ptr [rdi + 0x78]; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000bbc17: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018fb2a: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000015f242: mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000115f2c: mov rsi, rax; test rax, rax; jne 0x115ef4; xor eax, eax; pop rbp; ret; 
0x0000000000116e50: mov rsi, rcx; mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000dcfb4: mov rsi, rdi; xor edi, edi; call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x000000000005b4d0: mov rsp, rdx; ret; 
0x000000000018fb4f: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000009e438: mov ss, word ptr [rcx]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000018fb59: mov word ptr [r9 - 2], cx; ret; 
0x00000000000d79f7: mov word ptr [rax + 0xf000003], cs; mov bh, 5; add eax, dword ptr [rcx + 0x3941000d]; ret 0x8c0f; 
0x00000000000a8abb: mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8aab: mov word ptr [rax + 4], dx; ret; 
0x00000000000531aa: mov word ptr [rax + riz*4], fs; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000b76f0: mov word ptr [rax], cs; add byte ptr [rax], al; ret; 
0x00000000000a8a6d: mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x0000000000151927: mov word ptr [rax], es; add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000a8a60: mov word ptr [rax], si; ret; 
0x00000000000e3188: mov word ptr [rax], ss; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000074f47: mov word ptr [rbp - 0x7400000f], ds; test dword ptr [rax], edx; idiv edi; inc dword ptr [rcx]; ret; 
0x0000000000184b46: mov word ptr [rbp - 0x7d000000], ss; rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000042836: mov word ptr [rbp - 0x7f000000], es; sti; push rax; ret; 
0x00000000000cb508: mov word ptr [rbx], fs; add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000583d8: mov word ptr [rbx], gs; add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000001787c2: mov word ptr [rcx + 4], dx; ret; 
0x0000000000178803: mov word ptr [rcx + 8], dx; ret; 
0x0000000000153178: mov word ptr [rcx], cs; add byte ptr [rax - 0x73], cl; adc eax, 0x9dcbe; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000178790: mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x0000000000178780: mov word ptr [rcx], dx; ret; 
0x00000000000b862c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b900c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b949c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f7c: mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b78ec: mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000bb0fc: mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x0000000000113c8b: mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000b8734: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9194: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b95a4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7064: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b7a04: mov word ptr [rdi + 0x18], cx; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000bb204: mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000016de17: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000a8b83: mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b9b: mov word ptr [rdi + 4], ax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000481e8: mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000b84f8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9348: mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000a89fe: mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a89e6: mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7768: mov word ptr [rdi + 4], dx; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bafa8: mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b93aa: mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b854a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b8eca: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000b6efa: mov word ptr [rdi + 8], dx; ret; 
0x00000000000b77ea: mov word ptr [rdi + 8], dx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb00a: mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000018b2ec: mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a0c: mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5bc: mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000053e9f: mov word ptr [rdi + rax*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000bc05e: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x000000000018bc63: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000bbc38: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000167ebc: mov word ptr [rdi - 2], cx; ret; 
0x0000000000167cd4: mov word ptr [rdi - 2], dx; ret; 
0x0000000000167eb8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000a8b35: mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ac03: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189173: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b84c3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e83: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7703: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b9306: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b76: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf66: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x000000000018b2e9: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a09: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5b9: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000190226: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000bc063: mov word ptr [rdi], cx; ret; 
0x000000000018bc68: mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000a8990: mov word ptr [rdi], dx; add rax, rdi; ret; 
0x00000000000b84b3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b8dc3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018abf3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b92f3: mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x000000000018b2d3: mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001899f3: mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a690: mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000a89a8: mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b6e73: mov word ptr [rdi], dx; ret; 
0x000000000018a473: mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0x18a700; vzeroupper; ret; 
0x00000000000b76e3: mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x0000000000189163: mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000baf53: mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000a8b20: mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018fb56: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000bbc3d: mov word ptr [rdi], si; ret; 
0x000000000010c770: mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000014d0e5: mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x00000000000d79e7: mov word ptr [rdx + 0xf000003], fs; mov bh, 5; adc dword ptr [rcx + 0x3941000d], eax; ret 0x8c0f; 
0x000000000017ab38: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a4d: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000178648: mov word ptr [rdx + 4], ax; mov rax, rdi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x00000000000b3ad1: mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000017aae3: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017aaf3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f8: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b39e8: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000001785c3: mov word ptr [rdx], ax; mov rax, rdi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x0000000000121fb5: mov word ptr [rdx], ax; ret; 
0x00000000000a0741: mov word ptr [rip + 0x450f4800], cs; ret 0xfc3; 
0x0000000000113264: mov word ptr [rip + 0x64d8f700], cs; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d7a27: mov word ptr [rip + 0xf000003], es; mov bh, 5; fld dword ptr [rax + 0x3941000d]; ret 0x8c0f; 
0x00000000001127e9: mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x0000000000048191: mov word ptr [rsi + 0xc], ax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000004819a: mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000190229: mov word ptr [rsi - 2], cx; ret; 
0x000000000004814b: mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000010c757: mov word ptr [rsi], ax; xor eax, eax; ret; 
0x000000000009f80d: mov word ptr [rsi], cs; add byte ptr [rax - 0x73], cl; add eax, 0x120a9; cmove rax, rdx; ret; 
0x000000000009f0f0: mov word ptr [rsi], gs; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000041cd5: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041d98: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c15: mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c5e: mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057ccb: mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000bbc37: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000087497: movabs al, byte ptr [0x30788348000000]; je 0x874a8; ret; 
0x000000000008ce11: movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce1: movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000114178: movabs al, byte ptr [0x5d5be08944000000]; pop r12; ret; 
0x00000000001421e9: movabs al, byte ptr [0x5d5be0894c000000]; pop r12; ret; 
0x000000000018b8eb: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000000b1445: movabs al, byte ptr [0x82048b8a0c8b000e]; sub eax, ecx; ret; 
0x000000000005ff34: movabs al, byte ptr [0x8304768b41000000]; ret; 
0x000000000005ff60: movabs al, byte ptr [0x8324348b41000000]; ret; 
0x000000000007a3b3: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000008e58c: movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000000827f6: movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000000be529: movabs al, byte ptr [0xeb8087b8bfffffc]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000017ef9c: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000f535d: movabs al, byte ptr [0xf6000000c8928b48]; ret 0x7540; 
0x000000000009b1ae: movabs byte ptr [0x11ec803d8d480011], al; add al, ch; ret; 
0x000000000011f3ca: movabs byte ptr [0x18964d8f7000cca], al; or rax, 0xffffffffffffffff; ret; 
0x000000000011ceca: movabs byte ptr [0x18964d8f7000cef], al; or rax, 0xffffffffffffffff; ret; 
0x000000000004349a: movabs byte ptr [0x480824448b000511], al; add esp, 0x18; ret; 
0x000000000017caaa: movabs byte ptr [0x8348013880000002], al; fdivr st(7); ret; 
0x0000000000079d69: movabs byte ptr [0x859ce8d78948fffb], al; cli; dec dword ptr [rcx - 0x77]; ret; 
0x000000000017f29a: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000042909: movabs dword ptr [0x15222ee800179e], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000d8498: movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x00000000000db0ad: movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000423fd: movabs dword ptr [0x17a31905560f0017], eax; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17af79]; ret; 
0x00000000000423d8: movabs dword ptr [0x17a35e05560f0017], eax; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x000000000009f0e9: movabs dword ptr [0x2e8c158d480001a8], eax; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x00000000001259d3: movabs dword ptr [0x4c1989416401000c], eax; mov eax, eax; pop rbx; ret; 
0x0000000000149199: movabs dword ptr [0x5b20c48348000000], eax; pop rbp; pop r12; ret; 
0x00000000000ea412: movabs dword ptr [0x7428017b800673d6], eax; adc al, 0x3c; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000832e2: movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000d4eb2: movabs dword ptr [0xf00000896830fc7], eax; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000123d02: movabs eax, dword ptr [0x1989416401000cbe]; mov rax, r8; pop rbx; ret; 
0x000000000010d4cb: movabs eax, dword ptr [0x28964d8f7000de9]; mov eax, 0xffffffff; ret; 
0x00000000000de2cb: movabs eax, dword ptr [0x28964d8f70010db]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000e2fcb: movabs eax, dword ptr [0x415de88944fffb1a]; pop rsp; pop r13; ret; 
0x000000000011529b: movabs eax, dword ptr [0x480c24448bfff7f3]; add esp, 0x18; ret; 
0x000000000018a640: movabs eax, dword ptr [0x77f8c5e0075c7f7e]; ret; 
0x000000000018a6c5: movabs eax, dword ptr [0x77f8c5f007447f7a]; ret; 
0x000000000018a620: movabs eax, dword ptr [0x77f8c5f0075c7f7a]; ret; 
0x0000000000121fd3: movabs eax, dword ptr [0x8318408b48000cda]; add byte ptr [rcx], al; ret; 
0x00000000000e8160: movabs eax, dword ptr [0x845c748fff3]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000774eb: movabs eax, dword ptr [0x870f2ff88300000d]; call 0xffffffff8907750b; ret 0xc083; 
0x0000000000157733: movabs eax, dword ptr [0x8c48348c031fff2]; ret; 
0x00000000001142cb: movabs eax, dword ptr [0xc00c764000d7b]; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000160b2b: movabs eax, dword ptr [0xc75db8548fff0b0]; pop rbx; ret; 
0x000000000014e5cb: movabs eax, dword ptr [0xfa1e0ff390fffe14]; ret; 
0x00000000000313bb: movabs eax, dword ptr [0xffff7c8d89001690]; dec dword ptr [rcx + 1]; ret 0x8d48; 
0x000000000004814e: movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000041fc0: movabs rax, 0x8000000000000000; and rdx, rax; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f90: movabs rax, 0x8000000000000000; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000018e338: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e438: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000042104: movapd xmm0, xmm1; ret; 
0x0000000000042105: movaps xmm0, xmm1; ret; 
0x00000000000d1dc2: movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d1fe8: movaps xmmword ptr [rax], xmm0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000004260e: movaps xmmword ptr [rsp - 0x18], xmm0; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042295: movd eax, mm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000041ee0: movd eax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042294: movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000041ec0: movd edx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042275: movd edx, mm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000042274: movd edx, xmm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000116d7a: movd mm0, eax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000420ea: movd mm0, eax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004244f: movd mm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x000000000004216f: movd mm0, eax; ret; 
0x0000000000047cde: movd mm0, eax; xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000423f6: movd mm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d1: movd mm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a355]; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042046: movd mm0, ecx; ret; 
0x0000000000042319: movd mm0, edx; mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000041f60: movd mm0, edx; ret; 
0x0000000000042308: movd mm0, esi; ret; 
0x0000000000041fb0: movd mm1, eax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x000000000002716f: movd mm1, esi; movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000116d7f: movd mm1, esi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000027173: movd mm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000004244e: movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000424cb: movd xmm0, eax; ret; 
0x00000000000423f5: movd xmm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d0: movd xmm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a355]; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042318: movd xmm0, edx; mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000042307: movd xmm0, esi; ret; 
0x000000000002716e: movd xmm1, esi; movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000027172: movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000042a05: movdqa xmm0, xmm1; call 0x192c70; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042b36: movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000042ab4: movdqa xmm0, xmm2; pop rbp; ret; 
0x000000000005b121: movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000429f0: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004288a: movdqa xmm0, xmmword ptr [rsp]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x00000000000428a8: movdqa xmm1, xmm0; call 0x192c70; add rsp, 0x10; pop rbx; ret; 
0x0000000000042aac: movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x000000000014fdc8: movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150708: movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482da: movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000150790: movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d068: movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b9470: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c50: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b8620: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9490: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f70: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b8660: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b8640: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f90: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b86e0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9550: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7030: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7010: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b86a0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9510: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b86c0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9530: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7110: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8780: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9610: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b9460: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8600: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8610: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f60: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6f50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b78a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000013c61f: movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000001507a0: movdqu xmm1, xmmword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d078: movdqu xmm1, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000148320: movdqu xmm1, xmmword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x00000000001507c0: movdqu xmm2, xmmword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000b7114: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8784: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9614: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000bb274: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b70f4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000001507d0: movdqu xmm3, xmmword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507b0: movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c6eb: movdqu xmm6, xmmword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c73b: movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0cd: movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c6f4: movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d049: movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c744: movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0d9: movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000016d861: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfc6: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87ed: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b92ad: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b965d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e30: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2e0: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b711d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2bd: movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016ded1: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de61: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddf1: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd81: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd11: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dca1: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc31: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbc1: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db51: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dae1: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da71: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da01: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d991: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d921: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d8b1: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d857: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b8074: movdqu xmmword ptr [rdi + 0x20], xmm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98c4: movdqu xmmword ptr [rdi + 0x20], xmm6; sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b98d3: movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8083: movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000bb333: movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000016daef: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da7f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da0f: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d99f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b878d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b921d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b95fd: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70bd: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a8d: movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb25d: movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000016d92f: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87ad: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b924d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b961d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70dd: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7abd: movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb27d: movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000016d8bf: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87cd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b927d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b963d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70fd: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7aed: movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb29d: movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000016dedf: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de6f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddff: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd8f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd1f: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dcaf: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc3f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbcf: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db5f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000bbfcb: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bbf2c: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfd1: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000016d04b: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016d0bb: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d7f6: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d776: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6e6: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d666: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5e6: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d566: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4e6: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d466: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3e6: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d366: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2e6: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d266: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d1d6: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d146: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d0b6: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d041: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016d7e7: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d767: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6d7: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d657: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5d7: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d557: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4d7: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d457: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d357: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2d7: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d257: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d1c7: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d137: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d0a7: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d037: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000000b7f30: movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b9464: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8604: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8fc4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b9477: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c57: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d7: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8614: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f64: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b78c4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8667: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8687: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b94fa: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7caa: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb15a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b6fa7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b7927: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000bb137: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b8647: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f97: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7907: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000bb117: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b86e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9558: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8708: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7038: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7018: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b79a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb1b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b957b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b874b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b707b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bb21b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b876b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bb23b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b872c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb1fc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b86a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9518: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b7968: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb178: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86c8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9538: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7988: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb198: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b8628: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9498: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f78: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b78e8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000bb0f8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bbfc2: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87e9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b9659: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e2c: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2dc: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b7119: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b8789: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a89: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb259: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b87a9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9619: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7ab9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb279: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b87c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b9639: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7ae9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb299: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b6f54: movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b78a4: movdqu xmmword ptr [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c4: movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000016d8c4: movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000008aebc: movhps xmm0, qword ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000057d9f: movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000b3b32: movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b52: movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b72: movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b39bc: movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b67a3: movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3aa9: movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac9: movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae9: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b09: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3966: movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b39b8: movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b29: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b49: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b69: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b9: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b673a: movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3aa5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b05: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3962: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3b25: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b45: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b65: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6736: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b39af: movlpd xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2d: movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4d: movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6d: movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bd: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b679e: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39b3: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b33: movlps qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b53: movlps qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b73: movlps qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b39bd: movlps qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b67a4: movlps qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3aaa: movlps qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3aca: movlps qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3aea: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b0a: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3967: movlps qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b39b9: movlps qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66ba: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b673b: movlps qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3aa6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b06: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3963: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3b26: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b46: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b66: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6737: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b39b0: movlps xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2e: movlps xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4e: movlps xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6e: movlps xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66be: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b679f: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39b4: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000042a24: movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000093588: movntps xmmword ptr [rax + 0x18], xmm2; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000042a06: movq mm0, mm1; call 0x192c70; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042b37: movq mm0, mm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000042ab5: movq mm0, mm2; pop rbp; ret; 
0x000000000014fdc9: movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150709: movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001482db: movq mm0, qword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000150791: movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d069: movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b9471: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c51: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b8621: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9491: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f71: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b8661: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b8641: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f91: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b86e1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9551: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7031: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7011: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b86a1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9511: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b86c1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9531: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7111: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8781: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9611: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b9461: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8601: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8611: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f61: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6f51: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b78a1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000013c620: movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000005b122: movq mm0, qword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000429f1: movq mm0, qword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004288b: movq mm0, qword ptr [rsp]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x0000000000116d79: movq mm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000420e9: movq mm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004216e: movq mm0, rax; ret; 
0x0000000000047cdd: movq mm0, rax; xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042045: movq mm0, rcx; ret; 
0x0000000000041f5f: movq mm0, rdx; ret; 
0x00000000000428a9: movq mm1, mm0; call 0x192c70; add rsp, 0x10; pop rbx; ret; 
0x00000000001507a1: movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d079: movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001507a2: movq mm1, qword ptr [rax + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d07a: movq mm1, qword ptr [rax + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000148321: movq mm1, qword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000041faf: movq mm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000116d7e: movq mm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042aad: movq mm2, mm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000001507c1: movq mm2, qword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000b7115: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8785: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9615: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000bb275: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b70f5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000001507d1: movq mm3, qword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507d2: movq mm3, qword ptr [rax + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507b1: movq mm4, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x00000000001507b2: movq mm4, qword ptr [rax + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c6ec: movq mm6, qword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c73c: movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0ce: movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c6f5: movq mm7, qword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d04a: movq mm7, qword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c745: movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0da: movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000016d862: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfc7: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87ee: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b92ae: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b965e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e31: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2e1: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b711e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x00000000000bb2be: movq qword ptr [rdi + 0x10], mm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016ded2: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de62: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddf2: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd82: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd12: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dca2: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc32: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbc2: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db52: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dae2: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da72: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da02: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d992: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d922: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d8b2: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d858: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b8075: movq qword ptr [rdi + 0x20], mm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98c5: movq qword ptr [rdi + 0x20], mm6; sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b98d4: movq qword ptr [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8084: movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000bb334: movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000016daf0: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da80: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da10: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d9a0: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b878e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b921e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b95fe: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70be: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000000b7a8e: movq qword ptr [rdi + 0xd], mm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb25e: movq qword ptr [rdi + 0xd], mm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000016d930: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87ae: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b924e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b961e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70de: movq qword ptr [rdi + 0xe], mm2; ret; 
0x00000000000b7abe: movq qword ptr [rdi + 0xe], mm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb27e: movq qword ptr [rdi + 0xe], mm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000016d8c0: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87ce: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b927e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b963e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70fe: movq qword ptr [rdi + 0xf], mm2; ret; 
0x00000000000b7aee: movq qword ptr [rdi + 0xf], mm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb29e: movq qword ptr [rdi + 0xf], mm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000016dee0: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de70: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de00: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd90: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd20: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dcb0: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc40: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbd0: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db60: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000bbfcc: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bbf2d: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfd2: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000016d04c: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000016d0bc: movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d7f7: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d777: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6e7: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d667: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5e7: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d567: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4e7: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d467: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3e7: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d367: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2e7: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d267: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d1d7: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d147: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d0b7: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d042: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016d7e8: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d768: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6d8: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d658: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5d8: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d558: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4d8: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d458: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d358: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2d8: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d258: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d1c8: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d138: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d0a8: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d038: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000000b7f31: movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b9465: movq qword ptr [rdi], mm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8605: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8fc5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b9478: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c58: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d8: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8615: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f65: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b78c5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8668: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8688: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b94fb: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7cab: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb15b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b6fa8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b7928: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000bb138: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b8648: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f98: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7908: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000bb118: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b86e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9559: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8709: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7039: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7019: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b79a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb1b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b957c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b874c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b707c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bb21c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b876c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bb23c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b872d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb1fd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b86a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9519: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b7969: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb179: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86c9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9539: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7989: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb199: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b8629: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9499: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f79: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b78e9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000bb0f9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bbfc3: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87ea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b965a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e2d: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2dd: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b711a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b878a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a8a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb25a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b87aa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b961a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7aba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb27a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b87ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b963a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7aea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb29a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b6f55: movq qword ptr [rdi], mm0; ret; 
0x00000000000b78a5: movq qword ptr [rdi], mm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c5: movq qword ptr [rdi], mm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000016d8c5: movq qword ptr [rdi], mm1; ret; 
0x0000000000041edf: movq rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ede: movq rax, xmm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ebf: movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ebe: movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000116d78: movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000420e8: movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004216d: movq xmm0, rax; ret; 
0x0000000000047cdc: movq xmm0, rax; xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042044: movq xmm0, rcx; ret; 
0x0000000000041f5e: movq xmm0, rdx; ret; 
0x0000000000041fae: movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000116d7d: movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001320c8: movsb byte ptr [rdi], byte ptr [rsi]; add ch, bh; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000bbb6e: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000001383c8: movsb byte ptr [rdi], byte ptr [rsi]; mov edx, 0x89480000; ret; 
0x00000000001258f8: movsb byte ptr [rdi], byte ptr [rsi]; or al, 0; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x00000000000a07a1: movsb byte ptr [rdi], byte ptr [rsi]; or eax, 0x450f4800; ret 0xfc3; 
0x0000000000099dd8: movsb byte ptr [rdi], byte ptr [rsi]; ret 0xffff; 
0x00000000000bbb60: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000009c1e8: movsb byte ptr [rdi], byte ptr [rsi]; sub al, 0x15; add byte ptr [rbx + 0x22], dh; lea rax, [rax - 8]; ret; 
0x00000000000a1c84: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000007b9ae: movsd dword ptr [rdi], dword ptr [rsi]; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000000d41c7: movsd dword ptr [rdi], dword ptr [rsi]; jl 0xd41db; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fec7: movsd dword ptr [rdi], dword ptr [rsi]; mov edi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000421ab: movsd dword ptr [rdi], dword ptr [rsi]; nop dword ptr [rax]; endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000011fbc7: movsd dword ptr [rdi], dword ptr [rsi]; ret 0xc; 
0x000000000010fbc7: movsd dword ptr [rdi], dword ptr [rsi]; ret 0xd; 
0x00000000000261c7: movsd dword ptr [rdi], dword ptr [rsi]; ret 0xffff; 
0x0000000000056382: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000001228b7: movsd dword ptr [rdi], dword ptr [rsi]; xchg ebp, eax; or al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000048006: movsd qword ptr [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041f57: movsd qword ptr [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000004207e: movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042058: movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x00000000000d029c: movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000015f249: movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000042348: movss dword ptr [rdi], xmm0; cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000042303: movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000019726c: movss xmm0, dword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x000000000009f325: movsx eax, dl; ret; 
0x00000000000a884c: movsx ecx, byte ptr [rdi + rax]; cmp ecx, edx; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x000000000005ea1e: movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x5ea08; mov eax, r8d; ret; 
0x00000000000a8814: movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x0000000000148749: movsxd rax, dword ptr [rdi + 0x18]; cmp eax, 3; jbe 0x148760; mov eax, 2; ret; 
0x000000000014d056: movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x0000000000047862: movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x0000000000183a80: movsxd rax, ecx; add rax, rdi; ret; 
0x000000000018388e: movsxd rax, ecx; ret; 
0x0000000000160a6c: movsxd rax, ecx; shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000121af5: movsxd rbx, ebx; mov qword ptr [rip + 0xca861], rbx; pop rbx; ret; 
0x0000000000121adb: movsxd rbx, ebx; mov qword ptr [rip + 0xca87b], rbx; pop rbx; ret; 
0x00000000000b8120: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d0: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000bac4c: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b6e4c: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000001838c2: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000034458: movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000033d5b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000003428b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003425b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341bb: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000003419b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000003417b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000340fb: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003413b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000003409b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003411b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340db: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003423b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340bb: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003415b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000003407b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034438: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000034418: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000343f8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034378: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000343b8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000034318: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034398: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000034358: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000342d8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034338: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000343d8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000342f8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000013c504: movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000013c935: movsxd rdx, ecx; ret; 
0x0000000000093e74: movsxd rdx, edx; call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x000000000013c338: movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000004207f: movups xmm0, xmmword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042059: movups xmm0, xmmword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x000000000019726d: movups xmm0, xmmword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x00000000000bbaeb: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000d029d: movups xmm0, xmmword ptr [rsp - 0x10]; ret; 
0x00000000000bbaee: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbcac: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbd53: movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbdda: movups xmmword ptr [r11], xmm8; ret; 
0x000000000008b854: movups xmmword ptr [r12 + 0xf0], xmm0; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000001507c9: movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x0000000000150796: movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d06e: movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000001507ca: movups xmmword ptr [rax + 0x20], xmm2; ret; 
0x00000000000874fa: movups xmmword ptr [rax + 0x30], xmm0; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150797: movups xmmword ptr [rax + 0x30], xmm0; ret; 
0x0000000000087cc9: movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000014d06f: movups xmmword ptr [rax + 8], xmm0; ret; 
0x0000000000141b77: movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086ea2: movups xmmword ptr [rax], xmm0; ret; 
0x00000000000926be: movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000008e552: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000009e900: movups xmmword ptr [rbx + 0x18], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e556: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x00000000001276db: movups xmmword ptr [rbx + 0x30], xmm0; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091e5e: movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091f05: movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000919c5: movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000008e54e: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008e655: movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000048007: movups xmmword ptr [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198e28: movups xmmword ptr [rbx], xmm0; mov rdi, qword ptr [rip + 0x57bee]; call 0x22330; mov qword ptr [rip + 0x57bde], 0; pop rbx; ret; 
0x00000000000bbddb: movups xmmword ptr [rbx], xmm0; ret; 
0x00000000000bbd54: movups xmmword ptr [rbx], xmm4; ret; 
0x00000000000bbd46: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4a: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4f: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4e: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd43: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000010c2fd: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb4: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbdce: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000001576ed: movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000010c301: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd2: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b3c: movups xmmword ptr [rdi + 0x28], xmm0; movups xmmword ptr [rdi + 0x38], xmm0; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c305: movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd6: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b40: movups xmmword ptr [rdi + 0x38], xmm0; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c309: movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x0000000000043b44: movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000043b48: movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000092784: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000043b4c: movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c740: movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c749: movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0d2: movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d0de: movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000918fb: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000013c623: movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000000bbaf6: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbcb8: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbc8b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbcbd: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbc90: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc95: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc9a: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000041f58: movups xmmword ptr [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000042349: movups xmmword ptr [rdi], xmm0; cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000057da4: movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000042304: movups xmmword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000010c2fa: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb1: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbaf3: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000043f35: movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbdcb: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000002717e: movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000014d083: movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014fecb: movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001507db: movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507bb: movups xmmword ptr [rdx], xmm4; ret; 
0x00000000001131be: movups xmmword ptr [rsi + 0x58], xmm0; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000010c6f0: movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d045: movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c6f9: movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000100456: movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014832b: movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000047c28: movups xmmword ptr [rsi], xmm0; lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014fdcd: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000015070d: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014cf90: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000479c3: movups xmmword ptr [rsi], xmm0; sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000008b855: movups xmmword ptr [rsp + 0xf0], xmm0; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000014de26: movzx eax, al; add eax, 1; ret; 
0x0000000000157b8f: movzx eax, al; add rsp, 0x18; ret; 
0x000000000010fb95: movzx eax, al; add rsp, 0x58; ret; 
0x000000000014a144: movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ce093: movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000e51fe: movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000052b37: movzx eax, al; neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e6b: movzx eax, al; neg eax; pop rbp; ret; 
0x00000000000246dc: movzx eax, al; neg eax; ret; 
0x0000000000149d6d: movzx eax, al; pop r12; ret; 
0x0000000000148c13: movzx eax, al; pop rbp; pop r12; ret; 
0x000000000008dfdd: movzx eax, al; pop rbx; neg eax; ret; 
0x000000000014a0da: movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000000043c2f: movzx eax, al; ret; 
0x00000000000ac8c4: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000094c91: movzx eax, al; sub eax, 2; add rsp, 8; ret; 
0x0000000000034089: movzx eax, ax; ret; 
0x00000000000ec465: movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x0000000000183ed2: movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dec: movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa55d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183d87: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183db0: movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dd0: movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000184237: movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000014ae92: movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000529e9: movzx eax, byte ptr [rax + rdx]; mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000009299f: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008b4e3: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000091b40: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000032844: movzx eax, byte ptr [rax]; cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000008b643: movzx eax, byte ptr [rax]; pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008df56: movzx eax, byte ptr [rax]; ret; 
0x00000000000ec466: movzx eax, byte ptr [rcx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000e81d9: movzx eax, byte ptr [rdi + 1]; add rdi, 1; test al, al; jne 0xe8191; xor eax, eax; ret; 
0x000000000013b880: movzx eax, byte ptr [rdi + 1]; lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000013c71a: movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x0000000000102a90: movzx eax, byte ptr [rdi + 9]; and eax, 0xf; ret; 
0x0000000000185064: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000185084: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018504a: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000017e02b: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000184dd4: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c24: movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c44: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c64: movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000018809d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x13418]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001866e8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x14dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001837dd: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x17cd8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750bd: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x263f8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b58: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x2895d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b143d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aede8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a13e9: movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000aa3f3: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183c0a: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa388: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000192090: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000001920f0: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x00000000001920e0: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920d0: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001920c0: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920b0: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001920a0: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000019244a: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x1925c5; xor eax, eax; ret; 
0x000000000018e420: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e1d3: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000192077: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000001461bb: movzx eax, byte ptr [rdi]; add eax, ecx; sub rdx, 1; jne 0x146148; ret; 
0x000000000013efce: movzx eax, byte ptr [rdi]; lea rcx, [rdi + 1]; test al, al; jne 0x13efbd; mov eax, r10d; ret; 
0x00000000001880c3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x133f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000186703: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x14db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183803: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x17cb3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181833: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x19c83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001750e3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x263d3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172b73: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x28943]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1463: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aee03: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000184e50: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000ac8a1: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000aa3a3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000184403: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000000bc736: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000a8b9f: movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000199160: movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x00000000000a8b66: movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b38: movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000bc148: movzx eax, cl; pop rbx; ret; 
0x00000000000bbf61: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000271f5: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000012faec: movzx eax, di; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000bc0f8: movzx eax, dl; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x00000000000bbf60: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000271f4: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000014d0dd: movzx eax, word ptr [r8 + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000014d0de: movzx eax, word ptr [rax + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000034489: movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000341c2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034182: movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034102: movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034142: movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034122: movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000034242: movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340c2: movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000034162: movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000034082: movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012ceb6: movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x000000000010c754: movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000121fa9: movzx eax, word ptr [rdx]; cmp ax, -1; je 0x121fe0; add eax, 1; mov word ptr [rdx], ax; ret; 
0x00000000000a8b7e: movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000bc793: movzx ecx, byte ptr [rsi + rcx]; mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000bb4da: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb58a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x00000000000bb84a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x00000000000aa384: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000aa646: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x0000000000183f07: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x183ef0; sub eax, ecx; vzeroupper; ret; 
0x00000000001843dc: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x1843c0; sub eax, ecx; vzeroupper; ret; 
0x000000000018e424: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000012dce6: movzx ecx, byte ptr [rsi]; mov byte ptr [rax + 1], cl; test cl, cl; jne 0x12dc98; mov rax, rdi; ret; 
0x00000000000bbc0c: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000aa3a0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000184400: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000184e53: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000bbc30: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000018ac00: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189170: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a5b0: movzx ecx, word ptr [rsi]; movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000012faf0: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000120dbf: movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012faef: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000011eea8: movzx edx, bh; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000013c458: movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000009c268: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x0000000000040fb8: movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x000000000014ae8b: movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x000000000013c459: movzx edx, byte ptr [rdx + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x0000000000183ed7: movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183df1: movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa561: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183d8b: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183db5: movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dd5: movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018423b: movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x00000000000bb6fa: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x0000000000185069: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000185089: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018504f: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000186988: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x14b2d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018529f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x16216]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017ff0f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x1b5a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017e02f: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000184dd8: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c29: movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c49: movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c69: movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa3f7: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183c0e: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000017ec6e: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x17ec78; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fc53: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x17fc5d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000192094: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000001920f4: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x00000000001920e4: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920d4: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001920c4: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920b4: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001920a4: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000016d810: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000018e1d7: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000019207b: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000018b2c0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000001899e0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016def0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000018a590: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000ac8a4: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000a8a02: movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8abf: movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8a8e: movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a89c9: movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a8a70: movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a89ab: movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000bc190: movzx edx, cl; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000011eea7: movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000ac8ca: movzx edx, dl; sub eax, edx; ret; 
0x000000000018b2e3: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a03: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5b3: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018b2e4: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a04: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a5b4: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000016d790: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000018abf0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000018b2d0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001899f0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016de80: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000189160: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a89f9: movzx edx, word ptr [rsp + 0x14]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8ab6: movzx edx, word ptr [rsp + 0xc]; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a89e1: movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a8aa6: movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8a68: movzx edx, word ptr [rsp - 8]; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8619: movzx esi, byte ptr [rcx]; test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x000000000012fb58: movzx esi, dh; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000012fb3b: movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000136338: movzx esi, si; push 2; call 0x1358b0; add rsp, 0x18; ret; 
0x000000000012fb57: movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000000bbc35: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000529e8: movzx r8, byte ptr [rax + r10]; mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000001843aa: movzx r8d, byte ptr [r8 + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000008b4e2: movzx r8d, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000008b642: movzx r8d, byte ptr [rax]; pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x00000000000bc735: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000bc792: movzx r9d, byte ptr [rsi + rcx]; mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000b19f7: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000018cf90: mul dword ptr [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000042069: mulps xmm0, xmm1; ret; 
0x00000000000420ee: mulps xmm0, xmmword ptr [rip + 0x17abfb]; ret; 
0x0000000000042453: mulps xmm0, xmmword ptr [rip + 0x17af36]; ret; 
0x0000000000042408: mulps xmm0, xmmword ptr [rip + 0x17af79]; ret; 
0x00000000000423e3: mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x00000000000420ed: mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x0000000000042068: mulsd xmm0, xmm1; ret; 
0x0000000000042452: mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x0000000000042407: mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423e2: mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000052b3a: neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000433eb: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000043427: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048287: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142af: neg eax; mov dword ptr fs:[rdx], eax; mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000102887: neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102827: neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x000000000018bd8f: neg eax; or eax, 1; vzeroupper; ret; 
0x000000000004225b: neg eax; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000041e98: neg eax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000425a3: neg eax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000ec7da: neg eax; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000062e6e: neg eax; pop rbp; ret; 
0x000000000013f493: neg eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000246df: neg eax; ret; 
0x00000000000cf18b: neg ecx; cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf16a: neg ecx; cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000dcff2: neg edx; cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x0000000000112af0: neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x00000000000cf18a: neg r9d; cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf169: neg r9d; cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x0000000000041e97: neg rax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000425a2: neg rax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000cfaf8: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000009a758: nop dword ptr [rax + rax]; add rsp, 0x18; ret; 
0x00000000000832e3: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000014590b: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000024e03: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000148c1b: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000014b143: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000420f8: nop dword ptr [rax + rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004245b: nop dword ptr [rax + rax]; addss xmm0, xmm0; ret; 
0x00000000000ec49b: nop dword ptr [rax + rax]; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000042328: nop dword ptr [rax + rax]; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac178: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000017ec8b: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184b6b: nop dword ptr [rax + rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000ac648: nop dword ptr [rax + rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000057d5b: nop dword ptr [rax + rax]; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002419b: nop dword ptr [rax + rax]; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000091f38: nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000146248: nop dword ptr [rax + rax]; endbr64; mov eax, 1; ret; 
0x0000000000148a7b: nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x000000000008cd4b: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000004409b: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x000000000016345b: nop dword ptr [rax + rax]; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937eb: nop dword ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de28b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093848: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000951eb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000093828: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x000000000002f598: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x00000000000243fb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025a98: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x000000000015ca3b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000012fe7b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xbbfcd]; add rax, qword ptr fs:[0]; ret; 
0x00000000001228ab: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xc95a5]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001155fb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000121ffb: nop dword ptr [rax + rax]; endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x121ec0; ret; 
0x000000000009381b: nop dword ptr [rax + rax]; endbr64; ret; 
0x00000000000342bb: nop dword ptr [rax + rax]; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014625b: nop dword ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000041dcb: nop dword ptr [rax + rax]; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000190e18: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000190e28: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e38: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000190e48: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000190e58: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000190da8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000190db8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000190dc8: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000190dd8: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000190de8: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000190df8: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000190e08: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cf648: nop dword ptr [rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf668: nop dword ptr [rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cf658: nop dword ptr [rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000328b8: nop dword ptr [rax + rax]; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec478: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000ec48b: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000b8498: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e58: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b84bb: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000014d0fb: nop dword ptr [rax + rax]; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x00000000001787c8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001787b8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x0000000000178798: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x00000000000a8b48: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e98: nop dword ptr [rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b58: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000baf4b: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000f2498: nop dword ptr [rax + rax]; mov eax, 0xc; ret; 
0x0000000000062e73: nop dword ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000440d8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000192bdb: nop dword ptr [rax + rax]; mov eax, 1; jg 0x192bf0; neg eax; ret; 
0x000000000009e858: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x00000000000ff75b: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000026f53: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140cb3: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0xafb06]; test eax, eax; je 0x140cc8; ret; 
0x000000000012fb03: nop dword ptr [rax + rax]; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000012595b: nop dword ptr [rax + rax]; mov eax, r8d; ret; 
0x00000000000b7b9b: nop dword ptr [rax + rax]; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6e8b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a8a83: nop dword ptr [rax + rax]; mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x0000000000178808: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178818: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178828: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178838: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178848: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178858: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001787f8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001787d8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7ea8: nop dword ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7ee8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7ef8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f08: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f18: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018a6ab: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ed8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7eb8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000013f088: nop dword ptr [rax + rax]; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000001571cb: nop dword ptr [rax + rax]; mov r8d, 1; mov eax, r8d; ret; 
0x00000000001482ab: nop dword ptr [rax + rax]; mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x00000000000cfb28: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x00000000000cfb38: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x00000000000cfb48: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x00000000000cfb58: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x00000000000cfb68: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000000cfb78: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x000000000009c1f3: nop dword ptr [rax + rax]; mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000008ce23: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf3: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000dd143: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043c33: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000246e3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000011c4e3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf981]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112923: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010dc1b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde249]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d9e3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d983: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde4e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d923: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde541]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d59b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde8c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d53b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde929]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4db: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde989]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000328c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x000000000011cc53: nop dword ptr [rax + rax]; mov rax, r8; ret; 
0x000000000018d47b: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000188ad8: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x00000000000b812b: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000018b628: nop dword ptr [rax + rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000000b852b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6eeb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000ee483: nop dword ptr [rax + rax]; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x0000000000120fdb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcae89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120cab: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcb1b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120703: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcb761]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6b3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc7b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f5eb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc879]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f48b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc9d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f2b3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xccbb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113bb3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd82b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113063: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd8e01]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e02b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xdde39]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d90b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde559]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d583: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde8e1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d523: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde941]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d4c3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde9a1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b6ecb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a43: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a896b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000a8988: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a678: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000014d063: nop dword ptr [rax + rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b7f28: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f38: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000013c333: nop dword ptr [rax + rax]; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000001920eb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x00000000001920db: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000001920cb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001920bb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001920ab: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000019209b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000184e4b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000018916b: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a58b: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x0000000000146905: nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178764: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e44: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b34: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000ac6e5: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001255a6: nop dword ptr [rax + rax]; nop; endbr64; ret; 
0x0000000000190d97: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d87: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b7e67: nop dword ptr [rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e77: nop dword ptr [rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb17: nop dword ptr [rax + rax]; nop; mov rax, 1; ret; 
0x0000000000178776: nop dword ptr [rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e56: nop dword ptr [rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf356: nop dword ptr [rax + rax]; nop; xor rax, rax; ret; 
0x000000000008e65b: nop dword ptr [rax + rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000009e403: nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000000926db: nop dword ptr [rax + rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000010c503: nop dword ptr [rax + rax]; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000148bb3: nop dword ptr [rax + rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116d8b: nop dword ptr [rax + rax]; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000002fd63: nop dword ptr [rax + rax]; ret; 
0x000000000008ad3b: nop dword ptr [rax + rax]; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3b: nop dword ptr [rax + rax]; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000093593: nop dword ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092a23: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x0000000000087df3: nop dword ptr [rax + rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000140cc3: nop dword ptr [rax + rax]; sub rsp, 8; call 0x140750; or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x0000000000026f63: nop dword ptr [rax + rax]; sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x00000000000a09eb: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a067b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a051b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012d8eb: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9ab: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da6b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x00000000000a059b: nop dword ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x00000000001847ab: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000189bf8: nop dword ptr [rax + rax]; vzeroupper; ret; 
0x0000000000184bd8: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0c8: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000046798: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000001843eb: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000042173: nop dword ptr [rax + rax]; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000a285b: nop dword ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08b: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000cfaec: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000014698c: nop dword ptr [rax]; add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000000871b5: nop dword ptr [rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000009f8e9: nop dword ptr [rax]; add rsp, 8; ret; 
0x000000000014b1d5: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000018eb7c: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000004235c: nop dword ptr [rax]; and esi, 0x80000000; movd xmm0, esi; ret; 
0x00000000000ac169: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac189: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac15c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000ac1ac: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce38c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000184b7d: nop dword ptr [rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184b8d: nop dword ptr [rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000000ac7bd: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac659: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac669: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000095525: nop dword ptr [rax]; cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x00000000001579fc: nop dword ptr [rax]; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000012bd8c: nop dword ptr [rax]; endbr64; cmp edi, 0x56; je 0x12bda0; mov eax, 7; ret; 
0x0000000000091e79: nop dword ptr [rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x00000000000241ac: nop dword ptr [rax]; endbr64; lea rax, [rip + 0x191abc]; ret; 
0x000000000010c78c: nop dword ptr [rax]; endbr64; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x0000000000094c9c: nop dword ptr [rax]; endbr64; mov eax, 0x18; syscall; ret; 
0x000000000010db4c: nop dword ptr [rax]; endbr64; mov eax, 0x5f; syscall; ret; 
0x00000000000e40dc: nop dword ptr [rax]; endbr64; mov eax, 0x66; syscall; ret; 
0x00000000000e40fc: nop dword ptr [rax]; endbr64; mov eax, 0x68; syscall; ret; 
0x00000000000e40ec: nop dword ptr [rax]; endbr64; mov eax, 0x6b; syscall; ret; 
0x00000000000e410c: nop dword ptr [rax]; endbr64; mov eax, 0x6c; syscall; ret; 
0x00000000000e40cc: nop dword ptr [rax]; endbr64; mov eax, 0x6e; syscall; ret; 
0x00000000000479ed: nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000155cad: nop dword ptr [rax]; endbr64; mov eax, 1; ret; 
0x00000000001542bc: nop dword ptr [rax]; endbr64; mov eax, 2; ret; 
0x000000000009355c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000015791d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000011369c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x000000000008cd7d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x00000000000de2dc: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; ret; 
0x000000000008defd: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x000000000004408d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x0000000000146f8c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rip + 0xa9be2]; test eax, eax; je 0x146fa0; ret; 
0x00000000000342ac: nop dword ptr [rax]; endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fabc: nop dword ptr [rax]; endbr64; mov eax, edi; bswap eax; ret; 
0x000000000012fac9: nop dword ptr [rax]; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000013a59c: nop dword ptr [rax]; endbr64; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x0000000000043c4c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000025aac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000162dac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x890b5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015316d: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x98c25]; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000011437d: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0xd7ae5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000094c3c: nop dword ptr [rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000004733d: nop dword ptr [rax]; endbr64; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000093859: nop dword ptr [rax]; endbr64; mov rax, rdi; ret; 
0x000000000004262d: nop dword ptr [rax]; endbr64; pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000421ac: nop dword ptr [rax]; endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000023eed: nop dword ptr [rax]; endbr64; ret; 
0x00000000000bbf4d: nop dword ptr [rax]; endbr64; test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000b1d5c: nop dword ptr [rax]; endbr64; test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x0000000000094cac: nop dword ptr [rax]; endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000937fc: nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x000000000008cd5c: nop dword ptr [rax]; endbr64; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd6d: nop dword ptr [rax]; endbr64; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x000000000009c209: nop dword ptr [rax]; lea rax, [rdx - 0x10]; ret; 
0x00000000000d0fd4: nop dword ptr [rax]; lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0ec4: nop dword ptr [rax]; lea rax, [rip - 0x10f]; ret; 
0x00000000000d0fe4: nop dword ptr [rax]; lea rax, [rip - 0x11f]; ret; 
0x00000000000d0eb4: nop dword ptr [rax]; lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x000000000017679d: nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000a8a51: nop dword ptr [rax]; mov byte ptr [rax], 0; ret; 
0x00000000000a8625: nop dword ptr [rax]; mov byte ptr [rcx - 1], 0; mov qword ptr [rdx], rcx; ret; 
0x000000000017876c: nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000ec449: nop dword ptr [rax]; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000b7e4c: nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000018a66c: nop dword ptr [rax]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000a897c: nop dword ptr [rax]; mov byte ptr [rdi], sil; add rax, rdi; ret; 
0x00000000000b7b4c: nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000a8a79: nop dword ptr [rax]; mov dword ptr [rax], ecx; ret; 
0x000000000018a69d: nop dword ptr [rax]; mov dword ptr [rdi], edx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000a89b4: nop dword ptr [rax]; mov dword ptr [rdi], r8d; add rax, rdi; ret; 
0x00000000000b92e9: nop dword ptr [rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x0000000000063025: nop dword ptr [rax]; mov eax, 0x10; ret; 
0x000000000013c9b9: nop dword ptr [rax]; mov eax, 0x7fffffff; ret; 
0x00000000000e5014: nop dword ptr [rax]; mov eax, 0xfc17; ret; 
0x00000000000e5144: nop dword ptr [rax]; mov eax, 0xff; ret; 
0x0000000000090d3c: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x00000000000cf079: nop dword ptr [rax]; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x000000000010c56c: nop dword ptr [rax]; mov eax, 1; pop rbx; ret; 
0x000000000011635c: nop dword ptr [rax]; mov eax, 1; ret; 
0x000000000013c179: nop dword ptr [rax]; mov eax, 2; ret; 
0x00000000000ee32d: nop dword ptr [rax]; mov eax, dword ptr [rbp + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000878cd: nop dword ptr [rax]; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017ab0c: nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000087eac: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000cefcd: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x1c]; cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cef6d: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0xc]; cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x0000000000192aed: nop dword ptr [rax]; mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192be0; ret; 
0x000000000012fb94: nop dword ptr [rax]; mov eax, edi; shr eax, 0x18; ret; 
0x00000000000b6ebd: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000016d67c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016828c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016848c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016868c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018ac1d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b931c: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b7b7d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000baf7d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x0000000000123104: nop dword ptr [rax]; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000013c939: nop dword ptr [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000011d02d: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x1c8]; ret; 
0x000000000011d021: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000017aa5d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017672d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000014d194: nop dword ptr [rax]; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d164: nop dword ptr [rax]; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000008d339: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb4: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x160fb1]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000047c55: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a4211]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043de9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043be9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043299: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012f409: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xbca59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000121fb9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xcdab1]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000001188f1: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd3571]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115741: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd6721]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001142c5: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd7ba1]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113144: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd8d21]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000010dc34: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xde231]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000b67bc: nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000bc1bd: nop dword ptr [rax]; mov rax, rdx; pop rbx; ret; 
0x00000000000b7bdd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b6f0d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b6f1d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a8635: nop dword ptr [rax]; mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000e2e7c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x108fe9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x10dba1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d0dd4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x11b091]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062e94: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x188fd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121244: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcac21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211a4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcacc1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121094: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcadd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121054: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcae11]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121024: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcae41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120f1d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcaf49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120c05: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb261]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120b4d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb319]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012063c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb829]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001204dc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb989]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012012c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcbd39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f83c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcc629]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f53d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcc929]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f2fc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xccb69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f1a4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcccc1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118a3c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd3429]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116d04: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd5161]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd5191]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ab4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd53b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114655: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7811]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114595: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd78d1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144dc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7989]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011443c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7a29]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113d7d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd80e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113684: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd87e1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113354: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8b11]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011330c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8b59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011325d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8c09]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001130fc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8d69]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001129bc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd94a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e144: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xddd21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e114: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xddd51]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c27c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xdfbe9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c1cc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xdfc99]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000016d37c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d1ec: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d15c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016791c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d3fc: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016dbd9: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a5c: nop dword ptr [rax]; mov word ptr [rax], si; ret; 
0x00000000000a8b19: nop dword ptr [rax]; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x000000000015078d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x00000000000b6f6c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f8c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b700c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6fcd: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6fec: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b860d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f59: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000015079c: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d074: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014831d: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000183a7d: nop dword ptr [rax]; movsxd rax, ecx; add rax, rdi; ret; 
0x0000000000102a8d: nop dword ptr [rax]; movzx eax, byte ptr [rdi + 9]; and eax, 0xf; ret; 
0x000000000019208d: nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000018d57d: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000bc141: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x00000000000aa39d: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016d80c: nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016dee9: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016d78c: nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000018b2cd: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001899ed: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016de79: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000189159: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000092714: nop dword ptr [rax]; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x0000000000094d34: nop dword ptr [rax]; or dword ptr [rdi + 8], 1; xor eax, eax; ret; 
0x00000000000928d5: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000038f24: nop dword ptr [rax]; ret; 
0x00000000000ce089: nop dword ptr [rax]; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cf60d: nop dword ptr [rax]; test rax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x000000000018849d: nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018a6bc: nop dword ptr [rax]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x00000000000d0165: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x00000000000ee471: nop dword ptr [rax]; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000040fc1: nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001886bd: nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000117c04: nop dword ptr [rax]; xor eax, eax; xchg dword ptr [rip + 0xd7c40], eax; cmp eax, 1; jg 0x117c16; ret; 
0x000000000013efdd: nop dword ptr [rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x00000000001574ec: nop dword ptr [rax]; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000008274d: nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cfaf7: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x00000000000420f7: nop dword ptr cs:[rax + rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042327: nop dword ptr cs:[rax + rax]; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x0000000000146247: nop dword ptr cs:[rax + rax]; endbr64; mov eax, 1; ret; 
0x0000000000093827: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000025a97: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000146917: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000146927: nop dword ptr cs:[rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000190e17: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000190e27: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e37: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000190e47: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000190e57: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000190da7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000190db7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000190dc7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000190dd7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000190de7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000190df7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000190e07: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cf647: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf667: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cf657: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000328b7: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec477: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000001787b7: nop dword ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000000a8b47: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e97: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b57: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000087f67: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009e857: nop dword ptr cs:[rax + rax]; mov eax, 1; ret; 
0x00000000001787d7: nop dword ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7eb7: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000013f087: nop dword ptr cs:[rax + rax]; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000b92c7: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000018a677: nop dword ptr cs:[rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b7f37: nop dword ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000146904: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178763: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e43: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b33: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000ac6e4: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001255a5: nop dword ptr cs:[rax + rax]; nop; endbr64; ret; 
0x0000000000190d96: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d86: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b7e66: nop dword ptr cs:[rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e76: nop dword ptr cs:[rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb16: nop dword ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000178775: nop dword ptr cs:[rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e55: nop dword ptr cs:[rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf355: nop dword ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x00000000000ee467: nop dword ptr cs:[rax + rax]; ret; 
0x0000000000184bd7: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0c7: nop dword ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000046797: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000cf677: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000009a757: nop word ptr [rax + rax]; add rsp, 0x18; ret; 
0x0000000000024e02: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000148c1a: nop word ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000ec49a: nop word ptr [rax + rax]; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ac177: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000184b6a: nop word ptr [rax + rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000ac647: nop word ptr [rax + rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000057d5a: nop word ptr [rax + rax]; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002419a: nop word ptr [rax + rax]; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000091f37: nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000148a8a: nop word ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x000000000008cd4a: nop word ptr [rax + rax]; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000016345a: nop word ptr [rax + rax]; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937ea: nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000093847: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000951ea: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x000000000015ca3a: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8f425]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001155fa: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xd6865]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000009381a: nop word ptr [rax + rax]; endbr64; ret; 
0x00000000000342ba: nop word ptr [rax + rax]; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014625a: nop word ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x00000000000ec48a: nop word ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000b8497: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e57: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000001787c7: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x0000000000178797: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x00000000000baf4a: nop word ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000062e72: nop word ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000440d7: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000000ff75a: nop word ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000026f52: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140cb2: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0xafb06]; test eax, eax; je 0x140cc8; ret; 
0x000000000012595a: nop word ptr [rax + rax]; mov eax, r8d; ret; 
0x00000000000b6e8a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000178817: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178827: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x00000000001787f7: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000000b7ea7: nop word ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7ef7: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f07: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7ed7: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000008ce22: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf2: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000dd142: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000246e2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000011c4e2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf981]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112922: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd9541]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010dc1a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde249]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d9e2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde481]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d982: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde4e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d922: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde541]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d59a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde8c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d53a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde929]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d4da: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde989]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011cc52: nop word ptr [rax + rax]; mov rax, r8; ret; 
0x0000000000188ad7: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x000000000018b627: nop word ptr [rax + rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6eea: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000120fda: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcae89]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6b2: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc7b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113bb2: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd82b1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113062: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd8e01]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d522: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde941]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a8987: nop word ptr [rax + rax]; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018916a: nop word ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a58a: nop word ptr [rax + rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000009e402: nop word ptr [rax + rax]; pop rbp; ret; 
0x00000000000926da: nop word ptr [rax + rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000148bb2: nop word ptr [rax + rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116d8a: nop word ptr [rax + rax]; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042de7: nop word ptr [rax + rax]; ret; 
0x000000000008ad3a: nop word ptr [rax + rax]; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3a: nop word ptr [rax + rax]; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000093592: nop word ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092a22: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x0000000000087df2: nop word ptr [rax + rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x00000000000a059a: nop word ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x0000000000189bf7: nop word ptr [rax + rax]; vzeroupper; ret; 
0x000000000008a2ba: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000001843ea: nop word ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x00000000000a285a: nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08a: nop word ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000cfaf6: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x00000000000420f6: nop word ptr cs:[rax + rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042326: nop word ptr cs:[rax + rax]; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x0000000000146246: nop word ptr cs:[rax + rax]; endbr64; mov eax, 1; ret; 
0x0000000000093826: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000025a96: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000146916: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000146926: nop word ptr cs:[rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000190e16: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000190e26: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e36: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000190e46: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000190e56: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000190da6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000190db6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000190dc6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000190dd6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000190de6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000190df6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000190e06: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cf646: nop word ptr cs:[rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf666: nop word ptr cs:[rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cf656: nop word ptr cs:[rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000328b6: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec476: nop word ptr cs:[rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000001787b6: nop word ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000000a8b46: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e96: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b56: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000087f66: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009e856: nop word ptr cs:[rax + rax]; mov eax, 1; ret; 
0x00000000001787d6: nop word ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7eb6: nop word ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000013f086: nop word ptr cs:[rax + rax]; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000b92c6: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000018a676: nop word ptr cs:[rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b7f36: nop word ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000146903: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178762: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e42: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b32: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000ac6e3: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001255a4: nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x0000000000190d95: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d85: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b7e65: nop word ptr cs:[rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e75: nop word ptr cs:[rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb15: nop word ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000178774: nop word ptr cs:[rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e54: nop word ptr cs:[rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf354: nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x00000000000ee466: nop word ptr cs:[rax + rax]; ret; 
0x0000000000184bd6: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0c6: nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000046796: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000cf676: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000000e2da8: nop; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bbf28: nop; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008f509: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a526f; ret; 
0x00000000001097fd: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000016cf37: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000013b48c: nop; add byte ptr [rax], al; add byte ptr [rbp + 0x20850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000004354f: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000150836: nop; add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000088a89: nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000001400d5: nop; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x3be9; 
0x000000000014007d: nop; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x9be9; 
0x000000000013fc8d: nop; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0xd889; 
0x000000000018d88e: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d6881: nop; add dword ptr [rax], eax; add byte ptr [rbp + 0x29], al; shr dword ptr [rcx], cl; ret 0x8945; 
0x0000000000114ec5: nop; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000015d1c5: nop; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x000000000006302f: nop; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x0000000000155c1f: nop; add rsp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000014810f: nop; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000148aef: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000094d8f: nop; and eax, 0xfffffffd; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x00000000000ac1bf: nop; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1cf: nop; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce39f: nop; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3af: nop; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac63f: nop; bsr eax, eax; add rax, rdi; ret; 
0x00000000000e50df: nop; cmp rax, 0x517b; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000001578ff: nop; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000015790f: nop; endbr64; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x0000000000041eef: nop; endbr64; andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000e40bf: nop; endbr64; mov eax, 0x27; syscall; ret; 
0x00000000000e43cf: nop; endbr64; mov eax, 0x6f; syscall; ret; 
0x000000000012005f: nop; endbr64; mov eax, 0xba; syscall; ret; 
0x000000000011f95f: nop; endbr64; mov eax, 0xe4; syscall; ret; 
0x000000000014db9f: nop; endbr64; mov eax, 2; ret; 
0x000000000010d06f: nop; endbr64; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000928ef: nop; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000009524f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e7f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x000000000016342f: nop; endbr64; mov rax, qword ptr [rip + 0x88a35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d0f: nop; endbr64; mov rax, qword ptr [rip + 0x89155]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160cbf: nop; endbr64; mov rax, qword ptr [rip + 0x8b1a5]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x00000000001411ef: nop; endbr64; mov rax, qword ptr [rip + 0xaadf5]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012009f: nop; endbr64; mov rax, qword ptr [rip + 0xcbdc5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dbbf: nop; endbr64; mov rax, qword ptr [rip + 0xde2a5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000003445f: nop; endbr64; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000094c4f: nop; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000012201f: nop; endbr64; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x121ec0; ret; 
0x0000000000042a1f: nop; endbr64; movmskps eax, xmm0; and eax, 8; ret; 
0x000000000010c74f: nop; endbr64; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000424df: nop; endbr64; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000001255af: nop; endbr64; ret; 
0x0000000000047d0f: nop; endbr64; sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x00000000000cf68f: nop; endbr64; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x0000000000094c5f: nop; endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x000000000009286f: nop; endbr64; xor eax, eax; ret; 
0x000000000009089f: nop; endbr64; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000190d9f: nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d8f: nop; lea rax, [rdi]; ret; 
0x000000000017aacf: nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000ec40f: nop; mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000a8b0f: nop; mov byte ptr [rdi], 0; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000cfadf: nop; mov ch, dh; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x0000000000167aef: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000b92df: nop; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x000000000014d10f: nop; mov dword ptr [r8 + 4], 0; mov eax, 1; ret; 
0x00000000001787af: nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e6f: nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e8f: nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7e7f: nop; mov dword ptr [rdi], edx; ret; 
0x0000000000095227: nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x0000000000095200: nop; mov dword ptr [rip + 0x1570a9], 1; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951d7: nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b7: nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095247: nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000167ccf: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000167eaf: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b6e6f: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000094d3f: nop; mov eax, 0x16; ret; 
0x00000000000e501f: nop; mov eax, 0x7e; ret; 
0x000000000013b88f: nop; mov eax, 0xffffffff; ret; 
0x000000000014d0ef: nop; mov eax, dword ptr [r8]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000014830f: nop; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000cf01f: nop; mov eax, dword ptr [rdi + 0x2c]; cmp eax, dword ptr [rsi + 0x2c]; jne 0xcf080; ret; 
0x00000000000cf04f: nop; mov eax, dword ptr [rdi + 0x34]; cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x00000000000cf06f: nop; mov eax, dword ptr [rdi + 0x3c]; cmp eax, dword ptr [rsi + 0x3c]; jne 0xcf080; ret; 
0x0000000000192abf: nop; mov eax, dword ptr [rdi - 0xc]; cmp eax, dword ptr [rsi - 0xc]; jne 0x192be0; ret; 
0x000000000016808f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b84cf: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000018917f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x0000000000087f57: nop; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f26: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000001787ef: nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b7ecf: nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x0000000000094ea7: nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e90: nop; mov qword ptr [rip + 0x157448], rax; ret; 
0x0000000000094e37: nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e27: nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000054daf: nop; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000cfb1f: nop; mov rax, 1; ret; 
0x00000000000d016f: nop; mov rax, qword ptr [rip + 0x11bcf9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d014f: nop; mov rax, qword ptr [rip + 0x11bd19]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000004305f: nop; mov rax, qword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f1f: nop; mov rax, qword ptr [rip + 0x1a8f49]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000000412af: nop; mov rax, qword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000160acf: nop; mov rax, qword ptr [rip + 0x8b399]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011d00f: nop; mov rax, qword ptr [rip + 0xcee59]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000001197cf: nop; mov rax, qword ptr [rip + 0xd2699]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011576f: nop; mov rax, qword ptr [rip + 0xd66f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000110d9f: nop; mov rax, qword ptr [rip + 0xdb0c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012ebaf: nop; mov rax, rdi; ret; 
0x000000000018a8ef: nop; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6eff: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b6f2f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b6f3f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000dd12f: nop; mov rdx, qword ptr [rip + 0x10ed39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004827f: nop; mov rdx, qword ptr [rip + 0x1a3be9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012043f: nop; mov rdx, qword ptr [rip + 0xcba29]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113dbf: nop; mov rdx, qword ptr [rip + 0xd80a9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e9df: nop; mov rdx, qword ptr [rip + 0xdd489]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e0cf: nop; mov rdx, qword ptr [rip + 0xddd99]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d96f: nop; mov rdx, qword ptr [rip + 0xde4f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b851f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b936f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x0000000000116e4f: nop; mov rsi, rcx; mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x000000000017878f: nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017877f: nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5f: nop; mov word ptr [rdi], dx; ret; 
0x00000000000b7c5f: nop; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f9f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b710f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b70cf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70ef: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b945f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85ff: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f4f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bb0bf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000001507bf: nop; movdqu xmm2, xmmword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000001507cf: nop; movdqu xmm3, xmmword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001507af: nop; movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000018b2bf: nop; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000015d031: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000162d78: nop; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000146f7f: nop; pop rbp; ret; 
0x0000000000198fcf: nop; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c6910: nop; push 0xf; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000319bf: nop; ret; 
0x0000000000033d0b: nop; rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x0000000000049419: nop; std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000628cc: nop; sti; sti; dec dword ptr [rax - 0x77]; ret 0x12eb; 
0x000000000012975f: nop; sub eax, edx; ret; 
0x0000000000146f9f: nop; sub rsp, 8; call 0x114c70; mov dword ptr [rip + 0xa9bcd], eax; add rsp, 8; ret; 
0x00000000000cf55f: nop; test rax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000001847bf: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000001887df: nop; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018478f: nop; vzeroupper; xor eax, eax; ret; 
0x00000000000baf2f: nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000115c0f: nop; xor eax, eax; add rsp, 8; ret; 
0x00000000001483df: nop; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000005294f: nop; xor eax, eax; ret; 
0x00000000000d2d0c: nop; xor edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012f39f: nop; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf35f: nop; xor rax, rax; ret; 
0x000000000009f8a7: not byte ptr [rax + rax]; add rsp, 8; ret; 
0x000000000009f8a0: not byte ptr [rax + rax]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f862: not byte ptr [rax + rax]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009f869: not byte ptr [rax + rax]; ret; 
0x00000000000dfd03: not byte ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc2a: not dword ptr [r8]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc2b: not dword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012791f: not dword ptr [rbx - 0x18]; cmp ch, byte ptr [rbx - 0x76b70011]; ret; 
0x0000000000041b21: not eax; and eax, ecx; ret; 
0x0000000000041ea1: not eax; and eax, edx; ret; 
0x0000000000160a97: not eax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000041fa9: not eax; and rax, rdx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000157d09: not eax; shr eax, 0x1f; ret; 
0x0000000000061054: not esi; sbb byte ptr [rax], al; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000160a96: not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000041fa8: not rax; and rax, rdx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000000a8afd: notrack jmp rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000001482d7: notrack jmp rax; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bc0c3: notrack jmp rax; nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x000000000014d05d: notrack jmp rax; xor eax, eax; ret; 
0x00000000000b8128: notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000a8968: notrack jmp rcx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000bb3d8: notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8494: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e54: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a8a40: notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a0303: or ah, 0; add byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x0000000000080102: or ah, byte ptr [rdx]; cli; dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x0000000000121c4a: or al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000017efa7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182bb9: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017efd5: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001218ad: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121c24: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009961d: or al, 0; add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000048030: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009809d: or al, 0; add byte ptr [rax], al; mov rax, r8; ret; 
0x00000000000f23d2: or al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000f24a1: or al, 0; add byte ptr [rax], al; ret; 
0x0000000000119793: or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009e95e: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007a733: or al, 0; add byte ptr [rbx - 0x78f0f808], al; ret 8; 
0x000000000005be36: or al, 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000123d04: or al, 0; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001258f9: or al, 0; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x0000000000121878: or al, 0; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121d03: or al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x000000000012eb66: or al, 0; call 0xbd470; add rsp, 8; ret; 
0x000000000009f1a2: or al, 0; cmovne rax, rdx; ret; 
0x00000000000bcdfe: or al, 0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000121cfa: or al, 0; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000bcd0e: or al, 0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc84e: or al, 0; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9fe: or al, 0; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a09b3: or al, 0; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a0643: or al, 0; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04e3: or al, 0; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x000000000011c4ed: or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001200a9: or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000011d015: or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000001228b9: or al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011f7b3: or al, 0; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11f7f4; mov eax, r8d; ret; 
0x0000000000122b2d: or al, 0; mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000011cd79: or al, 0; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x0000000000121c3d: or al, 0; mov qword ptr [rdi + 0x10], rax; jb 0x121c58; mov qword ptr [rip + 0xca710], 2; ret; 
0x0000000000121fd5: or al, 0; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x0000000000121fc5: or al, 0; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011cdac: or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011c4d5: or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f1ad: or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012d020: or al, 0; pop rbp; ret; 
0x0000000000121ae3: or al, 0; pop rbx; ret; 
0x00000000000bc870: or al, 0; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000bcd7d: or al, 0; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000018b725: or al, 0x16; cmp rdi, r9; jb 0x18b8f5; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001904b0: or al, 0x16; cmp rdi, r9; jb 0x1906f0; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbea: or al, 0x16; cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000018c680: or al, 0x16; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c797: or al, 0x16; jne 0x18c769; vzeroupper; ret; 
0x00000000000a13ee: or al, 0x16; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000aa386: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000aa648: or al, 0x16; test al, al; jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x0000000000183f09: or al, 0x16; test eax, eax; jne 0x183ef0; sub eax, ecx; vzeroupper; ret; 
0x00000000001843de: or al, 0x16; test eax, eax; jne 0x1843c0; sub eax, ecx; vzeroupper; ret; 
0x000000000018c637: or al, 0x16; test eax, eax; jne 0x18c620; sub eax, ecx; vzeroupper; ret; 
0x000000000018cb0c: or al, 0x16; test eax, eax; jne 0x18caf0; sub eax, ecx; vzeroupper; ret; 
0x000000000018c67d: or al, 0x17; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c794: or al, 0x17; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c769; vzeroupper; ret; 
0x00000000000993a6: or al, 0x18; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000008fdd0: or al, 0x24; add byte ptr [rax], al; call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x000000000010d43a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010deca: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4c0: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e565; add rsp, 0x68; ret; 
0x00000000001133c5: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113454: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1134a3; add rsp, 0x18; ret; 
0x000000000011350c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135aa: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113af7: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113b0b; add rsp, 0x18; ret; 
0x0000000000114989: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a29: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114ade: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bae: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114c2b; add rsp, 0x38; ret; 
0x00000000001157ee: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115807; add rsp, 0x58; ret; 
0x000000000011593e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b62: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c31: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116c75; add rsp, 0x38; ret; 
0x00000000001196b3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011f0b3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120ab8: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x120ac5; add rsp, 0x18; ret; 
0x00000000001210fd: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12114b; add rsp, 0x58; ret; 
0x000000000012d0ce: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12d1ad; leave; ret; 
0x000000000012de53: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012e12b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012f14b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f6bb: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f79b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f87b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f88b; add rsp, 0xd8; ret; 
0x0000000000136666: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013c6ec: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013e178: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1cb: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e1d8; add rsp, 0x28; ret; 
0x00000000001539df: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1539ec; add rsp, 0x78; ret; 
0x000000000015fa0e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb05: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcae: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd77: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fdbc; add rsp, 0x38; ret; 
0x0000000000042ee9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043322: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435be: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043641: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043cec: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743d: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752d: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e56: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef6: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f43: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bff: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c72: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d47: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfe: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f92: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062052: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062140: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062217: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62227; add rsp, 0xd8; ret; 
0x000000000006316a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063245: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c2: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086677: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086747: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086800: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab8a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac65: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df409: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4189: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4229: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000009959d: or al, 0x28; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000015f0f9: or al, 0x30; fisttp dword ptr [rcx]; ret; 
0x000000000011eeae: or al, 0x30; ror byte ptr [rcx], 0xd0; ret; 
0x000000000010c4f8: or al, 0x31; ror byte ptr [rcx + 0x5d5b0453], 0x41; pop rsp; ret; 
0x00000000001230fd: or al, 0x31; test ecx, ecx; jne 0x123108; ret; 
0x0000000000123166: or al, 0x31; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a4d: or al, 0x31; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aaa: or al, 0x31; test ecx, ecx; jne 0x123ab8; ret; 
0x000000000018c950: or al, 0x3a; jne 0x18c769; vzeroupper; ret; 
0x00000000000cef72: or al, 0x3b; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000018c94d: or al, 0x3e; cmp ecx, dword ptr [rdx + rdi]; jne 0x18c769; vzeroupper; ret; 
0x000000000011f8cf: or al, 0x3f; shr eax, cl; and eax, 3; ret; 
0x000000000008cd25: or al, 0x45; xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x00000000000e2e76: or al, 0x48; add esp, 0x18; ret; 
0x00000000000e2d50: or al, 0x48; add esp, 0x28; ret; 
0x0000000000114fe2: or al, 0x48; add esp, 0x38; ret; 
0x000000000004354b: or al, 0x48; add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000012086b: or al, 0x48; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000014afc3: or al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000148043: or al, 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001786f2: or al, 0x48; lea ecx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000017cb03: or al, 0x48; lea ecx, [rdx + 0xc]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001230f7: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123108; ret; 
0x0000000000123160: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a47: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aa4: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123ab8; ret; 
0x0000000000123349: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123360; ret; 
0x0000000000123c79: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123c90; ret; 
0x00000000000b782f: or al, 0x48; lea edi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f23: or al, 0x48; lea edi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x0000000000113b1d: or al, 0x48; lea edx, [rsp + 0xc]; mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x000000000009ef23: or al, 0x48; mov dword ptr [rdi], esi; ret; 
0x000000000013b410: or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x0000000000121cfd: or al, 0x48; mov edx, dword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000b8f41: or al, 0x49; sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000843e3: or al, 0x4c; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x000000000008e163: or al, 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000947fd: or al, 0x5b; ret; 
0x0000000000197270: or al, 0x61; add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x00000000000a8aba: or al, 0x66; mov dword ptr [rax + 4], edx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8b9a: or al, 0x66; mov dword ptr [rdi + 4], eax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89e5: or al, 0x66; mov dword ptr [rdi + 4], edx; ret; 
0x0000000000048190: or al, 0x66; mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000014564a: or al, 0x66; test r13d, 0x840f1000; ret 0xfffe; 
0x0000000000198d00: or al, 0x70; cld; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x57160], 0; ret; 
0x00000000000a43a1: or al, 0x74; and ecx, dword ptr [rbp + 0x63490e78]; ret 0xf41; 
0x0000000000033906: or al, 0x74; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000421eb: or al, 0x75; or dh, dl; addps xmm0, xmm0; ret; 
0x00000000001133f8: or al, 0x75; ret 0xd8f7; 
0x00000000001837b0: or al, 0x7d; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000791ba: or al, 0x7e; ret; 
0x00000000000b8122: or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d2: or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000bac4e: or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000074536: or al, 0x83; ret; 
0x000000000007adb7: or al, 0x84; ror byte ptr [rdi], cl; mov dl, cl; sbb al, 0; add dh, dh; ret 0xf40; 
0x00000000000bcb3d: or al, 0x87; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x000000000005d7ba: or al, 0x89; fdiv st(6); ret; 
0x0000000000042c3b: or al, 0x89; jae 0x42c7f; xor eax, eax; pop rbx; ret; 
0x00000000000ff6b3: or al, 0x89; ret 0x8b4c; 
0x00000000000bc17b: or al, 0x89; ret 0xe283; 
0x00000000000aedf4: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001230fa: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123108; ret; 
0x0000000000123163: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a4a: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aa7: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123ab8; ret; 
0x000000000018fb3d: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000010c5db: or al, 0x8b; push rbx; add al, 0xeb; ret; 
0x000000000011cd0f: or al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000123367: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012334c: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123360; ret; 
0x0000000000123c7c: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123c90; ret; 
0x00000000000b6e4e: or al, 0x93; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000048194: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000150786: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b8126: or al, 0xb; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d6: or al, 0xb; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8492: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e52: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000113b22: or al, 0xbe; adc byte ptr [rax + rax], dl; call 0x1143a0; add rsp, 0x18; ret; 
0x00000000000e2e6d: or al, 0xe8; int 0x17; sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000ff6a5: or al, 0xe8; mov ch, 0x2d; dec dword ptr [rax - 0x75]; je 0xff6d3; adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x000000000011f47c: or al, 0xe8; mov esi, 0x8bfff751; and al, 0xc; add rsp, 0x28; ret; 
0x0000000000115299: or al, 0xe8; movabs eax, dword ptr [0x480c24448bfff7f3]; add esp, 0x18; ret; 
0x0000000000102b38: or al, 0xe8; ret 0xfffe; 
0x0000000000120c9c: or al, 0xe8; sahf; cmp edi, esi; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x00000000000e2d47: or al, 0xe8; sbb bl, bh; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x000000000012011d: or al, 0xe8; sbb eax, 0x8bfff745; and al, 0xc; add rsp, 0x28; ret; 
0x0000000000113ba3: or al, 0xe8; xchg edi, eax; or bh, al; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000bc795: or al, 0xe; mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x000000000016172a: or al, 0xec; dec dword ptr [rax - 0x77]; ret; 
0x000000000016da13: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000000613a3: or al, 0xf6; ret 0x7401; 
0x000000000005f3ab: or al, 0xf6; ret 0xf01; 
0x0000000000081163: or al, 0xf6; ret 0xf04; 
0x000000000007ad8c: or al, 0xf6; ret 0xf08; 
0x00000000000615bd: or al, 0xf6; ret 0xf40; 
0x000000000005c117: or al, 0xf6; ret; 
0x0000000000117a53: or al, 0xf7; ret 0xfc07; 
0x00000000001183ec: or al, 0xf7; ret; 
0x00000000000cef75: or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000017cb07: or al, 0xf; test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7833: or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x000000000014a2cc: or al, 1; add byte ptr [rax], al; add dh, dh; ret 0x7507; 
0x000000000010d066: or al, 1; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000011d032: or al, 1; add byte ptr [rax], al; ret; 
0x000000000010dbf2: or al, 1; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000010d100: or al, 1; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7a70: or al, 5; add byte ptr [rax], al; ret; 
0x00000000000a884e: or al, 7; cmp ecx, edx; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x0000000000108d80: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x3101; 
0x000000000017e17d: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180d91: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e1a1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000136e6b: or al, byte ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000148356: or al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000001189a5: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1189b4; ret; 
0x00000000000445b9: or al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000105eb6: or al, byte ptr [rax]; add byte ptr [rcx - 0x75], al; push rbp; add al, 0xf7; ret 0xfffd; 
0x000000000014c204: or al, byte ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000014638b: or al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000141109: or al, byte ptr [rax]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141118; ret; 
0x0000000000141b3a: or al, byte ptr [rax]; mov rax, qword ptr [rip + 0xaeedd]; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x00000000001411f9: or al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000001463b7: or al, byte ptr [rax]; ret; 
0x0000000000142464: or al, byte ptr [rax]; syscall; pop rbp; ret; 
0x0000000000140cbc: or al, byte ptr [rax]; test eax, eax; je 0x140cc8; ret; 
0x0000000000146f98: or al, byte ptr [rax]; test eax, eax; je 0x146fa0; ret; 
0x0000000000141b41: or al, byte ptr [rax]; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x0000000000142f79: or al, byte ptr [rax]; test rax, rax; jne 0x142f88; ret; 
0x0000000000104cba: or al, byte ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg esp, eax; ret 0x8341; 
0x0000000000104ec8: or al, byte ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg esp, eax; ret 0x8944; 
0x00000000000bc6f5: or al, byte ptr [rbx + 0xd7402f8]; xor eax, eax; ret; 
0x000000000010fc45: or al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fc54; ret; 
0x0000000000187687: or al, byte ptr es:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000048241: or al, ch; cdq; ret; 
0x00000000001132fd: or al, ch; cmp eax, 0x8bfff813; and al, 8; add rsp, 0x28; ret; 
0x00000000000d7fcf: or al, ch; cmp edx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000fbbbf: or al, ch; dec dword ptr [eax - 0x77]; ret 0x8548; 
0x00000000000f1746: or al, ch; hlt; ret; 
0x00000000000471dd: or al, ch; insd dword ptr [rdi], dx; mov bl, 0xfd; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x000000000011f749: or al, ch; int1; idiv rdi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011634c: or al, ch; jle 0x11630a; idiv bh; mov eax, 1; add rsp, 8; ret; 
0x0000000000120fca: or al, ch; jo 0x121004; idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x00000000001129ad: or al, ch; lea ebx, [rax + rdi*8]; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x0000000000043498: or al, ch; movabs byte ptr [0x480824448b000511], al; add esp, 0x18; ret; 
0x000000000011f52d: or al, ch; or eax, 0x48fff751; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000118a2d: or al, ch; or eax, 0x8bfff7bc; and al, 8; add rsp, 0x28; ret; 
0x0000000000052a51: or al, ch; or esi, edi; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000001204cc: or al, ch; outsb dx, byte ptr [rsi]; idiv r15d; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000001201e9: or al, ch; push rcx; idiv edi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000009c0a8: or al, ch; ret 0xffa6; 
0x00000000000993d8: or al, ch; ret 0xffb1; 
0x00000000000f3447: or al, ch; ret; 
0x0000000000141bbf: or al, ch; retf; and ebp, edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000cf8c4: or al, ch; sub al, 0xf5; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x00000000000fbcd8: or al, ch; xor ah, byte ptr [rsi - 0xe]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001191d6: or ax, 0x4800; add esp, 0x18; ret; 
0x0000000000115774: or ax, 0x6400; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000113ba6: or bh, al; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000082ac1: or bh, bh; rol byte ptr [rbx + 0xf74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000095172: or bh, byte ptr [rdx + 0x15]; add byte ptr [rcx + 1], al; adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x000000000011a765: or bl, byte ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000152bdd: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000010257c: or bl, byte ptr [rdx + 0x59]; pop rbx; ret; 
0x0000000000056340: or bl, ch; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000016dbd3: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000000ec481: or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000ec411: or byte ptr [r10], r8b; xor eax, eax; ret; 
0x000000000002fda8: or byte ptr [r11 + 0x1974fdf8], al; pop rbx; ret; 
0x00000000000e8332: or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000001128c1: or byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x0000000000094d15: or byte ptr [r11 + 0x68901e0], r8b; xor eax, eax; ret; 
0x00000000000411ff: or byte ptr [r11 + r9*4 + 0x47], r9b; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x000000000012ced5: or byte ptr [r13 + 0x480d75c0], r8b; cmp dword ptr [rdi], 0; je 0x12cef0; ret; 
0x0000000000141838: or byte ptr [r13 + 0x4c], r11b; mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x00000000000f0b7e: or byte ptr [r13 + 0x63], cl; ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x000000000012cf8a: or byte ptr [r13 - 0x23], sil; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x00000000000b39b6: or byte ptr [r14 + 0xf], spl; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b66c0: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b67a1: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3acf: or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000ec406: or byte ptr [r14], r10b; mov eax, 1; ret; 
0x00000000000ec4a6: or byte ptr [r14], r11b; mov eax, 2; ret; 
0x0000000000066696: or byte ptr [r15 + r9 - 0x4a], r8b; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008e550: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000055751: or byte ptr [r15], r9b; xchg edx, eax; ret 0x8948; 
0x0000000000113c84: or byte ptr [r8 + 0x100], r15b; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000009397c: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000154575: or byte ptr [r8 + 1], r15b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057d67: or byte ptr [r8 + 2], r15b; ret; 
0x00000000000ec491: or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000057ddb: or byte ptr [r8 - 0x3ffe], r15b; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000f3006: or byte ptr [r8 - 0x75], 4; ret 0x508b; 
0x00000000000b3aae: or byte ptr [r8 - 0x76b7f7be], cl; clc; ret; 
0x00000000001279f0: or byte ptr [r8 - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000176788: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000119f6c: or byte ptr [r8 - 0x77], cl; ret 0xe083; 
0x000000000006e875: or byte ptr [r8 - 0x77], cl; ret; 
0x0000000000157ddf: or byte ptr [r8 - 0x77], r9b; ja 0x157dfd; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x000000000006c57b: or byte ptr [r8 - 0x7d], cl; ret; 
0x0000000000187862: or byte ptr [r8], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000009ef34: or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000005b51b: or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000089d63: or byte ptr [r9 + 0x800ce], r8b; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x000000000011a561: or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000b3b0e: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000001786e7: or byte ptr [r9 - 0x76b7f7be], cl; clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x000000000011a553: or byte ptr [r9 - 0x77], cl; adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000ec3d5: or byte ptr [r9], r11b; mov eax, 1; ret; 
0x00000000000ec46b: or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec43d: or byte ptr [r9], r8b; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3ee: or byte ptr [r9], r8b; mov eax, 1; ret; 
0x0000000000094d39: or byte ptr [r9], r8b; xor eax, eax; ret; 
0x000000000010c2db: or byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000113c85: or byte ptr [rax + 0x100], bh; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000146993: or byte ptr [rax + 0x10], bh; pop rbx; pop rbp; ret; 
0x00000000000a8cad: or byte ptr [rax + 0x16], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000041fc9: or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f99: or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x00000000000a3368: or byte ptr [rax + 0x29], cl; ret 0x1f0f; 
0x00000000000e0f1b: or byte ptr [rax + 0x29], cl; ret; 
0x00000000000893d6: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000160d63: or byte ptr [rax + 0x39], cl; ret 0x5776; 
0x00000000000a48cf: or byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000012e95c: or byte ptr [rax + 0x39], cl; ret 0x976; 
0x000000000004ecb3: or byte ptr [rax + 0x39], cl; ret 0xef75; 
0x000000000009811e: or byte ptr [rax + 0x39], cl; ret; 
0x000000000009397d: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000000e50e7: or byte ptr [rax + 0x40], bh; ret; 
0x00000000000ecbc3: or byte ptr [rax + 0x63], cl; ret; 
0x000000000014d0e0: or byte ptr [rax + 0x66000000], 0x89; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x0000000000136e69: or byte ptr [rax + 0xa], bh; pop rbx; pop rbp; ret; 
0x00000000000e9a7a: or byte ptr [rax + 0xf], 0xa3; ret 0x830f; 
0x000000000012fb56: or byte ptr [rax + 0xf], al; mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000014d07d: or byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001507b5: or byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000155c23: or byte ptr [rax + 1], bh; pop rbp; pop r12; ret; 
0x0000000000154576: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832c9: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x00000000000a89db: or byte ptr [rax + 1], cl; clc; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x000000000012db69: or byte ptr [rax + 1], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000014d07c: or byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000057d68: or byte ptr [rax + 2], bh; ret; 
0x0000000000056724: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg edx, eax; ret 0x8948; 
0x0000000000094e49: or byte ptr [rax + rax], al; add byte ptr [rsi + 1], dh; ret; 
0x00000000000ec492: or byte ptr [rax + rdi*4], bl; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000f4d5e: or byte ptr [rax - 0x2f], cl; call 0xffffffff835939db; ret; 
0x00000000000f5823: or byte ptr [rax - 0x2f], cl; call 0xffffffff835948a0; ret; 
0x0000000000049977: or byte ptr [rax - 0x39], cl; ret; 
0x0000000000042039: or byte ptr [rax - 0x3f], 0xe0; xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000042929: or byte ptr [rax - 0x3f], 0xe0; xor byte ptr [rax + 0x21], cl; retf 0x948; ret 0x8948; 
0x0000000000057ddc: or byte ptr [rax - 0x3ffe], bh; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000dd753: or byte ptr [rax - 0x73], cl; adc al, 0xff; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x00000000000d0fb7: or byte ptr [rax - 0x73], cl; adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0e97: or byte ptr [rax - 0x73], cl; adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000bdf85: or byte ptr [rax - 0x73], cl; add eax, 0x11923; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000012da2d: or byte ptr [rax - 0x73], cl; add eax, 0x3842b; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8ad: or byte ptr [rax - 0x73], cl; add eax, 0x385cb; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d96d: or byte ptr [rax - 0x73], cl; add eax, 0x3aeeb; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000001463b1: or byte ptr [rax - 0x73], cl; add eax, 0xaa747; ret; 
0x00000000000a09ad: or byte ptr [rax - 0x73], cl; add eax, 0xc54db; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a063d: or byte ptr [rax - 0x73], cl; add eax, 0xc582b; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04dd: or byte ptr [rax - 0x73], cl; add eax, 0xc838b; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x00000000000496ac: or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000bea44: or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], rcx; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000b77a9: or byte ptr [rax - 0x73], cl; jg 0xb77b6; jne 0xb7f80; ret; 
0x00000000000b8e8d: or byte ptr [rax - 0x73], cl; jg 0xb8e9a; jne 0xb97d0; ret; 
0x000000000005574e: or byte ptr [rax - 0x73], cl; or byte ptr [r15], r9b; xchg edx, eax; ret 0x8948; 
0x000000000007f1cb: or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x00000000000570ac: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000057754: or byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000000f3007: or byte ptr [rax - 0x75], 4; ret 0x508b; 
0x0000000000101b8b: or byte ptr [rax - 0x75], 4; ret 0x8948; 
0x0000000000122915: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000122976: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x40; ret; 
0x0000000000055846: or byte ptr [rax - 0x75], cl; add al, 0xc8; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000009a0bd: or byte ptr [rax - 0x75], cl; add eax, 0x151f1b; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c3: or byte ptr [rax - 0x75], cl; add eax, 0x155e15; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x000000000015fca5: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000012806b: or byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b48; 
0x0000000000157d17: or byte ptr [rax - 0x75], cl; jg 0x157d34; call 0x830f0; add rsp, 8; ret; 
0x0000000000094cc7: or byte ptr [rax - 0x75], cl; jg 0x94cf4; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x000000000008d23b: or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b3aaf: or byte ptr [rax - 0x76b7f7be], cl; clc; ret; 
0x000000000011767b: or byte ptr [rax - 0x77], cl; add eax, 0xd810d; mov rax, r8; add rsp, 8; ret; 
0x000000000011764b: or byte ptr [rax - 0x77], cl; add eax, 0xd813d; mov rax, r8; ret; 
0x000000000009e9b3: or byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x44]; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000009eb0f: or byte ptr [rax - 0x77], cl; add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b39c0: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012f9ec: or byte ptr [rax - 0x77], cl; clc; sar rax, 6; ret; 
0x00000000001783ad: or byte ptr [rax - 0x77], cl; clc; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x00000000001786eb: or byte ptr [rax - 0x77], cl; clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x00000000000b77c5: or byte ptr [rax - 0x77], cl; cmovns eax, dword ptr [rbx - 0x72b7f618]; jg 0xb77da; jne 0xb7f80; ret; 
0x000000000002c690: or byte ptr [rax - 0x77], cl; fimul dword ptr [rax - 0x75]; add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x00000000001279f1: or byte ptr [rax - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000157de0: or byte ptr [rax - 0x77], cl; ja 0x157dfd; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000bb045: or byte ptr [rax - 0x77], cl; jns 0xffffffffed3bb8a5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafe5: or byte ptr [rax - 0x77], cl; js 0xffffffffed3bb845; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000176789: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000bb006: or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000001032d3: or byte ptr [rax - 0x77], cl; push rdx; fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x000000000012ad0f: or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000014a5a8: or byte ptr [rax - 0x77], cl; ret 0x3149; 
0x0000000000128289: or byte ptr [rax - 0x77], cl; ret 0x4b8b; 
0x00000000000983de: or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000155f47: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000014fac9: or byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000d3d5f: or byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000119f6d: or byte ptr [rax - 0x77], cl; ret 0xe083; 
0x000000000006e876: or byte ptr [rax - 0x77], cl; ret; 
0x00000000000a8e27: or byte ptr [rax - 0x77], cl; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000096863: or byte ptr [rax - 0x77], r9b; ret; 
0x000000000011a6b2: or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000141150: or byte ptr [rax - 0x7b], cl; push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091e3d: or byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rax - 0x58]; add dword ptr [rcx + rbp - 0x77], esi; ret 0xff3; 
0x000000000009e927: or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000a7cdd: or byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000097b78: or byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x00000000000496b5: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000274da: or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000479a0: or byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x83; ret 0x4804; 
0x00000000000eeecf: or byte ptr [rax - 0x7d], cl; rol dword ptr [rcx], 0x39; ret 0xc775; 
0x0000000000145a37: or byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008e3a8: or byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000832eb: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000017e3dc: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004123d: or byte ptr [rax], 0x4c; add ebx, dword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x00000000000a2f92: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xc019; 
0x0000000000196939: or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000017e3dd: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180f31: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e401: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000005fb32: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000117379: or byte ptr [rax], al; add byte ptr [rax], 0; add rsp, 8; mov eax, r8d; ret; 
0x00000000001412d3: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000194cfd: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x000000000009ef35: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x00000000000bc1e9: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000014834f: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010e105: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000011f2ed: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x000000000009844e: or byte ptr [rax], al; add byte ptr [rbp + 0x3c850ff6], al; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x000000000007a72a: or byte ptr [rax], al; add byte ptr [rbx - 0x73f00008], al; or al, 0; add byte ptr [rbx - 0x78f0f808], al; ret 8; 
0x00000000000e6d4d: or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d4eb7: or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018e2b0: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000089d68: or byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000160ad5: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015ca49: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160cc9: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000005b51c: or byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000015cf57: or byte ptr [rax], al; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000162cb5: or byte ptr [rax], al; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000162c55: or byte ptr [rax], al; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000000095523: or byte ptr [rax], al; nop dword ptr [rax]; cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000160db4: or byte ptr [rax], al; ret; 
0x000000000015dee8: or byte ptr [rax], al; test edi, edi; jns 0x15def0; ret; 
0x0000000000160dab: or byte ptr [rax], al; xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x00000000000bb00d: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb04b: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafeb: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000185e4e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013c88a: or byte ptr [rbp + 0x17], dh; add rsp, 0x20; pop rbp; ret; 
0x00000000000ee535: or byte ptr [rbp + 0x31], al; rol byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x0000000000058977: or byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x39], cl; ret; 
0x0000000000046c87: or byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x000000000008541c: or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000012ced6: or byte ptr [rbp + 0x480d75c0], al; cmp dword ptr [rdi], 0; je 0x12cef0; ret; 
0x0000000000141839: or byte ptr [rbp + 0x4c], bl; mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000013c3f3: or byte ptr [rbp + 0x5d5b2b04], cl; ret; 
0x00000000000f0b7f: or byte ptr [rbp + 0x63], cl; ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x00000000000e8626: or byte ptr [rbp + 0x9880fd2], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ee114: or byte ptr [rbp + 1], al; ret 0x428d; 
0x0000000000042517: or byte ptr [rbp + 6], dh; addss xmm0, xmm0; ret; 
0x00000000000d9630: or byte ptr [rbp + rcx*4 + 0x15], cl; pop rsp; ret; 
0x000000000014933b: or byte ptr [rbp + rcx*4 + 4], al; add bl, byte ptr [rbx + 0x5d]; mov eax, r8d; ret; 
0x000000000012db11: or byte ptr [rbp - 0x10], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ec1]; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x00000000000a05c1: or byte ptr [rbp - 0x10], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0421]; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x000000000012da51: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d991: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8d1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x00000000000a09d1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0661: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0501: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x000000000012cf8b: or byte ptr [rbp - 0x23], dh; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x000000000007d733: or byte ptr [rbp - 0x4b7bf040], al; sub dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ea36d: or byte ptr [rbp - 0x577f02e], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000012ce5c: or byte ptr [rbp - 0xf], dh; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000000bccc8: or byte ptr [rbx + 0x11394117], cl; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x000000000002fda9: or byte ptr [rbx + 0x1974fdf8], al; pop rbx; ret; 
0x000000000002fd87: or byte ptr [rbx + 0x37403fe], al; ret; 
0x00000000000fed67: or byte ptr [rbx + 0x38], 8; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec3e4: or byte ptr [rbx + 0x463b01c0], al; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x0000000000062fb8: or byte ptr [rbx + 0x48010447], al; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008f55e: or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x00000000000bcbfe: or byte ptr [rbx + 0x4c], bl; mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000008b4e9: or byte ptr [rbx + 0x5d], bl; mov eax, r8d; ret; 
0x00000000000a8dfa: or byte ptr [rbx + 0x5d], bl; mov rax, r12; pop r12; pop r13; ret; 
0x000000000009ea47: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000005568a: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009f417: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000024e0b: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000094d16: or byte ptr [rbx + 0x68901e0], al; xor eax, eax; ret; 
0x00000000001536a6: or byte ptr [rbx + 0x74fff878], al; jnp 0x153631; ret 0x3901; 
0x0000000000085710: or byte ptr [rbx + 0xd], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000085586: or byte ptr [rbx + 0xf], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000004123e: or byte ptr [rbx + rax + 0x5f], cl; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000041200: or byte ptr [rbx + rcx*4 + 0x47], cl; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x00000000000ee461: or byte ptr [rbx + rdx*4 + 0x5b], dh; ret; 
0x0000000000128286: or byte ptr [rbx - 0x76b7f78d], cl; ret 0x4b8b; 
0x0000000000081f18: or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x0000000000149326: or byte ptr [rcx + 0x29], al; rcr byte ptr [rbx + 0x5d], 1; mov eax, r8d; ret; 
0x0000000000057adb: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000000a3173: or byte ptr [rcx + 0x29], cl; ret; 
0x000000000014b6f1: or byte ptr [rcx + 0x39], al; sbb byte ptr [rdi], cl; xchg edi, eax; ret 0xd284; 
0x000000000014bb71: or byte ptr [rcx + 0x3b], al; sbb byte ptr [rdi], cl; xchg edx, eax; ret 0x8b48; 
0x0000000000089d64: or byte ptr [rcx + 0x800ce], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000055bab: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000056d21: or byte ptr [rcx + 1], cl; ret 0x8d48; 
0x000000000009634b: or byte ptr [rcx + 1], cl; ror dword ptr [rax + 0xf], 1; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000056af0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x00000000000f980d: or byte ptr [rcx + rcx*4 + 0xc], al; and al, 0xe8; stc; mov dh, dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000003f104: or byte ptr [rcx + rcx*4 + 0xc], cl; and al, 0xe8; ret 0xff9d; 
0x000000000003fa03: or byte ptr [rcx + rcx*4 + 0xc], cl; and al, 0xe8; ret; 
0x0000000000040504: or byte ptr [rcx + rcx*4 + 4], cl; and al, 0xe8; ret 0xff89; 
0x000000000009efc4: or byte ptr [rcx + rcx*4 - 0x18], cl; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000009f9e7: or byte ptr [rcx + rcx*4 - 0x18], cl; pop r12; pop r13; ret; 
0x00000000000bcba4: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000014ddec: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x000000000005b933: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x00000000000ee046: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a8e82: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000477a1: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x00000000000a0a43: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; ret; 
0x00000000000829d0: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000013cad6: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000010281b: or byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x00000000000465fe: or byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000082406: or byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x0000000000117381: or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000082713: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000831b4: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; ret; 
0x000000000013c76a: or byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000055bb2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000005844c: or byte ptr [rcx - 0x39], cl; ret 0xc001; 
0x000000000015a33d: or byte ptr [rcx - 0x73], al; push rdi; dec dword ptr [rax - 0x7d]; ret 0x4802; 
0x00000000000555fe: or byte ptr [rcx - 0x75], cl; adc al, 0xc0; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000011a562: or byte ptr [rcx - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000896cb: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x00000000000b3b0f: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x00000000001786e8: or byte ptr [rcx - 0x76b7f7be], cl; clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x0000000000057c29: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000000cd208: or byte ptr [rcx - 0x77], al; ret 0x2a74; 
0x00000000000ee50f: or byte ptr [rcx - 0x77], al; ret 0x4166; 
0x00000000000cd0d7: or byte ptr [rcx - 0x77], al; ret 0x7b75; 
0x0000000000070eff: or byte ptr [rcx - 0x77], al; ret; 
0x000000000011a554: or byte ptr [rcx - 0x77], cl; adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000007f1cf: or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x000000000006e3f2: or byte ptr [rcx - 0x7d], al; retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b782b: or byte ptr [rcx - 0x7d], cl; call 0x7f98c03f; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x0000000000055c3e: or byte ptr [rcx - 0x7d], cl; clc; clc; jne 0x55c30; mov rax, rdx; ret; 
0x000000000005b3c8: or byte ptr [rcx - 0x7d], cl; ret; 
0x000000000006d150: or byte ptr [rcx - 0xa], al; ret; 
0x00000000000eaf53: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010d076: or byte ptr [rcx], al; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000062eb8: or byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010d118: or byte ptr [rcx], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000ec46c: or byte ptr [rcx], al; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec43e: or byte ptr [rcx], al; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3ef: or byte ptr [rcx], al; mov eax, 1; ret; 
0x0000000000094d3a: or byte ptr [rcx], al; xor eax, eax; ret; 
0x00000000000a88cf: or byte ptr [rcx], bh; int1; jne 0xa88c0; ret; 
0x00000000000ec3d6: or byte ptr [rcx], bl; mov eax, 1; ret; 
0x00000000000c9f03: or byte ptr [rcx], ch; ret; 
0x000000000009c0b1: or byte ptr [rcx], cl; ret 0x37e9; 
0x000000000012b99e: or byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000047247: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000fed6a: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000010c2dc: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010c3d0: or byte ptr [rcx], dh; ror byte ptr [rcx - 0x7cb7fbad], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008b641: or byte ptr [rdi + rcx - 0x4a], al; add byte ptr [rbx + 0x5d], bl; mov eax, r8d; pop r12; ret; 
0x0000000000066697: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008e551: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x00000000000a6750: or byte ptr [rdi], cl; add dword ptr [rbp + 0x19], 0; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000137394: or byte ptr [rdi], cl; and dword ptr [rbp + 1], 0; add dh, dh; ret 0xf04; 
0x0000000000034088: or byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x0000000000091d27: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008df55: or byte ptr [rdi], cl; mov dh, 0; ret; 
0x000000000014de25: or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x0000000000157b8e: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000010fb94: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x00000000000246db: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000148c12: or byte ptr [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000014a0d9: or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000000522b8: or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000ecbbf: or byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rax + 0x63], cl; ret; 
0x000000000018c2f8: or byte ptr [rdi], cl; pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x000000000017c6e1: or byte ptr [rdi], cl; test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000d4013: or byte ptr [rdi], cl; test dword ptr [rsi - 0x76000003], eax; retf 0x8348; out dx, eax; adc byte ptr [rcx], ch; ret 0x5589; 
0x000000000006c6b3: or byte ptr [rdi], cl; test edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x000000000006d53a: or byte ptr [rdi], cl; test esi, edx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x00000000001028b0: or byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000122058: or byte ptr [rdi], cl; xchg edi, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000055752: or byte ptr [rdi], cl; xchg edx, eax; ret 0x8948; 
0x00000000000edb92: or byte ptr [rdi], cl; xchg esp, eax; ret 0x8040; 
0x00000000000240d2: or byte ptr [rdi], cl; xchg esp, eax; ret 0xd284; 
0x00000000000445b7: or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000190205: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000009ef21: or byte ptr [rdx + 0xc], dh; mov qword ptr [rdi], rsi; ret; 
0x000000000018fb27: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000013b909: or byte ptr [rdx], al; cmp r8, rdi; jae 0x13b923; mov eax, 0xffffffff; ret; 
0x00000000000ec412: or byte ptr [rdx], al; xor eax, eax; ret; 
0x00000000000ec482: or byte ptr [rdx], bl; mov eax, 2; ret; 
0x0000000000102637: or byte ptr [rdx], ch; push r9; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025f7: or byte ptr [rdx], ch; push r9; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000bf1df: or byte ptr [rdx], cl; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0cf03], al; ret; 
0x0000000000061bbf: or byte ptr [rip + 0x100], ah; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001136a6: or byte ptr [rip + 0x100f], ah; ret; 
0x00000000001136a5: or byte ptr [rip + 0x100f], r12b; ret; 
0x0000000000113d84: or byte ptr [rip + 0x64d8f700], 0x89; add bh, byte ptr [rax - 1]; ret; 
0x0000000000113735: or byte ptr [rip - 0x1010], ah; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000113734: or byte ptr [rip - 0x1010], r12b; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000001176f1: or byte ptr [rip - 0x3b7cb800], 8; ret; 
0x0000000000113951: or byte ptr [rip - 0x80000000], 0x39; ret 0x9b75; 
0x00000000001176ca: or byte ptr [rip], 0; add rsp, 8; ret; 
0x0000000000116d77: or byte ptr [rsi + 0x48], ah; movd mm0, eax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000b3a84: or byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b39b7: or byte ptr [rsi + 0xf], ah; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b66c1: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b67a2: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3ad0: or byte ptr [rsi - 0x77], ah; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000ec4a7: or byte ptr [rsi], bl; mov eax, 2; ret; 
0x00000000000ec407: or byte ptr [rsi], dl; mov eax, 1; ret; 
0x000000000016183c: or byte ptr cs:[rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e6d4c: or byte ptr ds:[rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000041d2f: or cl, bl; std; fstp st(1); ret; 
0x00000000000a4905: or cl, byte ptr [rax + 0x39]; ret 0x860f; 
0x0000000000121cf4: or cl, byte ptr [rax + 0x3b]; add eax, 0xcdd54; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000088a99: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x000000000008eed6: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x00000000000b77f1: or cl, byte ptr [rax - 0x73]; jg 0xb7800; jne 0xb7f80; ret; 
0x00000000000b8ed5: or cl, byte ptr [rax - 0x73]; jg 0xb8ee4; jne 0xb97d0; ret; 
0x00000000001786b2: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000017caa3: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000063574: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000128371: or cl, byte ptr [rax - 0x7d]; ret 0xeb01; 
0x00000000001496e9: or cl, byte ptr [rax - 0x7d]; ret 0xf04; 
0x0000000000084519: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000047d70: or cl, byte ptr [rcx + 0x10e9c117]; and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000001786b6: or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000017caa7: or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000105ec8: or cl, byte ptr [rdi]; xchg ebp, eax; ret 0xd320; 
0x000000000009a9ab: or cl, ch; ret 0xfffe; 
0x000000000007f1d3: or cl, ch; ret; 
0x00000000000bb9e5: or cl, cl; cmove rax, rdx; ret; 
0x0000000000094d56: or cl, dl; clc; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008ce57: or dh, 0x80; and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000017e029: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000094d2f: or dh, bh; xor eax, eax; ret; 
0x000000000016daf3: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000041e25: or dh, byte ptr [rbp + 8]; fadd st(0); add rsp, 8; ret; 
0x000000000013bcc7: or dh, byte ptr [rbp + rax*2 - 0x7d]; dec dword ptr [rbx]; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000ee2db: or dh, byte ptr [rbp + rdi + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000087de6: or dh, byte ptr [rdi + rcx + 0x48]; cmp eax, esi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x0000000000092a16: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x0000000000089df7: or dh, byte ptr [rsp + rdi*4 + 0x48]; add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000014158b: or dh, dh; ret 0x7401; 
0x00000000000992bb: or dh, dh; ret 0xf02; 
0x00000000000421ed: or dh, dl; addps xmm0, xmm0; ret; 
0x00000000000a889e: or dl, cl; jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x000000000010d12a: or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x00000000000fab8b: or dword ptr [rax + 0x39], ecx; ret 0x850f; 
0x00000000000a48ea: or dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x000000000015f021: or dword ptr [rax + 0x39], ecx; ret; 
0x0000000000092718: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x00000000000cf341: or dword ptr [rax + 0xf], ecx; mov esp, 0xc83948ca; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000a04e2: or dword ptr [rax + rax], 0x48; lea edx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x000000000013c761: or dword ptr [rax - 0x3f], ecx; out 4, al; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x00000000000b77cc: or dword ptr [rax - 0x73], ecx; jg 0xb77da; jne 0xb7f80; ret; 
0x00000000000b8eb0: or dword ptr [rax - 0x73], ecx; jg 0xb8ebe; jne 0xb97d0; ret; 
0x0000000000178692: or dword ptr [rax - 0x73], ecx; or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x0000000000042b2e: or dword ptr [rax - 0x75], 0x1a933a05; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xc764; 
0x00000000000c7c0c: or dword ptr [rax - 0x75], 0x5d; mov al, 0x89; ret 0xff25; 
0x00000000000628e3: or dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x00000000001610f3: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], cl; test byte ptr [rbx], dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005586f: or dword ptr [rax - 0x7d], 0xffffffea; add dword ptr [rbp - 0x1e], esi; mov eax, 1; ret; 
0x00000000000320e6: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000000d358d: or dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000b69fe: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000117378: or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000153274: or dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000a7ace: or dword ptr [rax], eax; add bh, dh; ret; 
0x000000000017e30d: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185cff: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e267: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001610fa: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015d373: or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000412ba: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246f2: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001482e1: or dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000010c50a: or dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000001934dd: or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000b5c15: or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000015e112: or dword ptr [rax], eax; add dword ptr [rcx + rcx*4 - 0x20], eax; pop rbp; pop r12; pop r13; ret; 
0x000000000015cc7b: or dword ptr [rax], eax; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000015d28e: or dword ptr [rax], eax; call 0x22580; test eax, eax; sete al; add rsp, 8; ret; 
0x0000000000153179: or dword ptr [rax], eax; lea rdx, [rip + 0x9dcbe]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000120dc7: or dword ptr [rax], eax; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015c602: or dword ptr [rax], eax; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000153180: or dword ptr [rax], eax; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000153269: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9dba6], 2; ret; 
0x000000000015323a: or dword ptr [rax], eax; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x000000000009e1d9: or dword ptr [rax], eax; nop dword ptr [rax + rax]; endbr64; ret; 
0x0000000000138732: or dword ptr [rbp + 0xb], edi; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000113263: or dword ptr [rbp + rcx + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000018e9a6: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x0000000000082a77: or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008e660: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000093e7c: or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000e2d63: or dword ptr [rcx - 0x2708fff0], edx; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000ca22a: or dword ptr [rcx - 0x77], 0xc68348d2; add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000128d72: or dword ptr [rcx - 0x7d], ecx; ret 0xe901; 
0x000000000006c3ff: or dword ptr [rcx - 1], 0xffffffff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000011e6c4: or dword ptr [rcx], 0xd8d4800; ret 0x5f1; 
0x000000000010fbe8: or dword ptr [rcx], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x0000000000094d38: or dword ptr [rdi + 8], 1; xor eax, eax; ret; 
0x0000000000160a77: or dword ptr [rdi + rax*8], edx; xor eax, eax; ret; 
0x000000000013f89e: or dword ptr [rdi + rbp*8 - 0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x000000000005b6ac: or dword ptr [rdi - 0x2f], esi; mov rax, r8; ret; 
0x000000000008fdce: or dword ptr [rdi], 0x240c; call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x00000000000499eb: or dword ptr [rdi], 0xae85; add byte ptr [rcx], dh; div bh; ret 0; 
0x00000000000e9f03: or dword ptr [rdi], 0xffffff85; mov edx, 0x89fffff5; ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x0000000000043b92: or dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000178696: or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000017ca77: or dword ptr [rdi], ecx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000080882: or dword ptr [rdi], ecx; xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x0000000000080fc6: or dword ptr [rdi], ecx; xchg dword ptr [rbx], esi; add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x000000000009f2d4: or dword ptr [rdi], ecx; xchg esi, eax; ret 0x3145; 
0x000000000009f283: or dword ptr [rdi], ecx; xchg esi, eax; ret 0xf631; 
0x000000000013f86b: or dword ptr [rdi], ecx; xchg esp, eax; ret 0xd308; 
0x0000000000126422: or dword ptr [rdx + 0x6401000c], ebx; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x000000000009f357: or dword ptr [rdx - 1], edi; cmovbe eax, edx; ret; 
0x0000000000026f71: or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x00000000001463a7: or dword ptr [rip + 0xaa732], 2; add rsp, 8; lea rax, [rip + 0xaa747]; ret; 
0x0000000000140cd1: or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x0000000000117680: or dword ptr [rip - 0x3f76b400], 0x8c48348; ret; 
0x0000000000117398: or dword ptr [rip - 0x7ab800], 0x75; adc byte ptr [rax + 1], bh; ret; 
0x000000000009f352: or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x0000000000043063: or dword ptr [rsi - 0x389bffe6], ecx; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000117a48: or eax, 0x10358900; jle 0x117a5c; add byte ptr [rbp - 0x8f38b2e], al; ret 0xfc07; 
0x00000000000e44a6: or eax, 0x1079c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4476: or eax, 0x1079f5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4446: or eax, 0x107a25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4416: or eax, 0x107a55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b6: or eax, 0x107ab5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4386: or eax, 0x107ae5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4136: or eax, 0x107d35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3186: or eax, 0x108ce5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2da6: or eax, 0x1090c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b56: or eax, 0x109315; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b3b24: or eax, 0x1120f66; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000d41f6: or eax, 0x117c75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41c6: or eax, 0x117ca5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018806f: or eax, 0x1344c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018698e: or eax, 0x14b2d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001141b2: or eax, 0x14ba; add byte ptr [rcx], ch; ret 0xc085; 
0x00000000001866ba: or eax, 0x14e01; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000009c1e7: or eax, 0x152ca4; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009c1de: or eax, 0x152cb5; jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000008e5b7: or eax, 0x15a8e4; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000001852a5: or eax, 0x16216; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000042637: or eax, 0x17a134; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000042079: or eax, 0x17a662; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042089: or eax, 0x17a672; mulsd xmm0, xmm1; ret; 
0x0000000000042053: or eax, 0x17a688; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000042063: or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x0000000000041eff: or eax, 0x17a7dc; orpd xmm0, xmm1; ret; 
0x00000000001837af: or eax, 0x17d0c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000005557a: or eax, 0x1968f1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013c32a: or eax, 0x1975c085; mov eax, r8d; ret; 
0x00000000001817ea: or eax, 0x19cd1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000439d6: or eax, 0x1a8495; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000433e6: or eax, 0x1a8a85; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017ff15: or eax, 0x1b5a6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000115ae5: or eax, 0x1b800; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000b8791: or eax, 0x1c478d48; ret; 
0x00000000000b9221: or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b9601: or eax, 0x1d478d48; ret; 
0x00000000000b7a91: or eax, 0x1de88349; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x0000000000178718: or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x0000000000117c0e: or eax, 0x1f88300; jg 0x117c16; ret; 
0x000000000017cb39: or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001183e0: or eax, 0x25894400; ja 0x11845b; or eax, 0x74db8500; or al, 0xf7; ret; 
0x0000000000114298: or eax, 0x2894800; cmp rdi, rax; ja 0x1142c8; xor eax, eax; ret; 
0x0000000000118c83: or eax, 0x2f6e800; add byte ptr [rax], al; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000113c80: or eax, 0x30; mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000c04b1: or eax, 0x36b90000; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8945; 
0x00000000000424c4: or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x000000000012ceda: or eax, 0x3f8348; je 0x12cef0; ret; 
0x0000000000041d8d: or eax, 0x3ffe; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000008063a: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000080ef2: or eax, 0x401f0f08; add byte ptr [rbx - 0x7cb7fbbe], cl; ret 0x4104; 
0x0000000000119187: or eax, 0x415c4100; pop rbp; ret; 
0x000000000011914e: or eax, 0x415d5900; pop rsp; pop r13; ret; 
0x000000000013501e: or eax, 0x42b60f90; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000e1632: or eax, 0x440f4800; ret 0x854d; 
0x0000000000085712: or eax, 0x44a8d48; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000015763a: or eax, 0x44c03145; mov eax, eax; ret; 
0x00000000000bcd63: or eax, 0x450f4800; ret 0x66c3; 
0x000000000009f222: or eax, 0x450f4800; ret 0xfc3; 
0x00000000001142b7: or eax, 0x48000d7c; mov dword ptr [rax], 0xffffffff; xor eax, eax; ret; 
0x00000000000b1e65: or eax, 0x48fad348; test edx, edx; je 0xb1e90; bsf rax, rdx; ret; 
0x0000000000120dbe: or eax, 0x48ffb70f; lea eax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000011f52f: or eax, 0x48fff751; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011767f: or eax, 0x4c000d81; mov eax, eax; add rsp, 8; ret; 
0x000000000010c861: or eax, 0x528b4800; sbb byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; ret 0x8207; 
0x0000000000115b92: or eax, 0x5894800; add eax, 0x48000d9b; lea eax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x0000000000115b8b: or eax, 0x58b4800; fcomp qword ptr [rdx - 0x76b7fff3]; add eax, 0xd9b05; lea rax, [rip + 0xd9ad6]; add rsp, 8; ret; 
0x00000000000bcaee: or eax, 0x58d4800; jns 0xbcb1d; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000bc95e: or eax, 0x58d4800; mov dword ptr [rdi], ebp; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000a8bde: or eax, 0x58d4800; sbb dword ptr [rax], edi; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000008d882: or eax, 0x5bd88948; pop rbp; pop r12; ret; 
0x0000000000034b42: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000118c34: or eax, 0x5c415d00; pop r13; ret; 
0x000000000010d3e9: or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d4cd: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c1d5: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001142ad: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd7c0d]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000b7855: or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x0000000000117a4e: or eax, 0x74d28500; or al, 0xf7; ret 0xfc07; 
0x00000000001183e7: or eax, 0x74db8500; or al, 0xf7; ret; 
0x00000000000b8788: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a88: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb258: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x0000000000113751: or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000cb180: or eax, 0x80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000e51a2: or eax, 0x8148c031; cli; push rsp; push rbx; setne al; ret; 
0x000000000006ed71: or eax, 0x83480000; ret 0x4904; 
0x000000000017eeb7: or eax, 0x83480000; ret 0x4910; 
0x0000000000180a51: or eax, 0x83480000; ret 0xe910; 
0x000000000017eee5: or eax, 0x83480000; ret 0xeb10; 
0x000000000005879e: or eax, 0x8348d231; jge 0x587a5; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x00000000000cb8be: or eax, 0x8348d231; jge 0xcb8c5; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x00000000000be5d6: or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b8f49: or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x0000000000102577: or eax, 0x89000ed0; or bl, byte ptr [rdx + 0x59]; pop rbx; ret; 
0x000000000004cec5: or eax, 0x89410000; ret 0xd231; 
0x00000000000c8f2a: or eax, 0x89490000; ret; 
0x0000000000116ed2: or eax, 0x894c2300; rol dh, 0x46; inc dword ptr [rax]; ret; 
0x000000000010d8a2: or eax, 0x8b6400; cmp eax, 0x26; je 0x10d8b0; mov eax, r9d; ret; 
0x0000000000118a2f: or eax, 0x8bfff7bc; and al, 8; add rsp, 0x28; ret; 
0x00000000000412ab: or eax, 0x90e3eb00; mov rax, qword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000c4eee: or eax, 0xb8480000; ret 0xffff; 
0x0000000000117681: or eax, 0xc0894c00; add rsp, 8; ret; 
0x0000000000117651: or eax, 0xc0894c00; ret; 
0x0000000000086ba6: or eax, 0xc0c48148; add al, byte ptr [rax]; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000bcdf4: or eax, 0xc2214800; lea rax, [rip + 0xcecd0]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000cf7b2: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x0000000000118bf9: or eax, 0xc4834800; adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000010dbc9: or eax, 0xc76400; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001142cd: or eax, 0xc76400; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000011978e: or eax, 0xc76400; or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000011314d: or eax, 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000010dc3d: or eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001207e9: or eax, 0xcb682; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001207b6: or eax, 0xcb6b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120786: or eax, 0xcb6e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120759: or eax, 0xcb712; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202d6: or eax, 0xcbb95; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202a9: or eax, 0xcbbc2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120276: or eax, 0xcbbf5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120246: or eax, 0xcbc25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120176: or eax, 0xcbcf5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120086: or eax, 0xcbde5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120046: or eax, 0xcbe25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120016: or eax, 0xcbe55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffe6: or eax, 0xcbe85; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffb9: or eax, 0xcbeb2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff89: or eax, 0xcbee2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff56: or eax, 0xcbf15; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff29: or eax, 0xcbf42; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fef6: or eax, 0xcbf75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fec6: or eax, 0xcbfa5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe99: or eax, 0xcbfd2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe66: or eax, 0xcc005; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe36: or eax, 0xcc035; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe06: or eax, 0xcc065; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fdd6: or eax, 0xcc095; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fda9: or eax, 0xcc0c2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd79: or eax, 0xcc0f2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd49: or eax, 0xcc122; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd16: or eax, 0xcc155; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fce6: or eax, 0xcc185; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcb9: or eax, 0xcc1b2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc89: or eax, 0xcc1e2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc56: or eax, 0xcc215; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc26: or eax, 0xcc245; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbf6: or eax, 0xcc275; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbc6: or eax, 0xcc2a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fb96: or eax, 0xcc2d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa46: or eax, 0xcc425; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fa16: or eax, 0xcc455; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9e6: or eax, 0xcc485; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f9b6: or eax, 0xcc4b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f989: or eax, 0xcc4e2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f946: or eax, 0xcc525; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f916: or eax, 0xcc555; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3f6: or eax, 0xcca75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3c9: or eax, 0xccaa2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f336: or eax, 0xccb35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f206: or eax, 0xccc65; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f1d6: or eax, 0xccc95; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f176: or eax, 0xcccf5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f13f: or eax, 0xccd2c; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f026: or eax, 0xcce45; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011eff6: or eax, 0xcce75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfb9: or eax, 0xceeb2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf86: or eax, 0xceee5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf59: or eax, 0xcef12; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cf26: or eax, 0xcef45; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cef6: or eax, 0xcef75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cec9: or eax, 0xcefa2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce96: or eax, 0xcefd5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce69: or eax, 0xcf002; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce39: or eax, 0xcf032; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ce06: or eax, 0xcf065; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cdd6: or eax, 0xcf095; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cda9: or eax, 0xcf0c2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000062351: or eax, 0xd0c48148; add dword ptr [rax], eax; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000118ba6: or eax, 0xd32c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b76: or eax, 0xd32f5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b46: or eax, 0xd3325; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118b16: or eax, 0xd3355; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ae9: or eax, 0xd3382; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ab6: or eax, 0xd33b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118a86: or eax, 0xd33e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001189b6: or eax, 0xd34b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118986: or eax, 0xd34e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118748: or eax, 0xd3723; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000178714: or eax, 0xd4a8d48; jne 0x178900; ret; 
0x000000000017cb35: or eax, 0xd4a8d48; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000115696: or eax, 0xd67d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115666: or eax, 0xd6805; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115636: or eax, 0xd6835; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001152f6: or eax, 0xd6b75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118c80: or eax, 0xd6beb; call 0x118f80; lea rax, [rip + 0xd6bdf]; add rsp, 8; ret; 
0x0000000000115236: or eax, 0xd6c35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115176: or eax, 0xd6cf5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115146: or eax, 0xd6d25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114f46: or eax, 0xd6f25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114df6: or eax, 0xd7075; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001143b6: or eax, 0xd7ab5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001141f6: or eax, 0xd7c75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b7851: or eax, 0xd7f8d48; jne 0xb7f80; ret; 
0x00000000000b8f45: or eax, 0xd7f8d48; jne 0xb97d0; ret; 
0x0000000000113df6: or eax, 0xd8075; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112fb9: or eax, 0xd8eb2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd46: or eax, 0xdc125; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fd16: or eax, 0xdc155; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fce6: or eax, 0xdc185; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fcb9: or eax, 0xdc1b2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc86: or eax, 0xdc1e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc56: or eax, 0xdc215; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fc26: or eax, 0xdc245; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fbf9: or eax, 0xdc272; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fbc6: or eax, 0xdc2a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f409: or eax, 0xdca62; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f3d6: or eax, 0xdca95; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f3a6: or eax, 0xdcac5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f376: or eax, 0xdcaf5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea56: or eax, 0xdd415; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea26: or eax, 0xdd445; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e966: or eax, 0xdd505; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e936: or eax, 0xdd535; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e906: or eax, 0xdd565; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e8d6: or eax, 0xdd595; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e8a6: or eax, 0xdd5c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e586: or eax, 0xdd8e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc96: or eax, 0xde1d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc66: or eax, 0xde205; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dba6: or eax, 0xde2c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010db76: or eax, 0xde2f5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010da46: or eax, 0xde425; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010da16: or eax, 0xde455; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d3e6: or eax, 0xdea85; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001027b6: or eax, 0xe96b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102786: or eax, 0xe96e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102756: or eax, 0xe9715; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102726: or eax, 0xe9745; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026f6: or eax, 0xe9775; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026c6: or eax, 0xe97a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102696: or eax, 0xe97d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102666: or eax, 0xe9805; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102576: or eax, 0xed00d; mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x000000000017cb61: or eax, 0xee88349; lea rcx, [rdx + 0xe]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b8f71: or eax, 0xee88349; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x000000000016d99a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000116d4c: or eax, 0xf0e78300; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000007c4a7: or eax, 0xf6fffff8; ret 0xf10; 
0x000000000016d9a3: or eax, 0xf7f0ff3; ret; 
0x0000000000045fe1: or eax, 0xfb8148; adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x0000000000117399: or eax, 0xff854800; jne 0x1173b0; mov eax, 1; ret; 
0x0000000000041b78: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000433f1: or eax, 0xffffffff; ret; 
0x0000000000184e19: or eax, 1; ret; 
0x000000000018bd91: or eax, 1; vzeroupper; ret; 
0x000000000010044e: or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000094d85: or eax, 2; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000061bc5: or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000017e0ad: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180bf1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e0d1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000014835d: or eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000118975: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118984; ret; 
0x00000000000f7bcd: or eax, dword ptr [rax]; add byte ptr [rbp - 0x76db8b40], al; ret 0xe283; 
0x000000000007dcde: or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000048112: or eax, dword ptr [rax]; add dword ptr [rax], eax; ret; 
0x0000000000131641: or eax, dword ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001379fd: or eax, dword ptr [rax]; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbp; ret; 
0x000000000012fe89: or eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000138527: or eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000012f415: or eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012e7c5: or eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cf154: or eax, dword ptr [rbp + 0x31]; leave; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x000000000002fda3: or eax, dword ptr [rbx + 0x438901e8]; or byte ptr [rbx + 0x1974fdf8], al; pop rbx; ret; 
0x000000000010fca8: or eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x0000000000120431: or eax, dword ptr [rdx - 9]; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x30; pop rbp; ret; 
0x00000000000420e6: or eax, ecx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004225d: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000041e9b: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000b1807: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000009a05d: or eax, edi; add eax, 0x154e10; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000047330: or eax, edi; ret; 
0x00000000000b180e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000041ba7: or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000004216b: or eax, edx; movq xmm0, rax; ret; 
0x000000000005294b: or eax, edx; ret; 
0x00000000000425a6: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000012fb24: or eax, esi; bswap eax; ret; 
0x000000000004244c: or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x0000000000057ca0: or eax, esi; movq xmm0, rax; ret; 
0x000000000011ef06: or eax, esi; ret; 
0x000000000011f88e: or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000088e68: or ebp, eax; ret 0xf994; 
0x000000000015196a: or ebp, ebp; dec dword ptr [rax - 0x77]; ret; 
0x000000000016db63: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000000a4920: or ecx, dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000011d004: or ecx, dword ptr [rax + 0x39]; xlatb; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000bbb55: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000b780f: or ecx, dword ptr [rax - 0x73]; jg 0xb781f; jne 0xb7f80; ret; 
0x00000000000b8f03: or ecx, dword ptr [rax - 0x73]; jg 0xb8f13; jne 0xb97d0; ret; 
0x0000000000105125: or ecx, dword ptr [rax - 0x77]; rol dword ptr [rbp + 0x31], 1; ror byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp - 0x75], 0x70; adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000012968d: or ecx, dword ptr [rax - 0x7d]; ret 0x4830; 
0x00000000000e111b: or ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000117677: or ecx, dword ptr [rax - 0x7d]; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd810d], eax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117647: or ecx, dword ptr [rax - 0x7d]; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd813d], eax; mov rax, r8; ret; 
0x0000000000136309: or ecx, dword ptr [rax]; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x0000000000093e7d: or ecx, dword ptr [rax]; pop rbx; ret; 
0x00000000000f60c4: or ecx, dword ptr [rbp - 0x75]; or r9b, r13b; ret 0xfffe; 
0x00000000000cf014: or ecx, dword ptr [rbx + 0x463b2847]; sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000cf064: or ecx, dword ptr [rbx + 0x463b3847]; cmp byte ptr [rbp + 0x13], dh; ret; 
0x000000000017cad7: or ecx, dword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7813: or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x0000000000042042: or ecx, eax; movq xmm0, rcx; ret; 
0x00000000000aa557: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000184e10: or ecx, esi; sub rax, rcx; je 0x184e20; sbb eax, eax; or eax, 1; ret; 
0x000000000013bccc: or edi, dword ptr [rdx + 0x104]; cmove eax, edx; ret; 
0x00000000000e50cf: or edi, dword ptr [rdx + 0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f7c: or edi, dword ptr [rdx + 0xfde8]; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000011f763: or edi, eax; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000fed64: or edi, edi; inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000009e2f2: or edx, dword ptr [rip + 0x74c08500]; push rdi; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000041b63: or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x00000000000e50cd: or edx, eax; or edi, dword ptr [rdx + 0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f7a: or edx, eax; or edi, dword ptr [rdx + 0xfde8]; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000b1d4f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf89b: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1f10: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005b11a: or edx, ecx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d8496: or edx, edi; movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x00000000000db0ab: or edx, edi; movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x0000000000041d09: or edx, esi; je 0x41c58; ret; 
0x00000000000bbb53: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000423bf: or esi, eax; movd xmm0, esi; ret; 
0x0000000000057c59: or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x00000000001136f2: or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000082c04: or esi, ebp; mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bbfa7: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016da83: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000057c97: or esi, ecx; or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000df4d2: or esi, edi; adc byte ptr [rax], al; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000052a53: or esi, edi; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000057cc4: or esi, edx; mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057c5b: or esi, edx; movd xmm0, esi; ret; 
0x000000000010e863: or esi, edx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000057c99: or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000e17d9: or esi, esp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000009f133: or esp, 0x40000000; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x0000000000082a78: or esp, dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008e661: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000033df3: or esp, dword ptr [rbx]; ja 0x33e07; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000000e19a9: or esp, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015cc7a: or qword ptr [r8], rax; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000015c601: or qword ptr [r8], rax; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000160a76: or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000043b91: or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000178695: or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000017ca76: or qword ptr [rdi], rcx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000a889d: or r10b, r9b; jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x000000000016dbd2: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x000000000016db62: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000017e028: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000016daf2: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000016da82: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x0000000000094d55: or r9b, r10b; clc; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000f60c7: or r9b, r13b; ret 0xfffe; 
0x000000000007f1d2: or r9b, r13b; ret; 
0x0000000000178717: or rax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000017cb38: or rax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000080639: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000080ef1: or rax, 0x401f0f08; add byte ptr [rbx - 0x7cb7fbbe], cl; ret 0x4104; 
0x00000000000cb17f: or rax, 0xffffffff80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000058d64: or rax, 0xffffffff89410000; ret 0xd231; 
0x0000000000118bf8: or rax, 0xffffffffc4834800; adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000433f0: or rax, 0xffffffffffffffff; ret; 
0x0000000000187562: or rax, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000420e5: or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x0000000000041e9a: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000b1806: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000004732f: or rax, rdi; ret; 
0x00000000000b180d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000004216a: or rax, rdx; movq xmm0, rax; ret; 
0x00000000000425a5: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000057c9f: or rax, rsi; movq xmm0, rax; ret; 
0x000000000011ef05: or rax, rsi; ret; 
0x000000000017cad6: or rcx, qword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000042041: or rcx, rax; movq xmm0, rcx; ret; 
0x00000000000aa556: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000184e0f: or rcx, rsi; sub rax, rcx; je 0x184e20; sbb eax, eax; or eax, 1; ret; 
0x00000000000b1d4e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf89a: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1f0f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005b119: or rdx, rcx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x0000000000041f04: orpd xmm0, xmm1; ret; 
0x0000000000042086: orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042060: orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041f05: orps xmm0, xmm1; ret; 
0x0000000000042400: orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423db: orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042087: orps xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042061: orps xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000184af6: out 0, al; add byte ptr [rax], al; add rax, rdi; vzeroupper; ret; 
0x000000000002423e: out 0, al; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000000422fe: out 0, al; add byte ptr [rax], al; xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x000000000012fb39: out 0x10, eax; movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000057c52: out 0x17, al; and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x000000000012fb1a: out 0x18, eax; and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000057c9d: out 0x20, al; or rax, rsi; movq xmm0, rax; ret; 
0x0000000000197268: out 0x20, eax; je 0x19727c; movss xmm0, dword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x000000000004732d: out 0x20, eax; or rax, rdi; ret; 
0x0000000000094604: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x000000000010d218: out 0x44, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000041239: out 0x45, al; mov ebx, dword ptr [rax + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000009a058: out 0x45, al; test al, al; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000012b917: out 0x48, al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000145901: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000057b74: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009c270: out 0x48, eax; sub eax, 0x10; ret; 
0x000000000012dbe0: out 0x48, eax; sub esp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x0000000000167b36: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167966: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a62: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679ae: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a1df8: out 0x4c, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e30fa: out 0x57, eax; ret; 
0x0000000000197386: out 0x5b, al; ret; 
0x00000000000dd818: out 0x5b, eax; pop rbp; pop r12; ret; 
0x00000000000342c7: out 0x80, eax; sete al; ret; 
0x00000000000745d3: out 0x83, al; ret; 
0x00000000000c9f5d: out 0x89, al; ret; 
0x00000000000d57ff: out 0x89, eax; ret 0x44c7; 
0x00000000000f3925: out 0x89, eax; ret; 
0x00000000001423fb: out 0xa, al; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000131806: out 0xb, eax; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000ea7a8: out 0xe8, al; ret 1; 
0x00000000000e8a70: out 0xe8, al; retf 1; add byte ptr [rcx - 0x77], al; ret; 
0x00000000001120c5: out 0xe8, eax; add dh, cl; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000d33a4: out 0xe8, eax; cmpsb byte ptr [rsi], byte ptr [rdi]; lodsd eax, dword ptr [rsi]; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000007c791: out 0xe8, eax; leave; pop rsp; cli; dec dword ptr [rax - 0x77]; ret 0xd9e9; 
0x00000000000261c5: out 0xe8, eax; movsd dword ptr [rdi], dword ptr [rsi]; ret 0xffff; 
0x00000000000a273b: out 0xe8, eax; pop rdi; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000015e798: out 0xe8, eax; ret 0xfb0b; 
0x00000000000d6117: out 0xe8, eax; ret; 
0x000000000014418e: out 0xe8, eax; sbb al, 0x5a; std; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000015c863: out 0xe8, eax; xchg edi, eax; insd dword ptr [rdi], dx; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000048102: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048151: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000192ad1: out 0xf, al; je 0x192af0; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x00000000000cef51: out 0xf, al; je 0xcef70; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x00000000000cefb1: out 0xf, al; je 0xcefd0; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cf011: out 0xf, al; je 0xcf020; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf061: out 0xf, al; je 0xcf070; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000bc0fc: out 0xf0, al; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x0000000000116d4f: out 0xf0, eax; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000016d36a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d3ea: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000010c681: out 0xf8, eax; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae3: out 0xf8, eax; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000007e826: out 0xff, eax; push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000009f75e: out 2, al; lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x000000000013c764: out 4, al; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x000000000012fb55: out 8, eax; movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000135d73: out dx, al; adc bh, dh; ret 0x8080; 
0x000000000005fcf9: out dx, al; adc byte ptr [rcx + 0x39], cl; ret; 
0x000000000005f363: out dx, al; add al, 0xc7; add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000013c172: out dx, al; add dword ptr [rax - 0x78], eax; ja 0x13c179; ret; 
0x000000000004b1b0: out dx, al; add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc220; 
0x000000000013c16a: out dx, al; add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000014102e: out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x0000000000138520: out dx, al; dec dword ptr [rax - 0x77]; add eax, 0xb53b7; add rsp, 8; ret; 
0x0000000000132ada: out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000014fb7d: out dx, al; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000014fbbd: out dx, al; dec dword ptr [rax - 0x77]; ret 0xbeeb; 
0x0000000000138381: out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000139e1b: out dx, al; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013caf1: out dx, al; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000001353e9: out dx, al; inc dword ptr [rbp + 0x31]; rol byte ptr [rbp - 0x6bf0be40], cl; ret 0xf741; 
0x000000000011865d: out dx, al; jno 0x11866d; add byte ptr [rcx], al; add rsp, 8; ret; 
0x000000000016d770: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011f8cd: out dx, al; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000013219e: out dx, al; mov dh, 0xb; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000082c05: out dx, al; mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000014aeee: out dx, al; mov ebx, 0xc0850000; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000167b3a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000011d009: out dx, al; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000e82d1: out dx, al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d77a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011d014: out dx, al; or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011cf88: out dx, al; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcd7c: out dx, al; or al, 0; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x0000000000185bae: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000141b40: out dx, al; or al, byte ptr [rax]; test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x000000000002b6bf: out dx, al; ret 0; 
0x0000000000057b53: out dx, al; xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000bcc39: out dx, al; xor eax, eax; ret; 
0x00000000000cf34d: out dx, eax; adc byte ptr [rax + 1], cl; clc; ret; 
0x00000000000d401e: out dx, eax; adc byte ptr [rcx], ch; ret 0x5589; 
0x00000000000d0134: out dx, eax; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x000000000019654a: out dx, eax; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000e50f3: out dx, eax; add byte ptr [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000ca8ca: out dx, eax; add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x0000000000087d22: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7e: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001663b4: out dx, eax; and byte ptr [rbp + rcx*4 + 0x1d], cl; ret; 
0x0000000000041294: out dx, eax; call 0x22330; xor eax, eax; pop rbp; ret; 
0x0000000000123dea: out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012b9bd: out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000001231d4: out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x000000000012aafb: out dx, eax; dec dword ptr [rcx - 0x75]; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x000000000012887a: out dx, eax; inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x000000000016d7f0: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000102a40: out dx, eax; mov eax, dword ptr [rdx + 8]; ret; 
0x000000000016796a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a66: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679b2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a8620: out dx, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000a8780: out dx, eax; mov rax, r8; ret; 
0x0000000000056528: out dx, eax; mov rax, rdx; ret; 
0x000000000016d7fa: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011ce98: out dx, eax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000185cad: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000007dcdd: out dx, eax; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000133399: out dx, eax; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000018d5f3: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d608: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d61d: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f93dd: out dx, eax; ret 0xf41; 
0x00000000000bb623: out dx, eax; ret 0xf66; 
0x0000000000133e4d: out dx, eax; ret; 
0x0000000000100462: out dx, eax; rol byte ptr [rax - 0x3806c799], 6; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000093667: out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000018eb0c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000018eaf5: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018eade: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018d59a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d871: out dx, eax; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d92e: out dx, eax; xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d8dd: out dx, eax; xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000011f892: out dx, eax; xor eax, eax; ret; 
0x000000000018035e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000d9d5b: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rcx + 1], al; ret 0x8944; 
0x00000000000dc0a5: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rcx], al; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x0000000000190c3e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000001144ce: outsb dx, byte ptr [rsi]; add eax, edi; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x000000000006bf00: outsb dx, byte ptr [rsi]; fmul dword ptr [rbx + 0xf660446]; insb byte ptr [rdi], dx; ret; 
0x000000000008d5c3: outsb dx, byte ptr [rsi]; fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret 0xf66; 
0x0000000000063dbe: outsb dx, byte ptr [rsi]; fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000001204ce: outsb dx, byte ptr [rsi]; idiv r15d; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000114ff4: outsb dx, byte ptr [rsi]; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000015f4b0: outsb dx, byte ptr [rsi]; ret 0x160f; 
0x000000000004231a: outsb dx, byte ptr [rsi]; ret 0x1789; 
0x0000000000095918: outsb dx, byte ptr [rsi]; ret 0x4866; 
0x000000000008f183: outsb dx, byte ptr [rsi]; ret 0x4d83; 
0x00000000000d1fa3: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x0000000000025072: outsb dx, byte ptr [rsi]; ret 0x8d48; 
0x0000000000118ef6: outsb dx, byte ptr [rsi]; ret 0xc931; 
0x0000000000090f04: outsb dx, byte ptr [rsi]; ret 0xde9; 
0x000000000008ed26: outsb dx, byte ptr [rsi]; ret 0xe083; 
0x0000000000093ff4: outsb dx, byte ptr [rsi]; ret 0xe480; 
0x000000000008fccb: outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000041f61: outsb dx, byte ptr [rsi]; ret 0xfc3; 
0x000000000002530d: outsb dx, byte ptr [rsi]; ret; 
0x000000000014405e: outsb dx, byte ptr [rsi]; retf 0xa; syscall; 
0x0000000000047cdf: outsb dx, byte ptr [rsi]; rol byte ptr [rbp + 0x31], 0xc0; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000ff2b7: outsb dx, byte ptr [rsi]; rol byte ptr [rcx - 0x77], 0x55; add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x00000000000361b8: outsb dx, byte ptr [rsi]; rol dword ptr [rbx + rcx*4 + 0x15], 1; iretd; mov dl, 0x1b; add byte ptr [rbx + 0x6c0f6600], cl; ret 0xf41; 
0x00000000000423f7: outsb dx, byte ptr [rsi]; ror dword ptr [rdi], 0x54; add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d2: outsb dx, byte ptr [rsi]; ror dword ptr [rdi], 0x54; add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042450: outsb dx, byte ptr [rsi]; sal bl, 0xf; pop rcx; add eax, 0x17af36; ret; 
0x00000000000420eb: outsb dx, byte ptr [rsi]; sal dl, 0xf; pop rcx; add eax, 0x17abfb; ret; 
0x0000000000047653: outsb dx, byte ptr [rsi]; sbb al, byte ptr [rax]; syscall; pop rbp; ret; 
0x0000000000057d34: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000051f01: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x7c89; 
0x0000000000051efc: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x7c89; 
0x0000000000089eed: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x00000000000369e8: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000005be12: outsd dx, dword ptr [rsi]; adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000001507c2: outsd dx, dword ptr [rsi]; adc bh, byte ptr [rax + 1]; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x0000000000157f06: outsd dx, dword ptr [rsi]; adc byte ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000000bbdd0: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000005eea8: outsd dx, dword ptr [rsi]; adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000000429f2: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004288c: outsd dx, dword ptr [rsi]; add al, 0x24; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x00000000000a1542: outsd dx, dword ptr [rsi]; add cl, byte ptr [rax - 0x7d]; ret 0x6610; 
0x0000000000121f70: outsd dx, dword ptr [rsi]; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x00000000000e160c: outsd dx, dword ptr [rsi]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000005b123: outsd dx, dword ptr [rsi]; and al, 0xe8; pinsrw xmm0, eax, 6; ret; 
0x000000000018e688: outsd dx, dword ptr [rsi]; call 0xf7fcf41; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018f858: outsd dx, dword ptr [rsi]; call 0xf7fe111; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018ff80: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018e66d: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e46d: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a9148: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000000acfae: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000018e5ed: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000010c6ed: outsd dx, dword ptr [rsi]; ja 0x10c758; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c73d: outsd dx, dword ptr [rsi]; jbe 0x10c7a0; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0cf: outsd dx, dword ptr [rsi]; jbe 0x10d132; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c6f6: outsd dx, dword ptr [rsi]; jg 0x10c771; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c746: outsd dx, dword ptr [rsi]; jle 0x10c7b9; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d0db: outsd dx, dword ptr [rsi]; jle 0x10d14e; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d04b: outsd dx, dword ptr [rsi]; mov edi, 0xf8; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000018e337: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e437: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015070a: outsd dx, dword ptr [rsi]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014d07b: outsd dx, dword ptr [rsi]; or byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000012ad0e: outsd dx, dword ptr [rsi]; or byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000062fb7: outsd dx, dword ptr [rsi]; or byte ptr [rbx + 0x48010447], al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000114f48: outsd dx, dword ptr [rsi]; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001507d3: outsd dx, dword ptr [rsi]; pop rax; and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000000828ad: outsd dx, dword ptr [rsi]; push 0x16; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000018e56d: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e36d: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e9ad: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000018e90d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x00000000000b19fa: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000b7116: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000018e19d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e26d: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b8786: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b70f6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7de6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000ba406: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000baef6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000005be1a: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000005cba5: outsd dx, dword ptr [rsi]; ret 0x2be; 
0x0000000000089ef8: outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x0000000000089edb: outsd dx, dword ptr [rsi]; ret 0x4866; 
0x0000000000042ac4: outsd dx, dword ptr [rsi]; ret 0x5e8; 
0x000000000006124f: outsd dx, dword ptr [rsi]; ret 0x8349; 
0x00000000001958f2: outsd dx, dword ptr [rsi]; ret 0x8545; 
0x0000000000088432: outsd dx, dword ptr [rsi]; ret 0x8948; 
0x0000000000042ab6: outsd dx, dword ptr [rsi]; ret 0xc35d; 
0x0000000000042aa5: outsd dx, dword ptr [rsi]; ret 0xc4e8; 
0x0000000000042b38: outsd dx, dword ptr [rsi]; ret 0xc764; 
0x0000000000192f74: outsd dx, dword ptr [rsi]; ret 0xed85; 
0x0000000000042a8a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000089fad: outsd dx, dword ptr [rsi]; ret 0xff3; 
0x00000000000b19ff: outsd dx, dword ptr [rsi]; ret; 
0x000000000005be16: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000042aa1: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xc4e8; 
0x000000000018e9cd: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018eaee: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018e92d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018ea6d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000054f10: outsd dx, dword ptr [rsi]; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000042a07: outsd dx, dword ptr [rsi]; shr eax, 0x62; add dl, byte ptr [rip - 0x3b7cb800]; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000151ba6: outsd dx, dword ptr [rsi]; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x00000000001507a3: outsd dx, dword ptr [rsi]; xor byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001435b0: outsd dx, dword ptr [rsi]; xor byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x8b48; 
0x000000000014fdca: outsd dx, dword ptr [rsi]; xor byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000043f2d: pand mm0, mm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000428fe: pand mm0, qword ptr [rip + 0x179e6b]; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x000000000004263d: pand mm0, qword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000042635: pand mm1, qword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000043f2c: pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000428fd: pand xmm0, xmmword ptr [rip + 0x179e6b]; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x000000000004263c: pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000042634: pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000cf012: pcmpeqb mm1, qword ptr [rbx]; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf062: pcmpeqb mm1, qword ptr [rbx]; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000ac14d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac62f: pcmpeqb mm1, qword ptr [rdi + 0x20]; pmovmskb eax, xmm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ac601: pcmpeqb mm1, qword ptr [rdi]; pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000cf038: pcmpeqb mm2, qword ptr [rip + 0x3b30478b]; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000cef28: pcmpeqb mm2, qword ptr [rip + 0x63b078b]; jne 0xcf080; ret; 
0x00000000000cefb2: pcmpeqb mm3, qword ptr [rbx]; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cef52: pcmpeqb mm3, qword ptr [rbx]; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x0000000000192ad2: pcmpeqb mm3, qword ptr [rbx]; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192be0; ret; 
0x00000000000cfae4: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x0000000000192aa4: pcmpeqb mm3, qword ptr [rcx]; mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192be0; ret; 
0x00000000000cfacf: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000000b1bef: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000ac14c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac62e: pcmpeqb xmm1, xmmword ptr [rdi + 0x20]; pmovmskb eax, xmm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ac600: pcmpeqb xmm1, xmmword ptr [rdi]; pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000b1bee: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000ce32d: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce32c: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000bb009: pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bafa7: pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000ac595: pcmpgtd mm1, qword ptr [rdi]; xlatb; ret 0xc085; 
0x00000000000ac603: pcmpgtd mm1, qword ptr [rdi]; xlatb; rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x0000000000183b94: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x183b90; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000183b06: pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183bb0; ret; 
0x0000000000183938: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000018bc3a: pextrw edi, mm0, 0x77; ret; 
0x0000000000186987: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; sub eax, 0x8b00014b; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000005b128: pinsrw mm0, eax, 6; ret; 
0x000000000005b127: pinsrw xmm0, eax, 6; ret; 
0x00000000000421b5: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x00000000000424e5: pmovmskb eax, mm0; and eax, 8; ret; 
0x00000000000b16f0: pmovmskb eax, mm0; test eax, eax; je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000ac0bc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac5a3: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000ac152: pmovmskb eax, mm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac122: pmovmskb eax, mm1; test eax, eax; jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac605: pmovmskb eax, mm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac634: pmovmskb eax, mm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ce332: pmovmskb eax, mm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce302: pmovmskb eax, mm1; test eax, eax; jne 0xce3b0; xor eax, eax; ret; 
0x00000000000421b4: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000424e4: pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000b16ef: pmovmskb eax, xmm0; test eax, eax; je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000ac0bb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac5a2: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000ac151: pmovmskb eax, xmm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac121: pmovmskb eax, xmm1; test eax, eax; jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac604: pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac633: pmovmskb eax, xmm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ce331: pmovmskb eax, xmm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce301: pmovmskb eax, xmm1; test eax, eax; jne 0xce3b0; xor eax, eax; ret; 
0x0000000000190bc1: pmovmskb edx, mm3; test eax, eax; jne 0x190bd4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000b1bf3: pmovmskb edx, mm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x0000000000190bc0: pmovmskb edx, xmm3; test eax, eax; jne 0x190bd4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000b1bf2: pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x000000000013de81: pop qword ptr [rax]; add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000102685: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000000d4239: pop qword ptr [rdx]; jbe 0xd4240; ret; 
0x00000000001498b8: pop r11; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000009a504: pop r12; mov rax, r8; pop r13; ret; 
0x000000000007a173: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000248eb: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b63: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000002601a: pop r12; pop r13; pop r14; ret; 
0x00000000000ef194: pop r12; pop r13; pop r15; ret; 
0x0000000000046074: pop r12; pop r13; pop rbp; ret; 
0x0000000000025b9b: pop r12; pop r13; ret; 
0x000000000008e230: pop r12; pop r14; ret; 
0x000000000012cf7d: pop r12; pop rbp; ret; 
0x000000000002f709: pop r12; ret; 
0x000000000007a175: pop r13; mov rax, r9; pop r14; ret; 
0x00000000000248ed: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b65: pop r13; pop r14; pop r15; ret; 
0x000000000002601c: pop r13; pop r14; ret; 
0x00000000000ef196: pop r13; pop r15; ret; 
0x0000000000046076: pop r13; pop rbp; ret; 
0x0000000000025b9d: pop r13; ret; 
0x00000000000248ef: pop r14; pop r15; pop rbp; ret; 
0x0000000000023b67: pop r14; pop r15; ret; 
0x000000000002601e: pop r14; ret; 
0x0000000000115a8f: pop r15; idiv edi; mov eax, 1; add rsp, 8; ret; 
0x00000000000248f1: pop r15; pop rbp; ret; 
0x0000000000023b69: pop r15; ret; 
0x00000000000919bf: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000000918bc: pop r8; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000043b4a: pop r8; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000092786: pop r8; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000090084: pop rax; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000919c0: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000001507d4: pop rax; and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000014ff33: pop rax; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000f7e1b: pop rax; cmp dh, dh; ret; 
0x00000000000a1862: pop rax; dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x00000000000e4f4a: pop rax; jne 0xe4f50; ret; 
0x000000000011cc1c: pop rax; lock dec dword ptr [rbp + rcx*4 + 5]; adc edx, dword ptr [rdx - 0x7ab7fff7]; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x000000000014ff50: pop rax; mov eax, 1; ret; 
0x0000000000034268: pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341f6: pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e50a1: pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000149284: pop rax; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000918bd: pop rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000001131c1: pop rax; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000011920d: pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000000034541: pop rax; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000010c73a: pop rax; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x0000000000043b4b: pop rax; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x00000000000a0642: pop rax; or al, 0; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x000000000005d7b9: pop rax; or al, 0x89; fdiv st(6); ret; 
0x000000000005c116: pop rax; or al, 0xf6; ret; 
0x00000000000b5c14: pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000bcd62: pop rax; or eax, 0x450f4800; ret 0x66c3; 
0x000000000005520f: pop rax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000226be: pop rax; pop rbx; pop rbp; ret; 
0x000000000015f8c5: pop rax; pop rdx; pop rbx; ret; 
0x0000000000036174: pop rax; ret; 
0x0000000000092787: pop rax; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000118cc4: pop rax; xchg ecx, eax; hlt; dec dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x000000000011f0af: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x000000000015fb01: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcaa: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x00000000000961d2: pop rbp; adc eax, 0x10894800; ret; 
0x00000000000a7aba: pop rbp; add byte ptr [rbx - 0x71f08005], 0x45; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000a5dba: pop rbp; add byte ptr [rbx - 0x71f08005], 0x53; add al, byte ptr [rax]; add bh, dh; ret; 
0x0000000000106f59: pop rbp; add byte ptr [rcx + rbx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000013b6e4: pop rbp; add dh, dh; ret; 
0x0000000000198aa3: pop rbp; add eax, 0x5b050f00; ret; 
0x00000000001989e7: pop rbp; add eax, 0xdb854800; jne 0x1989d0; pop rbx; ret; 
0x0000000000114ec1: pop rbp; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000010e84c: pop rbp; clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000e366a: pop rbp; clc; leave; ret; 
0x000000000012796f: pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000dd759: pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000119181: pop rbp; lea rax, [rip + 0xd6777]; pop r12; pop r13; ret; 
0x00000000000c7c0f: pop rbp; mov al, 0x89; ret 0xff25; 
0x0000000000134b49: pop rbp; mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000009519e: pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000012d411: pop rbp; mov eax, 0x89483e74; ret; 
0x0000000000085af3: pop rbp; mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x000000000010d22c: pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000dfb24: pop rbp; mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x000000000008b647: pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008b4eb: pop rbp; mov eax, r8d; ret; 
0x00000000000a1f70: pop rbp; mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x0000000000198d04: pop rbp; mov qword ptr [rip + 0x57160], 0; ret; 
0x000000000008e192: pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000000d1cd4: pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x00000000000a0397: pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x0000000000034b47: pop rbp; mov rax, r12; pop r12; ret; 
0x00000000001417cf: pop rbp; mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000009a499: pop rbp; mov rax, r8; pop r12; pop r13; ret; 
0x0000000000095654: pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000038ca4: pop rbp; mov rax, r9; pop r12; ret; 
0x000000000007a176: pop rbp; mov rax, r9; pop r14; ret; 
0x000000000009e437: pop rbp; mov ss, word ptr [rcx]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000149d6c: pop rbp; movzx eax, al; pop r12; ret; 
0x0000000000105eb5: pop rbp; or al, byte ptr [rax]; add byte ptr [rcx - 0x75], al; push rbp; add al, 0xf7; ret 0xfffd; 
0x000000000009a503: pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000023b62: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000026019: pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ef193: pop rbp; pop r12; pop r13; pop r15; ret; 
0x0000000000025b9a: pop rbp; pop r12; pop r13; ret; 
0x000000000008e22f: pop rbp; pop r12; pop r14; ret; 
0x000000000002f708: pop rbp; pop r12; ret; 
0x000000000013641e: pop rbp; pop r13; pop r14; pop r15; ret; 
0x00000000000248ee: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b66: pop rbp; pop r14; pop r15; ret; 
0x000000000002601d: pop rbp; pop r14; ret; 
0x00000000000ef197: pop rbp; pop r15; ret; 
0x0000000000046077: pop rbp; pop rbp; ret; 
0x0000000000055bb8: pop rbp; pop rbx; ret; 
0x00000000000226c0: pop rbp; ret; 
0x0000000000152f0f: pop rbp; retf; std; jmp qword ptr [rsi + 0x66]; 
0x00000000000a093e: pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x0000000000110de5: pop rbx; adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000000bc1fe: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x00000000000bc1b6: pop rbx; and eax, 0x7ff80000; ret; 
0x000000000005b45f: pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000bc103: pop rbx; cmove rax, rdx; ret; 
0x00000000000a2c3c: pop rbx; cmovne rax, rdi; ret; 
0x00000000000bc19b: pop rbx; cmovne rax, rdx; ret; 
0x00000000000ddb01: pop rbx; hlt; dec dword ptr [rax - 0x77]; ret; 
0x0000000000087590: pop rbx; mov dword ptr [rbp + 0x74], eax; mov eax, 1; pop rbp; pop r12; ret; 
0x0000000000094726: pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x000000000015326f: pop rbx; mov dword ptr [rip + 0x9dba6], 2; ret; 
0x00000000000f23d0: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x0000000000134af3: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x00000000000875b8: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000060f08: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000148ba8: pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000012cf8e: pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x0000000000106fb6: pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x000000000010c508: pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x00000000000473cd: pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000015031f: pop rbx; mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x0000000000046adb: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000013c52b: pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000000a20bd: pop rbx; mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x000000000004757b: pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000198896: pop rbx; mov qword ptr [rip + 0x553de], 0; ret; 
0x0000000000198bcb: pop rbx; mov qword ptr [rip + 0x56559], 0; ret; 
0x0000000000095449: pop rbx; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008e244: pop rbx; mov rax, r12; pop rbp; pop r12; pop r14; ret; 
0x00000000000bcbff: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x000000000013b72f: pop rbx; mov rax, r8; pop rbp; pop r12; pop r13; ret; 
0x0000000000085915: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000013c503: pop rbx; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000008dfe0: pop rbx; neg eax; ret; 
0x000000000010feb0: pop rbx; pop r12; pop r13; pop r14; ret; 
0x0000000000046073: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000062569: pop rbx; pop r12; pop r13; ret; 
0x000000000005b937: pop rbx; pop r12; ret; 
0x00000000000dd758: pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x000000000010d22b: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000008b646: pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008b4ea: pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000008e191: pop rbx; pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000000a8dfb: pop rbx; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x0000000000034b46: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000095653: pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000038ca3: pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x0000000000149d6b: pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x000000000003040a: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ef192: pop rbx; pop rbp; pop r12; pop r13; pop r15; ret; 
0x0000000000025b99: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22e: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000002f830: pop rbx; pop rbp; pop r12; ret; 
0x000000000013641d: pop rbx; pop rbp; pop r13; pop r14; pop r15; ret; 
0x0000000000196c62: pop rbx; pop rbp; pop r14; ret; 
0x00000000000226bf: pop rbx; pop rbp; ret; 
0x000000000002fdaf: pop rbx; ret; 
0x000000000010c55e: pop rbx; setl al; ret; 
0x000000000011976e: pop rbx; setne al; movzx eax, al; ret; 
0x00000000000bc112: pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000000bc15d: pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x000000000008f55f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000004739c: pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000012cf7a: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000000900b0: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000098ab3: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x00000000000420ef: pop rcx; add eax, 0x17abfb; ret; 
0x0000000000042454: pop rcx; add eax, 0x17af36; ret; 
0x0000000000042409: pop rcx; add eax, 0x17af79; ret; 
0x00000000000423e4: pop rcx; add eax, 0x17afa2; ret; 
0x000000000010d913: pop rcx; in eax, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000011cbdf: pop rcx; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x0000000000113313: pop rcx; mov ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000fed63: pop rcx; or edi, edi; inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000011d013: pop rcx; out dx, al; or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000119150: pop rcx; pop rbp; pop r12; pop r13; ret; 
0x000000000010257e: pop rcx; pop rbx; ret; 
0x0000000000106f5c: pop rcx; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000118d4f: pop rcx; ret 0xf66; 
0x000000000012f413: pop rcx; retf 0xb; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115ae3: pop rcx; wait; or eax, 0x1b800; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f1f96: pop rcx; xor eax, eax; pop rbp; ret; 
0x00000000000c7aa0: pop rdi; add al, 0xe8; leave; ret 0xfff6; 
0x000000000010dc42: pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000083d1d: pop rdi; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000001930b2: pop rdi; add dword ptr [rcx - 9], eax; ret; 
0x000000000018633d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000051b9b: pop rdi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000041241: pop rdi; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x00000000001849d2: pop rdi; and ch, al; std; xlatb; ret; 
0x00000000000a273d: pop rdi; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x0000000000115a90: pop rdi; idiv edi; mov eax, 1; add rsp, 8; ret; 
0x0000000000167f09: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d19: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000081f17: pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x0000000000167b39: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167969: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a65: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679b1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000248f2: pop rdi; pop rbp; ret; 
0x0000000000023b6a: pop rdi; ret; 
0x000000000012b9e8: pop rdi; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000017f726: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x0000000000051c69: pop rdx; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000114990: pop rdx; add rsp, 0x38; ret; 
0x0000000000042075: pop rdx; andpd xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x000000000009e8d0: pop rdx; clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000118c32: pop rdx; insb byte ptr [rdi], dx; or eax, 0x5c415d00; pop r13; ret; 
0x0000000000117012: pop rdx; mov ah, 0xf0; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000119c8b: pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x00000000000a7ad9: pop rdx; or dword ptr [rax], eax; add bh, dh; ret; 
0x0000000000119211: pop rdx; pop r12; ret; 
0x0000000000198aa2: pop rdx; pop rbp; add eax, 0x5b050f00; ret; 
0x000000000015f8c6: pop rdx; pop rbx; ret; 
0x000000000010257d: pop rdx; pop rcx; pop rbx; ret; 
0x00000000000dfc12: pop rdx; ret 0x10; 
0x0000000000142c92: pop rdx; ret; 
0x0000000000144191: pop rdx; std; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000cf625: pop rdx; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000009f3a9: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000961c8: pop rsi; adc eax, 0x30894800; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000001112fe: pop rsi; adc ecx, esi; dec dword ptr [rax - 0x77]; ret 0x3b48; 
0x000000000018623e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000197276: pop rsi; add eax, 0x27418; ret; 
0x000000000014c4b9: pop rsi; in eax, dx; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000ec3d1: pop rsi; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x000000000009f221: pop rsi; or eax, 0x450f4800; ret 0xfc3; 
0x00000000000248f0: pop rsi; pop r15; pop rbp; ret; 
0x0000000000023b68: pop rsi; pop r15; ret; 
0x000000000011f5de: pop rsi; push rax; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000002601f: pop rsi; ret; 
0x0000000000180570: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017fa24: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000181270: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x00000000000d0299: pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000007c794: pop rsp; cli; dec dword ptr [rax - 0x77]; ret 0xd9e9; 
0x0000000000115f85: pop rsp; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x115f60; ret; 
0x000000000009a505: pop rsp; mov rax, r8; pop r13; ret; 
0x000000000004123c: pop rsp; or byte ptr [rax], 0x4c; add ebx, dword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000017e400: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000d4238: pop rsp; pop qword ptr [rdx]; jbe 0xd4240; ret; 
0x000000000007a174: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000248ec: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b64: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000002601b: pop rsp; pop r13; pop r14; ret; 
0x00000000000ef195: pop rsp; pop r13; pop r15; ret; 
0x0000000000046075: pop rsp; pop r13; pop rbp; ret; 
0x0000000000025b9c: pop rsp; pop r13; ret; 
0x000000000008e231: pop rsp; pop r14; ret; 
0x000000000012cf7e: pop rsp; pop rbp; ret; 
0x0000000000099020: pop rsp; ret 0xffff; 
0x000000000002f70a: pop rsp; ret; 
0x00000000000792d0: pop rsp; test al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000dede9: pop rsp; xchg ebp, eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000116912: pop rsp; xor byte ptr [rcx], dh; xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x00000000001168d2: pop rsp; xor byte ptr [rcx], dh; xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x000000000010d1c0: popcnt rax, rax; add r8d, eax; cmp rdi, rsi; ja 0x10d1b8; mov eax, r8d; ret; 
0x0000000000094a53: popfq; adc eax, 0x5b050f00; ret; 
0x000000000018d3bf: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x000000000009f19a: popfq; add byte ptr [rax], al; lea rdx, [rip + 0xc42dc]; cmovne rax, rdx; ret; 
0x000000000006e01f: popfq; loope 0x6e021; inc dword ptr [rcx - 0xa]; ret; 
0x000000000013851f: popfq; out dx, al; dec dword ptr [rax - 0x77]; add eax, 0xb53b7; add rsp, 8; ret; 
0x0000000000056e1e: popfq; ret 0x3948; 
0x00000000000c4b14: popfq; ret 0x840; 
0x00000000000d2af7: popfq; ret 0xd089; 
0x0000000000047580: popfq; sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000004754e: popfq; sbb al, byte ptr [rax]; call 0xbd470; pop rbx; ret; 
0x0000000000181c50: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000042645: por mm0, mm1; ret; 
0x000000000004406d: por mm0, mm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042906: por mm0, qword ptr [rip + 0x179ea3]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x0000000000042644: por xmm0, xmm1; ret; 
0x000000000004406c: por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042905: por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194b40; add rsp, 0x10; pop rbx; ret; 
0x000000000019913b: prefetchnta byte ptr [rax]; je 0x199128; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000016d8c2: psllq mm1, qword ptr [r15]; jg 0x16d8d7; ret; 
0x00000000001703f2: psllq mm1, qword ptr [r15]; jg 0x170407; ret; 
0x000000000016d8c3: psllq mm1, qword ptr [rdi]; jg 0x16d8d7; ret; 
0x00000000001703f3: psllq mm1, qword ptr [rdi]; jg 0x170407; ret; 
0x00000000000b6f96: psllq mm1, qword ptr [rdi]; jg 0xb6fa2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b6ff7: psllq mm1, qword ptr [rdi]; jg 0xb7003; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b70f8: psllq mm1, qword ptr [rdi]; jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7c86: psllq mm1, qword ptr [rdi]; jg 0xb7c92; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7ce7: psllq mm1, qword ptr [rdi]; jg 0xb7cf3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7de8: psllq mm1, qword ptr [rdi]; jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b8646: psllq mm1, qword ptr [rdi]; jg 0xb8652; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b86c7: psllq mm1, qword ptr [rdi]; jg 0xb86d3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b87c8: psllq mm1, qword ptr [rdi]; jg 0xb87d4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b94b6: psllq mm1, qword ptr [rdi]; jg 0xb94c2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b9537: psllq mm1, qword ptr [rdi]; jg 0xb9543; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9638: psllq mm1, qword ptr [rdi]; jg 0xb9644; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000ba2a6: psllq mm1, qword ptr [rdi]; jg 0xba2b2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000ba307: psllq mm1, qword ptr [rdi]; jg 0xba313; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000ba408: psllq mm1, qword ptr [rdi]; jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000bad96: psllq mm1, qword ptr [rdi]; jg 0xbada2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000badf7: psllq mm1, qword ptr [rdi]; jg 0xbae03; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000baef8: psllq mm1, qword ptr [rdi]; jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000bb116: psllq mm1, qword ptr [rdi]; jg 0xbb122; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb197: psllq mm1, qword ptr [rdi]; jg 0xbb1a3; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb298: psllq mm1, qword ptr [rdi]; jg 0xbb2a4; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000d44e2: psubsb mm3, mm0; add eax, 0x89480000; ret; 
0x0000000000086e96: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918ef: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000027177: punpckldq mm1, mm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000027176: punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x00000000001576e2: punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 8], rax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000008e651: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000047ce4: punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000091f01: punpcklqdq xmm0, xmm1; movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116d82: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000002717a: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x00000000000479bf: punpcklqdq xmm0, xmm1; movups xmmword ptr [rsi], xmm0; sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000009e8fc: punpcklqdq xmm0, xmm2; movups xmmword ptr [rbx + 0x18], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fb10: push -0x1605feb4; ret 0xfffe; 
0x000000000005557c: push -0x2708ffe7; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115638: push -0x2708fff3; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115608: push -0x389bfff3; add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000121770: push -0x3f7cb7ec; and ecx, dword ptr [rax - 0x77]; ret 0x2548; 
0x00000000001239f3: push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000012396b: push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x00000000001238e3: push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001236a3: push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001237c3: push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123473: push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123733: push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123503: push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x0000000000123583: push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000123853: push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x00000000001233e3: push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x0000000000153ca4: push -0x74b73fcf; cmp byte ptr [r14 + 0xf], r12b; insb byte ptr [rdi], dx; ret 0x8948; 
0x000000000014db6b: push -0x76b7fffa; ret; 
0x000000000014d0dc: push -0x7f48f0bf; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000017c6e4: push -0x7ffffffa; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000190c24: push -0x9ffffff; ret 0x7501; 
0x00000000000db9e3: push -0xc; inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000cf617: push -0xfb872b8; ret; 
0x000000000011c88c: push -1; inc dword ptr [rcx + rcx*4 + 0x25]; ret 0xcfa; 
0x00000000001025a0: push 0; call 0x102520; add rsp, 0x18; ret; 
0x000000000010c7a8: push 0; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000102638: push 0; push r9; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025f8: push 0; push r9; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000960b6: push 0x15; add byte ptr [rax - 0x73], cl; add eax, 0x156ac0; add rsp, 0x10; pop rbp; ret; 
0x00000000000828ae: push 0x16; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x00000000000ebd4a: push 0x1f0f10eb; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000198892: push 0x1f; clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x553de], 0; ret; 
0x0000000000042752: push 0x2e; adc eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000162143: push 0x3a; add eax, 0x3d54e800; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000153a51: push 0x4334864; and eax, 0x28; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac1: push 0x4334864; and eax, 0x28; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b31: push 0x4334864; and eax, 0x28; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b92: push 0x4334864; and eax, 0x28; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf6: push 0x4334864; and eax, 0x28; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c61: push 0x4334864; and eax, 0x28; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce4: push 0x4334864; and eax, 0x28; jne 0x153cf5; add rsp, 0x78; ret; 
0x00000000000d2f39: push 0x45334861; add byte ptr [rax + 9], cl; ret 0x850f; 
0x000000000013dc82: push 0x5b000001; pop rbp; pop r12; pop r13; ret; 
0x00000000000bcf80: push 0x5c415d5b; pop r13; ret; 
0x000000000010c6ef: push 0x6076110f; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000009839e: push 0x6e0f4966; ret; 
0x000000000010c743: push 0x7e6f0ff3; jo 0x10c759; adc dword ptr [rdi + 0x78], edi; ret; 
0x00000000001539db: push 0xc334864; and eax, 0x28; jne 0x1539ec; add rsp, 0x78; ret; 
0x00000000000c6911: push 0xf; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000001025c0: push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000010c7c8: push 1; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd8: push 2; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000013633b: push 2; call 0x1358b0; add rsp, 0x18; ret; 
0x0000000000136c78: push 2; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf8: push 3; call 0x10cfc0; add rsp, 0x18; ret; 
0x00000000000b7a12: push 5; add byte ptr [rax], al; ret; 
0x0000000000140b98: push 7; add al, ch; add byte ptr [rbx - 0x10], dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000140bbd: push 7; add al, ch; fist dword ptr [rdx - 0x10]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000140b44: push 7; add al, ch; push rsp; push rbx; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000140b6e: push 7; add al, ch; sub dl, byte ptr [rbx - 0x10]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000041e5d: push fs; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000005ea31: push qword ptr [r9]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x00000000000831ae: push qword ptr [rax + rax*2 + 0x48]; add esp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000ff61e: push qword ptr [rax + rbx*8 + 0x48]; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000b661f: push qword ptr [rax]; leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000011739d: push qword ptr [rbp + 0x10]; mov eax, 1; ret; 
0x00000000001925a8: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x0000000000184dc9: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x000000000010c76d: push qword ptr [rbp + 5]; mov word ptr [rdi], si; xor eax, eax; ret; 
0x0000000000197b76: push qword ptr [rbp + rax - 0x18]; ret 0xfff7; 
0x0000000000197a76: push qword ptr [rbp + rax - 0x18]; ret 0xfff8; 
0x0000000000197976: push qword ptr [rbp + rax - 0x18]; ret 0xfff9; 
0x0000000000197876: push qword ptr [rbp + rax - 0x18]; ret 0xfffa; 
0x00000000000874e1: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000062f10: push qword ptr [rbp + rcx + 0x44]; mov eax, eax; ret; 
0x00000000000b1e63: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x000000000015796d: push qword ptr [rbp + rcx - 0x18]; mov ebx, 0x48ffeca9; mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000000b1df3: push qword ptr [rbp + rdi*2 + 0x48]; sar edx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x0000000000056526: push qword ptr [rbp - 0x11]; mov rax, rdx; ret; 
0x0000000000137b52: push qword ptr [rbp - 0x15]; pop rbx; ret; 
0x0000000000141153: push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012b915: push qword ptr [rbp - 0x1a]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000929e0: push qword ptr [rbp - 0x40]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000433e0: push qword ptr [rbx + 1]; ret; 
0x0000000000054f06: push qword ptr [rbx + 3]; xor eax, eax; ret; 
0x0000000000087d1d: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d79: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000088e66: push qword ptr [rbx + rcx - 0x18]; ret 0xf994; 
0x00000000001536aa: push qword ptr [rbx + rdi*2 - 0x7d]; ret 0x3901; 
0x00000000000d2f6c: push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x00000000000c0eed: push qword ptr [rcx]; fisttp dword ptr [rcx - 0x77]; ret 0x48e9; 
0x000000000005164f: push qword ptr [rcx]; fisttp dword ptr [rcx - 0x77]; ret 0xcde9; 
0x00000000000c6217: push qword ptr [rcx]; fisttp dword ptr [rcx - 0x77]; ret 0xcfe9; 
0x00000000001120ca: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000012b96d: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000008e463: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005ea32: push qword ptr [rcx]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000011f0a8: push qword ptr [rdi + 0x15]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x00000000000e2e67: push qword ptr [rdi + 0x28]; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f7d4: push qword ptr [rdi + 0x31]; mov r8d, eax; mov eax, r8d; ret; 
0x00000000000e2e4c: push qword ptr [rdi + 0x31]; ret; 
0x0000000000062f08: push qword ptr [rdi + 0x3d]; mov r8d, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x000000000010e81c: push qword ptr [rdi + 0x41]; ret; 
0x0000000000043461: push qword ptr [rdi + 0x4c]; ret; 
0x0000000000113b66: push qword ptr [rdi + 0x4f]; ret; 
0x000000000004822c: push qword ptr [rdi + 0x51]; ret; 
0x000000000010dfd7: push qword ptr [rdi + 0x56]; ret; 
0x00000000000e2c3f: push qword ptr [rdi + 0x5e]; ret; 
0x00000000001188eb: push qword ptr [rdi + 0x62]; pop rbx; pop rbp; ret; 
0x0000000000114532: push qword ptr [rdi + 0x63]; ret; 
0x0000000000120b9f: push qword ptr [rdi + 0x66]; ret; 
0x0000000000120315: push qword ptr [rdi + 0x68]; ret; 
0x00000000000e2cf2: push qword ptr [rdi + 0x6b]; ret; 
0x0000000000114f7f: push qword ptr [rdi + 0x6e]; ret; 
0x000000000011f245: push qword ptr [rdi + 0x70]; ret; 
0x0000000000112fef: push qword ptr [rdi + 0x76]; ret; 
0x0000000000062ec3: push qword ptr [rdi + 0xa]; ret; 
0x000000000012e7b2: push qword ptr [rdi + 0xb]; ret; 
0x00000000001141b0: push qword ptr [rdi + 0xd]; mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x000000000011532c: push qword ptr [rdi + 1]; ret; 
0x00000000000dd12a: push qword ptr [rdi + 3]; ret; 
0x0000000000113d79: push qword ptr [rdi + 4]; ret; 
0x0000000000062e90: push qword ptr [rdi + 5]; ret; 
0x000000000010d4bf: push qword ptr [rdi + 6]; ret; 
0x000000000010d51e: push qword ptr [rdi + 7]; ret; 
0x0000000000043415: push qword ptr [rdi + 8]; ret; 
0x000000000010d9c4: push qword ptr [rdi + 9]; ret; 
0x0000000000082ac6: push qword ptr [rdi + rcx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011917e: push qword ptr [rdi + rcx + 0x5d]; lea rax, [rip + 0xd6777]; pop r12; pop r13; ret; 
0x00000000000dd07c: push qword ptr [rdi - 0x38]; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d3b7: push qword ptr [rdi - 0x40]; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000115a8b: push qword ptr [rdx + rdi - 0x18]; pop r15; idiv edi; mov eax, 1; add rsp, 8; ret; 
0x0000000000112d2a: push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x112d38; neg eax; ret; 
0x0000000000112f7a: push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x112f88; neg eax; ret; 
0x000000000011870b: push qword ptr [rsi + rax - 0x77]; cmp eax, 0xd3c34; ret; 
0x0000000000121faf: push qword ptr [rsi + rbp - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x000000000002fdce: push qword ptr [rsi + rbx*8 - 0x18]; cmp bh, bh; adc al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000047367: push qword ptr [rsi + rdi + 0x31]; rol byte ptr [rax + 0x775003f], 0x5b; ret; 
0x0000000000047547: push qword ptr [rsi + rdx + 0x48]; lea edx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x0000000000091e40: push qword ptr [rsp + rax - 0x58]; add dword ptr [rcx + rbp - 0x77], esi; ret 0xff3; 
0x0000000000107a61: push qword ptr [rsp + rbx*8 - 0x77]; ret 0xc085; 
0x000000000010cfe4: push r10; call 0x10c7e0; add rsp, 0x18; ret; 
0x0000000000055040: push r10; ret; 
0x000000000010263a: push r9; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025fa: push r9; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000097dda: push rax; adc byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000001506d6: push rax; adc byte ptr [rbx + 0x78ff853b], cl; ret 0x1de8; 
0x0000000000093599: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000147086: push rax; adc dh, dh; ret 0x7401; 
0x00000000000a8abd: push rax; add al, 0xf; mov dh, 0x54; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x0000000000087cc4: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000094e75: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000639ca: push rax; add dword ptr [rax - 0x77], ecx; adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000008df50: push rax; add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000bce2e: push rax; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000010201c: push rax; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x8b4d; 
0x000000000013c5d7: push rax; add dword ptr [rcx + rcx*4 - 0x40], ecx; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000863fe: push rax; add dword ptr [rcx - 0x77], ecx; push rax; sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000007457c: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000001513f3: push rax; call 0x151110; add rsp, 0x28; ret; 
0x0000000000157558: push rax; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000007e828: push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000012a2ac: push rax; fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000011f5df: push rax; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000014829f: push rax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000000d422c: push rax; mov eax, 0xfa89051e; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x00000000001513ee: push rax; mov eax, dword ptr [rsp + 0x28]; push rax; call 0x151110; add rsp, 0x28; ret; 
0x0000000000150713: push rax; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001131c5: push rax; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000010c6ea: push rax; movdqu xmm6, xmmword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000086ea0: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000008570f: push rax; or byte ptr [rbx + 0xd], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000085585: push rax; or byte ptr [rbx + 0xf], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x00000000000edb91: push rax; or byte ptr [rdi], cl; xchg esp, eax; ret 0x8040; 
0x00000000000992ba: push rax; or dh, dh; ret 0xf02; 
0x000000000017e30c: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004cec4: push rax; or eax, 0x89410000; ret 0xd231; 
0x000000000014e8a1: push rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000010cfe3: push rax; push r10; call 0x10c7e0; add rsp, 0x18; ret; 
0x0000000000061489: push rax; ret 0xb60f; 
0x000000000011618c: push rax; ret 0xfff0; 
0x0000000000042017: push rax; ret; 
0x000000000012a7ac: push rax; sar edi, cl; dec dword ptr [rcx]; ret; 
0x000000000014fec4: push rax; sbb al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x000000000009358a: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000128b19: push rax; sbb dh, dh; ret 0x7508; 
0x000000000012ceb9: push rax; shr ax, 0xe; and eax, 1; ret; 
0x0000000000086402: push rax; sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x00000000001131c9: push rax; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001413eb: push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000089fa9: push rbp; adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xff3; 
0x0000000000105ebb: push rbp; add al, 0xf7; ret 0xfffd; 
0x00000000000ee1b4: push rbp; add al, 1; ret 0x341; 
0x00000000000499da: push rbp; add bh, dh; ret 0; 
0x0000000000049d2e: push rbp; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000a4ef1: push rbp; add byte ptr [rbp - 0x77], cl; adc eax, dword ptr [rbp - 0x77]; ret 0x8b4b; 
0x00000000000ff2bb: push rbp; add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x0000000000089daf: push rbp; add dh, dh; ret 0x7402; 
0x0000000000196c5d: push rbp; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000000984a0: push rbp; and byte ptr [rax + 0x39], cl; ret 0x860f; 
0x000000000010da17: push rbp; in al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4417: push rbp; jp 0xe442a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000120017: push rbp; mov esi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000198cfb: push rbp; mov rbp, rsp; call 0x15fd10; pop rbp; mov qword ptr [rip + 0x57160], 0; ret; 
0x00000000000423d7: push rbp; movabs dword ptr [0x17a35e05560f0017], eax; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x0000000000182d98: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000101b8a: push rbp; or byte ptr [rax - 0x75], 4; ret 0x8948; 
0x000000000008b640: push rbp; or byte ptr [rdi + rcx - 0x4a], al; add byte ptr [rbx + 0x5d], bl; mov eax, r8d; pop r12; ret; 
0x00000000000a5e7c: push rbp; ret 0xda89; 
0x000000000011fd17: push rbp; ror dword ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec99a: push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000149b2c: push rbp; sub byte ptr [rax + 1], cl; ret 0x5d89; 
0x0000000000162d17: push rbp; xchg ecx, eax; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000929dc: push rbp; xor byte ptr [rbx - 0x3f8a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000118b17: push rbp; xor ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000088e21: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000013f0c1: push rbx; adc byte ptr [rbp + rcx*4 + 4], cl; ret 0x8348; 
0x000000000010c3d4: push rbx; add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000010c4fc: push rbx; add al, 0x5b; pop rbp; pop r12; ret; 
0x000000000010c5dd: push rbx; add al, 0xeb; ret; 
0x00000000000a5dc1: push rbx; add al, byte ptr [rax]; add bh, dh; ret; 
0x000000000011cc62: push rbx; add dword ptr [rax - 0x73], ecx; add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x0000000000031765: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001215fc: push rbx; add dword ptr [rcx + 0x39], ecx; ret 0x4f73; 
0x00000000000eb5ad: push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x000000000019888e: push rbx; add eax, 0x1f6ae800; clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x553de], 0; ret; 
0x00000000001029a2: push rbx; add rsp, 0x38; ret; 
0x00000000000a5dd9: push rbx; and al, 0; add bh, dh; ret; 
0x000000000008c0fe: push rbx; and byte ptr [rax + 0x29], cl; ret 0x6348; 
0x0000000000121d01: push rbx; fisttp qword ptr [rax + rax]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000011f2a6: push rbx; idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x00000000000a387d: push rbx; inc dword ptr [rbp + rcx*4 + 0x60]; add dword ptr [rcx - 0x7d], eax; ret 0x4801; 
0x00000000001904d9: push rbx; jb 0x1904e1; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000874ff: push rbx; je 0x8755d; pop rbp; pop r12; ret; 
0x00000000000cf5fc: push rbx; lea rax, [rdi - 0x10]; ret; 
0x0000000000140b49: push rbx; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000b1469: push rbx; movabs al, byte ptr [0x82048b8a0c8b000e]; sub eax, ecx; ret; 
0x00000000000b8073: push rbx; movq qword ptr [rdi + 0x20], mm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98d2: push rbx; movq qword ptr [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8082: push rbx; movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000bb332: push rbx; movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000613a2: push rbx; or al, 0xf6; ret 0x7401; 
0x000000000005f3aa: push rbx; or al, 0xf6; ret 0xf01; 
0x0000000000081162: push rbx; or al, 0xf6; ret 0xf04; 
0x00000000000615bc: push rbx; or al, 0xf6; ret 0xf40; 
0x000000000008d23a: push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000119fda: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000116abc: push rbx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000138526: push rbx; or eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000000e4f48: push rbx; pop rax; jne 0xe4f50; ret; 
0x00000000000e509f: push rbx; pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000639bc: push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x000000000012c529: push rbx; sbb byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e51ab: push rbx; setne al; ret; 
0x000000000013d66c: push rbx; sub dword ptr [rip + 0xb2ea4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008147e: push rbx; xor al, 0xe9; ret 0xfffc; 
0x000000000005b95a: push rbx; xor byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000122055: push rcx; adc byte ptr [rdx + 8], dh; seta al; movzx eax, al; neg eax; ret; 
0x00000000000db2f3: push rcx; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000e50e3: push rcx; add byte ptr [rax], al; jne 0xe50f0; mov eax, 0x40; ret; 
0x000000000013c4e2: push rcx; add dword ptr [rbp - 0x76fdefbc], ecx; ret 0xc639; 
0x00000000000bc458: push rcx; add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x000000000016095d: push rcx; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000047868: push rcx; add rsp, 0x18; ret; 
0x000000000005b05b: push rcx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a050b: push rcx; dec dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0xefeda; cmove rax, rdx; ret; 
0x000000000010e11b: push rcx; fisttp qword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f47f: push rcx; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001201eb: push rcx; idiv edi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011f530: push rcx; idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000018fcb3: push rcx; jl 0x18fcfe; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcba: push rcx; jl 0x18fd05; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcc1: push rcx; jl 0x18fd0c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000018fe1a: push rcx; jl 0x18fe65; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe21: push rcx; jl 0x18fe6c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe28: push rcx; jl 0x18fe73; adc dword ptr [rcx + 7], edi; ret; 
0x000000000009f743: push rcx; jo 0x9f73d; ret 0; 
0x000000000011361b: push rcx; mov byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cfe4d: push rcx; mov eax, 0x148051e; ret 0xb848; 
0x000000000010263b: push rcx; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x000000000009811d: push rcx; or byte ptr [rax + 0x39], cl; ret; 
0x0000000000116ca4: push rcx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116d4b: push rcx; or eax, 0xf0e78300; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000004822e: push rcx; ret; 
0x0000000000096355: push rcx; sbb byte ptr [rcx + 1], cl; ret; 
0x00000000001025fb: push rcx; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000bb162: push rdi; adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b9502: push rdi; adc al, 0x48; lea eax, [rdi + 0x15]; ret; 
0x00000000000bb2e3: push rdi; adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb1e1: push rdi; adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb2c0: push rdi; adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb241: push rdi; adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb221: push rdi; adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000001028ad: push rdi; adc byte ptr [rdx + 8], dh; setne al; movzx eax, al; neg eax; ret; 
0x00000000000bb202: push rdi; adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000baf98: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafaa: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b84fa: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000000b934a: push rdi; add al, 0x48; lea eax, [rdi + 6]; ret; 
0x000000000016da29: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000000b776a: push rdi; add al, 0x49; sub eax, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000a8a00: push rdi; add al, 0xf; mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000baf6a: push rdi; add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000570af: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000001901c6: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x190214; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000b85ac: push rdi; add eax, 0xc478d48; ret; 
0x00000000000b8f3c: push rdi; add eax, 0xc478d48; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b940c: push rdi; add eax, 0xd478d48; ret; 
0x00000000000b784c: push rdi; add eax, 0xde88349; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x000000000002d83d: push rdi; add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x00000000000bafc8: push rdi; add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000188a88: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184738: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000009e2f8: push rdi; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000098bac: push rdi; and byte ptr [rax + 0x39], cl; ret 0x4273; 
0x00000000001677b2: push rdi; call 0xfffffffff0760104; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001677f0: push rdi; call 0xfffffffff0760142; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167828: push rdi; call 0xfffffffff076017a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167866: push rdi; call 0xfffffffff07601b8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016789e: push rdi; call 0xfffffffff07601f0; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678c6: push rdi; call 0xfffffffff0760218; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678ee: push rdi; call 0xfffffffff0760240; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a192: push rdi; call 0xfffffffff0762ae4; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a1d0: push rdi; call 0xfffffffff0762b22; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a208: push rdi; call 0xfffffffff0762b5a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a246: push rdi; call 0xfffffffff0762b98; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a27e: push rdi; call 0xfffffffff0762bd0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a2a6: push rdi; call 0xfffffffff0762bf8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a2ce: push rdi; call 0xfffffffff0762c20; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001677f8: push rdi; clc; ret; 
0x0000000000167970: push rdi; cld; ret; 
0x0000000000168497: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d309: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b7af0: push rdi; cmovns eax, dword ptr [rbx - 0x72b7e018]; jg 0xb7b19; jne 0xb7f80; ret; 
0x0000000000089ed3: push rdi; cmp byte ptr [rax - 0x75], cl; xor byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x00000000000f75bb: push rdi; cmp dh, dh; ret 0xf08; 
0x0000000000114649: push rdi; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000015a340: push rdi; dec dword ptr [rax - 0x7d]; ret 0x4802; 
0x000000000018e56e: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e36e: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016d289: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f05: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d15: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d0da: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001684d6: push rdi; loope 0x168525; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016851e: push rdi; loope 0x16856d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016855c: push rdi; loope 0x1685ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168594: push rdi; loope 0x1685e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001685d2: push rdi; loope 0x168621; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016860a: push rdi; loope 0x168659; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168632: push rdi; loope 0x168681; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aeb6: push rdi; loope 0x16af05; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016aefe: push rdi; loope 0x16af4d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016af3c: push rdi; loope 0x16af8b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016af74: push rdi; loope 0x16afc3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016afb2: push rdi; loope 0x16b001; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016afea: push rdi; loope 0x16b039; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b012: push rdi; loope 0x16b061; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018e638: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e4b8: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e5b8: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e538: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000918c4: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000016d16a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000005be35: push rdi; or al, 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000013b40f: push rdi; or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x000000000007f1ca: push rdi; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x0000000000136d11: push rdi; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bb00c: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb04a: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafea: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x000000000008f55d: push rdi; or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000057ada: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000055baa: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000055bb1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000008df54: push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x000000000014158a: push rdi; or dh, dh; ret 0x7401; 
0x00000000000b8790: push rdi; or eax, 0x1c478d48; ret; 
0x00000000000b9220: push rdi; or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b9600: push rdi; or eax, 0x1d478d48; ret; 
0x00000000000b7a90: push rdi; or eax, 0x1de88349; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x0000000000167b35: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167965: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167a61: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001679ad: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000018e9ae: push rdi; ret 0xff3; 
0x00000000000e30fb: push rdi; ret; 
0x00000000000918f5: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000015761e: push rdi; sbb byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000168697: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167eba: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x0000000000168297: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000157915: push rdi; sub byte ptr [rax + 1], bh; ret; 
0x00000000001576eb: push rdi; sub byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; ret; 
0x0000000000074580: push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000bb2a0: push rdi; wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b19fb: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ac158: push rdi; xor eax, eax; ret; 
0x000000000013c443: push rdx; add dword ptr [rbp - 0x76fdefbc], ecx; ret 0x8041; 
0x00000000001215d2: push rdx; add dword ptr [rcx - 0x77], ecx; ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x000000000013c45b: push rdx; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x00000000000de126: push rdx; add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000df410: push rdx; add rsp, 0x38; ret; 
0x000000000010cfe5: push rdx; call 0x10c7e0; add rsp, 0x18; ret; 
0x00000000000ed98a: push rdx; dec dword ptr [rcx + 0x29]; ret 0x8349; 
0x00000000001032d6: push rdx; fmul dword ptr [rax - 0x7d]; ret 0x4c28; 
0x000000000015d292: push rdx; in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x0000000000140bc2: push rdx; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000e5115: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000034225: push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000009e926: push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000341f5: push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055041: push rdx; ret; 
0x000000000010c865: push rdx; sbb byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; ret 0x8207; 
0x000000000009679e: push rdx; sbb byte ptr [rax - 9], cl; fimul dword ptr [rax + 0x21]; ret 0x8949; 
0x00000000000b7ca8: push rsi; adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b87e7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b9657: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7117: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b7076: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7086; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7d66: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7d76; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000ba386: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xba396; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bae76: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xbae86; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7096: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xb70a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7d86: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xb7d96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000ba3a6: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xba3b6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bae96: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xbaea6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7d26: push rsi; adc byte ptr [rdx + 0xff3184e], cl; jg 0xb7d36; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7e27: push rsi; adc byte ptr [rdx + 0xff3204e], cl; jg 0xb7e37; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9677: push rsi; adc byte ptr [rdx + 0xff3204e], cl; jg 0xb9687; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000018d5f4: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000019030d: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x19035b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000000baf64: push rsi; add ah, byte ptr [rsi - 0x77]; js 0xffffffffed3bb1c5; mov byte ptr [rdi + 3], ch; ret; 
0x000000000016da22: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000baf93: push rsi; add al, 0x89; js 0xffffffffed3bb3f3; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafa4: push rsi; add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x000000000016dcc1: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000110834: push rsi; add dword ptr [rax + 0x39], ecx; ret 0xe72; 
0x0000000000115f8b: push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000016dd31: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000057757: push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000190306: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x190354; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000042401: push rsi; add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423dc: push rsi; add eax, 0x17a35e; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x000000000016d9b2: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9405: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f25: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000bb065: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000001903a3: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000013486f: push rsi; add eax, 0x5bf08948; ret; 
0x000000000016dc51: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b8513: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000000b9363: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000b7783: push rsi; add ecx, dword ptr [rcx + 0x357890f]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000ee581: push rsi; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000018d609: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000189533: push rsi; and ch, al; std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x0000000000167906: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016825a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016845a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016865a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001678ea: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168276: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168476: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168676: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167922: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168091: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ac9: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ca9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167e89: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168069: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167cc5: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ea5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168085: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ae5: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000019019e: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000168491: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d302: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001920e6: push rsi; cmc; sub eax, edx; ret; 
0x00000000000fbe4d: push rsi; cmovs ebp, dword ptr [rcx]; ret 0x8348; 
0x00000000000844f6: push rsi; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000018e19e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e26e: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000132455: push rsi; fmul qword ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000016d282: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001920d6: push rsi; hlt; sub eax, edx; ret; 
0x000000000016d0d2: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001920a6: push rsi; int1; sub eax, edx; ret; 
0x000000000010d251: push rsi; jb 0x10d1d6; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x000000000012bd96: push rsi; je 0x12bda0; mov eax, 7; ret; 
0x0000000000157e06: push rsi; mov dh, 0xff; dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000146cf6: push rsi; mov eax, 0x8948ffed; ret; 
0x000000000018e168: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018e238: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016d1f2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d162: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000012d01e: push rsi; or al, 0; pop rbp; ret; 
0x000000000007ad8b: push rsi; or al, 0xf6; ret 0xf08; 
0x00000000000bb044: push rsi; or byte ptr [rax - 0x77], cl; jns 0xffffffffed3bb8a5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafe4: push rsi; or byte ptr [rax - 0x77], cl; js 0xffffffffed3bb845; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000bb005: push rsi; or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000983dd: push rsi; or byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000042088: push rsi; or eax, 0x17a672; mulsd xmm0, xmm1; ret; 
0x0000000000042062: push rsi; or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x00000000000b8787: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000bb257: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b70f7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7de7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b87c7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb87d4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b9637: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb9644; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000ba407: push rsi; psllq mm1, qword ptr [rdi]; jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000baef7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000007c4aa: push rsi; ret 0xf10; 
0x0000000000036186: push rsi; ret; 
0x0000000000168691: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167eb2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001901a5: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000168291: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001920b6: push rsi; sub eax, edx; ret; 
0x000000000016d402: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000001127eb: push rsi; xor ax, ax; ret; 
0x000000000018d61e: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000113b25: push rsp; add byte ptr [rax], al; call 0x1143a0; add rsp, 0x18; ret; 
0x0000000000041235: push rsp; add byte ptr [rsi*2 + 0x5c8b45e6], 0x80; or byte ptr [rbx + rax + 0x5f], cl; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x00000000001557bb: push rsp; add dword ptr [r8 - 0x77], r9d; ret 0x4c88; 
0x00000000000423fa: push rsp; add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d5: push rsp; add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000041ef6: push rsp; add eax, 0x17a7f4; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x000000000013cc9c: push rsp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a8a4a: push rsp; and al, 0x10; mov qword ptr [rax], rdx; ret; 
0x000000000012290e: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000012296f: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000a89fb: push rsp; and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8a04: push rsp; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8972: push rsp; and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x0000000000108cfd: push rsp; and al, 0x38; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000113b20: push rsp; and al, 0xc; mov esi, 0x5410; call 0x1143a0; add rsp, 0x18; ret; 
0x00000000000a8ab8: push rsp; and al, 0xc; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a89e3: push rsp; and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a8aa1: push rsp; and al, 0xe8; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8ac1: push rsp; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8aa8: push rsp; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8a89: push rsp; and al, 0xf0; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x000000000005b11e: push rsp; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000a8a90: push rsp; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a89cb: push rsp; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a8a6a: push rsp; and al, 0xf8; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8a72: push rsp; and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a89ad: push rsp; and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x000000000013c888: push rsp; and al, 8; jne 0x13c8a4; add rsp, 0x20; pop rbp; ret; 
0x000000000014ff63: push rsp; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000183db7: push rsp; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000162148: push rsp; cmp eax, 0x8948ffee; ret; 
0x0000000000121cf8: push rsp; fisttp qword ptr [rax + rax]; jae 0x121d0a; mov rdx, qword ptr [rip + 0xcdd53]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000ac69b: push rsp; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000014ff80: push rsp; mov eax, 1; ret; 
0x00000000000e4fd3: push rsp; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000a09b2: push rsp; or al, 0; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x0000000000042078: push rsp; or eax, 0x17a662; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042052: push rsp; or eax, 0x17a688; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041efe: push rsp; or eax, 0x17a7dc; orpd xmm0, xmm1; ret; 
0x0000000000140b48: push rsp; push rbx; lock dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000e51a9: push rsp; push rbx; setne al; ret; 
0x00000000001229a8: push rsp; ret 0x8940; 
0x00000000001125a8: push rsp; ret 0xffff; 
0x00000000000422bd: push rsp; ret; 
0x00000000000e4f93: push rsp; sbb dword ptr [rcx], eax; add byte ptr [rdx + 0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000180230: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x000000000015f528: pushfq; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x8b04; 
0x0000000000047f80: pushfq; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1a937b; add rsp, 8; ret; 
0x000000000002c138: pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x0000000000102374: pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x63482c53], cl; ret 0x2de9; 
0x0000000000181820: pushfq; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001817ec: pushfq; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000009f700: pushfq; add dword ptr [rax], r8d; cmovne rax, rdx; ret; 
0x000000000005131e: pushfq; and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8949; 
0x00000000001383aa: pushfq; and al, 0xa8; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000107d9e: pushfq; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000015a290: pushfq; and dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; fild dword ptr [rcx - 0x77]; ret 0xf883; 
0x0000000000198662: pushfq; call 0x7da4cf67; adc al, ch; ret 0xe89c; 
0x000000000012da10: pushfq; fadd qword ptr [rip + 0x158d4800]; and eax, 0x480005dc; cmove eax, edx; ret; 
0x00000000000a0620: pushfq; mov al, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xeb025; cmove rax, rdx; ret; 
0x00000000000c6b43: pushfq; mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x00000000000a07a0: pushfq; movsb byte ptr [rdi], byte ptr [rsi]; or eax, 0x450f4800; ret 0xfc3; 
0x00000000000479ec: pushfq; nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000180f30: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001176f0: pushfq; or byte ptr [rip - 0x3b7cb800], 8; ret; 
0x000000000017eee4: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x00000000000d221f: pushfq; ret 0x394c; 
0x00000000000f7995: pushfq; ret 0x5c3b; 
0x000000000018bd8d: pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x000000000004221f: pushfq; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000079d70: pushfq; test edx, edi; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000100461: pxor mm0, mm0; and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000093666: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000116d91: pxor mm0, mm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042510: pxor mm4, mm4; ucomiss xmm0, xmm4; jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000100460: pxor xmm0, xmm0; and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000093665: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000116d90: pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000004250f: pxor xmm4, xmm4; ucomiss xmm0, xmm4; jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x00000000000d6880: rcl byte ptr [rax + 0x45000001], 0x29; shr dword ptr [rcx], cl; ret 0x8945; 
0x0000000000183886: rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x000000000009f69c: rcl byte ptr [rcx - 0x72b7fff2]; add eax, 0x126b9; cmove rax, rdx; ret; 
0x0000000000023a4d: rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x000000000013058d: rcl byte ptr [rcx], 0xeb; ret 0x8b48; 
0x0000000000022674: rcl dword ptr [rbx], cl; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000974d8: rcl dword ptr [rip + 0x154dca], 0x83; ret 0x8b01; 
0x000000000007b788: rcl dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000023a52: rcr al, cl; sbb al, 0; ret; 
0x0000000000041c8f: rcr bl, 0x3f; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x00000000001054a6: rcr byte ptr [rax + rax], 0x31; ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg esp, eax; ret 0x1589; 
0x0000000000143628: rcr byte ptr [rax + rcx*2], 0x89; ret 0x2548; 
0x000000000009a502: rcr byte ptr [rbp + 0x41], 0x5c; mov rax, r8; pop r13; ret; 
0x0000000000026018: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000013b732: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x000000000002f707: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000008f562: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000a1f6f: rcr byte ptr [rbp + 0x4d], 0x89; xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x0000000000055bb7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000134b48: rcr byte ptr [rbp - 0x3a], 2; add byte ptr [rcx + 0x5c], al; pop r13; ret; 
0x000000000009cf80: rcr byte ptr [rbx + 0x41], 0x5c; ret; 
0x000000000013b72e: rcr byte ptr [rbx + 0x4c], 0x89; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x0000000000084e28: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000046601: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000046d32: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000099c92: rcr byte ptr [rbx + 0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x0000000000149d6a: rcr byte ptr [rbx + 0x5d], 0xf; mov dh, 0xc0; pop r12; ret; 
0x0000000000149329: rcr byte ptr [rbx + 0x5d], 1; mov eax, r8d; ret; 
0x000000000008dfdf: rcr byte ptr [rbx - 9], 0xd8; ret; 
0x000000000018a32e: rcr byte ptr [rdi + 0x49], 0x29; ror byte ptr [rax - 0x73], 1; jl 0x18a34e; and ecx, ebp; ret; 
0x00000000000328a7: rcr byte ptr [rdx], cl; sbb byte ptr [rax], al; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000972a9: rcr dword ptr [rax + 0x15], cl; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000115e0c: rcr dword ptr [rbx + 0x31], cl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001817eb: rcr dword ptr [rcx + rax - 0x6eeb7500], 1; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000055be9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x0000000000180bec: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000186099: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x00000000001858b9: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000185ca9: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001854c9: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018174c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180f2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000018070c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000185668: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018126c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180a4c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018022c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000018140c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000185b59: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185379: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000186489: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018056c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001806a2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001813a2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180ec2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185a5a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018638a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001816e2: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001809e2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000180502: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181202: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000185baa: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001853ca: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011f8cb: rdpkru; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x0000000000055031: rdsspq rax; cmp r10, qword ptr [rax]; mov eax, 0; jne 0x55043; push r10; ret; 
0x000000000005553a: rdsspq rax; cmp r10, qword ptr [rax]; mov eax, 0; jne 0x5554c; push r10; ret; 
0x000000000005b4ba: rdsspq rdi; rstorssp dword ptr [r8 - 8]; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000001463d8: rdtsc; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000bbb6d: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000bbb5f: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f248: rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000bbf67: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000013c5d2: rep stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d4: rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aee: rep stosq qword ptr [rdi], rax; ret; 
0x0000000000023b96: ret 0; 
0x000000000013b87d: ret 0x1072; 
0x000000000008113f: ret 0x107; 
0x00000000000b883e: ret 0x10; 
0x00000000000982aa: ret 0x110; 
0x0000000000045c2b: ret 0x110f; 
0x00000000000a3aaf: ret 0x111d; 
0x00000000000bcd5a: ret 0x112; 
0x0000000000055b8c: ret 0x114d; 
0x00000000000fb74a: ret 0x1172; 
0x0000000000081eaf: ret 0x1175; 
0x00000000000b7171: ret 0x11; 
0x00000000000d3902: ret 0x11b8; 
0x000000000002a874: ret 0x11e9; 
0x00000000000d031a: ret 0x1211; 
0x000000000007795a: ret 0x12; 
0x00000000000c19aa: ret 0x12a4; 
0x00000000000be5aa: ret 0x12d8; 
0x00000000000628d2: ret 0x12eb; 
0x000000000007d17a: ret 0x1314; 
0x0000000000078dfa: ret 0x1354; 
0x00000000001175d4: ret 0x1374; 
0x000000000009003c: ret 0x1389; 
0x00000000000b255a: ret 0x13; 
0x0000000000048caa: ret 0x13eb; 
0x00000000000d86e3: ret 0x144; 
0x0000000000196ba1: ret 0x145; 
0x00000000000f8c95: ret 0x1474; 
0x00000000000ac6d9: ret 0x147c; 
0x0000000000092a06: ret 0x148; 
0x00000000000b43ed: ret 0x149; 
0x00000000000639c0: ret 0x14c; 
0x00000000000eec3f: ret 0x14d; 
0x00000000000a229b: ret 0x14eb; 
0x0000000000042b0a: ret 0x153f; 
0x00000000000bdaa8: ret 0x1572; 
0x0000000000040930: ret 0x1574; 
0x000000000008d4be: ret 0x1576; 
0x00000000001054b2: ret 0x1589; 
0x00000000000954d2: ret 0x1599; 
0x0000000000058315: ret 0x15; 
0x0000000000091e58: ret 0x160f; 
0x00000000000a3277: ret 0x1674; 
0x0000000000080442: ret 0x1691; 
0x000000000004c2da: ret 0x16c3; 
0x000000000005f1b6: ret 0x1773; 
0x00000000000ed926: ret 0x1776; 
0x0000000000062aba: ret 0x177d; 
0x000000000004231b: ret 0x1789; 
0x0000000000075057: ret 0x17; 
0x0000000000045e21: ret 0x17e9; 
0x00000000000d841f: ret 0x17e; 
0x000000000018ffc0: ret 0x180f; 
0x0000000000102195: ret 0x1874; 
0x00000000000ac1c5: ret 0x1876; 
0x000000000002ed9a: ret 0x188f; 
0x000000000002a10d: ret 0x189f; 
0x000000000005d3c6: ret 0x18; 
0x000000000002a0ca: ret 0x18e2; 
0x000000000019354d: ret 0x18e9; 
0x0000000000057eda: ret 0x1912; 
0x00000000000c0b21: ret 0x194c; 
0x000000000005223c: ret 0x19; 
0x00000000000e4d84: ret 0x19e9; 
0x000000000005c67c: ret 0x1b8; 
0x0000000000035276: ret 0x1b; 
0x0000000000098bd1: ret 0x1ba; 
0x00000000000f6c23: ret 0x1c3b; 
0x000000000009c252: ret 0x1c74; 
0x00000000000c4b7d: ret 0x1d74; 
0x00000000000c627b: ret 0x1d7e; 
0x000000000003e254: ret 0x1d; 
0x00000000000d47c2: ret 0x1dba; 
0x00000000001506dd: ret 0x1de8; 
0x00000000000a27f5: ret 0x1deb; 
0x0000000000118fe1: ret 0x1e1; 
0x000000000002d4d3: ret 0x1e74; 
0x000000000002c1c2: ret 0x1f0f; 
0x000000000004b1b6: ret 0x1f74; 
0x000000000004f8ce: ret 0x1f; 
0x0000000000065ff6: ret 0x1fe9; 
0x0000000000033c8b: ret 0x200; 
0x0000000000051106: ret 0x2040; 
0x0000000000193333: ret 0x2041; 
0x000000000010ecc4: ret 0x2044; 
0x00000000000efc13: ret 0x2073; 
0x0000000000053bcf: ret 0x2074; 
0x0000000000047043: ret 0x2077; 
0x0000000000189517: ret 0x20; 
0x00000000000569aa: ret 0x20e8; 
0x000000000013da0e: ret 0x2144; 
0x00000000001537be: ret 0x2149; 
0x000000000008fbc7: ret 0x214c; 
0x0000000000189fda: ret 0x21; 
0x00000000001486a9: ret 0x21e8; 
0x00000000000b9a0b: ret 0x2275; 
0x00000000000b69f8: ret 0x2288; 
0x00000000000e4c24: ret 0x231b; 
0x000000000018eb12: ret 0x2373; 
0x000000000019864a: ret 0x239; 
0x00000000000269f4: ret 0x2548; 
0x00000000001421cc: ret 0x2672; 
0x000000000007a96a: ret 0x2675; 
0x000000000005b1e0: ret 0x2774; 
0x000000000006c6c3: ret 0x27; 
0x00000000000b26f5: ret 0x280f; 
0x00000000000ac1b5: ret 0x2876; 
0x00000000000cff25: ret 0x287f; 
0x00000000000cfbfc: ret 0x28f5; 
0x0000000000042a56: ret 0x290f; 
0x0000000000183afb: ret 0x2912; 
0x0000000000189107: ret 0x2920; 
0x000000000006eb9e: ret 0x2941; 
0x00000000000619d9: ret 0x2944; 
0x0000000000030ad8: ret 0x2948; 
0x0000000000075766: ret 0x2949; 
0x0000000000087a5a: ret 0x294c; 
0x00000000000da829: ret 0x294d; 
0x00000000000cf304: ret 0x2975; 
0x00000000000cd20b: ret 0x2a74; 
0x000000000010d95b: ret 0x2a75; 
0x00000000000ff3d0: ret 0x2ae8; 
0x00000000000262a1: ret 0x2b48; 
0x0000000000129f98: ret 0x2b49; 
0x00000000000a128d: ret 0x2b4c; 
0x000000000014faf2: ret 0x2b74; 
0x00000000000810b4: ret 0x2b7c; 
0x000000000005cba6: ret 0x2be; 
0x00000000000a849f: ret 0x2bf; 
0x000000000010d8f8: ret 0x2d75; 
0x000000000002c81a: ret 0x2de9; 
0x0000000000080f35: ret 0x2e66; 
0x0000000000108801: ret 0x2e74; 
0x0000000000130c7a: ret 0x2eb; 
0x00000000000dd28b: ret 0x2ee9; 
0x0000000000116558: ret 0x2eeb; 
0x000000000011750d: ret 0x2f3c; 
0x00000000000a31e6: ret 0x2f74; 
0x0000000000047c92: ret 0x3039; 
0x000000000010a5a3: ret 0x3074; 
0x0000000000108d85: ret 0x3101; 
0x000000000015b205: ret 0x3107; 
0x000000000005f227: ret 0x3145; 
0x000000000014a5cc: ret 0x3148; 
0x000000000014a5ab: ret 0x3149; 
0x000000000014a6c6: ret 0x314c; 
0x000000000014a4b4: ret 0x314d; 
0x00000000000ed90c: ret 0x3176; 
0x00000000000d4de2: ret 0x31; 
0x0000000000043de4: ret 0x31c3; 
0x0000000000158733: ret 0x3375; 
0x00000000000d6a6d: ret 0x341; 
0x00000000000f0517: ret 0x343; 
0x00000000000ac6b9: ret 0x347c; 
0x0000000000050275: ret 0x3489; 
0x000000000006820a: ret 0x348; 
0x000000000005fff8: ret 0x34e9; 
0x0000000000184756: ret 0x3776; 
0x000000000009c0b3: ret 0x37e9; 
0x00000000000a2820: ret 0x3840; 
0x000000000013c4b3: ret 0x3844; 
0x00000000000ac1a5: ret 0x3876; 
0x0000000000156921: ret 0x389; 
0x0000000000053028: ret 0x3901; 
0x00000000000f0b35: ret 0x3904; 
0x00000000000d47e8: ret 0x391c; 
0x0000000000140e95: ret 0x3928; 
0x00000000000f2575: ret 0x3941; 
0x000000000006ed6a: ret 0x3944; 
0x000000000006ea3b: ret 0x3945; 
0x000000000003754f: ret 0x3948; 
0x000000000003261e: ret 0x3949; 
0x00000000000415d1: ret 0x394c; 
0x000000000002f684: ret 0x3973; 
0x00000000001021d4: ret 0x3980; 
0x00000000000bb4d2: ret 0x3a01; 
0x000000000018eafb: ret 0x3a73; 
0x00000000001289ad: ret 0x3b01; 
0x00000000000f2677: ret 0x3b46; 
0x000000000006daf7: ret 0x3b48; 
0x00000000000e8e28: ret 0x3b4c; 
0x00000000000bc092: ret 0x3b77; 
0x00000000001400dc: ret 0x3be9; 
0x0000000000038378: ret 0x3c01; 
0x00000000000b99f1: ret 0x3c75; 
0x00000000000dd076: ret 0x3d48; 
0x0000000000054001: ret 0x3de9; 
0x00000000000d255a: ret 0x3ee9; 
0x0000000000038c66: ret 0x4001; 
0x00000000000bd038: ret 0x408d; 
0x00000000001434ee: ret 0x4100; 
0x00000000000320e9: ret 0x4101; 
0x00000000000c9b8e: ret 0x4102; 
0x000000000002e647: ret 0x4104; 
0x00000000000a4604: ret 0x4105; 
0x0000000000069098: ret 0x4108; 
0x00000000000a4191: ret 0x410e; 
0x0000000000097b7b: ret 0x4110; 
0x00000000000c5ec0: ret 0x4118; 
0x0000000000104b82: ret 0x4128; 
0x00000000000d90ec: ret 0x4130; 
0x00000000000c0c18: ret 0x4135; 
0x00000000000a290d: ret 0x415d; 
0x00000000000ee512: ret 0x4166; 
0x00000000000c806e: ret 0x4190; 
0x0000000000112afe: ret 0x41c3; 
0x00000000001488a7: ret 0x4203; 
0x00000000000aa59a: ret 0x4266; 
0x0000000000098bb0: ret 0x4273; 
0x00000000000f19e3: ret 0x428b; 
0x00000000000ee117: ret 0x428d; 
0x0000000000148688: ret 0x42e8; 
0x000000000014fb5a: ret 0x4374; 
0x0000000000086ef9: ret 0x4389; 
0x00000000000812f5: ret 0x43c7; 
0x00000000000a2e4b: ret 0x4401; 
0x000000000002d881: ret 0x4408; 
0x000000000004bbb3: ret 0x4418; 
0x00000000000786da: ret 0x4420; 
0x000000000004e943: ret 0x4435; 
0x000000000004fe91: ret 0x4489; 
0x0000000000036899: ret 0x448b; 
0x0000000000041ca9: ret 0x44c7; 
0x0000000000059939: ret 0x44f6; 
0x000000000004a092: ret 0x4501; 
0x000000000013c236: ret 0x4502; 
0x00000000000eeb4e: ret 0x4504; 
0x000000000004d801: ret 0x4566; 
0x0000000000090f7f: ret 0x458b; 
0x00000000000cf2e7: ret 0x4675; 
0x00000000000d2245: ret 0x4689; 
0x00000000000a705e: ret 0x470e; 
0x00000000000efbd3: ret 0x473; 
0x00000000000a8838: ret 0x474; 
0x0000000000024cd8: ret 0x4801; 
0x00000000000282f6: ret 0x4802; 
0x00000000001235b9: ret 0x4803; 
0x00000000000479a7: ret 0x4804; 
0x0000000000123886: ret 0x4805; 
0x0000000000123766: ret 0x4806; 
0x00000000001236d6: ret 0x4807; 
0x000000000005dab2: ret 0x4808; 
0x0000000000123526: ret 0x4809; 
0x00000000001237f6: ret 0x480a; 
0x0000000000123386: ret 0x480b; 
0x00000000000d00e2: ret 0x480e; 
0x00000000000ed52a: ret 0x480f; 
0x00000000000539f9: ret 0x4810; 
0x00000000000226ae: ret 0x4811; 
0x00000000001529de: ret 0x4812; 
0x00000000000ca422: ret 0x4817; 
0x000000000009499d: ret 0x4820; 
0x0000000000128496: ret 0x4828; 
0x000000000013e874: ret 0x482e; 
0x000000000006a8b5: ret 0x4830; 
0x00000000001946c1: ret 0x4831; 
0x00000000000aa4a6: ret 0x4840; 
0x000000000002aa7a: ret 0x4858; 
0x0000000000093553: ret 0x4860; 
0x000000000005e9e3: ret 0x4864; 
0x0000000000041f5d: ret 0x4866; 
0x00000000000cd531: ret 0x4875; 
0x00000000000a6a4e: ret 0x4890; 
0x00000000000b1bfc: ret 0x48c3; 
0x00000000000c0ef2: ret 0x48e9; 
0x000000000011a5fa: ret 0x48f8; 
0x0000000000026db9: ret 0x4901; 
0x00000000000274a7: ret 0x4902; 
0x000000000006ea4e: ret 0x4904; 
0x0000000000095031: ret 0x4907; 
0x000000000013eeb2: ret 0x4908; 
0x00000000000d86e0: ret 0x490f; 
0x0000000000078982: ret 0x4910; 
0x000000000002ff00: ret 0x4911; 
0x000000000012951a: ret 0x4964; 
0x000000000009c1d4: ret 0x4974; 
0x00000000000a3c2e: ret 0x4990; 
0x00000000000e4fe1: ret 0x49c3; 
0x000000000009038e: ret 0x4a8d; 
0x000000000002bf6f: ret 0x4b01; 
0x000000000012828c: ret 0x4b8b; 
0x000000000010280f: ret 0x4be8; 
0x000000000004178f: ret 0x4c01; 
0x00000000001215d9: ret 0x4c02; 
0x0000000000087479: ret 0x4c04; 
0x00000000000d3ef6: ret 0x4c08; 
0x00000000000c85b5: ret 0x4c10; 
0x00000000001213a2: ret 0x4c14; 
0x0000000000184086: ret 0x4c20; 
0x00000000001032da: ret 0x4c28; 
0x00000000000e36aa: ret 0x4c3; 
0x000000000005a680: ret 0x4c40; 
0x00000000001840c6: ret 0x4c60; 
0x00000000000d5fae: ret 0x4c80; 
0x00000000001557c0: ret 0x4c88; 
0x00000000000b7196: ret 0x4d10; 
0x000000000018953b: ret 0x4d20; 
0x000000000005cf17: ret 0x4d74; 
0x000000000008f184: ret 0x4d83; 
0x00000000000df278: ret 0x4e0f; 
0x0000000000097d3b: ret 0x4e10; 
0x00000000000a72fd: ret 0x4e8d; 
0x000000000016f27a: ret 0x4ef; 
0x00000000000e3635: ret 0x4f08; 
0x0000000000121600: ret 0x4f73; 
0x000000000015ebc4: ret 0x4fe9; 
0x000000000015dc1f: ret 0x5074; 
0x00000000000f300b: ret 0x508b; 
0x000000000016c77a: ret 0x515; 
0x000000000018eae4: ret 0x5173; 
0x000000000009172c: ret 0x5177; 
0x00000000000cfbc1: ret 0x5180; 
0x00000000000bc456: ret 0x518d; 
0x00000000000a8e79: ret 0x51e8; 
0x000000000013ff1c: ret 0x51e9; 
0x000000000008147c: ret 0x5389; 
0x0000000000128858: ret 0x53ff; 
0x000000000016977a: ret 0x541; 
0x00000000000ac699: ret 0x547c; 
0x00000000000f798b: ret 0x5489; 
0x000000000014bf56: ret 0x548b; 
0x00000000000d4021: ret 0x5589; 
0x00000000000b99d7: ret 0x5675; 
0x0000000000041f88: ret 0x574; 
0x000000000012eacf: ret 0x576; 
0x0000000000160d66: ret 0x5776; 
0x000000000012e7e6: ret 0x577; 
0x0000000000037473: ret 0x57e8; 
0x000000000012b47e: ret 0x57e9; 
0x000000000005b36e: ret 0x57e; 
0x00000000000d8b04: ret 0x5841; 
0x00000000000fe8bd: ret 0x58e9; 
0x000000000015de3d: ret 0x59c; 
0x000000000010a1ef: ret 0x59e9; 
0x0000000000029c31: ret 0x5a58; 
0x0000000000041f4a: ret 0x5b75; 
0x0000000000062525: ret 0x5ba; 
0x00000000000a5d4f: ret 0x5be9; 
0x00000000000f7996: ret 0x5c3b; 
0x000000000009b92d: ret 0x5d5b; 
0x0000000000149b30: ret 0x5d89; 
0x0000000000042ac5: ret 0x5e8; 
0x000000000011e6ca: ret 0x5f1; 
0x00000000000f7e4b: ret 0x5fe8; 
0x00000000000ca8ed: ret 0x6073; 
0x0000000000106ff5: ret 0x6076; 
0x00000000000f136a: ret 0x60e9; 
0x000000000005518a: ret 0x6348; 
0x00000000000a5d01: ret 0x6349; 
0x00000000000f0bb1: ret 0x634d; 
0x00000000000cf2ca: ret 0x6375; 
0x000000000002fed4: ret 0x6411; 
0x00000000000ac689: ret 0x647c; 
0x0000000000116f12: ret 0x64be; 
0x00000000000e4c39: ret 0x64e9; 
0x0000000000116958: ret 0x6602; 
0x000000000013edeb: ret 0x6608; 
0x00000000000a1546: ret 0x6610; 
0x00000000000ac131: ret 0x6620; 
0x0000000000027202: ret 0x66c3; 
0x0000000000110846: ret 0x674; 
0x00000000000e31d6: ret 0x6775; 
0x0000000000184726: ret 0x6776; 
0x000000000006a76a: ret 0x68e9; 
0x00000000000cfbbe: ret 0x6948; 
0x00000000000d20e7: ret 0x694d; 
0x00000000000f60f1: ret 0x69e8; 
0x00000000000fc396: ret 0x69e9; 
0x00000000000d27c7: ret 0x6b45; 
0x000000000009d6ec: ret 0x6be2; 
0x00000000000a57ff: ret 0x6be9; 
0x00000000000ee6c0: ret 0x6ce9; 
0x00000000000d4224: ret 0x6eb8; 
0x00000000000e4d2f: ret 0x6ee9; 
0x0000000000060bbc: ret 0x6fe9; 
0x00000000000613a5: ret 0x7401; 
0x0000000000089db2: ret 0x7402; 
0x0000000000118911: ret 0x7404; 
0x00000000000874e5: ret 0x7408; 
0x0000000000082721: ret 0x7420; 
0x0000000000061531: ret 0x7450; 
0x000000000015df89: ret 0x7475; 
0x00000000000375a2: ret 0x748b; 
0x00000000000e1027: ret 0x7500; 
0x000000000002b04f: ret 0x7501; 
0x000000000009e78a: ret 0x7502; 
0x00000000000b21f1: ret 0x7504; 
0x000000000014a2d2: ret 0x7507; 
0x00000000000b21f6: ret 0x7508; 
0x0000000000190bfb: ret 0x7510; 
0x000000000012e746: ret 0x7520; 
0x00000000000f0cc9: ret 0x7540; 
0x00000000000ed234: ret 0x7580; 
0x0000000000089d6e: ret 0x7589; 
0x00000000000f5a55: ret 0x75e8; 
0x000000000009ef62: ret 0x772; 
0x000000000018d9d2: ret 0x7777; 
0x0000000000101a4d: ret 0x7880; 
0x000000000013dedd: ret 0x795; 
0x00000000000f8531: ret 0x79e8; 
0x00000000000542e3: ret 0x7a80; 
0x00000000000a4049: ret 0x7a8d; 
0x00000000000cd0da: ret 0x7b75; 
0x00000000000d680e: ret 0x7b8b; 
0x0000000000042477: ret 0x7c7; 
0x0000000000052f8f: ret 0x7c83; 
0x0000000000051f06: ret 0x7c89; 
0x0000000000053943: ret 0x7c8b; 
0x00000000000ac0d1: ret 0x7e20; 
0x000000000018468c: ret 0x7e40; 
0x00000000000a914c: ret 0x7f10; 
0x000000000019536a: ret 0x7fff; 
0x00000000000aa329: ret 0x8000; 
0x000000000005300b: ret 0x8001; 
0x000000000011677b: ret 0x8004; 
0x00000000000edb95: ret 0x8040; 
0x000000000013c44a: ret 0x8041; 
0x00000000000f0ef5: ret 0x8080; 
0x0000000000096f40: ret 0x80; 
0x000000000012c84d: ret 0x80f8; 
0x0000000000183ef5: ret 0x8101; 
0x000000000013a024: ret 0x8103; 
0x000000000018c625: ret 0x8104; 
0x000000000013c570: ret 0x8108; 
0x00000000000c0439: ret 0x8141; 
0x00000000000578e6: ret 0x8148; 
0x0000000000041d5a: ret 0x8166; 
0x000000000010c86a: ret 0x8207; 
0x000000000002a9b9: ret 0x820f; 
0x0000000000040c01: ret 0x8301; 
0x000000000014839d: ret 0x8303; 
0x0000000000080fa5: ret 0x8304; 
0x00000000000a58ca: ret 0x8305; 
0x0000000000183fc5: ret 0x8308; 
0x00000000000f9b1b: ret 0x830a; 
0x00000000000ca17d: ret 0x830b; 
0x00000000000483d3: ret 0x830f; 
0x0000000000183f90: ret 0x8310; 
0x0000000000183f62: ret 0x8320; 
0x000000000012957a: ret 0x8330; 
0x00000000000ac5b1: ret 0x8340; 
0x000000000002c338: ret 0x8341; 
0x0000000000027602: ret 0x8348; 
0x000000000005f692: ret 0x8349; 
0x00000000000300c0: ret 0x8401; 
0x0000000000060eb7: ret 0x8404; 
0x00000000000c4b15: ret 0x840; 
0x0000000000029cf1: ret 0x840f; 
0x000000000002ac4e: ret 0x841; 
0x000000000004167d: ret 0x8440; 
0x0000000000193bed: ret 0x8441; 
0x0000000000060e9a: ret 0x8445; 
0x00000000000c8432: ret 0x844; 
0x00000000000a51c6: ret 0x845; 
0x000000000013295f: ret 0x847; 
0x00000000000bcb2d: ret 0x8504; 
0x000000000002a910: ret 0x850f; 
0x0000000000184c21: ret 0x8520; 
0x000000000005f231: ret 0x8545; 
0x0000000000027305: ret 0x8548; 
0x0000000000045140: ret 0x854d; 
0x00000000001068f9: ret 0x8589; 
0x000000000005d620: ret 0x85c7; 
0x00000000000dd334: ret 0x85e9; 
0x0000000000029b63: ret 0x860f; 
0x000000000004ad00: ret 0x870f; 
0x00000000000ac1d5: ret 0x876; 
0x000000000002e11c: ret 0x87e9; 
0x00000000000266b9: ret 0x8801; 
0x00000000000a5e0c: ret 0x8806; 
0x000000000012a66a: ret 0x880; 
0x00000000000c0fb2: ret 0x88e9; 
0x0000000000033925: ret 0x8901; 
0x00000000001229a9: ret 0x8940; 
0x000000000002f3ef: ret 0x8941; 
0x000000000004b615: ret 0x8944; 
0x00000000000a46aa: ret 0x8945; 
0x000000000002478f: ret 0x8948; 
0x0000000000026c8a: ret 0x8949; 
0x00000000000267e2: ret 0x894c; 
0x000000000005fc62: ret 0x894d; 
0x0000000000056aeb: ret 0x894e; 
0x00000000000dcffe: ret 0x89c3; 
0x00000000000ec891: ret 0x89e8; 
0x0000000000053b19: ret 0x89e9; 
0x00000000000356c0: ret 0x8b01; 
0x00000000000e9efb: ret 0x8b02; 
0x00000000000813e6: ret 0x8b04; 
0x00000000000c6a6b: ret 0x8b05; 
0x000000000018c6e2: ret 0x8b10; 
0x000000000003260f: ret 0x8b41; 
0x00000000000f6400: ret 0x8b44; 
0x00000000000a3226: ret 0x8b46; 
0x0000000000029ce2: ret 0x8b48; 
0x000000000006c96f: ret 0x8b49; 
0x0000000000056a72: ret 0x8b4a; 
0x00000000000a4ef8: ret 0x8b4b; 
0x0000000000029ed6: ret 0x8b4c; 
0x0000000000102022: ret 0x8b4d; 
0x00000000000dea9b: ret 0x8b64; 
0x00000000000d6d64: ret 0x8c0f; 
0x0000000000094816: ret 0x8c75; 
0x00000000000c89d3: ret 0x8d01; 
0x0000000000063577: ret 0x8d04; 
0x000000000002d9a5: ret 0x8d08; 
0x000000000005f27b: ret 0x8d0f; 
0x000000000006d989: ret 0x8d41; 
0x00000000000d84df: ret 0x8d43; 
0x00000000000d69f6: ret 0x8d44; 
0x000000000002896c: ret 0x8d47; 
0x0000000000025073: ret 0x8d48; 
0x00000000000414cf: ret 0x8d49; 
0x0000000000055cb7: ret 0x8d4a; 
0x000000000005e0c0: ret 0x8d4b; 
0x0000000000055b45: ret 0x8d4c; 
0x0000000000094f14: ret 0x8d4d; 
0x00000000000a4c2c: ret 0x8d4e; 
0x0000000000051cbb: ret 0x8d74; 
0x00000000000dac99: ret 0x8d89; 
0x000000000015e4aa: ret 0x8d9; 
0x000000000015e86e: ret 0x8db; 
0x0000000000044ecb: ret 0x8e0f; 
0x000000000007977a: ret 0x8e9; 
0x00000000000f113f: ret 0x8eeb; 
0x000000000007d665: ret 0x8f0f; 
0x0000000000051bf1: ret 0x8f74; 
0x00000000000e403d: ret 0x9066; 
0x00000000000cff95: ret 0x907e; 
0x00000000000e50dd: ret 0x90c3; 
0x00000000000a2188: ret 0x92e8; 
0x00000000000fff37: ret 0x930f; 
0x00000000000f1237: ret 0x93e9; 
0x000000000008584d: ret 0x93eb; 
0x000000000006abd2: ret 0x940f; 
0x00000000000587a8: ret 0x941; 
0x000000000004f725: ret 0x948; 
0x00000000000f50a1: ret 0x949; 
0x00000000000426a5: ret 0x94c; 
0x000000000019708f: ret 0x94d; 
0x00000000000695d6: ret 0x94e8; 
0x0000000000127bd7: ret 0x950f; 
0x000000000005b0a3: ret 0x9574; 
0x000000000009d0d4: ret 0x95be; 
0x00000000000cfe64: ret 0x960f; 
0x000000000015b18a: ret 0x964; 
0x00000000000e431f: ret 0x9674; 
0x0000000000066997: ret 0x9675; 
0x000000000004f6b2: ret 0x96e9; 
0x000000000012e95f: ret 0x976; 
0x0000000000158026: ret 0x9775; 
0x0000000000023caa: ret 0x983; 
0x00000000000594f5: ret 0x9848; 
0x00000000000b9a25: ret 0x9874; 
0x000000000002412d: ret 0x988; 
0x00000000000fe9e2: ret 0x98e9; 
0x0000000000199492: ret 0x9974; 
0x0000000000051788: ret 0x99e9; 
0x0000000000113958: ret 0x9b75; 
0x0000000000140084: ret 0x9be9; 
0x000000000010243e: ret 0x9ce9; 
0x00000000000d6e04: ret 0x9d0f; 
0x00000000000b75c0: ret 0x9d72; 
0x00000000001533ca: ret 0x9e0; 
0x0000000000062a43: ret 0x9ee9; 
0x00000000000636cf: ret 0xa173; 
0x000000000009c529: ret 0xa1e8; 
0x000000000007f745: ret 0xa1e9; 
0x000000000013f8a5: ret 0xa3c; 
0x00000000000f07e5: ret 0xa5e8; 
0x00000000000713bc: ret 0xa5e9; 
0x00000000000f8f35: ret 0xa6e9; 
0x00000000000974e8: ret 0xa7e; 
0x000000000007c90a: ret 0xa8; 
0x000000000006ddcd: ret 0xa; 
0x000000000011c631: ret 0xabe; 
0x000000000010573a: ret 0xac3; 
0x0000000000159f90: ret 0xac74; 
0x000000000010de62: ret 0xacc; 
0x00000000000a57c1: ret 0xaceb; 
0x00000000001083eb: ret 0xad7; 
0x00000000000a3600: ret 0xadeb; 
0x00000000000a3c7f: ret 0xaeeb; 
0x00000000000ee67d: ret 0xafe9; 
0x00000000000e4ced: ret 0xb0e9; 
0x0000000000028cff: ret 0xb3e9; 
0x000000000014a928: ret 0xb43; 
0x0000000000098449: ret 0xb48b; 
0x00000000000dec0e: ret 0xb4e9; 
0x0000000000063e67: ret 0xb589; 
0x00000000000e4de8: ret 0xb5e9; 
0x00000000000583fc: ret 0xb60f; 
0x000000000009d73d: ret 0xb675; 
0x00000000000470ad: ret 0xb677; 
0x00000000000d1400: ret 0xb70f; 
0x000000000014b6eb: ret 0xb75; 
0x0000000000103102: ret 0xb78; 
0x0000000000142dab: ret 0xb7e9; 
0x0000000000080fd2: ret 0xb804; 
0x0000000000098ab9: ret 0xb817; 
0x00000000000a5450: ret 0xb841; 
0x00000000000425ea: ret 0xb848; 
0x00000000000d12cb: ret 0xb850; 
0x0000000000042277: ret 0xb8; 
0x000000000009f327: ret 0xb8c3; 
0x00000000000f7dc2: ret 0xb908; 
0x000000000012fc4d: ret 0xb941; 
0x0000000000041e7d: ret 0xb948; 
0x000000000012fc3a: ret 0xb; 
0x00000000000a0ae9: ret 0xbd01; 
0x000000000011641e: ret 0xbd73; 
0x000000000007dc83: ret 0xbd83; 
0x000000000007ab02: ret 0xbd89; 
0x00000000001325ea: ret 0xbda; 
0x0000000000076f77: ret 0xbe01; 
0x0000000000063e57: ret 0xbe02; 
0x0000000000071af0: ret 0xbe08; 
0x00000000000d6c94: ret 0xbe0f; 
0x000000000014fbc1: ret 0xbeeb; 
0x00000000000693cc: ret 0xbf08; 
0x0000000000054747: ret 0xbf41; 
0x000000000010beab: ret 0xbfe8; 
0x0000000000079bbc: ret 0xbfe9; 
0x00000000000fc243: ret 0xbfeb; 
0x00000000000aa1e9: ret 0xc000; 
0x000000000005844f: ret 0xc001; 
0x00000000000a2f97: ret 0xc019; 
0x0000000000035d5e: ret 0xc031; 
0x000000000007ab33: ret 0xc041; 
0x000000000002ff26: ret 0xc083; 
0x00000000001175cd: ret 0xc084; 
0x00000000000abf90: ret 0xc085; 
0x0000000000041f1d: ret 0xc148; 
0x00000000000c943c: ret 0xc149; 
0x000000000010024a: ret 0xc153; 
0x00000000000d2304: ret 0xc181; 
0x000000000007aad3: ret 0xc189; 
0x000000000005bbfa: ret 0xc200; 
0x000000000004b1b4: ret 0xc220; 
0x00000000000d12c9: ret 0xc281; 
0x00000000000d47e6: ret 0xc283; 
0x000000000018e9b4: ret 0xc2b2; 
0x00000000000ee416: ret 0xc35b; 
0x0000000000042ab7: ret 0xc35d; 
0x00000000000f5a03: ret 0xc383; 
0x0000000000065926: ret 0xc389; 
0x0000000000042aa6: ret 0xc4e8; 
0x00000000001846f1: ret 0xc540; 
0x0000000000129c00: ret 0xc5f6; 
0x000000000013c4e9: ret 0xc639; 
0x000000000013f092: ret 0xc641; 
0x00000000000fa7a7: ret 0xc675; 
0x00000000000cff5f: ret 0xc67e; 
0x000000000005bda7: ret 0xc689; 
0x0000000000125702: ret 0xc6c; 
0x00000000000b2591: ret 0xc748; 
0x00000000000cf321: ret 0xc75; 
0x0000000000042b39: ret 0xc764; 
0x00000000000eeed5: ret 0xc775; 
0x0000000000048fd6: ret 0xc776; 
0x00000000000f8766: ret 0xc789; 
0x0000000000115cb9: ret 0xc7e9; 
0x00000000000a87e6: ret 0xc839; 
0x0000000000086eee: ret 0xc883; 
0x0000000000041b58: ret 0xc889; 
0x00000000001347d4: ret 0xc8b; 
0x0000000000118ef7: ret 0xc931; 
0x00000000000d08c9: ret 0xc985; 
0x00000000000b6945: ret 0xc9ff; 
0x000000000011fb98: ret 0xc; 
0x00000000000f7987: ret 0xca09; 
0x0000000000023d99: ret 0xca21; 
0x00000000000f2683: ret 0xca39; 
0x00000000000e9ea9: ret 0xca89; 
0x000000000011928f: ret 0xcad8; 
0x0000000000060c61: ret 0xcae9; 
0x00000000001202aa: ret 0xcbb; 
0x000000000011fdaa: ret 0xcc0; 
0x00000000000e1336: ret 0xcce9; 
0x00000000000b7590: ret 0xcd72; 
0x0000000000121d5a: ret 0xcdc; 
0x0000000000028ee7: ret 0xcde9; 
0x0000000000102c7e: ret 0xce0f; 
0x0000000000026a9e: ret 0xce80; 
0x0000000000184c2d: ret 0xce89; 
0x000000000011cc32: ret 0xceb; 
0x000000000007dfcb: ret 0xcee9; 
0x000000000011cdaa: ret 0xcf0; 
0x00000000000bf52a: ret 0xcf75; 
0x000000000011c892: ret 0xcfa; 
0x000000000006ce7b: ret 0xcfe9; 
0x00000000000eff31: ret 0xd009; 
0x00000000000fe442: ret 0xd020; 
0x000000000009ef11: ret 0xd084; 
0x00000000000d2af8: ret 0xd089; 
0x0000000000102fe1: ret 0xd101; 
0x000000000003006f: ret 0xd108; 
0x0000000000067623: ret 0xd129; 
0x000000000009ec3a: ret 0xd148; 
0x0000000000025434: ret 0xd17d; 
0x00000000000d9937: ret 0xd189; 
0x00000000000940d3: ret 0xd1e9; 
0x0000000000041207: ret 0xd231; 
0x00000000000d4c31: ret 0xd26b; 
0x00000000000240d5: ret 0xd284; 
0x0000000000081416: ret 0xd285; 
0x0000000000105532: ret 0xd289; 
0x000000000013f86e: ret 0xd308; 
0x0000000000105ecb: ret 0xd320; 
0x000000000010f5d7: ret 0xd321; 
0x00000000000d0a4c: ret 0xd338; 
0x000000000004ae6e: ret 0xd348; 
0x0000000000193b2e: ret 0xd349; 
0x0000000000193e86: ret 0xd589; 
0x00000000000e9b68: ret 0xd5eb; 
0x0000000000065835: ret 0xd629; 
0x0000000000068d67: ret 0xd729; 
0x00000000000f8cc8: ret 0xd739; 
0x00000000000d6a77: ret 0xd789; 
0x000000000014022c: ret 0xd7e9; 
0x00000000000a5953: ret 0xd889; 
0x0000000000195f2e: ret 0xd8e9; 
0x00000000000c7518: ret 0xd8f7; 
0x0000000000094fe4: ret 0xd977; 
0x00000000000a7b7e: ret 0xd989; 
0x000000000007c799: ret 0xd9e9; 
0x00000000000f7642: ret 0xd; 
0x00000000000de363: ret 0xda72; 
0x000000000012a43a: ret 0xda80; 
0x00000000000a5e7d: ret 0xda89; 
0x0000000000041b54: ret 0xdaf7; 
0x0000000000196ed3: ret 0xdb31; 
0x00000000000cb081: ret 0xdc00; 
0x00000000000a8ebd: ret 0xde8; 
0x0000000000090f05: ret 0xde9; 
0x00000000000bf1f9: ret 0xdeb; 
0x00000000000bc9ac: ret 0xdee8; 
0x00000000000aa0a9: ret 0xe000; 
0x0000000000190bbd: ret 0xe074; 
0x00000000000470bd: ret 0xe076; 
0x000000000008ed27: ret 0xe083; 
0x000000000007aadf: ret 0xe183; 
0x00000000000d2802: ret 0xe1e9; 
0x000000000007b9db: ret 0xe273; 
0x0000000000040fa5: ret 0xe281; 
0x000000000002993f: ret 0xe283; 
0x000000000018c55f: ret 0xe2c4; 
0x000000000010df88: ret 0xe2e8; 
0x00000000000f05da: ret 0xe374; 
0x0000000000093ff5: ret 0xe480; 
0x0000000000044eb0: ret 0xe575; 
0x000000000005e3f8: ret 0xe57f; 
0x00000000000bc0fa: ret 0xe680; 
0x0000000000023c24: ret 0xe683; 
0x00000000000e4cb7: ret 0xe6e9; 
0x000000000010d5dc: ret 0xe6ff; 
0x0000000000110838: ret 0xe72; 
0x00000000000eda35: ret 0xe76; 
0x000000000009c26e: ret 0xe775; 
0x0000000000071bb3: ret 0xe7e8; 
0x0000000000183b03: ret 0xe7f; 
0x0000000000135d4e: ret 0xe801; 
0x00000000000e9f12: ret 0xe875; 
0x00000000000edb15: ret 0xe877; 
0x0000000000108ec3: ret 0xe883; 
0x000000000019866a: ret 0xe89c; 
0x0000000000083e82: ret 0xe8; 
0x000000000011d788: ret 0xe8c1; 
0x000000000009fda3: ret 0xe901; 
0x0000000000060908: ret 0xe902; 
0x0000000000060c31: ret 0xe904; 
0x00000000000b69e6: ret 0xe908; 
0x0000000000180096: ret 0xe910; 
0x00000000001082d4: ret 0xe973; 
0x0000000000129694: ret 0xe975; 
0x00000000000528de: ret 0xe983; 
0x000000000005e6e7: ret 0xe9f8; 
0x00000000000437e9: ret 0xe; 
0x0000000000047063: ret 0xea76; 
0x00000000000bc08a: ret 0xea81; 
0x0000000000042fe1: ret 0xeab8; 
0x000000000007aaf8: ret 0xeac0; 
0x000000000002abf4: ret 0xeac1; 
0x000000000011d565: ret 0xead1; 
0x00000000000f5a18: ret 0xeb01; 
0x000000000017e0d6: ret 0xeb10; 
0x0000000000130fec: ret 0xeb11; 
0x0000000000095e02: ret 0xeb75; 
0x00000000000a5201: ret 0xec75; 
0x00000000000eef71: ret 0xec7f; 
0x0000000000056920: ret 0xed75; 
0x0000000000192f75: ret 0xed85; 
0x000000000003758f: ret 0xee75; 
0x00000000000eeb87: ret 0xee7f; 
0x00000000000377bc: ret 0xee8; 
0x000000000004ecb6: ret 0xef75; 
0x00000000000a3d3b: ret 0xefe9; 
0x00000000000a9f69: ret 0xf000; 
0x000000000011f88d: ret 0xf009; 
0x000000000003ca4d: ret 0xf00; 
0x0000000000026d8f: ret 0xf01; 
0x00000000000992bd: ret 0xf02; 
0x00000000000a8896: ret 0xf039; 
0x0000000000027be6: ret 0xf04; 
0x000000000009ef08: ret 0xf083; 
0x00000000000e5bc2: ret 0xf089; 
0x000000000007ad8e: ret 0xf08; 
0x00000000000a632e: ret 0xf0e; 
0x000000000007c4ac: ret 0xf10; 
0x000000000010ef6a: ret 0xf133; 
0x00000000000ac78c: ret 0xf188; 
0x0000000000049c7f: ret 0xf189; 
0x0000000000083ab9: ret 0xf20; 
0x00000000000ff49a: ret 0xf22f; 
0x00000000000c62f9: ret 0xf2e9; 
0x00000000000f7eca: ret 0xf375; 
0x000000000008ffee: ret 0xf390; 
0x00000000000a28de: ret 0xf3c3; 
0x000000000004c82a: ret 0xf40; 
0x0000000000025394: ret 0xf41; 
0x00000000000a3435: ret 0xf44; 
0x000000000005fd8a: ret 0xf45; 
0x00000000000a0c59: ret 0xf475; 
0x00000000000283ae: ret 0xf48; 
0x00000000000d939a: ret 0xf491; 
0x000000000004ae5f: ret 0xf4d; 
0x0000000000103d76: ret 0xf4e8; 
0x000000000005f569: ret 0xf50; 
0x0000000000183e2e: ret 0xf5c5; 
0x000000000015f592: ret 0xf604; 
0x00000000000c1a72: ret 0xf61c; 
0x00000000000693c4: ret 0xf631; 
0x0000000000042317: ret 0xf66; 
0x00000000000f2ed2: ret 0xf685; 
0x00000000000a04ce: ret 0xf6c3; 
0x00000000000c66ca: ret 0xf6d8; 
0x00000000001353f3: ret 0xf741; 
0x000000000003871a: ret 0xf748; 
0x00000000000c151a: ret 0xf74; 
0x000000000019455f: ret 0xf77; 
0x000000000010d9a9: ret 0xf789; 
0x0000000000037601: ret 0xf7f7; 
0x000000000002a3eb: ret 0xf800; 
0x000000000010cbb1: ret 0xf80; 
0x000000000011301a: ret 0xf815; 
0x00000000000d346b: ret 0xf883; 
0x0000000000093967: ret 0xf8b; 
0x0000000000188166: ret 0xf8c5; 
0x000000000011dfba: ret 0xf934; 
0x0000000000053bc0: ret 0xf983; 
0x0000000000088e6a: ret 0xf994; 
0x00000000000eb9db: ret 0xf9c1; 
0x000000000004fdaf: ret 0xf; 
0x00000000000f378b: ret 0xfa39; 
0x00000000000bc25c: ret 0xfac1; 
0x000000000015e26a: ret 0xfafe; 
0x000000000015e79a: ret 0xfb0b; 
0x00000000000a9ce9: ret 0xfc00; 
0x0000000000117a55: ret 0xfc07; 
0x0000000000041f62: ret 0xfc3; 
0x000000000004ba0a: ret 0xfd6a; 
0x0000000000153643: ret 0xfd81; 
0x000000000005adca: ret 0xfd91; 
0x0000000000053dd4: ret 0xfde9; 
0x00000000000a9ba9: ret 0xfe00; 
0x000000000014f7aa: ret 0xfe02; 
0x000000000007db0a: ret 0xfe0e; 
0x000000000013a5da: ret 0xfe61; 
0x000000000003a56a: ret 0xfe7d; 
0x000000000013ad50: ret 0xfe83; 
0x00000000000f2bdb: ret 0xfe8; 
0x00000000000e4a8e: ret 0xfe9; 
0x00000000000385aa: ret 0xfe9f; 
0x0000000000041b64: ret 0xfeb8; 
0x0000000000033f54: ret 0xfee7; 
0x00000000000a9a69: ret 0xff00; 
0x00000000000f2ed9: ret 0xff04; 
0x00000000000a47dc: ret 0xff0f; 
0x000000000004224b: ret 0xff25; 
0x0000000000118d4c: ret 0xff2; 
0x0000000000184e99: ret 0xff2d; 
0x000000000006908f: ret 0xff31; 
0x0000000000089fae: ret 0xff3; 
0x000000000014f83a: ret 0xff3e; 
0x0000000000127e61: ret 0xff41; 
0x00000000000b99d4: ret 0xff48; 
0x00000000000a9929: ret 0xff80; 
0x000000000013f00a: ret 0xff81; 
0x00000000000db445: ret 0xff83; 
0x000000000005f8fa: ret 0xff85; 
0x000000000004050a: ret 0xff89; 
0x000000000003f10a: ret 0xff9d; 
0x000000000009c0aa: ret 0xffa6; 
0x00000000000993da: ret 0xffb1; 
0x0000000000069dfb: ret 0xffb5; 
0x000000000009091b: ret 0xffb8; 
0x000000000010b2ea: ret 0xffbd; 
0x000000000004f2e3: ret 0xffbf; 
0x00000000000a97e9: ret 0xffc0; 
0x00000000000d427a: ret 0xffc2; 
0x0000000000068160: ret 0xffc4; 
0x000000000006b5dc: ret 0xffca; 
0x000000000003bd0a: ret 0xffd1; 
0x0000000000068835: ret 0xffd6; 
0x000000000006afd6: ret 0xffd7; 
0x0000000000065fb1: ret 0xffdc; 
0x00000000000a96a9: ret 0xffe0; 
0x000000000005e919: ret 0xffe2; 
0x00000000000dc8e6: ret 0xffe4; 
0x0000000000075dce: ret 0xffe7; 
0x000000000010ec3a: ret 0xffe8; 
0x00000000000e4d9e: ret 0xffe9; 
0x000000000007bc8d: ret 0xffea; 
0x000000000003bbc9: ret 0xffed; 
0x000000000007922e: ret 0xffee; 
0x0000000000048da1: ret 0xffef; 
0x00000000000a9569: ret 0xfff0; 
0x000000000006036f: ret 0xfff1; 
0x000000000003fc12: ret 0xfff2; 
0x00000000000e60df: ret 0xfff3; 
0x00000000000c523f: ret 0xfff5; 
0x000000000005cd46: ret 0xfff6; 
0x0000000000197b7a: ret 0xfff7; 
0x00000000000a9429: ret 0xfff8; 
0x00000000001633e7: ret 0xfff9; 
0x000000000009c249: ret 0xfff; 
0x00000000000cc97a: ret 0xfffa; 
0x000000000005e857: ret 0xfffb; 
0x0000000000081481: ret 0xfffc; 
0x0000000000022968: ret 0xfffd; 
0x000000000002fb15: ret 0xfffe; 
0x0000000000026166: ret 0xffff; 
0x0000000000026b3a: ret 1; 
0x00000000000a24db: ret 2; 
0x000000000002b562: ret 3; 
0x0000000000096cf9: ret 4; 
0x00000000000531da: ret 5; 
0x000000000014f853: ret 6; 
0x0000000000097139: ret 7; 
0x000000000007a73b: ret 8; 
0x000000000011ec1f: ret 9; 
0x0000000000022679: ret; 
0x00000000000e1da3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10d732; syscall; 
0x00000000000e1c63: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10d872; syscall; 
0x00000000000e1bab: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10d92a; syscall; 
0x00000000000e1acf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10d9fe; syscall; 
0x00000000000e18ff: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10db8e; syscall; 
0x00000000000e173b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10dd0a; syscall; 
0x00000000000e1381: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10e06c; syscall; 
0x00000000000dfe73: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10f4f2; syscall; 
0x00000000000dfd33: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10f632; syscall; 
0x00000000000dfc7b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10f6ea; syscall; 
0x00000000000df8af: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10faae; syscall; 
0x00000000000df6df: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10fc3e; syscall; 
0x00000000000df51b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x10fdba; syscall; 
0x00000000000dec33: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x11064a; syscall; 
0x00000000000d2b8f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x11c606; syscall; 
0x00000000000d295b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x11c83a; syscall; 
0x00000000000ca62f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x126b76; syscall; 
0x000000000009c7ef: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x150386; syscall; 
0x000000000009e19b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x150d62; syscall; 
0x000000000009dfbb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x150f42; syscall; 
0x000000000009ddcf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15112e; syscall; 
0x000000000009dd5f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15119e; syscall; 
0x000000000009db2f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1513ce; syscall; 
0x0000000000099a8f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1530e6; syscall; 
0x0000000000099a2f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153146; syscall; 
0x000000000009966f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153506; syscall; 
0x000000000009940f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153766; syscall; 
0x0000000000098da7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; 
0x0000000000098da7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000098d6f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153e06; syscall; 
0x000000000009aa3f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15443e; syscall; 
0x0000000000099fa3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; 
0x0000000000099fa3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x0000000000096010: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x158e5d; syscall; 
0x0000000000095fdf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x158e9e; syscall; 
0x0000000000095d5f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15911e; syscall; 
0x000000000009583b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x159642; syscall; 
0x0000000000094c20: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x159bd5; syscall; 
0x0000000000094a4b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; 
0x0000000000094a4b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x00000000000948af: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x159f46; syscall; 
0x0000000000093921: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; 
0x0000000000093921: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x00000000000933e1: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15b3d4; syscall; 
0x000000000009303d: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15b778; syscall; 
0x0000000000092cd1: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15bae4; syscall; 
0x000000000009164d: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d168; syscall; 
0x000000000009138d: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d428; syscall; 
0x0000000000091019: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; 
0x0000000000091019: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x000000000008435e: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a417; syscall; 
0x0000000000083f61: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; 
0x0000000000083f61: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x0000000000083eb6: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a8bf; syscall; 
0x0000000000081fef: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16f1b6; syscall; 
0x00000000000610a3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x18d6a2; syscall; 
0x0000000000060e1f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x18d922; syscall; 
0x000000000005ec4b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x18faee; syscall; 
0x000000000005eb0b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x18fc2e; syscall; 
0x0000000000054d6f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1999b6; syscall; 
0x0000000000054b8f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x199b96; syscall; 
0x000000000005465f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x19a0c6; syscall; 
0x0000000000052273: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x19c282; syscall; 
0x00000000000520f7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x19c3fe; syscall; 
0x00000000000520bf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x19c436; syscall; 
0x00000000000478ab: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6c2a; syscall; 
0x00000000000477eb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6cea; syscall; 
0x0000000000047723: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6db2; syscall; 
0x000000000004764b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; 
0x000000000004764b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x0000000000046743: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a753a; syscall; 
0x000000000004667e: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a75ff; syscall; 
0x00000000000464dc: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a77a1; syscall; 
0x0000000000046402: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a787b; syscall; 
0x00000000000384cc: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b5761; syscall; 
0x0000000000036b49: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b70ac; syscall; 
0x000000000003580e: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b833f; syscall; 
0x00000000000357f1: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b835c; syscall; 
0x0000000000035729: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b8424; syscall; 
0x0000000000026043: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1cb162; syscall; 
0x0000000000025ed7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1cb2ce; syscall; 
0x0000000000025db7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1cb3ee; syscall; 
0x0000000000022842: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1cb403; syscall; 
0x00000000001988db: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x553a2; syscall; 
0x0000000000198a9b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x55d5a; syscall; 
0x0000000000198a9b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x55d5a; syscall; pop rbx; ret; 
0x0000000000198dcb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x57742; syscall; 
0x0000000000198dcb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x57742; syscall; pop rbp; ret; 
0x000000000015e15b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x934f2; syscall; 
0x000000000015d023: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9462a; syscall; 
0x000000000015cf43: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9470a; syscall; 
0x000000000015cd5b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x948f2; syscall; 
0x000000000015cccb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x94982; syscall; 
0x000000000015cc2b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x94a22; syscall; 
0x000000000015cb7b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x94ad2; syscall; 
0x000000000015c7ab: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x94ea2; syscall; 
0x000000000015251b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9e8ca; syscall; 
0x00000000001523bb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9ea2a; syscall; 
0x00000000001521af: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9ec36; syscall; 
0x000000000015200f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9edd6; syscall; 
0x0000000000151e7b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9ef6a; syscall; 
0x0000000000151d3b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9f0aa; syscall; 
0x0000000000151bdb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9f20a; syscall; 
0x0000000000151acb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x9f31a; syscall; 
0x000000000014e5bb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa2826; syscall; 
0x000000000014c8c3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa445a; syscall; 
0x000000000014c783: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa459a; syscall; 
0x000000000014c6cb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa4652; syscall; 
0x000000000014c5df: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa4736; syscall; 
0x000000000014c40f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa48d6; syscall; 
0x000000000014c24b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xa4a72; syscall; 
0x00000000001468ad: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xaa2ac; syscall; 
0x000000000014470f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xac3b6; syscall; 
0x00000000001443d7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xac6ee; syscall; 
0x0000000000144057: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xaca6e; syscall; 
0x0000000000143e31: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xacc94; syscall; 
0x0000000000143ccf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xacdf6; syscall; 
0x0000000000143a92: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xad033; syscall; 
0x000000000014303b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xad9d2; syscall; 
0x0000000000142eb9: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xadb54; syscall; 
0x0000000000142e7f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xadb8e; syscall; 
0x0000000000142d67: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xadca6; syscall; 
0x0000000000142523: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xae4ea; syscall; 
0x000000000014245b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xae5b2; syscall; 
0x000000000014245b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xae5b2; syscall; pop rbp; ret; 
0x000000000014233f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xae6ce; syscall; 
0x0000000000140f6c: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xaf849; syscall; 
0x000000000013d6db: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb2e32; syscall; 
0x000000000013d3df: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb312e; syscall; 
0x00000000001390af: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb744a; syscall; 
0x0000000000138b2f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb79ae; syscall; 
0x000000000013896b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb7b2a; syscall; 
0x00000000001388a3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb7b92; syscall; 
0x0000000000138763: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb7cd2; syscall; 
0x00000000001386ab: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb7d8a; syscall; 
0x0000000000137fbb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb8472; syscall; 
0x0000000000137c9b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb8792; syscall; 
0x0000000000137adf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xb894e; syscall; 
0x0000000000134753: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbbb6a; syscall; 
0x0000000000134613: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbbcaa; syscall; 
0x000000000013455b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbbd62; syscall; 
0x000000000013447b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbbe3a; syscall; 
0x0000000000133faf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbc28e; syscall; 
0x00000000001339df: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbc7fe; syscall; 
0x00000000001334bf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbccd6; syscall; 
0x00000000001332f3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbce62; syscall; 
0x00000000001331b3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbcfa2; syscall; 
0x00000000001330fb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbd05a; syscall; 
0x000000000013301b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbd132; syscall; 
0x0000000000132bff: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbd506; syscall; 
0x00000000001325e3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbdac2; syscall; 
0x000000000013248b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbdc1a; syscall; 
0x00000000001323cb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbdcda; syscall; 
0x00000000001322e3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbddba; syscall; 
0x00000000001321ff: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbde66; syscall; 
0x0000000000131b9f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe486; syscall; 
0x0000000000131993: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe64a; syscall; 
0x000000000013183b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe7a2; syscall; 
0x000000000013177b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe862; syscall; 
0x0000000000131693: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbe942; syscall; 
0x0000000000130a7f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbf4de; syscall; 
0x000000000013080f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbf70e; syscall; 
0x000000000013008f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xbfe2e; syscall; 
0x0000000000126593: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xc9892; syscall; 
0x0000000000126453: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xc99d2; syscall; 
0x000000000012639b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xc9a8a; syscall; 
0x0000000000125fc1: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xc9e5c; syscall; 
0x0000000000125dbf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xca026; syscall; 
0x0000000000125bdf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xca1be; syscall; 
0x0000000000125a1b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xca33a; syscall; 
0x000000000012594b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xca3b6; syscall; 
0x0000000000125881: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xca480; syscall; 
0x00000000001257ec: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xca515; syscall; 
0x0000000000124ae3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcb1ea; syscall; 
0x00000000001249a3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcb32a; syscall; 
0x00000000001248eb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcb3e2; syscall; 
0x00000000001242f1: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcb9d4; syscall; 
0x00000000001240ef: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcbb7e; syscall; 
0x0000000000123f0f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcbcf6; syscall; 
0x0000000000123d4b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xcbe52; syscall; 
0x00000000001186db: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xd716a; syscall; 
0x00000000001185bf: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7286; syscall; 
0x000000000011815f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xd76e6; syscall; 
0x0000000000117c24: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7c21; syscall; 
0x0000000000117c24: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7c21; syscall; ret; 
0x0000000000106a8f: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xe8b26; syscall; 
0x0000000000082933: retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000124819: retf 0; add byte ptr [rdi], cl; add eax, 0xfffd2ae9; jmp qword ptr [rsi + 0x2e]; 
0x00000000000e0d9c: retf 0; add byte ptr [rdi], cl; add eax, 0xfffea1e9; jmp qword ptr [rsi + 0xf]; 
0x000000000009c13f: retf 0; add byte ptr [rdi], cl; add eax, 0xfffebee9; jmp qword ptr [rsi + 0xf]; 
0x0000000000098a8f: retf 0; add byte ptr [rdi], cl; add eax, 0xffff01e9; jmp qword ptr [rsi + 0xf]; 
0x0000000000091079: retf 0; add byte ptr [rdi], cl; add eax, 0xffff44e9; jmp qword ptr [rsi + 0x66]; 
0x000000000004713b: retf 0; add byte ptr [rdi], cl; add eax, 0xffff4ae9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000125599: retf 0; add byte ptr [rdi], cl; add eax, 0xffff4de9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000096167: retf 0; add byte ptr [rdi], cl; add eax, 0xffff70e9; jmp qword ptr [rsi + 0x66]; 
0x0000000000149376: retf 0x1089; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001493af: retf 0x1189; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000015b664: retf 0x148; ret 0x2949; 
0x00000000000f1234: retf 0x14c; ret 0x93e9; 
0x00000000000a5d4c: retf 0x14d; ret 0x5be9; 
0x00000000000a57fc: retf 0x14d; ret 0x6be9; 
0x00000000000a3d38: retf 0x14d; ret 0xefe9; 
0x000000000018388b: retf 0x167e; movsxd rax, ecx; ret; 
0x0000000000157596: retf 0x1689; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000155df2: retf 0x1b74; cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000003856a: retf 0x1b8e; add byte ptr [rax - 0x73], cl; cmp eax, 0x1b558b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007adbc: retf 0x1c; add dh, dh; ret 0xf40; 
0x000000000012e7a6: retf 0x2b77; xor eax, eax; syscall; 
0x000000000012e7a6: retf 0x2b77; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x00000000000e172c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x10dd0a]; syscall; 
0x00000000000df50c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x10fdba]; syscall; 
0x000000000014c23c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xa4a72]; syscall; 
0x000000000013895c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xb7b2a]; syscall; 
0x000000000013446c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbbe3a]; syscall; 
0x000000000013300c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xbd132]; syscall; 
0x0000000000125a0c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xca33a]; syscall; 
0x0000000000123d3c: retf 0x3145; sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xcbe52]; syscall; 
0x00000000001898aa: retf 0x3944; ret 0x820f; 
0x00000000000f47bd: retf 0x3944; ror dword ptr [rdi], 1; xchg esp, eax; ret 0xf66; 
0x000000000012eacc: retf 0x3948; ret 0x576; 
0x0000000000048d71: retf 0x3948; ret 0x820f; 
0x0000000000052641: retf 0x3948; ret 0x860f; 
0x000000000014b762: retf 0x3948; ret 0xf40; 
0x0000000000155def: retf 0x3948; retf 0x1b74; cmp eax, 2; sete al; movzx eax, al; ret; 
0x00000000000b75bd: retf 0x394c; ret 0x9d72; 
0x0000000000157556: retf 0x5089; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000004689a: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x00000000000d4233: retf 0x8102; cli; sub byte ptr [rdi + rcx*4 + 2], bl; jbe 0xd4240; ret; 
0x00000000000f81e5: retf 0x8166; loope 0xf81e9; add esi, esi; ret 0xf04; 
0x000000000010d9b1: retf 0x8341; stc; add dword ptr [rdi + 0x30], esi; mov eax, 0x106; syscall; 
0x000000000012e958: retf 0x8348; in al, dx; or byte ptr [rax + 0x39], cl; ret 0x976; 
0x00000000000d401b: retf 0x8348; out dx, eax; adc byte ptr [rcx], ch; ret 0x5589; 
0x00000000001950b4: retf 0x8348; ret 0x4804; 
0x0000000000195594: retf 0x8348; ret 0x4808; 
0x0000000000095e52: retf 0x8348; ret 0x4810; 
0x00000000001575d3: retf 0x8348; rol byte ptr [rcx + rcx*4], 0x50; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000017e225: retf 0x8349; ret 0x7f10; 
0x00000000001802f7: retf 0x8349; ret 0xf10; 
0x000000000014a992: retf 0x8349; ret; 
0x000000000010cdeb: retf 0x83ff; iretd; dec dword ptr [rcx + 0x75b8c6]; add byte ptr [rax], al; syscall; 
0x000000000010ce14: retf 0x83ff; iretd; dec dword ptr [rcx + 0x77b8c6]; add byte ptr [rax], al; syscall; 
0x0000000000102371: retf 0x840f; pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x63482c53], cl; ret 0x2de9; 
0x00000000000afd0f: retf 0x850f; call qword ptr [rsi]; 
0x00000000001130e6: retf 0x8548; div byte ptr [rsi + riz - 0x48]; sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000000a5e79: retf 0x8880; push rbp; ret 0xda89; 
0x000000000005b11b: retf 0x8948; push rsp; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x000000000006bf56: retf 0x8948; ret; 
0x00000000000780fd: retf 0x894c; fimul word ptr [rcx + rcx*4 - 0x19]; mov dword ptr [rbp - 0x4f8], r9d; mov qword ptr [rbp - 0x4f0], r10; call qword ptr [rax + 0x38]; 
0x0000000000077795: retf 0x894c; fimul word ptr [rcx + rcx*4 - 0x19]; mov dword ptr [rbp - 0x500], r9d; mov qword ptr [rbp - 0x4f0], r10; call qword ptr [rbx + 0x38]; 
0x000000000007a916: retf 0x894c; out 0x4c, al; mov edi, ebp; call qword ptr [rax + 0x38]; 
0x000000000011872f: retf 0x894d; ret 0x894d; 
0x000000000005526d: retf 0x8b48; adc cl, byte ptr [rax - 0x77]; push rbx; push -0xc117; jmp qword ptr [rsi + 0xf]; 
0x00000000000f8fa7: retf 0x8b48; jo 0xf8f30; ret 0x4801; 
0x00000000000f907e: retf 0x8b48; jo 0xf9007; ret 0x4801; 
0x00000000000f90f7: retf 0x8b48; jo 0xf9080; ret 0x4901; 
0x0000000000194e98: retf 0x920f; ret 0x894d; 
0x0000000000042930: retf 0x948; ret 0x8948; 
0x00000000000b99d1: retf 0x94c; ret 0xff48; 
0x000000000014405f: retf 0xa; syscall; 
0x0000000000155e99: retf 0xb775; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000d6f28: retf 0xb948; ret; 
0x000000000012f414: retf 0xb; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011f3cb: retf 0xc; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c5f6: retf 0xcb8; add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000190ada: retf 0xd975; vzeroupper; ret; 
0x000000000017eeb6: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001149ba: retf 0xd; movups xmmword ptr [rsp + 8], xmm0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010f378: retf 0xd; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114a0b: retf 0xd; test eax, eax; jne 0x114a40; mov eax, 0x72; syscall; 
0x00000000000a8742: retf 0xdb74; mov byte ptr [r11], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000a87ef: retf 0xde75; mov rax, r8; ret; 
0x000000000018bc17: retf 0xe175; vzeroupper; ret; 
0x000000000005b627: retf 0xe273; mov rax, r8; ret; 
0x00000000000a889f: retf 0xe675; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000000a86e4: retf 0xe975; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000119641: retf 0xed83; add ecx, ebx; ret; 
0x00000000000f9f82: retf 0xf285; dec dword ptr [rbp - 0x7b]; test byte ptr [rbx + rcx*4 + 0x54], 0x24; adc byte ptr [rdi], cl; xchg esp, eax; ret 0x8548; 
0x0000000000197092: retf 0xf41; xchg ebp, eax; ret 0xf45; 
0x00000000000b1d50: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf89c: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1f11: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000018e556: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000005be17: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000042aa2: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0xc4e8; 
0x00000000000cf470: retf 0xf66; xlatb; ret; 
0x00000000001983a2: retf 0xf805; jmp qword ptr [rsi + 0x2e]; 
0x000000000018852a: retf 0xfdc5; xlatb; ret; 
0x000000000006b7bb: retf 0xff88; jmp qword ptr [rsi + 0xf]; 
0x00000000000f8ac2: retf 0xffaf; dec dword ptr [rax - 0x77]; ret; 
0x0000000000179342: retf 0xfff1; jmp qword ptr [rsi + 0x2e]; 
0x000000000017cfb2: retf 0xfff6; jmp qword ptr [rsi + 0xf]; 
0x00000000000e9686: retf 0xfff7; jmp qword ptr [rsi + 0xf]; 
0x000000000017cfcc: retf 0xfff8; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000001300a2: retf 0xfff9; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cbaa8: retf 0xfffb; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000063932: retf 0xfffb; jmp qword ptr [rsi + 0x2e]; 
0x000000000013e892: retf 0xfffc; jmp qword ptr [rsi + 0x2e]; 
0x000000000008975a: retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x000000000003d072: retf 0xfffd; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c81e8: retf 0xfffe; dec dword ptr [rcx + 1]; ret; 
0x0000000000108d02: retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000033b83: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000000e8a72: retf 1; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000186ae2: retf; adc eax, 0x83480000; ret 0xe910; 
0x00000000000945f1: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000162c78: retf; add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; syscall; 
0x0000000000187ce2: retf; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000006e3f5: retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000141bc1: retf; and ebp, edi; jmp qword ptr [rsi + 0x66]; 
0x000000000013f07e: retf; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x0000000000085943: retf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000001873e2: retf; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011f338: retf; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f2bc: retf; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001876e2: retf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011496b: retf; or eax, 0x75c08500; mov eax, 0x71; syscall; 
0x0000000000027179: retf; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000198661: retf; pushfq; call 0x7da4cf67; adc al, ch; ret 0xe89c; 
0x00000000000240a9: retf; rcr dword ptr [rax + rax], cl; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000dad84: retf; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000e8b21: retf; sbb ecx, dword ptr [rip - 0x4b991800]; hlt; jmp qword ptr [rsi + 0xf]; 
0x0000000000152f10: retf; std; jmp qword ptr [rsi + 0x66]; 
0x000000000012d8b1: retf; test dword ptr [rbx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x00000000000bd7aa: retf; verw ax; fisub word ptr [rdi - 9]; jmp qword ptr [rsi + 0xf]; 
0x000000000012fad6: rol ax, 8; ret; 
0x0000000000148339: rol bh, 6; adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000ac12e: rol bl, 0x83; ret 0x6620; 
0x00000000000bbd51: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x00000000000aa4a2: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000018d196: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188816: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018475b: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x00000000000b1ea2: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x000000000004736b: rol byte ptr [rax + 0x775003f], 0x5b; ret; 
0x00000000000f0d4a: rol byte ptr [rax + rcx*2], 0x39; ret 0x840f; 
0x000000000002a549: rol byte ptr [rax + rcx*2], 0x39; ret; 
0x00000000000479a3: rol byte ptr [rax + rcx*2], 0x83; ret 0x4804; 
0x000000000002f110: rol byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000100463: rol byte ptr [rax - 0x3806c799], 6; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bcc34: rol byte ptr [rax*4 + 0x31ee75d2], 0xc0; ret; 
0x0000000000033d0c: rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x000000000008e6f9: rol byte ptr [rax], 0; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000018d8df: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000102aa5: rol byte ptr [rax], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000010bef8: rol byte ptr [rax], 1; add byte ptr [rax], al; add byte ptr [rbp - 0x76b7febd], cl; ret; 
0x00000000000dcfba: rol byte ptr [rax], cl; add byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000047ce0: rol byte ptr [rbp + 0x31], 0xc0; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000009f897: rol byte ptr [rbp + 0x480e74c0], 1; lea eax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000ac382: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x00000000000ac719: rol byte ptr [rbp + 0xfd274c0], 1; mov ebp, 0xf80148c0; ret; 
0x0000000000184c07: rol byte ptr [rbp + 0xfd474c0], 1; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000001353ed: rol byte ptr [rbp - 0x6bf0be40], cl; ret 0xf741; 
0x00000000001136b7: rol byte ptr [rbp - 0x74f7872e], 0x47; or byte ptr [rip + 0x100f], ah; ret; 
0x00000000001969d9: rol byte ptr [rbp - 0x7b], 0xc0; jne 0x196930; add rsp, 0x38; ret; 
0x0000000000184b72: rol byte ptr [rbx + 0x14820c0], 0xf8; vzeroupper; ret; 
0x0000000000184b82: rol byte ptr [rbx + 0x14840c0], 0xf8; vzeroupper; ret; 
0x0000000000184b92: rol byte ptr [rbx + 0x14860c0], 0xf8; ret; 
0x00000000000ee2d8: rol byte ptr [rbx + 0x3d740afb], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000010d125: rol byte ptr [rbx + 0x97404fa], 0xb8; sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x0000000000062f0d: rol byte ptr [rbx + 0xd74fff8], 0x44; mov eax, eax; ret; 
0x0000000000104cbd: rol byte ptr [rbx + 0xf4104f8], cl; xchg esp, eax; ret 0x8341; 
0x0000000000104e1d: rol byte ptr [rbx + 0xf4104f8], cl; xchg esp, eax; ret 0x8944; 
0x0000000000082ac3: rol byte ptr [rbx + 0xf74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000010f611: rol byte ptr [rbx + rbx*8 - 0x74b7c38c], 0x84; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000055beb: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000115890: rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000160b11: rol byte ptr [rbx - 0x6bf00008], cl; ret 0x1389; 
0x00000000000342c5: rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x00000000000f90eb: rol byte ptr [rbx - 0x7bf0f006], 0x3b; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9080; ret 0x4901; 
0x00000000000f9072: rol byte ptr [rbx - 0x7bf0f006], 0xfc; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9007; ret 0x4801; 
0x00000000000cfb42: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000014839a: rol byte ptr [rbx], 0x83; ret 0x8303; 
0x00000000000fc4bc: rol byte ptr [rcx + 0x29], 1; ret; 
0x00000000000dfb27: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; pop r14; ret; 
0x000000000009a49c: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000012cf7c: rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x00000000000bc081: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000102aa1: rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000fff1a: rol byte ptr [rcx + 0xf], 0x93; ret; 
0x00000000001353ef: rol byte ptr [rcx + 0xf], 0x94; ret 0xf741; 
0x00000000001093d4: rol byte ptr [rcx + 0xf], 0x94; shr ecx, 0xd2; idiv bh; dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret 1; 
0x00000000000a281c: rol byte ptr [rcx + 0xf], 0x95; ret 0x3840; 
0x00000000000bbd52: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x00000000000a87e2: rol byte ptr [rcx + 0xf], 1; xchg ebp, eax; ret 0xc839; 
0x00000000000a8892: rol byte ptr [rcx + 0xf], 1; xchg esp, eax; ret 0xf039; 
0x0000000000119df8: rol byte ptr [rcx + 0xf], cl; lahf; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x00000000000f075a: rol byte ptr [rcx + 0xf], cl; mov dh, 0x14; adc al, 0xf6; ret 0x7580; 
0x0000000000193610: rol byte ptr [rcx + 0xf], cl; xchg ebp, eax; ret 0xc031; 
0x000000000005fd86: rol byte ptr [rcx + 0xf], cl; xchg esp, eax; ret 0xf45; 
0x000000000012faf8: rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x000000000010d1c4: rol byte ptr [rcx + 1], 0xc0; cmp rdi, rsi; ja 0x10d1b8; mov eax, r8d; ret; 
0x00000000000810af: rol byte ptr [rcx + rbp - 0x36], 0x39; ret 0x2b7c; 
0x00000000000d068d: rol byte ptr [rcx + rbp - 0x40], 0x89; ret; 
0x0000000000085415: rol byte ptr [rcx + rcx*4 + 0x22], 0x48; add esp, 8; pop rbp; pop r12; ret; 
0x00000000000f248e: rol byte ptr [rcx + rcx*4 + 0x45], 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000013efe2: rol byte ptr [rcx + rcx*4 - 0x30], cl; ret; 
0x000000000011f88a: rol byte ptr [rcx + rcx*4 - 0x3e], 1; or eax, esi; wrpkru; xor eax, eax; ret; 
0x00000000000ee538: rol byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x000000000013c33a: rol byte ptr [rcx + rcx*4 - 0x40], cl; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000001575d6: rol byte ptr [rcx + rcx*4], 0x50; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bdfb5: rol byte ptr [rcx + rdi], 0xf2; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x000000000013c5db: rol byte ptr [rcx - 0x3a], 0x40; add al, byte ptr [rax]; ret; 
0x00000000000a55b8: rol byte ptr [rcx - 0x44], 2; add byte ptr [rax], al; add byte ptr [rbx - 0x307cc019], al; add byte ptr [rax - 0x78], 0x7d; ret 0x8944; 
0x00000000000a83da: rol byte ptr [rcx - 0x48], 2; add byte ptr [rax], al; add byte ptr [rbx + 0x458880c8], al; ret 0xd889; 
0x00000000000d4244: rol byte ptr [rcx - 0x5c28f401], 0; setb al; add eax, 0x16d; ret; 
0x0000000000047af2: rol byte ptr [rcx - 0x77], 0x1b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ff2b8: rol byte ptr [rcx - 0x77], 0x55; add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x00000000000375fe: rol byte ptr [rcx - 0x77], cl; ret 0xf7f7; 
0x0000000000129563: rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000000103f8e: rol byte ptr [rcx - 0x7d], 0xf8; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xd009; 
0x00000000000a4601: rol byte ptr [rcx - 0x7d], cl; ret 0x4105; 
0x00000000000a2e48: rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x00000000000cfb22: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000000a8731: rol byte ptr [rcx], 0x38; ret 0xf41; 
0x00000000000a86e1: rol byte ptr [rcx], 0x38; retf 0xe975; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x00000000000eeb84: rol byte ptr [rcx], 0x39; ret 0xee7f; 
0x00000000001537e5: rol byte ptr [rcx], 0x39; ret; 
0x00000000000ec3e6: rol byte ptr [rcx], 0x3b; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000bcb39: rol byte ptr [rcx], 0x42; mov ecx, dword ptr [rdi + rax*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x0000000000121fb3: rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000043f25: rol byte ptr [rcx], 0x66; shufps xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044065: rol byte ptr [rcx], 0x66; shufps xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000054332: rol byte ptr [rcx], 0x80; js 0x54338; add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x00000000000a88ca: rol byte ptr [rcx], 0x84; leave; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000a28d2: rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000000038c3e: rol byte ptr [rcx], 0x88; dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x000000000015402a: rol byte ptr [rcx], 0x89; ret; 
0x0000000000083ab4: rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20; 
0x00000000000438aa: rol byte ptr [rcx], 0xf7; ret 0; 
0x0000000000043f33: rol byte ptr [rcx], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000a884a: rol byte ptr [rcx], 0xf; mov esi, 0xd139070c; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a8812: rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je 0xa8810; ret; 
0x00000000000bc452: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x0000000000062355: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000117c09: rol byte ptr [rdi + 0xd7c4005], 0; cmp eax, 1; jg 0x117c16; ret; 
0x0000000000123031: rol byte ptr [rdi + rcx], 0xb7; ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x0000000000157553: rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157593: rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000cfb82: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb32: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000086baa: rol byte ptr [rdx], 0; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000017ca7a: rol byte ptr [rdx], cl; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000db0b1: rol byte ptr [rip + 0x16d], 0x29; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x0000000000122f01: rol byte ptr [rip + 0x48c0b70f], 0x8b; push rsp; ret 0x8940; 
0x00000000000cfb72: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000018b8e6: rol ch, 0x7e; jg 0x18b92c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018ba19: rol ch, 0x7e; jg 0x18ba5f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000001847df: rol ch, 1; std; xlatb; ret; 
0x000000000018883f: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000188586: rol ch, cl; std; xlatb; ret; 
0x0000000000116ed7: rol dh, 0x46; inc dword ptr [rax]; ret; 
0x00000000000cfacc: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000018bc10: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x000000000015f23d: rol dword ptr [rax + 0x48000001], 0x89; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000bbf5f: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000ebd45: rol dword ptr [rax + rcx*4 + 0x4c], 0x24; push 0x1f0f10eb; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008ce56: rol dword ptr [rax - 0x1a7f7f32], 1; jg 0x8cde1; inc byte ptr [rdx]; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000013c1a6: rol dword ptr [rax - 0x69f0fe07], cl; ret 0x8341; 
0x00000000000bcd71: rol dword ptr [rax], 0; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0461: rol dword ptr [rax], 0; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x0000000000190ad3: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x190ab6; vzeroupper; ret; 
0x000000000012d0d6: rol dword ptr [rax], cl; add byte ptr [rax], al; leave; ret; 
0x0000000000184710: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000ac154: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac607: rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x00000000000ac636: rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x0000000000105128: rol dword ptr [rbp + 0x31], 1; ror byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp - 0x75], 0x70; adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000014c752: rol dword ptr [rbp + 0xa], 1; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000a889c: rol dword ptr [rbp + 8], 0xca; jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000001847d3: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x00000000001882d3: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000000ac124: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000188a17: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000001846d3: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000000a87ec: rol dword ptr [rbp - 0x7c], 0xca; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000361b9: rol dword ptr [rbx + rcx*4 + 0x15], 1; iretd; mov dl, 0x1b; add byte ptr [rbx + 0x6c0f6600], cl; ret 0xf41; 
0x00000000000a8921: rol dword ptr [rcx + 0x39], 0xd0; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000007a172: rol dword ptr [rcx + 0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x00000000000c8f11: rol dword ptr [rcx + 0xf], 1; xchg ebx, eax; ret 0x844; 
0x00000000000a51c2: rol dword ptr [rcx + 0xf], cl; xchg ebx, eax; ret 0x845; 
0x0000000000047ce7: rol dword ptr [rcx + rcx*4 - 0x40], 0xf; adc dword ptr [rdi], eax; ret; 
0x0000000000029c2e: rol dword ptr [rcx - 0x77], cl; ret 0x5a58; 
0x00000000000cf189: rol dword ptr [rcx - 9], 0xd9; cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf168: rol dword ptr [rcx - 9], 0xd9; cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x000000000009f83a: rol dword ptr [rcx], 0; cmovne rax, rdx; ret; 
0x00000000000eeed2: rol dword ptr [rcx], 0x39; ret 0xc775; 
0x00000000000539cb: rol dword ptr [rcx], 0x88; add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x00000000000d683e: rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000b8ff9: rol dword ptr [rdi], cl; add byte ptr [rax], al; ret; 
0x000000000002b12e: rol dword ptr [rdx + rdx*8 - 0x157e2a87], 1; ret 0; 
0x000000000012036b: rol dword ptr [rdx - 9], 1; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x20; pop rbp; ret; 
0x000000000013c526: rol dword ptr [rdx], 0x45; mov dword ptr [rax], ebx; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000023a4c: rol eax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000012fad7: rol eax, 8; ret; 
0x0000000000043be1: rol eax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000184e95: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x000000000013a2fe: rol esi, 0x45; ret; 
0x000000000013a2fd: rol r14, 0x45; ret; 
0x0000000000023a4b: rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x0000000000043be0: rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000003284a: ror byte ptr [r8 - 0x73], 1; add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000041ee2: ror byte ptr [rax + 0x21], 0xd0; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000160a98: ror byte ptr [rax + 0x21], 1; add al, 0xd7; xor eax, eax; ret; 
0x000000000004f470: ror byte ptr [rax + 0x21], 1; ret 0x8548; 
0x0000000000041faa: ror byte ptr [rax + 0x21], 1; shl byte ptr [rsi + 0x48], 1; movd mm1, eax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000043be2: ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x00000000000abf3b: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11b: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce382: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce392: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000b1d57: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000cf84c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x00000000000a3871: ror byte ptr [rax + 0x29], cl; ret 0x8d4c; 
0x000000000009ef1d: ror byte ptr [rax + 0x39], 0x77; or byte ptr [rdx + 0xc], dh; mov qword ptr [rdi], rsi; ret; 
0x0000000000184733: ror byte ptr [rax + 0x39], 0xc2; jbe 0x184790; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184753: ror byte ptr [rax + 0x39], 0xc2; jbe 0x184790; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184773: ror byte ptr [rax + 0x39], 0xc2; jbe 0x184790; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184723: ror byte ptr [rax + 0x39], 0xc2; jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x000000000018c1e3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c240; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c203: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c240; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c223: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c240; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x0000000000188a63: ror byte ptr [rax + 0x39], 0xc6; jbe 0x188ae0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000010fd82: ror byte ptr [rax + 0x39], 0xd1; seta al; sbb eax, 0; ret; 
0x000000000010d1c7: ror byte ptr [rax + 0x39], 0xf7; ja 0x10d1b8; mov eax, r8d; ret; 
0x0000000000094c65: ror byte ptr [rax + 0x39], 0xf7; sete al; ret; 
0x0000000000094190: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000010d8f5: ror byte ptr [rax + 0x39], 1; ret 0x2d75; 
0x000000000009939e: ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000028962: ror byte ptr [rax + 0x39], cl; ret; 
0x000000000012ce52: ror byte ptr [rax + 0x48], 0x39; sal byte ptr [rbx + 0xf], 1; cmp qword ptr [rax + 8], rdi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000012d016: ror byte ptr [rax + 0xf], 0x44; ret 0x8948; 
0x00000000001435b4: ror byte ptr [rax + 0xf], 0x44; ret 0x8b48; 
0x00000000000d2236: ror byte ptr [rax + 0xf], 0x4f; ret 0x8b48; 
0x0000000000188386: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x0000000000184c5c: ror byte ptr [rax + 1], 0xf8; add rax, r8; vzeroupper; ret; 
0x00000000000ac25c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000018d098: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188728: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184858: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x00000000000ac778: ror byte ptr [rax + 1], 0xf8; add rax, rsi; ret; 
0x00000000000ac172: ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000018d153: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x00000000001847a3: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000003885b: ror byte ptr [rax + 1], 1; ret; 
0x000000000013c506: ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x00000000000b1d54: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000cf849: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x00000000000b1805: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000011fd7b: ror byte ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ac8c6: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b1c96: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c39: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x0000000000033c36: ror byte ptr [rax - 0x39], 1; ret 0xffff; 
0x000000000015cf68: ror byte ptr [rax - 0x39], 2; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000144e49: ror byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000005897a: ror byte ptr [rax - 0x39], cl; ret; 
0x000000000018d0a1: ror byte ptr [rax - 0x3f], 1; call 0x781195ab; ret; 
0x000000000018d159: ror byte ptr [rax - 0x3f], 1; call 0x78119663; ret; 
0x000000000018d17d: ror byte ptr [rax - 0x3f], 1; call 0x78119687; ret; 
0x000000000018d19d: ror byte ptr [rax - 0x3f], 1; call 0x781196a7; ret; 
0x000000000018d1e9: ror byte ptr [rax - 0x3f], 1; call 0x781196f3; ret; 
0x000000000018d28a: ror byte ptr [rax - 0x3f], 1; call 0x78119794; ret; 
0x000000000018d40e: ror byte ptr [rax - 0x3f], 1; call 0x78119918; ret; 
0x000000000018d432: ror byte ptr [rax - 0x3f], 1; call 0x7811993c; ret; 
0x000000000018d452: ror byte ptr [rax - 0x3f], 1; call 0x7811995c; ret; 
0x000000000018d472: ror byte ptr [rax - 0x3f], 1; call 0x7811997c; ret; 
0x000000000018d4a9: ror byte ptr [rax - 0x3f], 1; call 0x781199b3; ret; 
0x000000000018d4cd: ror byte ptr [rax - 0x3f], 1; call 0x781199d7; ret; 
0x000000000018d4ed: ror byte ptr [rax - 0x3f], 1; call 0x781199f7; ret; 
0x000000000018d539: ror byte ptr [rax - 0x3f], 1; call 0x78119a43; ret; 
0x0000000000136ed1: ror byte ptr [rax - 0x73], 0x15; cmpsd dword ptr [rsi], dword ptr [rdi]; mov eax, 0x448b0007; ret 0x4804; 
0x00000000000a05a1: ror byte ptr [rax - 0x73], 0x15; xlatb; mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000007553e: ror byte ptr [rax - 0x73], 0x34; ret; 
0x000000000009c51f: ror byte ptr [rax - 0x73], 0x35; sbb dword ptr [rcx - 0x76bbffef], edx; ret 0xa1e8; 
0x0000000000045355: ror byte ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; sahf; ret 0x3949; 
0x00000000000e5200: ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x00000000000ac162: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x00000000000ac192: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x00000000000ac672: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dh; ret; 
0x00000000000ac182: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x000000000009c245: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000000b2550: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x00000000000bcd08: ror byte ptr [rax - 0x73], 1; adc eax, 0xcf2d0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc848: ror byte ptr [rax - 0x73], 1; adc eax, 0xcfa60; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f8: ror byte ptr [rax - 0x73], 1; adc eax, 0xcfd00; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae8: ror byte ptr [rax - 0x73], 1; adc eax, 0xd0360; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc808: ror byte ptr [rax - 0x73], 1; adc eax, 0xd0410; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc958: ror byte ptr [rax - 0x73], 1; adc eax, 0xd06e0; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd8: ror byte ptr [rax - 0x73], 1; adc eax, 0xdbd70; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c78: ror byte ptr [rax - 0x73], 1; adc eax, 0xe2b80; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f8: ror byte ptr [rax - 0x73], 1; adc eax, 0xe4130; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb8: ror byte ptr [rax - 0x73], 1; adc eax, 0xe6650; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f808: ror byte ptr [rax - 0x73], 1; adc eax, 0xe8cf0; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f658: ror byte ptr [rax - 0x73], 1; adc eax, 0xe9070; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f698: ror byte ptr [rax - 0x73], 1; adc eax, 0xe91d0; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x000000000003284b: ror byte ptr [rax - 0x73], 1; add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000146385: ror byte ptr [rax - 0x73], 1; add eax, 0xaa773; add rsp, 8; ret; 
0x000000000018a332: ror byte ptr [rax - 0x73], 1; jl 0x18a34e; and ecx, ebp; ret; 
0x000000000018cc9b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018815b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000005b95e: ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000122bf8: ror byte ptr [rax - 0x75], 0x44; ret 0x8940; 
0x0000000000096860: ror byte ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000153ca6: ror byte ptr [rax - 0x75], 0x47; cmp byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x8948; 
0x000000000012d0c6: ror byte ptr [rax - 0x75], 0x4d; clc; xor rcx, qword ptr fs:[0x28]; jne 0x12d1ad; leave; ret; 
0x00000000001229a5: ror byte ptr [rax - 0x75], 0x54; ret 0x8940; 
0x00000000000dc203: ror byte ptr [rax - 0x75], 0x74; ret; 
0x0000000000041e59: ror byte ptr [rax - 0x75], 1; add eax, 0x1aa00f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000015fafc: ror byte ptr [rax - 0x75], 1; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000009e923: ror byte ptr [rax - 0x75], 1; push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x000000000015fa81: ror byte ptr [rax - 0x75], 5; xlatb; ret; 
0x00000000000557b3: ror byte ptr [rax - 0x77], 0x34; ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000009ef3b: ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000086e99: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918f2: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000a863c: ror byte ptr [rax - 0x77], 0xa; ret; 
0x00000000000a2c38: ror byte ptr [rax - 0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x00000000000627a5: ror byte ptr [rax - 0x77], 0xd8; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x00000000000d1289: ror byte ptr [rax - 0x77], 1; and byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x0000000000037fee: ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018cf8d: ror byte ptr [rax - 0x77], 1; mul dword ptr [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000008f2e5: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x00000000000d0846: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000040fa2: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000000898f9: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000014d12a: ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x000000000011976a: ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000014a8fa: ror byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000013b94d: ror byte ptr [rax - 0x77], cl; xor eax, eax; ret; 
0x00000000000908a5: ror byte ptr [rax - 0x7b], 0xd2; jne 0x908b0; ret; 
0x00000000001252f0: ror byte ptr [rax - 0x7b], 0xdb; je 0x125308; pop rbx; pop rbp; pop r12; ret; 
0x000000000012792a: ror byte ptr [rax - 0x7b], 0xdb; jne 0x127938; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047460: ror byte ptr [rax - 0x7b], 0xff; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x000000000019360d: ror byte ptr [rax - 0x7b], cl; rol byte ptr [rcx + 0xf], cl; xchg ebp, eax; ret 0xc031; 
0x000000000010512b: ror byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp - 0x75], 0x70; adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000001196ef: ror byte ptr [rax - 0x7d], 0x3e; add byte ptr [rax - 0x77], cl; je 0x119700; pop rbx; ret; 
0x000000000008cd28: ror byte ptr [rax - 0x7d], 0x7f; sbb byte ptr [rax], al; setne r8b; mov eax, r8d; ret; 
0x0000000000095df4: ror byte ptr [rax - 0x7d], 0xc0; adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000018d193: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188813: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847c3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x00000000001887f3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001847b3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000001004ff: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000009ce43: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000008dfd8: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x000000000010d3b9: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000055686: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000048073: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000157d6d: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000000dd68a: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; ret; 
0x000000000014de21: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x00000000000246d7: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000148c0e: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000014a0d5: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000000522b4: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000010fb97: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000008e465: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000009cf79: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop r12; ret; 
0x0000000000062e28: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000ac6d2: ror byte ptr [rax - 0x7d], 0xea; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac682: ror byte ptr [rax - 0x7d], 0xea; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184bc2: ror byte ptr [rax - 0x7d], 0xea; and byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000ac6b2: ror byte ptr [rax - 0x7d], 0xea; and byte ptr [rax + 1], cl; ret 0x347c; 
0x00000000000ac692: ror byte ptr [rax - 0x7d], 0xea; xor byte ptr [rax + 1], cl; ret 0x547c; 
0x0000000000157d65: ror byte ptr [rax - 0x7d], 0xf8; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000001427c7: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000004178c: ror byte ptr [rax - 0x7d], 1; ret 0x4c01; 
0x00000000000813e3: ror byte ptr [rax - 0x7d], 1; ret 0x8b04; 
0x0000000000120a08: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000002a546: ror byte ptr [rax - 0x7d], 1; rol byte ptr [rax + rcx*2], 0x39; ret; 
0x00000000000e362f: ror byte ptr [rax - 0x7d], 1; ror byte ptr [rax], 0x83; ret 0x4f08; 
0x0000000000046c1b: ror byte ptr [rax - 0x7d], 5; mov esp, 0x1001aa6; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000587a0: ror byte ptr [rax - 0x7d], cl; jge 0x587a5; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x00000000000cb8c0: ror byte ptr [rax - 0x7d], cl; jge 0xcb8c5; add byte ptr [rdi], cl; xchg ebp, eax; ret 0x941; 
0x00000000000b75b6: ror byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000080d1e: ror byte ptr [rax - 0x7d], cl; ret 0x8901; 
0x00000000000fdded: ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bb92b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000043020: ror byte ptr [rax - 0x7f], 0xc4; sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x0000000000184ae9: ror byte ptr [rax - 0x7f], 0xea; add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8c0f; 
0x00000000000e5188: ror byte ptr [rax - 0x7f], 0xfa; cmc; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000000e51a4: ror byte ptr [rax - 0x7f], 0xfa; push rsp; push rbx; setne al; ret; 
0x00000000000bb928: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb925: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000011767a: ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd810d], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000011764a: ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd813d], eax; mov rax, r8; ret; 
0x00000000001536a5: ror byte ptr [rax], 0x83; js 0x1536a2; push qword ptr [rbx + rdi*2 - 0x7d]; ret 0x3901; 
0x00000000000e3632: ror byte ptr [rax], 0x83; ret 0x4f08; 
0x00000000000bb9e4: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x00000000000d13fa: ror byte ptr [rbp + 0x480f0750], 1; ret 0xb70f; 
0x000000000005f22a: ror byte ptr [rbp - 0x7b], cl; inc dword ptr [rcx + 0xf]; xchg esp, eax; ret 0x8545; 
0x000000000018c9c7: ror byte ptr [rbx + 0x343b0e34], 0xa; jne 0x18c769; vzeroupper; ret; 
0x000000000018c4b4: ror byte ptr [rbx + 0x3b203e4c], 0x4c; cmp ah, byte ptr [rax]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c482: ror byte ptr [rbx + 0x3c3b0e3c], 0xa; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c908: ror byte ptr [rbx + 0x3c3b0e3c], 0xa; jne 0x18c769; vzeroupper; ret; 
0x000000000018bda1: ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x000000000018c67b: ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c792: ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c769; vzeroupper; ret; 
0x000000000018c94b: ror byte ptr [rbx + 0xc3b3e0c], 0x3a; jne 0x18c769; vzeroupper; ret; 
0x00000000000c7c09: ror byte ptr [rbx - 0x74b77cfc], 1; pop rbp; mov al, 0x89; ret 0xff25; 
0x00000000001330a1: ror byte ptr [rbx], 1; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000000e50ce: ror byte ptr [rbx], 1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f7b: ror byte ptr [rbx], 1; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e50cc: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f79: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000156536: ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x00000000000abe93: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000127784: ror byte ptr [rcx + 0x2b], 1; cmp byte ptr [r8 + 0x39], r9b; ret; 
0x000000000002d898: ror byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000010d958: ror byte ptr [rcx + 0x39], 1; ret 0x2a75; 
0x000000000010c4fa: ror byte ptr [rcx + 0x5d5b0453], 0x41; pop rsp; ret; 
0x00000000000f23c7: ror byte ptr [rcx + 0x5d5b307d], 0x41; pop rsp; ret; 
0x00000000000f0b82: ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x00000000000a31ce: ror byte ptr [rcx + 1], 1; ret; 
0x0000000000060ef4: ror byte ptr [rcx + rcx*4 + 0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x00000000000295e6: ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000014a5fd: ror byte ptr [rcx + rcx*4 + 7], 1; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000038583: ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd893: ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046c8a: ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x00000000001532fa: ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; ret; 
0x00000000000a6075: ror byte ptr [rcx + rdi - 0x21], 0xf; xchg ebx, eax; ret 0x841; 
0x00000000000b1aac: ror byte ptr [rcx + riz - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000041ba8: ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000002fb0a: ror byte ptr [rcx - 0x2d94b73b], 1; push -0x1605feb4; ret 0xfffe; 
0x00000000000a0b03: ror byte ptr [rcx - 0x39], cl; ret; 
0x00000000000d4aa9: ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x000000000014a5a4: ror byte ptr [rcx - 0x3f], 0xe0; or byte ptr [rax - 0x77], cl; ret 0x3149; 
0x000000000005f088: ror byte ptr [rcx - 0x3f], 0xe3; and byte ptr [rcx + 9], cl; ret; 
0x00000000000c9beb: ror byte ptr [rcx - 0x73], cl; jl 0xc9c29; adc al, 0xf; xchg ebx, eax; ret 0x3948; 
0x00000000000bc3aa: ror byte ptr [rcx - 0x765df00f], 1; ret 0xe283; 
0x000000000011a55e: ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000014a907: ror byte ptr [rcx - 0x77], cl; ret 0xc149; 
0x000000000010c3d2: ror byte ptr [rcx - 0x7cb7fbad], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b7193: ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x000000000002bf6c: ror byte ptr [rcx - 0x7d], cl; ret 0x4b01; 
0x0000000000189538: ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x00000000000a5e09: ror byte ptr [rcx - 0x7d], cl; ret 0x8806; 
0x000000000011eeb0: ror byte ptr [rcx], 0xd0; ret; 
0x0000000000089ef2: ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x0000000000095dfc: ror byte ptr [rdi], 0x11; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x00000000000928e8: ror byte ptr [rdi], 0x11; cmp r11b, r13b; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000008e54d: ror byte ptr [rdi], 0x11; or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000093668: ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x00000000001276da: ror byte ptr [rdi], 0x11; xor byte ptr [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2e3c: ror byte ptr [rdi], 0x1f; add byte ptr [rbp + 1], al; fiadd dword ptr [rbx + 0x634901c0]; rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x000000000010cd52: ror byte ptr [rdi], 0x44; ret 0x8b48; 
0x000000000011cd84: ror byte ptr [rdi], 0x44; ret 0xfc3; 
0x0000000000118ed5: ror byte ptr [rdi], 0x45; ret 0xc084; 
0x000000000004739e: ror byte ptr [rdi], 0x48; ret 0xfc3; 
0x00000000001141bb: ror byte ptr [rdi], 0x49; ret 0x48c3; 
0x00000000000ac7ac: ror byte ptr [rdi], 0x84; cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000000082831: ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000013f751: ror byte ptr [rdi], 0x84; mov eax, 0xf000004; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000058d61: ror byte ptr [rdi], 0x84; or rax, 0xffffffff89410000; ret 0xd231; 
0x000000000004cec1: ror byte ptr [rdi], 0x84; push rax; or eax, 0x89410000; ret 0xd231; 
0x0000000000121594: ror byte ptr [rdi], 0x84; ret 0; 
0x000000000006ddca: ror byte ptr [rdi], 0x84; ret 0xa; 
0x00000000000fc77a: ror byte ptr [rdi], 0x84; ret 0xfffe; 
0x000000000009d5de: ror byte ptr [rdi], 0x84; ret; 
0x0000000000082930: ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000065667: ror byte ptr [rdi], 0x84; sbb bl, byte ptr [rip - 0x7cb80000]; ret 0x3c01; 
0x0000000000118dea: ror byte ptr [rdi], 0x84; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000ac576: ror byte ptr [rdi], 0x85; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000295de: ror byte ptr [rdi], 0x85; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000011259d: ror byte ptr [rdi], 0x85; cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rbx + 0x54e83c7d], cl; ret 0xffff; 
0x0000000000098d05: ror byte ptr [rdi], 0x85; jl 0x98d0a; add byte ptr [rax], al; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x00000000000b5c11: ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000005be32: ror byte ptr [rdi], 0x85; push rdi; or al, 0; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000082fd7: ror byte ptr [rdi], 0x85; ret 0; 
0x00000000000b2557: ror byte ptr [rdi], 0x85; ret 0x13; 
0x0000000000111947: ror byte ptr [rdi], 0x85; ret 0xfffd; 
0x000000000011acc4: ror byte ptr [rdi], 0x85; ret 4; 
0x000000000002823c: ror byte ptr [rdi], 0x85; ret; 
0x000000000017cfaf: ror byte ptr [rdi], 0x85; retf 0xfff6; jmp qword ptr [rsi + 0xf]; 
0x00000000000dad81: ror byte ptr [rdi], 0x85; retf; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000ac61e: ror byte ptr [rdi], 0x85; stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x0000000000184a5c: ror byte ptr [rdi], 0x85; sub eax, 0xc5000001; std; xlatb; ret; 
0x00000000000c7220: ror byte ptr [rdi], 0x89; ret 1; 
0x000000000007bbbc: ror byte ptr [rdi], 0x8c; ret 0xffed; 
0x000000000009ef05: ror byte ptr [rdi], 0x92; ret 0xf083; 
0x00000000001054af: ror byte ptr [rdi], 0x94; ret 0x1589; 
0x000000000006a767: ror byte ptr [rdi], 0x94; ret 0x68e9; 
0x000000000013f8a2: ror byte ptr [rdi], 0x94; ret 0xa3c; 
0x000000000010f5d4: ror byte ptr [rdi], 0x94; ret 0xd321; 
0x00000000000d0a49: ror byte ptr [rdi], 0x94; ret 0xd338; 
0x00000000000304e8: ror byte ptr [rdi], 0x94; ret; 
0x00000000001004fc: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000522b1: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000062e25: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000010fa58: ror byte ptr [rdi], 0x95; ret 0xd321; 
0x000000000014de1e: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x00000000000246d4: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000014aeae: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000014a140: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000062e67: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbp; ret; 
0x00000000000e51fd: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x000000000014a143: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000052b36: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e6a: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbp; ret; 
0x00000000001028b3: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000bbc99: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000000d13f4: ror byte ptr [rdi], 1; mov bh, 0x47; adc byte ptr [rcx], ch; ror byte ptr [rbp + 0x480f0750], 1; ret 0xb70f; 
0x0000000000040fb7: ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0x40f98; ret; 
0x00000000000f142f: ror byte ptr [rdi], 1; mov dh, 0x14; adc dword ptr [rcx], eax; ret 0x428d; 
0x000000000009c267: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x9c258; sub rax, 0x10; ret; 
0x00000000000a1822: ror byte ptr [rdi], 1; test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000ac816: ror byte ptr [rdi], 1; test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x00000000000e6061: ror byte ptr [rdi], 1; xchg ebx, eax; ret 0x841; 
0x0000000000157f95: ror byte ptr [rdi], 1; xchg ebx, eax; ret 0xd108; 
0x0000000000113605: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x113618; ret; 
0x000000000012e7aa: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x00000000000e8628: ror byte ptr [rdi], cl; mov byte ptr [rcx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002a3e3: ror byte ptr [rdi], cl; mov byte ptr [rsi], cl; add al, 0; add bh, dh; ret 0xf800; 
0x000000000002a96b: ror byte ptr [rdi], cl; mov ch, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x00000000000ea36f: ror byte ptr [rdi], cl; mov dl, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007adb9: ror byte ptr [rdi], cl; mov dl, cl; sbb al, 0; add dh, dh; ret 0xf40; 
0x00000000000ac71d: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x00000000001054aa: ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg esp, eax; ret 0x1589; 
0x000000000016112a: ror byte ptr [rdi], cl; test bh, bh; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001610f6: ror byte ptr [rdi], cl; test byte ptr [rbx], dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000cf72f: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000b1dfb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000000a183a: ror byte ptr [rdi], cl; test byte ptr [rsi], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000090384: ror byte ptr [rdi], cl; test ch, dh; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x0000000000194de3: ror byte ptr [rdi], cl; test dh, bh; add eax, dword ptr [rax]; add byte ptr [rdi + rcx - 0x43], cl; ret 0x8349; 
0x000000000006ca62: ror byte ptr [rdi], cl; xchg ebp, eax; ret 0x8341; 
0x0000000000192e2f: ror byte ptr [rdi], cl; xchg ebp, eax; ret 0xd348; 
0x000000000009ef0e: ror byte ptr [rdi], cl; xchg esp, eax; ret 0xd084; 
0x00000000001220ab: ror byte ptr [rdx - 0x73], 4; std; sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000053bc6: ror byte ptr [rdx], 0x84; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x2074; 
0x0000000000102578: ror byte ptr [rsi], 1; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x000000000011fe07: ror byte ptr gs:[rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000b19aa: ror dword ptr [rax + 0x21], 0xce; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000288ed: ror dword ptr [rax + 0x39], 1; ret; 
0x0000000000155e96: ror dword ptr [rax + 0x39], 1; retf 0xb775; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000009634e: ror dword ptr [rax + 0xf], 1; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x00000000000481de: ror dword ptr [rax + 1], 0xf0; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000183a82: ror dword ptr [rax + 1], 0xf8; ret; 
0x000000000010bc73: ror dword ptr [rax + 1], 1; ret 0x8948; 
0x00000000000d05f5: ror dword ptr [rax + 1], cl; ret 0x1b8; 
0x000000000012eac9: ror dword ptr [rax + 9], cl; retf 0x3948; ret 0x576; 
0x000000000012e955: ror dword ptr [rax + 9], cl; retf 0x8348; in al, dx; or byte ptr [rax + 0x39], cl; ret 0x976; 
0x000000000011fc8b: ror dword ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000160a6e: ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160a3e: ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x00000000001537b4: ror dword ptr [rax - 0x39], 1; ret 0xfffe; 
0x00000000000587ab: ror dword ptr [rax - 0x39], 1; ret 0xffff; 
0x00000000000a3f22: ror dword ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000b1d49: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000044f1d: ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3949; 
0x00000000001149b5: ror dword ptr [rax - 0x75], 5; ret; 
0x00000000000f1d6c: ror dword ptr [rax - 0x75], cl; sub cl, byte ptr [rax - 0x7d]; ret; 
0x000000000010d6fd: ror dword ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000119827: ror dword ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000086e1d: ror dword ptr [rax - 0x7b], 0xd2; jne 0x86e10; ret; 
0x00000000000916e5: ror dword ptr [rax - 0x7b], 0xd2; jne 0x916d8; ret; 
0x00000000000e9f0b: ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x00000000000557b7: ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000001536a2: ror dword ptr [rax - 0x7d], 0xc0; or byte ptr [rbx + 0x74fff878], al; jnp 0x153631; ret 0x3901; 
0x0000000000135d44: ror dword ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x00000000000b1c92: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c35: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x0000000000040a4a: ror dword ptr [rax - 0x7d], 1; ret 0x4001; 
0x00000000000924a2: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000184083: ror dword ptr [rax - 0x7d], 1; ret 0x4c20; 
0x00000000001840a3: ror dword ptr [rax - 0x7d], 1; ret 0x4c40; 
0x00000000001840c3: ror dword ptr [rax - 0x7d], 1; ret 0x4c60; 
0x000000000011676e: ror dword ptr [rax - 0x7d], 1; ret; 
0x00000000001215d6: ror dword ptr [rax - 0x7d], cl; ret 0x4c02; 
0x00000000000bc253: ror dword ptr [rbp - 0xb869], cl; dec dword ptr [rax + 0x63]; ret 0xfac1; 
0x000000000012edc5: ror dword ptr [rbx + 0x40894106], 4; test eax, eax; jne 0x12ed79; mov rax, rdi; ret; 
0x0000000000132fd3: ror dword ptr [rbx], 1; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000926b5: ror dword ptr [rcx + 0x1b80045], 0; add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000009083b: ror dword ptr [rcx + 0x58d4807], 1; ret; 
0x00000000000fc4b9: ror dword ptr [rcx + 0x63], cl; rol byte ptr [rcx + 0x29], 1; ret; 
0x00000000000bc12d: ror dword ptr [rcx + 0xe181d0], 0xfc; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000195307: ror dword ptr [rcx + 0xf], cl; mov edx, 0x94d3ff3; ret; 
0x0000000000183ece: ror dword ptr [rcx + rax - 0x3f], 1; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000005b6ae: ror dword ptr [rcx + rcx*4 - 0x40], 1; ret; 
0x0000000000056ae8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000db0b8: ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x000000000014a942: ror dword ptr [rcx - 0x77], 1; ret 0xc149; 
0x000000000014a98f: ror dword ptr [rcx - 0x77], 1; retf 0x8349; ret; 
0x0000000000190bbb: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000062e9b: ror dword ptr [rdi - 0x2708ffe8], 1; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000091f04: ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000009839a: ror dword ptr [rdi], 0x11; push 0x6e0f4966; ret; 
0x00000000000874f9: ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000423f8: ror dword ptr [rdi], 0x54; add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d3: ror dword ptr [rdi], 0x54; add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x000000000018e148: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e854: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e626: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x000000000018f750: ror dword ptr [rdi], 0x85; cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e5a6: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000018e8e4: ror dword ptr [rdi], 0x85; je 0x18e8eb; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e3db: ror dword ptr [rdi], 0x85; jno 0x18e3e7; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e4a3: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e120: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007dcda: ror dword ptr [rdi], 0x8d; out dx, eax; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000012fd03: ror dword ptr [rdi], 0x97; ret 0x840; 
0x0000000000118ed2: ror dword ptr [rdi], 0x9a; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000ac5a5: ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000184a7e: ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000126bae: ror dword ptr [rdi], 1; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x00000000000e097e: ror dword ptr [rdi], 1; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000c4b12: ror dword ptr [rdi], 1; popfq; ret 0x840; 
0x0000000000194d4d: ror dword ptr [rdi], 1; test byte ptr [rdx + rax - 0x7ab80000], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000000f47c0: ror dword ptr [rdi], 1; xchg esp, eax; ret 0xf66; 
0x00000000000983c9: ror dword ptr [rdi], cl; xchg ebp, eax; ret 0xb60f; 
0x0000000000196c45: ror dword ptr [rdi], cl; xchg esp, eax; ret; 
0x000000000014c202: ror dword ptr [rdx + 0xa], 0; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000000fec98: ror dword ptr [rsi], cl; add byte ptr [rbx + rcx*4], cl; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x0000000000118ed1: ror dword ptr cs:[rdi], 0x9a; ror byte ptr [rdi], 0x45; ret 0xc084; 
0x00000000000d4240: ror edi, 4; xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x00000000000d4232: ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x000000000011f1ab: ror esp, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000086e1c: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x86e10; ret; 
0x00000000000916e4: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x916d8; ret; 
0x000000000005b4bf: rstorssp dword ptr [r8 - 8]; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x000000000014c576: sahf; adc ecx, dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000013b6ae: sahf; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x0000000000120c9e: sahf; cmp edi, esi; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x00000000000df846: sahf; fist word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000e1a66: sahf; mov ebp, 0x89480010; ret 0x8548; 
0x000000000009f8a6: sahf; not byte ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000185cfe: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000057490: sahf; ret 0x3948; 
0x000000000004535b: sahf; ret 0x3949; 
0x000000000014472e: sahf; ret; 
0x0000000000088531: sahf; stc; dec dword ptr [rbp + rcx*4 + 0x2c]; and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x0000000000144729: sal al, 0xf; mov cl, 0x15; sahf; ret; 
0x0000000000052b39: sal bh, 0xd8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018bd8e: sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x0000000000062e6d: sal bh, 0xd8; pop rbp; ret; 
0x00000000000246de: sal bh, 0xd8; ret; 
0x00000000000aa327: sal bh, 1; ret 0x8000; 
0x00000000000aa1e7: sal bh, 1; ret 0xc000; 
0x00000000000aa0a7: sal bh, 1; ret 0xe000; 
0x00000000000a9f67: sal bh, 1; ret 0xf000; 
0x00000000000a9e27: sal bh, 1; ret 0xf800; 
0x00000000000a9ce7: sal bh, 1; ret 0xfc00; 
0x00000000000a9ba7: sal bh, 1; ret 0xfe00; 
0x00000000000a9a67: sal bh, 1; ret 0xff00; 
0x00000000000a9927: sal bh, 1; ret 0xff80; 
0x00000000000a97e7: sal bh, 1; ret 0xffc0; 
0x00000000000a96a7: sal bh, 1; ret 0xffe0; 
0x00000000000a9567: sal bh, 1; ret 0xfff0; 
0x00000000000a9427: sal bh, 1; ret 0xfff8; 
0x00000000000a92e7: sal bh, 1; ret 0xfffc; 
0x00000000000a91a7: sal bh, 1; ret 0xfffe; 
0x000000000005ea34: sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000195365: sal bh, cl; shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000042451: sal bl, 0xf; pop rcx; add eax, 0x17af36; ret; 
0x00000000001848ef: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000951da: sal byte ptr [rax + 0x15], cl; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x0000000000115add: sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd9b59; mov eax, 1; add rsp, 8; ret; 
0x0000000000037fe9: sal byte ptr [rax + rbx + 0xf], 0xb6; ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000005b3c6: sal byte ptr [rax + rcx + 0x49], 0x83; ret; 
0x000000000009f415: sal byte ptr [rax + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000011cbe4: sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x00000000000a2890: sal byte ptr [rax + rdx*8 + 0x3c], 0x3d; mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x000000000014b09d: sal byte ptr [rbp + 0x10], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000157d35: sal byte ptr [rbp + 0x10], cl; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000090fed: sal byte ptr [rbp + 0x10], cl; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x000000000008d36c: sal byte ptr [rbp + 0x11], 0x48; mov edi, ebp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000d4a8c: sal byte ptr [rbp + 0x11], 0x4c; mov eax, eax; add rsp, 8; ret; 
0x000000000014af6b: sal byte ptr [rbp + 0x12], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009f85b: sal byte ptr [rbp + 0x12], 0x48; lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000422fa: sal byte ptr [rbp + 0x13], 1; and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000006300f: sal byte ptr [rbp + 0x16], 0x48; mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000013c32c: sal byte ptr [rbp + 0x19], 0x44; mov eax, eax; ret; 
0x000000000008ba72: sal byte ptr [rbp + 0x23], cl; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018d3f2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000188a52: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x00000000000de191: sal byte ptr [rbp + 0x2c], 0x83; imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000de238: sal byte ptr [rbp + 0x2d], 0x83; imul eax, dword ptr [rcx + rax], 0x5b; pop rbp; pop r12; ret; 
0x00000000000df4cd: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0x10fe09; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000014c1fd: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xa4ac1; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013891d: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xb7b79; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013442d: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xbbe89; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000132fcd: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xbd181; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001259cd: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xca389; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000123cfd: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xcbea1; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000006104f: sal byte ptr [rbp + 0x36], 0x83; sub eax, 0x18d6f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x000000000015cc74: sal byte ptr [rbp + 0x39], 0x83; sub eax, 0x949da; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000013228a: sal byte ptr [rbp + 0x3b], 0x83; sub eax, 0xbde14; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013163a: sal byte ptr [rbp + 0x3b], 0x83; sub eax, 0xbe99c; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001258f2: sal byte ptr [rbp + 0x3b], 0x83; sub eax, 0xca410; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x000000000008ac3d: sal byte ptr [rbp + 0x40], cl; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ac3a2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000196c5b: sal byte ptr [rbp + 0x55], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000057d4b: sal byte ptr [rbp + 0x62], 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000183a13: sal byte ptr [rbp + 0x6a], cl; test esi, esi; je 0x1839f8; xor eax, eax; ret; 
0x0000000000197074: sal byte ptr [rbp + 0x7b], cl; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000148232: sal byte ptr [rbp + 0xb], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009a05b: sal byte ptr [rbp + 0xb], 0xc7; add eax, 0x154e10; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000123352: sal byte ptr [rbp + 0xb], cl; ret; 
0x000000000010c5d9: sal byte ptr [rbp + 0xc], 0x8b; push rbx; add al, 0xeb; ret; 
0x00000000000938f9: sal byte ptr [rbp + 0xc], cl; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000083f39: sal byte ptr [rbp + 0xc], cl; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x000000000012ced8: sal byte ptr [rbp + 0xd], 0x48; cmp dword ptr [rdi], 0; je 0x12cef0; ret; 
0x00000000001463d6: sal byte ptr [rbp + 0xf], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000147536: sal byte ptr [rbp + 0xf], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014de5e: sal byte ptr [rbp + 0xf], 0xc7; add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000627ab: sal byte ptr [rbp + 2], 0x5b; ret; 
0x00000000000bbf56: sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x00000000000e2ec8: sal byte ptr [rbp + 5], 0x48; add esp, 8; ret; 
0x00000000000908a8: sal byte ptr [rbp + 5], cl; ret; 
0x0000000000063087: sal byte ptr [rbp + 6], cl; sub dword ptr [rdi], 1; ret; 
0x0000000000033d9e: sal byte ptr [rbp + 7], 0x44; mov eax, eax; ret; 
0x000000000014123d: sal byte ptr [rbp + 8], 0x5b; pop rbp; pop r12; ret; 
0x00000000000fa7a2: sal byte ptr [rbp + rax + 0x48], 0x39; ret 0xc675; 
0x0000000000188380: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x00000000000cf7b0: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000cfac8: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000000e82cf: sal byte ptr [rbp - 0x12], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bcc37: sal byte ptr [rbp - 0x12], cl; xor eax, eax; ret; 
0x00000000000bb700: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x00000000000e83d0: sal byte ptr [rbp - 0x13], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086e20: sal byte ptr [rbp - 0x13], cl; ret; 
0x00000000000a87b2: sal byte ptr [rbp - 0x15], 1; mov rax, r8; ret; 
0x000000000012ec74: sal byte ptr [rbp - 0x17], cl; sub rsp, 8; call 0x12e340; ret; 
0x000000000013efd6: sal byte ptr [rbp - 0x1c], 0x44; mov eax, edx; ret; 
0x000000000012816c: sal byte ptr [rbp - 0x1c], 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000000aa64b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000094fb6: sal byte ptr [rbp - 0x21], cl; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000bccd1: sal byte ptr [rbp - 0x24], cl; ret; 
0x0000000000040fbc: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000030079: sal byte ptr [rbp - 0x2c], 0x41; mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000115d29: sal byte ptr [rbp - 0x2c], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000115e0a: sal byte ptr [rbp - 0x2d], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000013b94b: sal byte ptr [rbp - 0x2e], 1; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000001847dd: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x0000000000041e57: sal byte ptr [rbp - 0x30], cl; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000dd767: sal byte ptr [rbp - 0x31], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001847d5: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x00000000001882dd: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x000000000012edcd: sal byte ptr [rbp - 0x57], 0x48; mov eax, edi; ret; 
0x00000000000f15fe: sal byte ptr [rbp - 0x68], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001882d5: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x0000000000102a7a: sal byte ptr [rbp - 0x69], cl; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x0000000000055625: sal byte ptr [rbp - 0x7c], 0x48; sub edx, 1; jne 0x55610; mov eax, 1; ret; 
0x000000000009e92a: sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000bdfbc: sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000093980: sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000157638: sal byte ptr [rbx + 0xd], 1; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000012ce56: sal byte ptr [rbx + 0xf], 1; cmp qword ptr [rax + 8], rdi; jne 0x12ce50; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000001532f5: sal byte ptr [rbx + rax + 0x49], 1; mov eax, eax; mov rax, r8; pop rbx; ret; 
0x00000000000dd796: sal byte ptr [rbx + rbp + 0x5b], 0x5d; pop r12; ret; 
0x000000000010512e: sal byte ptr [rbx + rbp - 0x75], 0x70; adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000896d2: sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x00000000000c0172: sal byte ptr [rbx + rbp*4 + 0x48], 0x89; ret 0x894c; 
0x0000000000184852: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x0000000000033df1: sal byte ptr [rbx + rcx + 0x23], 0x77; adc byte ptr [rax - 0x73], cl; adc al, 0xb7; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000000cf152: sal byte ptr [rbx + rcx + 0x45], 0x31; leave; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x0000000000117675: sal byte ptr [rbx + rcx + 0x48], 0x83; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd810d], eax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117645: sal byte ptr [rbx + rcx + 0x48], 0x83; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd813d], eax; mov rax, r8; ret; 
0x000000000011d002: sal byte ptr [rbx + rcx + 0x48], cl; cmp edi, edx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x00000000001532c1: sal byte ptr [rcx + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000047574: sal byte ptr [rcx + rbx + 0x48], 0x8b; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000b1c9c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000000a2292: sal byte ptr [rcx + riz*2 + 0x48], 3; add byte ptr [r8 - 0x77], r9b; ret 0x14eb; 
0x0000000000115f33: sal byte ptr [rcx], 0xc0; pop rbp; ret; 
0x000000000010259d: sal byte ptr [rcx], 0xc9; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bd: sal byte ptr [rcx], 0xc9; push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000018cdd3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188293: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cdf3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882b3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018ce31: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882f1: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cdb3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188273: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000009418e: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000012bdbb: sal byte ptr [rcx], 1; sal dh, 0x43; sbb al, 0x20; je 0x12bdd0; pop rbx; ret; 
0x00000000000bc213: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x000000000012eb5e: sal byte ptr [rdi + 0x11], 1; lea rdx, [rip + 0xc2788]; call 0xbd470; add rsp, 8; ret; 
0x0000000000148216: sal byte ptr [rdi + rax + 0x31], 0xc0; ret; 
0x00000000001533b5: sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x0000000000153485: sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153555: sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x0000000000126ba9: sal byte ptr [rdi + rcx + 0x48], 0x89; ror dword ptr [rdi], 1; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x3c01; 
0x00000000000ede6f: sal byte ptr [rdi + rdi - 0x7d], 0xc1; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000106fb3: sal byte ptr [rdi + riz*4 + 0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x00000000000fb746: sal byte ptr [rdx + 0x15], 0x39; ret 0x1172; 
0x00000000000b21e3: sal byte ptr [rdx + rdi - 0xa], cl; ret 0x7501; 
0x00000000000b69f3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x00000000000ac71b: sal byte ptr [rdx + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000011cc28: sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x00000000000b1e6b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x00000000000cf79b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000639b3: sal byte ptr [rdx + rsi + 0x48], 0x8b; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x000000000018e9cf: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018eaf0: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000009bbc8: sal byte ptr [rdx], 0x15; add dh, dh; ret 0x7402; 
0x0000000000184c57: sal byte ptr [rsi + rax*4 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; add rax, r8; vzeroupper; ret; 
0x00000000000a295b: sal byte ptr [rsi + rcx + 0x48], 0x89; ret 0x894c; 
0x000000000009f899: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x14f6bd; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000b1c3f: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; ret; 
0x00000000000ac257: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000000a87ae: sal byte ptr [rsp + rax + 0x39], 0xd0; jne 0xa87a0; mov rax, r8; ret; 
0x00000000000a877a: sal byte ptr [rsp + rax + 0x39], 0xf0; jne 0xa8770; mov rax, r8; ret; 
0x0000000000116dad: sal byte ptr [rsp + rax + 0x48], cl; mov dword ptr [rdx + 8], eax; test rax, rax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x00000000000dda11: sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x00000000000a8729: sal byte ptr [rsp + rbp + 0x4d], 0x89; ret; 
0x00000000000ccc11: sal byte ptr [rsp + rbp*4 + 0x48], 0x89; ret 0x894c; 
0x00000000000ea391: sal byte ptr [rsp + rbx + 0xf], 0xb6; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x000000000014afc1: sal byte ptr [rsp + rcx + 0x48], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000117a51: sal byte ptr [rsp + rcx - 9], cl; ret 0xfc07; 
0x0000000000184c09: sal byte ptr [rsp + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000052ac5: sal byte ptr [rsp + rsi*2 - 0x41], 1; add byte ptr [rip - 0x2711800], al; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000012bdbd: sal dh, 0x43; sbb al, 0x20; je 0x12bdd0; pop rbx; ret; 
0x0000000000048005: sal dl, 0xf; adc dword ptr [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000420ec: sal dl, 0xf; pop rcx; add eax, 0x17abfb; ret; 
0x00000000000bcd0c: sal dl, 1; or al, 0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x0000000000134bd2: sal dl, cl; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000012eba3: sal dword ptr [rbp - 0x16], 1; sub rsp, 8; call 0x12e340; nop; mov rax, rdi; ret; 
0x000000000015772e: sal dword ptr [rcx], 0xc0; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000a863a: sal dword ptr [rcx], 0xc0; mov qword ptr [rdx], rcx; ret; 
0x000000000018c679: sal dword ptr [rcx], 1; ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c2f9; vzeroupper; ret; 
0x000000000009ef18: sal dword ptr [rdi + 0x15], 0x4c; mov eax, eax; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000018e92f: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018ea6f: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002c9fc: sal dword ptr [rsi + 0x18], cl; add al, ch; mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000abe96: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000a8851: sal dword ptr [rsp + rsi*8 + 0x39], 1; int1; je 0xa8848; ret; 
0x00000000000e5296: sal ebx, 1; dec dword ptr [rax - 0x77]; ret; 
0x00000000000bbbf7: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000004225a: sal edi, 0xd8; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x000000000011576c: sal esp, cl; call qword ptr [rax - 0x6fa74b8]; or ax, 0x6400; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001156c4: sal esp, cl; inc dword ptr [rbp + 0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x000000000018e92e: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018ea6e: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000134bd1: sal r10b, cl; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x00000000000d2f6a: sar ah, 1; push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x0000000000057c35: sar bh, 0xff; ret; 
0x0000000000057c12: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057ddf: sar bh, 0xff; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000109d5b: sar bh, cl; dec dword ptr [rax - 0x77]; add ecx, dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000010837d: sar bl, 0xff; dec dword ptr [rax - 0x77]; test dword ptr [rax], ecx; idiv edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000de2b2: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x000000000009526b: sar byte ptr [rax + 0x10], 0x48; cmovne eax, edx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000015c5fa: sar byte ptr [rax + 0x1b], 0x48; lea eax, [rip + 0x9497c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000001211f6: sar byte ptr [rax + 0x1d], cl; syscall; cmp rax, -0x1000; ja 0x121210; ret; 
0x000000000008e4eb: sar byte ptr [rax + 0x29], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d0025: sar byte ptr [rax + 0x48], 0x83; clc; sbb dword ptr [rdi + 0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000000de2b3: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x000000000015ca17: sar byte ptr [rax + 0xe], 0x48; add esp, 8; pop rbp; pop r12; ret; 
0x000000000013c92f: sar byte ptr [rax + 0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret; 
0x00000000000cf18f: sar byte ptr [rax + 1], 0x44; cmovg ecx, eax; mov eax, r9d; ret; 
0x00000000001136b9: sar byte ptr [rax + 8], cl; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000114372: sar byte ptr [rax - 0x4e], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ee479: sar byte ptr [rax], 0xe; je 0xee3bd; ret; 
0x000000000011f127: sar byte ptr [rbx + rdx + 0x74], 1; ret; 
0x00000000001156c8: sar byte ptr [rcx + 5], 0x41; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000440c6: sar byte ptr [rdi + 0x17], 1; test edi, edi; je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x000000000011fe9a: sar byte ptr [rdi - 0x2708fff4], cl; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e5066: sar byte ptr [rdx + 0x100], 1; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000013c9ad: sar byte ptr [rdx + 0x7fffffff], 1; add eax, ecx; cmovs eax, edx; ret; 
0x0000000000043ddc: sar byte ptr [rdx + 1], cl; cmove eax, edx; ret; 
0x0000000000063099: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000000b14c9: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a28d5: sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000000183b0a: sar byte ptr [rdx], cl; cmp edx, ecx; jle 0x183bb0; ret; 
0x000000000008ce0b: sar byte ptr [rsi + 0x1a], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccdb: sar byte ptr [rsi + 0x1a], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000002fdb9: sar byte ptr [rsi + 0x24], 0x83; call 0x84586c3; pop rbx; ret; 
0x00000000000a50b1: sar dh, 0xff; inc dword ptr [rcx - 0x7d]; ret; 
0x000000000006ddc4: sar dl, 0xff; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xa; 
0x00000000000696aa: sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000787fa: sar dl, 0xff; inc dword ptr [rbp - 0x557af02e]; add al, 0; add byte ptr [rbx - 0x78f0d008], al; sbb eax, 0x8900000b; ret 0xc083; 
0x000000000011459b: sar dword ptr [rax + 0xd], 1; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cf16d: sar dword ptr [rax + 1], 0x44; cmovl ecx, eax; mov eax, r9d; ret; 
0x000000000018fa79: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fa80: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x18fa84; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fa87: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x18fa8c; ret; 
0x00000000000d38fb: sar dword ptr [rax - 0x74b7ffef], 5; ret 0x11b8; 
0x00000000000bc192: sar dword ptr [rax], 1; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000183b01: sar dword ptr [rcx], 0xc2; jg 0x183b14; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183bb0; ret; 
0x00000000000c4b7b: sar dword ptr [rcx], cl; ret 0x1d74; 
0x000000000005cf15: sar dword ptr [rcx], cl; ret 0x4d74; 
0x0000000000120e09: sar dword ptr [rdx], 1; cmovb rax, rdx; ret; 
0x000000000018b8ed: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x0000000000041b6c: sar eax, 0x10; ret; 
0x000000000004225f: sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000162da8: sar eax, 0x1f; ret; 
0x0000000000041b1c: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000000425a9: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000041e9e: sar eax, 0x3f; not eax; and eax, edx; ret; 
0x0000000000094d57: sar eax, 1; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008aa16: sar eax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000000885ed: sar eax, 2; ret; 
0x000000000012f9f1: sar eax, 6; ret; 
0x00000000000ac8c2: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000019342b: sar ebp, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x0000000000087dfc: sar ecx, 2; lea eax, [rcx - 1]; ret; 
0x000000000003fc0a: sar edi, 1; inc dword ptr [rbx - 0x7af0fe08]; ret 0xfff2; 
0x000000000012a7ad: sar edi, cl; dec dword ptr [rcx]; ret; 
0x0000000000087ea6: sar edx, 2; sub eax, edx; ret; 
0x00000000000ac8c8: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b1c98: sar edx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3b: sar edx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e67: sar edx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df7: sar edx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf797: sar edx, cl; test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72b: sar edx, cl; test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000001906e7: sar esi, 1; jg 0x19070f; vzeroupper; ret; 
0x0000000000190872: sar esi, 1; jg 0x19089a; vzeroupper; ret; 
0x00000000000425a8: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000041e9d: sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000000008aa15: sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000000885ec: sar rax, 2; ret; 
0x000000000012f9f0: sar rax, 6; ret; 
0x00000000000ac8c1: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000087dfb: sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000087ea5: sar rdx, 2; sub eax, edx; ret; 
0x00000000000ac8c7: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b1c97: sar rdx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3a: sar rdx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e66: sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df6: sar rdx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf796: sar rdx, cl; test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72a: sar rdx, cl; test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000005b4c5: saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000000118a75: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118a84; ret; 
0x000000000010d12c: sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x000000000007adbd: sbb al, 0; add dh, dh; ret 0xf40; 
0x0000000000024409: sbb al, 0; add rax, qword ptr fs:[0]; ret; 
0x0000000000023a6c: sbb al, 0; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x00000000000246ed: sbb al, 0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000152bf9: sbb al, 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000226b5: sbb al, 0; mov qword ptr [rip + 0x1ceae2], rdx; pop rax; pop rbx; pop rbp; ret; 
0x00000000000226bc: sbb al, 0; pop rax; pop rbx; pop rbp; ret; 
0x0000000000023a54: sbb al, 0; ret; 
0x0000000000026f5c: sbb al, 0; test eax, eax; je 0x26f68; ret; 
0x000000000009f857: sbb al, 0x15; add byte ptr [rbp + 0x481275c0], al; lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000012bdc0: sbb al, 0x20; je 0x12bdd0; pop rbx; ret; 
0x00000000000a2e3a: sbb al, 0x31; ror byte ptr [rdi], 0x1f; add byte ptr [rbp + 1], al; fiadd dword ptr [rbx + 0x634901c0]; rol byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x00000000000c9fdb: sbb al, 0x39; ret; 
0x0000000000151724: sbb al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000004431a: sbb al, 0x48; add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000000b7a69: sbb al, 0x48; lea edi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fd: sbb al, 0x48; lea edi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b9225: sbb al, 0x49; sub eax, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x0000000000144190: sbb al, 0x5a; std; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000013bcab: sbb al, 0x74; adc al, byte ptr [rbx + 0x7ba14fe]; add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x00000000000ecaf1: sbb al, 0x89; ret 0x8348; 
0x00000000000e8643: sbb al, 0x8b; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x00000000000ec493: sbb al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000014fec5: sbb al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001306eb: sbb al, 0xef; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001129b0: sbb al, 0xf8; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x00000000000dabf2: sbb al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000047581: sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001189e1: sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x118a40; ret; 
0x000000000007833a: sbb al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000047f89: sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000004754f: sbb al, byte ptr [rax]; call 0xbd470; pop rbx; ret; 
0x0000000000043065: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f25: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000041e5f: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043c59: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000041255: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000048335: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000412b5: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000048305: sbb al, byte ptr [rax]; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x00000000000440f7: sbb al, byte ptr [rax]; mov eax, edx; ret; 
0x0000000000042b34: sbb al, byte ptr [rax]; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000000433e9: sbb al, byte ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000043425: sbb al, byte ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048285: sbb al, byte ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000044098: sbb al, byte ptr [rax]; ret; 
0x0000000000047654: sbb al, byte ptr [rax]; syscall; pop rbp; ret; 
0x000000000013bcee: sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x000000000012ee83: sbb al, byte ptr [rsi]; add byte ptr [rax + 0x21], cl; ret 0x8d48; 
0x0000000000120b3e: sbb al, ch; cld; cmp dh, bh; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x000000000011324e: sbb al, ch; in al, dx; adc edi, eax; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x00000000001191cc: sbb al, ch; inc byte ptr [rdx]; add byte ptr [rax], al; lea rax, [rip + 0xd66e7]; add rsp, 0x18; ret; 
0x0000000000113018: sbb al, ch; ret 0xf815; 
0x0000000000120f0e: sbb al, ch; sub al, 0x37; idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000e2fcc: sbb bh, bl; inc dword ptr [rcx + rcx*4 - 0x18]; pop rbp; pop r12; pop r13; ret; 
0x00000000000ec483: sbb bh, byte ptr [rax + 2]; ret; 
0x00000000000e2d4a: sbb bl, bh; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x0000000000109b51: sbb bl, byte ptr [rax + rcx*2 - 0x7d]; ret; 
0x00000000000328a8: sbb bl, byte ptr [rax]; add byte ptr [rcx], bh; jp 0x328e6; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000006566a: sbb bl, byte ptr [rip - 0x7cb80000]; ret 0x3c01; 
0x00000000000b957a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b876a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95da: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b872b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b9579: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d29: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b8769: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95d9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7099: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b872a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000012ac64: sbb byte ptr [eax - 0x77], cl; ret 0x2b49; 
0x000000000009e902: sbb byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000014874b: sbb byte ptr [r11 + 0xe7603f8], r8b; mov eax, 2; ret; 
0x00000000000918ed: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000008e554: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000041203: sbb byte ptr [r15], r9b; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x000000000005b961: sbb byte ptr [r8 + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000009517b: sbb byte ptr [r8 + 0x39], cl; ret; 
0x000000000015f8c3: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000127a90: sbb byte ptr [r8 - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000bb1e4: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb206: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb244: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000008c10f: sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000015755c: sbb byte ptr [r9 + r9*4 - 0x40], r8b; ret; 
0x00000000001972e7: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b7a06: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f98c229; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b9165: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f98d987; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000005b962: sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000040fb4: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0x40f98; ret; 
0x000000000015a195: sbb byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000009517c: sbb byte ptr [rax + 0x39], cl; ret; 
0x000000000015f8c4: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000000d8ced: sbb byte ptr [rax + 0x63], cl; ret 0x8944; 
0x00000000000639bd: sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x00000000000e434e: sbb byte ptr [rax - 0x73], cl; call 0x416a84b2; pop rbp; pop rbp; ret; 
0x00000000000b79b3: sbb byte ptr [rax - 0x73], cl; jg 0xb79d0; jne 0xb7f80; ret; 
0x00000000000b9137: sbb byte ptr [rax - 0x73], cl; jg 0xb9154; jne 0xb97d0; ret; 
0x000000000010c866: sbb byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; ret 0x8207; 
0x0000000000153a4c: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153abc: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b2c: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b8d: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf1: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c5c: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153cdf: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x00000000001539d6: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x000000000012bcdc: sbb byte ptr [rax - 0x75], cl; je 0x12bd05; adc byte ptr [rax + 1], cl; ret 0x8948; 
0x00000000000bda0f: sbb byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000014aba7: sbb byte ptr [rax - 0x76b704ad], cl; ret 0xc148; 
0x0000000000115adf: sbb byte ptr [rax - 0x77], cl; add eax, 0xd9b59; mov eax, 1; add rsp, 8; ret; 
0x0000000000127a91: sbb byte ptr [rax - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000f3f02: sbb byte ptr [rax - 0x77], cl; je 0xf3f2b; adc al, ch; ret; 
0x00000000000918f6: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000031317: sbb byte ptr [rax - 0x77], cl; ret 0x2548; 
0x000000000012ac65: sbb byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000148d81: sbb byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000351c3: sbb byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000011012f: sbb byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000000dd7e7: sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000015796a: sbb byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rcx - 0x18]; mov ebx, 0x48ffeca9; mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000010dab6: sbb byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x00000000000df9f4: sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000008a0d0: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009679f: sbb byte ptr [rax - 9], cl; fimul dword ptr [rax + 0x21]; ret 0x8949; 
0x0000000000102715: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca5: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; ret; 
0x0000000000117bf4: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x117c08; sub dword ptr [rip + 0xd7c4d], 1; ret; 
0x0000000000063082: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f34: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000090fe8: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000938f4: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x00000000000a3d83: sbb byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000005eaa7: sbb byte ptr [rax], al; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000061056: sbb byte ptr [rax], al; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x00000000001419f1: sbb byte ptr [rax], al; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000328a9: sbb byte ptr [rax], al; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000019913c: sbb byte ptr [rax], al; je 0x199128; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000062e9d: sbb byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000241a9: sbb byte ptr [rax], al; ret; 
0x000000000008cd2c: sbb byte ptr [rax], al; setne r8b; mov eax, r8d; ret; 
0x00000000000bb1e5: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb207: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb245: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x0000000000062653: sbb byte ptr [rax], dl; add byte ptr [rax], al; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000a3d82: sbb byte ptr [rax], r8b; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000f0b73: sbb byte ptr [rbp + 0x10840fc0], al; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [r13 + 0x63], cl; ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x000000000010daba: sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x00000000000476c4: sbb byte ptr [rbp + 0x4c], bl; mov eax, esp; pop r12; ret; 
0x00000000000e1c2f: sbb byte ptr [rbx + 0x10d8a92d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfcff: sbb byte ptr [rbx + 0x10f6692d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013c52a: sbb byte ptr [rbx + 0x49], bl; mov dword ptr [rcx], ecx; ret; 
0x000000000008c085: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000007a3fa: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009e903: sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000429f8: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000014c74f: sbb byte ptr [rbx + 0xa45d12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013872f: sbb byte ptr [rbx + 0xb7d092d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001345df: sbb byte ptr [rbx + 0xbbce12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013317f: sbb byte ptr [rbx + 0xbcfd92d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012641f: sbb byte ptr [rbx + 0xc9a092d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012496f: sbb byte ptr [rbx + 0xcb3612d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014874c: sbb byte ptr [rbx + 0xe7603f8], al; mov eax, 2; ret; 
0x00000000000d08c2: sbb byte ptr [rbx + 0xf48244c], cl; xchg ebp, eax; ret 0xc985; 
0x000000000009358b: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000043b54: sbb byte ptr [rbx - 0x389bffe6], al; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000033d14: sbb byte ptr [rbx], 0; mov qword ptr [rax], rdx; ret; 
0x0000000000033d58: sbb byte ptr [rbx], 0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000040918: sbb byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000096356: sbb byte ptr [rcx + 1], cl; ret; 
0x000000000003bd04: sbb byte ptr [rcx + rcx*4 + 4], cl; and al, 0xe8; ret 0xffd1; 
0x00000000001470f8: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x00000000000868b1: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008c110: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000080acf: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22a: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000008d4e7: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000073d4b: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046e6e: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000001574e7: sbb byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000009cf7d: sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop r12; ret; 
0x000000000015751f: sbb byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000009c0a4: sbb byte ptr [rcx - 0x17f7dbac], cl; ret 0xffa6; 
0x00000000001972e8: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000dede6: sbb byte ptr [rcx - 0x77], al; pop rsp; xchg ebp, eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000eec3c: sbb byte ptr [rcx - 0x77], cl; ret 0x14d; 
0x000000000004092d: sbb byte ptr [rcx - 0x77], cl; ret 0x1574; 
0x00000000000b7a07: sbb byte ptr [rcx - 0x7d], cl; call 0x7f98c229; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b9166: sbb byte ptr [rcx - 0x7d], cl; call 0x7f98d987; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000014fea1: sbb byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x0000000000043024: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000001130a8: sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1130c0; ret; 
0x00000000001130ed: sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113100; ret; 
0x00000000000e9ec6: sbb byte ptr [rcx], bh; ret; 
0x000000000008a0a3: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000001556b1: sbb byte ptr [rcx], dh; shr al, 0xa7; int 0xec; dec dword ptr [rax - 0x2f]; call 0xffffffff895e1e49; ret; 
0x000000000015376e: sbb byte ptr [rdi + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x000000000008e555: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000062e2c: sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000041204: sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x00000000000d6836: sbb byte ptr [rdi], cl; test ah, cl; add al, byte ptr [rax]; add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x000000000014b6f5: sbb byte ptr [rdi], cl; xchg edi, eax; ret 0xd284; 
0x000000000014bb75: sbb byte ptr [rdi], cl; xchg edx, eax; ret 0x8b48; 
0x0000000000197278: sbb byte ptr [rdx + rax], dh; ret; 
0x00000000000ec99b: sbb byte ptr [rdx + rdx*2 - 0x73], dh; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000043df4: sbb byte ptr [rdx], 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000440f6: sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x00000000000440a7: sbb byte ptr [rdx], 0; ret; 
0x00000000000918ee: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000121fca: sbb byte ptr [rsi - 0x7d], ah; add byte ptr [rcx], al; ret; 
0x0000000000121fc9: sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x0000000000093db2: sbb ch, al; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e9ec3: sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x0000000000137c19: sbb cl, byte ptr [rax + 0x4801000b]; add esp, 8; ret; 
0x00000000000b7a0b: sbb cl, byte ptr [rax - 0x73]; jg 0xb7a2a; jne 0xb7f80; ret; 
0x00000000000b919f: sbb cl, byte ptr [rax - 0x73]; jg 0xb91be; jne 0xb97d0; ret; 
0x0000000000110de2: sbb cl, byte ptr [rax - 0x75]; pop rbx; adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000008ce0d: sbb cl, byte ptr [rax - 0x75]; xchg edi, eax; movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccdd: sbb cl, byte ptr [rax - 0x75]; xchg edi, eax; movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000031467: sbb cl, byte ptr [rax - 0x77]; ret 0x2548; 
0x000000000002478c: sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000057b35: sbb cl, byte ptr [rax - 0x7b]; div byte ptr [rbp + 0x25]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000127ad5: sbb cl, byte ptr [rax - 0x7d]; jnp 0x127b02; add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000109b73: sbb cl, byte ptr [rax - 0x7d]; ret; 
0x000000000013c233: sbb cl, byte ptr [rcx - 0x7d]; ret 0x4502; 
0x00000000000b7a0f: sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000017ea7d: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000180bed: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e66d: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017e179: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e989: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018609a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x00000000001858ba: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000185caa: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001854ca: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018174d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180f2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017e3fd: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000018070d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000017e73d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017ea59: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185669: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017eb29: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018126d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000180a4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018022d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000018140d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000017e8dd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e0cd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000017e4cd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x0000000000185b5a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018537a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018648a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e9ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017e19d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000018056d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e23f: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e59d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x00000000001806a3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001813a3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000180ec3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185a5b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018638b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e80d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001816e3: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001809e3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000180503: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181203: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000185bab: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001853cb: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e263: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000128b1a: sbb dh, dh; ret 0x7508; 
0x000000000012f374: sbb dh, dh; ret 0x7520; 
0x0000000000181ea8: sbb dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000a6753: sbb dword ptr [r8], r8d; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000000ec3d7: sbb dword ptr [rax + 1], edi; ret; 
0x0000000000113653: sbb dword ptr [rax - 0x2708fff3], ecx; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000b79d6: sbb dword ptr [rax - 0x73], ecx; jg 0xb79f4; jne 0xb7f80; ret; 
0x00000000000b916a: sbb dword ptr [rax - 0x73], ecx; jg 0xb9188; jne 0xb97d0; ret; 
0x0000000000047576: sbb dword ptr [rax - 0x75], ecx; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000057bc6: sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000015c33c: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000181e31: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181ea9: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011fca8: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x000000000007e7f5: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x00000000000a6754: sbb dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000054cd4: sbb dword ptr [rax], eax; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000529f6: sbb dword ptr [rax], eax; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000529fd: sbb dword ptr [rax], eax; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000054f11: sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000241b9: sbb dword ptr [rax], eax; ret; 
0x00000000000a8be3: sbb dword ptr [rax], edi; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000d0153: sbb dword ptr [rbp - 0x389bffef], edi; add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000007bfcb: sbb dword ptr [rbp - 0x74b80000], 0xfff6f895; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x0000000000042403: sbb dword ptr [rbx + 0xff30017], esp; pop rcx; add eax, 0x17af79; ret; 
0x0000000000120b53: sbb dword ptr [rbx - 0x2708fff4], esi; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000013c457: sbb dword ptr [rcx + 0xf], eax; mov dh, 0x52; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x0000000000181839: sbb dword ptr [rcx + rax - 0x75f37500], -0x75; add al, 0x82; sub eax, ecx; ret; 
0x000000000013c32e: sbb dword ptr [rcx + rcx*4 - 0x40], eax; ret; 
0x00000000000df4da: sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000009c523: sbb dword ptr [rcx - 0x76bbffef], edx; ret 0xa1e8; 
0x000000000013ea36: sbb dword ptr [rcx - 0x7d], eax; ret 0x4101; 
0x00000000001016e5: sbb dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000bdf8a: sbb dword ptr [rcx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x116fc; cmovne rax, rdx; ret; 
0x000000000011f23a: sbb dword ptr [rcx], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x00000000000cf543: sbb dword ptr [rcx], eax; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000e4f94: sbb dword ptr [rcx], eax; add byte ptr [rdx + 0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000c9ee6: sbb dword ptr [rcx], edi; ret; 
0x00000000000d002a: sbb dword ptr [rdi + 0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000000b916e: sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x0000000000041253: sbb dword ptr [rdx + rbx + 0xc76400], ebp; sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000000e4fd2: sbb dword ptr [rdx + rdi*4], edx; jge 0xe4fd8; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x0000000000043af6: sbb dword ptr [rdx], 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018bd3e: sbb dword ptr [rip + 0x31000002], -0x40; vzeroupper; ret; 
0x00000000000d0053: sbb dword ptr [rsi + 0x31450011], edi; in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000017c6ec: sbb eax, -1; ret; 
0x00000000000b661d: sbb eax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000010fd89: sbb eax, 0; ret; 
0x00000000000938a1: sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x00000000000b7a95: sbb eax, 0x1d7f8d48; jne 0xb7f80; ret; 
0x00000000000b9229: sbb eax, 0x1d7f8d48; jne 0xb97d0; ret; 
0x00000000000b9255: sbb eax, 0x1ee88349; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x0000000000119fd1: sbb eax, 0x1f0f3ceb; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000016d995: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d990: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000fec97: sbb eax, 0x4c000ed3; mov eax, dword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000b7a99: sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x00000000001989e5: sbb eax, 0x55db6; test rbx, rbx; jne 0x1989d0; pop rbx; ret; 
0x00000000000b922d: sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x00000000000344c7: sbb eax, 0x64001b7a; add rax, qword ptr [0]; ret; 
0x000000000006566b: sbb eax, 0x83480000; ret 0x3c01; 
0x000000000007880b: sbb eax, 0x8900000b; ret 0xc083; 
0x0000000000077a42: sbb eax, 0x89000016; ret 0xc083; 
0x000000000012011f: sbb eax, 0x8bfff745; and al, 0xc; add rsp, 0x28; ret; 
0x0000000000153237: sbb eax, 0x98b64; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153250; pop rbx; ret; 
0x00000000000e2ce2: sbb eax, 0xb8c03145; test dword ptr [rax], 0x50f0000; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x0000000000188382: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000121afa: sbb eax, 0xca861; pop rbx; ret; 
0x0000000000121ae0: sbb eax, 0xca87b; pop rbx; ret; 
0x0000000000183d82: sbb eax, 0xcfbc0ff3; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000198cfa: sbb eax, 0xe5894855; call 0x15fd10; pop rbp; mov qword ptr [rip + 0x57160], 0; ret; 
0x0000000000033f4f: sbb eax, 0xe9000e4a; ret 0xfee7; 
0x0000000000090886: sbb eax, 0xe9ebe374; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000dad85: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x0000000000181c51: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181cc9: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000118aa5: sbb eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ab4; ret; 
0x000000000003e1c5: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000003e1ce: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x00000000000780d2: sbb eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000034547: sbb eax, dword ptr [rax]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000344a9: sbb eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000032851: sbb eax, dword ptr [rax]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000033d15: sbb eax, dword ptr [rax]; mov qword ptr [rax], rdx; ret; 
0x00000000000328e9: sbb eax, dword ptr [rax]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003421a: sbb eax, dword ptr [rax]; mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000033d59: sbb eax, dword ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034239: sbb eax, dword ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002f5a9: sbb eax, dword ptr [rax]; ret; 
0x0000000000112d2c: sbb eax, dword ptr [rbx + 0x674a1f8]; neg eax; ret; 
0x00000000000a4c53: sbb eax, dword ptr [rcx - 0x78]; sbb eax, dword ptr [rcx - 0xa]; ret 0xf02; 
0x00000000000a4c56: sbb eax, dword ptr [rcx - 0xa]; ret 0xf02; 
0x000000000011fe55: sbb eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe64; ret; 
0x00000000000947f5: sbb eax, eax; add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x000000000011588f: sbb eax, eax; and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000055bea: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000184e17: sbb eax, eax; or eax, 1; ret; 
0x000000000013b88c: sbb eax, eax; ret; 
0x00000000001925c5: sbb eax, eax; sbb eax, -1; ret; 
0x000000000009a0c1: sbb ebx, dword ptr [rdi]; adc eax, 0x30894800; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000e2c90: sbb ebx, edi; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x00000000000e1b5a: sbb ecx, 0x64010010; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x000000000015c5fc: sbb ecx, dword ptr [rax - 0x73]; add eax, 0x9497c; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000000b7a39: sbb ecx, dword ptr [rax - 0x73]; jg 0xb7a59; jne 0xb7f80; ret; 
0x00000000000b91cd: sbb ecx, dword ptr [rax - 0x73]; jg 0xb91ed; jne 0xb97d0; ret; 
0x0000000000192ad4: sbb ecx, dword ptr [rbx + 0x463bf847]; clc; jne 0x192be0; ret; 
0x00000000000a093b: sbb edi, eax; call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000005438a: sbb edi, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000579a5: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000184854: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000011082f: sbb esi, ecx; dec dword ptr [rcx - 0x73]; push rsi; add dword ptr [rax + 0x39], ecx; ret 0xe72; 
0x000000000009f131: sbb esi, esi; or esp, 0x40000000; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x00000000000e5060: sbb esp, dword ptr [rbx]; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000579a4: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000017c6eb: sbb rax, -1; ret; 
0x00000000000b661c: sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001994da: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000017fbd2: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000499ee: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx], dh; div bh; ret 0; 
0x000000000009f764: scasb al, byte ptr [rdi]; add byte ptr [rax], al; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000001860ee: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x000000000012d972: scasb al, byte ptr [rdi]; add eax, dword ptr [rax]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x0000000000157484: scasb al, byte ptr [rdi]; call 0x12fa70; nop word ptr [rax + rax]; endbr64; ret; 
0x0000000000085024: scasb al, byte ptr [rdi]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000005b3a1: scasb al, byte ptr [rdi]; mov rax, r10; pop rbx; ret; 
0x000000000012102c: scasb al, byte ptr [rdi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120fe4: scasb al, byte ptr [rdi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000019737e: scasb al, byte ptr [rdi]; scasd eax, dword ptr [rdi]; call 0xffffffffdb9ebc84; jne 0x19736d; pop rbx; ret; 
0x000000000018c7ba: scasb al, byte ptr [rdi]; vzeroupper; ret; 
0x00000000000d0ef4: scasd eax, dword ptr [rdi]; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001861ed: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000118ded: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000019737f: scasd eax, dword ptr [rdi]; call 0xffffffffdb9ebc84; jne 0x19736d; pop rbx; ret; 
0x0000000000120f24: scasd eax, dword ptr [rdi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000893e0: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x00000000000bc455: scasd eax, dword ptr [rdi]; ret 0x518d; 
0x00000000000446ca: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x00000000000414ce: scasd eax, dword ptr [rdi]; ret 0x8d49; 
0x000000000012bbf1: scasd eax, dword ptr [rdi]; ret 0xc083; 
0x00000000000db42b: scasd eax, dword ptr [rdi]; ret 0xc148; 
0x00000000000bc469: scasd eax, dword ptr [rdi]; ret 0xcfe9; 
0x0000000000041206: scasd eax, dword ptr [rdi]; ret 0xd231; 
0x00000000000bc45b: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x00000000000895a0: scasd eax, dword ptr [rdi]; ret; 
0x00000000000d05f4: scasd eax, dword ptr [rdi]; ror dword ptr [rax + 1], cl; ret 0x1b8; 
0x00000000000440f5: scasd eax, dword ptr [rdi]; sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x000000000019907d: scasd eax, dword ptr [rdi]; xchg edx, eax; call 0xffffffff8038a083; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000120f23: scasq rax, qword ptr [rdi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000122059: seta al; movzx eax, al; neg eax; ret; 
0x000000000010fd86: seta al; sbb eax, 0; ret; 
0x0000000000094194: setae al; ret; 
0x00000000000d424b: setb al; add eax, 0x16d; ret; 
0x0000000000122c5a: setbe al; mov eax, r8d; ret; 
0x0000000000122c59: setbe r8b; mov eax, r8d; ret; 
0x0000000000034aa7: sete ah; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000001004fd: sete al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000062e26: sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x0000000000157d6b: sete al; add rsp, 8; mov eax, r8d; ret; 
0x00000000000522b2: sete al; add rsp, 8; movzx eax, al; ret; 
0x00000000001458ac: sete al; add rsp, 8; ret; 
0x00000000000e51fb: sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000155df8: sete al; movzx eax, al; ret; 
0x0000000000094c8e: sete al; movzx eax, al; sub eax, 2; add rsp, 8; ret; 
0x0000000000149d68: sete al; pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x00000000000342c9: sete al; ret; 
0x0000000000042c5a: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000160b15: sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x0000000000034aa6: sete r12b; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157d6a: sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x0000000000042c59: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x00000000000ce090: setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000018bd8c: setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000010c55f: setl al; ret; 
0x000000000011f3a0: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000ee321: setne al; add rsp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000014de1f: setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d5: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000001173c7: setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000102aa8: setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000008cd2f: setne al; mov eax, r8d; ret; 
0x000000000014a141: setne al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e68: setne al; movzx eax, al; neg eax; pop rbp; ret; 
0x00000000001028b1: setne al; movzx eax, al; neg eax; ret; 
0x0000000000043c2c: setne al; movzx eax, al; ret; 
0x00000000000e5190: setne al; ret; 
0x00000000000a8926: setne bh; test r9b, dil; jne 0xa8908; ret; 
0x00000000000a891f: setne cl; cmp r8d, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x00000000000a87ea: setne cl; test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a8925: setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000008cd2e: setne r8b; mov eax, r8d; ret; 
0x00000000000a891e: setne r9b; cmp r8d, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x00000000000a87e9: setne r9b; test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x0000000000184b94: shl byte ptr [rax + 0x48], 1; clc; ret; 
0x000000000018d1e2: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188862: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018477b: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x000000000018d176: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887f6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000018473b: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000090881: shl byte ptr [rbx + rax*4 + 0x7d], 0; sbb eax, 0xe9ebe374; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000d687d: shl byte ptr [rcx + rbp*2 - 0x40], cl; nop; add dword ptr [rax], eax; add byte ptr [rbp + 0x29], al; shr dword ptr [rcx], cl; ret 0x8945; 
0x000000000011f888: shl byte ptr [rcx], cl; rol byte ptr [rcx + rcx*4 - 0x3e], 1; or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000098099: shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x00000000000bc215: shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x00000000000bb61f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000004216c: shl byte ptr [rsi + 0x48], 1; movd mm0, eax; ret; 
0x0000000000041fad: shl byte ptr [rsi + 0x48], 1; movd mm1, eax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000047ce3: shl byte ptr [rsi + 0xf], 0x6c; rol dword ptr [rcx + rcx*4 - 0x40], 0xf; adc dword ptr [rdi], eax; ret; 
0x000000000008842f: shl byte ptr [rsi + 0xf], 0x6f; ret 0x8948; 
0x0000000000042247: shl byte ptr [rsi + 0xf], 0x7e; ret 0xff25; 
0x0000000000190bb7: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000b1685: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000018eadb: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000057d35: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000051f02: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x7c89; 
0x00000000000ff2be: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret; 
0x000000000018eaf2: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000b1a47: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000b1a36: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ac568: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000018e9d1: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000ed9c8: shl byte ptr [rsi + 0xf], cl; outsb dx, byte ptr [rsi]; ret; 
0x0000000000120db8: shl byte ptr [rsi - 0x7d], 0xff; adc dh, byte ptr [rdi + 0xd]; movzx edi, di; lea rax, [rip + 0x918b7]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000195367: shl byte ptr [rsi - 0x7f], cl; ret 0x7fff; 
0x0000000000115895: shl byte ptr [rsi], 0x64; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012da27: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012d8a7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012d967: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09a7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc54db]; lea rdx, [rip + 0xcaa64]; cmovne rax, rdx; ret; 
0x00000000000a0637: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc582b]; lea rdx, [rip + 0xcadb4]; cmovne rax, rdx; ret; 
0x00000000000a04d7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc838b]; lea rdx, [rip + 0xcda24]; cmovne rax, rdx; ret; 
0x0000000000123361: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000ac717: shl dword ptr [rcx], 0xd0; test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x00000000000a0739: shl dword ptr [rdx + 1], cl; add byte ptr [rax - 0x73], cl; adc eax, 0xd8cec; cmovne rax, rdx; ret; 
0x0000000000051efd: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x7c89; 
0x0000000000089eee: shl dword ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret 0x34e9; 
0x0000000000190baf: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000043f2f: shl dword ptr [rsi + 0xf], 0xc6; rol byte ptr [rcx], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000b1a32: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000bb47f: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000018ea56: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018eb0d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000018eaf6: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000018eadf: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000018d59b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000369e9: shl dword ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000018ea71: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000abf8c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x00000000000ac788: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xf188; 
0x000000000018e931: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f5b9e: shl dword ptr [rsi - 0x7f], 1; loope 0xf5ba2; add esi, esi; ret 0xf04; 
0x00000000000f7227: shl dword ptr [rsi - 0x7f], 1; loope 0xf722b; add esi, esi; ret 0xf04; 
0x0000000000042449: shl eax, 0x17; or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000423bc: shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x0000000000052948: shl eax, 0x1e; or eax, edx; ret; 
0x000000000011eeff: shl eax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x00000000000420df: shl eax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203b: shl eax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000047d6e: shl eax, 0xa; mov dword ptr [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000013c71e: shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x0000000000061bbd: shl eax, 8; and eax, 0x100; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000043b8f: shl eax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000160a90: shl eax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000043c27: shl eax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000b1d4b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000563cc: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634b: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000005631a: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000012fb38: shl edi, 0x10; movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000012fb19: shl edi, 0x18; and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000004732c: shl edi, 0x20; or rax, rdi; ret; 
0x000000000012fb54: shl edi, 8; movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000000b180a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000013c56c: shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000013c617: shl edx, 4; xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000014a5f8: shl edx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000160a70: shl edx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160a40: shl edx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000057c51: shl esi, 0x17; and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x0000000000057c9c: shl esi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000000013c763: shl esi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000057b73: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000563cb: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634a: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056319: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011eefe: shl rax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x00000000000420de: shl rax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203a: shl rax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000043b8e: shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000160a8f: shl rax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000043c26: shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000b1d4a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000004732b: shl rdi, 0x20; or rax, rdi; ret; 
0x00000000000b1809: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000013c616: shl rdx, 4; xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000014a5f7: shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000160a6f: shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160a3f: shl rdx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000057c9b: shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000000013c762: shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000057b72: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000563c4: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056344: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000563c3: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056343: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000bcdfc: shr ah, 1; or al, 0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000001550ff: shr ah, cl; dec dword ptr [rbp - 0x7b]; in al, 0xf; xchg esp, eax; ret 0x854d; 
0x0000000000135bd4: shr al, 0x16; ret; 
0x0000000000046114: shr al, 0x46; ret; 
0x000000000015b1e2: shr al, 0x78; jb 0x15b1d3; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000011195e: shr al, 0x7c; ret; 
0x00000000001556b3: shr al, 0xa7; int 0xec; dec dword ptr [rax - 0x2f]; call 0xffffffff895e1e49; ret; 
0x0000000000135b42: shr al, 0xa8; ret; 
0x00000000000970ec: shr al, 0xbe; ret; 
0x0000000000157730: shr al, 0xca; movabs eax, dword ptr [0x8c48348c031fff2]; ret; 
0x000000000012ceba: shr ax, 0xe; and eax, 1; ret; 
0x00000000000d0fd1: shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0eb1: shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x000000000002c1c0: shr bl, 1; ret 0x1f0f; 
0x00000000000aa64f: shr byte ptr [rcx], 0xc8; ret; 
0x00000000000d13c5: shr byte ptr [rcx], 1; call 0xffffffff89dd7714; ret; 
0x000000000002f258: shr byte ptr [rcx], cl; ret; 
0x00000000000960bc: shr byte ptr [rdx + 0x15], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000190bfe: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000012109b: shr dword ptr [rbp - 0x2708fff4], 1; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d6887: shr dword ptr [rcx], cl; ret 0x8945; 
0x000000000012db1b: shr dword ptr [rsi], 6; add byte ptr [rax - 0x73], cl; adc eax, 0x62e4a; cmove rax, rdx; ret; 
0x000000000012fb87: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fb9a: shr eax, 0x18; ret; 
0x0000000000129436: shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000129473: shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000041b7f: shr eax, 0x1f; ret; 
0x000000000011ee81: shr eax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000018f99c: shr eax, 0x20; cmp ecx, eax; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000000481e5: shr eax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000192c6a: shr eax, 0x38; ret; 
0x0000000000041ecc: shr eax, 0x3f; ret; 
0x0000000000042a08: shr eax, 0x62; add dl, byte ptr [rip - 0x3b7cb800]; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000011eeac: shr eax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000bc113: shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000012cebb: shr eax, 0xe; and eax, 1; ret; 
0x00000000000cf73b: shr eax, 2; ret; 
0x000000000018d0a3: shr eax, 2; vzeroupper; ret; 
0x000000000013c722: shr eax, 4; and eax, 0x7f; ret; 
0x000000000008def6: shr eax, 4; and eax, 1; ret; 
0x0000000000094e70: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x000000000008df06: shr eax, 5; and eax, 1; ret; 
0x00000000000bc15e: shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000160a73: shr eax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160a43: shr eax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000005b15a: shr eax, cl; add byte ptr [rbx - 4], dh; dec dword ptr [rcx - 0x77]; ret; 
0x00000000001229ef: shr eax, cl; and eax, 1; ret; 
0x000000000011f8d1: shr eax, cl; and eax, 3; ret; 
0x0000000000122c3d: shr eax, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000047d73: shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000001294ad: shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x00000000001294e4: shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x000000000018f998: shr ecx, 0x20; shr rax, 0x20; cmp ecx, eax; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000001093d8: shr ecx, 0xd2; idiv bh; dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret 1; 
0x000000000015f245: shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000013c5cf: shr ecx, 3; rep stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d1: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aeb: shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x00000000000564dc: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000056465: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000056434: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000012fb7e: shr edi, 8; and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000040fb2: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x0000000000041b60: shr edx, 0x1f; or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x000000000008ad40: shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae40: shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000160a93: shr edx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x00000000001353e8: shr esi, 1; inc dword ptr [rbp + 0x31]; rol byte ptr [rbp - 0x6bf0be40], cl; ret 0xf741; 
0x000000000013c169: shr esi, 3; mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000122c3c: shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x00000000000564db: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000056464: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000056433: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011ee80: shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000018f99b: shr rax, 0x20; cmp ecx, eax; jne 0x18f9a6; xor eax, eax; ret; 
0x00000000000481e4: shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000192c69: shr rax, 0x38; ret; 
0x0000000000041ecb: shr rax, 0x3f; ret; 
0x000000000011eeab: shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000cf73a: shr rax, 2; ret; 
0x000000000018d0a2: shr rax, 2; vzeroupper; ret; 
0x000000000013c721: shr rax, 4; and eax, 0x7f; ret; 
0x0000000000094e6f: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x0000000000160a72: shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160a42: shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000018f997: shr rcx, 0x20; shr rax, 0x20; cmp ecx, eax; jne 0x18f9a6; xor eax, eax; ret; 
0x0000000000040fb1: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x0000000000160a92: shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x00000000000564d4: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000005645e: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000564d3: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000005645d: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000043f30: shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f22: shufpd xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044062: shufpd xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f27: shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044067: shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f31: shufps xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f23: shufps xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044063: shufps xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000018ac05: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189175: shufps xmm0, xmmword ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000043f28: shufps xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044068: shufps xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001220b0: sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x000000000011ee87: sldt word ptr [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000049f2f: stc; adc byte ptr [rbx - 0x6af069c4], cl; ret 0x8941; 
0x00000000001921ef: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000004234d: stc; add byte ptr [rax], 0; add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x00000000000a1cc4: stc; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000001041d3: stc; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x00000000000d1241: stc; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000012955f: stc; add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000013c1a8: stc; add dword ptr [rdi], ecx; xchg esi, eax; ret 0x8341; 
0x000000000010c685: stc; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000015d235: stc; add esi, dword ptr [rsi + 7]; ret; 
0x0000000000088e19: stc; dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000004a170: stc; dec dword ptr [rax - 0x77]; fadd dword ptr [rcx + 0xf]; xchg esp, eax; ret; 
0x000000000008e337: stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000008282d: stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000008292c: stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000beeb3: stc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000088532: stc; dec dword ptr [rbp + rcx*4 + 0x2c]; and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x0000000000084401: stc; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbp; pop r12; pop r13; ret; 
0x0000000000105025: stc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000010d973: stc; in al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000102aa3: stc; inc al; add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000052942: stc; je 0x52953; mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x00000000000a892b: stc; jne 0xa8908; ret; 
0x000000000018ac5f: stc; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000000f9813: stc; mov dh, dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000168698: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000100467: stc; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000168692: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018ac57: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891a7: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000122c37: stc; mov r8d, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000183daf: stc; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dcf: stc; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000011c4ec: stc; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011c4d4: stc; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a43a0: stc; or al, 0x74; and ecx, dword ptr [rbp + 0x63490e78]; ret 0xf41; 
0x0000000000115773: stc; or ax, 0x6400; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009f351: stc; or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000010044d: stc; or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000ec3d0: stc; pop rsi; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000056525: stc; push qword ptr [rbp - 0x11]; mov rax, rdx; ret; 
0x000000000009f763: stc; scasb al, byte ptr [rdi]; add byte ptr [rax], al; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000001229ee: stc; shr eax, cl; and eax, 1; ret; 
0x00000000000ec401: stc; sub eax, 0x47c6e875; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x0000000000043ae7: stc; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000018ff88: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001891af: stc; vzeroupper; ret; 
0x0000000000184e97: stc; xlatb; ret 0xff2d; 
0x000000000010cbac: std; add al, byte ptr [rax]; add dh, dh; ret 0xf80; 
0x000000000019652f: std; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000e4f7f: std; add byte ptr [rax], al; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000001578fd: std; call qword ptr [rax - 0x5e1f00d]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000013f5b4: std; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000010c85f: std; cmc; or eax, 0x528b4800; sbb byte ptr [rax - 0x73], cl; lodsb al, byte ptr [rsi]; ret 0x8207; 
0x0000000000144192: std; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000048f4a: std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000052a55: std; dec dword ptr [rax - 0x77]; ret; 
0x00000000000471e1: std; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000041d31: std; fstp st(1); ret; 
0x00000000001849d0: std; je 0x184a32; and ch, al; std; xlatb; ret; 
0x0000000000184abe: std; je 0x184b20; and ch, al; std; xlatb; ret; 
0x000000000002fdac: std; je 0x2fdc8; pop rbx; ret; 
0x000000000018ac3b: std; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000167eb3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000094d92: std; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000018ac37: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000189197: std; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000167ebb: std; mov word ptr [rdi - 2], cx; ret; 
0x00000000000bc9fd: std; or al, 0; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bbb6c: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000001220af: std; sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000052acf: std; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000001906e5: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000001905ce: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018fcb8: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa7e: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000001901a6: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018919b: std; vzeroupper; ret; 
0x00000000001847d9: std; xlatb; ret 0xc085; 
0x0000000000184cd7: std; xlatb; ret 0xe883; 
0x00000000001847e1: std; xlatb; ret; 
0x0000000000188528: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000188584: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000018470e: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000001847d1: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x00000000001882d1: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000189536: std; xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x0000000000184a7c: std; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000000f0b01: sti; add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x00000000000d13be: sti; add al, byte ptr [rcx]; ret; 
0x00000000000e872c: sti; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000017c951: sti; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000c974d: sti; add ecx, dword ptr [rdi]; xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000c9471: sti; add ecx, dword ptr [rdi]; xchg dl, bh; add eax, 0x89490000; ret; 
0x00000000000d33a8: sti; dec dword ptr [rax + 0x39]; ret; 
0x00000000000628ce: sti; dec dword ptr [rax - 0x77]; ret 0x12eb; 
0x0000000000062a3f: sti; dec dword ptr [rax - 0x77]; ret 0x9ee9; 
0x000000000015c867: sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e2e71: sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000e2d4b: sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x00000000000e2c91: sti; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x00000000000e2fcd: sti; inc dword ptr [rcx + rcx*4 - 0x18]; pop rbp; pop r12; pop r13; ret; 
0x00000000000d40d1: sti; mov al, 0x11; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000168298: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168292: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001197bc: sti; mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000009f861: sti; not byte ptr [rax + rax]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x0000000000033905: sti; or al, 0x74; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000140cbb: sti; or al, byte ptr [rax]; test eax, eax; je 0x140cc8; ret; 
0x00000000000ee2da: sti; or dh, byte ptr [rbp + rdi + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000499ea: sti; or dword ptr [rdi], 0xae85; add byte ptr [rcx], dh; div bh; ret 0; 
0x000000000010c284: sti; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000004283c: sti; push rax; ret; 
0x000000000004f2e2: sti; ret 0xffbf; 
0x00000000000911a1: sti; ret; 
0x00000000000e9ec2: sti; sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x00000000000628cd: sti; sti; dec dword ptr [rax - 0x77]; ret 0x12eb; 
0x000000000018ff7a: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000078802: stosb byte ptr [rdi], al; add al, 0; add byte ptr [rbx - 0x78f0d008], al; sbb eax, 0x8900000b; ret 0xc083; 
0x00000000000f954c: stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret 0x7a8d; 
0x00000000001964f7: stosb byte ptr [rdi], al; idiv bh; dec dword ptr [rbp - 0x76b63fb6]; ret 0xd349; 
0x00000000000bbf68: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000001218ac: stosb byte ptr [rdi], al; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121877: stosb byte ptr [rdi], al; or al, 0; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000a09b9: stosb byte ptr [rdi], al; or al, 0; cmovne rax, rdx; ret; 
0x0000000000094a52: stosb byte ptr [rdi], al; popfq; adc eax, 0x5b050f00; ret; 
0x000000000014db6a: stosb byte ptr [rdi], al; push -0x76b7fffa; ret; 
0x00000000000ac621: stosd dword ptr [rdi], eax; add byte ptr [rax], al; add byte ptr [rbx - 0x79f0ef06], al; ret 0; 
0x00000000000b1f14: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf844: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000028ee1: stosd dword ptr [rdi], eax; mov al, 0; add byte ptr [rcx - 0x77], al; ret 0xcde9; 
0x000000000013c5d4: stosd dword ptr [rdi], eax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x0000000000127923: stosd dword ptr [rdi], eax; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x00000000000989d6: stosd dword ptr [rdi], eax; pop rbp; ret; 
0x0000000000043af0: stosd dword ptr [rdi], eax; ret; 
0x00000000000b1e75: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000412b4: stosd dword ptr [rdi], eax; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000c1831: stosd dword ptr [rdi], eax; stc; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013c5d3: stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d5: stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aef: stosq qword ptr [rdi], rax; ret; 
0x00000000000bb3cd: str word ptr [r11 + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000c683f: str word ptr [rax + 0x21]; ret 0x8948; 
0x00000000000a05cd: str word ptr [rax - 0x73]; adc eax, 0xf03aa; cmove rax, rdx; ret; 
0x00000000000c6912: str word ptr [rax - 0x77]; ret 0xc148; 
0x0000000000041f84: str word ptr [rax - 0x7b]; ret 0x574; 
0x00000000000bb3ce: str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x0000000000051bee: str word ptr [rcx]; ret 0x8f74; 
0x00000000000c683e: str word ptr fs:[rax + 0x21]; ret 0x8948; 
0x000000000009b1b4: sub ah, 0x11; add al, ch; ret; 
0x000000000012052a: sub al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x0000000000120684: sub al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120708; ret; 
0x0000000000076fab: sub al, 0; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000009c1e9: sub al, 0x15; add byte ptr [rbx + 0x22], dh; lea rax, [rax - 8]; ret; 
0x000000000009c1e0: sub al, 0x15; add byte ptr [rdx + 0x2b], dh; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x0000000000046ad8: sub al, 0x24; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000a2c0a: sub al, 0x24; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000005f935: sub al, 0x29; ret 0x8341; 
0x00000000000f248c: sub al, 0x31; rol byte ptr [rcx + rcx*4 + 0x45], 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f23c5: sub al, 0x31; ror byte ptr [rcx + 0x5d5b307d], 0x41; pop rsp; ret; 
0x0000000000120f10: sub al, 0x37; idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000cf022: sub al, 0x3b; sub al, 0x75; pop rax; ret; 
0x0000000000149675: sub al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000018bc36: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000000e0979: sub al, 0x74; cmovs ecx, dword ptr [rcx + 0x42b60fd1]; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000cf025: sub al, 0x75; pop rax; ret; 
0x00000000000de193: sub al, 0x83; imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000018c623: sub al, 0x83; ret 0x8104; 
0x000000000018e123: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000ec3d3: sub al, 0xc6; or byte ptr [r9], r11b; mov eax, 1; ret; 
0x0000000000057bcb: sub al, 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000011f140: sub al, 0xcd; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d2d08: sub al, 0xe; add al, ch; nop; xor edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000000cf8c7: sub al, 0xf5; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000003006c: sub al, 0xf; xchg esp, eax; ret 0xd108; 
0x00000000000b19b0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000011fee5: sub al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fef4; ret; 
0x00000000000cef85: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefe5: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf035: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000cef25: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x000000000004125a: sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000001201a1: sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120200; ret; 
0x0000000000120bef: sub al, byte ptr [rcx + rcx*4 - 0x31]; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000113247: sub al, byte ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000a387a: sub al, byte ptr [rcx - 0x73]; push rbx; inc dword ptr [rbp + rcx*4 + 0x60]; add dword ptr [rcx - 0x7d], eax; ret 0x4801; 
0x000000000012d99c: sub al, byte ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x62a3a; cmove rax, rdx; ret; 
0x00000000000412a7: sub al, ch; ret; 
0x0000000000185035: sub al, ch; std; xlatb; ret; 
0x000000000010d95d: sub bh, byte ptr [rax + 0x103]; syscall; cmp rax, -0x1000; ja 0x10d970; ret; 
0x00000000000dd11d: sub bh, byte ptr [rax + 0xe3]; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000cf016: sub byte ptr [r11], r15b; sub byte ptr [rbp + 0x63], r14b; ret; 
0x00000000000896ce: sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000102143: sub byte ptr [r13 - 0x7ccc8b40], al; ret 0x4c01; 
0x0000000000073d32: sub byte ptr [r15 + rcx - 0x4a], r8b; ret; 
0x0000000000043b3e: sub byte ptr [r15], r9b; adc dword ptr [rdi + 0x38], eax; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000157905: sub byte ptr [r8 + r15*4], r8b; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000001574e2: sub byte ptr [r8 - 0x77], r9b; ja 0x157500; mov eax, r8d; ret; 
0x00000000000bda12: sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000157517: sub byte ptr [r9 + r8 - 0x3a], r9b; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x000000000005b965: sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000157635: sub byte ptr [r9], r15b; sal byte ptr [rbx + 0xd], 1; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000014b730: sub byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000000283ab: sub byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000004a9a2: sub byte ptr [rax + 0x39], cl; ret; 
0x00000000000ecac8: sub byte ptr [rax + 0x63], cl; ret; 
0x00000000000ec845: sub byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157916: sub byte ptr [rax + 1], bh; ret; 
0x0000000000149b2d: sub byte ptr [rax + 1], cl; ret 0x5d89; 
0x0000000000157906: sub byte ptr [rax + rdi*4], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000008df2e: sub byte ptr [rax - 0x3f76bbfe], cl; ret; 
0x000000000008df2d: sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x00000000000d8ce8: sub byte ptr [rax - 0x75], cl; jl 0xd8d11; sbb byte ptr [rax + 0x63], cl; ret 0x8944; 
0x00000000001513ed: sub byte ptr [rax - 0x75], dl; and al, 0x28; push rax; call 0x151110; add rsp, 0x28; ret; 
0x00000000001574e3: sub byte ptr [rax - 0x77], cl; ja 0x157500; mov eax, r8d; ret; 
0x0000000000117df7: sub byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000081d6c: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000471e5: sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000086403: sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000008af95: sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bda13: sub byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000010299d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1029f6; add rsp, 0x38; ret; 
0x000000000010d177: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d32c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d338; add rsp, 0x10; pop rbp; ret; 
0x000000000010d43c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010d48e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d499; add rsp, 0x18; ret; 
0x000000000010decc: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4c2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e565; add rsp, 0x68; ret; 
0x000000000010e603: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e6bf; add rsp, 0x30; pop rbx; ret; 
0x000000000010e733: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e7ef; add rsp, 0x30; pop rbx; ret; 
0x000000000010f301: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10f350; add rsp, 0x130; pop rbp; ret; 
0x000000000010fb8f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10fb9d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112a51: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x112ad6; add rsp, 0x40; pop r12; ret; 
0x00000000001133c7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113456: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1134a3; add rsp, 0x18; ret; 
0x000000000011350e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135ac: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113a89: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113ab4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113af9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113b0b; add rsp, 0x18; ret; 
0x000000000011498b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a2b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114ae0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bb0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114c2b; add rsp, 0x38; ret; 
0x0000000000114caa: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114cb5; add rsp, 0x28; ret; 
0x000000000011508d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115129; add rsp, 0x60; pop rbp; ret; 
0x00000000001157f0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115807; add rsp, 0x58; ret; 
0x0000000000115869: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115874; add rsp, 0x28; ret; 
0x0000000000115940: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b64: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c33: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116c75; add rsp, 0x38; ret; 
0x0000000000118294: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1182a2; add rsp, 0xd8; ret; 
0x000000000011836d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11837b; add rsp, 0xd8; ret; 
0x00000000001196b5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011bd29: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bde9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c230: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c49d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x000000000011f0b5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120aba: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x120ac5; add rsp, 0x18; ret; 
0x0000000000120e79: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x120e8f; add rsp, 0xa0; pop rbx; ret; 
0x00000000001210ff: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12114b; add rsp, 0x58; ret; 
0x0000000000129b4b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b874: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12b882; add rsp, 0xd8; ret; 
0x000000000012d0d0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12d1ad; leave; ret; 
0x000000000012de55: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012df4b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e065: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012e12d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012ef6b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f085: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f093; add rsp, 0xd8; ret; 
0x000000000012f14d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f594: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f605; add rsp, 0x28; ret; 
0x000000000012f6bd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f79d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f87d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f88b; add rsp, 0xd8; ret; 
0x00000000001365cb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1365f9; add rsp, 0x38; ret; 
0x0000000000136668: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013c6ee: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013e125: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e145; add rsp, 0x20; pop rbx; ret; 
0x000000000013e17a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1cd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e1d8; add rsp, 0x28; ret; 
0x000000000013ea5c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13ea67; add rsp, 0x18; ret; 
0x00000000001449b9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1449c6; add rsp, 0x10; pop r12; ret; 
0x0000000000146327: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x146333; add rsp, 0x40; pop rbp; ret; 
0x00000000001490fd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x149143; add rsp, 0x10; pop rbx; ret; 
0x0000000000149670: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1496a2; add rsp, 0x10; pop rbx; ret; 
0x000000000014970e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x149745; add rsp, 0x10; pop rbx; ret; 
0x000000000014a321: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x14a337; add rsp, 0x40; pop rbx; ret; 
0x000000000015171f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151741; add rsp, 0x10; pop rbx; ret; 
0x0000000000151a71: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151aea; add rsp, 0x10; pop r12; ret; 
0x0000000000151ce8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151d5a; add rsp, 0x30; pop rbx; ret; 
0x0000000000151e28: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151e9a; add rsp, 0x30; pop rbx; ret; 
0x00000000001539e1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1539ec; add rsp, 0x78; ret; 
0x0000000000153a57: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b37: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b98: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bfc: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c67: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153cea: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153cf5; add rsp, 0x78; ret; 
0x000000000015421f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c92: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000155cfd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155d43; add rsp, 0x10; pop rbx; ret; 
0x0000000000155d8d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155dd2; add rsp, 0x10; pop rbx; ret; 
0x0000000000155e5d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155ea5; add rsp, 0x10; pop rbp; ret; 
0x00000000001562ad: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1562f4; add rsp, 0x10; pop rbx; ret; 
0x000000000015633d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x156383; add rsp, 0x10; pop rbx; ret; 
0x000000000015650d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x156559; add rsp, 0x10; pop rbx; ret; 
0x000000000015659d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1565e3; add rsp, 0x10; pop rbx; ret; 
0x000000000015728d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1572d5; add rsp, 0x10; pop rbx; ret; 
0x000000000015731d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157365; add rsp, 0x10; pop rbx; ret; 
0x00000000001573ad: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1573f5; add rsp, 0x10; pop rbx; ret; 
0x000000000015743d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157485; add rsp, 0x10; pop rbx; ret; 
0x0000000000157b15: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157b24; add rsp, 0x90; pop rbx; ret; 
0x0000000000157b89: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157b97; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157bea: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157bf8; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157c56: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157c62; add rsp, 0x10; pop rbx; ret; 
0x0000000000157cc9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157cd5; add rsp, 0x10; pop rbx; ret; 
0x000000000015cabe: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15caf4; add rsp, 0x18; ret; 
0x000000000015cdb5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15cdec; add rsp, 0x10; pop rbp; ret; 
0x000000000015ce45: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15ce7c; add rsp, 0x10; pop rbp; ret; 
0x000000000015fa10: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb07: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcb0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd79: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fdbc; add rsp, 0x38; ret; 
0x0000000000160e0c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000163397: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1633a3; add rsp, 0x10; pop rbx; ret; 
0x000000000016341d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x163429; add rsp, 0x10; pop rbx; ret; 
0x0000000000042b91: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042eeb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043018: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000004322c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043324: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435c0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043643: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43658; add rsp, 0x118; ret; 
0x000000000004374e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4375c; add rsp, 0x98; ret; 
0x0000000000043992: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043cee: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047db9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e06: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e58: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f45: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f50; add rsp, 0x18; ret; 
0x00000000000521f2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c01: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x54159; add rsp, 0xd8; ret; 
0x00000000000578be: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57945; leave; ret; 
0x000000000005b5af: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b871: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c74: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d49: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061e00: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f94: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062054: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062142: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062219: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62227; add rsp, 0xd8; ret; 
0x000000000006283f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62df7; add rsp, 0x18; ret; 
0x000000000006316c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063247: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x864d2; add rsp, 0xd8; ret; 
0x0000000000086580: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086679: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086749: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086802: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000008dbd4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8dbeb; add rsp, 0x48; ret; 
0x00000000000991fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x000000000009d5fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000ca0af: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000cab8c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac67: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000d01ef: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d0269: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d1035: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf88: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000ddc51: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000df40b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e3662: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3832: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45ab: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000004785e: sub byte ptr [rax], al; add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000014de91: sub byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112fa8: sub byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x112fb7; ret; 
0x0000000000127ad9: sub byte ptr [rax], al; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000147024: sub byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000000dd794: sub byte ptr [rbp + 0x5b2b74c0], al; pop rbp; pop r12; ret; 
0x00000000000cf01a: sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000cf019: sub byte ptr [rbp + 0x63], r14b; ret; 
0x00000000000896cf: sub byte ptr [rbp - 0x7b], al; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000102144: sub byte ptr [rbp - 0x7ccc8b40], al; ret 0x4c01; 
0x00000000000860bc: sub byte ptr [rbx + 0x11], dh; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000860bb: sub byte ptr [rbx + 0x11], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086263: sub byte ptr [rbx + 0x12], dh; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086262: sub byte ptr [rbx + 0x12], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001524c7: sub byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x00000000000426d5: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000639d1: sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000005b05f: sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000f2bd7: sub byte ptr [rbx + rcx*4 + 0x3c], cl; ret 0xfe8; 
0x000000000015f808: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x000000000015f807: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x00000000000a1c7c: sub byte ptr [rbx], 0xe; add byte ptr [rax - 0x73], cl; add eax, 0xa569; cmove rax, rdx; ret; 
0x00000000000cf017: sub byte ptr [rbx], bh; sub byte ptr [rbp + 0x63], r14b; ret; 
0x0000000000157518: sub byte ptr [rcx + rax - 0x3a], cl; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000111e6c: sub byte ptr [rcx + rcx*4 + 0x34], cl; and al, 0xe9; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000005b966: sub byte ptr [rcx + rcx*4 + 4], cl; ret 0x8b4c; 
0x0000000000152c8b: sub byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x000000000014b2a0: sub byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008aba0: sub byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x000000000006272d: sub byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; ret; 
0x00000000000d17d4: sub byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008187a: sub byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000000e2e69: sub byte ptr [rcx - 0x17f3dbbc], cl; int 0x17; sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000295eb: sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000001145e7: sub byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114658; ret; 
0x0000000000157636: sub byte ptr [rcx], bh; sal byte ptr [rbx + 0xd], 1; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000073d33: sub byte ptr [rdi + rcx - 0x4a], al; ret; 
0x00000000000d4237: sub byte ptr [rdi + rcx*4 + 2], bl; jbe 0xd4240; ret; 
0x000000000011531a: sub byte ptr [rdi - 0x11e2153], bh; mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115330; ret; 
0x00000000001492a4: sub byte ptr [rdi - 0x17], dh; mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000001576ec: sub byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; ret; 
0x0000000000043b3f: sub byte ptr [rdi], cl; adc dword ptr [rdi + 0x38], eax; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x00000000000ea41f: sub byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000014e525: sub byte ptr [rdx], cl; add al, ch; ret; 
0x000000000014e4fe: sub byte ptr [rdx], cl; add byte ptr [rax - 0x77], cl; in eax, 0x89; ret; 
0x000000000014e5c3: sub byte ptr [rdx], cl; add byte ptr [rdi], cl; add eax, 0xa1e88beb; adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x0000000000099614: sub byte ptr [rip - 0x3fcebb00], dl; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000ea419: sub byte ptr [rsp + rdx + 0x3c], dh; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000014e5c2: sub byte ptr es:[rdx], cl; add byte ptr [rdi], cl; add eax, 0xa1e88beb; adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x0000000000042106: sub cl, al; ret; 
0x000000000010c615: sub cl, byte ptr [rax + 0x63]; ret 0xc283; 
0x000000000008eaeb: sub cl, byte ptr [rax + 1]; ret 0x4866; 
0x00000000000cfe46: sub cl, byte ptr [rax - 0x48]; mov al, 0x1e; test ebx, ebp; push rcx; mov eax, 0x148051e; ret 0xb848; 
0x00000000000f1d6f: sub cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000074581: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000009471c: sub dh, byte ptr [rbp - 0x1f]; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x0000000000140b72: sub dl, byte ptr [rbx - 0x10]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000099431: sub dl, byte ptr [rip - 0x3fcebb00]; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000046ad6: sub dword ptr [r12], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000e4f3e: sub dword ptr [rax + 0x7fffffff], edi; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000000ea41d: sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000120643: sub dword ptr [rax - 0x2708fff4], edi; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000013f5df: sub dword ptr [rax - 0x75], ecx; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000007d739: sub dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013b40a: sub dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000001207a5: sub dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1207b4; ret; 
0x00000000000d1dc3: sub dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000000d1fe9: sub dword ptr [rax], eax; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000098653: sub dword ptr [rbp + 0x15], eax; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000053cac: sub dword ptr [rbp - 0x3900000b], 2; and byte ptr [rcx - 0x7d], cl; ret; 
0x00000000001482f6: sub dword ptr [rbx + 0x147401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000198a56: sub dword ptr [rbx + 0x55da22d], eax; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000000de194: sub dword ptr [rbx + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000de23b: sub dword ptr [rbx + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001785d3: sub dword ptr [rbx], eax; add byte ptr [rax], al; ret; 
0x0000000000118a43: sub dword ptr [rcx + 0x64d8f700], esi; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001571c6: sub dword ptr [rcx + rcx*4 - 0x40], eax; ret; 
0x0000000000081874: sub dword ptr [rdi], 1; add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000082400: sub dword ptr [rdi], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000008ac40: sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000085680: sub dword ptr [rdi], 1; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x000000000008254f: sub dword ptr [rdi], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000006308a: sub dword ptr [rdi], 1; ret; 
0x00000000000bbd45: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000114443: sub dword ptr [rdx + 0xd], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120443: sub dword ptr [rdx - 0x2708fff4], edi; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000018f779: sub dword ptr [rdx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000e1d23: sub dword ptr [rip + 0x10d7b6], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000e1c30: sub dword ptr [rip + 0x10d8a9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1b58: sub dword ptr [rip + 0x10d981], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfdf3: sub dword ptr [rip + 0x10f576], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000dfd00: sub dword ptr [rip + 0x10f669], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc28: sub dword ptr [rip + 0x10f741], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000df4d0: sub dword ptr [rip + 0x10fe09], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000d290c: sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x0000000000098d0c: sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000099f4f: sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x00000000000949f7: sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x00000000000938fc: sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000090ff0: sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x0000000000083f3c: sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000061052: sub dword ptr [rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x0000000000054cd0: sub dword ptr [rip + 0x199a59], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000047797: sub dword ptr [rip + 0x1a6d42], 1; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000475f9: sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x00000000000466fc: sub dword ptr [rip + 0x1a7585], 1; xor eax, eax; pop rbx; ret; 
0x0000000000198a57: sub dword ptr [rip + 0x55da2], 1; pop rbx; ret; 
0x0000000000198d68: sub dword ptr [rip + 0x577a9], 1; pop rbp; ret; 
0x000000000015e10e: sub dword ptr [rip + 0x93543], 1; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000015cfbb: sub dword ptr [rip + 0x94696], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cedb: sub dword ptr [rip + 0x94776], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cd11: sub dword ptr [rip + 0x94940], 1; add rsp, 8; ret; 
0x000000000015cc77: sub dword ptr [rip + 0x949da], 1; mov rax, r8; pop rbp; ret; 
0x000000000015cbcb: sub dword ptr [rip + 0x94a86], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cb31: sub dword ptr [rip + 0x94b20], 1; add rsp, 8; ret; 
0x000000000014c849: sub dword ptr [rip + 0xa44d8], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x000000000014c750: sub dword ptr [rip + 0xa45d1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014c66e: sub dword ptr [rip + 0xa46b3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000014c200: sub dword ptr [rip + 0xa4ac1], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001423f8: sub dword ptr [rip + 0xae619], 1; pop rbp; ret; 
0x000000000013d66d: sub dword ptr [rip + 0xb2ea4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000138920: sub dword ptr [rip + 0xb7b79], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000138730: sub dword ptr [rip + 0xb7d09], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000138658: sub dword ptr [rip + 0xb7de1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000137f3f: sub dword ptr [rip + 0xb84f2], 1; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x0000000000137c17: sub dword ptr [rip + 0xb881a], 1; add rsp, 8; ret; 
0x00000000001379f9: sub dword ptr [rip + 0xb8a38], 1; mov eax, r8d; pop rbp; ret; 
0x00000000001346d9: sub dword ptr [rip + 0xbbbe8], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000001345e0: sub dword ptr [rip + 0xbbce1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000134430: sub dword ptr [rip + 0xbbe89], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000133279: sub dword ptr [rip + 0xbcee0], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000133180: sub dword ptr [rip + 0xbcfd9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013309e: sub dword ptr [rip + 0xbd0bb], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000132fd0: sub dword ptr [rip + 0xbd181], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000132453: sub dword ptr [rip + 0xbdc56], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013236e: sub dword ptr [rip + 0xbdd3b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013228d: sub dword ptr [rip + 0xbde14], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000131803: sub dword ptr [rip + 0xbe7de], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013163d: sub dword ptr [rip + 0xbe99c], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000126513: sub dword ptr [rip + 0xc9916], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000126420: sub dword ptr [rip + 0xc9a09], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000126348: sub dword ptr [rip + 0xc9ae1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001259d0: sub dword ptr [rip + 0xca389], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001258f5: sub dword ptr [rip + 0xca410], 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000124970: sub dword ptr [rip + 0xcb361], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124898: sub dword ptr [rip + 0xcb439], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000123d00: sub dword ptr [rip + 0xcbea1], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000011865b: sub dword ptr [rip + 0xd71ee], 1; add rsp, 8; ret; 
0x0000000000117bfc: sub dword ptr [rip + 0xd7c4d], 1; ret; 
0x000000000018e906: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000013a017: sub dword ptr [rsi - 0x7d], esp; jg 0x13a01e; add ecx, dword ptr [rdi]; test byte ptr [rbp - 0x7d000000], cl; ret 0x8103; 
0x000000000012da5c: sub dword ptr [rsi], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x6295a; cmove rax, rdx; ret; 
0x000000000004260f: sub dword ptr [rsp - 0x18], eax; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000046ad7: sub dword ptr [rsp], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000e1d22: sub dword ptr gs:[rip + 0x10d7b6], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000dfdf2: sub dword ptr gs:[rip + 0x10f576], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000126512: sub dword ptr gs:[rip + 0xc9916], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x000000000011865a: sub dword ptr gs:[rip + 0xd71ee], 1; add rsp, 8; ret; 
0x0000000000061051: sub dword ptr ss:[rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x0000000000184dc7: sub eax, -1; jne 0x184dd0; vzeroupper; ret; 
0x000000000018bd77: sub eax, -1; jne 0x18bd80; vzeroupper; ret; 
0x00000000000de23a: sub eax, 0x1046b83; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b807a: sub eax, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98ca: sub eax, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000bb32a: sub eax, 0x10; jb 0xbabc9; movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000001783b2: sub eax, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x000000000017c743: sub eax, 0x10; lea rcx, [rdx + 0x10]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b78a9: sub eax, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fcd: sub eax, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x000000000009c272: sub eax, 0x10; ret; 
0x00000000000df4d1: sub eax, 0x10fe09; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000000b78cc: sub eax, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8ff0: sub eax, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x0000000000094e6c: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000b78f1: sub eax, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9015: sub eax, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b790f: sub eax, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9043: sub eax, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b792f: sub eax, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9073: sub eax, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7952: sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a6: sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7971: sub eax, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d5: sub eax, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7991: sub eax, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9105: sub eax, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b1: sub eax, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9135: sub eax, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x0000000000061053: sub eax, 0x18d6f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000054cd1: sub eax, 0x199a59; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000b79d4: sub eax, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b9168: sub eax, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a09: sub eax, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b919d: sub eax, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a37: sub eax, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91cb: sub eax, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a67: sub eax, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fb: sub eax, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a93: sub eax, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b9227: sub eax, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac3: sub eax, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b9257: sub eax, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af3: sub eax, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b9287: sub eax, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x0000000000189afd: sub eax, 0x20; jb 0x1898e5; vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018a7fd: sub eax, 0x20; jb 0x18a415; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b52d: sub eax, 0x20; jb 0x18b145; vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b7b23: sub eax, 0x20; lea rdi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92b7: sub eax, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x000000000014ef37: sub eax, 0x40c48348; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec402: sub eax, 0x47c6e875; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x0000000000118bf7: sub eax, 0x48000d4c; add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000000843ff: sub eax, 0x4cfff9df; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000000085f32: sub eax, 0x5b012f83; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000004229d: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000015163a: sub eax, 0x89480006; ret; 
0x00000000000df5b9: sub eax, 0x8948fff4; ret 0x8548; 
0x0000000000113b9c: sub eax, 0x89c78944; and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000018698f: sub eax, 0x8b00014b; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000ff6a8: sub eax, 0x8b48fff2; je 0xff6d3; adc byte ptr [rbx - 0x76f3dbb4], cl; ret 0x8b4c; 
0x000000000015e10f: sub eax, 0x93543; add dword ptr [rcx + rcx*4 - 0x20], eax; pop rbp; pop r12; pop r13; ret; 
0x000000000015cc78: sub eax, 0x949da; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000014c201: sub eax, 0xa4ac1; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001786b0: sub eax, 0xa; lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x000000000017caa1: sub eax, 0xa; lea rcx, [rdx + 0xa]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b77ef: sub eax, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed3: sub eax, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x0000000000138921: sub eax, 0xb7b79; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001379fa: sub eax, 0xb8a38; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbp; ret; 
0x00000000001786d0: sub eax, 0xb; lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x00000000000b780d: sub eax, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f01: sub eax, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x0000000000134431: sub eax, 0xbbe89; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000132fd1: sub eax, 0xbd181; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013228e: sub eax, 0xbde14; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013163e: sub eax, 0xbe99c; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000184a5f: sub eax, 0xc5000001; std; xlatb; ret; 
0x00000000001786f0: sub eax, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x00000000000b782d: sub eax, 0xc; lea rdi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f21: sub eax, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000001259d1: sub eax, 0xca389; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001258f6: sub eax, 0xca410; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x0000000000123d01: sub eax, 0xcbea1; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000092b10: sub eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000178712: sub eax, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017cb33: sub eax, 0xd; lea rcx, [rdx + 0xd]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b784f: sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f43: sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x0000000000178732: sub eax, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017cb63: sub eax, 0xe; lea rcx, [rdx + 0xe]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b786f: sub eax, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f73: sub eax, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x0000000000178752: sub eax, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x000000000017cb93: sub eax, 0xf; lea rcx, [rdx + 0xf]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b788f: sub eax, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa3: sub eax, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x0000000000184ebf: sub eax, 0xffff; jne 0x184dd0; ret; 
0x000000000018bdfd: sub eax, 0xffff; jne 0x18bd80; ret; 
0x000000000014ff1b: sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d13b: sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000015083a: sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001785a8: sub eax, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x000000000018a2c9: sub eax, 1; lea rdi, [rdi + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018afe1: sub eax, 1; lea rdi, [rdi + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76c3: sub eax, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8da6: sub eax, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a4e0: sub eax, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b214: sub eax, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b430; vzeroupper; ret; 
0x000000000002fda4: sub eax, 1; mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x000000000002fdbc: sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000055bef: sub eax, 1; ret; 
0x0000000000094c94: sub eax, 2; add rsp, 8; ret; 
0x00000000001785ca: sub eax, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x000000000018a477: sub eax, 2; lea rdi, [rdi + 2]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1ab: sub eax, 2; lea rdi, [rdi + 2]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76e7: sub eax, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dcb: sub eax, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x00000000001785f0: sub eax, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x000000000017c991: sub eax, 3; lea rcx, [rdx + 3]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a49b: sub eax, 3; lea rdi, [rdi + 3]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1cf: sub eax, 3; lea rdi, [rdi + 3]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b770a: sub eax, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8dee: sub eax, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000005b32f: sub eax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000178608: sub eax, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017c9b9: sub eax, 4; lea rcx, [rdx + 4]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a4b5: sub eax, 4; lea rdi, [rdi + 4]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1e9: sub eax, 4; lea rdi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b7725: sub eax, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e09: sub eax, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000017862e: sub eax, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017c9df: sub eax, 5; lea rcx, [rdx + 5]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7748: sub eax, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e2c: sub eax, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x0000000000178650: sub eax, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017ca11: sub eax, 6; lea rcx, [rdx + 6]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b776d: sub eax, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e51: sub eax, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x000000000017866e: sub eax, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x000000000017ca3f: sub eax, 7; lea rcx, [rdx + 7]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b778b: sub eax, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e6f: sub eax, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x0000000000055c3c: sub eax, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x000000000017834a: sub eax, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x00000000000b77a7: sub eax, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8b: sub eax, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x0000000000178690: sub eax, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x00000000000b77ca: sub eax, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8eae: sub eax, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000bc79e: sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000bc79f: sub eax, dword ptr [rax + rcx*4]; je 0xbc780; ret; 
0x00000000001200d1: sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120130; ret; 
0x000000000007d60d: sub eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000034cb3: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012da31: sub eax, dword ptr [rbx + rax + 0x158d4800]; mov ah, 0xd9; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000074531: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x46; or al, 0x83; ret; 
0x00000000000bc740: sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000bc741: sub eax, dword ptr [rcx + rax*4]; je 0xbc728; ret; 
0x00000000000e2c86: sub eax, dword ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000120116: sub eax, dword ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001129a6: sub eax, dword ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000120b94: sub eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120c08; ret; 
0x0000000000093ea2: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000008ce2d: sub eax, dword ptr [rdi + 0x20]; ret; 
0x0000000000127659: sub eax, dword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127670; mov eax, 1; ret; 
0x000000000008ccfd: sub eax, dword ptr [rdi + 0x38]; ret; 
0x00000000000885e9: sub eax, dword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce1a: sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccea: sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000093567: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000012d8dc: sub eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x62afa; cmove rax, rdx; ret; 
0x0000000000057de3: sub eax, eax; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000015f23a: sub eax, ecx; add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000184e13: sub eax, ecx; je 0x184e20; sbb eax, eax; or eax, 1; ret; 
0x0000000000057c15: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057d9d: sub eax, ecx; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000aa38c: sub eax, ecx; ret; 
0x0000000000057b70: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001294e2: sub eax, ecx; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x0000000000092a29: sub eax, ecx; sub eax, 1; ret; 
0x0000000000183f0f: sub eax, ecx; vzeroupper; ret; 
0x00000000000989c8: sub eax, edi; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000000b1d59: sub eax, edi; ret; 
0x00000000000cf84e: sub eax, edi; shr rax, 2; ret; 
0x000000000008b6fc: sub eax, edx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000009e922: sub eax, edx; mov rdx, qword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x000000000009c266: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x000000000008f561: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000149328: sub eax, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000000472f9: sub eax, edx; ret; 
0x0000000000041b6a: sub eax, edx; sar eax, 0x10; ret; 
0x000000000008aa13: sub eax, edx; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000042283: sub eax, edx; shr eax, 0x1f; ret; 
0x00000000001294ab: sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000041ec9: sub eax, edx; shr rax, 0x3f; ret; 
0x000000000018d0a0: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000018a4dd: sub eax, edx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b211: sub eax, edx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b430; vzeroupper; ret; 
0x0000000000183c12: sub eax, edx; vzeroupper; ret; 
0x0000000000057de2: sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057d9c: sub eax, r9d; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000001294e1: sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x00000000000a0641: sub ebx, dword ptr [rax + 0xc]; add byte ptr [rax - 0x73], cl; adc eax, 0xcadb4; cmovne rax, rdx; ret; 
0x00000000000dea4b: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000060ef7: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000000dd798: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000013c3f6: sub ebx, dword ptr [rbx + 0x5d]; ret; 
0x0000000000165e35: sub ebx, edx; jbe 0x165e44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fc75: sub ebx, edx; jbe 0x17fc84; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abe95: sub ebx, edx; jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000043ae8: sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000005651d: sub ecx, 1; div r8; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x00000000000479c6: sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000015d230: sub ecx, 5; cmp cx, 3; jbe 0x15d240; ret; 
0x000000000015f802: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x000000000009c1e4: sub ecx, dword ptr [rax + 0x3b]; or eax, 0x152ca4; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000010c2d8: sub ecx, dword ptr [rax - 0x77]; or byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000056b52: sub ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b7751: sub ecx, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000105130: sub ecx, dword ptr [rbx - 0x76b7ef90]; ret 0x8b48; 
0x000000000018d3f4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000188a54: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x00000000000a1c7d: sub ecx, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0xa569; cmove rax, rdx; ret; 
0x0000000000087df9: sub ecx, eax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x000000000010859f: sub ecx, ebp; ret; 
0x000000000011f543: sub ecx, ecx; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000129471: sub ecx, ecx; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000010c684: sub ecx, edi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae6: sub ecx, edi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000041b1f: sub ecx, edx; not eax; and eax, ecx; ret; 
0x000000000014927f: sub ecx, esi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000129434: sub ecx, esi; shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000129470: sub ecx, r9d; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000000cf34c: sub edi, 0x10; add rax, rdi; ret; 
0x0000000000122c50: sub edi, 0x30; xor r8d, r8d; cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x0000000000091f31: sub edi, dword ptr [rdi + rdi*8 + 0x6693ebff]; nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000000ac6d4: sub edx, 0x10; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac6b4: sub edx, 0x20; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac694: sub edx, 0x30; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac684: sub edx, 0x40; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184aeb: sub edx, 0x80; add rdx, rax; jl 0x184be0; add rax, rdi; vzeroupper; ret; 
0x00000000001461c1: sub edx, 1; jne 0x146148; ret; 
0x0000000000055629: sub edx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000055871: sub edx, 1; jne 0x55858; mov eax, 1; ret; 
0x00000000000a13e6: sub edx, 2; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x000000000009c1fe: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000093598: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000093589: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000087ea2: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000087eb4: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000008f55c: sub edx, dword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000000abf3d: sub edx, eax; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a4: sub edx, eax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b4: sub edx, eax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c4: sub edx, eax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d4: sub edx, eax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11d: sub edx, eax; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce384: sub edx, eax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce394: sub edx, eax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a4: sub edx, eax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b4: sub edx, eax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000001294df: sub edx, eax; sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x00000000001141b8: sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x0000000000183888: sub edx, esi; cmp edx, ecx; jle 0x1838a4; movsxd rax, ecx; ret; 
0x00000000001294de: sub edx, r8d; sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x000000000013c171: sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x00000000000beeb1: sub esi, dword ptr [rbp - 7]; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000119076: sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012e7a8: sub esi, dword ptr [rcx]; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x000000000011f843: sub esi, eax; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001294a9: sub esi, eax; sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x000000000013f9f0: sub esi, ebp; dec dword ptr [rax - 0x77]; ret; 
0x00000000000df789: sub esi, esp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001294a8: sub esi, r8d; sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000151ba8: sub esp, -0x80; mov eax, r8d; pop rbp; ret; 
0x000000000010dab8: sub esp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010c7a5: sub esp, 0x10; push 0; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000010c7c5: sub esp, 0x10; push 1; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd5: sub esp, 0x10; push 2; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000136c75: sub esp, 0x10; push 2; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf5: sub esp, 0x10; push 3; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000012e8b5: sub esp, 8; call 0x10ea70; test rax, rax; je 0x12e8d0; add rsp, 8; ret; 
0x0000000000146fa1: sub esp, 8; call 0x114c70; mov dword ptr [rip + 0xa9bcd], eax; add rsp, 8; ret; 
0x00000000001176e5: sub esp, 8; call 0x1173e0; mov qword ptr [rip + 0xd809c], rax; add rsp, 8; ret; 
0x000000000012dbe2: sub esp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012eba7: sub esp, 8; call 0x12e340; nop; mov rax, rdi; ret; 
0x000000000012ec78: sub esp, 8; call 0x12e340; ret; 
0x0000000000140cc9: sub esp, 8; call 0x140750; or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x0000000000026f69: sub esp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x0000000000047d15: sub esp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000141205: sub esp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x00000000000445b5: sub esp, 8; mov edx, 0xa; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000157d15: sub esp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x00000000000a8e25: sub esp, 8; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000008ad2c: sub qword ptr [r15], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000085355: sub qword ptr [rdi], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000198d67: sub qword ptr [rip + 0x577a9], 1; pop rbp; ret; 
0x000000000015cfba: sub qword ptr [rip + 0x94696], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015ceda: sub qword ptr [rip + 0x94776], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x00000000001423f7: sub qword ptr [rip + 0xae619], 1; pop rbp; ret; 
0x0000000000165e34: sub r11, rdx; jbe 0x165e44; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fc74: sub r11, rdx; jbe 0x17fc84; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abe94: sub r11, rdx; jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000b8079: sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98c9: sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000bb329: sub r8, 0x10; jb 0xbabc9; movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000001783b1: sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178900; ret; 
0x000000000017c742: sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b78a8: sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fcc: sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b78cb: sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8fef: sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b78f0: sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9014: sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b790e: sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9042: sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b792e: sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9072: sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7951: sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a5: sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7970: sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d4: sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7990: sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9104: sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b0: sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9134: sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b79d3: sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b9167: sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a08: sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b919c: sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a36: sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91ca: sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a66: sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fa: sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a92: sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b9226: sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac2: sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b9256: sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af2: sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b9286: sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x0000000000189afc: sub r8, 0x20; jb 0x1898e5; vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018a7fc: sub r8, 0x20; jb 0x18a415; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b52c: sub r8, 0x20; jb 0x18b145; vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b7b22: sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92b6: sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000001786af: sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178900; ret; 
0x000000000017caa0: sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b77ee: sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed2: sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000001786cf: sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178900; ret; 
0x00000000000b780c: sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f00: sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000001786ef: sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178900; ret; 
0x00000000000b782c: sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f20: sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x0000000000178711: sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178900; ret; 
0x000000000017cb32: sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b784e: sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f42: sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x0000000000178731: sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178900; ret; 
0x000000000017cb62: sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b786e: sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f72: sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x0000000000178751: sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178900; ret; 
0x000000000017cb92: sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b788e: sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa2: sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000001785a7: sub r8, 1; lea rcx, [rdx + 1]; jne 0x178900; ret; 
0x000000000018a2c8: sub r8, 1; lea rdi, [rdi + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018afe0: sub r8, 1; lea rdi, [rdi + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76c2: sub r8, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8da5: sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a4df: sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b213: sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b430; vzeroupper; ret; 
0x00000000001785c9: sub r8, 2; lea rcx, [rdx + 2]; jne 0x178900; ret; 
0x000000000018a476: sub r8, 2; lea rdi, [rdi + 2]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1aa: sub r8, 2; lea rdi, [rdi + 2]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b76e6: sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dca: sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x00000000001785ef: sub r8, 3; lea rcx, [rdx + 3]; jne 0x178900; ret; 
0x000000000017c990: sub r8, 3; lea rcx, [rdx + 3]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a49a: sub r8, 3; lea rdi, [rdi + 3]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1ce: sub r8, 3; lea rdi, [rdi + 3]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b7709: sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8ded: sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x0000000000178607: sub r8, 4; lea rcx, [rdx + 4]; jne 0x178900; ret; 
0x000000000017c9b8: sub r8, 4; lea rcx, [rdx + 4]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a4b4: sub r8, 4; lea rdi, [rdi + 4]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b1e8: sub r8, 4; lea rdi, [rdi + 4]; jne 0x18b430; vzeroupper; ret; 
0x00000000000b7724: sub r8, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e08: sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000017862d: sub r8, 5; lea rcx, [rdx + 5]; jne 0x178900; ret; 
0x000000000017c9de: sub r8, 5; lea rcx, [rdx + 5]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7747: sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e2b: sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x000000000017864f: sub r8, 6; lea rcx, [rdx + 6]; jne 0x178900; ret; 
0x000000000017ca10: sub r8, 6; lea rcx, [rdx + 6]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b776c: sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e50: sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x000000000017866d: sub r8, 7; lea rcx, [rdx + 7]; jne 0x178900; ret; 
0x000000000017ca3e: sub r8, 7; lea rcx, [rdx + 7]; jne 0x17cd50; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b778a: sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e6e: sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x0000000000055c3b: sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x0000000000178349: sub r8, 8; lea rcx, [rdx + 8]; jne 0x178900; ret; 
0x00000000000b77a6: sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8a: sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x000000000017868f: sub r8, 9; lea rcx, [rdx + 9]; jne 0x178900; ret; 
0x00000000000b77c9: sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8ead: sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000989c7: sub r8, rdi; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000018a4dc: sub r8, rdx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a700; vzeroupper; ret; 
0x000000000018b210: sub r8, rdx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b430; vzeroupper; ret; 
0x0000000000149327: sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000009c271: sub rax, 0x10; ret; 
0x0000000000094e6b: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000bb853: sub rax, 1; ret; 
0x000000000005b32e: sub rax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000093ea1: sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008ce2c: sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000127658: sub rax, qword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127670; mov eax, 1; ret; 
0x000000000008ccfc: sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000885e8: sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce19: sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce9: sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000015f239: sub rax, rcx; add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000184e12: sub rax, rcx; je 0x184e20; sbb eax, eax; or eax, 1; ret; 
0x0000000000092a28: sub rax, rcx; sub eax, 1; ret; 
0x00000000000b1d58: sub rax, rdi; ret; 
0x00000000000cf84d: sub rax, rdi; shr rax, 2; ret; 
0x000000000008b6fb: sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000009c265: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x000000000008f560: sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000004730c: sub rax, rdx; ret; 
0x000000000008aa12: sub rax, rdx; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000041ec8: sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000018d09f: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018872f: sub rax, rdx; vzeroupper; ret; 
0x000000000005651c: sub rcx, 1; div r8; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x000000000015f801: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15f7f0; mov eax, 1; ret; 
0x0000000000087df8: sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x000000000010c683: sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae5: sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000014927e: sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000cf34b: sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000ac6d3: sub rdx, 0x10; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac6b3: sub rdx, 0x20; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac693: sub rdx, 0x30; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac683: sub rdx, 0x40; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184aea: sub rdx, 0x80; add rdx, rax; jl 0x184be0; add rax, rdi; vzeroupper; ret; 
0x00000000001461c0: sub rdx, 1; jne 0x146148; ret; 
0x0000000000055628: sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000055870: sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x00000000000a13e5: sub rdx, 2; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x000000000009c1fd: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000087ea1: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000087eb3: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000008f55b: sub rdx, qword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000000abf3c: sub rdx, rax; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a3: sub rdx, rax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b3: sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c3: sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d3: sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11c: sub rdx, rax; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce383: sub rdx, rax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce393: sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a3: sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b3: sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000151ba7: sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x000000000010dab7: sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010c7a4: sub rsp, 0x10; push 0; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000010c7c4: sub rsp, 0x10; push 1; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000162cd4: sub rsp, 0x10; push 2; call 0x10cfc0; add rsp, 0x18; ret; 
0x0000000000136c74: sub rsp, 0x10; push 2; call 0x1366f0; add rsp, 0x18; ret; 
0x0000000000162cf4: sub rsp, 0x10; push 3; call 0x10cfc0; add rsp, 0x18; ret; 
0x000000000012e8b4: sub rsp, 8; call 0x10ea70; test rax, rax; je 0x12e8d0; add rsp, 8; ret; 
0x0000000000146fa0: sub rsp, 8; call 0x114c70; mov dword ptr [rip + 0xa9bcd], eax; add rsp, 8; ret; 
0x00000000001176e4: sub rsp, 8; call 0x1173e0; mov qword ptr [rip + 0xd809c], rax; add rsp, 8; ret; 
0x000000000012dbe1: sub rsp, 8; call 0x12e340; nop word ptr [rax + rax]; ret; 
0x000000000012eba6: sub rsp, 8; call 0x12e340; nop; mov rax, rdi; ret; 
0x000000000012ec77: sub rsp, 8; call 0x12e340; ret; 
0x0000000000140cc8: sub rsp, 8; call 0x140750; or dword ptr [rip + 0xafaec], 2; add rsp, 8; ret; 
0x0000000000026f68: sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x0000000000047d14: sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000141204: sub rsp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x00000000000445b4: sub rsp, 8; mov edx, 0xa; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000157d14: sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x00000000000a8e24: sub rsp, 8; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000041fb7: subps xmm0, xmm1; ret; 
0x000000000004231f: subps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000041fb6: subsd xmm0, xmm1; ret; 
0x000000000004231e: subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000010c168: syscall; cmp rax, -0x1000; ja 0x10c1d0; ret; 
0x000000000010c218: syscall; cmp rax, -0x1000; ja 0x10c280; ret; 
0x000000000010d4b8: syscall; cmp rax, -0x1000; ja 0x10d4c8; ret; 
0x000000000010d517: syscall; cmp rax, -0x1000; ja 0x10d528; ret; 
0x000000000010d578: syscall; cmp rax, -0x1000; ja 0x10d588; ret; 
0x000000000010d900: syscall; cmp rax, -0x1000; ja 0x10d910; ret; 
0x000000000010d963: syscall; cmp rax, -0x1000; ja 0x10d970; ret; 
0x000000000010d9bd: syscall; cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x000000000010dbf6: syscall; cmp rax, -0x1000; ja 0x10dc08; ret; 
0x000000000010dfd0: syscall; cmp rax, -0x1000; ja 0x10e030; ret; 
0x000000000010e075: syscall; cmp rax, -0x1000; ja 0x10e0d0; ret; 
0x000000000010e109: syscall; cmp rax, -0x1000; ja 0x10e118; ret; 
0x000000000010e139: syscall; cmp rax, -0x1000; ja 0x10e148; ret; 
0x000000000010e815: syscall; cmp rax, -0x1000; ja 0x10e860; ret; 
0x000000000010e995: syscall; cmp rax, -0x1000; ja 0x10e9e0; ret; 
0x0000000000112965: syscall; cmp rax, -0x1000; ja 0x1129c0; ret; 
0x0000000000112fe8: syscall; cmp rax, -0x1000; ja 0x113068; ret; 
0x00000000001130ac: syscall; cmp rax, -0x1000; ja 0x1130c0; ret; 
0x00000000001130f1: syscall; cmp rax, -0x1000; ja 0x113100; ret; 
0x00000000001131f8: syscall; cmp rax, -0x1000; ja 0x113260; ret; 
0x00000000001132a8: syscall; cmp rax, -0x1000; ja 0x113310; ret; 
0x0000000000113349: syscall; cmp rax, -0x1000; ja 0x113358; ret; 
0x0000000000113606: syscall; cmp rax, -0x1000; ja 0x113618; ret; 
0x000000000011363c: syscall; cmp rax, -0x1000; ja 0x113650; ret; 
0x0000000000113679: syscall; cmp rax, -0x1000; ja 0x113688; ret; 
0x0000000000113b5f: syscall; cmp rax, -0x1000; ja 0x113bb8; ret; 
0x0000000000113d72: syscall; cmp rax, -0x1000; ja 0x113d80; ret; 
0x0000000000113db3: syscall; cmp rax, -0x1000; ja 0x113dc0; ret; 
0x00000000001143e5: syscall; cmp rax, -0x1000; ja 0x114440; ret; 
0x0000000000114485: syscall; cmp rax, -0x1000; ja 0x1144e0; ret; 
0x000000000011452b: syscall; cmp rax, -0x1000; ja 0x114598; ret; 
0x00000000001145eb: syscall; cmp rax, -0x1000; ja 0x114658; ret; 
0x0000000000114f78: syscall; cmp rax, -0x1000; ja 0x114ff0; ret; 
0x00000000001151a5: syscall; cmp rax, -0x1000; ja 0x1151f0; ret; 
0x0000000000115265: syscall; cmp rax, -0x1000; ja 0x1152b0; ret; 
0x0000000000115325: syscall; cmp rax, -0x1000; ja 0x115330; ret; 
0x0000000000116aa9: syscall; cmp rax, -0x1000; ja 0x116ab8; ret; 
0x0000000000116c8e: syscall; cmp rax, -0x1000; ja 0x116ca0; ret; 
0x0000000000116cc9: syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116cf9: syscall; cmp rax, -0x1000; ja 0x116d08; ret; 
0x00000000001188e4: syscall; cmp rax, -0x1000; ja 0x118950; pop rbx; pop rbp; ret; 
0x00000000001189e5: syscall; cmp rax, -0x1000; ja 0x118a40; ret; 
0x000000000011c4c0: syscall; cmp rax, -0x1000; ja 0x11c4d0; ret; 
0x000000000011f199: syscall; cmp rax, -0x1000; ja 0x11f1a8; ret; 
0x000000000011f23e: syscall; cmp rax, -0x1000; ja 0x11f2b8; ret; 
0x000000000011f2f1: syscall; cmp rax, -0x1000; ja 0x11f300; ret; 
0x000000000011f428: syscall; cmp rax, -0x1000; ja 0x11f490; ret; 
0x000000000011f4d8: syscall; cmp rax, -0x1000; ja 0x11f540; ret; 
0x000000000011f588: syscall; cmp rax, -0x1000; ja 0x11f5f0; ret; 
0x000000000011f638: syscall; cmp rax, -0x1000; ja 0x11f6b8; ret; 
0x000000000011f705: syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f7cd: syscall; cmp rax, -0x1000; ja 0x11f808; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011f831: syscall; cmp rax, -0x1000; ja 0x11f840; ret; 
0x00000000001200d5: syscall; cmp rax, -0x1000; ja 0x120130; ret; 
0x00000000001201a5: syscall; cmp rax, -0x1000; ja 0x120200; ret; 
0x000000000012030e: syscall; cmp rax, -0x1000; ja 0x120380; ret; 
0x00000000001203c8: syscall; cmp rax, -0x1000; ja 0x120440; ret; 
0x0000000000120485: syscall; cmp rax, -0x1000; ja 0x1204e0; ret; 
0x000000000012052e: syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205e5: syscall; cmp rax, -0x1000; ja 0x120640; ret; 
0x0000000000120688: syscall; cmp rax, -0x1000; ja 0x120708; ret; 
0x0000000000120ae8: syscall; cmp rax, -0x1000; ja 0x120b50; ret; 
0x0000000000120b98: syscall; cmp rax, -0x1000; ja 0x120c08; ret; 
0x0000000000120c48: syscall; cmp rax, -0x1000; ja 0x120cb0; ret; 
0x0000000000120eb8: syscall; cmp rax, -0x1000; ja 0x120f20; ret; 
0x0000000000120f68: syscall; cmp rax, -0x1000; ja 0x120fe0; ret; 
0x0000000000121019: syscall; cmp rax, -0x1000; ja 0x121028; ret; 
0x0000000000121049: syscall; cmp rax, -0x1000; ja 0x121058; ret; 
0x0000000000121089: syscall; cmp rax, -0x1000; ja 0x121098; ret; 
0x000000000012115c: syscall; cmp rax, -0x1000; ja 0x121170; ret; 
0x0000000000121199: syscall; cmp rax, -0x1000; ja 0x1211a8; ret; 
0x00000000001211c9: syscall; cmp rax, -0x1000; ja 0x1211d8; ret; 
0x00000000001211fc: syscall; cmp rax, -0x1000; ja 0x121210; ret; 
0x0000000000121239: syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000012e7ab: syscall; cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x000000000004340e: syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000004345a: syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x0000000000048225: syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000062e89: syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x0000000000062ebc: syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x00000000000d0dc9: syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000d0ede: syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000d107e: syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000dd123: syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2b9: syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000e2c38: syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2ceb: syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000e2e45: syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x0000000000102659: syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102689: syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b9: syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e9: syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102719: syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000102749: syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102779: syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a9: syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x000000000010d3d9: syscall; cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x000000000010da09: syscall; cmp rax, -0xfff; jae 0x10da14; ret; 
0x000000000010da39: syscall; cmp rax, -0xfff; jae 0x10da44; ret; 
0x000000000010db69: syscall; cmp rax, -0xfff; jae 0x10db74; ret; 
0x000000000010db99: syscall; cmp rax, -0xfff; jae 0x10dba4; ret; 
0x000000000010dc59: syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010dc89: syscall; cmp rax, -0xfff; jae 0x10dc94; ret; 
0x000000000010e579: syscall; cmp rax, -0xfff; jae 0x10e584; ret; 
0x000000000010e899: syscall; cmp rax, -0xfff; jae 0x10e8a4; ret; 
0x000000000010e8c9: syscall; cmp rax, -0xfff; jae 0x10e8d4; ret; 
0x000000000010e8f9: syscall; cmp rax, -0xfff; jae 0x10e904; ret; 
0x000000000010e929: syscall; cmp rax, -0xfff; jae 0x10e934; ret; 
0x000000000010e959: syscall; cmp rax, -0xfff; jae 0x10e964; ret; 
0x000000000010ea19: syscall; cmp rax, -0xfff; jae 0x10ea24; ret; 
0x000000000010ea49: syscall; cmp rax, -0xfff; jae 0x10ea54; ret; 
0x000000000010f369: syscall; cmp rax, -0xfff; jae 0x10f374; ret; 
0x000000000010f399: syscall; cmp rax, -0xfff; jae 0x10f3a4; ret; 
0x000000000010f3c9: syscall; cmp rax, -0xfff; jae 0x10f3d4; ret; 
0x000000000010f3fc: syscall; cmp rax, -0xfff; jae 0x10f407; ret; 
0x000000000010fbb9: syscall; cmp rax, -0xfff; jae 0x10fbc4; ret; 
0x000000000010fbec: syscall; cmp rax, -0xfff; jae 0x10fbf7; ret; 
0x000000000010fc19: syscall; cmp rax, -0xfff; jae 0x10fc24; ret; 
0x000000000010fc49: syscall; cmp rax, -0xfff; jae 0x10fc54; ret; 
0x000000000010fc79: syscall; cmp rax, -0xfff; jae 0x10fc84; ret; 
0x000000000010fcac: syscall; cmp rax, -0xfff; jae 0x10fcb7; ret; 
0x000000000010fcd9: syscall; cmp rax, -0xfff; jae 0x10fce4; ret; 
0x000000000010fd09: syscall; cmp rax, -0xfff; jae 0x10fd14; ret; 
0x000000000010fd39: syscall; cmp rax, -0xfff; jae 0x10fd44; ret; 
0x0000000000112fac: syscall; cmp rax, -0xfff; jae 0x112fb7; ret; 
0x0000000000113de9: syscall; cmp rax, -0xfff; jae 0x113df4; ret; 
0x00000000001141e9: syscall; cmp rax, -0xfff; jae 0x1141f4; ret; 
0x00000000001143a9: syscall; cmp rax, -0xfff; jae 0x1143b4; ret; 
0x0000000000114de9: syscall; cmp rax, -0xfff; jae 0x114df4; ret; 
0x0000000000114f39: syscall; cmp rax, -0xfff; jae 0x114f44; ret; 
0x0000000000115139: syscall; cmp rax, -0xfff; jae 0x115144; ret; 
0x0000000000115169: syscall; cmp rax, -0xfff; jae 0x115174; ret; 
0x0000000000115229: syscall; cmp rax, -0xfff; jae 0x115234; ret; 
0x00000000001152e9: syscall; cmp rax, -0xfff; jae 0x1152f4; ret; 
0x0000000000115629: syscall; cmp rax, -0xfff; jae 0x115634; ret; 
0x0000000000115659: syscall; cmp rax, -0xfff; jae 0x115664; ret; 
0x0000000000115689: syscall; cmp rax, -0xfff; jae 0x115694; ret; 
0x000000000011873b: syscall; cmp rax, -0xfff; jae 0x118746; ret; 
0x0000000000118979: syscall; cmp rax, -0xfff; jae 0x118984; ret; 
0x00000000001189a9: syscall; cmp rax, -0xfff; jae 0x1189b4; ret; 
0x0000000000118a79: syscall; cmp rax, -0xfff; jae 0x118a84; ret; 
0x0000000000118aa9: syscall; cmp rax, -0xfff; jae 0x118ab4; ret; 
0x0000000000118adc: syscall; cmp rax, -0xfff; jae 0x118ae7; ret; 
0x0000000000118b09: syscall; cmp rax, -0xfff; jae 0x118b14; ret; 
0x0000000000118b39: syscall; cmp rax, -0xfff; jae 0x118b44; ret; 
0x0000000000118b69: syscall; cmp rax, -0xfff; jae 0x118b74; ret; 
0x0000000000118b99: syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x000000000011cd9c: syscall; cmp rax, -0xfff; jae 0x11cda7; ret; 
0x000000000011cdc9: syscall; cmp rax, -0xfff; jae 0x11cdd4; ret; 
0x000000000011cdf9: syscall; cmp rax, -0xfff; jae 0x11ce04; ret; 
0x000000000011ce2c: syscall; cmp rax, -0xfff; jae 0x11ce37; ret; 
0x000000000011ce5c: syscall; cmp rax, -0xfff; jae 0x11ce67; ret; 
0x000000000011ce89: syscall; cmp rax, -0xfff; jae 0x11ce94; ret; 
0x000000000011cebc: syscall; cmp rax, -0xfff; jae 0x11cec7; ret; 
0x000000000011cee9: syscall; cmp rax, -0xfff; jae 0x11cef4; ret; 
0x000000000011cf19: syscall; cmp rax, -0xfff; jae 0x11cf24; ret; 
0x000000000011cf4c: syscall; cmp rax, -0xfff; jae 0x11cf57; ret; 
0x000000000011cf79: syscall; cmp rax, -0xfff; jae 0x11cf84; ret; 
0x000000000011cfac: syscall; cmp rax, -0xfff; jae 0x11cfb7; ret; 
0x000000000011efe9: syscall; cmp rax, -0xfff; jae 0x11eff4; ret; 
0x000000000011f019: syscall; cmp rax, -0xfff; jae 0x11f024; ret; 
0x000000000011f169: syscall; cmp rax, -0xfff; jae 0x11f174; ret; 
0x000000000011f1c9: syscall; cmp rax, -0xfff; jae 0x11f1d4; ret; 
0x000000000011f1f9: syscall; cmp rax, -0xfff; jae 0x11f204; ret; 
0x000000000011f329: syscall; cmp rax, -0xfff; jae 0x11f334; ret; 
0x000000000011f3bc: syscall; cmp rax, -0xfff; jae 0x11f3c7; ret; 
0x000000000011f3e9: syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f909: syscall; cmp rax, -0xfff; jae 0x11f914; ret; 
0x000000000011f939: syscall; cmp rax, -0xfff; jae 0x11f944; ret; 
0x000000000011f97c: syscall; cmp rax, -0xfff; jae 0x11f987; ret; 
0x000000000011f9a9: syscall; cmp rax, -0xfff; jae 0x11f9b4; ret; 
0x000000000011f9d9: syscall; cmp rax, -0xfff; jae 0x11f9e4; ret; 
0x000000000011fa09: syscall; cmp rax, -0xfff; jae 0x11fa14; ret; 
0x000000000011fa39: syscall; cmp rax, -0xfff; jae 0x11fa44; ret; 
0x000000000011fa69: syscall; cmp rax, -0xfff; jae 0x11fa74; ret; 
0x000000000011fa99: syscall; cmp rax, -0xfff; jae 0x11faa4; ret; 
0x000000000011fac9: syscall; cmp rax, -0xfff; jae 0x11fad4; ret; 
0x000000000011fafc: syscall; cmp rax, -0xfff; jae 0x11fb07; ret; 
0x000000000011fb29: syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fb5c: syscall; cmp rax, -0xfff; jae 0x11fb67; ret; 
0x000000000011fb89: syscall; cmp rax, -0xfff; jae 0x11fb94; ret; 
0x000000000011fbb9: syscall; cmp rax, -0xfff; jae 0x11fbc4; ret; 
0x000000000011fbe9: syscall; cmp rax, -0xfff; jae 0x11fbf4; ret; 
0x000000000011fc19: syscall; cmp rax, -0xfff; jae 0x11fc24; ret; 
0x000000000011fc49: syscall; cmp rax, -0xfff; jae 0x11fc54; ret; 
0x000000000011fc7c: syscall; cmp rax, -0xfff; jae 0x11fc87; ret; 
0x000000000011fcac: syscall; cmp rax, -0xfff; jae 0x11fcb7; ret; 
0x000000000011fcd9: syscall; cmp rax, -0xfff; jae 0x11fce4; ret; 
0x000000000011fd09: syscall; cmp rax, -0xfff; jae 0x11fd14; ret; 
0x000000000011fd3c: syscall; cmp rax, -0xfff; jae 0x11fd47; ret; 
0x000000000011fd6c: syscall; cmp rax, -0xfff; jae 0x11fd77; ret; 
0x000000000011fd9c: syscall; cmp rax, -0xfff; jae 0x11fda7; ret; 
0x000000000011fdc9: syscall; cmp rax, -0xfff; jae 0x11fdd4; ret; 
0x000000000011fdf9: syscall; cmp rax, -0xfff; jae 0x11fe04; ret; 
0x000000000011fe29: syscall; cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000011fe59: syscall; cmp rax, -0xfff; jae 0x11fe64; ret; 
0x000000000011fe8c: syscall; cmp rax, -0xfff; jae 0x11fe97; ret; 
0x000000000011feb9: syscall; cmp rax, -0xfff; jae 0x11fec4; ret; 
0x000000000011fee9: syscall; cmp rax, -0xfff; jae 0x11fef4; ret; 
0x000000000011ff1c: syscall; cmp rax, -0xfff; jae 0x11ff27; ret; 
0x000000000011ff49: syscall; cmp rax, -0xfff; jae 0x11ff54; ret; 
0x000000000011ff7c: syscall; cmp rax, -0xfff; jae 0x11ff87; ret; 
0x000000000011ffac: syscall; cmp rax, -0xfff; jae 0x11ffb7; ret; 
0x000000000011ffd9: syscall; cmp rax, -0xfff; jae 0x11ffe4; ret; 
0x0000000000120009: syscall; cmp rax, -0xfff; jae 0x120014; ret; 
0x0000000000120039: syscall; cmp rax, -0xfff; jae 0x120044; ret; 
0x0000000000120079: syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x0000000000120169: syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x0000000000120239: syscall; cmp rax, -0xfff; jae 0x120244; ret; 
0x0000000000120269: syscall; cmp rax, -0xfff; jae 0x120274; ret; 
0x000000000012029c: syscall; cmp rax, -0xfff; jae 0x1202a7; ret; 
0x00000000001202c9: syscall; cmp rax, -0xfff; jae 0x1202d4; ret; 
0x000000000012074c: syscall; cmp rax, -0xfff; jae 0x120757; ret; 
0x0000000000120779: syscall; cmp rax, -0xfff; jae 0x120784; ret; 
0x00000000001207a9: syscall; cmp rax, -0xfff; jae 0x1207b4; ret; 
0x00000000001207dc: syscall; cmp rax, -0xfff; jae 0x1207e7; ret; 
0x00000000000433d9: syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000439c9: syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x0000000000054eff: syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41b9: syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000d41e9: syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e2b49: syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000e2d99: syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000e3179: syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e4129: syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4379: syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e43a9: syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e4409: syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e4439: syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4469: syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4499: syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x000000000011f13b: syscall; mov rcx, qword ptr [rip + 0xccd2c]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d130: syscall; neg eax; ret; 
0x0000000000047656: syscall; pop rbp; ret; 
0x0000000000094a56: syscall; pop rbx; ret; 
0x00000000000630a9: syscall; ret; 
0x000000000011f123: syscall; test rax, rax; jl 0x11f13d; je 0x11f12d; ret; 
0x000000000011b1db: sysret; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000190d6d: test ah, 0x20; jne 0x190e50; test ah, 0x40; jne 0x190e60; lea rax, [rdi + 0xf]; ret; 
0x0000000000190d76: test ah, 0x40; jne 0x190e60; lea rax, [rdi + 0xf]; ret; 
0x0000000000190c8e: test ah, 0x40; jne 0x190e60; test dh, 0x40; jne 0x190bd0; lea rax, [rdi + 0xf]; ret; 
0x000000000004c7f7: test ah, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000cf53f: test ah, ah; jne 0xcf660; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000f9077: test ah, bh; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9007; ret 0x4801; 
0x00000000000a4f87: test ah, bh; xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000e3c4f: test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000196747: test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000010218f: test ah, bl; add dword ptr [rax], eax; add byte ptr [rcx], bh; ret 0x1874; 
0x00000000000d6838: test ah, cl; add al, byte ptr [rax]; add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000499cf: test ah, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000e3a57: test ah, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000792d1: test al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x000000000014d143: test al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000122027: test al, 0; add byte ptr [rax], al; mov esi, 1; call 0x121ec0; ret; 
0x000000000015355b: test al, 0; add byte ptr [rax], al; mov rax, r8; pop rbx; ret; 
0x00000000000de748: test al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000328f4: test al, 0; add byte ptr [rax], al; ret; 
0x0000000000115685: test al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115694; ret; 
0x0000000000122007: test al, 0; add byte ptr [rax], al; xor esi, esi; call 0x121ec0; ret; 
0x000000000008e6f4: test al, 0x15; add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000083f3f: test al, 0x16; add byte ptr [rcx], al; ret; 
0x0000000000190d1c: test al, 0x20; jne 0x190de0; test al, 0x40; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x0000000000190d24: test al, 0x40; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x0000000000190c0c: test al, 0x40; jne 0x190df0; test dl, 0x40; jne 0x190bd0; lea rax, [rdi + 7]; ret; 
0x000000000012dcef: test al, 0x48; mov eax, edi; ret; 
0x0000000000049fd1: test al, 0x89; ret 0x8341; 
0x0000000000128e39: test al, 0x89; ret 0xc031; 
0x00000000000928ee: test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cf4e5: test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000e7a57: test al, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x000000000009f0ea: test al, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x12e8c; cmovne rax, rdx; ret; 
0x000000000017de8a: test al, 1; jne 0x17dec0; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000005b4cc: test al, 3; add byte ptr [rax], al; mov rsp, rdx; ret; 
0x00000000000a8779: test al, al; je 0xa8781; cmp eax, esi; jne 0xa8770; mov rax, r8; ret; 
0x00000000000a87ad: test al, al; je 0xa87b5; cmp eax, edx; jne 0xa87a0; mov rax, r8; ret; 
0x000000000013efd5: test al, al; jne 0x13efbd; mov eax, r10d; ret; 
0x000000000009a05a: test al, al; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x00000000000aa64a: test al, al; jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x00000000000ca59a: test al, al; jne 0xca641; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e81e1: test al, al; jne 0xe8191; xor eax, eax; ret; 
0x000000000010c1c0: test al, bh; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000199415: test al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000082833: test bh, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000016112c: test bh, bh; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000715b1: test bh, bh; ret; 
0x000000000012acbc: test bh, bl; add eax, dword ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x0000000000196549: test bh, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000f1e14: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000a2f90: test bh, dl; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xc019; 
0x00000000000f0b00: test bl, bh; add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x0000000000054740: test bl, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xbf41; 
0x000000000003426a: test byte ptr [rax + 0x200], bh; ret; 
0x000000000018b61b: test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x00000000000bc872: test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000009faf2: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f832: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f242: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000010d252: test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000a0302: test byte ptr [rax + 0xcc], 0x10; lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x000000000013f753: test byte ptr [rax + 0xf000004], bh; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000048ca6: test byte ptr [rax + 0xf], 0x44; ret 0x13eb; 
0x000000000014929d: test byte ptr [rax + 1], -0x3a; cmp rsi, qword ptr [rdx + 0x28]; ja 0x149290; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000015f527: test byte ptr [rax + rax - 0x7cb70000], bl; ret 0x8b04; 
0x000000000013f5e2: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000023a6b: test byte ptr [rax + rax], bl; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000076ede: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x000000000010bc67: test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 1], ecx; ror dword ptr [rax + 1], 1; ret 0x8948; 
0x000000000010f618: test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000013fbcc: test byte ptr [rax + rcx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000135a17: test byte ptr [rax + rdx*8], ah; add dword ptr [rax], eax; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000107523: test byte ptr [rax + riz*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000014c2e8: test byte ptr [rax - 0x13], ah; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000009ef31: test byte ptr [rax - 0x39], 0x47; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000015de39: test byte ptr [rax - 0x73], 0x3d; ret 0x59c; 
0x0000000000030ad1: test byte ptr [rax - 0x76b80000], al; ret 0x2948; 
0x00000000000a1ff2: test byte ptr [rax - 0x77], -0x30; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b48b: test byte ptr [rax - 0x7b000000], dl; fisttp dword ptr [rdi]; test dword ptr [rax], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000cf8c0: test byte ptr [rax - 0x7d], -0x14; or al, ch; sub al, 0xf5; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x0000000000038db9: test byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000df2f8: test byte ptr [rax], ah; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000cfafa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000009a75a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000420fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004232a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac17a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac64a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000091f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014624a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 1; ret; 
0x000000000009384a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000009382a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x000000000002f59a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000025a9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x000000000012d83a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000014692a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x0000000000190e1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000190e2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000190e4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000190e5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000190daa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000190dba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000190dca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000190dda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000190dea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000190dfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000190e0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000cf64a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf66a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cf65a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x00000000000328ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec47a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b849a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000001787ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001787ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000017879a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000000a8b4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000f249a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xc; ret; 
0x00000000000440da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009e85a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000017880a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000017881a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000017882a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000017883a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000017884a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000017885a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x00000000001787fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001787da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7eea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7efa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x000000000013f08a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000cfb2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000cfb3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000cfb4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000cfb5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000cfb6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000cfb7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x00000000000328ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x0000000000188ada: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000000b92ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000018b62a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000000a898a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a67a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b7f2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000146907: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178766: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e46: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b36: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000ac6e7: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001255a8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x0000000000190d99: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190d89: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000000b7e69: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e79: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb19: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x0000000000178778: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e58: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf358: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000042dea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000189bfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000184bda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000004679a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000012e68a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf67a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000010d3d5: test byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10d3e4; ret; 
0x0000000000116753: test byte ptr [rax], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x3d7cb7fe], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000064be7: test byte ptr [rax], dh; adc al, 0; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000000f0b77: test byte ptr [rax], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [r13 + 0x63], cl; ror byte ptr [rcx + 1], 1; ret 0x8948; 
0x00000000001838bd: test byte ptr [rbp + 0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000178ab6: test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000002a3f1: test byte ptr [rbp + rax], al; add bh, dh; ret 0; 
0x0000000000042c56: test byte ptr [rbp - 0x6bf0bf40], 0xc6; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000183a11: test byte ptr [rbp - 0x7a958a2e], 0xf6; je 0x1839f8; xor eax, eax; ret; 
0x000000000007bad9: test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000013a01e: test byte ptr [rbp - 0x7d000000], cl; ret 0x8103; 
0x000000000012bdbe: test byte ptr [rbx + 0x1c], 0x20; je 0x12bdd0; pop rbx; ret; 
0x0000000000193327: test byte ptr [rbx + rcx + 0x3d0000], dl; and byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0x2041; 
0x00000000000f9f88: test byte ptr [rbx + rcx*4 + 0x54], 0x24; adc byte ptr [rdi], cl; xchg esp, eax; ret 0x8548; 
0x0000000000167ca7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000140d78: test byte ptr [rbx - 0x7d000000], ah; ret 0x4801; 
0x000000000012da32: test byte ptr [rbx], al; add byte ptr [rax - 0x73], cl; adc eax, 0x3d9b4; cmovne rax, rdx; ret; 
0x00000000001435d8: test byte ptr [rbx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000f90f0: test byte ptr [rbx], bh; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf9080; ret 0x4901; 
0x00000000000f8fa0: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; retf 0x8b48; jo 0xf8f30; ret 0x4801; 
0x00000000001921f2: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000137f42: test byte ptr [rbx], cl; add byte ptr [rcx], al; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x00000000001610f8: test byte ptr [rbx], dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000157515: test byte ptr [rcx + 0x14c2847], -0x3a; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x00000000000a0732: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8cec]; cmovne rax, rdx; ret; 
0x000000000009f212: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd5edc]; cmovne rax, rdx; ret; 
0x000000000009f0e2: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a0792: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda49c]; cmovne rax, rdx; ret; 
0x000000000009f7c2: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x000000000009f6f2: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000000bdf82: test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f132: test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1a09]; cmovne rax, rdx; ret; 
0x000000000012fb3d: test byte ptr [rcx + 0xff009f8], -0x38; ret; 
0x00000000001921e9: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000009fdb4: test byte ptr [rcx + rax - 0x7cb80000], dh; ret 0xe901; 
0x00000000000b19af: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000007d737: test byte ptr [rcx + rbp - 0x7cb80000], dh; ret; 
0x0000000000133e87: test byte ptr [rcx + rcx*4 + 0x35], -0x4f; ret; 
0x000000000013e881: test byte ptr [rcx + rcx*4 - 0x11], -0x18; cmp ebp, esi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000093dad: test byte ptr [rcx + rcx*4 - 0x11], -0x18; sbb ch, al; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000c3493: test byte ptr [rcx - 0x41], al; add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x000000000017e266: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000117cb3: test byte ptr [rcx], bl; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000e3576: test byte ptr [rcx], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x00000000000a1824: test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000001269ab: test byte ptr [rdi + 0xf000002], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000053be4: test byte ptr [rdi + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000065832: test byte ptr [rdi], -0x61; ret 0xd629; 
0x00000000000e31cb: test byte ptr [rdi], -0x6c; ret 0x854d; 
0x00000000000e65ee: test byte ptr [rdi], -0x6c; ret; 
0x000000000009c242: test byte ptr [rdi], -0x6c; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x000000000013d306: test byte ptr [rdi], -0x7b; ret; 
0x00000000000774e8: test byte ptr [rdi], -0x7c; movabs eax, dword ptr [0x870f2ff88300000d]; call 0xffffffff8907750b; ret 0xc083; 
0x00000000001093e0: test byte ptr [rdi], -0x7c; ret 1; 
0x0000000000049b3e: test byte ptr [rdi], -0x7c; ret; 
0x000000000008cd66: test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd76: test byte ptr [rdi], 8; sete al; ret; 
0x00000000000b77f8: test byte ptr [rdi], al; add byte ptr [rax], al; ret; 
0x00000000000f1d44: test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000341f8: test byte ptr [rdx + 0x200], al; ret; 
0x00000000000cf731: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000a09f0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0680: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0520: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012da09: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d949: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d889: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x000000000012da54: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629d1]; lea rdx, [rip + 0x6295a]; cmove rax, rdx; ret; 
0x000000000012d994: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ab1]; lea rdx, [rip + 0x62a3a]; cmove rax, rdx; ret; 
0x000000000012d8d4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b71]; lea rdx, [rip + 0x62afa]; cmove rax, rdx; ret; 
0x000000000012db14: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ec1]; lea rdx, [rip + 0x62e4a]; cmove rax, rdx; ret; 
0x00000000000a0989: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a0619: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04b9: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x00000000000a09d4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefa81]; lea rdx, [rip + 0xefa0a]; cmove rax, rdx; ret; 
0x00000000000a0664: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefdd1]; lea rdx, [rip + 0xefd5a]; cmove rax, rdx; ret; 
0x00000000000a0504: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeff51]; lea rdx, [rip + 0xefeda]; cmove rax, rdx; ret; 
0x00000000000a05c4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0421]; lea rdx, [rip + 0xf03aa]; cmove rax, rdx; ret; 
0x000000000012d8f0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71d5b]; lea rdx, [rip - 0x71e42]; cmove rax, rdx; ret; 
0x000000000012d9b0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71e1b]; lea rdx, [rip - 0x71f02]; cmove rax, rdx; ret; 
0x000000000012da70: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71efb]; lea rdx, [rip - 0x71fe2]; cmove rax, rdx; ret; 
0x00000000000ee48e: test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee43c: test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x00000000000a046f: test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd7f: test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x0000000000194d4f: test byte ptr [rdx + rax - 0x7ab80000], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000001041cd: test byte ptr [rdx - 0x7cfffffe], bh; stc; add cl, byte ptr [rax - 0x77]; ret 0x940f; 
0x0000000000128951: test byte ptr [rdx - 0x7d000000], ch; ret 0x8801; 
0x0000000000118c86: test byte ptr [rdx], 0; add byte ptr [rax - 0x73], cl; add eax, 0xd6bdf; add rsp, 8; ret; 
0x0000000000195881: test byte ptr [rdx], bh; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret 0xc148; 
0x00000000000439d8: test byte ptr [rdx], bl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000065669: test byte ptr [rdx], bl; sbb eax, 0x83480000; ret 0x3c01; 
0x00000000000ac7ae: test byte ptr [rip + 0xfffffff], bh; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000b1dfd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000000aa61a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000e6ec5: test byte ptr [rsi + 0xf000004], ah; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x00000000001619b5: test byte ptr [rsi + 0xf000004], dl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000097287: test byte ptr [rsi + rax - 0x72b70000], dl; dec dword ptr [r9 - 0x7b]; ret 0x850f; 
0x0000000000053bc8: test byte ptr [rsi + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x2074; 
0x000000000006ca5b: test byte ptr [rsi + rdx - 0x7abb0000], bl; ror byte ptr [rdi], cl; xchg ebp, eax; ret 0x8341; 
0x000000000010213d: test byte ptr [rsi - 0x75000000], ch; sub byte ptr [r13 - 0x7ccc8b40], al; ret 0x4c01; 
0x00000000000e6d4b: test byte ptr [rsi], bh; or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a183c: test byte ptr [rsi], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000016183b: test byte ptr [rsi], ch; or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000006f61e: test byte ptr [rsi], cl; add eax, 0x83480000; ret; 
0x00000000000a5dcc: test byte ptr [rsp], dh; add bh, dh; ret; 
0x0000000000123de8: test ch, ah; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000019652e: test ch, bh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000193dce: test ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000090386: test ch, dh; add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x00000000000a892a: test cl, bh; jne 0xa8908; ret; 
0x00000000000a88cc: test cl, cl; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x000000000012dcec: test cl, cl; jne 0x12dc98; mov rax, rdi; ret; 
0x00000000000bb4df: test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb58f: test cl, cl; jne 0xbb580; ret; 
0x00000000000bb84f: test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x0000000000190c97: test dh, 0x40; jne 0x190bd0; lea rax, [rdi + 0xf]; ret; 
0x0000000000192126: test dh, 0x40; jne 0x1920f0; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000bc1aa: test dh, 0xf0; je 0xbc0d2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000190cdd: test dh, 4; jne 0x190bd0; lea rax, [rdi + 0xb]; ret; 
0x00000000000b1915: test dh, al; add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000026204: test dh, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000194de5: test dh, bh; add eax, dword ptr [rax]; add byte ptr [rdi + rcx - 0x43], cl; ret 0x8349; 
0x00000000000a861d: test dh, dh; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000271f9: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000190c14: test dl, 0x40; jne 0x190bd0; lea rax, [rdi + 7]; ret; 
0x0000000000192072: test dl, 0x40; jne 0x1920f0; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000ee45a: test dl, 1; je 0xee417; and ebx, 8; je 0xee3f7; pop rbx; ret; 
0x0000000000190c42: test dl, 4; jne 0x190bd0; lea rax, [rdi + 3]; ret; 
0x0000000000101931: test dl, al; add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x63], cl; and byte ptr [rax - 0x7d], cl; ret; 
0x00000000001393a9: test dl, bl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000082932: test dl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a87ee: test dl, cl; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000cfac7: test dl, dl; je 0xcfae0; mov cl, dl; and cl, 0xf; je 0xcfaf0; ret; 
0x0000000000040fbb: test dl, dl; jne 0x40f98; ret; 
0x00000000000bb6ff: test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000a28d4: test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000e5b03: test dword ptr [rax + 0x40fffffd], edi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x0000000000155ef2: test dword ptr [rax + 0x48000000], ebx; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000043329: test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x0000000000196e04: test dword ptr [rax + 0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000188a1b: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x00000000000a1a58: test dword ptr [rax + 0xf], 0x7a8df7b6; add dword ptr [rax - 0x78], eax; jl 0xa1a98; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x000000000018a4a3: test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b1b3: test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7b2b: test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x000000000017c6e3: test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b907b: test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b8f7b: test dword ptr [rax + 8], edx; add byte ptr [rax], al; ret; 
0x0000000000155a67: test dword ptr [rax + rax + 0x1b80000], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x0000000000190d1f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x190df0; lea rax, [rdi + 7]; ret; 
0x00000000001846d7: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x00000000000ac818: test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x00000000000cf5af: test dword ptr [rax + rax - 0xf580000], ebp; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x0000000000098d07: test dword ptr [rax + rax], edi; add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000a53d8: test dword ptr [rax + rbp*8 - 0x76b70001], esi; ret; 
0x000000000017cb9b: test dword ptr [rax - 0x7fffffff], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000e2ce7: test dword ptr [rax], 0x50f0000; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000f1e15: test dword ptr [rax], 0x89480000; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000007a3ba: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000010d8fc: test dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d910; ret; 
0x000000000006251c: test dword ptr [rax], ebx; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000116505: test dword ptr [rax], ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000108383: test dword ptr [rax], ecx; idiv edi; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000007533f: test dword ptr [rax], ecx; idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017cb3b: test dword ptr [rax], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000074f4d: test dword ptr [rax], edx; idiv edi; inc dword ptr [rcx]; ret; 
0x00000000000f7bcb: test dword ptr [rax], edx; or eax, dword ptr [rax]; add byte ptr [rbp - 0x76db8b40], al; ret 0xe283; 
0x000000000013b493: test dword ptr [rax], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000001087f7: test dword ptr [rax], esp; idiv edi; dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x2e74; 
0x0000000000108606: test dword ptr [rax], esp; idiv edi; dec dword ptr [rax - 0x75]; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000466fe: test dword ptr [rbp + 0x1a], esi; add byte ptr [rcx], al; xor eax, eax; pop rbx; ret; 
0x000000000009d4dd: test dword ptr [rbp + 0x48000000], ebp; add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d600: test dword ptr [rbp + 0x48000000], ebp; add esp, 0x18; ret; 
0x000000000014e9e3: test dword ptr [rbp + 0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000012fcd4: test dword ptr [rbp + 0x48000001], ebx; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000018d3be: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x000000000014f445: test dword ptr [rbp + rax*2 - 0x13], ebp; inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x00000000000578c3: test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x00000000000ac128: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x000000000010ded1: test dword ptr [rbx + 0x48000000], esi; add esp, 0x78; ret; 
0x0000000000149198: test dword ptr [rbx + 0x48000000], esp; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000190cd8: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x190bd0; lea rax, [rdi + 0xb]; ret; 
0x00000000000cef30: test dword ptr [rbx + 1], ecx; add byte ptr [rax], al; ret; 
0x00000000000cf4e0: test dword ptr [rbx + 1], edi; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf4e8: test dword ptr [rbx + 1], esp; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x00000000001786b8: test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x0000000000178698: test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x00000000001785b0: test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x00000000000b9170: test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000018e407: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000017ca47: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018e856: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000017c9e7: test dword ptr [rbx + rax], esp; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000185028: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x0000000000167ae3: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000016d403: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000012d8b2: test dword ptr [rbx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x0000000000139d69: test dword ptr [rcx + 0x48000000], eax; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000010e4c7: test dword ptr [rcx + 0x48000000], ebx; add esp, 0x68; ret; 
0x00000000000521f7: test dword ptr [rcx + 0x48000000], ecx; add esp, 0x10; pop rbx; ret; 
0x0000000000081d34: test dword ptr [rcx + 0x48000000], edx; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000001783ba: test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000018e3dd: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7712: test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000018e2ed: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e219: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e1fd: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cef77: test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000192ac7: test dword ptr [rcx + rax], edx; add byte ptr [rax], al; ret; 
0x00000000000cef47: test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x0000000000123ddc: test dword ptr [rcx + rcx*4 - 0x1a], 0x2125894c; mov esi, 0x84e8000c; in eax, 0xef; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000066231: test dword ptr [rcx + rcx*4 - 9], 0xe8f4894d; ret; 
0x00000000000c7a9d: test dword ptr [rcx - 0x73], 0xc9e8045f; ret 0xfff6; 
0x000000000010bf0f: test dword ptr [rcx - 0x7d], 0x7e801c4; ret 0xfffd; 
0x000000000010be2d: test dword ptr [rcx - 0x7d], 0xe9e801c4; ret 0xfffd; 
0x0000000000184a6a: test dword ptr [rcx], edx; add dword ptr [rax], eax; add ch, al; std; xlatb; ret 0xc085; 
0x0000000000151f8e: test dword ptr [rdi + 0x48000000], ebx; add esp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000ca59d: test dword ptr [rdi + 0x48000000], ebx; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000013de80: test dword ptr [rdi + 0x48000000], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000001472cc: test dword ptr [rdi + 0x48000000], esp; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000160a47: test dword ptr [rdi + rax*8], edx; setne al; movzx eax, al; ret; 
0x00000000000b7877: test dword ptr [rdi + rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b7857: test dword ptr [rdi + rax], esp; add byte ptr [rax], al; ret; 
0x000000000013a96e: test dword ptr [rdi + rdi*8 - 1], esi; inc dword ptr [rbp - 0x77]; ret; 
0x000000000017ec8a: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000013e364: test dword ptr [rdi], eax; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000043c2a: test dword ptr [rdi], eax; setne al; movzx eax, al; ret; 
0x00000000000e42c1: test dword ptr [rdi], edx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000115092: test dword ptr [rdx + 0x48000000], edx; add esp, 0x60; pop rbp; ret; 
0x000000000010e608: test dword ptr [rdx + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000009e8cf: test dword ptr [rdx + 0x4e], ebx; clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000018a581: test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017cb09: test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017cad9: test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018afe9: test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7a11: test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000018e41b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e319: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000b8e59: test dword ptr [rdx + 9], esi; add byte ptr [rax], al; ret; 
0x000000000018f752: test dword ptr [rdx + rax], edi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e122: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000433e7: test dword ptr [rdx - 0x2708ffe6], ecx; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e9f05: test dword ptr [rdx - 0x7600000b], edi; ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret 0xe875; 
0x000000000017c9c1: test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017c999: test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017caa9: test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000178677: test dword ptr [rdx], eax; add byte ptr [rax], al; ret; 
0x000000000013b061: test dword ptr [rdx], eax; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xe183; 
0x000000000017ca19: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000615b5: test dword ptr [rip + 0xfffffff], edx; mov dh, 0x53; or al, 0xf6; ret 0xf40; 
0x0000000000184a5e: test dword ptr [rip - 0x3affffff], ebp; std; xlatb; ret; 
0x0000000000188553: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x00000000000499ed: test dword ptr [rsi + 0x31000000], ebp; div bh; ret 0; 
0x00000000000cf58d: test dword ptr [rsi + 0x48000000], edi; lea eax, [rdi - 0x10]; ret; 
0x000000000010dd56: test dword ptr [rsi + 0x48000000], esp; add esp, 0x68; pop rbp; pop r12; ret; 
0x0000000000190c3d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x190bd0; lea rax, [rdi + 3]; ret; 
0x0000000000192452: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018b2b5: test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7835: test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000b7815: test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b772d: test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x000000000015bd28: test dword ptr [rsi + rdi*8 - 0x72b60001], eax; adc byte ptr [r8 - 0x77], r9b; ret 0x2548; 
0x000000000011ffe7: test dword ptr [rsi - 0x2708fff4], edi; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a0527: test dword ptr [rsi - 0x72b7ffff], esi; adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x00000000000d4015: test dword ptr [rsi - 0x76000003], eax; retf 0x8348; out dx, eax; adc byte ptr [rcx], ch; ret 0x5589; 
0x000000000011acb9: test dword ptr [rsi], eax; add eax, 0x8b4d0000; adc byte ptr [r13 - 0x7b], r9b; ror byte ptr [rdi], 0x85; ret 4; 
0x000000000014e650: test dword ptr [rsi], edi; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000018e628: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000000198d6a: test eax, 0x1000577; pop rbp; ret; 
0x00000000000e1c32: test eax, 0x10010d8; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000095203: test eax, 0x1001570; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000d3781: test eax, 0x3948fffb; ret; 
0x000000000009f813: test eax, 0x48000120; cmove eax, edx; ret; 
0x00000000000a8634: test eax, 0x48001f0f; mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000016b5a6: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000042354: test eax, 0x7fffff; je 0x42360; ret; 
0x00000000001156c3: test eax, 0x85fff4d3; sar byte ptr [rcx + 5], 0x41; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000001858b2: test eax, 0xe3c4c9eb; jns 0x18591c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000186092: test eax, 0xe3c4c9eb; jns 0x1860fc; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000012e7c3: test eax, 0xf7000bd6; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001141c3: test eax, 0xf7000d7c; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000113dc3: test eax, 0xf7000d80; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001130c3: test eax, 0xf7000d8d; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001129c3: test eax, 0xf7000d94; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000cf561: test eax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf611: test eax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x000000000011cd83: test eax, eax; cmove eax, edx; ret; 
0x000000000012d015: test eax, eax; cmove rax, rdx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x00000000001141ba: test eax, eax; cmovns eax, edx; ret; 
0x000000000004739d: test eax, eax; cmovs eax, edx; ret; 
0x0000000000114c40: test eax, eax; je 0x114c45; ret; 
0x0000000000115adc: test eax, eax; je 0x115af8; mov qword ptr [rip + 0xd9b59], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000116db5: test eax, eax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x0000000000117644: test eax, eax; je 0x117653; add rax, 8; mov qword ptr [rip + 0xd813d], rax; mov rax, r8; ret; 
0x000000000012e8be: test eax, eax; je 0x12e8d0; add rsp, 8; ret; 
0x0000000000140cbe: test eax, eax; je 0x140cc8; ret; 
0x0000000000141b44: test eax, eax; je 0x141b50; add rsp, 8; ret; 
0x0000000000146f9a: test eax, eax; je 0x146fa0; ret; 
0x0000000000148215: test eax, eax; je 0x148220; xor eax, eax; ret; 
0x00000000001532c0: test eax, eax; je 0x153245; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000153241: test eax, eax; je 0x153250; pop rbx; ret; 
0x00000000001571c3: test eax, eax; je 0x1571f0; mov eax, r8d; ret; 
0x0000000000157213: test eax, eax; je 0x157240; mov eax, r8d; ret; 
0x000000000017ec73: test eax, eax; je 0x17ec78; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fc58: test eax, eax; je 0x17fc5d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000184c08: test eax, eax; je 0x184be0; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018867d: test eax, eax; je 0x188634; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000001886a2: test eax, eax; je 0x1886c0; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018cfe8: test eax, eax; je 0x18cf84; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018d01d: test eax, eax; je 0x18d030; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000026f5e: test eax, eax; je 0x26f68; ret; 
0x000000000008e591: test eax, eax; je 0x8e5a0; pop rbx; ret; 
0x0000000000092789: test eax, eax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000009e2f5: test eax, eax; je 0x9e350; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f414: test eax, eax; je 0x9f420; pop rbx; pop rbp; pop r12; ret; 
0x000000000009f898: test eax, eax; je 0x9f8aa; lea rax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000ac256: test eax, eax; je 0xac270; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac76e: test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000ac71a: test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x00000000000b16f3: test eax, eax; je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000dd795: test eax, eax; je 0xdd7c4; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f126: test eax, eax; jl 0x11f13d; je 0x11f12d; ret; 
0x000000000002fdb8: test eax, eax; jle 0x2fde0; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000010dfcc: test eax, eax; jne 0x10dfe0; syscall; cmp rax, -0x1000; ja 0x10e030; ret; 
0x0000000000115f30: test eax, eax; jne 0x115ef4; xor eax, eax; pop rbp; ret; 
0x0000000000117bf8: test eax, eax; jne 0x117c08; sub dword ptr [rip + 0xd7c4d], 1; ret; 
0x0000000000118657: test eax, eax; jne 0x1186c0; sub dword ptr [rip + 0xd71ee], 1; add rsp, 8; ret; 
0x0000000000124894: test eax, eax; jne 0x1248d0; sub dword ptr [rip + 0xcb439], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012496c: test eax, eax; jne 0x124988; sub dword ptr [rip + 0xcb361], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001258f1: test eax, eax; jne 0x125930; sub dword ptr [rip + 0xca410], 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000126344: test eax, eax; jne 0x126380; sub dword ptr [rip + 0xc9ae1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012641c: test eax, eax; jne 0x126438; sub dword ptr [rip + 0xc9a09], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012ced7: test eax, eax; jne 0x12cee8; cmp qword ptr [rdi], 0; je 0x12cef0; ret; 
0x000000000012edcc: test eax, eax; jne 0x12ed79; mov rax, rdi; ret; 
0x00000000001317ff: test eax, eax; jne 0x131820; sub dword ptr [rip + 0xbe7de], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013236a: test eax, eax; jne 0x1323b0; sub dword ptr [rip + 0xbdd3b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013244f: test eax, eax; jne 0x132470; sub dword ptr [rip + 0xbdc56], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013309a: test eax, eax; jne 0x1330e0; sub dword ptr [rip + 0xbd0bb], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013317c: test eax, eax; jne 0x133198; sub dword ptr [rip + 0xbcfd9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001345dc: test eax, eax; jne 0x1345f8; sub dword ptr [rip + 0xbbce1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000137c13: test eax, eax; jne 0x137c80; sub dword ptr [rip + 0xb881a], 1; add rsp, 8; ret; 
0x0000000000138654: test eax, eax; jne 0x138690; sub dword ptr [rip + 0xb7de1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013872c: test eax, eax; jne 0x138748; sub dword ptr [rip + 0xb7d09], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013c32b: test eax, eax; jne 0x13c348; mov eax, r8d; ret; 
0x000000000014110e: test eax, eax; jne 0x141118; ret; 
0x000000000014123c: test eax, eax; jne 0x141248; pop rbx; pop rbp; pop r12; ret; 
0x00000000001423f4: test eax, eax; jne 0x142440; sub dword ptr [rip + 0xae619], 1; pop rbp; ret; 
0x0000000000142f7c: test eax, eax; jne 0x142f88; ret; 
0x00000000001482b5: test eax, eax; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x000000000014c66a: test eax, eax; jne 0x14c6b0; sub dword ptr [rip + 0xa46b3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000014c74c: test eax, eax; jne 0x14c768; sub dword ptr [rip + 0xa45d1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014de0a: test eax, eax; jne 0x14de10; ret; 
0x000000000015450a: test eax, eax; jne 0x154510; ret; 
0x000000000015cb2d: test eax, eax; jne 0x15cb60; sub dword ptr [rip + 0x94b20], 1; add rsp, 8; ret; 
0x000000000015cc73: test eax, eax; jne 0x15ccb0; sub dword ptr [rip + 0x949da], 1; mov rax, r8; pop rbp; ret; 
0x000000000015cd0d: test eax, eax; jne 0x15cd40; sub dword ptr [rip + 0x94940], 1; add rsp, 8; ret; 
0x0000000000183f0b: test eax, eax; jne 0x183ef0; sub eax, ecx; vzeroupper; ret; 
0x00000000001843e0: test eax, eax; jne 0x1843c0; sub eax, ecx; vzeroupper; ret; 
0x0000000000184711: test eax, eax; jne 0x184730; xor eax, eax; vzeroupper; ret; 
0x00000000001846d4: test eax, eax; jne 0x184770; xor eax, eax; vzeroupper; ret; 
0x0000000000188a51: test eax, eax; jne 0x188a80; mov rax, r8; vzeroupper; ret; 
0x0000000000188a18: test eax, eax; jne 0x188ac0; mov rax, r8; vzeroupper; ret; 
0x000000000018c1c1: test eax, eax; jne 0x18c1e0; xor eax, eax; vzeroupper; ret; 
0x000000000018c184: test eax, eax; jne 0x18c220; xor eax, eax; vzeroupper; ret; 
0x000000000018c639: test eax, eax; jne 0x18c620; sub eax, ecx; vzeroupper; ret; 
0x000000000018cb0e: test eax, eax; jne 0x18caf0; sub eax, ecx; vzeroupper; ret; 
0x000000000018d3f1: test eax, eax; jne 0x18d420; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000190bc4: test eax, eax; jne 0x190bd4; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000001969db: test eax, eax; jne 0x196930; add rsp, 0x38; ret; 
0x0000000000198a53: test eax, eax; jne 0x198a80; sub dword ptr [rip + 0x55da2], 1; pop rbx; ret; 
0x0000000000198d64: test eax, eax; jne 0x198db0; sub dword ptr [rip + 0x577a9], 1; pop rbp; ret; 
0x0000000000033d9d: test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x00000000000466f8: test eax, eax; jne 0x46728; sub dword ptr [rip + 0x1a7585], 1; xor eax, eax; pop rbx; ret; 
0x00000000000475f5: test eax, eax; jne 0x47630; sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x0000000000055624: test eax, eax; jne 0x555ac; sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000057d4a: test eax, eax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000006104e: test eax, eax; jne 0x61088; sub dword ptr [rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x00000000000627aa: test eax, eax; jne 0x627b0; pop rbx; ret; 
0x000000000006300e: test eax, eax; jne 0x63028; mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000092724: test eax, eax; jne 0x92718; ret; 
0x000000000009354c: test eax, eax; jne 0x93540; ret; 
0x00000000000949f3: test eax, eax; jne 0x94a30; sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x0000000000098d04: test eax, eax; jne 0x98d88; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000099f4b: test eax, eax; jne 0x99f88; sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x000000000009e84f: test eax, eax; jne 0x9e840; xor eax, eax; ret; 
0x000000000009f85a: test eax, eax; jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000ac0b3: test eax, eax; jne 0xac190; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac155: test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac125: test eax, eax; jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac3a1: test eax, eax; jne 0xac3f0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac608: test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac637: test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ce293: test eax, eax; jne 0xce370; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce335: test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce305: test eax, eax; jne 0xce3b0; xor eax, eax; ret; 
0x00000000000d2908: test eax, eax; jne 0xd2940; sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x00000000000d4a8b: test eax, eax; jne 0xd4aa0; mov rax, r8; add rsp, 8; ret; 
0x00000000000dfc24: test eax, eax; jne 0xdfc60; sub dword ptr [rip + 0x10f741], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfcfc: test eax, eax; jne 0xdfd18; sub dword ptr [rip + 0x10f669], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1b54: test eax, eax; jne 0xe1b90; sub dword ptr [rip + 0x10d981], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1c2c: test eax, eax; jne 0xe1c48; sub dword ptr [rip + 0x10d8a9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e2ec7: test eax, eax; jne 0xe2ed0; add rsp, 8; ret; 
0x00000000001156c7: test eax, eax; jns 0x1156d0; mov byte ptr [r12], 0; mov rax, r12; pop r12; ret; 
0x000000000015ca16: test eax, eax; js 0x15ca28; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000008aeaf: test eax, eax; js 0x8aeb8; ret; 
0x00000000000a05a0: test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000012dad5: test eax, eax; lea rdx, [rip + 0x5e012]; lea rax, [rip + 0x5e06b]; cmove rax, rdx; ret; 
0x00000000000a0585: test eax, eax; lea rdx, [rip + 0xeb572]; lea rax, [rip + 0xeb5cb]; cmove rax, rdx; ret; 
0x000000000009526a: test eax, eax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000119769: test eax, eax; mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a2c37: test eax, eax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x0000000000062e24: test eax, eax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000522b0: test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x00000000001458aa: test eax, eax; sete al; add rsp, 8; ret; 
0x0000000000042c57: test eax, eax; sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000014de1d: test eax, eax; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d3: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000014aead: test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000062e66: test eax, eax; setne al; movzx eax, al; neg eax; pop rbp; ret; 
0x00000000001847ec: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000008ea5e: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000006d15f: test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x000000000017c973: test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000012158d: test eax, edx; idiv edi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000000422f9: test eax, edx; jne 0x42310; and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000017cb6b: test eax, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000014564d: test ebp, 0x840f1000; ret 0xfffe; 
0x000000000010cbb4: test ebp, eax; add al, byte ptr [rax]; add dh, dh; ret 0xf02; 
0x00000000001986d4: test ebp, ebp; jne 0x1986c0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094aaa: test ebp, ebp; jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x000000000018e2ae: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000010cbab: test ebp, edi; add al, byte ptr [rax]; add dh, dh; ret 0xf80; 
0x00000000000cfe4b: test ebx, ebp; push rcx; mov eax, 0x148051e; ret 0xb848; 
0x00000000000ac090: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000121ad7: test ebx, ebx; je 0x121af0; movsxd rbx, ebx; mov qword ptr [rip + 0xca87b], rbx; pop rbx; ret; 
0x00000000001252f2: test ebx, ebx; je 0x125308; pop rbx; pop rbp; pop r12; ret; 
0x0000000000106b31: test ebx, ebx; jne 0x106b18; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012792c: test ebx, ebx; jne 0x127938; pop rbx; pop rbp; pop r12; ret; 
0x0000000000153955: test ebx, ebx; jne 0x153960; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160b00: test ebx, ebx; jne 0x160b10; pop rbx; ret; 
0x0000000000160b30: test ebx, ebx; jne 0x160b40; pop rbx; ret; 
0x0000000000197383: test ebx, ebx; jne 0x19736d; pop rbx; ret; 
0x00000000001985fc: test ebx, ebx; jne 0x1985e0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198727: test ebx, ebx; jne 0x198700; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198949: test ebx, ebx; jne 0x198935; pop rbx; ret; 
0x00000000001989eb: test ebx, ebx; jne 0x1989d0; pop rbx; ret; 
0x00000000000dad83: test ebx, ecx; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000017c950: test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000012d0d5: test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000ac578: test ebx, esi; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000295e0: test ebx, esi; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000000a0460: test ecx, 0x400000; je 0xa0435; lea rax, [rip + 0xe4851]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd70: test ecx, 0x400000; je 0xbcd45; lea rax, [rip + 0xceef1]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000011fce7: test ecx, eax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fce7: test ecx, eax; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000190c02: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000013f078: test ecx, ecx; je 0x13f028; cmp r11d, r9d; jg 0x13f036; mov byte ptr [r10], 0; ret; 
0x00000000001230ff: test ecx, ecx; jne 0x123108; ret; 
0x0000000000123168: test ecx, ecx; jne 0x123170; ret; 
0x0000000000123a4f: test ecx, ecx; jne 0x123a58; ret; 
0x0000000000123aac: test ecx, ecx; jne 0x123ab8; ret; 
0x000000000005586c: test ecx, ecx; jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x000000000008a71a: test ecx, ecx; jne 0x8a730; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000000bcb3f: test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x00000000001353e7: test ecx, edx; out dx, al; inc dword ptr [rbp + 0x31]; rol byte ptr [rbp - 0x6bf0be40], cl; ret 0xf741; 
0x0000000000115a8a: test edi, edi; je 0x115ac8; call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x000000000011870a: test edi, edi; je 0x118714; mov dword ptr [rip + 0xd3c34], edi; ret; 
0x000000000015796c: test edi, edi; je 0x15797d; call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000002fdcd: test edi, edi; je 0x2fdaf; call 0x15fd10; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000440c9: test edi, edi; je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x0000000000047462: test edi, edi; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000047546: test edi, edi; je 0x47560; lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x000000000011739c: test edi, edi; jne 0x1173b0; mov eax, 1; ret; 
0x000000000012b914: test edi, edi; jne 0x12b8fe; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000137b51: test edi, edi; jne 0x137b40; pop rbx; ret; 
0x0000000000141152: test edi, edi; jne 0x141140; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015deea: test edi, edi; jns 0x15def0; ret; 
0x00000000000e5219: test edi, edi; js 0xe5220; ret; 
0x000000000006c6b5: test edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000041f87: test edx, eax; je 0x41f90; ret; 
0x00000000000c79de: test edx, ebp; and eax, dword ptr [rax]; add dh, dh; ret; 
0x000000000010d3e7: test edx, ebp; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000079d71: test edx, edi; dec dword ptr [rcx - 0x77]; ret; 
0x000000000017ca79: test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000011d001: test edx, edx; je 0x11d010; cmp rdi, rdx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x000000000014afc0: test edx, edx; je 0x14afd0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b080: test edx, edx; je 0x14b090; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b180: test edx, edx; je 0x14b190; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001838be: test edx, edx; je 0x183898; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000008d2f3: test edx, edx; je 0x8d300; ret; 
0x000000000008d753: test edx, edx; je 0x8d760; ret; 
0x00000000000b1bf6: test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000b1c9b: test edx, edx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3e: test edx, edx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e6a: test edx, edx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1dfa: test edx, edx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf79a: test edx, edx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72e: test edx, edx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000102a79: test edx, edx; jne 0x102a14; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x0000000000123351: test edx, edx; jne 0x123360; ret; 
0x0000000000123c81: test edx, edx; jne 0x123c90; ret; 
0x000000000012ec73: test edx, edx; jne 0x12ec60; sub rsp, 8; call 0x12e340; ret; 
0x0000000000157d34: test edx, edx; jne 0x157d48; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157d84: test edx, edx; jne 0x157d98; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000183a12: test edx, edx; jne 0x183a80; test esi, esi; je 0x1839f8; xor eax, eax; ret; 
0x0000000000197073: test edx, edx; jne 0x1970f2; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000063086: test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f38: test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000086e1f: test edx, edx; jne 0x86e10; ret; 
0x00000000000908a7: test edx, edx; jne 0x908b0; ret; 
0x0000000000090fec: test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000916e7: test edx, edx; jne 0x916d8; ret; 
0x00000000000938f8: test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000094fb5: test edx, edx; jne 0x94f98; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000009e929: test edx, edx; jne 0x9e920; ret; 
0x00000000000bbf55: test edx, edx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000bcc36: test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x00000000000bccd0: test edx, edx; jne 0xbccb0; ret; 
0x00000000000bdfbb: test edx, edx; jne 0xbdfb0; ret; 
0x00000000001136b8: test edx, edx; js 0x1136c4; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x000000000013c92e: test edx, edx; js 0x13c940; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000043ddb: test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x00000000000bd212: test edx, edx; sete al; ret; 
0x00000000000f9f83: test edx, esi; dec dword ptr [rbp - 0x7b]; test byte ptr [rbx + rcx*4 + 0x54], 0x24; adc byte ptr [rdi], cl; xchg esp, eax; ret 0x8548; 
0x000000000010c76a: test esi, 0x575ff00; mov word ptr [rdi], si; xor eax, eax; ret; 
0x0000000000139e1a: test esi, ebp; dec dword ptr [rax - 0x7d]; ret; 
0x000000000006d53c: test esi, edx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000190bf5: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000038db8: test esi, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000183a16: test esi, esi; je 0x1839f8; xor eax, eax; ret; 
0x000000000002fd84: test esi, esi; je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x0000000000094d81: test esi, esi; je 0x94d90; or eax, 2; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000011374d: test esi, esi; jne 0x11372c; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x000000000011a6b4: test esi, esi; jne 0x11a6c0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000011a762: test esi, esi; jne 0x11a770; pop rbp; pop r12; pop r13; ret; 
0x0000000000042c38: test esi, esi; jne 0x42c48; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000057b37: test esi, esi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057be1: test esi, esi; jne 0x57bd2; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057bc8: test esi, esi; jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000094d29: test esi, esi; jne 0x94d40; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x00000000000a2856: test esi, esi; jne 0xa27f0; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000b1d65: test esi, esi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf695: test esi, esi; jne 0xcf69d; xor rax, rax; ret; 
0x000000000011f9e7: test esp, eax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000190c0f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000011c02c: test esp, esp; jne 0x11c069; pop rbx; pop rbp; pop r12; ret; 
0x000000000009e8cc: test esp, esp; jne 0x2372e; pop rbx; pop rbp; pop r12; ret; 
0x0000000000167ae2: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000160a46: test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000043c29: test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000a87ed: test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x0000000000197072: test r10d, r10d; jne 0x1970f2; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000009e8cb: test r12, r12; jne 0x2372e; pop rbx; pop rbp; pop r12; ret; 
0x000000000011c02b: test r12d, r12d; jne 0x11c069; pop rbx; pop rbp; pop r12; ret; 
0x000000000014564c: test r13d, 0x840f1000; ret 0xfffe; 
0x0000000000117643: test r8, r8; je 0x117653; add rax, 8; mov qword ptr [rip + 0xd813d], rax; mov rax, r8; ret; 
0x000000000009a059: test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x00000000000ca599: test r8b, r8b; jne 0xca641; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017ec72: test r8d, r8d; je 0x17ec78; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fc57: test r8d, r8d; je 0x17fc5d; xchg edx, eax; sub eax, edx; ret; 
0x00000000001482b4: test r8d, r8d; jne 0x1482c0; mov dword ptr [rsi], 0; ret; 
0x00000000001969da: test r8d, r8d; jne 0x196930; add rsp, 0x38; ret; 
0x00000000000627a9: test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x00000000000a8929: test r9b, dil; jne 0xa8908; ret; 
0x00000000000cf560: test rax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf610: test rax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x000000000012d014: test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2e56], rax; pop rbp; ret; 
0x0000000000114c3f: test rax, rax; je 0x114c45; ret; 
0x0000000000115adb: test rax, rax; je 0x115af8; mov qword ptr [rip + 0xd9b59], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000116db4: test rax, rax; je 0x116dbc; mov qword ptr [rax], rdx; ret; 
0x000000000012e8bd: test rax, rax; je 0x12e8d0; add rsp, 8; ret; 
0x0000000000141b43: test rax, rax; je 0x141b50; add rsp, 8; ret; 
0x00000000001532bf: test rax, rax; je 0x153245; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000153240: test rax, rax; je 0x153250; pop rbx; ret; 
0x000000000008e590: test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x0000000000092788: test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000009f413: test rax, rax; je 0x9f420; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f125: test rax, rax; jl 0x11f13d; je 0x11f12d; ret; 
0x0000000000115f2f: test rax, rax; jne 0x115ef4; xor eax, eax; pop rbp; ret; 
0x0000000000142f7b: test rax, rax; jne 0x142f88; ret; 
0x0000000000055623: test rax, rax; jne 0x555ac; sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000057d49: test rax, rax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000092723: test rax, rax; jne 0x92718; ret; 
0x000000000009354b: test rax, rax; jne 0x93540; ret; 
0x000000000009e84e: test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x0000000000095269: test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000119768: test rax, rax; mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a2c36: test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x0000000000062e23: test rax, rax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000001458a9: test rax, rax; sete al; add rsp, 8; ret; 
0x00000000001986d3: test rbp, rbp; jne 0x1986c0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094aa9: test rbp, rbp; jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x00000000001252f1: test rbx, rbx; je 0x125308; pop rbx; pop rbp; pop r12; ret; 
0x0000000000106b30: test rbx, rbx; jne 0x106b18; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012792b: test rbx, rbx; jne 0x127938; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160aff: test rbx, rbx; jne 0x160b10; pop rbx; ret; 
0x0000000000160b2f: test rbx, rbx; jne 0x160b40; pop rbx; ret; 
0x0000000000197382: test rbx, rbx; jne 0x19736d; pop rbx; ret; 
0x00000000001985fb: test rbx, rbx; jne 0x1985e0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198726: test rbx, rbx; jne 0x198700; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198948: test rbx, rbx; jne 0x198935; pop rbx; ret; 
0x00000000001989ea: test rbx, rbx; jne 0x1989d0; pop rbx; ret; 
0x000000000005586b: test rcx, rcx; jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x0000000000115a89: test rdi, rdi; je 0x115ac8; call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x000000000015796b: test rdi, rdi; je 0x15797d; call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000002fdcc: test rdi, rdi; je 0x2fdaf; call 0x15fd10; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000047461: test rdi, rdi; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000047545: test rdi, rdi; je 0x47560; lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x000000000011739b: test rdi, rdi; jne 0x1173b0; mov eax, 1; ret; 
0x000000000012b913: test rdi, rdi; jne 0x12b8fe; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000137b50: test rdi, rdi; jne 0x137b40; pop rbx; ret; 
0x0000000000141151: test rdi, rdi; jne 0x141140; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041f86: test rdx, rax; je 0x41f90; ret; 
0x000000000011d000: test rdx, rdx; je 0x11d010; cmp rdi, rdx; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000b1c9a: test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3d: test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e69: test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df9: test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf799: test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72d: test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000012ec72: test rdx, rdx; jne 0x12ec60; sub rsp, 8; call 0x12e340; ret; 
0x0000000000086e1e: test rdx, rdx; jne 0x86e10; ret; 
0x00000000000908a6: test rdx, rdx; jne 0x908b0; ret; 
0x00000000000916e6: test rdx, rdx; jne 0x916d8; ret; 
0x0000000000094fb4: test rdx, rdx; jne 0x94f98; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000009e928: test rdx, rdx; jne 0x9e920; ret; 
0x00000000000bbf54: test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x000000000013c92d: test rdx, rdx; js 0x13c940; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000011a6b3: test rsi, rsi; jne 0x11a6c0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000011a761: test rsi, rsi; jne 0x11a770; pop rbp; pop r12; pop r13; ret; 
0x0000000000057b36: test rsi, rsi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057be0: test rsi, rsi; jne 0x57bd2; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057bc7: test rsi, rsi; jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000a2855: test rsi, rsi; jne 0xa27f0; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000b1d64: test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf694: test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x000000000010c769: test si, 0xff00; jne 0x10c775; mov word ptr [rdi], si; xor eax, eax; ret; 
0x00000000000a861c: test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000271f8: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000cf637: test spl, spl; jne 0xcf660; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000001887f0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847b0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000188810: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847c0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018885c: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847ee: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000188383: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000188725: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184855: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000018d150: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001887e0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001847a0: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000184720: tzcnt eax, eax; cmp rdx, rax; jbe 0x184790; add rax, rdi; vzeroupper; ret; 
0x000000000018c1d0: tzcnt eax, eax; cmp rdx, rax; jbe 0x18c240; add rax, rdi; vzeroupper; ret; 
0x0000000000185060: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000185080: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000185046: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000184dd0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183d83: tzcnt ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183de8: tzcnt ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dac: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183dcc: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c20: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c40: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c60: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183c06: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e52: tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000421e6: ucomisd xmm0, xmm4; jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000042215: ucomisd xmm5, xmm1; jae 0x42230; mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000421e7: ucomiss xmm0, xmm4; jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000042513: ucomiss xmm0, xmm4; jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000042216: ucomiss xmm5, xmm1; jae 0x42230; mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004253c: ucomiss xmm5, xmm1; jae 0x42558; mov rax, qword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000bbb65: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000018d57b: ud2; nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000018bc09: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x18bbfb; vzeroupper; ret; 
0x000000000018fb11: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018b752: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018fb15: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018b756: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018a610: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x00000000001891c0: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000184ef1: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x000000000018be31: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqd xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x000000000018b344: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a64: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a614: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018ac74: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891c4: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018fb1e: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018a6c4: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b34f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a6f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a61f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018bc3f: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000018b760: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018ac7e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891ce: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018fb1a: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018a6c0: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b75c: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000001901f9: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000018bc45: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000018b34b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a6b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a61b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018ac7a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891ca: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x00000000001901fd: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000018fafd: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018b68b: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018fb01: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018b68f: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018a630: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x00000000001891e0: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018fadd: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018b364: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a84: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a634: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018ac94: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891e4: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018b8ec: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018b993: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018fb0a: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018faf1: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018faeb: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018b8dd: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018b8e2: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018b8e7: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bba4: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018fae6: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018b82c: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b390: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000189ab0: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018a660: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x000000000018b984: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018a7f7: vmovdqu ymmword ptr [rdi + 0x40], ymm6; sub r8, 0x20; jb 0x18a415; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b989: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018b536: vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x0000000000189b06: vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018b98e: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018a806: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b36f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a8f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a63f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018ac9e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891ee: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018bba9: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018bb20: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018b699: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018b831: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b7f7: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018bbaf: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018b837: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b7fd: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018b803: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018b809: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018fb06: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018bba0: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018fae2: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018b828: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b695: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018bb26: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018b38c: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000189aac: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018a65c: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x000000000018b36b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189a8b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a63b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018ac9a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001891ea: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x00000000001901ef: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000001901f3: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000019040e: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000190414: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000001906e6: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000001907ac: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000001906df: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190a43: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000001905fe: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x00000000001907a5: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000001905cf: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000190a4a: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000001909ad: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190422: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000190605: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000190a52: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000019060d: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000190a3d: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000001905f8: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000019041c: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000001909b5: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190208: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000019020c: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000000e44a7: vmovupd xmm8, xmmword ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018fe19: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe20: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fe27: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fa71: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcc0: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fac2: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fa86: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcb9: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fabb: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fa7f: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcb2: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fa78: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fab4: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001901c1: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018ff74: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff7b: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff82: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000018ff89: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901dc: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019039e: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903a5: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001903ac: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000190301: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190308: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019030f: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000001901ae: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a7: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901a0: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000146cf4: vorps xmm7, xmm2, xmmword ptr [rax - 0x76b70013]; ret; 
0x0000000000119dfc: vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x0000000000184d80: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x185020; xor eax, eax; vzeroupper; ret; 
0x000000000018bd34: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x18bf60; xor eax, eax; vzeroupper; ret; 
0x000000000012da05: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dc9c]; lea rdx, [rip + 0x5dc25]; cmove rax, rdx; ret; 
0x000000000012d945: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dd7c]; lea rdx, [rip + 0x5dd05]; cmove rax, rdx; ret; 
0x000000000012d885: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5de3c]; lea rdx, [rip + 0x5ddc5]; cmove rax, rdx; ret; 
0x00000000000a0985: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xead4c]; lea rdx, [rip + 0xeacd5]; cmove rax, rdx; ret; 
0x00000000000a0615: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb09c]; lea rdx, [rip + 0xeb025]; cmove rax, rdx; ret; 
0x00000000000a04b5: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb21c]; lea rdx, [rip + 0xeb1a5]; cmove rax, rdx; ret; 
0x0000000000184eb7: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x0000000000184ef5: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x000000000018bdf5: vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x000000000018be35: vpcmpeqd xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x0000000000184ebb: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x184dd0; ret; 
0x000000000018bdf9: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bd80; ret; 
0x0000000000184a7b: vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018470d: vpmovmskb eax, ymm1; test eax, eax; jne 0x184730; xor eax, eax; vzeroupper; ret; 
0x0000000000188a4d: vpmovmskb eax, ymm1; test eax, eax; jne 0x188a80; mov rax, r8; vzeroupper; ret; 
0x000000000018c1bd: vpmovmskb eax, ymm1; test eax, eax; jne 0x18c1e0; xor eax, eax; vzeroupper; ret; 
0x0000000000184dc3: vpmovmskb eax, ymm2; sub eax, -1; jne 0x184dd0; vzeroupper; ret; 
0x000000000018bd73: vpmovmskb eax, ymm2; sub eax, -1; jne 0x18bd80; vzeroupper; ret; 
0x00000000000388f5: vpsubsb xmm12, xmm15, xmmword ptr [rbx + rbx*4 - 2]; dec dword ptr [rbp - 0x73]; je 0x38906; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000184d84: vptest ymm5, ymm0; jae 0x185020; xor eax, eax; vzeroupper; ret; 
0x000000000018bd38: vptest ymm5, ymm0; jae 0x18bf60; xor eax, eax; vzeroupper; ret; 
0x0000000000183c14: vzeroupper; ret; 
0x0000000000184790: vzeroupper; xor eax, eax; ret; 
0x00000000000abf41: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000197266: wait; and edi, 0x20; je 0x19727c; movss xmm0, dword ptr [rip + 0x2610c]; divss xmm0, dword ptr [rip + 0x27418]; ret; 
0x0000000000116ed0: wait; mov byte ptr [rip - 0x76b3dd00], cl; rol dh, 0x46; inc dword ptr [rax]; ret; 
0x0000000000146fac: wait; or al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000146f97: wait; or al, byte ptr [rax]; test eax, eax; je 0x146fa0; ret; 
0x0000000000115ae4: wait; or eax, 0x1b800; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000c4eed: wait; or eax, 0xb8480000; ret 0xffff; 
0x0000000000128879: wait; out dx, eax; inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x00000000000bb11d: wrmsr; in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb19f: wrmsr; in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb2a1: wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000011f890: wrpkru; xor eax, eax; ret; 
0x000000000017ea7f: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f2a3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000180bef: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e66f: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x000000000017f393: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f1b3: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000a421a: xchg al, ah; adc dword ptr [rax], eax; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000017e17b: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a77b: xchg al, bh; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000087292: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000017e98b: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000080884: xchg bh, al; add al, byte ptr [rax]; add byte ptr [rcx - 0x76b3d395], cl; ret 0x8348; 
0x000000000018609c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x00000000001858bc: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x0000000000185cac: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001854cc: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187fdd: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000c9750: xchg bh, cl; add eax, 0x89490000; ret; 
0x000000000018c878: xchg bl, al; add al, byte ptr [rax]; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000186ae1: xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x0000000000187ce1: xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001873e1: xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001876e1: xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000186dd9: xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017fbfb: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000018174f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000076faa: xchg byte ptr [rax + rax], ch; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2b48; 
0x0000000000180f2f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000017e3ff: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000018070f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000017e73f: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x000000000017f753: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017ea5b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000a079a: xchg byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xda49c; cmovne rax, rdx; ret; 
0x00000000000bc9a5: xchg byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xdee8; 
0x000000000011fe25: xchg byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe34; ret; 
0x000000000018566b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017eb2b: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018126f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017eee3: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000180a4f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000018022f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x00000000000abf40: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000018140f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000017e8df: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f933: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017f0c3: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000017e0cf: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x0000000000123277: xchg byte ptr [rbx - 0x172ceffc], cl; and eax, 1; ret; 
0x000000000017fb13: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e4cf: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x0000000000185b5c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018537c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018648c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000184c59: xchg byte ptr [rdi], cl; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x000000000015cbcd: xchg byte ptr [rdx + 9], cl; add byte ptr [rcx], al; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000017e9af: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000017fa23: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017e19f: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000018056f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e241: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f365: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f455: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f275: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017e59f: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000187086: xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001806a5: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001813a5: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187f86: xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187686: xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187386: xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000180ec5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000185a5d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000186d7e: xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018638d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000002a3dd: xchg byte ptr [rsi], dl; add al, 0; add byte ptr [rbp + 0xe880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x000000000017e80f: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000017efd3: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000002a965: xchg ch, ch; add al, byte ptr [rax]; add byte ptr [rbp - 0x1a77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x0000000000182eff: xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000182d1f: xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001836f7: xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000182617: xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000183517: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001816e5: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001809e5: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000180505: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000181205: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000185bad: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001853cd: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000017e265: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000c9474: xchg dl, bh; add eax, 0x89490000; ret; 
0x0000000000079cfb: xchg dl, bh; dec dword ptr [rcx - 0x77]; ret; 
0x000000000017f185: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017efa5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017f095: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000017eeb5: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000002a5a7: xchg dword ptr [rax + 0x39480000], esp; ret; 
0x0000000000087496: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000007db6b: xchg dword ptr [rax - 0x76ffffed], eax; ret 0xc083; 
0x0000000000077a6b: xchg dword ptr [rax - 0x76fffff1], esi; ret 0xc083; 
0x000000000007f776: xchg dword ptr [rax - 0x76fffff8], edx; ret 0xc083; 
0x0000000000071749: xchg dword ptr [rax - 0x76fffffe], ebp; ret 0xc083; 
0x000000000008d0e5: xchg dword ptr [rax - 0x76ffffff], ebp; ret 0xc083; 
0x00000000000bbf27: xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000011f3e5: xchg dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x00000000001909a9: xchg dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000189b0c: xchg dword ptr [rax], eax; vzeroupper; ret; 
0x00000000000bcb3e: xchg dword ptr [rbp + 0x4cd575c9], eax; mov eax, eax; ret; 
0x0000000000069cf7: xchg dword ptr [rbx - 0x76fffff0], esp; ret 0xc083; 
0x0000000000070d17: xchg dword ptr [rbx - 0x76fffffb], ebx; ret 0xc083; 
0x0000000000078cb4: xchg dword ptr [rbx - 0x76fffffb], edi; ret 0xc083; 
0x00000000000725a8: xchg dword ptr [rbx - 0x76fffffd], ebp; ret 0xc083; 
0x0000000000080fc8: xchg dword ptr [rbx], esi; add al, 0; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x00000000001897fa: xchg dword ptr [rcx + 1], edx; add byte ptr [rax], al; je 0x189940; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000113847: xchg dword ptr [rcx + rax], eax; add byte ptr [rcx - 0x77], al; ret 0x8341; 
0x000000000010d065: xchg dword ptr [rcx + rax], ecx; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000045fea: xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x000000000007e962: xchg dword ptr [rcx - 0x76fffff6], edx; ret 0xc083; 
0x00000000000782a2: xchg dword ptr [rcx - 0x76fffff7], esp; ret 0xc083; 
0x0000000000079663: xchg dword ptr [rcx - 0x76fffffe], edi; ret 0xc083; 
0x00000000000709c8: xchg dword ptr [rdi - 0x76fffff7], edi; ret 0xc083; 
0x000000000007f7b2: xchg dword ptr [rdi - 0x76fffff8], eax; ret 0xc083; 
0x00000000000ecae9: xchg dword ptr [rdx - 0x75000000], eax; je 0xecb15; sbb al, 0x89; ret 0x8348; 
0x000000000011368c: xchg dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000117c0a: xchg dword ptr [rip + 0xd7c40], eax; cmp eax, 1; jg 0x117c16; ret; 
0x0000000000077a41: xchg dword ptr [rip - 0x76ffffea], ebx; ret 0xc083; 
0x000000000007880a: xchg dword ptr [rip - 0x76fffff5], ebx; ret 0xc083; 
0x000000000018b615: xchg dword ptr [rsi + 0xffffffc], esi; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000007716d: xchg dword ptr [rsi - 0x76ffffe3], ecx; ret 0xc083; 
0x0000000000087a53: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000001138bb: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rcx + 9], al; ret 0x8941; 
0x0000000000182258: xchg ebp, eax; adc eax, 0x83480000; ret 0xe910; 
0x000000000008f97a: xchg ebp, eax; adc eax, 0xc08d8b00; add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x00000000000dedea: xchg ebp, eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000184b47: xchg ebp, eax; add byte ptr [rax], al; add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x000000000004af79: xchg ebp, eax; add eax, dword ptr [rax]; add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000000e7a50: xchg ebp, eax; call 0xffffffffe90e7a50; mov dh, 0xa8; dec dword ptr [rax - 0x77]; ret; 
0x0000000000075f8a: xchg ebp, eax; clc; idiv bh; dec dword ptr [rax + 0x39]; ret 0x850f; 
0x00000000001202d7: xchg ebp, eax; mov ebx, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ff759: xchg ebp, eax; nop word ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000162dd7: xchg ebp, eax; nop; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001228b8: xchg ebp, eax; or al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000007af37: xchg ebp, eax; ret 0; 
0x0000000000196ba0: xchg ebp, eax; ret 0x145; 
0x000000000013da0d: xchg ebp, eax; ret 0x2144; 
0x000000000011750c: xchg ebp, eax; ret 0x2f3c; 
0x000000000019302a: xchg ebp, eax; ret 0x3145; 
0x00000000000a281f: xchg ebp, eax; ret 0x3840; 
0x000000000010ebd4: xchg ebp, eax; ret 0x3948; 
0x000000000008147b: xchg ebp, eax; ret 0x5389; 
0x000000000006ca64: xchg ebp, eax; ret 0x8341; 
0x0000000000098720: xchg ebp, eax; ret 0x8348; 
0x000000000004167c: xchg ebp, eax; ret 0x8440; 
0x0000000000049f35: xchg ebp, eax; ret 0x8941; 
0x000000000004395d: xchg ebp, eax; ret 0x8948; 
0x000000000002896b: xchg ebp, eax; ret 0x8d47; 
0x00000000000587a7: xchg ebp, eax; ret 0x941; 
0x00000000000583fb: xchg ebp, eax; ret 0xb60f; 
0x0000000000193613: xchg ebp, eax; ret 0xc031; 
0x00000000001175cc: xchg ebp, eax; ret 0xc084; 
0x000000000004b1b3: xchg ebp, eax; ret 0xc220; 
0x00000000000a87e5: xchg ebp, eax; ret 0xc839; 
0x00000000000d08c8: xchg ebp, eax; ret 0xc985; 
0x00000000000f7986: xchg ebp, eax; ret 0xca09; 
0x00000000000c0e2e: xchg ebp, eax; ret 0xd284; 
0x0000000000105eca: xchg ebp, eax; ret 0xd320; 
0x000000000010fa5a: xchg ebp, eax; ret 0xd321; 
0x0000000000192e31: xchg ebp, eax; ret 0xd348; 
0x0000000000196ed2: xchg ebp, eax; ret 0xdb31; 
0x00000000000bf1f8: xchg ebp, eax; ret 0xdeb; 
0x0000000000197095: xchg ebp, eax; ret 0xf45; 
0x00000000000260c7: xchg ebp, eax; ret; 
0x000000000010f3d7: xchg ebp, eax; retf 0xd; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a87eb: xchg ebp, eax; rol dword ptr [rbp - 0x7c], 0xca; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a8920: xchg ebp, eax; rol dword ptr [rcx + 0x39], 0xd0; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000011fdd7: xchg ebp, eax; ror byte ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000014de20: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x00000000000246d6: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000001173c8: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000011f3a1: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000156535: xchg ebp, eax; ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x000000000014a142: xchg ebp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000062e69: xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbp; ret; 
0x00000000001028b2: xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x000000000006ddc3: xchg ebp, eax; sar dl, 0xff; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0xa; 
0x0000000000048f49: xchg ebp, eax; std; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000439d7: xchg ebp, eax; test byte ptr [rdx], bl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcccf: xchg ebp, eax; test edx, edx; jne 0xbccb0; ret; 
0x00000000000e2b58: xchg ebx, eax; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000019901e: xchg ebx, eax; call 0xffffffff8038a023; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000b6e4f: xchg ebx, eax; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000091f36: xchg ebx, eax; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000088a88: xchg ebx, eax; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000ee463: xchg ebx, eax; pop rbx; ret; 
0x000000000003754e: xchg ebx, eax; ret 0x3948; 
0x0000000000044f23: xchg ebx, eax; ret 0x3949; 
0x00000000000a607a: xchg ebx, eax; ret 0x841; 
0x00000000000ed99c: xchg ebx, eax; ret 0x8445; 
0x00000000000c8431: xchg ebx, eax; ret 0x844; 
0x00000000000a51c5: xchg ebx, eax; ret 0x845; 
0x000000000004513f: xchg ebx, eax; ret 0x854d; 
0x0000000000157f97: xchg ebx, eax; ret 0xd108; 
0x000000000007161e: xchg ebx, eax; ret; 
0x00000000000a6074: xchg ebx, eax; ror byte ptr [rcx + rdi - 0x21], 0xf; xchg ebx, eax; ret 0x841; 
0x0000000000047f88: xchg ebx, eax; sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000008584f: xchg ebx, eax; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000e2ca4: xchg ecx, eax; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000c9ee0: xchg ecx, eax; add eax, 0x74db8500; sbb dword ptr [rcx], edi; ret; 
0x0000000000118cc5: xchg ecx, eax; hlt; dec dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x00000000000d4aa3: xchg ecx, eax; jae 0xd4ab7; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x00000000000d0ddb: xchg ecx, eax; mov al, 0x11; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001817f1: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000162d18: xchg ecx, eax; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000116cdb: xchg ecx, eax; push rcx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000014473b: xchg ecx, eax; ret; 
0x000000000017ff1f: xchg ecx, eax; sub eax, edx; ret; 
0x00000000000cf282: xchg ecx, ebx; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000009f6fa: xchg edi, eax; add byte ptr [rax], al; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f7ca: xchg edi, eax; add byte ptr [rax], al; lea rdx, [rip + 0xd70dc]; cmovne rax, rdx; ret; 
0x0000000000198bc8: xchg edi, eax; call 0xffffffffc761e7cd; add eax, 0x56559; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000102a7c: xchg edi, eax; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x00000000000827ee: xchg edi, eax; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000a8e2f: xchg edi, eax; idiv edi; add rsp, 8; ret; 
0x000000000015c865: xchg edi, eax; insd dword ptr [rdi], dx; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000108c5b: xchg edi, eax; int1; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000063014: xchg edi, eax; mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000ec4a4: xchg edi, eax; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000033d99: xchg edi, eax; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x0000000000119788: xchg edi, eax; mov rax, qword ptr [rip + 0xd26e0]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000008ce10: xchg edi, eax; movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce0: xchg edi, eax; movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000827f5: xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000113ba5: xchg edi, eax; or bh, al; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000001054a5: xchg edi, eax; rcr byte ptr [rax + rax], 0x31; ror byte ptr [rdi], cl; mov esi, 0xfc085c0; xchg esp, eax; ret 0x1589; 
0x000000000012fd05: xchg edi, eax; ret 0x840; 
0x0000000000142646: xchg edi, eax; ret 0x8440; 
0x000000000014b6ea: xchg edi, eax; ret 0xb75; 
0x000000000013da00: xchg edi, eax; ret 0xd231; 
0x000000000014b6f7: xchg edi, eax; ret 0xd284; 
0x000000000012a439: xchg edi, eax; ret 0xda80; 
0x00000000000f1b65: xchg edi, eax; ret; 
0x000000000012205a: xchg edi, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000ecafa: xchg edx, eax; add al, 0; add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 + 0x63], r9b; ret; 
0x000000000019904e: xchg edx, eax; call 0xffffffff8038a053; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019907e: xchg edx, eax; call 0xffffffff8038a083; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001990ae: xchg edx, eax; call 0xffffffff8038a0b3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001990de: xchg edx, eax; call 0xffffffff8038a0e3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000018806c: xchg edx, eax; lea rcx, [rip + 0x1344c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001866b7: xchg edx, eax; lea rcx, [rip + 0x14e01]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001837ac: xchg edx, eax; lea rcx, [rip + 0x17d0c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001817e7: xchg edx, eax; lea rcx, [rip + 0x19cd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000055067: xchg edx, eax; mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000c313e: xchg edx, eax; ret 0x2040; 
0x0000000000055754: xchg edx, eax; ret 0x8948; 
0x0000000000194e9a: xchg edx, eax; ret 0x894d; 
0x000000000014bb77: xchg edx, eax; ret 0x8b48; 
0x000000000014bb6a: xchg edx, eax; ret 0xb75; 
0x00000000000d47e5: xchg edx, eax; ret 0xc283; 
0x000000000009ef07: xchg edx, eax; ret 0xf083; 
0x00000000001838b8: xchg edx, eax; ret 0xf40; 
0x0000000000194e68: xchg edx, eax; ret; 
0x00000000000db0b0: xchg edx, eax; rol byte ptr [rip + 0x16d], 0x29; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000a093a: xchg edx, eax; sbb edi, eax; call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000017ec77: xchg edx, eax; sub eax, edx; ret; 
0x00000000000a6be9: xchg edx, edx; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000001619b6: xchg esi, eax; add al, 0; add byte ptr [rdi], cl; mov dh, 0x42; add al, byte ptr [rbx - 0x7cb7fd37]; ret 0xe902; 
0x0000000000090914: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000018d872: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014fc76: xchg esi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000016cda3: xchg esi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000198cb6: xchg esi, eax; call 0xffffffff80389cbb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000018d92f: xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008274c: xchg esi, eax; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000a2859: xchg esi, eax; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000018d88d: xchg esi, eax; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000d4eb6: xchg esi, eax; or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000009f2d6: xchg esi, eax; ret 0x3145; 
0x00000000000a70c7: xchg esi, eax; ret 0x3948; 
0x00000000000d2559: xchg esi, eax; ret 0x3ee9; 
0x00000000000d67ff: xchg esi, eax; ret 0x6348; 
0x000000000013c1ab: xchg esi, eax; ret 0x8341; 
0x00000000000ca8d3: xchg esi, eax; ret 0xc085; 
0x00000000001347d3: xchg esi, eax; ret 0xc8b; 
0x00000000000ca927: xchg esi, eax; ret 0xd284; 
0x00000000000d2801: xchg esi, eax; ret 0xe1e9; 
0x000000000009f285: xchg esi, eax; ret 0xf631; 
0x000000000005a026: xchg esi, eax; ret 0xffff; 
0x00000000000a70cd: xchg esi, eax; ret; 
0x000000000018d8de: xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003e1cd: xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x00000000000d0859: xchg esp, eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000001400d3: xchg esp, eax; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x3be9; 
0x000000000014007b: xchg esp, eax; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0x9be9; 
0x000000000013fc8b: xchg esp, eax; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x34], cl; ret 0xd889; 
0x00000000000d0857: xchg esp, eax; and al, 0x94; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000053b12: xchg esp, eax; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x89e9; 
0x000000000015eb62: xchg esp, eax; and al, 0xb5; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x00000000000d0b28: xchg esp, eax; and al, 0xd4; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000107540: xchg esp, eax; and al, 0xf0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b48; 
0x0000000000132ad8: xchg esp, eax; clc; out dx, al; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001129c4: xchg esp, eax; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e17d8: xchg esp, eax; or esi, esp; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012902c: xchg esp, eax; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x0000000000149d69: xchg esp, eax; rcr byte ptr [rbx + 0x5d], 0xf; mov dh, 0xc0; pop r12; ret; 
0x0000000000160b16: xchg esp, eax; ret 0x1389; 
0x00000000001054b1: xchg esp, eax; ret 0x1589; 
0x0000000000051105: xchg esp, eax; ret 0x2040; 
0x0000000000193332: xchg esp, eax; ret 0x2041; 
0x000000000010ecc3: xchg esp, eax; ret 0x2044; 
0x000000000005f678: xchg esp, eax; ret 0x3145; 
0x00000000000a8737: xchg esp, eax; ret 0x3840; 
0x0000000000081ea2: xchg esp, eax; ret 0x3b48; 
0x0000000000054000: xchg esp, eax; ret 0x3de9; 
0x000000000006a769: xchg esp, eax; ret 0x68e9; 
0x0000000000053942: xchg esp, eax; ret 0x7c8b; 
0x00000000000edb94: xchg esp, eax; ret 0x8040; 
0x0000000000104cc3: xchg esp, eax; ret 0x8341; 
0x00000000001965c2: xchg esp, eax; ret 0x8440; 
0x0000000000193bec: xchg esp, eax; ret 0x8441; 
0x000000000005f230: xchg esp, eax; ret 0x8545; 
0x00000000000f9f8f: xchg esp, eax; ret 0x8548; 
0x00000000000e31cd: xchg esp, eax; ret 0x854d; 
0x0000000000104e23: xchg esp, eax; ret 0x8944; 
0x00000000000d6989: xchg esp, eax; ret 0x8d48; 
0x000000000013f8a4: xchg esp, eax; ret 0xa3c; 
0x000000000009f2df: xchg esp, eax; ret 0xb60f; 
0x00000000000d0907: xchg esp, eax; ret 0xc031; 
0x00000000000eff30: xchg esp, eax; ret 0xd009; 
0x00000000000fe441: xchg esp, eax; ret 0xd020; 
0x000000000009ef10: xchg esp, eax; ret 0xd084; 
0x000000000003006e: xchg esp, eax; ret 0xd108; 
0x00000000000240d4: xchg esp, eax; ret 0xd284; 
0x000000000013f86d: xchg esp, eax; ret 0xd308; 
0x000000000010f5d6: xchg esp, eax; ret 0xd321; 
0x00000000000d0a4b: xchg esp, eax; ret 0xd338; 
0x00000000000a8895: xchg esp, eax; ret 0xf039; 
0x000000000005fd89: xchg esp, eax; ret 0xf45; 
0x00000000000f9b16: xchg esp, eax; ret 0xf631; 
0x00000000000f47c2: xchg esp, eax; ret 0xf66; 
0x00000000001353f2: xchg esp, eax; ret 0xf741; 
0x00000000000e9576: xchg esp, eax; ret 0xf883; 
0x0000000000053bbf: xchg esp, eax; ret 0xf983; 
0x000000000011eca8: xchg esp, eax; ret 9; 
0x00000000000304ea: xchg esp, eax; ret; 
0x00000000000d068c: xchg esp, eax; rol byte ptr [rcx + rbp - 0x40], 0x89; ret; 
0x0000000000103f8d: xchg esp, eax; rol byte ptr [rcx - 0x7d], 0xf8; add dword ptr [rdi], ecx; xchg esp, eax; ret 0xd009; 
0x000000000009c244: xchg esp, eax; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000001004fe: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000157d6c: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000000522b3: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000062e27: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000e51fc: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x0000000000053bc5: xchg esp, eax; ror byte ptr [rdx], 0x84; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x2074; 
0x00000000000328e8: xchg esp, eax; sbb eax, dword ptr [rax]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000001093d7: xchg esp, eax; shr ecx, 0xd2; idiv bh; dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret 1; 
0x00000000001990dd: xchg r10, rax; call 0xffffffff8038a0e3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009f6f9: xchg r15d, eax; add byte ptr [rax], al; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000001970f4: xlatb; call 0x197200; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000005b6a8: xlatb; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x00000000000bbb5c: xlatb; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011d007: xlatb; jne 0x11cff8; mov rax, qword ptr [rax + 8]; ret; 
0x000000000016d3db: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000a05a5: xlatb; mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000013c509: xlatb; mov qword ptr [r9], rdi; ret; 
0x000000000005b463: xlatb; mov rax, r10; ret; 
0x00000000000d8497: xlatb; movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx + 0x29], al; ret 0x8944; 
0x00000000000db0ac: xlatb; movabs dword ptr [0x16d05c0920f00], eax; add byte ptr [rcx], ch; ror dword ptr [rcx - 0x35d6bb36], 0x81; ret 0x17e; 
0x00000000000496ab: xlatb; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], r9; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000bea43: xlatb; or byte ptr [rax - 0x73], cl; add qword ptr [r9 - 0x77], rcx; xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000496b4: xlatb; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000a2f91: xlatb; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xc019; 
0x00000000000b1a97: xlatb; ret 0x94c; 
0x00000000000abf8f: xlatb; ret 0xc085; 
0x00000000000aa440: xlatb; ret 0xc148; 
0x0000000000184cd8: xlatb; ret 0xe883; 
0x00000000000ac78b: xlatb; ret 0xf188; 
0x00000000000b1c18: xlatb; ret 0xf66; 
0x0000000000184e98: xlatb; ret 0xff2d; 
0x00000000000abfa4: xlatb; ret; 
0x00000000000cf46f: xlatb; retf 0xf66; xlatb; ret; 
0x0000000000188529: xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000000ac381: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000188585: xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000018470f: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000ac153: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac606: xlatb; rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x00000000000ac635: xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000001847d2: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x00000000001882d2: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000000ac123: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000188a16: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000001846d2: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000000b254f: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x00000000000b7192: xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x0000000000189537: xlatb; ror byte ptr [rcx - 0x7d], cl; ret 0x4d20; 
0x0000000000190bba: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000ac5a4: xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000184a7d: xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000000aa326: xlatb; sal bh, 1; ret 0x8000; 
0x00000000000aa1e6: xlatb; sal bh, 1; ret 0xc000; 
0x00000000000aa0a6: xlatb; sal bh, 1; ret 0xe000; 
0x00000000000a9f66: xlatb; sal bh, 1; ret 0xf000; 
0x00000000000a9e26: xlatb; sal bh, 1; ret 0xf800; 
0x00000000000a9ce6: xlatb; sal bh, 1; ret 0xfc00; 
0x00000000000a9ba6: xlatb; sal bh, 1; ret 0xfe00; 
0x00000000000a9a66: xlatb; sal bh, 1; ret 0xff00; 
0x00000000000a9926: xlatb; sal bh, 1; ret 0xff80; 
0x00000000000a97e6: xlatb; sal bh, 1; ret 0xffc0; 
0x00000000000a96a6: xlatb; sal bh, 1; ret 0xffe0; 
0x00000000000a9566: xlatb; sal bh, 1; ret 0xfff0; 
0x00000000000a9426: xlatb; sal bh, 1; ret 0xfff8; 
0x00000000000a92e6: xlatb; sal bh, 1; ret 0xfffc; 
0x00000000000a91a6: xlatb; sal bh, 1; ret 0xfffe; 
0x0000000000190bb6: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000000b1a46: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x00000000000b1a35: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000004732a: xlatb; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000011eeaa: xlatb; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000c683d: xlatb; str word ptr fs:[rax + 0x21]; ret 0x8948; 
0x0000000000160a9c: xlatb; xor eax, eax; ret; 
0x00000000000b67a8: xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39d0: xor ah, ah; mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b39e0: xor ah, ah; mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000b3a10: xor ah, ah; mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000b673e: xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3a80: xor ah, ah; mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000001463a9: xor ah, byte ptr [rdi + 0x4802000a]; add esp, 8; lea rax, [rip + 0xaa747]; ret; 
0x00000000000fbcda: xor ah, byte ptr [rsi - 0xe]; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000012ee8c: xor ah, cl; add eax, 0xfa834800; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x00000000000cbc08: xor al, 0; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0d403], al; ret 7; 
0x0000000000120235: xor al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120244; ret; 
0x00000000000a4f89: xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x0000000000110128: xor al, 0x23; int1; dec dword ptr [rbp + rcx*4 + 0x24]; sbb byte ptr [rax - 0x77], cl; ret 0x8d49; 
0x00000000000a1f73: xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x000000000012f592: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f2: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f605; add rsp, 0x28; ret; 
0x000000000004374c: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4375c; add rsp, 0x98; ret; 
0x00000000001476e0: xor al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000420e1: xor al, 0x48; and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203d: xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x00000000000ac6bb: xor al, 0x48; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000184bab: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x000000000018c9cc: xor al, 0xa; jne 0x18c769; vzeroupper; ret; 
0x0000000000057b54: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000118988: xor al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000118a44: xor al, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000e7668: xor al, 0xe8; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000008147f: xor al, 0xe9; ret 0xfffc; 
0x000000000018c9c9: xor al, 0xe; cmp esi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x00000000000cef48: xor al, 1; add byte ptr [rax], al; ret; 
0x000000000011ff45: xor al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff54; ret; 
0x00000000000812ef: xor al, 2; add byte ptr [rax], al; add bl, ch; ret 0x43c7; 
0x000000000011eeaf: xor al, al; or eax, edx; ret; 
0x000000000009f3eb: xor al, bh; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001202c5: xor al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1202d4; ret; 
0x000000000006300d: xor al, byte ptr [rbp + 0x481675c0]; mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000017ca1a: xor al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000013ad4d: xor al, byte ptr [rcx - 0x77]; ret 0xfe83; 
0x00000000001152e5: xor al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1152f4; ret; 
0x0000000000148c91: xor al, ch; cmp edx, ebp; add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x00000000000d9398: xor al, ch; ret 0xf491; 
0x0000000000109ed7: xor al, ch; ret; 
0x00000000001127ec: xor ax, ax; ret; 
0x00000000000e81a6: xor bh, byte ptr [rax + 1]; ret; 
0x000000000008d2ed: xor bh, byte ptr [rax - 1]; test edx, edx; je 0x8d300; ret; 
0x000000000008d74d: xor bh, byte ptr [rax - 1]; test edx, edx; je 0x8d760; ret; 
0x0000000000042302: xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x00000000000f2491: xor byte ptr [r11 + 0x5d], r11b; pop r12; ret; 
0x00000000000cf03c: xor byte ptr [r11], r15b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000ac0ad: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x00000000000ac11f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000010c307: xor byte ptr [r15], r9b; adc dword ptr [rdi + 0x40], eax; ret; 
0x00000000001272fa: xor byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x00000000001276dd: xor byte ptr [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091972: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008c10b: xor byte ptr [r8 - 0x77], r9b; sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d9b7: xor byte ptr [rax + 0x106], bh; syscall; cmp rax, -0x1000; ja 0x10d9d0; ret; 
0x000000000004292d: xor byte ptr [rax + 0x21], cl; retf 0x948; ret 0x8948; 
0x000000000008c3e8: xor byte ptr [rax + 0x29], cl; ret 0x3948; 
0x00000000001272fb: xor byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000009d368: xor byte ptr [rax + 0x31], cl; ret 0x8948; 
0x00000000000de360: xor byte ptr [rax + 0x39], cl; ret 0xda72; 
0x0000000000129691: xor byte ptr [rax + 0x39], cl; ret 0xe975; 
0x00000000001276de: xor byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001507a5: xor byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000000ac696: xor byte ptr [rax + 1], cl; ret 0x547c; 
0x00000000001507a4: xor byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d19f: xor byte ptr [rax + rax + 0x1b80000], 0; add byte ptr [rax], al; ret; 
0x0000000000064be8: xor byte ptr [rax + rax], dl; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000009a0c7: xor byte ptr [rax - 0x75], cl; add eax, 0x151e11; mov qword ptr [rax], rdi; ret; 
0x00000000000961cd: xor byte ptr [rax - 0x75], cl; add eax, 0x155d0b; mov qword ptr [rax], rdx; ret; 
0x0000000000055064: xor byte ptr [rax - 0x75], cl; xchg edx, eax; mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b69bf: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000091973: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000149dc6: xor byte ptr [rax - 0x77], cl; jae 0x149deb; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000057d64: xor byte ptr [rax - 0x77], cl; or byte ptr [r8 + 2], r15b; ret; 
0x000000000011cc2f: xor byte ptr [rax - 0x77], cl; ret 0xceb; 
0x000000000008c10c: xor byte ptr [rax - 0x77], cl; sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000001435b1: xor byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x44; ret 0x8b48; 
0x000000000011659a: xor byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000116778: xor byte ptr [rax - 0x7d], cl; ret 0x8004; 
0x00000000000c0595: xor byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; imul cl; ret; 
0x0000000000102e43: xor byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf00001], al; ret; 
0x0000000000146380: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; lea rax, [rip + 0xaa773]; add rsp, 8; ret; 
0x00000000000bc1d4: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000023a47: xor byte ptr [rax], al; add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x0000000000120775: xor byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120784; ret; 
0x0000000000047c94: xor byte ptr [rax], al; add byte ptr [rcx - 0x1e], al; jg 0x47c27; adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x000000000008749e: xor byte ptr [rax], al; je 0x874a8; ret; 
0x00000000000bb337: xor byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000cf040: xor byte ptr [rbp + 0x3d], dh; ret; 
0x00000000000cf03f: xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000bbdd9: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x00000000000a08d3: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xe560; lea rdx, [rip + 0xd22c9]; cmovne rax, rdx; ret; 
0x00000000000a0833: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xe5e0; lea rdx, [rip + 0xd2349]; cmovne rax, rdx; ret; 
0x000000000009f75a: xor byte ptr [rbp + rdx - 0x80], 0xe6; add cl, byte ptr [rax - 0x73]; add eax, 0xaef9; lea rdx, [rip + 0xc4f82]; cmovne rax, rdx; ret; 
0x00000000000df4cf: xor byte ptr [rbx + 0x10fe092d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000008df24: xor byte ptr [rbx + 0x11], dh; lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000000863f9: xor byte ptr [rbx + 0x14], dh; lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x00000000000863f8: xor byte ptr [rbx + 0x14], sil; lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000009e847: xor byte ptr [rbx + 0x16], dh; mov rax, qword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x00000000000423fc: xor byte ptr [rbx + 0x560f0017], ah; add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x0000000000040f56: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000009125b: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000196c61: xor byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x000000000014c1ff: xor byte ptr [rbx + 0xa4ac12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013891f: xor byte ptr [rbx + 0xb7b792d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013442f: xor byte ptr [rbx + 0xbbe892d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000132fcf: xor byte ptr [rbx + 0xbd1812d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001259cf: xor byte ptr [rbx + 0xca3892d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000123cff: xor byte ptr [rbx + 0xcbea12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000f69ec: xor byte ptr [rbx + rax*4], dl; ret; 
0x000000000009f34f: xor byte ptr [rbx - 0x1c89f607], al; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000000929dd: xor byte ptr [rbx - 0x3f8a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014a8f4: xor byte ptr [rbx - 0x76b6fc1d], al; ror byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000080fc3: xor byte ptr [rbx - 0x78f0f608], al; xor eax, dword ptr [rax + rax]; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x00000000000cf03d: xor byte ptr [rbx], bh; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000874fd: xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000a03fc: xor byte ptr [rcx + 0xe], al; add byte ptr [rax - 0x73], cl; add eax, 0xbab9; cmove rax, rdx; ret; 
0x000000000006669b: xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009f2dc: xor byte ptr [rcx + 0xf], al; xchg esp, eax; ret 0xb60f; 
0x000000000019707a: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000043491: xor byte ptr [rcx + rcx*4 - 0x39], al; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000010e013: xor byte ptr [rcx + rcx*4 - 0x39], al; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000089d5d: xor byte ptr [rcx - 0x29f0993a], cl; or byte ptr [r9 + 0x800ce], r8b; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0x7589; 
0x0000000000075763: xor byte ptr [rcx - 0x77], cl; ret 0x2949; 
0x000000000005b95b: xor byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000002b04c: xor byte ptr [rcx - 0xa], al; ret 0x7501; 
0x000000000010f30a: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000011f701: xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x0000000000116913: xor byte ptr [rcx], dh; xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x00000000001168d3: xor byte ptr [rcx], dh; xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x000000000010c308: xor byte ptr [rdi], cl; adc dword ptr [rdi + 0x40], eax; ret; 
0x00000000000bbc8a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000014fdcc: xor byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000a15f0: xor byte ptr [rdx + 0xd], 0x2a; cmp rcx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000a15fa: xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x000000000018d61f: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018d61a: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000089ed8: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x00000000000b19fc: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ac0ae: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac120: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000089ed7: xor byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4866; 
0x000000000014102c: xor byte ptr [rsi + rbp*8], dl; dec dword ptr [rax + 0x39]; ret; 
0x000000000015139a: xor byte ptr [rsi], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000bb0c8: xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000bb0de: xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb100: xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb11e: xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb13e: xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb164: xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb180: xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb1a0: xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1c0: xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb1e6: xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb208: xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb226: xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb246: xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb262: xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb282: xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb2a2: xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2c2: xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2e8: xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb338: xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bb00e: xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb02c: xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb04c: xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bb06e: xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000bb08e: xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb0ae: xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000baf44: xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000baf56: xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000baf6c: xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf84: xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000baf9a: xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafac: xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000bafca: xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000bafd6: xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000bafec: xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000baf30: xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000639b5: xor cl, byte ptr [rax - 0x75]; adc byte ptr [r8 - 0x75], cl; push rbx; sbb byte ptr [rax + 1], cl; ret 0x14c; 
0x000000000017de8d: xor cl, byte ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001529a3: xor cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x0000000000116915: xor cl, byte ptr [rax - 0x7d]; ret 0xe904; 
0x0000000000118b78: xor cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000006b5da: xor cl, ch; ret 0xffca; 
0x00000000000b6620: xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000011ce3a: xor dh, al; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000148847: xor dh, dh; ret 0xf04; 
0x0000000000041f56: xor dl, 0xf; adc dword ptr [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000012181e: xor dl, byte ptr [rbp + 9]; add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; ret 0xc031; 
0x000000000007566a: xor dl, byte ptr [rdi]; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000006f26b: xor dword ptr [rax + 0x39], ecx; ret 0x850f; 
0x0000000000033c33: xor dword ptr [rax + 0x39], ecx; ror byte ptr [rax - 0x39], 1; ret 0xffff; 
0x00000000000e81c7: xor dword ptr [rax + 1], edi; ret; 
0x000000000013f0be: xor dword ptr [rax - 0x75], ecx; push rbx; adc byte ptr [rbp + rcx*4 + 4], cl; ret 0x8348; 
0x000000000006ec67: xor dword ptr [rax - 0x77], ecx; ret; 
0x00000000001013db: xor dword ptr [rax - 0x78], eax; xor esi, esi; ret 0xf02; 
0x00000000000a861b: xor dword ptr [rax - 0x7c], eax; div byte ptr [rbp - 0x11]; mov qword ptr [rdx], rcx; ret; 
0x00000000001168d5: xor dword ptr [rax - 0x7d], ecx; ret 0xe904; 
0x0000000000120165: xor dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000000986d0: xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000002c95f: xor dword ptr [rax], edx; add byte ptr [rcx - 0x77], al; ret; 
0x000000000013b037: xor dword ptr [rbx - 0x38b6fe18], eax; ret 0xffff; 
0x00000000000e2d40: xor dword ptr [rcx + rcx*4 - 0x31], eax; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000120fc2: xor dword ptr [rcx + rcx*4 - 0x31], eax; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000011fa05: xor dword ptr [rcx], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fa14; ret; 
0x0000000000032358: xor dword ptr [rcx], edi; ret 0x820f; 
0x00000000000246eb: xor dword ptr [rdi + 0x1c], 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000043c3b: xor dword ptr [rdx - 0x389bffe6], eax; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000d2d07: xor dword ptr [rsi + rcx], ebp; add al, ch; nop; xor edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000001131cb: xor eax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000002448a: xor eax, 0x38c48348; pop rbx; pop rbp; ret; 
0x000000000015e111: xor eax, 0x44010009; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x00000000001904b7: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000009f827: xor eax, 0x480014c6; lea edx, [rip + 0xe412e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x0000000000163437: xor eax, 0x6400088a; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162d37: xor eax, 0x64000891; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014589f: xor eax, 0x6fde0; call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x0000000000190af9: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000007539b: xor eax, 0x89480017; ret 0x2948; 
0x0000000000160db1: xor eax, 0x8e0da; ret; 
0x00000000000436c2: xor eax, 0x98c48148; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000de744: xor eax, 0xa8c48148; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000bc176: xor eax, 0xe8c1000f; or al, 0x89; ret 0xe283; 
0x000000000011fe37: xor eax, 0xf7000cc0; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011f337: xor eax, 0xf7000ccb; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115637: xor eax, 0xf7000d68; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115237: xor eax, 0xf7000d6c; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010e937: xor eax, 0xf7000dd5; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4137: xor eax, 0xf700107d; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000a4f96: xor eax, 0xf7410000; ret; 
0x0000000000118291: xor eax, dword ptr [0x28]; jne 0x1182a2; add rsp, 0xd8; ret; 
0x000000000011836a: xor eax, dword ptr [0x28]; jne 0x11837b; add rsp, 0xd8; ret; 
0x000000000011bd26: xor eax, dword ptr [0x28]; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bde6: xor eax, dword ptr [0x28]; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc4: xor eax, dword ptr [0x28]; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c22d: xor eax, dword ptr [0x28]; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c49a: xor eax, dword ptr [0x28]; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x0000000000129b48: xor eax, dword ptr [0x28]; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b871: xor eax, dword ptr [0x28]; jne 0x12b882; add rsp, 0xd8; ret; 
0x0000000000153a54: xor eax, dword ptr [0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac4: xor eax, dword ptr [0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b34: xor eax, dword ptr [0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b95: xor eax, dword ptr [0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf9: xor eax, dword ptr [0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c64: xor eax, dword ptr [0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce7: xor eax, dword ptr [0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x000000000015421c: xor eax, dword ptr [0x28]; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c8f: xor eax, dword ptr [0x28]; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000042b8e: xor eax, dword ptr [0x28]; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db6: xor eax, dword ptr [0x28]; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e03: xor eax, dword ptr [0x28]; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578bb: xor eax, dword ptr [0x28]; jne 0x57945; leave; ret; 
0x000000000008dbd1: xor eax, dword ptr [0x28]; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a44: xor eax, dword ptr [0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000018b744: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x18b751; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000080fc9: xor eax, dword ptr [rax + rax]; add byte ptr [rbx - 0x7cb7fb8e], cl; ret 0xb804; 
0x0000000000120265: xor eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120274; ret; 
0x00000000000d57f9: xor eax, dword ptr [rbp + 0x11]; add byte ptr [rbp - 0x77], cl; out 0x89, eax; ret 0x44c7; 
0x0000000000120c44: xor eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120cb0; ret; 
0x0000000000199140: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000008e464: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000dd689: xor eax, eax; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000012b96e: xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000048072: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094cd1: xor eax, eax; add rsp, 8; ret; 
0x00000000000342c4: xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000162d9d: xor eax, eax; call 0x10e470; add rsp, 8; sar eax, 0x1f; ret; 
0x000000000015772f: xor eax, eax; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x0000000000121268: xor eax, eax; cmp byte ptr [rcx], 0; je 0x121270; ret; 
0x000000000004736a: xor eax, eax; cmp byte ptr [rdi], 0; jne 0x47378; pop rbx; ret; 
0x00000000000ee478: xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000102aa0: xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000d4243: xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x0000000000122c54: xor eax, eax; cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x000000000008cd27: xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x00000000001196ee: xor eax, eax; cmp qword ptr [rsi], 0; mov rbx, rsi; je 0x119700; pop rbx; ret; 
0x0000000000157d64: xor eax, eax; cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x000000000010fd81: xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x0000000000094c64: xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000e51bb: xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51d6: xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x00000000000e51a3: xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000e5187: xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x000000000009418f: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000013c61a: xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x0000000000047af1: xor eax, eax; mov dword ptr [r11], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f23c6: xor eax, eax; mov dword ptr [rbp + 0x30], edi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f248d: xor eax, eax; mov dword ptr [rbp + 0x30], r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042c5d: xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000010c3d1: xor eax, eax; mov dword ptr [rbx + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c4f9: xor eax, eax; mov dword ptr [rbx + 4], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008762f: xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000013b405: xor eax, eax; mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000001136f4: xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000d4aa8: xor eax, eax; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000004810d: xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000099618: xor eax, eax; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000098098: xor eax, eax; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000114524: xor eax, eax; mov eax, 0x127; syscall; cmp rax, -0x1000; ja 0x114598; ret; 
0x00000000001145e4: xor eax, eax; mov eax, 0x128; syscall; cmp rax, -0x1000; ja 0x114658; ret; 
0x0000000000120527: xor eax, eax; mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x0000000000120307: xor eax, eax; mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120380; ret; 
0x00000000000e2ce4: xor eax, eax; mov eax, 0xf7; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000ee537: xor eax, eax; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000001574f1: xor eax, eax; mov eax, r8d; ret; 
0x000000000018c314: xor eax, eax; mov ecx, dword ptr [rdi + rdx + 0x20]; cmp ecx, dword ptr [rsi + rdx + 0x20]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c334: xor eax, eax; mov ecx, dword ptr [rdi + rdx + 0x40]; cmp ecx, dword ptr [rsi + rdx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c354: xor eax, eax; mov ecx, dword ptr [rdi + rdx + 0x60]; cmp ecx, dword ptr [rsi + rdx + 0x60]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c67a: xor eax, eax; mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c791: xor eax, eax; mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c769; vzeroupper; ret; 
0x000000000018cb50: xor eax, eax; mov ecx, dword ptr [rdi]; cmp ecx, dword ptr [rsi]; jne 0x18c769; vzeroupper; ret; 
0x000000000018c4b3: xor eax, eax; mov ecx, dword ptr [rsi + rdi + 0x20]; cmp ecx, dword ptr [rdx + rdi + 0x20]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c4e3: xor eax, eax; mov ecx, dword ptr [rsi + rdi + 0x40]; cmp ecx, dword ptr [rdx + rdi + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c94a: xor eax, eax; mov ecx, dword ptr [rsi + rdi]; cmp ecx, dword ptr [rdx + rdi]; jne 0x18c769; vzeroupper; ret; 
0x000000000018c607: xor eax, eax; mov edi, dword ptr [rsi + rcx + 0x40]; cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c481: xor eax, eax; mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c907: xor eax, eax; mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x000000000018bda0: xor eax, eax; mov edx, dword ptr [rdi]; cmp edx, dword ptr [rsi]; jne 0x18bd8c; ret; 
0x000000000018c50f: xor eax, eax; mov esi, dword ptr [rsi + rcx + 0x60]; cmp esi, dword ptr [rdx + rcx + 0x60]; jne 0x18c2f9; vzeroupper; ret; 
0x000000000018c9c6: xor eax, eax; mov esi, dword ptr [rsi + rcx]; cmp esi, dword ptr [rdx + rcx]; jne 0x18c769; vzeroupper; ret; 
0x000000000009ef3a: xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x00000000000a863b: xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x0000000000160dad: xor eax, eax; mov qword ptr [rip + 0x8e0da], rsi; ret; 
0x0000000000046c89: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000046c7e: xor eax, eax; mov rax, r8; ret; 
0x000000000012d0c5: xor eax, eax; mov rcx, qword ptr [rbp - 8]; xor rcx, qword ptr fs:[0x28]; jne 0x12d1ad; leave; ret; 
0x0000000000048004: xor eax, eax; movsd qword ptr [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a093f: xor eax, eax; pop r12; pop r13; ret; 
0x000000000012cf7b: xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000134b47: xor eax, eax; pop rbp; mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000009a501: xor eax, eax; pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000026017: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000900b1: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000004129a: xor eax, eax; pop rbp; ret; 
0x0000000000099c91: xor eax, eax; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000047248: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008d8de: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000935e6: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000042c3f: xor eax, eax; pop rbx; ret; 
0x000000000008e64f: xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000047ce2: xor eax, eax; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000040fc8: xor eax, eax; ret; 
0x00000000000aa64e: xor eax, eax; sub eax, ecx; ret; 
0x0000000000113604: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x113618; ret; 
0x000000000012e7a9: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x12e7c0; ret; 
0x000000000012bdbc: xor eax, eax; test byte ptr [rbx + 0x1c], 0x20; je 0x12bdd0; pop rbx; ret; 
0x000000000008cd64: xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd74: xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000ee48c: xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee43a: xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x00000000001571c1: xor eax, eax; test eax, eax; je 0x1571f0; mov eax, r8d; ret; 
0x0000000000157211: xor eax, eax; test eax, eax; je 0x157240; mov eax, r8d; ret; 
0x00000000001136b6: xor eax, eax; test edx, edx; js 0x1136c4; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000bd210: xor eax, eax; test edx, edx; sete al; ret; 
0x00000000001969d8: xor eax, eax; test r8d, r8d; jne 0x196930; add rsp, 0x38; ret; 
0x000000000004745f: xor eax, eax; test rdi, rdi; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x00000000000908a4: xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x00000000001843f0: xor eax, eax; vzeroupper; ret; 
0x0000000000117c08: xor eax, eax; xchg dword ptr [rip + 0xd7c40], eax; cmp eax, 1; jg 0x117c16; ret; 
0x000000000010259c: xor eax, eax; xor ecx, ecx; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bc: xor eax, eax; xor ecx, ecx; push 1; call 0x102520; add rsp, 0x18; ret; 
0x0000000000047d7c: xor eax, ecx; ret; 
0x000000000009f3a6: xor eax, edi; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000b190f: xor eax, edx; and rax, rcx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1b9f: xor eax, edx; and rsi, rax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000014a5fc: xor eax, edx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000040fb6: xor eax, edx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x000000000014a5f5: xor eax, edx; shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000472f7: xor eax, edx; sub eax, edx; ret; 
0x000000000004730a: xor eax, edx; sub rax, rdx; ret; 
0x0000000000120d29: xor eax, r8d; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bc879: xor ebp, dword ptr [rcx]; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000140b97: xor ebp, dword ptr [rdx + 7]; add al, ch; add byte ptr [rbx - 0x10], dl; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000009fa41: xor ebp, ebp; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000007161c: xor ebp, ecx; xchg ebx, eax; ret; 
0x0000000000082c07: xor ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000010d439: xor ecx, dword ptr [0x28]; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010dec9: xor ecx, dword ptr [0x28]; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4bf: xor ecx, dword ptr [0x28]; jne 0x10e565; add rsp, 0x68; ret; 
0x00000000001133c4: xor ecx, dword ptr [0x28]; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113453: xor ecx, dword ptr [0x28]; jne 0x1134a3; add rsp, 0x18; ret; 
0x000000000011350b: xor ecx, dword ptr [0x28]; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135a9: xor ecx, dword ptr [0x28]; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113af6: xor ecx, dword ptr [0x28]; jne 0x113b0b; add rsp, 0x18; ret; 
0x0000000000114988: xor ecx, dword ptr [0x28]; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a28: xor ecx, dword ptr [0x28]; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114add: xor ecx, dword ptr [0x28]; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bad: xor ecx, dword ptr [0x28]; jne 0x114c2b; add rsp, 0x38; ret; 
0x00000000001157ed: xor ecx, dword ptr [0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000011593d: xor ecx, dword ptr [0x28]; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b61: xor ecx, dword ptr [0x28]; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c30: xor ecx, dword ptr [0x28]; jne 0x116c75; add rsp, 0x38; ret; 
0x00000000001196b2: xor ecx, dword ptr [0x28]; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011f0b2: xor ecx, dword ptr [0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120ab7: xor ecx, dword ptr [0x28]; jne 0x120ac5; add rsp, 0x18; ret; 
0x00000000001210fc: xor ecx, dword ptr [0x28]; jne 0x12114b; add rsp, 0x58; ret; 
0x000000000012d0cd: xor ecx, dword ptr [0x28]; jne 0x12d1ad; leave; ret; 
0x000000000012de52: xor ecx, dword ptr [0x28]; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012e12a: xor ecx, dword ptr [0x28]; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012f14a: xor ecx, dword ptr [0x28]; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f6ba: xor ecx, dword ptr [0x28]; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f79a: xor ecx, dword ptr [0x28]; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f87a: xor ecx, dword ptr [0x28]; jne 0x12f88b; add rsp, 0xd8; ret; 
0x0000000000136665: xor ecx, dword ptr [0x28]; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d2: xor ecx, dword ptr [0x28]; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013c6eb: xor ecx, dword ptr [0x28]; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013e177: xor ecx, dword ptr [0x28]; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1ca: xor ecx, dword ptr [0x28]; jne 0x13e1d8; add rsp, 0x28; ret; 
0x00000000001539de: xor ecx, dword ptr [0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x000000000015fa0d: xor ecx, dword ptr [0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb04: xor ecx, dword ptr [0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcad: xor ecx, dword ptr [0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd76: xor ecx, dword ptr [0x28]; jne 0x15fdbc; add rsp, 0x38; ret; 
0x0000000000042ee8: xor ecx, dword ptr [0x28]; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043321: xor ecx, dword ptr [0x28]; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bd: xor ecx, dword ptr [0x28]; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043640: xor ecx, dword ptr [0x28]; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043ceb: xor ecx, dword ptr [0x28]; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441b: xor ecx, dword ptr [0x28]; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743c: xor ecx, dword ptr [0x28]; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752c: xor ecx, dword ptr [0x28]; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e55: xor ecx, dword ptr [0x28]; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea2: xor ecx, dword ptr [0x28]; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef5: xor ecx, dword ptr [0x28]; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f42: xor ecx, dword ptr [0x28]; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bfe: xor ecx, dword ptr [0x28]; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86e: xor ecx, dword ptr [0x28]; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c71: xor ecx, dword ptr [0x28]; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d46: xor ecx, dword ptr [0x28]; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfd: xor ecx, dword ptr [0x28]; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f91: xor ecx, dword ptr [0x28]; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062051: xor ecx, dword ptr [0x28]; jne 0x62062; add rsp, 0xd8; ret; 
0x000000000006213f: xor ecx, dword ptr [0x28]; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062216: xor ecx, dword ptr [0x28]; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000063169: xor ecx, dword ptr [0x28]; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063244: xor ecx, dword ptr [0x28]; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c1: xor ecx, dword ptr [0x28]; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657d: xor ecx, dword ptr [0x28]; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086676: xor ecx, dword ptr [0x28]; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086746: xor ecx, dword ptr [0x28]; jne 0x86757; add rsp, 0xd8; ret; 
0x00000000000867ff: xor ecx, dword ptr [0x28]; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f8: xor ecx, dword ptr [0x28]; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab89: xor ecx, dword ptr [0x28]; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac64: xor ecx, dword ptr [0x28]; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df408: xor ecx, dword ptr [0x28]; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4188: xor ecx, dword ptr [0x28]; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4228: xor ecx, dword ptr [0x28]; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f8: xor ecx, dword ptr [0x28]; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a8: xor ecx, dword ptr [0x28]; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000006bf50: xor ecx, dword ptr [rax - 0x77]; fiadd dword ptr [rcx + 1]; retf 0x8948; ret; 
0x000000000008d23e: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000118a88: xor ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b19a9: xor ecx, eax; and rsi, rcx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000102816: xor ecx, ecx; add rsp, 8; mov eax, r9d; ret; 
0x0000000000042178: xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000001025fd: xor ecx, ecx; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000160af8: xor ecx, ecx; call 0x63a00; test rbx, rbx; jne 0x160b10; pop rbx; ret; 
0x0000000000160b28: xor ecx, ecx; call 0x6bbd0; test rbx, rbx; jne 0x160b40; pop rbx; ret; 
0x00000000000cf156: xor ecx, ecx; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000c6b50: xor ecx, ecx; mov eax, r9d; ret; 
0x0000000000093e72: xor ecx, ecx; movsxd rdx, edx; call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x0000000000038ca1: xor ecx, ecx; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x000000000010259e: xor ecx, ecx; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025be: xor ecx, ecx; push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000011f8c9: xor ecx, ecx; rdpkru; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000010299a: xor edi, dword ptr [0x28]; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01ec: xor edi, dword ptr [0x28]; jne 0xd0209; add rsp, 0x28; ret; 
0x000000000012aaf9: xor edi, dword ptr [rax - 0x11]; dec dword ptr [rcx - 0x75]; cmp byte ptr [r8 - 0x77], r9b; ret 0x2b49; 
0x00000000000dcfb7: xor edi, edi; call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x0000000000113d70: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113d80; ret; 
0x0000000000113db1: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113dc0; ret; 
0x00000000000d107c: xor edi, edi; syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000d2d0d: xor edi, esi; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000010d174: xor edx, dword ptr [0x28]; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d48b: xor edx, dword ptr [0x28]; jne 0x10d499; add rsp, 0x18; ret; 
0x0000000000114ca7: xor edx, dword ptr [0x28]; jne 0x114cb5; add rsp, 0x28; ret; 
0x0000000000115866: xor edx, dword ptr [0x28]; jne 0x115874; add rsp, 0x28; ret; 
0x000000000012df48: xor edx, dword ptr [0x28]; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e062: xor edx, dword ptr [0x28]; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012ef68: xor edx, dword ptr [0x28]; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f082: xor edx, dword ptr [0x28]; jne 0x12f093; add rsp, 0xd8; ret; 
0x00000000001365c8: xor edx, dword ptr [0x28]; jne 0x1365f9; add rsp, 0x38; ret; 
0x000000000013ea59: xor edx, dword ptr [0x28]; jne 0x13ea67; add rsp, 0x18; ret; 
0x000000000015cabb: xor edx, dword ptr [0x28]; jne 0x15caf4; add rsp, 0x18; ret; 
0x0000000000160e09: xor edx, dword ptr [0x28]; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000054148: xor edx, dword ptr [0x28]; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ecf: xor edx, dword ptr [0x28]; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062de0: xor edx, dword ptr [0x28]; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1032: xor edx, dword ptr [0x28]; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b5: xor edx, dword ptr [0x28]; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf85: xor edx, dword ptr [0x28]; jne 0xdcf93; add rsp, 0x18; ret; 
0x000000000009f7c9: xor edx, dword ptr [rdi - 0x72b80000]; adc eax, 0xd70dc; cmovne rax, rdx; ret; 
0x00000000000d2f69: xor edx, eax; cld; push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x00000000000bc214: xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000349de: xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000157cfe: xor edx, edx; call 0x8b310; add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000160b10: xor edx, edx; cmp eax, -1; sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x000000000005ea33: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x000000000018cdd4: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188294: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cdf4: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882b4: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018ce32: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001882f2: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cc9a: xor edx, edx; lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018815a: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001211f5: xor edx, edx; mov eax, 0x1d; syscall; cmp rax, -0x1000; ja 0x121210; ret; 
0x000000000013efe1: xor edx, edx; mov eax, r10d; ret; 
0x0000000000063098: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000000bb9e3: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000010dc3b: xor edx, esp; or eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000012f591: xor esi, dword ptr [0x28]; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f1: xor esi, dword ptr [0x28]; jne 0x12f605; add rsp, 0x28; ret; 
0x000000000004374b: xor esi, dword ptr [0x28]; jne 0x4375c; add rsp, 0x98; ret; 
0x000000000012200b: xor esi, esi; call 0x121ec0; ret; 
0x00000000000a8e2b: xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000034a0e: xor esi, esi; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000445bd: xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x00000000000e2ec0: xor esi, esi; call 0xdd160; test eax, eax; jne 0xe2ed0; add rsp, 8; ret; 
0x000000000009ef30: xor esi, esi; mov qword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x00000000001013de: xor esi, esi; ret 0xf02; 
0x00000000001424f3: xor esp, esp; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000d0058: xor esp, esp; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0071: xor esp, esp; mov rax, r12; pop r12; ret; 
0x000000000002ffb3: xor esp, esp; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000a0395: xor esp, esp; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x000000000010d229: xor esp, esp; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000034b44: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000986cf: xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000001211f4: xor r10d, r10d; mov eax, 0x1d; syscall; cmp rax, -0x1000; ja 0x121210; ret; 
0x000000000013efe0: xor r10d, r10d; mov eax, r10d; ret; 
0x0000000000063097: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000001424f2: xor r12d, r12d; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000d0057: xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0070: xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000002ffb2: xor r12d, r12d; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000a0394: xor r12d, r12d; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x000000000010d228: xor r12d, r12d; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000034b43: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000009fa40: xor r13d, r13d; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000014a5f4: xor r8, rdx; shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000dd688: xor r8d, r8d; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000122c53: xor r8d, r8d; cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x000000000008cd26: xor r8d, r8d; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x0000000000157d63: xor r8d, r8d; cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x00000000000d4aa7: xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x0000000000099617: xor r8d, r8d; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000098097: xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000114523: xor r8d, r8d; mov eax, 0x127; syscall; cmp rax, -0x1000; ja 0x114598; ret; 
0x00000000001145e3: xor r8d, r8d; mov eax, 0x128; syscall; cmp rax, -0x1000; ja 0x114658; ret; 
0x0000000000120526: xor r8d, r8d; mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x0000000000120306: xor r8d, r8d; mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120380; ret; 
0x00000000000e2ce3: xor r8d, r8d; mov eax, 0xf7; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000ee536: xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000001574f0: xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000046c88: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000046c7d: xor r8d, r8d; mov rax, r8; ret; 
0x000000000009a500: xor r8d, r8d; pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000099c90: xor r8d, r8d; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000047ce1: xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001571c0: xor r8d, r8d; test eax, eax; je 0x1571f0; mov eax, r8d; ret; 
0x0000000000157210: xor r8d, r8d; test eax, eax; je 0x157240; mov eax, r8d; ret; 
0x000000000010259b: xor r8d, r8d; xor ecx, ecx; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bb: xor r8d, r8d; xor ecx, ecx; push 1; call 0x102520; add rsp, 0x18; ret; 
0x0000000000102815: xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x00000000001025fc: xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000cf155: xor r9d, r9d; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000c6b4f: xor r9d, r9d; mov eax, r9d; ret; 
0x0000000000038ca0: xor r9d, r9d; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x00000000001025d8: xor r9d, r9d; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001131ca: xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000118290: xor rax, qword ptr [0x28]; jne 0x1182a2; add rsp, 0xd8; ret; 
0x0000000000118369: xor rax, qword ptr [0x28]; jne 0x11837b; add rsp, 0xd8; ret; 
0x000000000011bd25: xor rax, qword ptr [0x28]; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bde5: xor rax, qword ptr [0x28]; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc3: xor rax, qword ptr [0x28]; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c22c: xor rax, qword ptr [0x28]; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c499: xor rax, qword ptr [0x28]; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x0000000000129b47: xor rax, qword ptr [0x28]; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b870: xor rax, qword ptr [0x28]; jne 0x12b882; add rsp, 0xd8; ret; 
0x0000000000153a53: xor rax, qword ptr [0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac3: xor rax, qword ptr [0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b33: xor rax, qword ptr [0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b94: xor rax, qword ptr [0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf8: xor rax, qword ptr [0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c63: xor rax, qword ptr [0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce6: xor rax, qword ptr [0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x000000000015421b: xor rax, qword ptr [0x28]; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c8e: xor rax, qword ptr [0x28]; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000042b8d: xor rax, qword ptr [0x28]; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db5: xor rax, qword ptr [0x28]; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e02: xor rax, qword ptr [0x28]; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578ba: xor rax, qword ptr [0x28]; jne 0x57945; leave; ret; 
0x000000000008dbd0: xor rax, qword ptr [0x28]; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a43: xor rax, qword ptr [0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000011828f: xor rax, qword ptr fs:[0x28]; jne 0x1182a2; add rsp, 0xd8; ret; 
0x0000000000118368: xor rax, qword ptr fs:[0x28]; jne 0x11837b; add rsp, 0xd8; ret; 
0x000000000011bd24: xor rax, qword ptr fs:[0x28]; jne 0x11bd37; add rsp, 0xd8; ret; 
0x000000000011bde4: xor rax, qword ptr fs:[0x28]; jne 0x11bdf7; add rsp, 0xd8; ret; 
0x000000000011bfc2: xor rax, qword ptr fs:[0x28]; jne 0x11bfd5; add rsp, 0x418; ret; 
0x000000000011c22b: xor rax, qword ptr fs:[0x28]; jne 0x11c23e; add rsp, 0xd8; ret; 
0x000000000011c498: xor rax, qword ptr fs:[0x28]; jne 0x11c4ab; add rsp, 0xd8; ret; 
0x0000000000129b46: xor rax, qword ptr fs:[0x28]; jne 0x129b59; add rsp, 0xd8; ret; 
0x000000000012b86f: xor rax, qword ptr fs:[0x28]; jne 0x12b882; add rsp, 0xd8; ret; 
0x0000000000153a52: xor rax, qword ptr fs:[0x28]; jne 0x153a62; add rsp, 0x78; ret; 
0x0000000000153ac2: xor rax, qword ptr fs:[0x28]; jne 0x153ad2; add rsp, 0x78; ret; 
0x0000000000153b32: xor rax, qword ptr fs:[0x28]; jne 0x153b42; add rsp, 0x78; ret; 
0x0000000000153b93: xor rax, qword ptr fs:[0x28]; jne 0x153ba3; add rsp, 0x78; ret; 
0x0000000000153bf7: xor rax, qword ptr fs:[0x28]; jne 0x153c07; add rsp, 0x78; ret; 
0x0000000000153c62: xor rax, qword ptr fs:[0x28]; jne 0x153c72; add rsp, 0x78; ret; 
0x0000000000153ce5: xor rax, qword ptr fs:[0x28]; jne 0x153cf5; add rsp, 0x78; ret; 
0x000000000015421a: xor rax, qword ptr fs:[0x28]; jne 0x154248; add rsp, 0x28; ret; 
0x0000000000155c8d: xor rax, qword ptr fs:[0x28]; jne 0x155c9d; add rsp, 0x48; ret; 
0x0000000000042b8c: xor rax, qword ptr fs:[0x28]; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db4: xor rax, qword ptr fs:[0x28]; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e01: xor rax, qword ptr fs:[0x28]; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578b9: xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x000000000008dbcf: xor rax, qword ptr fs:[0x28]; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a42: xor rax, qword ptr fs:[0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000000b1d69: xor rax, rax; ret; 
0x00000000000b190e: xor rax, rdx; and rax, rcx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1b9e: xor rax, rdx; and rsi, rax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000014a5fb: xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000040fb5: xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x0000000000047309: xor rax, rdx; sub rax, rdx; ret; 
0x000000000010d438: xor rcx, qword ptr [0x28]; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010dec8: xor rcx, qword ptr [0x28]; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4be: xor rcx, qword ptr [0x28]; jne 0x10e565; add rsp, 0x68; ret; 
0x00000000001133c3: xor rcx, qword ptr [0x28]; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113452: xor rcx, qword ptr [0x28]; jne 0x1134a3; add rsp, 0x18; ret; 
0x000000000011350a: xor rcx, qword ptr [0x28]; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135a8: xor rcx, qword ptr [0x28]; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113af5: xor rcx, qword ptr [0x28]; jne 0x113b0b; add rsp, 0x18; ret; 
0x0000000000114987: xor rcx, qword ptr [0x28]; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a27: xor rcx, qword ptr [0x28]; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114adc: xor rcx, qword ptr [0x28]; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bac: xor rcx, qword ptr [0x28]; jne 0x114c2b; add rsp, 0x38; ret; 
0x00000000001157ec: xor rcx, qword ptr [0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000011593c: xor rcx, qword ptr [0x28]; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b60: xor rcx, qword ptr [0x28]; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c2f: xor rcx, qword ptr [0x28]; jne 0x116c75; add rsp, 0x38; ret; 
0x00000000001196b1: xor rcx, qword ptr [0x28]; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011f0b1: xor rcx, qword ptr [0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120ab6: xor rcx, qword ptr [0x28]; jne 0x120ac5; add rsp, 0x18; ret; 
0x00000000001210fb: xor rcx, qword ptr [0x28]; jne 0x12114b; add rsp, 0x58; ret; 
0x000000000012d0cc: xor rcx, qword ptr [0x28]; jne 0x12d1ad; leave; ret; 
0x000000000012de51: xor rcx, qword ptr [0x28]; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012e129: xor rcx, qword ptr [0x28]; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012f149: xor rcx, qword ptr [0x28]; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f6b9: xor rcx, qword ptr [0x28]; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f799: xor rcx, qword ptr [0x28]; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f879: xor rcx, qword ptr [0x28]; jne 0x12f88b; add rsp, 0xd8; ret; 
0x0000000000136664: xor rcx, qword ptr [0x28]; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d1: xor rcx, qword ptr [0x28]; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013c6ea: xor rcx, qword ptr [0x28]; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013e176: xor rcx, qword ptr [0x28]; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1c9: xor rcx, qword ptr [0x28]; jne 0x13e1d8; add rsp, 0x28; ret; 
0x00000000001539dd: xor rcx, qword ptr [0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x000000000015fa0c: xor rcx, qword ptr [0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb03: xor rcx, qword ptr [0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcac: xor rcx, qword ptr [0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd75: xor rcx, qword ptr [0x28]; jne 0x15fdbc; add rsp, 0x38; ret; 
0x0000000000042ee7: xor rcx, qword ptr [0x28]; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043320: xor rcx, qword ptr [0x28]; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bc: xor rcx, qword ptr [0x28]; jne 0x435d5; add rsp, 0x118; ret; 
0x000000000004363f: xor rcx, qword ptr [0x28]; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043cea: xor rcx, qword ptr [0x28]; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441a: xor rcx, qword ptr [0x28]; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743b: xor rcx, qword ptr [0x28]; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752b: xor rcx, qword ptr [0x28]; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e54: xor rcx, qword ptr [0x28]; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea1: xor rcx, qword ptr [0x28]; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef4: xor rcx, qword ptr [0x28]; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f41: xor rcx, qword ptr [0x28]; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bfd: xor rcx, qword ptr [0x28]; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86d: xor rcx, qword ptr [0x28]; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c70: xor rcx, qword ptr [0x28]; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d45: xor rcx, qword ptr [0x28]; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfc: xor rcx, qword ptr [0x28]; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f90: xor rcx, qword ptr [0x28]; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062050: xor rcx, qword ptr [0x28]; jne 0x62062; add rsp, 0xd8; ret; 
0x000000000006213e: xor rcx, qword ptr [0x28]; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062215: xor rcx, qword ptr [0x28]; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000063168: xor rcx, qword ptr [0x28]; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063243: xor rcx, qword ptr [0x28]; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c0: xor rcx, qword ptr [0x28]; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657c: xor rcx, qword ptr [0x28]; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086675: xor rcx, qword ptr [0x28]; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086745: xor rcx, qword ptr [0x28]; jne 0x86757; add rsp, 0xd8; ret; 
0x00000000000867fe: xor rcx, qword ptr [0x28]; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f7: xor rcx, qword ptr [0x28]; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab88: xor rcx, qword ptr [0x28]; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac63: xor rcx, qword ptr [0x28]; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df407: xor rcx, qword ptr [0x28]; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4187: xor rcx, qword ptr [0x28]; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4227: xor rcx, qword ptr [0x28]; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f7: xor rcx, qword ptr [0x28]; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a7: xor rcx, qword ptr [0x28]; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000010d437: xor rcx, qword ptr fs:[0x28]; jne 0x10d447; add rsp, 0x18; ret; 
0x000000000010dec7: xor rcx, qword ptr fs:[0x28]; jne 0x10df89; add rsp, 0x78; ret; 
0x000000000010e4bd: xor rcx, qword ptr fs:[0x28]; jne 0x10e565; add rsp, 0x68; ret; 
0x00000000001133c2: xor rcx, qword ptr fs:[0x28]; jne 0x113413; add rsp, 0x68; ret; 
0x0000000000113451: xor rcx, qword ptr fs:[0x28]; jne 0x1134a3; add rsp, 0x18; ret; 
0x0000000000113509: xor rcx, qword ptr fs:[0x28]; jne 0x11355b; add rsp, 0x58; ret; 
0x00000000001135a7: xor rcx, qword ptr fs:[0x28]; jne 0x1135fb; add rsp, 0x58; ret; 
0x0000000000113af4: xor rcx, qword ptr fs:[0x28]; jne 0x113b0b; add rsp, 0x18; ret; 
0x0000000000114986: xor rcx, qword ptr fs:[0x28]; jne 0x1149eb; add rsp, 0x38; ret; 
0x0000000000114a26: xor rcx, qword ptr fs:[0x28]; jne 0x114a8b; add rsp, 0x38; ret; 
0x0000000000114adb: xor rcx, qword ptr fs:[0x28]; jne 0x114b5b; add rsp, 0x38; ret; 
0x0000000000114bab: xor rcx, qword ptr fs:[0x28]; jne 0x114c2b; add rsp, 0x38; ret; 
0x00000000001157eb: xor rcx, qword ptr fs:[0x28]; jne 0x115807; add rsp, 0x58; ret; 
0x000000000011593b: xor rcx, qword ptr fs:[0x28]; jne 0x11597d; add rsp, 0x68; ret; 
0x0000000000116b5f: xor rcx, qword ptr fs:[0x28]; jne 0x116ba5; add rsp, 0x38; ret; 
0x0000000000116c2e: xor rcx, qword ptr fs:[0x28]; jne 0x116c75; add rsp, 0x38; ret; 
0x00000000001196b0: xor rcx, qword ptr fs:[0x28]; jne 0x1196c0; add rsp, 0x18; ret; 
0x000000000011f0b0: xor rcx, qword ptr fs:[0x28]; jne 0x11f0d3; add rsp, 0x68; ret; 
0x0000000000120ab5: xor rcx, qword ptr fs:[0x28]; jne 0x120ac5; add rsp, 0x18; ret; 
0x00000000001210fa: xor rcx, qword ptr fs:[0x28]; jne 0x12114b; add rsp, 0x58; ret; 
0x000000000012d0cb: xor rcx, qword ptr fs:[0x28]; jne 0x12d1ad; leave; ret; 
0x000000000012de50: xor rcx, qword ptr fs:[0x28]; jne 0x12de68; add rsp, 0xd8; ret; 
0x000000000012e128: xor rcx, qword ptr fs:[0x28]; jne 0x12e13b; add rsp, 0xd8; ret; 
0x000000000012f148: xor rcx, qword ptr fs:[0x28]; jne 0x12f15b; add rsp, 0xd8; ret; 
0x000000000012f6b8: xor rcx, qword ptr fs:[0x28]; jne 0x12f6cb; add rsp, 0xd8; ret; 
0x000000000012f798: xor rcx, qword ptr fs:[0x28]; jne 0x12f7ab; add rsp, 0xd8; ret; 
0x000000000012f878: xor rcx, qword ptr fs:[0x28]; jne 0x12f88b; add rsp, 0xd8; ret; 
0x0000000000136663: xor rcx, qword ptr fs:[0x28]; jne 0x136673; add rsp, 0x38; ret; 
0x00000000001366d0: xor rcx, qword ptr fs:[0x28]; jne 0x1366e0; add rsp, 0x28; ret; 
0x000000000013c6e9: xor rcx, qword ptr fs:[0x28]; jne 0x13c700; add rsp, 0x18; ret; 
0x000000000013e175: xor rcx, qword ptr fs:[0x28]; jne 0x13e185; add rsp, 0x18; ret; 
0x000000000013e1c8: xor rcx, qword ptr fs:[0x28]; jne 0x13e1d8; add rsp, 0x28; ret; 
0x00000000001539dc: xor rcx, qword ptr fs:[0x28]; jne 0x1539ec; add rsp, 0x78; ret; 
0x000000000015fa0b: xor rcx, qword ptr fs:[0x28]; jne 0x15fa4e; add rsp, 0x58; ret; 
0x000000000015fb02: xor rcx, qword ptr fs:[0x28]; jne 0x15fb54; add rsp, 0x68; ret; 
0x000000000015fcab: xor rcx, qword ptr fs:[0x28]; jne 0x15fd04; add rsp, 0x68; ret; 
0x000000000015fd74: xor rcx, qword ptr fs:[0x28]; jne 0x15fdbc; add rsp, 0x38; ret; 
0x0000000000042ee6: xor rcx, qword ptr fs:[0x28]; jne 0x42ef9; add rsp, 0x148; ret; 
0x000000000004331f: xor rcx, qword ptr fs:[0x28]; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bb: xor rcx, qword ptr fs:[0x28]; jne 0x435d5; add rsp, 0x118; ret; 
0x000000000004363e: xor rcx, qword ptr fs:[0x28]; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043ce9: xor rcx, qword ptr fs:[0x28]; jne 0x43cfc; add rsp, 0x148; ret; 
0x0000000000044419: xor rcx, qword ptr fs:[0x28]; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743a: xor rcx, qword ptr fs:[0x28]; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752a: xor rcx, qword ptr fs:[0x28]; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e53: xor rcx, qword ptr fs:[0x28]; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea0: xor rcx, qword ptr fs:[0x28]; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef3: xor rcx, qword ptr fs:[0x28]; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f40: xor rcx, qword ptr fs:[0x28]; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bfc: xor rcx, qword ptr fs:[0x28]; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86c: xor rcx, qword ptr fs:[0x28]; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c6f: xor rcx, qword ptr fs:[0x28]; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d44: xor rcx, qword ptr fs:[0x28]; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfb: xor rcx, qword ptr fs:[0x28]; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f8f: xor rcx, qword ptr fs:[0x28]; jne 0x61fa2; add rsp, 0xd8; ret; 
0x000000000006204f: xor rcx, qword ptr fs:[0x28]; jne 0x62062; add rsp, 0xd8; ret; 
0x000000000006213d: xor rcx, qword ptr fs:[0x28]; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062214: xor rcx, qword ptr fs:[0x28]; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000063167: xor rcx, qword ptr fs:[0x28]; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063242: xor rcx, qword ptr fs:[0x28]; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864bf: xor rcx, qword ptr fs:[0x28]; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657b: xor rcx, qword ptr fs:[0x28]; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086674: xor rcx, qword ptr fs:[0x28]; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086744: xor rcx, qword ptr fs:[0x28]; jne 0x86757; add rsp, 0xd8; ret; 
0x00000000000867fd: xor rcx, qword ptr fs:[0x28]; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f6: xor rcx, qword ptr fs:[0x28]; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab87: xor rcx, qword ptr fs:[0x28]; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac62: xor rcx, qword ptr fs:[0x28]; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df406: xor rcx, qword ptr fs:[0x28]; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4186: xor rcx, qword ptr fs:[0x28]; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4226: xor rcx, qword ptr fs:[0x28]; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f6: xor rcx, qword ptr fs:[0x28]; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a6: xor rcx, qword ptr fs:[0x28]; jne 0xe4613; add rsp, 0x38; ret; 
0x00000000000b19a8: xor rcx, rax; and rsi, rcx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000102999: xor rdi, qword ptr [0x28]; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01eb: xor rdi, qword ptr [0x28]; jne 0xd0209; add rsp, 0x28; ret; 
0x0000000000102998: xor rdi, qword ptr fs:[0x28]; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01ea: xor rdi, qword ptr fs:[0x28]; jne 0xd0209; add rsp, 0x28; ret; 
0x000000000010d173: xor rdx, qword ptr [0x28]; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d48a: xor rdx, qword ptr [0x28]; jne 0x10d499; add rsp, 0x18; ret; 
0x0000000000114ca6: xor rdx, qword ptr [0x28]; jne 0x114cb5; add rsp, 0x28; ret; 
0x0000000000115865: xor rdx, qword ptr [0x28]; jne 0x115874; add rsp, 0x28; ret; 
0x000000000012df47: xor rdx, qword ptr [0x28]; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e061: xor rdx, qword ptr [0x28]; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012ef67: xor rdx, qword ptr [0x28]; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f081: xor rdx, qword ptr [0x28]; jne 0x12f093; add rsp, 0xd8; ret; 
0x00000000001365c7: xor rdx, qword ptr [0x28]; jne 0x1365f9; add rsp, 0x38; ret; 
0x000000000013ea58: xor rdx, qword ptr [0x28]; jne 0x13ea67; add rsp, 0x18; ret; 
0x000000000015caba: xor rdx, qword ptr [0x28]; jne 0x15caf4; add rsp, 0x18; ret; 
0x0000000000160e08: xor rdx, qword ptr [0x28]; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000054147: xor rdx, qword ptr [0x28]; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ece: xor rdx, qword ptr [0x28]; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062ddf: xor rdx, qword ptr [0x28]; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1031: xor rdx, qword ptr [0x28]; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b4: xor rdx, qword ptr [0x28]; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf84: xor rdx, qword ptr [0x28]; jne 0xdcf93; add rsp, 0x18; ret; 
0x000000000010d172: xor rdx, qword ptr fs:[0x28]; jne 0x10d191; add rsp, 0x28; ret; 
0x000000000010d489: xor rdx, qword ptr fs:[0x28]; jne 0x10d499; add rsp, 0x18; ret; 
0x0000000000114ca5: xor rdx, qword ptr fs:[0x28]; jne 0x114cb5; add rsp, 0x28; ret; 
0x0000000000115864: xor rdx, qword ptr fs:[0x28]; jne 0x115874; add rsp, 0x28; ret; 
0x000000000012df46: xor rdx, qword ptr fs:[0x28]; jne 0x12df65; add rsp, 0xd8; ret; 
0x000000000012e060: xor rdx, qword ptr fs:[0x28]; jne 0x12e073; add rsp, 0xd8; ret; 
0x000000000012ef66: xor rdx, qword ptr fs:[0x28]; jne 0x12ef85; add rsp, 0xd8; ret; 
0x000000000012f080: xor rdx, qword ptr fs:[0x28]; jne 0x12f093; add rsp, 0xd8; ret; 
0x00000000001365c6: xor rdx, qword ptr fs:[0x28]; jne 0x1365f9; add rsp, 0x38; ret; 
0x000000000013ea57: xor rdx, qword ptr fs:[0x28]; jne 0x13ea67; add rsp, 0x18; ret; 
0x000000000015cab9: xor rdx, qword ptr fs:[0x28]; jne 0x15caf4; add rsp, 0x18; ret; 
0x0000000000160e07: xor rdx, qword ptr fs:[0x28]; jne 0x160e17; add rsp, 0x28; ret; 
0x0000000000054146: xor rdx, qword ptr fs:[0x28]; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ecd: xor rdx, qword ptr fs:[0x28]; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062dde: xor rdx, qword ptr fs:[0x28]; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1030: xor rdx, qword ptr fs:[0x28]; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b3: xor rdx, qword ptr fs:[0x28]; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf83: xor rdx, qword ptr fs:[0x28]; jne 0xdcf93; add rsp, 0x18; ret; 
0x000000000012f590: xor rsi, qword ptr [0x28]; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5f0: xor rsi, qword ptr [0x28]; jne 0x12f605; add rsp, 0x28; ret; 
0x000000000004374a: xor rsi, qword ptr [0x28]; jne 0x4375c; add rsp, 0x98; ret; 
0x000000000012f58f: xor rsi, qword ptr fs:[0x28]; jne 0x12f5a5; add rsp, 0x28; ret; 
0x000000000012f5ef: xor rsi, qword ptr fs:[0x28]; jne 0x12f605; add rsp, 0x28; ret; 
0x0000000000043749: xor rsi, qword ptr fs:[0x28]; jne 0x4375c; add rsp, 0x98; ret; 
0x00000000000a0799: xrelease xchg byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xda49c; cmovne rax, rdx; ret; 
