0x00000000001465c9: adc ah, byte ptr [rbp + 0x4802000a]; add esp, 8; lea rax, [rip + 0xaa527]; ret; 
0x000000000018edad: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000102a7f: adc al, 0; add byte ptr [rax], al; add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x00000000001143d4: adc al, 0; add byte ptr [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000001146a1: adc al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114700; ret; 
0x000000000009f8a8: adc al, 0; add rsp, 8; ret; 
0x000000000009fae9: adc al, 0; lea rdx, [rip + 0xe41ce]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f829: adc al, 0; lea rdx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f239: adc al, 0; lea rdx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e959: adc al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009f8a1: adc al, 0; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f863: adc al, 0; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009f86a: adc al, 0; ret; 
0x000000000012356f: adc al, 0x11; test edx, edx; jne 0x123580; ret; 
0x0000000000123e9f: adc al, 0x11; test edx, edx; jne 0x123eb0; ret; 
0x00000000000aa3f9: adc al, 0x16; sub eax, edx; ret; 
0x0000000000183e30: adc al, 0x16; sub eax, edx; vzeroupper; ret; 
0x000000000017ee90: adc al, 0x16; test r8d, r8d; je 0x17ee98; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fe75: adc al, 0x16; test r8d, r8d; je 0x17fe7d; xchg edx, eax; sub eax, edx; ret; 
0x000000000010d395: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d6ac: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d6b9; add rsp, 0x18; ret; 
0x0000000000114ec8: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114ed5; add rsp, 0x28; ret; 
0x0000000000115a87: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115a94; add rsp, 0x28; ret; 
0x000000000012e169: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e283: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012f189: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x00000000001367e9: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136819; add rsp, 0x38; ret; 
0x000000000013ec7a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13ec87; add rsp, 0x18; ret; 
0x000000000015ccdc: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15cd14; add rsp, 0x18; ret; 
0x000000000016102a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x161037; add rsp, 0x28; ret; 
0x0000000000054149: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ed0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062de1: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1033: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b6: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf86: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000bb163: adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000018445d: adc al, 0x3a; sub eax, edx; vzeroupper; ret; 
0x00000000000ea41b: adc al, 0x3c; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d01f4: adc al, 0x48; add esp, 0x28; ret; 
0x000000000012e170: adc al, 0x48; add esp, 0xd8; ret; 
0x00000000000b8690: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x00000000000b90a0: adc al, 0x48; lea eax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b9503: adc al, 0x48; lea eax, [rdi + 0x15]; ret; 
0x00000000000ac6db: adc al, 0x48; lea eax, [rdi + rax + 0x30]; ret; 
0x00000000000b7931: adc al, 0x48; lea edi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9075: adc al, 0x48; lea edi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000863fb: adc al, 0x48; lea edx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x00000000000b7950: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a4: adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x000000000012d199: adc al, 0x5b; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000000a89fd: adc al, 0x66; mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x000000000012d197: adc al, 0x74; adc al, 0x5b; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000000f69ed: adc al, 0x83; ret; 
0x0000000000184dfb: adc al, 0x83; shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000087f56: adc al, 0x90; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f25: adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000181a10: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018013e: adc al, 0x91; sub eax, edx; ret; 
0x0000000000033d98: adc al, 0x97; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x00000000000aa563: adc al, 0xa; sub eax, edx; ret; 
0x0000000000183fad: adc al, 0xa; sub eax, edx; vzeroupper; ret; 
0x000000000012332f: adc al, 0xb2; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000033df9: adc al, 0xb7; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000055601: adc al, 0xc0; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000328a2: adc al, 0xc6; lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000055605: adc al, 0xc6; xor eax, eax; ret; 
0x0000000000160c68: adc al, 0xc7; setne al; movzx eax, al; ret; 
0x0000000000160c98: adc al, 0xc7; xor eax, eax; ret; 
0x000000000009e1f7: adc al, 0xd; adc eax, 0x2740000; ret; 
0x00000000000bbb58: adc al, 0xe; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000186bba: adc al, 0xe; lea rcx, [rip + 0x148fd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001854d1: adc al, 0xe; lea rcx, [rip + 0x15fe6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181d3a: adc al, 0xe; lea rcx, [rip + 0x1977d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000180131: adc al, 0xe; lea rcx, [rip + 0x1b386]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018bfba: adc al, 0xe; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000017e251: adc al, 0xe; sub eax, edx; ret; 
0x000000000018500a: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x00000000000b94f9: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7ca9: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b9079: adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000c7ef8: adc al, 0xf; xchg ebx, eax; ret; 
0x000000000014e7ec: adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x00000000000dd756: adc al, 0xff; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000048df7: adc al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000192d08: adc al, 1; add byte ptr [rax], al; ret; 
0x000000000011f6f4: adc al, 1; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000009c26a: adc al, 1; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x00000000000a8816: adc al, 7; cmp edx, esi; je 0xa8810; ret; 
0x00000000000a1438: adc al, bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000010c434: adc al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c4a0; ret; 
0x000000000008ded9: adc al, byte ptr [rax]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x000000000008ded2: adc al, byte ptr [rax]; lea rdi, [rip + 0x1274e9]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000bc869: adc al, byte ptr [rax]; lea rdx, [rip + 0xc123e]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000013becd: adc al, byte ptr [rbx + 0x7ba14fe]; add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x00000000000bcd5b: adc al, byte ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0xd5abb; cmovne rax, rdx; ret; 
0x00000000000b3aa7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b07: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3964: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3b27: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b47: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b67: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6738: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b39b1: adc al, byte ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000036729: adc al, byte ptr [rdx*4 - 0x763f6af1]; ret; 
0x000000000018a71a: adc al, byte ptr [rdx]; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000079cfa: adc al, byte ptr [rsi - 0x76b60006]; ret; 
0x00000000000e2c8d: adc al, ch; lodsd eax, dword ptr [rsi]; sbb ebx, edi; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x000000000003c307: adc al, ch; ret; 
0x00000000001509e3: adc bh, byte ptr [rax + 1]; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x0000000000041bac: adc bl, bl; insb byte ptr [rdi], dx; and al, 8; ret; 
0x0000000000125515: adc bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000008d7a3: adc bl, ch; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000056316: adc bl, ch; jge 0x56363; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000be5d4: adc bl, ch; or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014ffe7: adc bl, dh; movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150927: adc bl, dh; movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000016da80: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfca: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b9476: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c56: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d6: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8666: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8686: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000bb136: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b86e7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9557: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8707: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7037: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7017: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b8627: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9497: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f77: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b87e8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b9658: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7118: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2b8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000001974ab: adc bl, dh; movups xmm0, xmmword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000016da7f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b9475: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c55: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d5: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8665: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8685: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000bb135: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b86e6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9556: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8706: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7036: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7016: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b8626: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9496: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f76: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x0000000000121e61: adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x000000000008d30a: adc byte ptr [r10 + 0x32], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d76a: adc byte ptr [r10 + 0x42], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000011a777: adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x0000000000112b63: adc byte ptr [r13 + 0x41], r11b; pop rsp; pop r13; pop r14; ret; 
0x000000000014145a: adc byte ptr [r13 + 0x5b0875c0], r8b; pop rbp; pop r12; ret; 
0x00000000000ac14f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000010c51f: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb6: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000015fb2b: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000ecb00: adc byte ptr [r8 + 0x63], r9b; ret; 
0x00000000000e8142: adc byte ptr [r8 + 1], r9b; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000089742: adc byte ptr [r8 + 1], r9b; ret; 
0x00000000000bb15f: adc byte ptr [r8 - 0x12cfeba9], r9b; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b909c: adc byte ptr [r8 - 0x72b7eb89], r9b; adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x0000000000127c60: adc byte ptr [r8 - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000b794c: adc byte ptr [r8 - 0x7cb6eb89], r9b; call 0x7f98c16d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000001414d9: adc byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000bb0dc: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb0fe: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb13c: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb1be: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000011f91f: adc byte ptr [rax + 0x130], bh; syscall; cmp rax, -0x1000; ja 0x11f980; ret; 
0x00000000001145ff: adc byte ptr [rax + 0x13], bh; syscall; cmp rax, -0x1000; ja 0x114660; ret; 
0x000000000004821f: adc byte ptr [rax + 0x13e], bh; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x000000000011469f: adc byte ptr [rax + 0x14], bh; syscall; cmp rax, -0x1000; ja 0x114700; ret; 
0x0000000000118bff: adc byte ptr [rax + 0x1a], bh; syscall; cmp rax, -0x1000; ja 0x118c60; ret; 
0x00000000000e2e3f: adc byte ptr [rax + 0x22], bh; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x00000000001203bf: adc byte ptr [rax + 0x2a], bh; syscall; cmp rax, -0x1000; ja 0x120420; ret; 
0x00000000001202ef: adc byte ptr [rax + 0x2b], bh; syscall; cmp rax, -0x1000; ja 0x120350; ret; 
0x00000000001207ff: adc byte ptr [rax + 0x2e], bh; syscall; cmp rax, -0x1000; ja 0x120860; ret; 
0x000000000012069f: adc byte ptr [rax + 0x2f], bh; syscall; cmp rax, -0x1000; ja 0x120700; ret; 
0x00000000000c8f08: adc byte ptr [rax + 0x39], cl; fisttp word ptr [rdi]; xchg ebx, eax; ret; 
0x00000000000e5c71: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000015fa24: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x00000000001153bf: adc byte ptr [rax + 0x4a], bh; syscall; cmp rax, -0x1000; ja 0x115410; ret; 
0x000000000011547f: adc byte ptr [rax + 0x4b], bh; syscall; cmp rax, -0x1000; ja 0x1154d0; ret; 
0x000000000010ebaf: adc byte ptr [rax + 0x55], bh; syscall; cmp rax, -0x1000; ja 0x10ec00; ret; 
0x000000000015fb2c: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000000ecb01: adc byte ptr [rax + 0x63], cl; ret; 
0x0000000000149598: adc byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000001175bf: adc byte ptr [rax + 1], bh; ret; 
0x000000000010e28f: adc byte ptr [rax + 1], bh; syscall; cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x00000000000cf34e: adc byte ptr [rax + 1], cl; clc; ret; 
0x00000000000e8143: adc byte ptr [rax + 1], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000056aae: adc byte ptr [rax + 1], cl; ret; 
0x0000000000150a9d: adc byte ptr [rax + 1], dil; ret; 
0x000000000010ea2f: adc byte ptr [rax + 3], bh; syscall; cmp rax, -0x1000; ja 0x10ea80; ret; 
0x0000000000112b7f: adc byte ptr [rax + 7], bh; syscall; cmp rax, -0x1000; ja 0x112be0; ret; 
0x00000000000623e5: adc byte ptr [rax + rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000113d44: adc byte ptr [rax + rax], dl; call 0x1145c0; add rsp, 0x18; ret; 
0x00000000000bb2e4: adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb1e2: adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb160: adc byte ptr [rax - 0x12cfeba9], cl; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b909d: adc byte ptr [rax - 0x72b7eb89], cl; adc al, 0x49; sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x000000000012332c: adc byte ptr [rax - 0x73], cl; adc al, 0xb2; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000033df6: adc byte ptr [rax - 0x73], cl; adc al, 0xb7; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000001785d4: adc byte ptr [rax - 0x73], cl; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000123493: adc byte ptr [rax - 0x73], cl; add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000a0308: adc byte ptr [rax - 0x73], cl; add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x000000000009faf5: adc byte ptr [rax - 0x73], cl; add eax, 0x1bef3; cmovne rax, rdx; ret; 
0x000000000009f835: adc byte ptr [rax - 0x73], cl; add eax, 0x1c103; cmovne rax, rdx; ret; 
0x000000000009f245: adc byte ptr [rax - 0x73], cl; add eax, 0x1c643; cmovne rax, rdx; ret; 
0x0000000000118e4e: adc byte ptr [rax - 0x73], cl; add eax, 0xd6a3a; pop rbp; pop r12; pop r13; ret; 
0x00000000000b78ab: adc byte ptr [rax - 0x73], cl; jg 0xb78c0; jne 0xb7f80; ret; 
0x00000000000b8fcf: adc byte ptr [rax - 0x73], cl; jg 0xb8fe4; jne 0xb97d0; ret; 
0x0000000000123584: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123492: adc byte ptr [rax - 0x73], r9b; add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000123583: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000122b30: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b91: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000088a85: adc byte ptr [rax - 0x75], cl; xchg ebx, eax; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000b67ac: adc byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000127c61: adc byte ptr [rax - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000004823c: adc byte ptr [rax - 0x77], cl; jl 0x48265; or al, ch; cdq; ret; 
0x0000000000087f5b: adc byte ptr [rax - 0x77], cl; jo 0x87fa0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086e9d: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000e82c1: adc byte ptr [rax - 0x77], cl; ret; 
0x000000000011d21f: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], cl; cmp edi, edx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000b794d: adc byte ptr [rax - 0x7cb6eb89], cl; call 0x7f98c16d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x0000000000024140: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000153a02: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret; 
0x00000000000a880f: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je 0xa8810; ret; 
0x00000000001577b0: adc byte ptr [rax - 0x7d], cl; rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000dd052: adc byte ptr [rax - 1], bh; endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000f4cc4: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000141d92: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x000000000009526d: adc byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000014855c: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014851e: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484c2: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x0000000000146bb5: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000bc1e2: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000063029: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000113d7b: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113dd8; ret; 
0x00000000001145c5: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1145d4; ret; 
0x000000000010f471: adc byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000062654: adc byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x000000000006e190: adc byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000045fe6: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x00000000000df4d4: adc byte ptr [rax], al; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000000e51f5: adc byte ptr [rax], al; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000dd14d: adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e512d: adc byte ptr [rax], al; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e4ffd: adc byte ptr [rax], al; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e2b59: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000dd135: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2cd: adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000002f596: adc byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000052a01: adc byte ptr [rax], al; ret; 
0x0000000000055038: adc byte ptr [rax], bh; jne 0x55043; push r10; ret; 
0x0000000000055541: adc byte ptr [rax], bh; jne 0x5554c; push r10; ret; 
0x00000000000bb0dd: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb0ff: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb13d: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb1bf: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb2c1: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x0000000000062848: adc byte ptr [rax], dl; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000a072f: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x000000000009f20f: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f0df: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a078f: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x000000000009f7bf: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f6ef: adc byte ptr [rbp + 0x16], dh; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000001025d7: adc byte ptr [rbp + 0x31], al; leave; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000000a478b: adc byte ptr [rbp + 0x39], cl; fiadd dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x000000000012b9ae: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000112b64: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000002ff0a: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000014145b: adc byte ptr [rbp + 0x5b0875c0], al; pop rbp; pop r12; ret; 
0x000000000005b39a: adc byte ptr [rbp - 0xd], dh; cmp rax, rdi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x0000000000090fef: adc byte ptr [rbx + 0x15d7c92d], al; add byte ptr [rcx], al; ret; 
0x0000000000062568: adc byte ptr [rbx + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000192e0f: adc byte ptr [rbx + 0x463bfc47], cl; cld; jne 0x192e20; xor eax, eax; ret; 
0x000000000004757a: adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000df61c: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000000ef191: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r15; ret; 
0x0000000000081127: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000011a778: adc byte ptr [rbx + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000b7077: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7086; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7d67: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7d76; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b8747: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb8756; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95b7: adc byte ptr [rbx + 0xff3174e], cl; jg 0xb95c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000ba387: adc byte ptr [rbx + 0xff3174e], cl; jg 0xba396; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bae77: adc byte ptr [rbx + 0xff3174e], cl; jg 0xbae86; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7097: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb70a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7d87: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb7d96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b8767: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb8776; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95d7: adc byte ptr [rbx + 0xff3184e], cl; jg 0xb95e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000ba3a7: adc byte ptr [rbx + 0xff3184e], cl; jg 0xba3b6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bae97: adc byte ptr [rbx + 0xff3184e], cl; jg 0xbaea6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000111f5e: adc byte ptr [rbx + r9*4 + 0x63], r9b; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000111f5f: adc byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000009359a: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000008774e: adc byte ptr [rbx - 0x3b7cb7ff], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000013c45e: adc byte ptr [rbx - 0x73], al; add dword ptr [rdx], r8d; pop rbx; ret; 
0x000000000005fcfa: adc byte ptr [rcx + 0x39], cl; ret; 
0x0000000000144be2: adc byte ptr [rcx + 0x5c], al; ret; 
0x00000000000c8563: adc byte ptr [rcx + rcx*4 + 0x45], cl; mov eax, 0xfd83949; xchg ebx, eax; ret; 
0x000000000003f403: adc byte ptr [rcx + rcx*4 + 4], cl; and al, 0xe8; ret; 
0x000000000009d4e5: adc byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x0000000000044154: adc byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000002ff32: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x00000000000812db: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000001525a8: adc byte ptr [rcx + rcx*4 - 0x40], al; pop r12; ret; 
0x000000000015cdf5: adc byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; ret; 
0x0000000000046d2f: adc byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000995a2: adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x000000000009ce47: adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000993ab: adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x00000000000bb242: adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb222: adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x0000000000122e5b: adc byte ptr [rcx - 0x2d], al; call 0x1f2b1a4; mov eax, r8d; ret; 
0x000000000012381d: adc byte ptr [rcx - 0x2d], al; call 0x1f2bb66; mov eax, r8d; ret; 
0x0000000000047c9e: adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x0000000000157f57: adc byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x0000000000121ebb: adc byte ptr [rcx - 0x77], cl; add byte ptr [rax - 0x39], cl; add eax, 0xca496; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e3b: adc byte ptr [rcx - 0x77], cl; add byte ptr [rax - 0x39], cl; add eax, 0xca516; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000015a63c: adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000b7b21: adc byte ptr [rcx - 0x7d], cl; call 0x7f98c349; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x00000000000b4219: adc byte ptr [rcx - 0x7d], cl; call 0xffffffffa7915131; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000053c2f: adc byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000160b81: adc byte ptr [rcx], al; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x0000000000152890: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120015: adc byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120024; ret; 
0x0000000000157bbf: adc byte ptr [rcx], al; imul ebp, dword ptr [rax], 0x5b; pop rbp; pop r12; ret; 
0x0000000000183aa7: adc byte ptr [rcx], ch; cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x00000000000dd649: adc byte ptr [rdi - 0x34], bh; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000002e044: adc byte ptr [rdi], al; add byte ptr [rax], al; add cl, ch; ret; 
0x000000000010c520: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd1: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbcb7: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000a8aa5: adc byte ptr [rdi], cl; mov bh, 0x54; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000341c9: adc byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x000000000012fd5a: adc byte ptr [rdi], cl; mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000136557: adc byte ptr [rdi], cl; mov bh, 0xf6; push 2; call 0x135ad0; add rsp, 0x18; ret; 
0x00000000000a8a8d: adc byte ptr [rdi], cl; mov dh, 0x54; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a6f: adc byte ptr [rdi], cl; mov dh, 0x54; and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x000000000008dfdc: adc byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x00000000001785d8: adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000121e62: adc byte ptr [rdx + 0x13], dh; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x000000000008d30b: adc byte ptr [rdx + 0x32], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d76b: adc byte ptr [rdx + 0x42], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000b7ca6: adc byte ptr [rdx + 0xff31456], cl; jg 0xb7cb5; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7ca5: adc byte ptr [rdx + 0xff31456], r9b; jg 0xb7cb5; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7d27: adc byte ptr [rdx + 0xff3184e], cl; jg 0xb7d36; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b9577: adc byte ptr [rdx + 0xff3184e], cl; jg 0xb9586; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7e28: adc byte ptr [rdx + 0xff3204e], cl; jg 0xb7e37; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9678: adc byte ptr [rdx + 0xff3204e], cl; jg 0xb9687; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000010c9e7: adc byte ptr [rdx + 1], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef7: adc byte ptr [rdx + 2], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000136e97: adc byte ptr [rdx + 2], ch; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f17: adc byte ptr [rdx + 3], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x00000000000529ec: adc byte ptr [rdx + 6], bh; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000122276: adc byte ptr [rdx + 8], dh; seta al; movzx eax, al; neg eax; ret; 
0x00000000001028ae: adc byte ptr [rdx + 8], dh; setne al; movzx eax, al; neg eax; ret; 
0x000000000017cd5c: adc byte ptr [rdx], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000bb4d6: adc byte ptr [rdx], al; jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb586: adc byte ptr [rdx], al; jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x000000000010c9c7: adc byte ptr [rdx], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000018e38b: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000014124c: adc byte ptr [rdx], dl; out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x00000000000bb4d5: adc byte ptr [rdx], r8b; jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb585: adc byte ptr [rdx], r8b; jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x0000000000042080: adc byte ptr [rip + 0x17ac5a], al; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x000000000004205a: adc byte ptr [rip + 0x17ac88], al; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x00000000001974ae: adc byte ptr [rip + 0x25ecc], al; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x0000000000041b77: adc byte ptr [rip - 0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x000000000018e23a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x00000000000ac150: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000005b32b: adc byte ptr [rsi + rdx + 0x48], dh; sub eax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x00000000000bbaef: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbcad: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000018fd8e: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000b7057: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb203: adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bbaec: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000d029e: adc byte ptr [rsp - 0x10], al; ret; 
0x0000000000154ab7: adc ch, al; ret; 
0x000000000014124d: adc ch, dh; dec dword ptr [rax + 0x39]; ret; 
0x000000000011d05a: adc ch, dh; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000014949d: adc cl, byte ptr [rax + 0x29]; int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000a8f29: adc cl, byte ptr [rax + 0x29]; ret; 
0x00000000000bc86f: adc cl, byte ptr [rax + rax]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000009f85d: adc cl, byte ptr [rax - 0x73]; add eax, 0x14f6fb; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000b78f3: adc cl, byte ptr [rax - 0x73]; jg 0xb790a; jne 0xb7f80; ret; 
0x00000000000b9017: adc cl, byte ptr [rax - 0x73]; jg 0xb902e; jne 0xb97d0; ret; 
0x0000000000086265: adc cl, byte ptr [rax - 0x73]; jno 0x8626e; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000003421f: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ef: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000034222: adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f2: adc cl, byte ptr [rax - 0x75]; push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000008a71d: adc cl, byte ptr [rbx + 0x42394c42]; cmovne rax, rcx; ret; 
0x00000000000b3b2f: adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4f: adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6f: adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bf: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b67a0: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39b5: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000bc86e: adc cl, byte ptr ds:[rax + rax]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x0000000000183db9: adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000120fdc: adc dh, byte ptr [rdi + 0xd]; movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000001509eb: adc dword ptr [rax + 0x20], edx; ret; 
0x00000000000874fb: adc dword ptr [rax + 0x30], eax; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001509b8: adc dword ptr [rax + 0x30], eax; ret; 
0x0000000000087cca: adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x000000000008f508: adc dword ptr [rax + 0x48000000], -0x77; call 0x5c4a526f; ret; 
0x000000000009f31a: adc dword ptr [rax + 0xe7402fa], eax; cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x000000000014d290: adc dword ptr [rax + 8], eax; ret; 
0x0000000000094e6e: adc dword ptr [rax - 0x3f], ecx; call 0x5096967a; add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x000000000012ed80: adc dword ptr [rax - 0x73], ecx; adc eax, 0xc2568; call 0xbd470; add rsp, 8; ret; 
0x000000000008df26: adc dword ptr [rax - 0x73], ecx; add qword ptr [rax - 0x77], rcx; sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x00000000000b78ce: adc dword ptr [rax - 0x73], ecx; jg 0xb78e4; jne 0xb7f80; ret; 
0x00000000000b8ff2: adc dword ptr [rax - 0x73], ecx; jg 0xb9008; jne 0xb97d0; ret; 
0x00000000000860be: adc dword ptr [rax - 0x73], ecx; jno 0x860c7; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000003453d: adc dword ptr [rax - 0x75], ecx; pop rax; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000023a4e: adc dword ptr [rax - 0x77], ecx; add eax, 0x1cd8d2; ret; 
0x000000000008d36e: adc dword ptr [rax - 0x77], ecx; out dx, eax; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001190a4: adc dword ptr [rax - 0x7d], ecx; ret; 
0x000000000010c384: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c3f0; ret; 
0x0000000000113858: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113870; ret; 
0x00000000000a421c: adc dword ptr [rax], eax; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000a4442: adc dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret; 
0x00000000000d0135: adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000d0175: adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0155: adc dword ptr [rax], eax; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d1dc0: adc dword ptr [rax], eax; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d41c9: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d0ef5: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ddd: adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d1d1d: adc dword ptr [rax], eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000086ea3: adc dword ptr [rax], eax; ret; 
0x00000000000a066b: adc dword ptr [rax], eax; str word ptr [rax - 0x73]; adc eax, 0xeff9a; cmove rax, rdx; ret; 
0x00000000000d4a89: adc dword ptr [rax], eax; test eax, eax; jne 0xd4aa0; mov rax, r8; add rsp, 8; ret; 
0x00000000000d0055: adc dword ptr [rax], eax; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d4aa5: adc dword ptr [rax], eax; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000010c9cb: adc dword ptr [rax], ecx; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000926bf: adc dword ptr [rbp + 0x38], eax; pop rbp; pop r12; ret; 
0x00000000000bcccd: adc dword ptr [rbp - 0x6b], esi; test edx, edx; jne 0xbccb0; ret; 
0x000000000008e553: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000009e901: adc dword ptr [rbx + 0x18], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e557: adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000001278fc: adc dword ptr [rbx + 0x30], eax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091e5f: adc dword ptr [rbx + 0x38], eax; mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091f06: adc dword ptr [rbx + 0x38], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000919c6: adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000008e54f: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008e656: adc dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000048008: adc dword ptr [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bbddc: adc dword ptr [rbx], eax; ret; 
0x00000000000bbd55: adc dword ptr [rbx], esp; ret; 
0x0000000000184fba: adc dword ptr [rcx + 0x31000002], -0x40; vzeroupper; ret; 
0x000000000013c789: adc dword ptr [rcx + 0x4e2c1f2], ecx; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000019005d: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190064: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000019006b: adc dword ptr [rcx + 7], edi; ret; 
0x00000000000d4a8e: adc dword ptr [rcx + rcx*4 - 0x40], ecx; add rsp, 8; ret; 
0x00000000000bbd47: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4b: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd50: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x000000000018fd06: adc dword ptr [rcx - 1], ebx; ret; 
0x000000000018fcca: adc dword ptr [rcx - 1], edi; ret; 
0x000000000018fcff: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fefd: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcc3: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fef6: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcbc: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018feef: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcb5: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000bbd44: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000018d1d2: adc dword ptr [rcx], edx; adc dword ptr [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018d1d4: adc dword ptr [rcx], edx; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000004745e: adc dword ptr [rcx], esi; ror byte ptr [rax - 0x7b], 0xff; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x000000000010c51e: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdcf: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbcb5: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000015790e: adc dword ptr [rdi + 0x18], eax; ret; 
0x000000000010c522: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd3: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b3d: adc dword ptr [rdi + 0x28], eax; movups xmmword ptr [rdi + 0x38], xmm0; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c526: adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd7: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b41: adc dword ptr [rdi + 0x38], eax; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c52a: adc dword ptr [rdi + 0x40], eax; ret; 
0x0000000000043b45: adc dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000043b49: adc dword ptr [rdi + 0x58], eax; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000092785: adc dword ptr [rdi + 0x58], eax; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000043b4d: adc dword ptr [rdi + 0x68], eax; ret; 
0x000000000010c961: adc dword ptr [rdi + 0x68], esi; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c96a: adc dword ptr [rdi + 0x78], edi; ret; 
0x000000000010d2f3: adc dword ptr [rdi + 0xe8], esi; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d2ff: adc dword ptr [rdi + 0xf8], edi; ret; 
0x000000000018fcf8: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000190405: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000918fc: adc dword ptr [rdi + 8], eax; ret; 
0x00000000000482ee: adc dword ptr [rdi + rdi + 0x48], esi; add edi, eax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000013c844: adc dword ptr [rdi + rdx + 8], eax; ret; 
0x00000000000bbaf7: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x00000000000bbcb9: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbc8c: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc91: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbcbe: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x00000000000bbc96: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc9b: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000001901b8: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901bf: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901c6: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901cd: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000041f59: adc dword ptr [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000004234a: adc dword ptr [rdi], eax; cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000057da5: adc dword ptr [rdi], eax; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000042305: adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x000000000010c51b: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb2: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbaf4: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000043f36: adc dword ptr [rdi], eax; ret; 
0x000000000018fcf2: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001903ff: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190420: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000bbdcc: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000002717f: adc dword ptr [rdx + 0x48], eax; ret; 
0x000000000012924b: adc dword ptr [rdx - 0x76b70011], edx; ret; 
0x00000000001509fc: adc dword ptr [rdx], ebx; ret; 
0x000000000014d2a4: adc dword ptr [rdx], ecx; ret; 
0x00000000001500ec: adc dword ptr [rdx], edx; ret; 
0x00000000001509dc: adc dword ptr [rdx], esp; ret; 
0x00000000001133df: adc dword ptr [rsi + 0x58], eax; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000010c911: adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d266: adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c91a: adc dword ptr [rsi + 0x70], edi; ret; 
0x0000000000184285: adc dword ptr [rsi + 0xf000003], -0x4a; add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000190545: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019054c: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190553: adc dword ptr [rsi + 3], edx; ret; 
0x00000000001905e2: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905e9: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905f0: adc dword ptr [rsi + 7], edx; ret; 
0x0000000000100457: adc dword ptr [rsi + 8], eax; ret; 
0x000000000014854c: adc dword ptr [rsi + 8], ecx; ret; 
0x00000000001903f2: adc dword ptr [rsi - 1], edx; ret; 
0x00000000001903eb: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e4: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903dd: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000047c29: adc dword ptr [rsi], eax; lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014ffee: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000015092e: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014d1b1: adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000479c4: adc dword ptr [rsi], eax; sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000009a0cb: adc dword ptr [rsi], ebx; adc eax, 0x38894800; ret; 
0x000000000019053f: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000008b856: adc dword ptr [rsp + 0xf0], eax; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000911f2: adc eax, 0; add byte ptr [rbx + 0x158901ea], al; ret; 
0x0000000000095205: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951dc: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951bc: adc eax, 0x100; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x000000000009d713: adc eax, 0x100; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x00000000000961d3: adc eax, 0x10894800; ret; 
0x00000000000e2e82: adc eax, 0x108fe9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d62: adc eax, 0x109109; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000118e4a: adc eax, 0x10c48348; lea rax, [rip + 0xd6a3a]; pop rbp; pop r12; pop r13; ret; 
0x00000000000de2ca: adc eax, 0x10dba1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dd132: adc eax, 0x10ed39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000cf34a: adc eax, 0x10ef8348; add rax, rdi; ret; 
0x00000000000bdf8f: adc eax, 0x116fc; cmovne rax, rdx; ret; 
0x00000000000d4aa2: adc eax, 0x117391; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000d1092: adc eax, 0x11add9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ef2: adc eax, 0x11af79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dda: adc eax, 0x11b091; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000009f0ef: adc eax, 0x12e8c; cmovne rax, rdx; ret; 
0x00000000001882d3: adc eax, 0x131e8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009f6ff: adc eax, 0x1449c; cmovne rax, rdx; ret; 
0x0000000000186938: adc eax, 0x14b83; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018691e: adc eax, 0x14b9d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000960b4: adc eax, 0x156ac7; lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x0000000000094e79: adc eax, 0x157452; ret; 
0x00000000000b7954: adc eax, 0x157f8d48; jne 0xb7f80; ret; 
0x00000000000b90a8: adc eax, 0x157f8d48; jne 0xb97d0; ret; 
0x000000000009389a: adc eax, 0x15af21; mov qword ptr [rip + 0x15af22], rbx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x00000000000b90d3: adc eax, 0x16e88349; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x0000000000183a28: adc eax, 0x17a93; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a03: adc eax, 0x17ab8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000062ed2: adc eax, 0x188f99; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e9a: adc eax, 0x188fd1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000015eb49: adc eax, 0x18c48348; pop rbx; pop rbp; ret; 
0x0000000000181a58: adc eax, 0x19a63; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a3e: adc eax, 0x19a7d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000048282: adc eax, 0x1a3be9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000440d1: adc eax, 0x1a80d6; ret; 
0x00000000000434b2: adc eax, 0x1a89b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000043422: adc eax, 0x1a8a49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004754c: adc eax, 0x1a9d9f; call 0xbd470; pop rbx; ret; 
0x00000000000a09fd: adc eax, 0x1b0ce; cmove rax, rdx; ret; 
0x00000000000a068d: adc eax, 0x1b41e; cmove rax, rdx; ret; 
0x00000000000a052d: adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x0000000000034544: adc eax, 0x1b79df; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000a05a4: adc eax, 0x1b9d7; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x0000000000032854: adc eax, 0x1bb2a4; ret; 
0x0000000000023a69: adc eax, 0x1c8422; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x00000000000226b9: adc eax, 0x1ceae2; pop rax; pop rbx; pop rbp; ret; 
0x000000000011f2ca: adc eax, 0x244c8b48; pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000175308: adc eax, 0x261b3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001752e3: adc eax, 0x261d8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009e1f9: adc eax, 0x2740000; ret; 
0x0000000000172d98: adc eax, 0x28723; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d7e: adc eax, 0x2873d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009a0c3: adc eax, 0x30894800; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c9: adc eax, 0x30894800; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x000000000009a0cd: adc eax, 0x38894800; ret; 
0x00000000000cf03a: adc eax, 0x3b30478b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x000000000012dc57: adc eax, 0x3d9b4; cmovne rax, rdx; ret; 
0x000000000012dad7: adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x000000000012db97: adc eax, 0x40584; cmovne rax, rdx; ret; 
0x000000000016df35: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df30: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000012db77: adc eax, 0x480005dd; cmove eax, edx; ret; 
0x00000000000961c7: adc eax, 0x4800155e; mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000bcd53: adc eax, 0x4802e580; lea eax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000a08d5: adc eax, 0x4802e580; lea eax, [rip + 0xe560]; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0835: adc eax, 0x4802e580; lea eax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x000000000009f75c: adc eax, 0x4802e680; lea eax, [rip + 0xaef9]; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x000000000009c1ea: adc eax, 0x48227300; lea eax, [rax - 8]; ret; 
0x000000000009c1e1: adc eax, 0x482b7200; cmp ecx, dword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009552d: adc eax, 0x48a77600; add esp, 8; ret; 
0x000000000009ef1a: adc eax, 0x48c0894c; cmp dword ptr [rdi + 8], esi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x0000000000044581: adc eax, 0x48c48148; add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000121cfa: adc eax, 0x48db6348; mov dword ptr [rip + 0xca65b], ebx; pop rbx; ret; 
0x00000000000986cb: adc eax, 0x4c834a00; xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000004221a: adc eax, 0x4e058b48; pushfq; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000098119: adc eax, 0x51894900; or byte ptr [rax + 0x39], cl; ret; 
0x00000000000960b7: adc eax, 0x58d4800; shr byte ptr [rdx + 0x15], 0; add rsp, 0x10; pop rbp; ret; 
0x0000000000094a54: adc eax, 0x5b050f00; ret; 
0x000000000009563b: adc eax, 0x5be97500; mov rax, r8; pop rbp; pop r12; ret; 
0x00000000000911eb: adc eax, 0x5c74800; mov eax, 0x15d5; add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x0000000000098db0: adc eax, 0x5d050f00; ret; 
0x000000000012dc36: adc eax, 0x5dc35; cmove rax, rdx; ret; 
0x000000000012db76: adc eax, 0x5dd15; cmove rax, rdx; ret; 
0x000000000012dab6: adc eax, 0x5ddd5; cmove rax, rdx; ret; 
0x000000000012dcf9: adc eax, 0x5e022; lea rax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x00000000000b7958: adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x000000000012dc81: adc eax, 0x6297a; cmove rax, rdx; ret; 
0x000000000012dbc1: adc eax, 0x62a5a; cmove rax, rdx; ret; 
0x000000000012db01: adc eax, 0x62b1a; cmove rax, rdx; ret; 
0x000000000012dd41: adc eax, 0x62e6a; cmove rax, rdx; ret; 
0x00000000000cef2a: adc eax, 0x63b078b; jne 0xcf080; ret; 
0x0000000000163657: adc eax, 0x64000888; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f57: adc eax, 0x6400088f; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000009e957: adc eax, 0x640014d5; mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000000043c57: adc eax, 0x64001a82; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000095198: adc eax, 0x6b894100; and al, 0x5d; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000b90ac: adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x00000000001484ba: adc eax, 0x7401f883; push rax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x000000000009e2f3: adc eax, 0x74c08500; push rdi; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f858: adc eax, 0x75c08500; adc cl, byte ptr [rax - 0x73]; add eax, 0x14f6fb; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000001370f4: adc eax, 0x7b687; mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000162ed2: adc eax, 0x88f99; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000162e72: adc eax, 0x88ff9; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000000160ceb: adc eax, 0x9066ffef; mov rax, qword ptr [rip + 0x8b179]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015339d: adc eax, 0x9da9e; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012e9e2: adc eax, 0xbd489; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000099615: adc eax, 0xc0314500; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000098095: adc eax, 0xc0314500; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000bc86d: adc eax, 0xc123e; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000012ed83: adc eax, 0xc2568; call 0xbd470; add rsp, 8; ret; 
0x000000000009f19f: adc eax, 0xc44fc; cmovne rax, rdx; ret; 
0x0000000000042a0c: adc eax, 0xc4834800; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000042754: adc eax, 0xc4834800; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009f769: adc eax, 0xc51a2; cmovne rax, rdx; ret; 
0x000000000012146a: adc eax, 0xcaa01; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121432: adc eax, 0xcaa39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213fa: adc eax, 0xcaa71; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213ca: adc eax, 0xcaaa1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121392: adc eax, 0xcaad9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001212ba: adc eax, 0xcabb1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012124a: adc eax, 0xcac21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121202: adc eax, 0xcac69; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000a09b7: adc eax, 0xcac84; cmovne rax, rdx; ret; 
0x0000000000121142: adc eax, 0xcad29; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a0647: adc eax, 0xcafd4; cmovne rax, rdx; ret; 
0x0000000000120e2a: adc eax, 0xcb041; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120d72: adc eax, 0xcb0f9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012092a: adc eax, 0xcb541; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120862: adc eax, 0xcb609; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001207c2: adc eax, 0xcb6a9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120702: adc eax, 0xcb769; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120662: adc eax, 0xcb809; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001205a2: adc eax, 0xcb8c9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120422: adc eax, 0xcba49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120352: adc eax, 0xcbb19; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa62: adc eax, 0xcc409; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9d0: adc eax, 0xcc49b; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x000000000011f982: adc eax, 0xcc4e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8da: adc eax, 0xcc591; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f812: adc eax, 0xcc659; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f762: adc eax, 0xcc709; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6b2: adc eax, 0xcc7b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f522: adc eax, 0xcc949; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f3ca: adc eax, 0xccaa1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121f20: adc eax, 0xcdb33; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000a04e7: adc eax, 0xcdc44; cmovne rax, rdx; ret; 
0x00000000000bcd0b: adc eax, 0xcf500; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x000000000011c6f2: adc eax, 0xcf779; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bc84b: adc eax, 0xcfc90; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9fb: adc eax, 0xcff30; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a0892: adc eax, 0xd03d9; cmovne rax, rdx; ret; 
0x00000000000a07f2: adc eax, 0xd0459; cmovne rax, rdx; ret; 
0x00000000000bcaeb: adc eax, 0xd05a0; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc80b: adc eax, 0xd0650; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc95b: adc eax, 0xd0920; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a08e2: adc eax, 0xd24e9; cmovne rax, rdx; ret; 
0x00000000000a0842: adc eax, 0xd2569; cmovne rax, rdx; ret; 
0x0000000000118c62: adc eax, 0xd3209; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116f2a: adc eax, 0xd4f41; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116efa: adc eax, 0xd4f71; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ec2: adc eax, 0xd4fa9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cda: adc eax, 0xd5191; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bcd60: adc eax, 0xd5abb; cmovne rax, rdx; ret; 
0x000000000009f21f: adc eax, 0xd60fc; cmovne rax, rdx; ret; 
0x0000000000115552: adc eax, 0xd6919; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001154d2: adc eax, 0xd6999; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115412: adc eax, 0xd6a59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115212: adc eax, 0xd6c59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000009f7cf: adc eax, 0xd72fc; cmovne rax, rdx; ret; 
0x000000000011487a: adc eax, 0xd75f1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001147ba: adc eax, 0xd76b1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114702: adc eax, 0xd7769; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114662: adc eax, 0xd7809; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144b5: adc eax, 0xd7a0e; mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x00000000001143e2: adc eax, 0xd7a89; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113fe2: adc eax, 0xd7e89; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113fa2: adc eax, 0xd7ec9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dda: adc eax, 0xd8091; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001138aa: adc eax, 0xd85c1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113872: adc eax, 0xd85f9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011383a: adc eax, 0xd8631; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011357a: adc eax, 0xd88f1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113532: adc eax, 0xd8939; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113482: adc eax, 0xd89e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113322: adc eax, 0xd8b49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001132e2: adc eax, 0xd8b89; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011328a: adc eax, 0xd8be1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000006174d: adc eax, 0xd8d4800; ret; 
0x00000000000a073f: adc eax, 0xd8f0c; cmovne rax, rdx; ret; 
0x0000000000112be2: adc eax, 0xd9289; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a079f: adc eax, 0xda6bc; cmovne rax, rdx; ret; 
0x00000000000a8bdb: adc eax, 0xdbfa0; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x000000000010ec02: adc eax, 0xdd269; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ea82: adc eax, 0xdd3e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e36a: adc eax, 0xddb01; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e33a: adc eax, 0xddb31; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e2f2: adc eax, 0xddb79; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e252: adc eax, 0xddc19; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010de2a: adc eax, 0xde041; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010dbf2: adc eax, 0xde279; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db92: adc eax, 0xde2d9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db32: adc eax, 0xde339; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7aa: adc eax, 0xde6c1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d74a: adc eax, 0xde721; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6ea: adc eax, 0xde781; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c4a2: adc eax, 0xdf9c9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c3f2: adc eax, 0xdfa79; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cfaca: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000000a1c7b: adc eax, 0xe2db0; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x000000000009faed: adc eax, 0xe41ce; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82d: adc eax, 0xe434e; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x00000000000a03fb: adc eax, 0xe4360; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x000000000009f23d: adc eax, 0xe47fe; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a1cbb: adc eax, 0xe6880; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f80b: adc eax, 0xe8f20; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f65b: adc eax, 0xe92a0; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f69b: adc eax, 0xe9400; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x0000000000102882: adc eax, 0xe95e9; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102822: adc eax, 0xe9649; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000b1468: adc eax, 0xea053; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1443: adc eax, 0xea078; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a0996: adc eax, 0xeaf05; cmove rax, rdx; ret; 
0x00000000000a0626: adc eax, 0xeb255; cmove rax, rdx; ret; 
0x00000000000a04c6: adc eax, 0xeb3d5; cmove rax, rdx; ret; 
0x00000000000a0589: adc eax, 0xeb7a2; lea rax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x00000000000aee08: adc eax, 0xec6b3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aedee: adc eax, 0xec6cd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a09e1: adc eax, 0xefc4a; cmove rax, rdx; ret; 
0x00000000000a0671: adc eax, 0xeff9a; cmove rax, rdx; ret; 
0x00000000000a0511: adc eax, 0xf011a; cmove rax, rdx; ret; 
0x00000000000a05d1: adc eax, 0xf05ea; cmove rax, rdx; ret; 
0x00000000000a0450: adc eax, 0xf0c5b; cmovne rax, rdx; ret; 
0x000000000009f142: adc eax, 0xf1c49; cmovne rax, rdx; ret; 
0x0000000000120057: adc eax, 0xf7000cbe; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd57: adc eax, 0xf7000cc1; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011f557: adc eax, 0xf7000cc9; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115857: adc eax, 0xf7000d66; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115457: adc eax, 0xf7000d6a; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb57: adc eax, 0xf7000dd3; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000102757: adc eax, 0xf7000e97; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b57: adc eax, 0xf7001093; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000bc048: adc eax, 0xf880272; ret; 
0x000000000012dc9d: adc eax, 0xfff8ddfe; cmove rax, rdx; ret; 
0x000000000012dbdd: adc eax, 0xfff8dede; cmove rax, rdx; ret; 
0x000000000012db1d: adc eax, 0xfff8df9e; cmove rax, rdx; ret; 
0x000000000012dd14: adc eax, 0xfff8e257; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000012d22f: adc eax, 0xfffffefc; test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x00000000000d0fba: adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0e9a: adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000010d46d: adc eax, 0xffffff8e; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000bc043: adc eax, dword ptr [rax + 0x157701fa]; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000639ce: adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000090085: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000114601: adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114660; ret; 
0x00000000000e4fb9: adc eax, dword ptr [rax]; add byte ptr [rdi + rcx*4 + 0x49], dh; cmp eax, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e4fe7: adc eax, dword ptr [rax]; add byte ptr [rdx + 0x7f], bh; cmovne rax, rdx; ret; 
0x000000000002fdd4: adc eax, dword ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000095178: adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000000422fc: adc eax, dword ptr [rcx + 0xe6]; xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x000000000011f854: adc eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f8d8; ret; 
0x00000000000b3aab: adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3acb: adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3aeb: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b0b: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3968: adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x00000000000b39ba: adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bb: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b673c: adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000055a7d: adc eax, eax; ret; 
0x0000000000113520: adc eax, edi; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x0000000000113471: adc eax, edi; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x0000000000055bb6: adc eax, edx; pop rbp; pop rbx; ret; 
0x000000000010de5b: adc eax, esp; or eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000085941: adc ebp, ebx; retf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000048b4f: adc ecx, dword ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x0000000000121e64: adc ecx, dword ptr [rax - 0x39]; add eax, 0xca4f0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000b7911: adc ecx, dword ptr [rax - 0x73]; jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b9045: adc ecx, dword ptr [rax - 0x73]; jg 0xb905d; jne 0xb97d0; ret; 
0x000000000012fc6c: adc ecx, dword ptr [rax - 0x77]; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000010dd53: adc ecx, dword ptr [rax - 0x7d]; in al, dx; sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x00000000000469b1: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000002f254: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000006bba2: adc ecx, dword ptr [rcx + 0x415d5b28]; pop rsp; ret; 
0x00000000000ffc3c: adc ecx, dword ptr [rcx + 0x6c0f66d0]; ret; 
0x00000000000b9071: adc ecx, dword ptr [rcx - 0x7d]; call 0x7f98d88d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b3b34: adc ecx, dword ptr [rdx + 5]; mov rax, rdi; ret; 
0x00000000000b3b54: adc ecx, dword ptr [rdx + 6]; mov rax, rdi; ret; 
0x00000000000b3b74: adc ecx, dword ptr [rdx + 7]; mov rax, rdi; ret; 
0x00000000000b39be: adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b67a5: adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x000000000013bb2f: adc edi, dword ptr [rax - 1]; ret; 
0x0000000000113274: adc edi, eax; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x0000000000056aea: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000055a75: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000141268: adc esi, ebp; dec dword ptr [rax + 0x39]; ret; 
0x00000000000a444e: adc qword ptr [rax], rax; add byte ptr [rcx - 9], al; ret; 
0x000000000019005c: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190063: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000019006a: adc qword ptr [rcx + 7], rdi; ret; 
0x000000000018fd05: adc qword ptr [rcx - 1], rbx; ret; 
0x000000000018fcc9: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000018fcfe: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fefc: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcc2: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fef5: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcbb: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018feee: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcb4: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcf7: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000190404: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901b7: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901be: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901c5: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901cc: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000018fcf1: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001903fe: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019041f: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190544: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019054b: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190552: adc qword ptr [rsi + 3], rdx; ret; 
0x00000000001905e1: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905e8: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905ef: adc qword ptr [rsi + 7], rdx; ret; 
0x00000000001903f1: adc qword ptr [rsi - 1], rdx; ret; 
0x00000000001903ea: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e3: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903dc: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019053e: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000055a74: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000008d7a2: adc r11b, r13b; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000014ffe6: adc r11b, r14b; movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150926: adc r11b, r14b; movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bbfc9: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b9070: adc r9d, dword ptr [r9 - 0x7d]; call 0x7f98d88d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x0000000000098118: adc rax, 0x51894900; or byte ptr [rax + 0x39], cl; ret; 
0x0000000000099fab: adc rax, 0x5b050f00; ret; 
0x0000000000055bb5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000056ae9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000bc132: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000bc117: add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000000bc217: add ah, bh; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000bc162: add ah, bh; inc dword ptr [rbx]; ret; 
0x00000000001909e4: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x1909ef; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190b6e: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x190b79; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019054e: add ah, byte ptr [rdx - 0xf]; jl 0x19059b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000000b3b2c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bc: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b39bb: add ah, byte ptr [rsi + 0xf]; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x000000000017ad53: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a48: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000000b39e4: add ah, byte ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000b3acc: add ah, byte ptr [rsi - 0x75]; or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000baf65: add ah, byte ptr [rsi - 0x77]; js 0xffffffffed3bb1c5; mov byte ptr [rdi + 3], ch; ret; 
0x00000000001221cb: add ah, byte ptr [rsi - 0x7d]; clc; push qword ptr [rsi + rbp - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000125f6b: add al, 0; add al, ch; popfq; ret; 
0x00000000000ef964: add al, 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014d333: add al, 0; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000cfb53: add al, 0; add byte ptr [rax], al; ret; 
0x000000000010d6d4: add al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x00000000000623e6: add al, 0; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000ef95b: add al, 0; add byte ptr [rbx - 0x7bf0fd02], al; mov dword ptr [rax + rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ecafb: add al, 0; add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 + 0x63], r9b; ret; 
0x000000000013e586: add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x000000000013f975: add al, 0; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000094e4a: add al, 0; add byte ptr [rsi + 1], dh; ret; 
0x000000000005d107: add al, 0; add dh, dh; ret; 
0x0000000000094189: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000012db9a: add al, 0; cmovne rax, rdx; ret; 
0x0000000000048272: add al, 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000014b0b4: add al, 0x10; mov byte ptr [rdi + 7], al; ret; 
0x00000000000529eb: add al, 0x10; mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000123499: add al, 0x10; shr eax, cl; and eax, 1; ret; 
0x0000000000122e5a: add al, 0x10; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x000000000012358a: add al, 0x11; ret; 
0x00000000000bc1b4: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000bc738: add al, 0x16; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000001882cf: add al, 0x17; lea rdx, [rip + 0x131e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018691a: add al, 0x17; lea rdx, [rip + 0x14b9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001839ff: add al, 0x17; lea rdx, [rip + 0x17ab8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a3a: add al, 0x17; lea rdx, [rip + 0x19a7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001752df: add al, 0x17; lea rdx, [rip + 0x261d8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d7a: add al, 0x17; lea rdx, [rip + 0x2873d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b143f: add al, 0x17; lea rdx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aedea: add al, 0x17; lea rdx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a13eb: add al, 0x17; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000aa3f5: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183e2c: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa38a: add al, 0x17; sub eax, ecx; ret; 
0x000000000018ae6e: add al, 0x17; vzeroupper; ret; 
0x0000000000152e18: add al, 0x1c; add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000102a39: add al, 0x21; int1; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x000000000003007e: add al, 0x24; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001158ed: add al, 0x24; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x00000000000429f3: add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010ebf7: add al, 0x24; add rsp, 0x18; ret; 
0x0000000000120591: add al, 0x24; add rsp, 0x20; pop rbp; ret; 
0x000000000010c3e5: add al, 0x24; add rsp, 0x28; ret; 
0x0000000000120657: add al, 0x24; add rsp, 0x30; pop rbp; ret; 
0x0000000000196f01: add al, 0x24; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122b38: add al, 0x24; add rsp, 0x38; ret; 
0x0000000000122b99: add al, 0x24; add rsp, 0x40; ret; 
0x000000000004288d: add al, 0x24; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000196b75: add al, 0x24; call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010ebef: add al, 0x24; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010c3dc: add al, 0x24; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000012064e: add al, 0x24; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x000000000014e785: add al, 0x24; jne 0x14e7ea; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001414ee: add al, 0x24; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000013caa4: add al, 0x24; mov rdx, qword ptr [rsp + 8]; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x000000000012552b: add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094c47: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000102869: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000002440e: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001184b2: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1184c2; add rsp, 0xd8; ret; 
0x000000000011858b: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11859b; add rsp, 0xd8; ret; 
0x000000000011bf47: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c007: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e5: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c44e: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6bb: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x0000000000129d69: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012ba92: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12baa2; add rsp, 0xd8; ret; 
0x0000000000153c75: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce5: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d55: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db6: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e1a: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e85: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f08: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000015443d: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155eb0: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000042b8f: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db7: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e04: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578bc: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57945; leave; ret; 
0x000000000008dbd2: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a45: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000013c615: add al, 0x2b; pop rbx; pop rbp; ret; 
0x000000000005f367: add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x00000000000baf99: add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafab: add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b1abe: add al, 0x31; ret; 
0x00000000000d4242: add al, 0x31; rol byte ptr [rcx - 0x5c28f401], 0; setb al; add eax, 0x16d; ret; 
0x00000000000b19ba: add al, 0x37; ret; 
0x0000000000184459: add al, 0x38; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x00000000000bdfb6: add al, 0x39; bnd je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x000000000009696c: add al, 0x39; ret; 
0x00000000000a87b0: add al, 0x39; sal byte ptr [rbp - 0x15], 1; mov rax, r8; ret; 
0x0000000000087def: add al, 0x3a; ret; 
0x00000000000cef42: add al, 0x3b; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000c6a9e: add al, 0x44; mov eax, eax; ret; 
0x00000000000cf15b: add al, 0x44; mov eax, ecx; ret; 
0x00000000000bcc31: add al, 0x48; add eax, 4; test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x000000000011f4cc: add al, 0x48; add esp, 0x20; pop rbp; ret; 
0x0000000000120e1f: add al, 0x48; add esp, 0x28; ret; 
0x000000000010c5f5: add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000005b331: add al, 0x48; cmp edi, eax; jbe 0x5b32a; mov rax, r10; ret; 
0x00000000000b84fb: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000000b8e4b: add al, 0x48; lea eax, [rdi + 5]; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b934b: add al, 0x48; lea eax, [rdi + 6]; ret; 
0x00000000000a8b6d: add al, 0x48; lea eax, [rdi + rdx - 1]; ret; 
0x000000000017ad49: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x000000000017ad5b: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000017882a: add al, 0x48; lea ecx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017cbdb: add al, 0x48; lea ecx, [rdx + 4]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a6e7: add al, 0x48; lea edi, [rdi + 4]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b41b: add al, 0x48; lea edi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b7727: add al, 0x48; lea edi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e0b: add al, 0x48; lea edi, [rdi + 4]; jne 0xb97d0; ret; 
0x0000000000094e72: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x000000000008558c: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000016dc4a: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000000860c2: add al, 0x48; mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x0000000000116fcf: add al, 0x48; mov dword ptr [rdx + 8], eax; test rax, rax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x00000000000b3a2e: add al, 0x48; mov eax, edi; ret; 
0x0000000000178849: add al, 0x48; mov eax, edi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017886b: add al, 0x48; mov eax, edi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000016dc43: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b1d68: add al, 0x48; xor eax, eax; ret; 
0x000000000014a81a: add al, 0x48; xor eax, edx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000b8e2a: add al, 0x49; sub eax, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b776b: add al, 0x49; sub eax, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bce03: add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x000000000013c985: add al, 0x4c; lea eax, [rdi + rsi + 8]; mov rax, r8; ret; 
0x000000000012d0d8: add al, 0x50; shr ax, 0xe; and eax, 1; ret; 
0x000000000010c68f: add al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000010c71d: add al, 0x5b; pop rbp; pop r12; ret; 
0x000000000017ad57: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a4c: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000002f252: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x000000000018fd7b: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000c6b41: add al, 0x72; pushfq; mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x00000000000bc041: add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x000000000010d348: add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x000000000013bf0c: add al, 0x74; sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000ec4a2: add al, 0x74; xchg edi, eax; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000041237: add al, 0x75; out 0x45, al; mov ebx, dword ptr [rax + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000047866: add al, 0x75; push rcx; add rsp, 0x18; ret; 
0x000000000014e38a: add al, 0x75; ret; 
0x00000000000341c4: add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a4: add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034184: add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034104: add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034144: add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a4: add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034124: add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e4: add al, 0x78; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000034244: add al, 0x78; and eax, 1; ret; 
0x00000000000340c4: add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000034164: add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x0000000000034084: add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x00000000000bc79c: add al, 0x80; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000bc742: add al, 0x81; je 0xbc728; ret; 
0x000000000018013b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000047c2d: add al, 0x81; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000bc73e: add al, 0x81; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x0000000000181a13: add al, 0x81; sub eax, edx; ret; 
0x0000000000122c08: add al, 0x82; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000aedf7: add al, 0x82; sub eax, ecx; ret; 
0x000000000005f4ac: add al, 0x83; ret; 
0x00000000000bcc35: add al, 0x85; sal byte ptr [rbp - 0x12], cl; xor eax, eax; ret; 
0x000000000012efeb: add al, 0x85; sal byte ptr [rbp - 0x57], 0x48; mov eax, edi; ret; 
0x00000000000bdfba: add al, 0x85; sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000123496: add al, 0x86; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000017ad46: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000000b3a2b: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000bc7a0: add al, 0x88; je 0xbc780; ret; 
0x00000000000b7744: add al, 0x89; cmovns eax, dword ptr [rbx - 0x72b7fa18]; jg 0xb7754; jne 0xb7f80; ret; 
0x00000000000b8e24: add al, 0x89; cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f98d637; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000baf94: add al, 0x89; js 0xffffffffed3bb3f3; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafa5: add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000001577f7: add al, 0x89; push rax; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000b3a14: add al, 0x8b; add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000014d278: add al, 0x8f; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000bce3a: add al, 0x98; pop rbx; pop rbp; pop r12; ret; 
0x0000000000121f13: add al, 0xa; cmp rax, qword ptr [rip + 0xcdb34]; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000123332: add al, 0xa; ret; 
0x0000000000157b27: add al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000003445c: add al, 0xb8; ret; 
0x000000000005f364: add al, 0xc7; add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000055849: add al, 0xc8; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000005584d: add al, 0xc9; xor eax, eax; ret; 
0x00000000000dd75c: add al, 0xd0; ret; 
0x000000000005b92e: add al, 0xd1; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000160cbb: add al, 0xd7; xor eax, eax; ret; 
0x0000000000120e16: add al, 0xe8; and al, 0x38; idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x000000000010c7fe: add al, 0xeb; ret; 
0x000000000016dfb3: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000000340a9: add al, 0xf; mov bh, 0xc0; ret; 
0x00000000000a8b9e: add al, 0xf; mov dh, 0x44; and al, 0xe; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8a01: add al, 0xf; mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8abe: add al, 0xf; mov dh, 0x54; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x000000000017e24d: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000185006: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000001577b4: add al, 0xf; retf 0x1689; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157774: add al, 0xf; retf 0x5089; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000cef45: add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x000000000017cbdf: add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000b772b: add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x0000000000081ec0: add al, 0xfa; inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000014d323: add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000013beee: add al, 1; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000cef78: add al, 1; add byte ptr [rax], al; ret; 
0x000000000010f618: add al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f627; ret; 
0x0000000000062fbb: add al, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec468: add al, 1; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000de23d: add al, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000063032: add al, 1; xor eax, eax; ret; 
0x0000000000033dfd: add al, 2; mov eax, r8d; ret; 
0x000000000014955e: add al, 2; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000033d9b: add al, 2; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x000000000017cc68: add al, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018ea97: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7878: add al, 7; add byte ptr [rax], al; ret; 
0x00000000000b14d1: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018cede: add al, 7; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018838e: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b16fc: add al, 7; ret; 
0x0000000000055c39: add al, 7; sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x000000000018b524: add al, 7; vzeroupper; ret; 
0x000000000008cd57: add al, 8; add byte ptr [rax], al; ret; 
0x0000000000122c0b: add al, 8; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000aa55f: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183fa9: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000ff3b1: add al, 9; ret; 
0x000000000012fd17: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fda5: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000bc201: add al, bh; jg 0xbc1fc; int1; mov eax, eax; ret; 
0x000000000011985f: add al, bl; retf 0xed83; add ecx, ebx; ret; 
0x000000000012b21b: add al, byte ptr [rax]; add al, ch; std; xchg edi, eax; lock dec dword ptr [rax - 0x7d]; ret; 
0x00000000000a5dc2: add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000f089c: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000abf42: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000116975: add al, byte ptr [rax]; add byte ptr [rax - 0x3d7cb7fe], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001193ef: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xd64c7; add rsp, 0x18; ret; 
0x0000000000118ea7: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xd69bf; add rsp, 8; ret; 
0x000000000010faba: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001906f8: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000194f91: add al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000017cc9b: add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000006e3e3: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000057b3c: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000057d4f: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000141603: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001414d1: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x000000000011d7f5: add al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000102a85: add al, byte ptr [rax]; add byte ptr [rax], al; cmove eax, edx; ret; 
0x0000000000057d55: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000013c38d: add al, byte ptr [rax]; add byte ptr [rax], al; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000148431: add al, byte ptr [rax]; add byte ptr [rax], al; test eax, eax; je 0x148440; xor eax, eax; ret; 
0x000000000011d23a: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000012b89d: add al, byte ptr [rax]; add byte ptr [rbp + 0x2e], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086bab: add al, byte ptr [rax]; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000009a496: add al, byte ptr [rax]; add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x0000000000099bd1: add al, byte ptr [rax]; add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000018f9ae: add al, byte ptr [rax]; add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18fbe6; xor eax, eax; ret; 
0x0000000000044586: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000f0b02: add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x00000000001259a4: add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; pop r13; ret; 
0x00000000000a4435: add al, byte ptr [rax]; add byte ptr [rcx - 9], al; ret; 
0x0000000000144720: add al, byte ptr [rax]; add byte ptr [rdi], cl; mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x00000000000d683a: add al, byte ptr [rax]; add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000001974b2: add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000018ae38: add al, byte ptr [rax]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000172d81: add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000011ce68: add al, byte ptr [rax]; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x000000000010dd6a: add al, byte ptr [rax]; nop dword ptr [rax]; endbr64; mov eax, 0x5f; syscall; ret; 
0x0000000000134d6b: add al, byte ptr [rax]; pop r12; pop r13; ret; 
0x000000000013c7ff: add al, byte ptr [rax]; ret; 
0x00000000001893a8: add al, byte ptr [rax]; vzeroupper; ret; 
0x0000000000033d9c: add al, byte ptr [rbp + 0x440775c0]; mov eax, eax; ret; 
0x000000000013c747: add al, byte ptr [rbp - 0x77]; sbb byte ptr [rbx + 0x49], bl; mov dword ptr [rcx], ecx; ret; 
0x000000000013c457: add al, byte ptr [rbp - 0x78]; dec dword ptr [rcx + r9*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000012977d: add al, byte ptr [rbx + 0x194501f9]; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x0000000000062f29: add al, byte ptr [rbx + 0x277426f8]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000011f9d7: add al, byte ptr [rbx + 0x377426f8]; mov eax, r8d; ret; 
0x000000000012218b: add al, byte ptr [rbx + 0x6f74fff8]; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x000000000015013a: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d35a: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000013a996: add al, byte ptr [rbx - 0x79f0f008]; clc; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000945f2: add al, byte ptr [rcx + 0x39]; ret; 
0x0000000000102831: add al, byte ptr [rcx + rcx*4 - 0x38]; ret; 
0x0000000000033dfe: add al, byte ptr [rcx + rcx*4 - 0x40]; ret; 
0x00000000000d4234: add al, byte ptr [rcx - 0x70a3d706]; add dh, byte ptr [rsi + 3]; ret; 
0x000000000006fd9d: add al, byte ptr [rcx - 9]; ret; 
0x000000000013bf18: add al, byte ptr [rcx]; add byte ptr [rax], al; cmovne eax, edx; ret; 
0x000000000010dea5: add al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10deb4; ret; 
0x00000000000d13bf: add al, byte ptr [rcx]; ret; 
0x0000000000119294: add al, byte ptr [rcx]; sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000cfac6: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0xcfaf0; ret; 
0x0000000000057c33: add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000000b797a: add al, byte ptr [rsi]; add byte ptr [rax], al; ret; 
0x000000000010c9c9: add al, ch; adc dword ptr [rax], ecx; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000198e05: add al, ch; and eax, 0x5bffe895; mov qword ptr [rip + 0x56319], 0; ret; 
0x000000000013f7d1: add al, ch; cdq; sti; cmc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000f4cff: add al, ch; fdiv st(2); dec dword ptr [rax - 0x77]; ret; 
0x000000000011651e: add al, ch; in al, dx; ret; 
0x000000000004134b: add al, ch; iretd; ret; 
0x0000000000113d47: add al, ch; jae 0x113d53; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000f57d6: add al, ch; je 0xf57a7; dec dword ptr [rax - 0x77]; ret; 
0x0000000000116362: add al, ch; js 0x116326; lock dec dword ptr [rax + 1]; ret; 
0x00000000000f9754: add al, ch; mov dh, 0x8b; dec dword ptr [rax - 0x77]; ret; 
0x0000000000199071: add al, ch; mov ecx, 0x48ffe892; mov dword ptr [rip + 0x5799e], 0; pop rbx; ret; 
0x0000000000198e6c: add al, ch; mov esi, 0x48ffe894; mov dword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x000000000002c9ff: add al, ch; mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000008e58a: add al, ch; movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000000e2fc9: add al, ch; movabs eax, dword ptr [0x415de88944fffb1a]; pop rsp; pop r13; ret; 
0x00000000001385e6: add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; mov edx, 0x89480000; ret; 
0x000000000010499d: add al, ch; pop rbp; ret; 
0x0000000000045fee: add al, ch; pop rsp; ret; 
0x0000000000125f6d: add al, ch; popfq; ret; 
0x000000000012a4ca: add al, ch; push rax; fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000012a9ca: add al, ch; push rax; sar edi, cl; dec dword ptr [rcx]; ret; 
0x0000000000024a67: add al, ch; ret; 
0x000000000011631a: add al, ch; rol al, 0xf0; dec dword ptr [rax + 1]; ret; 
0x000000000013fc0d: add al, ch; std; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000012b21d: add al, ch; std; xchg edi, eax; lock dec dword ptr [rax - 0x7d]; ret; 
0x0000000000091f2f: add al, ch; sub edi, dword ptr [rdi + rdi*8 + 0x6693ebff]; nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000118ea4: add al, ch; test byte ptr [rdx], 0; add byte ptr [rax - 0x73], cl; add eax, 0xd69bf; add rsp, 8; ret; 
0x000000000010a593: add al, ch; xlatb; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000162366: add al, ch; xor al, 0x3b; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e7666: add al, ch; xor al, 0xe8; cmc; dec dword ptr [rax - 0x77]; ret; 
0x00000000001163aa: add al, ch; xor al, al; lock dec dword ptr [rax + 1]; ret; 
0x000000000002c95c: add al, ch; xor edx, dword ptr cs:[rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000002c957: add al, ch; xor esi, dword ptr [rsi]; add al, ch; xor edx, dword ptr cs:[rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000057c31: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x00000000000469af: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000195523: add bh, bh; dec dword ptr [rcx + 0x21]; ret; 
0x00000000000425f2: add bh, bh; jg 0x4263e; sub eax, edx; shr rax, 0x3f; ret; 
0x000000000010c98c: add bh, bh; jne 0x10c995; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000014d1e0: add bh, bh; loope 0x14d24a; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x00000000000ce098: add bh, bh; ret; 
0x00000000001465a3: add bh, bh; ror byte ptr [rax - 0x73], 1; add eax, 0xaa553; add rsp, 8; ret; 
0x0000000000038581: add bh, bh; ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd891: add bh, bh; ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057b79: add bh, byte ptr [rax + 1]; ret; 
0x0000000000057da8: add bh, byte ptr [rax + 2]; ret; 
0x000000000004342b: add bh, byte ptr [rax - 1]; ret; 
0x000000000011ff6a: add bh, byte ptr [rdi - 0x2708fff4]; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcdfc: add bh, ch; or al, 0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000433ea: add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000043426: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000048286: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144ce: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000a5dc4: add bh, dh; ret; 
0x0000000000041c6b: add bl, bl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x0000000000041dcf: add bl, bl; insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x00000000000e8432: add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x000000000014955f: add bl, byte ptr [rbx + 0x5d]; mov eax, r8d; ret; 
0x00000000000e8433: add bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000949f9: add bl, byte ptr [rsi + 0x5b010015]; ret; 
0x00000000000d358b: add bl, ch; or dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e324d: add bl, ch; ret; 
0x000000000010c814: add bl, ch; retf 0xcb8; add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000184b1d: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000004245f: add bl, dh; addps xmm0, xmm0; ret; 
0x00000000001849df: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001849cf: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000001974b3: add bl, dh; divps xmm0, xmmword ptr [rip + 0x271d8]; ret; 
0x00000000001509af: add bl, dh; movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d287: add bl, dh; movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b7c4f: add bl, dh; movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b6f6f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f8f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b700f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6fcf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6fef: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b70af: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b860f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f5f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000001509bf: add bl, dh; movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d297: add bl, dh; movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014853f: add bl, dh; movq mm1, qword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000010d2ec: add bl, dh; movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d2f8: add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000bbf2b: add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7f2f: add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7f3f: add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x0000000000042406: add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17af79]; ret; 
0x00000000000423e1: add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x00000000000b6f6e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f8e: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b700e: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6fee: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000001509be: add bl, sil; movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d296: add bl, sil; movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000018a8ee: add bpl, al; cli; jg 0x18a8fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b61e: add bpl, al; cli; jg 0x18b62b; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x00000000000f595a: add byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x00000000000926b7: add byte ptr [r8 + 1], r15b; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x0000000000093465: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000006669f: add byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000d005d: add byte ptr [r8], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x00000000000a20c0: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000014e082: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a3fe7: add byte ptr [r9 + 0xf], 0x93; ret; 
0x00000000000a037f: add byte ptr [r9 + rcx*4 - 0x20], r9b; pop rbp; pop r12; pop r13; ret; 
0x0000000000048070: add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000013bf16: add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x0000000000063027: add byte ptr [rax + 0x10], bh; ret; 
0x0000000000113d79: add byte ptr [rax + 0x10], bh; syscall; cmp rax, -0x1000; ja 0x113dd8; ret; 
0x000000000011f458: add byte ptr [rax + 0x119], bh; syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x0000000000190fde: add byte ptr [rax + 0x1478d48], dl; ret; 
0x00000000000b92de: add byte ptr [rax + 0x1788168a], dl; lea rax, [rdi + 1]; ret; 
0x00000000000529f1: add byte ptr [rax + 0x19bc6d05], cl; add byte ptr [rax - 0x73], cl; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000cf55e: add byte ptr [rax + 0x1a948], dl; add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cefaf: add byte ptr [rax + 0x1b740fe6], al; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cef4f: add byte ptr [rax + 0x1b740fe6], al; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x0000000000192d0f: add byte ptr [rax + 0x1b740fe6], al; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x000000000004229f: add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000e506b: add byte ptr [rax + 0x20], bh; cmove rax, rdx; ret; 
0x000000000007a3be: add byte ptr [rax + 0x29], cl; ret; 
0x000000000009939b: add byte ptr [rax + 0x29], cl; ror byte ptr [rax + 0x39], 1; ret; 
0x00000000000ec3ce: add byte ptr [rax + 0x2c755ef9], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000095527: add byte ptr [rax + 0x39], cl; cmp eax, 0x159961; jbe 0x954d8; add rsp, 8; ret; 
0x000000000002a5ab: add byte ptr [rax + 0x39], cl; ret; 
0x0000000000190d17: add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x000000000018be44: add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000000bcd05: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcf500; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc845: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcfc90; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xcff30; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xd05a0; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc805: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xd0650; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc955: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xd0920; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xdbfa0; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c75: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe2db0; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe4360; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb5: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe6880; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f805: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe8f20; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f655: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe92a0; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f695: add byte ptr [rax + 0x39], cl; ror byte ptr [rax - 0x73], 1; adc eax, 0xe9400; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x0000000000153512: add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rax + 0x49], 1; mov eax, eax; mov rax, r8; pop rbx; ret; 
0x000000000012ed7b: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + 0x11], 1; lea rdx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x00000000001535d2: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a2: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153772: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x0000000000192cfe: add byte ptr [rax + 0x3bf4478b], dl; hlt; jne 0x192e20; ret; 
0x00000000000cb183: add byte ptr [rax + 0x4428944], al; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000bc197: add byte ptr [rax + 0x485bf0e5], al; cmovne eax, edx; ret; 
0x000000000009f137: add byte ptr [rax + 0x48], al; lea eax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x0000000000041fc8: add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000136f2c: add byte ptr [rax + 0x578b4803], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000226bd: add byte ptr [rax + 0x5b], bl; pop rbp; ret; 
0x00000000001485fe: add byte ptr [rax + 0x5d5bc031], dl; pop r12; ret; 
0x0000000000047861: add byte ptr [rax + 0x63], cl; and al, 4; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000013b8d1: add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x000000000006251e: add byte ptr [rax + 0x63], cl; ret; 
0x000000000013c557: add byte ptr [rax + 0x63], cl; rol byte ptr [rcx + rcx*4 - 0x40], cl; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000183c9f: add byte ptr [rax + 0x63], cl; ror dword ptr [rax + 1], 0xf8; ret; 
0x0000000000160c8b: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000148968: add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xe7603f8], r8b; mov eax, 2; ret; 
0x0000000000041f98: add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x00000000000bb0be: add byte ptr [rax + 0x66f0ff3], dl; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x0000000000041f55: add byte ptr [rax + 0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000042301: add byte ptr [rax + 0x7110ff3], al; movd xmm0, esi; ret; 
0x000000000018a89f: add byte ptr [rax + 0x77f8c517], cl; ret; 
0x00000000000b849f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000b8d9f: add byte ptr [rax + 0x78d4837], cl; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x00000000000e4f81: add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x0000000000043408: add byte ptr [rax + 0x7f], bh; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000013cbdf: add byte ptr [rax + 0x7fffffff], bh; ret; 
0x0000000000043454: add byte ptr [rax + 0x82], bh; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x000000000014832e: add byte ptr [rax + 0x8c48348], dl; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000000cf00f: add byte ptr [rax + 0xb740fe6], al; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf05f: add byte ptr [rax + 0xb740fe6], al; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000f249f: add byte ptr [rax + 0xc], bh; ret; 
0x0000000000098da5: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa1: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a49: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x000000000009391f: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091017: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5f: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000047649: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198cd9: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x0000000000199009: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x0000000000142679: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e42: add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x00000000000630a3: add byte ptr [rax + 0xca], bh; syscall; ret; 
0x0000000000054ef9: add byte ptr [rax + 0xe], bh; syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x0000000000034148: add byte ptr [rax + 0xf], al; mov bh, 0xc0; ret; 
0x00000000000b1919: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000057d5f: add byte ptr [rax + 0xf], cl; mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x000000000012b52f: add byte ptr [rax + 0xf], cl; mov esi, 0x83480143; ret; 
0x000000000012a6bf: add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x00000000000e0947: add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x000000000009418a: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000e5017: add byte ptr [rax + 0xfc17], bh; ret; 
0x00000000000e5016: add byte ptr [rax + 0xfc17], dil; ret; 
0x00000000000e5147: add byte ptr [rax + 0xff], bh; ret; 
0x00000000000e5146: add byte ptr [rax + 0xff], dil; ret; 
0x00000000000dcfbd: add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x0000000000192e1f: add byte ptr [rax + 1], bh; jg 0x192e30; neg eax; ret; 
0x00000000000cf07f: add byte ptr [rax + 1], bh; jg 0xcf089; neg eax; ret; 
0x0000000000057c2c: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000000926b8: add byte ptr [rax + 1], bh; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x0000000000149eb6: add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c78f: add byte ptr [rax + 1], bh; pop rbx; ret; 
0x0000000000057b40: add byte ptr [rax + 1], bh; ret; 
0x00000000000abf44: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000188b21: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001847e1: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x0000000000184d29: add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000095624: add byte ptr [rax + 1], cl; ret; 
0x000000000010c78e: add byte ptr [rax + 1], dil; pop rbx; ret; 
0x000000000011657e: add byte ptr [rax + 1], dil; ret; 
0x0000000000057d53: add byte ptr [rax + 2], bh; ret; 
0x00000000000d0fb3: add byte ptr [rax + 3], cl; or byte ptr [rax - 0x73], cl; adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0e93: add byte ptr [rax + 3], cl; or byte ptr [rax - 0x73], cl; adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000000034548: add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000ea38f: add byte ptr [rax + rax*8 - 0x49f0e38c], al; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000037fe7: add byte ptr [rax + rax*8 - 0x49f0e78c], al; ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a8727: add byte ptr [rax + rax*8 - 0x76b2d38c], al; ret; 
0x00000000000b7afc: add byte ptr [rax + rax], 0; ret; 
0x0000000000125f6a: add byte ptr [rax + rax], al; add al, ch; popfq; ret; 
0x0000000000094188: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000009961c: add byte ptr [rax + rax], cl; add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000001144f1: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009809c: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, r8; ret; 
0x00000000001199b2: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009e95d: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cf615: add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret; 
0x000000000002440a: add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000003421b: add byte ptr [rax + rcx*2 - 0x75], ah; adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rax - 0x75]; push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000bda08: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000198723: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015348a: add byte ptr [rax + rcx*2 - 0x77], ah; add ebx, dword ptr [rbx - 0x39]; add eax, 0x9d986; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000a2055: add byte ptr [rax + rdx + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000000b76bf: add byte ptr [rax - 0x177cb6c9], cl; add dword ptr [rax - 0x73], ecx; jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000ec3ff: add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x000000000008ce59: add byte ptr [rax - 0x17c801b], 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000009f759: add byte ptr [rax - 0x197fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xaef9; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a08d2: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xe560; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0832: add byte ptr [rax - 0x1a7fea8c], al; add cl, byte ptr [rax - 0x73]; add eax, 0xe5e0; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x0000000000042364: add byte ptr [rax - 0x3991f09a], al; ret; 
0x000000000009393e: add byte ptr [rax - 0x39], cl; add eax, 0x15ae7e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000015d58d: add byte ptr [rax - 0x39], cl; add eax, 0x93ba7; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000125f62: add byte ptr [rax - 0x39], cl; add eax, 0xc9e72; add byte ptr [rax + rax], al; add al, ch; popfq; ret; 
0x0000000000121ebe: add byte ptr [rax - 0x39], cl; add eax, 0xca496; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e95: add byte ptr [rax - 0x39], cl; add eax, 0xca4bf; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e3e: add byte ptr [rax - 0x39], cl; add eax, 0xca516; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121ac7: add byte ptr [rax - 0x39], cl; add eax, 0xca88d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121a92: add byte ptr [rax - 0x39], cl; add eax, 0xca8c2; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001178e5: add byte ptr [rax - 0x39], cl; add eax, 0xd7e9f; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001160b8: add byte ptr [rax - 0x39], cl; add eax, 0xd957c; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000049d2f: add byte ptr [rax - 0x39], cl; ret; 
0x00000000000cfb3f: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb7f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb2f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb6f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000116977: add byte ptr [rax - 0x3d7cb7fe], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000041b79: add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x0000000000188a0e: add byte ptr [rax - 0x3f43f00d], dl; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000023a4a: add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x0000000000113974: add byte ptr [rax - 0x3fcef877], al; ret; 
0x0000000000057c0f: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000d6edf: add byte ptr [rax - 0x41], cl; ret; 
0x0000000000057c28: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000197417: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x00000000000cf60f: add byte ptr [rax - 0x57], cl; add dword ptr [rax], eax; add byte ptr [rax], al; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000000e43ce: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x6f; syscall; ret; 
0x000000000012027e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xba; syscall; ret; 
0x000000000011fb7e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xe4; syscall; ret; 
0x0000000000160ede: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rip + 0x8af85]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x00000000001202be: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rip + 0xcbba5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010ddde: add byte ptr [rax - 0x5e1f00d], dl; mov rax, qword ptr [rip + 0xde085]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000042a1e: add byte ptr [rax - 0x5e1f00d], dl; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000424de: add byte ptr [rax - 0x5e1f00d], dl; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000094d03: add byte ptr [rax - 0x68], cl; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000000bdf8c: add byte ptr [rax - 0x73], cl; adc eax, 0x116fc; cmovne rax, rdx; ret; 
0x000000000009f0ec: add byte ptr [rax - 0x73], cl; adc eax, 0x12e8c; cmovne rax, rdx; ret; 
0x000000000009f6fc: add byte ptr [rax - 0x73], cl; adc eax, 0x1449c; cmovne rax, rdx; ret; 
0x00000000000a09fa: add byte ptr [rax - 0x73], cl; adc eax, 0x1b0ce; cmove rax, rdx; ret; 
0x00000000000a068a: add byte ptr [rax - 0x73], cl; adc eax, 0x1b41e; cmove rax, rdx; ret; 
0x00000000000a052a: add byte ptr [rax - 0x73], cl; adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x000000000012dc54: add byte ptr [rax - 0x73], cl; adc eax, 0x3d9b4; cmovne rax, rdx; ret; 
0x000000000012dad4: add byte ptr [rax - 0x73], cl; adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x000000000012db94: add byte ptr [rax - 0x73], cl; adc eax, 0x40584; cmovne rax, rdx; ret; 
0x000000000012dc33: add byte ptr [rax - 0x73], cl; adc eax, 0x5dc35; cmove rax, rdx; ret; 
0x000000000012db73: add byte ptr [rax - 0x73], cl; adc eax, 0x5dd15; cmove rax, rdx; ret; 
0x000000000012dab3: add byte ptr [rax - 0x73], cl; adc eax, 0x5ddd5; cmove rax, rdx; ret; 
0x000000000012dc7e: add byte ptr [rax - 0x73], cl; adc eax, 0x6297a; cmove rax, rdx; ret; 
0x000000000012dbbe: add byte ptr [rax - 0x73], cl; adc eax, 0x62a5a; cmove rax, rdx; ret; 
0x000000000012dafe: add byte ptr [rax - 0x73], cl; adc eax, 0x62b1a; cmove rax, rdx; ret; 
0x000000000012dd3e: add byte ptr [rax - 0x73], cl; adc eax, 0x62e6a; cmove rax, rdx; ret; 
0x000000000015339a: add byte ptr [rax - 0x73], cl; adc eax, 0x9da9e; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000bc86a: add byte ptr [rax - 0x73], cl; adc eax, 0xc123e; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000009f19c: add byte ptr [rax - 0x73], cl; adc eax, 0xc44fc; cmovne rax, rdx; ret; 
0x000000000009f766: add byte ptr [rax - 0x73], cl; adc eax, 0xc51a2; cmovne rax, rdx; ret; 
0x00000000000a09b4: add byte ptr [rax - 0x73], cl; adc eax, 0xcac84; cmovne rax, rdx; ret; 
0x00000000000a0644: add byte ptr [rax - 0x73], cl; adc eax, 0xcafd4; cmovne rax, rdx; ret; 
0x00000000000a04e4: add byte ptr [rax - 0x73], cl; adc eax, 0xcdc44; cmovne rax, rdx; ret; 
0x00000000000a088f: add byte ptr [rax - 0x73], cl; adc eax, 0xd03d9; cmovne rax, rdx; ret; 
0x00000000000a07ef: add byte ptr [rax - 0x73], cl; adc eax, 0xd0459; cmovne rax, rdx; ret; 
0x00000000000a08df: add byte ptr [rax - 0x73], cl; adc eax, 0xd24e9; cmovne rax, rdx; ret; 
0x00000000000a083f: add byte ptr [rax - 0x73], cl; adc eax, 0xd2569; cmovne rax, rdx; ret; 
0x00000000000bcd5d: add byte ptr [rax - 0x73], cl; adc eax, 0xd5abb; cmovne rax, rdx; ret; 
0x000000000009f21c: add byte ptr [rax - 0x73], cl; adc eax, 0xd60fc; cmovne rax, rdx; ret; 
0x000000000009f7cc: add byte ptr [rax - 0x73], cl; adc eax, 0xd72fc; cmovne rax, rdx; ret; 
0x00000000000a073c: add byte ptr [rax - 0x73], cl; adc eax, 0xd8f0c; cmovne rax, rdx; ret; 
0x00000000000a079c: add byte ptr [rax - 0x73], cl; adc eax, 0xda6bc; cmovne rax, rdx; ret; 
0x000000000009faea: add byte ptr [rax - 0x73], cl; adc eax, 0xe41ce; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82a: add byte ptr [rax - 0x73], cl; adc eax, 0xe434e; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f23a: add byte ptr [rax - 0x73], cl; adc eax, 0xe47fe; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a0993: add byte ptr [rax - 0x73], cl; adc eax, 0xeaf05; cmove rax, rdx; ret; 
0x00000000000a0623: add byte ptr [rax - 0x73], cl; adc eax, 0xeb255; cmove rax, rdx; ret; 
0x00000000000a04c3: add byte ptr [rax - 0x73], cl; adc eax, 0xeb3d5; cmove rax, rdx; ret; 
0x00000000000a09de: add byte ptr [rax - 0x73], cl; adc eax, 0xefc4a; cmove rax, rdx; ret; 
0x00000000000a066e: add byte ptr [rax - 0x73], cl; adc eax, 0xeff9a; cmove rax, rdx; ret; 
0x00000000000a050e: add byte ptr [rax - 0x73], cl; adc eax, 0xf011a; cmove rax, rdx; ret; 
0x00000000000a05ce: add byte ptr [rax - 0x73], cl; adc eax, 0xf05ea; cmove rax, rdx; ret; 
0x00000000000a044d: add byte ptr [rax - 0x73], cl; adc eax, 0xf0c5b; cmovne rax, rdx; ret; 
0x000000000009f13f: add byte ptr [rax - 0x73], cl; adc eax, 0xf1c49; cmovne rax, rdx; ret; 
0x000000000010d46a: add byte ptr [rax - 0x73], cl; adc eax, 0xffffff8e; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000b14ce: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000bcd0f: add byte ptr [rax - 0x73], cl; add eax, 0x11389; cmove rax, rdx; ret; 
0x00000000000bc84f: add byte ptr [rax - 0x73], cl; add eax, 0x11b79; cmove rax, rdx; ret; 
0x000000000009f80f: add byte ptr [rax - 0x73], cl; add eax, 0x120a9; cmove rax, rdx; ret; 
0x000000000009f65f: add byte ptr [rax - 0x73], cl; add eax, 0x12559; cmove rax, rdx; ret; 
0x00000000000bc9ff: add byte ptr [rax - 0x73], cl; add eax, 0x12699; cmove rax, rdx; ret; 
0x000000000009f69f: add byte ptr [rax - 0x73], cl; add eax, 0x126b9; cmove rax, rdx; ret; 
0x00000000000bcaef: add byte ptr [rax - 0x73], cl; add eax, 0x12879; cmove rax, rdx; ret; 
0x00000000000bc80f: add byte ptr [rax - 0x73], cl; add eax, 0x129c9; cmove rax, rdx; ret; 
0x00000000000bc95f: add byte ptr [rax - 0x73], cl; add eax, 0x12f89; cmove rax, rdx; ret; 
0x00000000000960b8: add byte ptr [rax - 0x73], cl; add eax, 0x156ac0; add rsp, 0x10; pop rbp; ret; 
0x00000000000328bf: add byte ptr [rax - 0x73], cl; add eax, 0x181ab6; ret; 
0x00000000000529f7: add byte ptr [rax - 0x73], cl; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000047f83: add byte ptr [rax - 0x73], cl; add eax, 0x1a937b; add rsp, 8; ret; 
0x00000000000a05a8: add byte ptr [rax - 0x73], cl; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x00000000000a8bdf: add byte ptr [rax - 0x73], cl; add eax, 0x3819; cmove rax, rdx; ret; 
0x000000000012dcfd: add byte ptr [rax - 0x73], cl; add eax, 0x5e07b; cmove rax, rdx; ret; 
0x00000000000a1c7f: add byte ptr [rax - 0x73], cl; add eax, 0xa569; cmove rax, rdx; ret; 
0x00000000000a03ff: add byte ptr [rax - 0x73], cl; add eax, 0xbab9; cmove rax, rdx; ret; 
0x00000000001193f1: add byte ptr [rax - 0x73], cl; add eax, 0xd64c7; add rsp, 0x18; ret; 
0x0000000000118ea9: add byte ptr [rax - 0x73], cl; add eax, 0xd69bf; add rsp, 8; ret; 
0x0000000000115dba: add byte ptr [rax - 0x73], cl; add eax, 0xd98b6; add rsp, 8; ret; 
0x00000000000a058d: add byte ptr [rax - 0x73], cl; add eax, 0xeb7fb; cmove rax, rdx; ret; 
0x00000000000a1cbf: add byte ptr [rax - 0x73], cl; add eax, 0xf9e9; cmove rax, rdx; ret; 
0x00000000000d0fe7: add byte ptr [rax - 0x73], cl; add eax, 0xfffffee1; ret; 
0x00000000000d0fd7: add byte ptr [rax - 0x73], cl; add eax, 0xfffffef1; add rsp, 0x58; ret; 
0x00000000000d0ec7: add byte ptr [rax - 0x73], cl; add eax, 0xfffffef1; ret; 
0x00000000000d0eb7: add byte ptr [rax - 0x73], cl; add eax, 0xffffff01; add rsp, 0x58; ret; 
0x00000000000cf65f: add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cf66f: add byte ptr [rax - 0x73], cl; cld; ret; 
0x000000000008ded3: add byte ptr [rax - 0x73], cl; cmp eax, 0x1274e9; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000098daa: add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa6: add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x0000000000094a4e: add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093924: add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x000000000009101c: add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f64: add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x0000000000046c70: add byte ptr [rax - 0x73], cl; cmp eax, 0x16d861; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x000000000004764e: add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x0000000000198cde: add byte ptr [rax - 0x73], cl; cmp eax, 0x55b1a; syscall; pop rbx; ret; 
0x000000000019900e: add byte ptr [rax - 0x73], cl; cmp eax, 0x57502; syscall; pop rbp; ret; 
0x000000000014267e: add byte ptr [rax - 0x73], cl; cmp eax, 0xae392; syscall; pop rbp; ret; 
0x0000000000117e47: add byte ptr [rax - 0x73], cl; cmp eax, 0xd7a01; syscall; ret; 
0x00000000000542d7: add byte ptr [rax - 0x73], cl; dec dword ptr [rax + 0x39]; ret; 
0x00000000000cf64f: add byte ptr [rax - 0x73], cl; hlt; ret; 
0x000000000008e5b4: add byte ptr [rax - 0x73], cl; or eax, 0x15a8e4; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000118e9d: add byte ptr [rax - 0x73], cl; or eax, 0xd69cb; call 0x1191a0; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x000000000017e245: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000011a1f7: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000001161a8: add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000e2e7f: add byte ptr [rax - 0x75], cl; adc eax, 0x108fe9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d5f: add byte ptr [rax - 0x75], cl; adc eax, 0x109109; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c7: add byte ptr [rax - 0x75], cl; adc eax, 0x10dba1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d108f: add byte ptr [rax - 0x75], cl; adc eax, 0x11add9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0eef: add byte ptr [rax - 0x75], cl; adc eax, 0x11af79; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dd7: add byte ptr [rax - 0x75], cl; adc eax, 0x11b091; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062ecf: add byte ptr [rax - 0x75], cl; adc eax, 0x188f99; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e97: add byte ptr [rax - 0x75], cl; adc eax, 0x188fd1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000434af: add byte ptr [rax - 0x75], cl; adc eax, 0x1a89b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004341f: add byte ptr [rax - 0x75], cl; adc eax, 0x1a8a49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012e9df: add byte ptr [rax - 0x75], cl; adc eax, 0xbd489; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121467: add byte ptr [rax - 0x75], cl; adc eax, 0xcaa01; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012142f: add byte ptr [rax - 0x75], cl; adc eax, 0xcaa39; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213f7: add byte ptr [rax - 0x75], cl; adc eax, 0xcaa71; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213c7: add byte ptr [rax - 0x75], cl; adc eax, 0xcaaa1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012138f: add byte ptr [rax - 0x75], cl; adc eax, 0xcaad9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001212b7: add byte ptr [rax - 0x75], cl; adc eax, 0xcabb1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121247: add byte ptr [rax - 0x75], cl; adc eax, 0xcac21; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211ff: add byte ptr [rax - 0x75], cl; adc eax, 0xcac69; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012113f: add byte ptr [rax - 0x75], cl; adc eax, 0xcad29; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120e27: add byte ptr [rax - 0x75], cl; adc eax, 0xcb041; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120d6f: add byte ptr [rax - 0x75], cl; adc eax, 0xcb0f9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120927: add byte ptr [rax - 0x75], cl; adc eax, 0xcb541; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012085f: add byte ptr [rax - 0x75], cl; adc eax, 0xcb609; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001207bf: add byte ptr [rax - 0x75], cl; adc eax, 0xcb6a9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001206ff: add byte ptr [rax - 0x75], cl; adc eax, 0xcb769; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012059f: add byte ptr [rax - 0x75], cl; adc eax, 0xcb8c9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012041f: add byte ptr [rax - 0x75], cl; adc eax, 0xcba49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012034f: add byte ptr [rax - 0x75], cl; adc eax, 0xcbb19; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa5f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc409; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f97f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc4e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d7: add byte ptr [rax - 0x75], cl; adc eax, 0xcc591; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f80f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc659; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f75f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc709; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6af: add byte ptr [rax - 0x75], cl; adc eax, 0xcc7b9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f51f: add byte ptr [rax - 0x75], cl; adc eax, 0xcc949; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f3c7: add byte ptr [rax - 0x75], cl; adc eax, 0xccaa1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011c6ef: add byte ptr [rax - 0x75], cl; adc eax, 0xcf779; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000118c5f: add byte ptr [rax - 0x75], cl; adc eax, 0xd3209; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116f27: add byte ptr [rax - 0x75], cl; adc eax, 0xd4f41; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ef7: add byte ptr [rax - 0x75], cl; adc eax, 0xd4f71; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ebf: add byte ptr [rax - 0x75], cl; adc eax, 0xd4fa9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd7: add byte ptr [rax - 0x75], cl; adc eax, 0xd5191; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001154cf: add byte ptr [rax - 0x75], cl; adc eax, 0xd6999; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011540f: add byte ptr [rax - 0x75], cl; adc eax, 0xd6a59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011520f: add byte ptr [rax - 0x75], cl; adc eax, 0xd6c59; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114877: add byte ptr [rax - 0x75], cl; adc eax, 0xd75f1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001147b7: add byte ptr [rax - 0x75], cl; adc eax, 0xd76b1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001146ff: add byte ptr [rax - 0x75], cl; adc eax, 0xd7769; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011465f: add byte ptr [rax - 0x75], cl; adc eax, 0xd7809; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113f9f: add byte ptr [rax - 0x75], cl; adc eax, 0xd7ec9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dd7: add byte ptr [rax - 0x75], cl; adc eax, 0xd8091; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001138a7: add byte ptr [rax - 0x75], cl; adc eax, 0xd85c1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011386f: add byte ptr [rax - 0x75], cl; adc eax, 0xd85f9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113837: add byte ptr [rax - 0x75], cl; adc eax, 0xd8631; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113577: add byte ptr [rax - 0x75], cl; adc eax, 0xd88f1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011352f: add byte ptr [rax - 0x75], cl; adc eax, 0xd8939; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011347f: add byte ptr [rax - 0x75], cl; adc eax, 0xd89e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011331f: add byte ptr [rax - 0x75], cl; adc eax, 0xd8b49; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001132df: add byte ptr [rax - 0x75], cl; adc eax, 0xd8b89; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113287: add byte ptr [rax - 0x75], cl; adc eax, 0xd8be1; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000112bdf: add byte ptr [rax - 0x75], cl; adc eax, 0xd9289; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ea7f: add byte ptr [rax - 0x75], cl; adc eax, 0xdd3e9; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e367: add byte ptr [rax - 0x75], cl; adc eax, 0xddb01; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e337: add byte ptr [rax - 0x75], cl; adc eax, 0xddb31; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e24f: add byte ptr [rax - 0x75], cl; adc eax, 0xddc19; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010de27: add byte ptr [rax - 0x75], cl; adc eax, 0xde041; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010dbef: add byte ptr [rax - 0x75], cl; adc eax, 0xde279; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db2f: add byte ptr [rax - 0x75], cl; adc eax, 0xde339; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7a7: add byte ptr [rax - 0x75], cl; adc eax, 0xde6c1; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d747: add byte ptr [rax - 0x75], cl; adc eax, 0xde721; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6e7: add byte ptr [rax - 0x75], cl; adc eax, 0xde781; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c49f: add byte ptr [rax - 0x75], cl; adc eax, 0xdf9c9; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c3ef: add byte ptr [rax - 0x75], cl; adc eax, 0xdfa79; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000008d79f: add byte ptr [rax - 0x75], cl; adc r11b, r13b; in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000196b7b: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000150137: add byte ptr [rax - 0x75], cl; add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d357: add byte ptr [rax - 0x75], cl; add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000011bc87: add byte ptr [rax - 0x75], cl; add byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000034291: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034481: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034261: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000473c9: add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017adff: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000017694f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017e0ff: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000009c1f7: add byte ptr [rax - 0x75], cl; add dword ptr [rax], r9d; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000000de128: add byte ptr [rax - 0x75], cl; add eax, 0x10dd40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd147: add byte ptr [rax - 0x75], cl; add eax, 0x10ed21; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009808f: add byte ptr [rax - 0x75], cl; add eax, 0x153dd9; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000008d33f: add byte ptr [rax - 0x75], cl; add eax, 0x15eb29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb7: add byte ptr [rax - 0x75], cl; add eax, 0x160fb1; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000008472f: add byte ptr [rax - 0x75], cl; add eax, 0x167739; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832f: add byte ptr [rax - 0x75], cl; add eax, 0x1a3b39; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000047c57: add byte ptr [rax - 0x75], cl; add eax, 0x1a4211; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043def: add byte ptr [rax - 0x75], cl; add eax, 0x1a8079; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2f: add byte ptr [rax - 0x75], cl; add eax, 0x1a8139; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c37: add byte ptr [rax - 0x75], cl; add eax, 0x1a8231; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bef: add byte ptr [rax - 0x75], cl; add eax, 0x1a8279; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9f: add byte ptr [rax - 0x75], cl; add eax, 0x1a82c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329f: add byte ptr [rax - 0x75], cl; add eax, 0x1a8bc9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124f: add byte ptr [rax - 0x75], cl; add eax, 0x1aac19; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000033d0f: add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x00000000000246e7: add byte ptr [rax - 0x75], cl; add eax, 0x1c7781; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000141d5b: add byte ptr [rax - 0x75], cl; add eax, 0xaecbd; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x000000000012f62f: add byte ptr [rax - 0x75], cl; add eax, 0xbc839; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001221df: add byte ptr [rax - 0x75], cl; add eax, 0xcd891; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011c707: add byte ptr [rax - 0x75], cl; add eax, 0xcf761; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118b17: add byte ptr [rax - 0x75], cl; add eax, 0xd3351; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115967: add byte ptr [rax - 0x75], cl; add eax, 0xd6501; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001144e7: add byte ptr [rax - 0x75], cl; add eax, 0xd7981; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113367: add byte ptr [rax - 0x75], cl; add eax, 0xd8b01; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000112b47: add byte ptr [rax - 0x75], cl; add eax, 0xd9321; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000115dac: add byte ptr [rax - 0x75], cl; add eax, 0xd98bc; mov qword ptr [rip + 0xd98e5], rax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x000000000010de57: add byte ptr [rax - 0x75], cl; add eax, 0xde011; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010de3f: add byte ptr [rax - 0x75], cl; add eax, 0xde029; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc07: add byte ptr [rax - 0x75], cl; add eax, 0xde261; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba7: add byte ptr [rax - 0x75], cl; add eax, 0xde2c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db47: add byte ptr [rax - 0x75], cl; add eax, 0xde321; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d7bf: add byte ptr [rax - 0x75], cl; add eax, 0xde6a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d75f: add byte ptr [rax - 0x75], cl; add eax, 0xde709; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d6ff: add byte ptr [rax - 0x75], cl; add eax, 0xde769; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000048273: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x00000000001680bf: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000151b57: add byte ptr [rax - 0x75], cl; cmp ebp, ebx; ret; 
0x00000000000f4dd7: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000016829f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016888f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000196fbc: add byte ptr [rax - 0x75], cl; je 0x196fe5; adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000000f1fef: add byte ptr [rax - 0x75], cl; jle 0xf201c; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000ff514: add byte ptr [rax - 0x75], cl; jnp 0xff541; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000109a18: add byte ptr [rax - 0x75], cl; mov ah, 0x24; nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000034294: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000016848f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016868f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000034484: add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000011d24f: add byte ptr [rax - 0x75], cl; or al, 1; add byte ptr [rax], al; ret; 
0x0000000000034264: add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000011d247: add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x0000000000123c0f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123b87: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000123aff: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001238bf: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001239df: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000012368f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x000000000012394f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000012371f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x000000000012379f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000123a6f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x00000000001235ff: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x000000000008d237: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000016dbcf: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000167b3f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d40f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d37f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d61f: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000000a8a47: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; mov qword ptr [rax], rdx; ret; 
0x00000000000a896f: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000bda0c: add byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000001221e6: add byte ptr [rax - 0x75], cl; sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x000000000008ccf7: add byte ptr [rax - 0x75], cl; sub rax, qword ptr [rdi + 0x38]; ret; 
0x0000000000167cff: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000827f2: add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000121e5e: add byte ptr [rax - 0x77], cl; adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x000000000015fb28: add byte ptr [rax - 0x77], cl; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000000226b6: add byte ptr [rax - 0x77], cl; adc eax, 0x1ceae2; pop rax; pop rbx; pop rbp; ret; 
0x000000000009f8a2: add byte ptr [rax - 0x77], cl; add eax, 0x14f69e; add rsp, 8; ret; 
0x000000000009f864: add byte ptr [rax - 0x77], cl; add eax, 0x14f6dc; ret; 
0x000000000009520a: add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951e1: add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951c1: add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x0000000000115db3: add byte ptr [rax - 0x77], cl; add eax, 0xd98e5; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000160023: add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000008f50c: add byte ptr [rax - 0x77], cl; call 0x5c4a526f; ret; 
0x00000000000b67bf: add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000018b85f: add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x00000000000fec9d: add byte ptr [rax - 0x77], cl; cmp byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000090087: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000049df7: add byte ptr [rax - 0x77], cl; fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x000000000006680f: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x7d]; ret; 
0x00000000000f1e18: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000093466: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000014e720: add byte ptr [rax - 0x77], cl; in eax, 0x89; ret; 
0x0000000000119913: add byte ptr [rax - 0x77], cl; je 0x119920; pop rbx; ret; 
0x000000000015f461: add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000696a5: add byte ptr [rax - 0x77], cl; mov ebp, ds; sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000022676: add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a8637: add byte ptr [rax - 0x77], cl; sal dword ptr [rcx], 0xc0; mov qword ptr [rdx], rcx; ret; 
0x00000000000bbbf4: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015fae0: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000009389e: add byte ptr [rax - 0x77], cl; sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000198c22: add byte ptr [rax - 0x77], cl; sbb eax, 0x55b76; test rbx, rbx; jne 0x198c10; pop rbx; ret; 
0x000000000009a0c4: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x151e11; mov qword ptr [rax], rdi; ret; 
0x00000000000961ca: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x155d0b; mov qword ptr [rax], rdx; ret; 
0x000000000019741e: add byte ptr [rax - 0x7ab70000], al; ret; 
0x0000000000057bdf: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp - 0x13]; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x00000000001175ba: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x10]; mov eax, 1; ret; 
0x0000000000194f93: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x00000000000b4223: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000115cfa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd9939; mov eax, 1; add rsp, 8; ret; 
0x000000000009f412: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx + 0x5b], 0x5d; pop r12; ret; 
0x0000000000094fb3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x21], cl; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000011ce45: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x000000000017c907: add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000f69e7: add byte ptr [rax - 0x7d], cl; and al, 0x30; adc al, 0x83; ret; 
0x00000000000bcdff: add byte ptr [rax - 0x7d], cl; cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x000000000002a5a1: add byte ptr [rax - 0x7d], cl; cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000bbfa1: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000149132: add byte ptr [rax - 0x7d], cl; mov eax, 0x100; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000026208: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002f10d: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000005432f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x80; js 0x54338; add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x000000000013bed5: add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x000000000004653d: add byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; ret; 
0x00000000000412bd: add byte ptr [rax - 1], bh; pop rbp; ret; 
0x00000000000246f5: add byte ptr [rax - 1], bh; ret; 
0x0000000000090d3e: add byte ptr [rax - 1], dil; ret; 
0x000000000018be41: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x00000000001093d2: add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009f8eb: add byte ptr [rax], 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000ac16b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac18b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac65b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac66b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000091e7b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000012fceb: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000009385b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x0000000000157d4b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000009c20b: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x00000000000a8a53: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rax], 0; ret; 
0x00000000000ec44b: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000a8a7b: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rax], ecx; ret; 
0x00000000000b92eb: add byte ptr [rax], 0; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x000000000013cbdb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x000000000013c84b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000cf07b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x000000000013c39b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000016dfbb: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000013cb5b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000011d243: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000008d33b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043deb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043beb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012f62b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xbc839]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001221db: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcd891]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000118b13: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd3351]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115963: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd6501]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000016ddfb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8b1b: add byte ptr [rax], 0; add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b6f5b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000bc143: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000016e10b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016e09b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000018938b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000ca053: add byte ptr [rax], 0; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000054313: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000ce08b: add byte ptr [rax], 0; add byte ptr [rax], al; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x0000000000189d3d: add byte ptr [rax], 0; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000ee473: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000040fc3: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008e303: add byte ptr [rax], 0; add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x000000000004234e: add byte ptr [rax], 0; add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x000000000006dc6d: add byte ptr [rax], 0; add byte ptr [rbx - 0x9bef71d], al; ret; 
0x00000000001535db: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x0000000000190c53: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000011759b: add byte ptr [rax], 0; add rsp, 8; mov eax, r8d; ret; 
0x0000000000041b9f: add byte ptr [rax], 0; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000001282e6: add byte ptr [rax], ah; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034188: add byte ptr [rax], ah; movzx eax, ax; ret; 
0x00000000000a0306: add byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x0000000000125f69: add byte ptr [rax], al; add al, 0; add al, ch; popfq; ret; 
0x000000000012fd15: add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fda3: add byte ptr [rax], al; add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000f4cfd: add byte ptr [rax], al; add al, ch; fdiv st(2); dec dword ptr [rax - 0x77]; ret; 
0x0000000000041349: add byte ptr [rax], al; add al, ch; iretd; ret; 
0x00000000000f57d4: add byte ptr [rax], al; add al, ch; je 0xf57a7; dec dword ptr [rax - 0x77]; ret; 
0x0000000000198e6a: add byte ptr [rax], al; add al, ch; mov esi, 0x48ffe894; mov dword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x000000000008e588: add byte ptr [rax], al; add al, ch; movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x0000000000045fec: add byte ptr [rax], al; add al, ch; pop rsp; ret; 
0x000000000012a4c8: add byte ptr [rax], al; add al, ch; push rax; fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000012a9c8: add byte ptr [rax], al; add al, ch; push rax; sar edi, cl; dec dword ptr [rcx]; ret; 
0x000000000013fc0b: add byte ptr [rax], al; add al, ch; std; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000010a591: add byte ptr [rax], al; add al, ch; xlatb; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000057c2f: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x0000000000198d5d: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000195521: add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx + 0x21]; ret; 
0x00000000000425f0: add byte ptr [rax], al; add bh, bh; jg 0x4263e; sub eax, edx; shr rax, 0x3f; ret; 
0x00000000001465a1: add byte ptr [rax], al; add bh, bh; ror byte ptr [rax - 0x73], 1; add eax, 0xaa553; add rsp, 8; ret; 
0x00000000000ee3c3: add byte ptr [rax], al; add bh, dh; ret; 
0x0000000000041c69: add byte ptr [rax], al; add bl, bl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000e324b: add byte ptr [rax], al; add bl, ch; ret; 
0x000000000010c812: add byte ptr [rax], al; add bl, ch; retf 0xcb8; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000001849cd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000b6f5d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000010d2f6: add byte ptr [rax], al; add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000bbf29: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7f2d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7f3d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x000000000013bf14: add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x000000000011f456: add byte ptr [rax], al; add byte ptr [rax + 0x119], bh; syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x0000000000190fdc: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x00000000000b92dc: add byte ptr [rax], al; add byte ptr [rax + 0x1788168a], dl; lea rax, [rdi + 1]; ret; 
0x00000000000529ef: add byte ptr [rax], al; add byte ptr [rax + 0x19bc6d05], cl; add byte ptr [rax - 0x73], cl; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000cf55c: add byte ptr [rax], al; add byte ptr [rax + 0x1a948], dl; add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000e50a4: add byte ptr [rax], al; add byte ptr [rax + 0x20], bh; cmove rax, rdx; ret; 
0x000000000007a3bc: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000ec3cc: add byte ptr [rax], al; add byte ptr [rax + 0x2c755ef9], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x000000000007d0c2: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000018be42: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x0000000000192cfc: add byte ptr [rax], al; add byte ptr [rax + 0x3bf4478b], dl; hlt; jne 0x192e20; ret; 
0x00000000000cb181: add byte ptr [rax], al; add byte ptr [rax + 0x4428944], al; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000bc195: add byte ptr [rax], al; add byte ptr [rax + 0x485bf0e5], al; cmovne eax, edx; ret; 
0x000000000009f135: add byte ptr [rax], al; add byte ptr [rax + 0x48], al; lea eax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x0000000000041fc6: add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x000000000004785f: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; and al, 4; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000013b8cf: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x00000000000c034d: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000148966: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xe7603f8], r8b; mov eax, 2; ret; 
0x0000000000041f96: add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x0000000000041f53: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000422ff: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff3], al; movd xmm0, esi; ret; 
0x00000000000b849d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000043406: add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000013cbdd: add byte ptr [rax], al; add byte ptr [rax + 0x7fffffff], bh; ret; 
0x0000000000043452: add byte ptr [rax], al; add byte ptr [rax + 0x82], bh; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x00000000000f249d: add byte ptr [rax], al; add byte ptr [rax + 0xc], bh; ret; 
0x0000000000098da3: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099f9f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a47: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x000000000009391d: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091015: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5d: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000047647: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198cd7: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x0000000000199007: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x0000000000142677: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e40: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x00000000000630a1: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000012a6bd: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x000000000012524d: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480153; ret; 
0x00000000000dcfbb: add byte ptr [rax], al; add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x00000000000cf07d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; jg 0xcf089; neg eax; ret; 
0x0000000000149eb4: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057b3e: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000cf284: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000184d27: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000057d51: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x00000000000ea38d: add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x49f0e38c], al; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x00000000000cf613: add byte ptr [rax], al; add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, [rdi - 0x10]; ret; 
0x00000000000b76bd: add byte ptr [rax], al; add byte ptr [rax - 0x177cb6c9], cl; add dword ptr [rax - 0x73], ecx; jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000ec3fd: add byte ptr [rax], al; add byte ptr [rax - 0x178ad207], al; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x0000000000042362: add byte ptr [rax], al; add byte ptr [rax - 0x3991f09a], al; ret; 
0x000000000009393c: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x15ae7e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e93: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0xca4bf; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000bfa55: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000cfb3d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb7d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb2d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb6d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000023a48: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x0000000000113972: add byte ptr [rax], al; add byte ptr [rax - 0x3fcef877], al; ret; 
0x00000000000d7095: add byte ptr [rax], al; add byte ptr [rax - 0x41], cl; ret; 
0x0000000000057c26: add byte ptr [rax], al; add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000197415: add byte ptr [rax], al; add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x00000000000e43cc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x6f; syscall; ret; 
0x000000000012027c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xba; syscall; ret; 
0x000000000011fb7c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xe4; syscall; ret; 
0x0000000000042a1c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000424dc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000b14cc: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000328bd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x181ab6; ret; 
0x00000000000cf65d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cf66d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x0000000000098da8: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa4: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x0000000000094a4c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093922: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x000000000009101a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f62: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x000000000004764c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x0000000000198cdc: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x55b1a; syscall; pop rbx; ret; 
0x000000000019900c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x57502; syscall; pop rbp; ret; 
0x000000000014267c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0xae392; syscall; pop rbp; ret; 
0x0000000000117e45: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7a01; syscall; ret; 
0x00000000000cf64d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x000000000008e5b2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x15a8e4; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000000473c7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017e0ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000008d33d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x15eb29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008472d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x167739; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a3b39; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000043ded: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8079; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8139; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043bed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8279; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a82c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1a8bc9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1aac19; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000033d0d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x000000000012f62d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xbc839; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001221dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xcd891; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000118b15: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xd3351; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115965: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0xd6501; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4dd5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000016848d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016868d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000011d245: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x000000000012371d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x000000000008d235: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000167cfd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000827f0: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000095208: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951df: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951bf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x000000000008f50a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a526f; ret; 
0x00000000000b92cd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000018b85d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x000000000004f82d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x00000000000f1e16: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000040689: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000019741c: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x000000000002a59f: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000323cd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004653b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; ret; 
0x00000000000412bb: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; ret; 
0x00000000000246f3: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000198d5b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000019551f: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; dec dword ptr [rcx + 0x21]; ret; 
0x00000000000b7f2b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b7f3b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x0000000000190fda: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x0000000000041fc4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x00000000000c2cbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000041f94: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x00000000000b849b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000f249b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xc], bh; ret; 
0x000000000012a6bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x8348014b; ret; 
0x000000000009e85b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000ea38b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x49f0e38c], al; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x00000000000cfb3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000cfb6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000000328bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x181ab6; ret; 
0x00000000000cf65b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000cf66b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000000cf64b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x00000000000473c5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000000f54db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b92cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000018b85b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; vzeroupper; ret; 
0x000000000004f82b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x00000000001943fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000019741a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret; 
0x00000000000323cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000440db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041fc2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000041f92: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x000000000010286c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000010286d: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x0000000000041fc3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f93: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x00000000000a20c1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000911f3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x00000000000b6e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000017e0db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x000000000014e083: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000045eeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000015d44b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7c99fa17], al; stc; add esi, dword ptr [rsi + 7]; ret; 
0x0000000000141605: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001414d3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x00000000000bca8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x00000000001789eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x000000000013c46b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x00000000000eb75b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000bb70b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000010286e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000188d0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000000bff4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000012c6eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000e083b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000004921b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ac64b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000184d8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000ac17b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000001257c9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x00000000001789c9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e89: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6e69: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000178999: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b7e59: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000baf29: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf359: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x00000000000ec47b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000420fb: add byte ptr [rax], al; add byte ptr [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000cfafc: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000009a75c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000a291c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000025b09: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009f8ec: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000420fc: add byte ptr [rax], al; add byte ptr [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000bc194: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000004232c: add byte ptr [rax], al; add byte ptr [rax], al; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac16c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac17c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac18c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x0000000000184d8c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac64c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac65c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac66c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000057b4c: add byte ptr [rax], al; add byte ptr [rax], al; bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000158038: add byte ptr [rax], al; add byte ptr [rax], al; call 0x153750; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000198e69: add byte ptr [rax], al; add byte ptr [rax], al; call 0x22330; mov qword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x0000000000112d18: add byte ptr [rax], al; add byte ptr [rax], al; cmova eax, edx; ret; 
0x000000000012102b: add byte ptr [rax], al; add byte ptr [rax], al; cmovb rax, rdx; ret; 
0x00000000000a28d7: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000a2896: add byte ptr [rax], al; add byte ptr [rax], al; cmovne r8, rax; mov rax, r8; ret; 
0x000000000015c825: add byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000127cfc: add byte ptr [rax], al; add byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000009cb8e: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000091e7c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1ec: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x0000000000091f3c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014646c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 1; ret; 
0x000000000012fcec: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, edi; rol ax, 8; ret; 
0x00000000001576bc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009384c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000009382c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x00000000000344bc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344dc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x000000000002f59c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000025a9c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x000000000009385c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000012da5c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x0000000000146b4c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x0000000000041c68: add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005503a: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x55043; push r10; ret; 
0x0000000000055543: add byte ptr [rax], al; add byte ptr [rax], al; jne 0x5554c; push r10; ret; 
0x00000000000440ec: add byte ptr [rax], al; add byte ptr [rax], al; lea eax, [rdx - 1]; mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x000000000019105c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000019106c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000019107c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000019108c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000019109c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000190fec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000190ffc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000019100c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000019101c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000019102c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000019103c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000019104c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000b14cb: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cf64c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf66c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cf65c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x000000000009c20c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x00000000000328bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x181ab6]; ret; 
0x000000000017acfc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001769cc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000a8a54: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax], 0; ret; 
0x00000000000ec44c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000ec47c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b849c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e5c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000b6e7c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000a8a7c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax], ecx; ret; 
0x00000000001789ec: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001789dc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000001789bc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000000a8b4c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b84ac: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92ec: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b7b5c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000013bf13: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000013cbdc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x00000000000f249c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xc; ret; 
0x00000000000440dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000cf07c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x0000000000057b3d: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000057d50: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000047583: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017e0dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000cef9c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x14]; cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000ceffc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x24]; cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cef3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x000000000010286f: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x00000000000b6e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000016dfbc: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000092790: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000178a2c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a3c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a4c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a5c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a6c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a7c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x0000000000178a1c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001789fc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x0000000000158008: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000b7eac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7eec: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7efc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f0c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f1c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7edc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7ebc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x000000000009393b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x15ae7e], 0; ret; 
0x0000000000121e92: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0xca4bf], 0; ret; 
0x0000000000148564: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000013f2ac: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x000000000008cd3c: add byte ptr [rax], al; add byte ptr [rax], al; mov r8d, 1; mov eax, r8d; ret; 
0x000000000013cb5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x00000000000cfb2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000cfb3c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000cfb4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000cfb5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000cfb6c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000cfb7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000011d244: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x00000000000473c6: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017e0ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000008d33c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008472c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000043dec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043bec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x000000000012f62c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xbc839]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001221dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcd891]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000118b14: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd3351]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115964: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd6501]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000328cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x0000000000188d0c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000000b92cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000018b85c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6edc: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000016ddfc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a898c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a8bc: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018a8ac: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a8b1c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041c11: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b6f5c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b7f2c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f3c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000087cc5: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000141d93: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x00000000000919c1: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000010046a: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bc144: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x00000000000abeac: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016e10c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016e09c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000018938c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000154c27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x00000000000ac3b9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000155ec9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 1; ret; 
0x0000000000094c38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000146b29: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x000000000010c8b9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x0000000000178988: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b7b48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016d898: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b67b8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x0000000000167b38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016da28: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016d9a8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000b7b38: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000ac6e9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001888e9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x00000000001257ca: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x0000000000190fdb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fcb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000001789ca: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e6b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e8a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7e7b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000b6e6a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000178a0b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b7ecb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000cfb1b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x000000000018ab1b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x00000000001789ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017899a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x00000000001849bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; vzeroupper; xor eax, eax; ret; 
0x00000000000baf2a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000041fc5: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f95: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x0000000000057c25: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000000a20c2: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000ca054: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000bc0ff: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; cmove rax, rdx; ret; 
0x00000000000a2075: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fdda: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000093661: add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000024410: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000ce08c: add byte ptr [rax], al; add byte ptr [rax], al; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000015d44c: add byte ptr [rax], al; add byte ptr [rax], al; sub ecx, 5; cmp cx, 3; jbe 0x15d460; ret; 
0x00000000001849cc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000189d3e: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000184e0c: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000ee474: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x000000000009ef36: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x00000000000bc0cc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000040fc4: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000d006c: add byte ptr [rax], al; add byte ptr [rax], al; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000008e304: add byte ptr [rax], al; add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf67c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000000a0305: add byte ptr [rax], al; add byte ptr [rax], dl; lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x000000000014a542: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000012109a: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000008dbd5: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x48; ret; 
0x0000000000115a11: add byte ptr [rax], al; add byte ptr [rbp + 0x11], dh; add rsp, 0x58; ret; 
0x00000000000d01f0: add byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; add rsp, 0x28; ret; 
0x000000000012e16c: add byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; add rsp, 0xd8; ret; 
0x000000000015eb45: add byte ptr [rax], al; add byte ptr [rbp + 0x15], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000011f2d6: add byte ptr [rax], al; add byte ptr [rbp + 0x18], dh; add rsp, 0x68; ret; 
0x00000000000437ca: add byte ptr [rax], al; add byte ptr [rbp + 0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044399: add byte ptr [rax], al; add byte ptr [rbp + 0x19], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000013e346: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000043993: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000005b5b0: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x450; pop rbp; ret; 
0x0000000000151940: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000044316: add byte ptr [rax], al; add byte ptr [rbp + 0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000005b872: add byte ptr [rax], al; add byte ptr [rbp + 0x1e], dh; add rsp, 0x38; ret; 
0x00000000000ca0b0: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000015c7cb: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000013b6ad: add byte ptr [rax], al; add byte ptr [rbp + 0x20850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000154440: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x28; ret; 
0x0000000000113caa: add byte ptr [rax], al; add byte ptr [rbp + 0x25], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000043019: add byte ptr [rax], al; add byte ptr [rbp + 0x26], dh; mov eax, r8d; add rsp, 0x118; ret; 
0x00000000000438e3: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x000000000013a86a: add byte ptr [rax], al; add byte ptr [rbp + 0x28], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001367ec: add byte ptr [rax], al; add byte ptr [rbp + 0x28], dh; add rsp, 0x38; ret; 
0x00000000000d273b: add byte ptr [rax], al; add byte ptr [rbp + 0x29], al; ret; 
0x00000000000d1036: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; add rsp, 0x28; ret; 
0x0000000000149891: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000051ae7: add byte ptr [rax], al; add byte ptr [rbp + 0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015ccdf: add byte ptr [rax], al; add byte ptr [rbp + 0x30], dh; add rsp, 0x18; ret; 
0x00000000000c0597: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; imul cl; ret; 
0x00000000000d006d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; in al, 0x4c; mov eax, esp; pop r12; ret; 
0x00000000000a0afe: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x39], cl; ret; 
0x000000000015cfd6: add byte ptr [rax], al; add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbp; ret; 
0x000000000014992f: add byte ptr [rax], al; add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000015d3dd: add byte ptr [rax], al; add byte ptr [rbp + 0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x00000000001478fc: add byte ptr [rax], al; add byte ptr [rbp + 0x34], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000024486: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000436be: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000de740: add byte ptr [rax], al; add byte ptr [rbp + 0x35], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000115b61: add byte ptr [rax], al; add byte ptr [rbp + 0x37], dh; add rsp, 0x68; ret; 
0x000000000015fc31: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0x58; ret; 
0x00000000001973db: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret; 
0x0000000000116d85: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; add rsp, 0x38; ret; 
0x0000000000116e54: add byte ptr [rax], al; add byte ptr [rbp + 0x3c], dh; add rsp, 0x38; ret; 
0x000000000015ff9a: add byte ptr [rax], al; add byte ptr [rbp + 0x3d], dh; add rsp, 0x38; ret; 
0x0000000000155fae: add byte ptr [rax], al; add byte ptr [rbp + 0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000014931e: add byte ptr [rax], al; add byte ptr [rbp + 0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000094e0b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000060f0b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000436c7: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000001564ce: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000991fc: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000000e3663: add byte ptr [rax], al; add byte ptr [rbp + 0x41], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000015607e: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbp; ret; 
0x00000000001574ae: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000004322d: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x000000000015672e: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000013ca0a: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000121320: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x58; ret; 
0x00000000001135e8: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x68; ret; 
0x0000000000113677: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x18; ret; 
0x000000000011372f: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x000000000015fd28: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x68; ret; 
0x000000000010f522: add byte ptr [rax], al; add byte ptr [rbp + 0x49], dh; add rsp, 0x130; pop rbp; ret; 
0x00000000001137cd: add byte ptr [rax], al; add byte ptr [rbp + 0x49], dh; add rsp, 0x58; ret; 
0x00000000001157c6: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001565ed: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fed1: add byte ptr [rax], al; add byte ptr [rbp + 0x4e], dh; add rsp, 0x68; ret; 
0x0000000000160b79: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000005b057: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000df40c: add byte ptr [rax], al; add byte ptr [rbp + 0x52], dh; add rsp, 0x38; ret; 
0x000000000010299e: add byte ptr [rax], al; add byte ptr [rbp + 0x53], dh; add rsp, 0x38; ret; 
0x000000000013ceb8: add byte ptr [rax], al; add byte ptr [rbp + 0x54], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000440ed: add byte ptr [rax], al; add byte ptr [rbp + 0x589ff42], cl; scasd eax, dword ptr [rdi]; sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x0000000000051c65: add byte ptr [rax], al; add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000114bac: add byte ptr [rax], al; add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; ret; 
0x0000000000051b97: add byte ptr [rax], al; add byte ptr [rbp + 0x5f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d1198: add byte ptr [rax], al; add byte ptr [rbp + 0x61], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000e44fc: add byte ptr [rax], al; add byte ptr [rbp + 0x62], dh; add rsp, 0x38; ret; 
0x0000000000151f09: add byte ptr [rax], al; add byte ptr [rbp + 0x6c], dh; add rsp, 0x30; pop rbx; ret; 
0x00000000000e1608: add byte ptr [rax], al; add byte ptr [rbp + 0x6f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000151dc2: add byte ptr [rax], al; add byte ptr [rbp + 0x6f], dh; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x00000000001525a0: add byte ptr [rax], al; add byte ptr [rbp + 0x71], dh; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x0000000000151c92: add byte ptr [rax], al; add byte ptr [rbp + 0x73], dh; add rsp, 0x10; pop r12; ret; 
0x0000000000114d01: add byte ptr [rax], al; add byte ptr [rbp + 0x75], dh; add rsp, 0x38; ret; 
0x00000000001526df: add byte ptr [rax], al; add byte ptr [rbp + 0x76], dh; add rsp, 0x28; pop rbx; pop r12; ret; 
0x000000000014768b: add byte ptr [rax], al; add byte ptr [rbp + 0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013e57e: add byte ptr [rax], al; add byte ptr [rbp + 0x7850fff], al; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000112c72: add byte ptr [rax], al; add byte ptr [rbp + 0x7f], dh; add rsp, 0x40; pop r12; ret; 
0x000000000011cd37: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000012f7b5: add byte ptr [rax], al; add byte ptr [rbp + 0xb], dh; add rsp, 0x28; ret; 
0x0000000000113d1a: add byte ptr [rax], al; add byte ptr [rbp + 0xc], dh; add rsp, 0x18; ret; 
0x000000000004234f: add byte ptr [rax], al; add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x000000000012e076: add byte ptr [rax], al; add byte ptr [rbp + 0xd], dh; add rsp, 0xd8; ret; 
0x0000000000062de4: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x18; ret; 
0x00000000000e2e12: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001524d0: add byte ptr [rax], al; add byte ptr [rbp + 0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000435c1: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x118; ret; 
0x000000000005503b: add byte ptr [rax], al; add byte ptr [rbp + 3], dh; push r10; ret; 
0x0000000000042b92: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000047440: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x0000000000136889: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000155eb3: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x48; ret; 
0x0000000000153c02: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000010d54d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000157e77: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000d026a: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x40; pop rbp; ret; 
0x0000000000144bda: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; add rsp, 0x10; pop r12; ret; 
0x0000000000042eec: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x148; ret; 
0x00000000000d42e3: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000011c1e8: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x418; ret; 
0x000000000004374f: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0x98; ret; 
0x000000000004441f: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xa8; ret; 
0x0000000000052c02: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x0000000000157daa: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x000000000010fdb0: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000062840: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x1010; pop rbp; ret; 
0x0000000000157d36: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0x90; pop rbx; ret; 
0x00000000000ddc52: add byte ptr [rax], al; add byte ptr [rbp + 9], dh; add rsp, 0xe0; pop rbx; ret; 
0x000000000007a3b4: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000bcd72: add byte ptr [rax], al; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0462: add byte ptr [rax], al; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x0000000000023a62: add byte ptr [rax], al; add byte ptr [rbp - 0x2c], dh; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000023a72: add byte ptr [rax], al; add byte ptr [rbp - 0x3c], dh; ret; 
0x000000000010c11a: add byte ptr [rax], al; add byte ptr [rbp - 0x76b7febd], cl; ret; 
0x0000000000155c8e: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x0000000000049b39: add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], -0x7c; ret; 
0x0000000000184d78: add byte ptr [rax], al; add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x0000000000098d09: add byte ptr [rax], al; add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000911f5: add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x00000000000900ad: add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001100cd: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000000b7b8d: add byte ptr [rax], al; add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000cef3d: add byte ptr [rax], al; add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000b84dd: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e9d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000017e0dd: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x00000000000bc100: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; cmove eax, edx; ret; 
0x0000000000111060: add byte ptr [rax], al; add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000018fb3a: add byte ptr [rax], al; add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18fbe6; xor eax, eax; ret; 
0x00000000000ec810: add byte ptr [rax], al; add byte ptr [rbx + 0x5b010447], al; pop rbp; pop r12; ret; 
0x000000000004429a: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000043550: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000832cc: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010d316: add byte ptr [rax], al; add byte ptr [rbx + 0x87702fe], al; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000137c16: add byte ptr [rax], al; add byte ptr [rbx + 0xb88182d], al; add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x000000000016df4d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dedd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016de6d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000045eed: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000531a5: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000edf63: add byte ptr [rax], al; add byte ptr [rbx - 0x157cfe15], al; add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000150a57: add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000011cf9d: add byte ptr [rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x000000000013c38e: add byte ptr [rax], al; add byte ptr [rbx - 0x77bffe12], al; ja 0x13c399; ret; 
0x0000000000102e45: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf00001], al; ret; 
0x00000000000bf1e1: add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0cf03], al; ret; 
0x000000000015d44d: add byte ptr [rax], al; add byte ptr [rbx - 0x7c99fa17], al; stc; add esi, dword ptr [rsi + 7]; ret; 
0x0000000000141607: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001414d5: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x00000000000bca8d: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x00000000001892f1: add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000006dc6e: add byte ptr [rax], al; add byte ptr [rbx - 0x9bef71d], al; ret; 
0x000000000012357d: add byte ptr [rax], al; add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123cd5: add byte ptr [rax], al; add byte ptr [rcx + 0x107223c6], cl; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000194f3f: add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000d6be9: add byte ptr [rax], al; add byte ptr [rcx + 0x29], al; ret; 
0x00000000000822e5: add byte ptr [rax], al; add byte ptr [rcx + 0x31c289df], cl; shr al, 0x9d; ret; 
0x00000000001789ed: add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000f8759: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x000000000005f369: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000012d1b1: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x00000000000cd818: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret; 
0x00000000001509e6: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], edx; ret; 
0x00000000001500c3: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000eb75d: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000531ad: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000cb182: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x42], 4; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000009d716: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x000000000015e552: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x0000000000114399: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d005e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000082c41: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x00000000001174a2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000004125b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x000000000011755c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; add rsp, 8; ret; 
0x000000000015d183: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; mov qword ptr [rdx], 0; ret; 
0x000000000002f702: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; ret; 
0x0000000000081a40: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000000d11a1: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x000000000008cd43: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000099cae: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000001535dc: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x000000000009809e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000018d600: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000188c4d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000051446: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x000000000008cd3d: add byte ptr [rax], al; add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x0000000000104997: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; add r8b, r13b; pop rbp; ret; 
0x00000000001576fe: add byte ptr [rax], al; add byte ptr [rcx - 0x76b7d7b9], cl; ja 0x157720; mov eax, r8d; ret; 
0x0000000000029b4a: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000288e5: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; add ecx, dword ptr [rax - 0x77]; ror dword ptr [rax + 0x39], 1; ret; 
0x000000000019678b: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000053be7: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000012c6ed: add byte ptr [rax], al; add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x00000000001395cb: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000007bacf: add byte ptr [rax], al; add byte ptr [rcx - 5], al; jg 0x7bae8; test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000006c6b7: add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x000000000011d948: add byte ptr [rax], al; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0472: add byte ptr [rax], al; add byte ptr [rcx], al; je 0xa0435; ret; 
0x00000000000bcd82: add byte ptr [rax], al; add byte ptr [rcx], al; je 0xbcd45; ret; 
0x0000000000102a80: add byte ptr [rax], al; add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x00000000000c9ff5: add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x00000000000445ba: add byte ptr [rax], al; add byte ptr [rcx], dh; imul al; fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x000000000008d8db: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000196c15: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbp - 0x7b], 0xc0; jne 0x196b70; add rsp, 0x38; ret; 
0x0000000000102a9d: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000097c9e: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 0x34; ret; 
0x000000000009ef37: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000018bfcd: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x00000000000ee475: add byte ptr [rax], al; add byte ptr [rcx], dh; sar byte ptr [rax], 0xe; je 0xee3bd; ret; 
0x0000000000190c54: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000cf082: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; neg eax; ret; 
0x0000000000192e22: add byte ptr [rax], al; add byte ptr [rdi + 9], bh; neg eax; ret; 
0x00000000000424c5: add byte ptr [rax], al; add byte ptr [rdi], bh; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x0000000000087cc6: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000141d94: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000926bb: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbp + 0x38], eax; pop rbp; pop r12; ret; 
0x00000000000919c2: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x00000000001509f8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], ebx; ret; 
0x000000000014d2a0: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], ecx; ret; 
0x00000000001500e8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], edx; ret; 
0x00000000001509d8: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdx], esp; ret; 
0x000000000010d262: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d26e: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000010046b: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 8], eax; ret; 
0x0000000000148548: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 8], ecx; ret; 
0x000000000014d1ad: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000016e09d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000018938d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000118083: add byte ptr [rax], al; add byte ptr [rdi], cl; mov cl, 0x15; ret; 
0x000000000016e10d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000038dd5: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000004921d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000bc145: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000abead: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000000ac65d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac66d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000ac64d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000184d8d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000ac18d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac17d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000ac19d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ce37d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ac16d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000043325: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x000000000009d5fc: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ebp; add esp, 0x18; ret; 
0x00000000000578bf: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x000000000010e0ed: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], esi; add esp, 0x78; ret; 
0x000000000010e6e3: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebx; add esp, 0x68; ret; 
0x00000000000521f3: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ecx; add esp, 0x10; pop rbx; ret; 
0x00000000001152ae: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edx; add esp, 0x60; pop rbp; ret; 
0x000000000010e824: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000012d2f1: add byte ptr [rax], al; add byte ptr [rdi], cl; test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000014f66d: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x00000000000baf3d: add byte ptr [rax], al; add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x000000000010405b: add byte ptr [rax], al; add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000951f9: add byte ptr [rax], al; add byte ptr [rdx], al; jbe 0x95200; ret; 
0x000000000010261b: add byte ptr [rax], al; add byte ptr [rdx], ch; call 0x102520; add rsp, 0x18; ret; 
0x00000000000e4f3a: add byte ptr [rax], al; add byte ptr [rsi + 0x29], bh; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x0000000000093918: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091010: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f58: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117e3b: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x000000000006309c: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x0000000000093662: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x00000000000ac57a: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac59f: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000122248: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; call 0x1220e0; ret; 
0x000000000009525a: add byte ptr [rax], al; add byte ptr [rsi + 1], dh; ret; 
0x00000000000e40bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; ret; 
0x000000000014140b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000001257cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x000000000017aceb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000001789cb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e8b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6e6b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000017899b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000b945b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85fb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000baf2b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x00000000001769cd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000041c12: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d302: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x00000000000c6a9a: add byte ptr [rax], al; add byte ptr [rsp + rax + 0x44], dh; mov eax, eax; ret; 
0x00000000000319b6: add byte ptr [rax], al; add cl, ch; mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x00000000000be525: add byte ptr [rax], al; add cl, ch; movabs al, byte ptr [0xeb8087b8bfffffc]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002e046: add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000578c5: add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000a8a55: add byte ptr [rax], al; add dh, al; add byte ptr [rax], al; ret; 
0x00000000000ec47d: add byte ptr [rax], al; add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000951fa: add byte ptr [rax], al; add dh, byte ptr [rsi + 1]; ret; 
0x0000000000063c08: add byte ptr [rax], al; add dh, dh; ret; 
0x00000000000420fd: add byte ptr [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x00000000000ec811: add byte ptr [rax], al; add dword ptr [rdi + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000102a81: add byte ptr [rax], al; add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x0000000000184d79: add byte ptr [rax], al; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000005432e: add byte ptr [rax], al; add rax, 1; cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000cfafe: add byte ptr [rax], al; add rax, 3; ret; 
0x00000000000abf43: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x0000000000188b20: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001847e0: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000184d28: add byte ptr [rax], al; add rax, rdi; vzeroupper; ret; 
0x0000000000184d1f: add byte ptr [rax], al; add rdx, rax; jl 0x184e10; add rax, rdi; vzeroupper; ret; 
0x000000000009d4e0: add byte ptr [rax], al; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009961f: add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000521fa: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000013cd78: add byte ptr [rax], al; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000009cfb0: add byte ptr [rax], al; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000089a54: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009a75e: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000010d83b: add byte ptr [rax], al; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000000042b3f: add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x00000000000d2a4c: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000014e873: add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000008b85b: add byte ptr [rax], al; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000156115: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000197338: add byte ptr [rax], al; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000091256: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000197047: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010e82b: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000008a401: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000001521b1: add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000014eabc: add byte ptr [rax], al; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000013e0a3: add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000113b2c: add byte ptr [rax], al; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x00000000001140a5: add byte ptr [rax], al; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000001152b5: add byte ptr [rax], al; add rsp, 0x60; pop rbp; ret; 
0x000000000010df79: add byte ptr [rax], al; add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000001010ea: add byte ptr [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010e6ea: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x00000000000bd0d0: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010e0f4: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000015e54c: add byte ptr [rax], al; add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000024240: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000081d37: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000002f6fc: add byte ptr [rax], al; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000e49b8: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000137084: add byte ptr [rax], al; add rsp, 8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000000832e6: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000015685e: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000832c4: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000015788c: add byte ptr [rax], al; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011759c: add byte ptr [rax], al; add rsp, 8; mov eax, r8d; ret; 
0x00000000000a0a55: add byte ptr [rax], al; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009f9e2: add byte ptr [rax], al; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x00000000000a291e: add byte ptr [rax], al; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000024e06: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041e66: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000148e3e: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000148d5e: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000420fe: add byte ptr [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004245e: add byte ptr [rax], al; addss xmm0, xmm0; ret; 
0x00000000000bc196: add byte ptr [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000041ba0: add byte ptr [rax], al; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000018e4f1: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011f0a8: add byte ptr [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000003448f: add byte ptr [rax], al; and eax, esi; ret; 
0x000000000018edc3: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e4f6: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000047c95: add byte ptr [rax], al; and edx, 0x7fffffff; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x00000000000ee409: add byte ptr [rax], al; and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000000ec49e: add byte ptr [rax], al; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000004232e: add byte ptr [rax], al; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac16e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac17e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac18e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac19e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ce37e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000b1e00: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000000cf734: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000aa37e: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184d9e: add byte ptr [rax], al; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184d8e: add byte ptr [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac64e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac65e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac66e: add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000b1918: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b19b2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000150a98: add byte ptr [rax], al; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x00000000001509a0: add byte ptr [rax], al; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x000000000014d345: add byte ptr [rax], al; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000057d5e: add byte ptr [rax], al; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000057b4e: add byte ptr [rax], al; bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000102640: add byte ptr [rax], al; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000024232: add byte ptr [rax], al; call 0x113590; cmp eax, -1; je 0x24328; add rsp, 0x98; ret; 
0x0000000000113d46: add byte ptr [rax], al; call 0x1145c0; add rsp, 0x18; ret; 
0x0000000000121d0e: add byte ptr [rax], al; call 0x1214a0; movsxd rbx, ebx; mov qword ptr [rip + 0xca641], rbx; pop rbx; ret; 
0x000000000012224e: add byte ptr [rax], al; call 0x1220e0; ret; 
0x000000000015803a: add byte ptr [rax], al; call 0x153750; mov dword ptr [rax], 0; pop rbx; ret; 
0x000000000013873b: add byte ptr [rax], al; call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x0000000000198e6b: add byte ptr [rax], al; call 0x22330; mov qword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x0000000000118ee1: add byte ptr [rax], al; call 0x61e20; mov rax, r12; pop r12; ret; 
0x000000000008e589: add byte ptr [rax], al; call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x000000000008fdd2: add byte ptr [rax], al; call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x00000000001465a2: add byte ptr [rax], al; call rax; lea rax, [rip + 0xaa553]; add rsp, 8; ret; 
0x00000000000bc200: add byte ptr [rax], al; clc; jg 0xbc1fc; int1; mov eax, eax; ret; 
0x0000000000112d1a: add byte ptr [rax], al; cmova eax, edx; ret; 
0x000000000013c796: add byte ptr [rax], al; cmovb eax, edx; ret; 
0x000000000012102d: add byte ptr [rax], al; cmovb rax, rdx; ret; 
0x0000000000043de0: add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000bc13a: add byte ptr [rax], al; cmove rax, rcx; ret; 
0x00000000000a0405: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000cf193: add byte ptr [rax], al; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf171: add byte ptr [rax], al; cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000ee412: add byte ptr [rax], al; cmovne eax, edx; pop rbx; ret; 
0x00000000000dcffa: add byte ptr [rax], al; cmovne eax, edx; ret; 
0x00000000000a2898: add byte ptr [rax], al; cmovne r8, rax; mov rax, r8; ret; 
0x000000000015c827: add byte ptr [rax], al; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009526f: add byte ptr [rax], al; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x00000000000e4fed: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000127cfe: add byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000017c906: add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000042299: add byte ptr [rax], al; cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000ec3fe: add byte ptr [rax], al; cmp cl, 0x2d; jne 0xec3ed; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3cd: add byte ptr [rax], al; cmp cl, 0x5e; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000102a0c: add byte ptr [rax], al; cmp dx, 2; je 0x102a18; ret; 
0x0000000000192748: add byte ptr [rax], al; cmp eax, ecx; jne 0x192805; xor eax, eax; ret; 
0x000000000010d317: add byte ptr [rax], al; cmp esi, 2; ja 0x10d326; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000087499: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000009cb90: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000bcd04: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcf500]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc844: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcfc90]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xcff30]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xd05a0]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc804: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xd0650]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc954: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xd0920]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xdbfa0]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c74: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe2db0]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe4360]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb4: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe6880]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f804: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe8f20]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f654: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe92a0]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f694: add byte ptr [rax], al; cmp rax, rdx; lea rdx, [rip + 0xe9400]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000bbfa0: add byte ptr [rax], al; cmp rdx, 0x20; ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000018be43: add byte ptr [rax], al; cmp rdx, rcx; jne 0x18be2b; vzeroupper; ret; 
0x0000000000190d16: add byte ptr [rax], al; cmp rdx, rcx; jne 0x190cf6; vzeroupper; ret; 
0x00000000000960b0: add byte ptr [rax], al; cmpxchg dword ptr [rip + 0x156ac7], edx; lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x00000000000dcf9e: add byte ptr [rax], al; endbr64; cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x0000000000091e7e: add byte ptr [rax], al; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1ee: add byte ptr [rax], al; endbr64; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x000000000013b5fe: add byte ptr [rax], al; endbr64; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000002419e: add byte ptr [rax], al; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000091f3e: add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014646e: add byte ptr [rax], al; endbr64; mov eax, 1; ret; 
0x00000000000e520e: add byte ptr [rax], al; endbr64; mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x0000000000148c9e: add byte ptr [rax], al; endbr64; mov eax, 2; ret; 
0x000000000010d27e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000010c99e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008cd4e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000094d9e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008deee: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000004409e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x000000000010d32e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000012fcee: add byte ptr [rax], al; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000015e0fe: add byte ptr [rax], al; endbr64; mov edi, dword ptr [rip + 0x8e326]; test edi, edi; jns 0x15e110; ret; 
0x000000000016367e: add byte ptr [rax], al; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937ee: add byte ptr [rax], al; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000001576be: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de28e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009384e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000008748e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000951ee: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x000000000009523e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094e9e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e1e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x000000000009382e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x00000000000344be: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344de: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x000000000002f59e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x00000000000243fe: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025a9e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000162fee: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x88e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f8e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x88ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f6e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x88ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f4e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x88f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015cc5e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014318e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xad885]; test rax, rax; jne 0x1431a8; ret; 
0x000000000013009e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x0000000000122ace: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011581e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000003444e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000009385e: add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000012221e: add byte ptr [rax], al; endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x000000000009381e: add byte ptr [rax], al; endbr64; ret; 
0x00000000000342be: add byte ptr [rax], al; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014647e: add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x0000000000041dce: add byte ptr [rax], al; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000041c6a: add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x000000000012fc09: add byte ptr [rax], al; ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x0000000000190c55: add byte ptr [rax], al; ja 0x190c6b; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190be5: add byte ptr [rax], al; ja 0x190c74; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000094e4b: add byte ptr [rax], al; jbe 0x94e50; ret; 
0x0000000000094e8b: add byte ptr [rax], al; jbe 0x94e90; ret; 
0x000000000009525b: add byte ptr [rax], al; jbe 0x95260; ret; 
0x000000000018930d: add byte ptr [rax], al; je 0x189390; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189a2d: add byte ptr [rax], al; je 0x189b70; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a0ad: add byte ptr [rax], al; je 0x18a130; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018ad9d: add byte ptr [rax], al; je 0x18ae20; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000008aea8: add byte ptr [rax], al; je 0x8aeb8; mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x8aeb8; ret; 
0x000000000009e1fa: add byte ptr [rax], al; je 0x9e200; ret; 
0x00000000000a0463: add byte ptr [rax], al; je 0xa0435; lea rax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd73: add byte ptr [rax], al; je 0xbcd45; lea rax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000c6a9b: add byte ptr [rax], al; je 0xc6aa3; mov eax, r8d; ret; 
0x00000000000cf564: add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf614: add byte ptr [rax], al; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000000e4fba: add byte ptr [rax], al; je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x0000000000192e23: add byte ptr [rax], al; jg 0x192e30; neg eax; ret; 
0x00000000000cf083: add byte ptr [rax], al; jg 0xcf089; neg eax; ret; 
0x000000000018fbe9: add byte ptr [rax], al; jl 0x18fbf0; neg eax; ret; 
0x00000000000e4f3b: add byte ptr [rax], al; jle 0xe4f68; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000001010e4: add byte ptr [rax], al; jne 0x1015f5; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010299f: add byte ptr [rax], al; jne 0x1029f6; add rsp, 0x38; ret; 
0x000000000010d399: add byte ptr [rax], al; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d54e: add byte ptr [rax], al; jne 0x10d558; add rsp, 0x10; pop rbp; ret; 
0x000000000010d65e: add byte ptr [rax], al; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010d6b0: add byte ptr [rax], al; jne 0x10d6b9; add rsp, 0x18; ret; 
0x000000000010d835: add byte ptr [rax], al; jne 0x10da91; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x000000000010df73: add byte ptr [rax], al; jne 0x10e021; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000010e0ee: add byte ptr [rax], al; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6e4: add byte ptr [rax], al; jne 0x10e785; add rsp, 0x68; ret; 
0x000000000010e825: add byte ptr [rax], al; jne 0x10e8df; add rsp, 0x30; pop rbx; ret; 
0x000000000010e955: add byte ptr [rax], al; jne 0x10ea0f; add rsp, 0x30; pop rbx; ret; 
0x000000000010f523: add byte ptr [rax], al; jne 0x10f570; add rsp, 0x130; pop rbp; ret; 
0x000000000010fdb1: add byte ptr [rax], al; jne 0x10fdbd; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112c73: add byte ptr [rax], al; jne 0x112cf6; add rsp, 0x40; pop r12; ret; 
0x00000000001135e9: add byte ptr [rax], al; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113678: add byte ptr [rax], al; jne 0x1136c3; add rsp, 0x18; ret; 
0x0000000000113730: add byte ptr [rax], al; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137ce: add byte ptr [rax], al; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113b26: add byte ptr [rax], al; jne 0x113c09; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113cab: add byte ptr [rax], al; jne 0x113cd4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113d1b: add byte ptr [rax], al; jne 0x113d2b; add rsp, 0x18; ret; 
0x000000000011409f: add byte ptr [rax], al; jne 0x114168; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000114bad: add byte ptr [rax], al; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c4d: add byte ptr [rax], al; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114d02: add byte ptr [rax], al; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dd2: add byte ptr [rax], al; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000114ecc: add byte ptr [rax], al; jne 0x114ed5; add rsp, 0x28; ret; 
0x00000000001152af: add byte ptr [rax], al; jne 0x115349; add rsp, 0x60; pop rbp; ret; 
0x00000000001157c7: add byte ptr [rax], al; jne 0x115815; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000115a12: add byte ptr [rax], al; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115a8b: add byte ptr [rax], al; jne 0x115a94; add rsp, 0x28; ret; 
0x0000000000115b62: add byte ptr [rax], al; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d86: add byte ptr [rax], al; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e55: add byte ptr [rax], al; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001184b6: add byte ptr [rax], al; jne 0x1184c2; add rsp, 0xd8; ret; 
0x000000000011858f: add byte ptr [rax], al; jne 0x11859b; add rsp, 0xd8; ret; 
0x00000000001198d7: add byte ptr [rax], al; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011bf4b: add byte ptr [rax], al; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c00b: add byte ptr [rax], al; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e9: add byte ptr [rax], al; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c452: add byte ptr [rax], al; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6bf: add byte ptr [rax], al; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x000000000011cd38: add byte ptr [rax], al; jne 0x11cd46; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011cdc8: add byte ptr [rax], al; jne 0x11cdd6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011f2d7: add byte ptr [rax], al; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cdc: add byte ptr [rax], al; jne 0x120ce5; add rsp, 0x18; ret; 
0x000000000012109b: add byte ptr [rax], al; jne 0x1210af; add rsp, 0xa0; pop rbx; ret; 
0x0000000000121321: add byte ptr [rax], al; jne 0x12136b; add rsp, 0x58; ret; 
0x0000000000129d6d: add byte ptr [rax], al; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012b89e: add byte ptr [rax], al; jne 0x12b8d0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ba96: add byte ptr [rax], al; jne 0x12baa2; add rsp, 0xd8; ret; 
0x000000000012d2f2: add byte ptr [rax], al; jne 0x12d3cd; leave; ret; 
0x000000000012e077: add byte ptr [rax], al; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e16d: add byte ptr [rax], al; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e287: add byte ptr [rax], al; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012e34f: add byte ptr [rax], al; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f18d: add byte ptr [rax], al; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a7: add byte ptr [rax], al; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x000000000012f36f: add byte ptr [rax], al; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f7b6: add byte ptr [rax], al; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f816: add byte ptr [rax], al; jne 0x12f825; add rsp, 0x28; ret; 
0x000000000012f8df: add byte ptr [rax], al; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9bf: add byte ptr [rax], al; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa9f: add byte ptr [rax], al; jne 0x12faab; add rsp, 0xd8; ret; 
0x00000000001367ed: add byte ptr [rax], al; jne 0x136819; add rsp, 0x38; ret; 
0x000000000013688a: add byte ptr [rax], al; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f7: add byte ptr [rax], al; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013a86b: add byte ptr [rax], al; jne 0x13a897; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013c910: add byte ptr [rax], al; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013ca0b: add byte ptr [rax], al; jne 0x13ca55; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013ceb9: add byte ptr [rax], al; jne 0x13cf11; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013e09d: add byte ptr [rax], al; jne 0x13e134; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000013e347: add byte ptr [rax], al; jne 0x13e365; add rsp, 0x20; pop rbx; ret; 
0x000000000013e39c: add byte ptr [rax], al; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3ef: add byte ptr [rax], al; jne 0x13e3f8; add rsp, 0x28; ret; 
0x000000000013ec7e: add byte ptr [rax], al; jne 0x13ec87; add rsp, 0x18; ret; 
0x0000000000144bdb: add byte ptr [rax], al; jne 0x144be6; add rsp, 0x10; pop r12; ret; 
0x0000000000146549: add byte ptr [rax], al; jne 0x146553; add rsp, 0x40; pop rbp; ret; 
0x00000000001474e9: add byte ptr [rax], al; jne 0x147598; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000014768c: add byte ptr [rax], al; jne 0x147707; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001478fd: add byte ptr [rax], al; jne 0x147935; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000014931f: add byte ptr [rax], al; jne 0x149363; add rsp, 0x10; pop rbx; ret; 
0x0000000000149892: add byte ptr [rax], al; jne 0x1498c2; add rsp, 0x10; pop rbx; ret; 
0x0000000000149930: add byte ptr [rax], al; jne 0x149965; add rsp, 0x10; pop rbx; ret; 
0x000000000014a543: add byte ptr [rax], al; jne 0x14a557; add rsp, 0x40; pop rbx; ret; 
0x000000000014e86d: add byte ptr [rax], al; jne 0x14e8f3; add rsp, 0x20; pop rbx; ret; 
0x0000000000151941: add byte ptr [rax], al; jne 0x151961; add rsp, 0x10; pop rbx; ret; 
0x0000000000151b43: add byte ptr [rax], al; jne 0x151bd7; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000151c93: add byte ptr [rax], al; jne 0x151d0a; add rsp, 0x10; pop r12; ret; 
0x0000000000151dc3: add byte ptr [rax], al; jne 0x151e36; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x0000000000151f0a: add byte ptr [rax], al; jne 0x151f7a; add rsp, 0x30; pop rbx; ret; 
0x000000000015204a: add byte ptr [rax], al; jne 0x1520ba; add rsp, 0x30; pop rbx; ret; 
0x00000000001521ab: add byte ptr [rax], al; jne 0x152252; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000015234b: add byte ptr [rax], al; jne 0x1523f2; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000001524d1: add byte ptr [rax], al; jne 0x1524e3; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000001525a1: add byte ptr [rax], al; jne 0x152616; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x00000000001526e0: add byte ptr [rax], al; jne 0x15275a; add rsp, 0x28; pop rbx; pop r12; ret; 
0x0000000000153c03: add byte ptr [rax], al; jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000153c79: add byte ptr [rax], al; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce9: add byte ptr [rax], al; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d59: add byte ptr [rax], al; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153dba: add byte ptr [rax], al; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e1e: add byte ptr [rax], al; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e89: add byte ptr [rax], al; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f0c: add byte ptr [rax], al; jne 0x153f15; add rsp, 0x78; ret; 
0x0000000000154441: add byte ptr [rax], al; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155eb4: add byte ptr [rax], al; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000155f1f: add byte ptr [rax], al; jne 0x155f63; add rsp, 0x10; pop rbx; ret; 
0x0000000000155faf: add byte ptr [rax], al; jne 0x155ff2; add rsp, 0x10; pop rbx; ret; 
0x000000000015607f: add byte ptr [rax], al; jne 0x1560c5; add rsp, 0x10; pop rbp; ret; 
0x000000000015610f: add byte ptr [rax], al; jne 0x1561af; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001561ff: add byte ptr [rax], al; jne 0x15629f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001562ef: add byte ptr [rax], al; jne 0x15638f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001563df: add byte ptr [rax], al; jne 0x15647f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001564cf: add byte ptr [rax], al; jne 0x156514; add rsp, 0x10; pop rbx; ret; 
0x000000000015655f: add byte ptr [rax], al; jne 0x1565a3; add rsp, 0x10; pop rbx; ret; 
0x00000000001565ee: add byte ptr [rax], al; jne 0x156640; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015668e: add byte ptr [rax], al; jne 0x1566e0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015672f: add byte ptr [rax], al; jne 0x156779; add rsp, 0x10; pop rbx; ret; 
0x00000000001567bf: add byte ptr [rax], al; jne 0x156803; add rsp, 0x10; pop rbx; ret; 
0x0000000000157053: add byte ptr [rax], al; jne 0x1570ef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157143: add byte ptr [rax], al; jne 0x1571df; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157233: add byte ptr [rax], al; jne 0x1572cf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157323: add byte ptr [rax], al; jne 0x1573bf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001574af: add byte ptr [rax], al; jne 0x1574f5; add rsp, 0x10; pop rbx; ret; 
0x000000000015753f: add byte ptr [rax], al; jne 0x157585; add rsp, 0x10; pop rbx; ret; 
0x00000000001575cf: add byte ptr [rax], al; jne 0x157615; add rsp, 0x10; pop rbx; ret; 
0x000000000015765f: add byte ptr [rax], al; jne 0x1576a5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157d37: add byte ptr [rax], al; jne 0x157d44; add rsp, 0x90; pop rbx; ret; 
0x0000000000157dab: add byte ptr [rax], al; jne 0x157db7; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e0c: add byte ptr [rax], al; jne 0x157e18; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e78: add byte ptr [rax], al; jne 0x157e82; add rsp, 0x10; pop rbx; ret; 
0x0000000000157eeb: add byte ptr [rax], al; jne 0x157ef5; add rsp, 0x10; pop rbx; ret; 
0x000000000015c7cc: add byte ptr [rax], al; jne 0x15c7ef; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000015cce0: add byte ptr [rax], al; jne 0x15cd14; add rsp, 0x18; ret; 
0x000000000015cfd7: add byte ptr [rax], al; jne 0x15d00c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d067: add byte ptr [rax], al; jne 0x15d09c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d3de: add byte ptr [rax], al; jne 0x15d415; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x000000000015eb46: add byte ptr [rax], al; jne 0x15eb5f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fc32: add byte ptr [rax], al; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd29: add byte ptr [rax], al; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fed2: add byte ptr [rax], al; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff9b: add byte ptr [rax], al; jne 0x15ffdc; add rsp, 0x38; ret; 
0x0000000000160b7a: add byte ptr [rax], al; jne 0x160bcf; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000016102e: add byte ptr [rax], al; jne 0x161037; add rsp, 0x28; ret; 
0x00000000001635b9: add byte ptr [rax], al; jne 0x1635c3; add rsp, 0x10; pop rbx; ret; 
0x000000000016363f: add byte ptr [rax], al; jne 0x163649; add rsp, 0x10; pop rbx; ret; 
0x00000000001850f2: add byte ptr [rax], al; jne 0x185000; ret; 
0x000000000018c030: add byte ptr [rax], al; jne 0x18bfb0; ret; 
0x0000000000023a63: add byte ptr [rax], al; jne 0x23a3b; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000023a73: add byte ptr [rax], al; jne 0x23a3b; ret; 
0x0000000000024487: add byte ptr [rax], al; jne 0x244c0; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000042350: add byte ptr [rax], al; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000042b93: add byte ptr [rax], al; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042eed: add byte ptr [rax], al; jne 0x42ef9; add rsp, 0x148; ret; 
0x000000000004301a: add byte ptr [rax], al; jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000004322e: add byte ptr [rax], al; jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043326: add byte ptr [rax], al; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435c2: add byte ptr [rax], al; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043645: add byte ptr [rax], al; jne 0x43658; add rsp, 0x118; ret; 
0x00000000000436bf: add byte ptr [rax], al; jne 0x436f8; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000043750: add byte ptr [rax], al; jne 0x4375c; add rsp, 0x98; ret; 
0x00000000000437cb: add byte ptr [rax], al; jne 0x437e7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000438e4: add byte ptr [rax], al; jne 0x4390f; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000043994: add byte ptr [rax], al; jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043cf0: add byte ptr [rax], al; jne 0x43cfc; add rsp, 0x148; ret; 
0x0000000000044317: add byte ptr [rax], al; jne 0x44337; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000004439a: add byte ptr [rax], al; jne 0x443b7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044420: add byte ptr [rax], al; jne 0x4442c; add rsp, 0xa8; ret; 
0x0000000000047441: add byte ptr [rax], al; jne 0x4744a; add rsp, 0x28; ret; 
0x0000000000047531: add byte ptr [rax], al; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047dbb: add byte ptr [rax], al; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e08: add byte ptr [rax], al; jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e5a: add byte ptr [rax], al; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea7: add byte ptr [rax], al; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047efa: add byte ptr [rax], al; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f47: add byte ptr [rax], al; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000051ae8: add byte ptr [rax], al; jne 0x51b1c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051b98: add byte ptr [rax], al; jne 0x51bfb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051c66: add byte ptr [rax], al; jne 0x51cc4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000521f4: add byte ptr [rax], al; jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c03: add byte ptr [rax], al; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414d: add byte ptr [rax], al; jne 0x54159; add rsp, 0xd8; ret; 
0x000000000005503c: add byte ptr [rax], al; jne 0x55043; push r10; ret; 
0x0000000000055545: add byte ptr [rax], al; jne 0x5554c; push r10; ret; 
0x00000000000578c0: add byte ptr [rax], al; jne 0x57945; leave; ret; 
0x000000000005b058: add byte ptr [rax], al; jne 0x5b0ad; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000005b5b1: add byte ptr [rax], al; jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b873: add byte ptr [rax], al; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c76: add byte ptr [rax], al; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d4b: add byte ptr [rax], al; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061e02: add byte ptr [rax], al; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed4: add byte ptr [rax], al; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f96: add byte ptr [rax], al; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062056: add byte ptr [rax], al; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062144: add byte ptr [rax], al; jne 0x62150; add rsp, 0xd8; ret; 
0x000000000006221b: add byte ptr [rax], al; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000062841: add byte ptr [rax], al; jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de5: add byte ptr [rax], al; jne 0x62df7; add rsp, 0x18; ret; 
0x000000000006316e: add byte ptr [rax], al; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063249: add byte ptr [rax], al; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c6: add byte ptr [rax], al; jne 0x864d2; add rsp, 0xd8; ret; 
0x0000000000086582: add byte ptr [rax], al; jne 0x8658e; add rsp, 0xd8; ret; 
0x000000000008667b: add byte ptr [rax], al; jne 0x86687; add rsp, 0xd8; ret; 
0x000000000008674b: add byte ptr [rax], al; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086804: add byte ptr [rax], al; jne 0x86810; add rsp, 0xd8; ret; 
0x0000000000089a4e: add byte ptr [rax], al; jne 0x89aea; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008a3fb: add byte ptr [rax], al; jne 0x8a4ec; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000008dbd6: add byte ptr [rax], al; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000093585: add byte ptr [rax], al; jne 0x93598; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000094601: add byte ptr [rax], al; jne 0x945ec; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x00000000000991fd: add byte ptr [rax], al; jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x000000000009d4da: add byte ptr [rax], al; jne 0x9d58f; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d5fd: add byte ptr [rax], al; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000c6809: add byte ptr [rax], al; jne 0xc686c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000c68e7: add byte ptr [rax], al; jne 0xc6945; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000c69b9: add byte ptr [rax], al; jne 0xc69ed; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ca0b1: add byte ptr [rax], al; jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000cab8e: add byte ptr [rax], al; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac69: add byte ptr [rax], al; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000cdfb9: add byte ptr [rax], al; jne 0xce00e; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000d01f1: add byte ptr [rax], al; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d026b: add byte ptr [rax], al; jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d1037: add byte ptr [rax], al; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000d1199: add byte ptr [rax], al; jne 0xd11fe; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000d42e4: add byte ptr [rax], al; jne 0xd42f0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000da6ba: add byte ptr [rax], al; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf8a: add byte ptr [rax], al; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000ddc53: add byte ptr [rax], al; jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce7: add byte ptr [rax], al; jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000de741: add byte ptr [rax], al; jne 0xde77a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000000df40d: add byte ptr [rax], al; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e1609: add byte ptr [rax], al; jne 0xe167c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e2e13: add byte ptr [rax], al; jne 0xe2e25; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000e3664: add byte ptr [rax], al; jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3834: add byte ptr [rax], al; jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418d: add byte ptr [rax], al; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422d: add byte ptr [rax], al; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44fd: add byte ptr [rax], al; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45ad: add byte ptr [rax], al; jne 0xe4613; add rsp, 0x38; ret; 
0x00000000000e49b2: add byte ptr [rax], al; jne 0xe4ed4; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000e4fc3: add byte ptr [rax], al; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e50e4: add byte ptr [rax], al; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e579e: add byte ptr [rax], al; jne 0xe597d; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000ee492: add byte ptr [rax], al; jne 0xee3bd; ret; 
0x00000000000440ee: add byte ptr [rax], al; lea eax, [rdx - 1]; mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x000000000019105e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000019106e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000019107e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000019108e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000019109e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000190fbd: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000190fee: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000190ffe: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000019100e: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000019101e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000019102e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000190f6a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000019103e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000019104e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000b14cd: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cf4eb: add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf64e: add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf66e: add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cf65e: add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x000000000009c20e: add byte ptr [rax], al; lea rax, [rdx - 0x10]; ret; 
0x000000000009f136: add byte ptr [rax], al; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x00000000000328be: add byte ptr [rax], al; lea rax, [rip + 0x181ab6]; ret; 
0x0000000000047f82: add byte ptr [rax], al; lea rax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x00000000001193f0: add byte ptr [rax], al; lea rax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x0000000000118ea8: add byte ptr [rax], al; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x000000000017e244: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000008e5b3: add byte ptr [rax], al; lea rcx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000118e9c: add byte ptr [rax], al; lea rcx, [rip + 0xd69cb]; call 0x1191a0; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000098da9: add byte ptr [rax], al; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa5: add byte ptr [rax], al; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a4d: add byte ptr [rax], al; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093923: add byte ptr [rax], al; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x000000000009101b: add byte ptr [rax], al; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f63: add byte ptr [rax], al; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x000000000004764d: add byte ptr [rax], al; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198cdd: add byte ptr [rax], al; lea rdi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x000000000019900d: add byte ptr [rax], al; lea rdi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x000000000014267d: add byte ptr [rax], al; lea rdi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e46: add byte ptr [rax], al; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x000000000009f6fb: add byte ptr [rax], al; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f19b: add byte ptr [rax], al; lea rdx, [rip + 0xc44fc]; cmovne rax, rdx; ret; 
0x000000000009f765: add byte ptr [rax], al; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a088e: add byte ptr [rax], al; lea rdx, [rip + 0xd03d9]; cmovne rax, rdx; ret; 
0x00000000000a07ee: add byte ptr [rax], al; lea rdx, [rip + 0xd0459]; cmovne rax, rdx; ret; 
0x00000000000a08de: add byte ptr [rax], al; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a083e: add byte ptr [rax], al; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x000000000009f7cb: add byte ptr [rax], al; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x00000000000a079b: add byte ptr [rax], al; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x00000000000a044c: add byte ptr [rax], al; lea rdx, [rip + 0xf0c5b]; cmovne rax, rdx; ret; 
0x00000000000578c6: add byte ptr [rax], al; leave; ret; 
0x000000000017acfe: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000001769ce: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000a8a56: add byte ptr [rax], al; mov byte ptr [rax], 0; ret; 
0x000000000011db43: add byte ptr [rax], al; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec44e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000ec47e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000ec48e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x0000000000189a33: add byte ptr [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000000ec443: add byte ptr [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000b849e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e5e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000000b76be: add byte ptr [rax], al; mov byte ptr [rdi], dh; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000529f0: add byte ptr [rax], al; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000b7b6e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b84be: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e7e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000baf3e: add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x000000000014d31e: add byte ptr [rax], al; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x00000000000a8a7e: add byte ptr [rax], al; mov dword ptr [rax], ecx; ret; 
0x000000000008fd8c: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x00000000001789ee: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001789de: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000001789be: add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000001576ff: add byte ptr [rax], al; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x000000000013b62c: add byte ptr [rax], al; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000000a8b4e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041d90: add byte ptr [rax], al; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b7e9e: add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000057c30: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000095230: add byte ptr [rax], al; mov dword ptr [rip + 0x157074], eax; ret; 
0x0000000000148537: add byte ptr [rax], al; mov dword ptr [rsi + 8], eax; ret; 
0x000000000010d288: add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000102865: add byte ptr [rax], al; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret; 
0x000000000016e02e: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84ae: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92ee: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b7b5e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000baf4e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000013bf15: add byte ptr [rax], al; mov eax, 0x102; cmovne eax, edx; ret; 
0x0000000000113d78: add byte ptr [rax], al; mov eax, 0x10; syscall; cmp rax, -0x1000; ja 0x113dd8; ret; 
0x000000000011f457: add byte ptr [rax], al; mov eax, 0x119; syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x00000000000e506a: add byte ptr [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f80: add byte ptr [rax], al; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000043407: add byte ptr [rax], al; mov eax, 0x7f; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000013cbde: add byte ptr [rax], al; mov eax, 0x7fffffff; ret; 
0x0000000000043453: add byte ptr [rax], al; mov eax, 0x82; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x00000000000f249e: add byte ptr [rax], al; mov eax, 0xc; ret; 
0x0000000000098da4: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa0: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a48: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x000000000009391e: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091016: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5e: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000047648: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198cd8: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x0000000000199008: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x0000000000142678: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e41: add byte ptr [rax], al; mov eax, 0xca; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x00000000000630a2: add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000013bed4: add byte ptr [rax], al; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000004653c: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x00000000000412bc: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246f4: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000dcfbc: add byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000192e1e: add byte ptr [rax], al; mov eax, 1; jg 0x192e30; neg eax; ret; 
0x00000000000cf07e: add byte ptr [rax], al; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x0000000000149eb5: add byte ptr [rax], al; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057b3f: add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000057d52: add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000011cf9e: add byte ptr [rax], al; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x0000000000047585: add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000017e0de: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000cef9e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x14]; cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000ceffe: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x24]; cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cef3e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x0000000000026f56: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140ed6: add byte ptr [rax], al; mov eax, dword ptr [rip + 0xaf8e6]; test eax, eax; je 0x140ee8; ret; 
0x0000000000125526: add byte ptr [rax], al; mov eax, dword ptr fs:[r12]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bc10e: add byte ptr [rax], al; mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000012fd26: add byte ptr [rax], al; mov eax, edi; and eax, 0xffffff; ret; 
0x000000000013cbca: add byte ptr [rax], al; mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000009d717: add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x00000000001259a5: add byte ptr [rax], al; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000015e553: add byte ptr [rax], al; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000011439a: add byte ptr [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000011755d: add byte ptr [rax], al; mov eax, r8d; add rsp, 8; ret; 
0x000000000015d184: add byte ptr [rax], al; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x000000000002f703: add byte ptr [rax], al; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000081a41: add byte ptr [rax], al; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000438ed: add byte ptr [rax], al; mov eax, r8d; pop rbx; ret; 
0x000000000008cd44: add byte ptr [rax], al; mov eax, r8d; ret; 
0x00000000000cef06: add byte ptr [rax], al; mov ecx, dword ptr [rsi + 0xc]; cmp dword ptr [rdi + 0xc], ecx; jne 0xcf080; xor eax, eax; ret; 
0x000000000018f9af: add byte ptr [rax], al; mov ecx, dword ptr [rsi - 4]; cmp ecx, dword ptr [rdi - 4]; jne 0x18fbe6; xor eax, eax; ret; 
0x00000000000b84de: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e9e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b7b8e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6eae: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000012357e: add byte ptr [rax], al; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000e50f4: add byte ptr [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4fe8: add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000011f50a: add byte ptr [rax], al; mov edx, 8; syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x000000000016df4e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dede: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016de6e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000000b6e8e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a8a86: add byte ptr [rax], al; mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a9e: add byte ptr [rax], al; mov edx, dword ptr [rsp - 0x18]; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x0000000000093919: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091011: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f59: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117e3c: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x000000000006309d: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000122249: add byte ptr [rax], al; mov esi, 1; call 0x1220e0; ret; 
0x0000000000123cd6: add byte ptr [rax], al; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000148eab: add byte ptr [rax], al; mov qword ptr [r12 + 0x30], rax; call 0x1578f0; mov rax, r12; pop r12; ret; 
0x0000000000092792: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x000000000015fb27: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015fadf: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000011d9ea: add byte ptr [rax], al; mov qword ptr [rbx + 0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000025b04: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000160022: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000178a2e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a3e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a4e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a5e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a6e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a7e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x0000000000178a1e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001789fe: add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x000000000015800a: add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000b7eae: add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000a86e9: add byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x00000000000b7eee: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7efe: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f0e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f1e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018a8de: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ede: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7ebe: add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x0000000000057b58: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000827f8: add byte ptr [rax], al; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000063017: add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000095209: add byte ptr [rax], al; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951e0: add byte ptr [rax], al; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951c0: add byte ptr [rax], al; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x000000000009393d: add byte ptr [rax], al; mov qword ptr [rip + 0x15ae7e], 0; ret; 
0x0000000000198c21: add byte ptr [rax], al; mov qword ptr [rip + 0x55b76], rbx; test rbx, rbx; jne 0x198c10; pop rbx; ret; 
0x000000000015d58c: add byte ptr [rax], al; mov qword ptr [rip + 0x93ba7], 0; add rsp, 8; ret; 
0x0000000000121e94: add byte ptr [rax], al; mov qword ptr [rip + 0xca4bf], 0; ret; 
0x0000000000121ac6: add byte ptr [rax], al; mov qword ptr [rip + 0xca88d], 0; add rsp, 8; ret; 
0x0000000000121a91: add byte ptr [rax], al; mov qword ptr [rip + 0xca8c2], 3; add rsp, 8; ret; 
0x00000000001178e4: add byte ptr [rax], al; mov qword ptr [rip + 0xd7e9f], 0; add rsp, 8; ret; 
0x00000000001160b7: add byte ptr [rax], al; mov qword ptr [rip + 0xd957c], 0; add rsp, 8; ret; 
0x000000000014842b: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], 2; test eax, eax; je 0x148440; xor eax, eax; ret; 
0x0000000000148528: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000048107: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048156: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000014855e: add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000148520: add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484c4: add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x000000000003454d: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000013f2ae: add byte ptr [rax], al; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x0000000000167b1e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000008cd3e: add byte ptr [rax], al; mov r8d, 1; mov eax, r8d; ret; 
0x00000000001484ce: add byte ptr [rax], al; mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x000000000013cb5e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000000042f2c: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cfb2e: add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000cfb3e: add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000cfb4e: add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000cfb5e: add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000cfb6e: add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000cfb7e: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000011d246: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000009271d: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x00000000000473c8: add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000009c1f6: add byte ptr [rax], al; mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000017e0ee: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000008ce26: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf6: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x000000000008ce13: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce3: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000150196: add byte ptr [rax], al; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x0000000000150166: add byte ptr [rax], al; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x00000000000dd146: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009808e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x153dd9]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000008d33e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008472e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000004832e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000043dee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d2e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c36: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b9e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004329e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004124e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000033d0e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x00000000000246e6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000012f62e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xbc839]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001221de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcd891]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011c706: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xcf761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118b16: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd3351]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115966: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd6501]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b46: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010de3e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde029]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc06: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde261]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde2c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db46: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde321]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d7be: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde6a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d75e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde709]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d6fe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0xde769]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012371e: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000328ce: add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x0000000000196b7a: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000004125c: add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000000d005f: add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x0000000000082c42: add byte ptr [rax], al; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000062655: add byte ptr [rax], al; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000001174a3: add byte ptr [rax], al; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000015d3e7: add byte ptr [rax], al; mov rax, r8; pop rbp; ret; 
0x0000000000099caf: add byte ptr [rax], al; mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000001535dd: add byte ptr [rax], al; mov rax, r8; pop rbx; ret; 
0x000000000009809f: add byte ptr [rax], al; mov rax, r8; ret; 
0x000000000018d601: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000188c4e: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000038c75: add byte ptr [rax], al; mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x000000000008f50b: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000090086: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b812e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000018b85e: add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x0000000000167ede: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680be: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016829e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016848e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016868e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016888e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167cfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b852e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ede: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b7bce: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b6eee: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000bbbf3: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000ff513: add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x28]; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000000f1fee: add byte ptr [rax], al; mov rdi, qword ptr [rsi + 0x28]; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000ee486: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000827f1: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000e2d5e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x109109]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d108e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x11add9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0eee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x11af79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062ece: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x188f99]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000434ae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x1a89b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004341e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x1a8a49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012e9de: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xbd489]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012142e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcaa39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012138e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcaad9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001211fe: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcac69]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120926: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcb541]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001207be: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcb6a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012059e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcb8c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012041e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcba49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f97e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc4e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc591]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f80e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc659]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6ae: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcc7b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011c6ee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xcf779]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ebe: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd4fa9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001154ce: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6999]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011540e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6a59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011520e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd6c59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dd6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8091]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011386e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd85f9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113836: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8631]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001132de: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8b89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113286: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xd8be1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010ea7e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xdd3e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e24e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xddc19]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010de26: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde041]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010dbee: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde279]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db2e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde339]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7a6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde6c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d746: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde721]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6e6: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xde781]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000016dd8e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dd1e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dcae: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dbce: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db5e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016daee: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6ece: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a46: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a896e: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000015f460: add byte ptr [rax], al; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000005b4ce: add byte ptr [rax], al; mov rsp, rdx; ret; 
0x0000000000113ea9: add byte ptr [rax], al; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000a898e: add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a8be: add byte ptr [rax], al; mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018a8ae: add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a8b1e: add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x000000000014d303: add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000048198: add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000041c13: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d286: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b7c4e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b7cbe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b70ae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b6f5e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000010d2eb: add byte ptr [rax], al; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d2f7: add byte ptr [rax], al; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000bbf2a: add byte ptr [rax], al; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7f2e: add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f3e: add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b3960: add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000148967: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + 0x18]; cmp eax, 3; jbe 0x148980; mov eax, 2; ret; 
0x0000000000047860: add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000013c556: add byte ptr [rax], al; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000000bbae9: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000001509e7: add byte ptr [rax], al; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000001500c4: add byte ptr [rax], al; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000087cc7: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000141d95: add byte ptr [rax], al; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x00000000000926bc: add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x00000000000919c3: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000014d2a1: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001500e9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001509f9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509d9: add byte ptr [rax], al; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010d263: add byte ptr [rax], al; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d26f: add byte ptr [rax], al; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010046c: add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000148549: add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x000000000014d1ae: add byte ptr [rax], al; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000018441b: add byte ptr [rax], al; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184455: add byte ptr [rax], al; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000091b3e: add byte ptr [rax], al; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000184288: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000019232e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000019231e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000019230e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001922fe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922ee: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001922de: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000192688: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x192805; xor eax, eax; ret; 
0x000000000018e65e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e411: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018507e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000019939e: add byte ptr [rax], al; movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x00000000000bc146: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x00000000000abeae: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000018462e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000018939e: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000189c0e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016e10e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000018a7be: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000018ae1e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000016e09e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000018938e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000154c29: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x0000000000122ac9: add byte ptr [rax], al; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000198d01: add byte ptr [rax], al; nop dword ptr [rax + rax]; ret; 
0x00000000000ac3bb: add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000157c1a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000155ecb: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 1; ret; 
0x00000000000342aa: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x0000000000094c3a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000146b2b: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x000000000010c8bb: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x00000000001769bb: add byte ptr [rax], al; nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000017898a: add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e4a: add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b7b4a: add byte ptr [rax], al; nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000017ad2a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000000cefcb: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x1c]; cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cef6b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 0xc]; cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x0000000000192d2b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; ret; 
0x000000000016d89a: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b931a: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x000000000017ac7b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017694b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000000b67ba: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x0000000000167b3a: add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001922cb: add byte ptr [rax], al; nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000000aa39b: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016da2a: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016d9aa: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000b7b3a: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000cf60b: add byte ptr [rax], al; nop dword ptr [rax]; test rax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000001886cb: add byte ptr [rax], al; nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac6eb: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001888eb: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000012da55: add byte ptr [rax], al; nop word ptr [rax + rax]; endbr64; ret; 
0x000000000012de08: add byte ptr [rax], al; nop word ptr [rax + rax]; ret; 
0x00000000000e40bc: add byte ptr [rax], al; nop; endbr64; mov eax, 0x27; syscall; ret; 
0x00000000000e43cd: add byte ptr [rax], al; nop; endbr64; mov eax, 0x6f; syscall; ret; 
0x000000000012027d: add byte ptr [rax], al; nop; endbr64; mov eax, 0xba; syscall; ret; 
0x000000000011fb7d: add byte ptr [rax], al; nop; endbr64; mov eax, 0xe4; syscall; ret; 
0x000000000014140c: add byte ptr [rax], al; nop; endbr64; mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000042a1d: add byte ptr [rax], al; nop; endbr64; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000424dd: add byte ptr [rax], al; nop; endbr64; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000001257cc: add byte ptr [rax], al; nop; endbr64; ret; 
0x0000000000190fdd: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fcd: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000017acec: add byte ptr [rax], al; nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b92dd: add byte ptr [rax], al; nop; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x00000000001789cc: add byte ptr [rax], al; nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e6d: add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e8c: add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7e7d: add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000b6e6c: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000cf04d: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x34]; cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x0000000000192cfd: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi - 0xc]; cmp eax, dword ptr [rsi - 0xc]; jne 0x192e20; ret; 
0x0000000000178a0d: add byte ptr [rax], al; nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b7ecd: add byte ptr [rax], al; nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000cfb1d: add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x000000000004305d: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018ab1d: add byte ptr [rax], al; nop; mov rax, rdi; vzeroupper; ret; 
0x00000000001789ad: add byte ptr [rax], al; nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017899c: add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5c: add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x00000000000b945c: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85fc: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000319bc: add byte ptr [rax], al; nop; ret; 
0x00000000000cf55d: add byte ptr [rax], al; nop; test rax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000001849bd: add byte ptr [rax], al; nop; vzeroupper; xor eax, eax; ret; 
0x00000000000baf2c: add byte ptr [rax], al; nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35c: add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000041fc7: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f97: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x0000000000057c27: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000117596: add byte ptr [rax], al; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x000000000008e65e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000061bc3: add byte ptr [rax], al; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000041ba5: add byte ptr [rax], al; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000ac0b9: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac5a0: add byte ptr [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000012d1b2: add byte ptr [rax], al; pop r12; pop rbp; ret; 
0x000000000009a497: add byte ptr [rax], al; pop rbp; mov rax, r8; pop r12; pop r13; ret; 
0x000000000006344d: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000060f0c: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000000436c8: add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000005b5ba: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000bc101: add byte ptr [rax], al; pop rbx; cmove rax, rdx; ret; 
0x00000000000875b6: add byte ptr [rax], al; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000010c726: add byte ptr [rax], al; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000099bd2: add byte ptr [rax], al; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000013c721: add byte ptr [rax], al; pop rbx; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x00000000001100ce: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop r14; ret; 
0x000000000004429b: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000043551: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832cd: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000002fddc: add byte ptr [rax], al; pop rbx; ret; 
0x00000000000900ae: add byte ptr [rax], al; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000010261c: add byte ptr [rax], al; push 0; call 0x102520; add rsp, 0x18; ret; 
0x0000000000093663: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000116fae: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000057bef: add byte ptr [rax], al; ret; 
0x000000000012fd16: add byte ptr [rax], al; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000000023a49: add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x0000000000041b1a: add byte ptr [rax], al; sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000000ce08e: add byte ptr [rax], al; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000018c883: add byte ptr [rax], al; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x0000000000102aa6: add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000e518e: add byte ptr [rax], al; setne al; ret; 
0x0000000000043b8c: add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043c24: add byte ptr [rax], al; shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000989cf: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000010c8aa: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000008ad3e: add byte ptr [rax], al; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3e: add byte ptr [rax], al; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000098d0a: add byte ptr [rax], al; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000137c17: add byte ptr [rax], al; sub dword ptr [rip + 0xb8818], 1; mov eax, r8d; pop rbp; ret; 
0x0000000000150a58: add byte ptr [rax], al; sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018e4fc: add byte ptr [rax], al; sub eax, ecx; ret; 
0x0000000000041b68: add byte ptr [rax], al; sub eax, edx; sar eax, 0x10; ret; 
0x000000000015d44e: add byte ptr [rax], al; sub ecx, 5; cmp cx, 3; jbe 0x15d460; ret; 
0x0000000000093596: add byte ptr [rax], al; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000001143d6: add byte ptr [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x000000000013c38f: add byte ptr [rax], al; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000092a26: add byte ptr [rax], al; sub rax, rcx; sub eax, 1; ret; 
0x00000000000bb931: add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000087df6: add byte ptr [rax], al; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000140ee6: add byte ptr [rax], al; sub rsp, 8; call 0x140970; or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x0000000000026f66: add byte ptr [rax], al; sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x000000000010c386: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c3f0; ret; 
0x000000000010c436: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10c4a0; ret; 
0x000000000010d6d6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x000000000010d735: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d748; ret; 
0x000000000010d796: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10d7a8; ret; 
0x000000000010db1e: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10db30; ret; 
0x000000000010db81: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10db90; ret; 
0x000000000010dbdb: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x000000000010de14: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x000000000010e293: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x000000000010e327: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000010e357: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e368; ret; 
0x000000000010ea33: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10ea80; ret; 
0x000000000010ebb3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10ec00; ret; 
0x0000000000112b83: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x112be0; ret; 
0x0000000000113206: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113288; ret; 
0x00000000001132ca: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1132e0; ret; 
0x000000000011330f: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113320; ret; 
0x0000000000113416: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113480; ret; 
0x00000000001134c6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113530; ret; 
0x0000000000113567: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113578; ret; 
0x000000000011385a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113870; ret; 
0x0000000000113897: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1138a8; ret; 
0x0000000000113d7d: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113dd8; ret; 
0x0000000000114603: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114660; ret; 
0x00000000001146a3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114700; ret; 
0x0000000000114749: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1147b8; ret; 
0x0000000000114809: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114878; ret; 
0x0000000000115196: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x115210; ret; 
0x00000000001153c3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x115410; ret; 
0x0000000000115483: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1154d0; ret; 
0x0000000000115543: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x115550; ret; 
0x0000000000116cc7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116eac: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116ec0; ret; 
0x0000000000116ee7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116ef8; ret; 
0x0000000000116f17: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x116f28; ret; 
0x0000000000118c03: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x118c60; ret; 
0x000000000011c6de: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11c6f0; ret; 
0x000000000011f3b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f3c8; ret; 
0x000000000011f45c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x000000000011f50f: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x000000000011f646: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f6b0; ret; 
0x000000000011f6f6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f7a6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f810; ret; 
0x000000000011f856: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f8d8; ret; 
0x000000000011f923: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f980; ret; 
0x000000000011fa4f: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11fa60; ret; 
0x00000000001202f3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120350; ret; 
0x00000000001203c3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120420; ret; 
0x000000000012052c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205e6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120660; ret; 
0x00000000001206a3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120700; ret; 
0x000000000012074c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1207c0; ret; 
0x0000000000120803: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120860; ret; 
0x00000000001208a6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120928; ret; 
0x0000000000120d06: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120d70; ret; 
0x0000000000120db6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120e28; ret; 
0x0000000000120e66: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120ed0; ret; 
0x00000000001210d6: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121140; ret; 
0x0000000000121186: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121200; ret; 
0x0000000000121237: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x0000000000121267: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121278; ret; 
0x00000000001212a7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1212b8; ret; 
0x000000000012137a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121390; ret; 
0x00000000001213b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1213c8; ret; 
0x00000000001213e7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1213f8; ret; 
0x000000000012141a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121430; ret; 
0x0000000000121457: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121468; ret; 
0x000000000004340c: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x0000000000043458: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x0000000000048223: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000062e87: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x0000000000062eba: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x00000000000d0dc7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000d0edc: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000dd121: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000e2c36: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2ce9: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000e2e43: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x0000000000102657: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102687: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102717: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000102747: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102777: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x000000000010d5f7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10d604; ret; 
0x000000000010dc27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc34; ret; 
0x000000000010dc57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010dd87: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dd94; ret; 
0x000000000010ddb7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ddc4; ret; 
0x000000000010de77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10de84; ret; 
0x000000000010dea7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10deb4; ret; 
0x000000000010e797: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10e7a4; ret; 
0x000000000010eab7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eac4; ret; 
0x000000000010eae7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x000000000010eb17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eb24; ret; 
0x000000000010eb47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eb54; ret; 
0x000000000010eb77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eb84; ret; 
0x000000000010ec37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ec44; ret; 
0x000000000010ec67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ec74; ret; 
0x000000000010f587: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f594; ret; 
0x000000000010f5b7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f5c4; ret; 
0x000000000010f5e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f5f4; ret; 
0x000000000010f61a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10f627; ret; 
0x000000000010fdd7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fde4; ret; 
0x000000000010fe0a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fe17; ret; 
0x000000000010fe37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fe44; ret; 
0x000000000010fe67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fe74; ret; 
0x000000000010fe97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fea4; ret; 
0x000000000010feca: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fed7; ret; 
0x000000000010fef7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ff04; ret; 
0x000000000010ff27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ff34; ret; 
0x000000000010ff57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10ff64; ret; 
0x00000000001131ca: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1131d7; ret; 
0x0000000000114007: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x114014; ret; 
0x0000000000114407: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x114414; ret; 
0x00000000001145c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1145d4; ret; 
0x0000000000115007: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115014; ret; 
0x0000000000115157: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115164; ret; 
0x0000000000115357: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115364; ret; 
0x0000000000115387: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115394; ret; 
0x0000000000115447: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115454; ret; 
0x0000000000115507: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115514; ret; 
0x0000000000115847: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115854; ret; 
0x0000000000115877: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115884; ret; 
0x00000000001158a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1158b4; ret; 
0x0000000000118b97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000118bc7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118bd4; ret; 
0x0000000000118c97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ca4; ret; 
0x0000000000118cc7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118cd4; ret; 
0x0000000000118cfa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118d07; ret; 
0x0000000000118d27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118d34; ret; 
0x0000000000118d57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118d64; ret; 
0x0000000000118d87: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118d94; ret; 
0x0000000000118db7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118dc4; ret; 
0x000000000011cfba: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cfc7; ret; 
0x000000000011cfe7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11cff4; ret; 
0x000000000011d017: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d024; ret; 
0x000000000011d04a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d057; ret; 
0x000000000011d07a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d087; ret; 
0x000000000011d0a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d0b4; ret; 
0x000000000011d0da: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d0e7; ret; 
0x000000000011d107: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d114; ret; 
0x000000000011d137: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d144; ret; 
0x000000000011d16a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d177; ret; 
0x000000000011d197: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d1a4; ret; 
0x000000000011d1ca: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11d1d7; ret; 
0x000000000011f207: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f214; ret; 
0x000000000011f237: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f244; ret; 
0x000000000011f387: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f394; ret; 
0x000000000011f3e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f417: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f424; ret; 
0x000000000011f547: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f554; ret; 
0x000000000011f5da: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f5e7; ret; 
0x000000000011f607: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f614; ret; 
0x000000000011fb27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fb57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fb64; ret; 
0x000000000011fb9a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fba7; ret; 
0x000000000011fbc7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x000000000011fbf7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc04; ret; 
0x000000000011fc27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc34; ret; 
0x000000000011fc57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc64; ret; 
0x000000000011fc87: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc94; ret; 
0x000000000011fcb7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fcc4; ret; 
0x000000000011fce7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x000000000011fd1a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd27; ret; 
0x000000000011fd47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd54; ret; 
0x000000000011fd7a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd87; ret; 
0x000000000011fda7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x000000000011fdd7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fde4; ret; 
0x000000000011fe07: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe14; ret; 
0x000000000011fe37: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe44; ret; 
0x000000000011fe67: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe74; ret; 
0x000000000011fe9a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fea7; ret; 
0x000000000011feca: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fed7; ret; 
0x000000000011fef7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff04; ret; 
0x000000000011ff27: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff34; ret; 
0x000000000011ff5a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff67; ret; 
0x000000000011ff8a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff97; ret; 
0x000000000011ffba: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000011ffe7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fff4; ret; 
0x0000000000120017: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120024; ret; 
0x0000000000120047: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120054; ret; 
0x0000000000120077: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000001200aa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1200b7; ret; 
0x00000000001200d7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1200e4; ret; 
0x0000000000120107: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120114; ret; 
0x000000000012013a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120147; ret; 
0x0000000000120167: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x000000000012019a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1201a7; ret; 
0x00000000001201ca: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1201d7; ret; 
0x00000000001201f7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120204; ret; 
0x0000000000120227: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120234; ret; 
0x0000000000120257: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120264; ret; 
0x0000000000120297: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1202a4; ret; 
0x0000000000120387: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120394; ret; 
0x0000000000120457: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120464; ret; 
0x0000000000120487: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120494; ret; 
0x00000000001204ba: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1204c7; ret; 
0x00000000001204e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1204f4; ret; 
0x000000000012096a: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120977; ret; 
0x0000000000120997: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1209a4; ret; 
0x00000000001209c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1209d4; ret; 
0x00000000001209fa: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120a07; ret; 
0x00000000000433d7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000439c7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x0000000000054efd: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41b7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000d41e7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e2b47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000e2d97: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000e3177: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e4127: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4377: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e43a7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e4407: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e4437: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4467: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4497: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x000000000010d34e: add byte ptr [rax], al; syscall; neg eax; ret; 
0x00000000000630a7: add byte ptr [rax], al; syscall; ret; 
0x000000000011f341: add byte ptr [rax], al; syscall; test rax, rax; jl 0x11f35d; je 0x11f34d; ret; 
0x0000000000190fb4: add byte ptr [rax], al; test ah, 0x40; jne 0x1910a0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190f62: add byte ptr [rax], al; test al, 0x40; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x00000000000cf4e3: add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000a09ee: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a067e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a051e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012db0e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbce: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc8e: add byte ptr [rax], al; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x0000000000190ed5: add byte ptr [rax], al; test dh, 0x40; jne 0x190e10; lea rax, [rdi + 0xf]; ret; 
0x0000000000190f1b: add byte ptr [rax], al; test dh, 4; jne 0x190e10; lea rax, [rdi + 0xb]; ret; 
0x0000000000190e52: add byte ptr [rax], al; test dl, 0x40; jne 0x190e10; lea rax, [rdi + 7]; ret; 
0x0000000000190e80: add byte ptr [rax], al; test dl, 4; jne 0x190e10; lea rax, [rdi + 3]; ret; 
0x0000000000148433: add byte ptr [rax], al; test eax, eax; je 0x148440; xor eax, eax; ret; 
0x0000000000117e16: add byte ptr [rax], al; test eax, eax; jne 0x117e28; sub dword ptr [rip + 0xd7a2d], 1; ret; 
0x0000000000118875: add byte ptr [rax], al; test eax, eax; jne 0x1188e0; sub dword ptr [rip + 0xd6fce], 1; add rsp, 8; ret; 
0x0000000000137e31: add byte ptr [rax], al; test eax, eax; jne 0x137ea0; sub dword ptr [rip + 0xb85fa], 1; add rsp, 8; ret; 
0x0000000000142612: add byte ptr [rax], al; test eax, eax; jne 0x142660; sub dword ptr [rip + 0xae3f9], 1; pop rbp; ret; 
0x000000000015cd4b: add byte ptr [rax], al; test eax, eax; jne 0x15cd80; sub dword ptr [rip + 0x94900], 1; add rsp, 8; ret; 
0x000000000015cf2b: add byte ptr [rax], al; test eax, eax; jne 0x15cf60; sub dword ptr [rip + 0x94720], 1; add rsp, 8; ret; 
0x0000000000198c91: add byte ptr [rax], al; test eax, eax; jne 0x198cc0; sub dword ptr [rip + 0x55b62], 1; pop rbx; ret; 
0x0000000000198fa2: add byte ptr [rax], al; test eax, eax; jne 0x198ff0; sub dword ptr [rip + 0x57569], 1; pop rbp; ret; 
0x00000000000475f3: add byte ptr [rax], al; test eax, eax; jne 0x47630; sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x00000000000949f1: add byte ptr [rax], al; test eax, eax; jne 0x94a30; sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x0000000000098d02: add byte ptr [rax], al; test eax, eax; jne 0x98d88; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000099f49: add byte ptr [rax], al; test eax, eax; jne 0x99f88; sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x00000000000d2906: add byte ptr [rax], al; test eax, eax; jne 0xd2940; sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x00000000000a059e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000012dd0e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000014b0cb: add byte ptr [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000000e5217: add byte ptr [rax], al; test edi, edi; js 0xe5220; ret; 
0x0000000000063084: add byte ptr [rax], al; test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f36: add byte ptr [rax], al; test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000090fea: add byte ptr [rax], al; test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000938f6: add byte ptr [rax], al; test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x000000000010c987: add byte ptr [rax], al; test si, 0xff00; jne 0x10c995; mov word ptr [rdi], si; xor eax, eax; ret; 
0x00000000001849de: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001849ce: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000190beb: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000189d40: add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000184e0e: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x0000000000042300: add byte ptr [rax], al; xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x0000000000041f54: add byte ptr [rax], al; xor dl, 0xf; adc dword ptr [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000d015c: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000162fbb: add byte ptr [rax], al; xor eax, eax; call 0x10e690; add rsp, 8; sar eax, 0x1f; ret; 
0x00000000000ee476: add byte ptr [rax], al; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000102a9e: add byte ptr [rax], al; xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000013b623: add byte ptr [rax], al; xor eax, eax; mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000018bfce: add byte ptr [rax], al; xor eax, eax; mov edx, dword ptr [rdi]; cmp edx, dword ptr [rsi]; jne 0x18bfbc; ret; 
0x000000000009ef38: add byte ptr [rax], al; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000008d8dc: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bc0ce: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000008e64d: add byte ptr [rax], al; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000040fc6: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000196c16: add byte ptr [rax], al; xor eax, eax; test r8d, r8d; jne 0x196b70; add rsp, 0x38; ret; 
0x000000000018461e: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000047d7a: add byte ptr [rax], al; xor eax, ecx; ret; 
0x0000000000042176: add byte ptr [rax], al; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x0000000000113f8e: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113fa0; ret; 
0x0000000000113fcf: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113fe0; ret; 
0x00000000000d107a: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000bb9e1: add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000122229: add byte ptr [rax], al; xor esi, esi; call 0x1220e0; ret; 
0x00000000000445bb: add byte ptr [rax], al; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x00000000000d006e: add byte ptr [rax], al; xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000008e306: add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08e: add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000127cfa: add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000340e8: add byte ptr [rax], cl; movzx eax, ax; ret; 
0x00000000000a0307: add byte ptr [rax], dl; lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x00000000000341c8: add byte ptr [rax], dl; movzx eax, ax; ret; 
0x00000000000832e5: add byte ptr [rax], r8b; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000145b2d: add byte ptr [rax], r8b; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000024e05: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000445c1: add byte ptr [rax], r8b; add rsp, 8; ret; 
0x0000000000148e3d: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000014b365: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000004245d: add byte ptr [rax], r8b; addss xmm0, xmm0; ret; 
0x00000000000ec49d: add byte ptr [rax], r8b; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x000000000017eead: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184d9d: add byte ptr [rax], r8b; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000057d5d: add byte ptr [rax], r8b; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002419d: add byte ptr [rax], r8b; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000148c9d: add byte ptr [rax], r8b; endbr64; mov eax, 2; ret; 
0x000000000008cd4d: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000004409d: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x000000000016367d: add byte ptr [rax], r8b; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937ed: add byte ptr [rax], r8b; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de28d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000951ed: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x00000000000243fd: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x000000000015cc5d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000013009d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x0000000000122acd: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011581d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000012221d: add byte ptr [rax], r8b; endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x000000000009381d: add byte ptr [rax], r8b; endbr64; ret; 
0x00000000000342bd: add byte ptr [rax], r8b; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014647d: add byte ptr [rax], r8b; endbr64; xor eax, eax; ret; 
0x0000000000041dcd: add byte ptr [rax], r8b; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x00000000000ec48d: add byte ptr [rax], r8b; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000b84bd: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000014d31d: add byte ptr [rax], r8b; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x00000000000baf4d: add byte ptr [rax], r8b; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000062e75: add byte ptr [rax], r8b; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000884b5: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x0000000000192e1d: add byte ptr [rax], r8b; mov eax, 1; jg 0x192e30; neg eax; ret; 
0x00000000000e5a95: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x00000000000ff75d: add byte ptr [rax], r8b; mov eax, 2; ret; 
0x0000000000026f55: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140ed5: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0xaf8e6]; test eax, eax; je 0x140ee8; ret; 
0x000000000012fd25: add byte ptr [rax], r8b; mov eax, edi; and eax, 0xffffff; ret; 
0x0000000000125b7d: add byte ptr [rax], r8b; mov eax, r8d; ret; 
0x00000000000b7b9d: add byte ptr [rax], r8b; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6e8d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a8a85: add byte ptr [rax], r8b; mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x000000000018a8dd: add byte ptr [rax], r8b; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000001573ed: add byte ptr [rax], r8b; mov r8d, 1; mov eax, r8d; ret; 
0x00000000001484cd: add byte ptr [rax], r8b; mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x000000000009c1f5: add byte ptr [rax], r8b; mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000008ce25: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf5: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000dd145: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043c35: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000246e5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000011c705: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xcf761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b45: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010de3d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde029]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc05: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde261]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde2c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db45: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde321]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d7bd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde6a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d75d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde709]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d6fd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0xde769]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011ce75: add byte ptr [rax], r8b; mov rax, r8; ret; 
0x000000000018d6bd: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000000b812d: add byte ptr [rax], r8b; mov rax, rdi; ret; 
0x00000000000b852d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6eed: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000ee485: add byte ptr [rax], r8b; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000001211fd: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcac69]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120925: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcb541]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f8d5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc591]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f80d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc659]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6ad: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcc7b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011c6ed: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xcf779]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dd5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd8091]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113285: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xd8be1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e24d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xddc19]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010db2d: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde339]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7a5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde6c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d745: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde721]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6e5: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0xde781]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b6ecd: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a45: add byte ptr [rax], r8b; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a896d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000014d285: add byte ptr [rax], r8b; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000013c555: add byte ptr [rax], r8b; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000019232d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000019231d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000019230d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001922fd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922ed: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001922dd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018507d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000018939d: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a7bd: add byte ptr [rax], r8b; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000008e65d: add byte ptr [rax], r8b; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000009e405: add byte ptr [rax], r8b; pop rbp; ret; 
0x00000000000926dd: add byte ptr [rax], r8b; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000010c725: add byte ptr [rax], r8b; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000148dd5: add byte ptr [rax], r8b; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116fad: add byte ptr [rax], r8b; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000002fd65: add byte ptr [rax], r8b; ret; 
0x000000000008ad3d: add byte ptr [rax], r8b; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3d: add byte ptr [rax], r8b; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000093595: add byte ptr [rax], r8b; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092a25: add byte ptr [rax], r8b; sub rax, rcx; sub eax, 1; ret; 
0x0000000000087df5: add byte ptr [rax], r8b; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000140ee5: add byte ptr [rax], r8b; sub rsp, 8; call 0x140970; or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x0000000000026f65: add byte ptr [rax], r8b; sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x00000000000a09ed: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a067d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a051d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012db0d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbcd: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc8d: add byte ptr [rax], r8b; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x00000000000a059d: add byte ptr [rax], r8b; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000012dd0d: add byte ptr [rax], r8b; test eax, eax; lea rdx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x00000000001849dd: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000010c785: add byte ptr [rax], r8b; xor eax, eax; pop rbx; ret; 
0x0000000000055bf5: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x000000000018461d: add byte ptr [rax], r8b; xor eax, eax; vzeroupper; ret; 
0x0000000000042175: add byte ptr [rax], r8b; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000a285d: add byte ptr [rax], r8b; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08d: add byte ptr [rax], r8b; xor rax, rax; ret; 
0x00000000000a880d: add byte ptr [rbp + 0x10], dh; add rax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x000000000014a544: add byte ptr [rbp + 0x10], dh; add rsp, 0x40; pop rbx; ret; 
0x000000000012109c: add byte ptr [rbp + 0x10], dh; add rsp, 0xa0; pop rbx; ret; 
0x000000000008dbd7: add byte ptr [rbp + 0x11], dh; add rsp, 0x48; ret; 
0x0000000000115a13: add byte ptr [rbp + 0x11], dh; add rsp, 0x58; ret; 
0x000000000010dd51: add byte ptr [rbp + 0x13], dh; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x00000000000d01f2: add byte ptr [rbp + 0x14], dh; add rsp, 0x28; ret; 
0x000000000012e16e: add byte ptr [rbp + 0x14], dh; add rsp, 0xd8; ret; 
0x00000000000a059f: add byte ptr [rbp + 0x158d48c0], al; xlatb; mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000015eb47: add byte ptr [rbp + 0x15], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000bcd51: add byte ptr [rbp + 0x15], dh; and ch, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x000000000013c937: add byte ptr [rbp + 0x16], dh; movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x000000000011f2d8: add byte ptr [rbp + 0x18], dh; add rsp, 0x68; ret; 
0x00000000000437cc: add byte ptr [rbp + 0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000010dcd4: add byte ptr [rbp + 0x18], dh; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000004439b: add byte ptr [rbp + 0x19], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000013e348: add byte ptr [rbp + 0x1a], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000043995: add byte ptr [rbp + 0x1a], dh; add rsp, 0x40; pop rbx; ret; 
0x00000000000623df: add byte ptr [rbp + 0x1a], dh; add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x000000000011653b: add byte ptr [rbp + 0x1a], dh; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000057b33: add byte ptr [rbp + 0x1a], dh; test rsi, rsi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000005b5b2: add byte ptr [rbp + 0x1b], dh; add rsp, 0x450; pop rbp; ret; 
0x0000000000151942: add byte ptr [rbp + 0x1c], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000044318: add byte ptr [rbp + 0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000e4fc4: add byte ptr [rbp + 0x1c], dh; mov eax, 0xfffa; ret; 
0x000000000005b874: add byte ptr [rbp + 0x1e], dh; add rsp, 0x38; ret; 
0x00000000000ca0b2: add byte ptr [rbp + 0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000015c7cd: add byte ptr [rbp + 0x1f], dh; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000013b6af: add byte ptr [rbp + 0x20850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000089072: add byte ptr [rbp + 0x21], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000147312: add byte ptr [rbp + 0x21], dh; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000154442: add byte ptr [rbp + 0x23], dh; add rsp, 0x28; ret; 
0x00000000001141ce: add byte ptr [rbp + 0x24], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000014471a: add byte ptr [rbp + 0x25850fc0], al; add al, byte ptr [rax]; add byte ptr [rdi], cl; mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000113cac: add byte ptr [rbp + 0x25], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x00000000001432fa: add byte ptr [rbp + 0x26], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x000000000004301b: add byte ptr [rbp + 0x26], dh; mov eax, r8d; add rsp, 0x118; ret; 
0x00000000000438e5: add byte ptr [rbp + 0x27], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x000000000013a86c: add byte ptr [rbp + 0x28], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001367ee: add byte ptr [rbp + 0x28], dh; add rsp, 0x38; ret; 
0x00000000000d273d: add byte ptr [rbp + 0x29], al; ret; 
0x00000000000d1038: add byte ptr [rbp + 0x29], dh; add rsp, 0x28; ret; 
0x00000000000c9e86: add byte ptr [rbp + 0x29dd75db], al; ret; 
0x0000000000043a89: add byte ptr [rbp + 0x2a], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000149893: add byte ptr [rbp + 0x2c], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000012b89f: add byte ptr [rbp + 0x2e], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000051ae9: add byte ptr [rbp + 0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015cce1: add byte ptr [rbp + 0x30], dh; add rsp, 0x18; ret; 
0x0000000000152ea5: add byte ptr [rbp + 0x30], dh; add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000000c0599: add byte ptr [rbp + 0x31], al; imul cl; ret; 
0x00000000000d006f: add byte ptr [rbp + 0x31], al; in al, 0x4c; mov eax, esp; pop r12; ret; 
0x000000000010d447: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000a1e07: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000a0393: add byte ptr [rbp + 0x31], al; in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x00000000000d0056: add byte ptr [rbp + 0x31], al; in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000009a4ff: add byte ptr [rbp + 0x31], al; rcr byte ptr [rbp + 0x41], 0x5c; mov rax, r8; pop r13; ret; 
0x0000000000099c8f: add byte ptr [rbp + 0x31], al; rcr byte ptr [rbx + 0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x00000000001051b2: add byte ptr [rbp + 0x31], al; rol byte ptr [rbp + 0x31], cl; in al, 0xeb; ret; 
0x000000000013f1ff: add byte ptr [rbp + 0x31], al; rol byte ptr [rcx + rcx*4 - 0x30], cl; ret; 
0x00000000000dd687: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; ret; 
0x00000000000a0b00: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x39], cl; ret; 
0x00000000000d4aa6: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x0000000000098096: add byte ptr [rbp + 0x31], al; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000015cfd8: add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000149931: add byte ptr [rbp + 0x31], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000002f829: add byte ptr [rbp + 0x31], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000015d3df: add byte ptr [rbp + 0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x0000000000062727: add byte ptr [rbp + 0x33], dh; add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000001478fe: add byte ptr [rbp + 0x34], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000024488: add byte ptr [rbp + 0x35], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000436c0: add byte ptr [rbp + 0x35], dh; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000de742: add byte ptr [rbp + 0x35], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000000e14a3: add byte ptr [rbp + 0x36], dh; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000115b63: add byte ptr [rbp + 0x37], dh; add rsp, 0x68; ret; 
0x000000000015fc33: add byte ptr [rbp + 0x38], dh; add rsp, 0x58; ret; 
0x00000000000c9ee2: add byte ptr [rbp + 0x391974db], al; ret; 
0x00000000000c9fd7: add byte ptr [rbp + 0x391c74db], al; ret; 
0x00000000001973dd: add byte ptr [rbp + 0x39], cl; ret; 
0x0000000000116d87: add byte ptr [rbp + 0x3b], dh; add rsp, 0x38; ret; 
0x0000000000116e56: add byte ptr [rbp + 0x3c], dh; add rsp, 0x38; ret; 
0x000000000015ff9c: add byte ptr [rbp + 0x3d], dh; add rsp, 0x38; ret; 
0x0000000000155fb0: add byte ptr [rbp + 0x3f], dh; add rsp, 0x10; pop rbx; ret; 
0x0000000000149320: add byte ptr [rbp + 0x40], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000015288a: add byte ptr [rbp + 0x40], dh; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x000000000006344e: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000060f0d: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000436c9: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000001564d0: add byte ptr [rbp + 0x41], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000991fe: add byte ptr [rbp + 0x41], dh; add rsp, 0x40; pop rbp; ret; 
0x00000000000e3665: add byte ptr [rbp + 0x41], dh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000156080: add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbp; ret; 
0x00000000001574b0: add byte ptr [rbp + 0x42], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000004322f: add byte ptr [rbp + 0x42], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000156730: add byte ptr [rbp + 0x46], dh; add rsp, 0x10; pop rbx; ret; 
0x000000000013ca0c: add byte ptr [rbp + 0x46], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000121322: add byte ptr [rbp + 0x46], dh; add rsp, 0x58; ret; 
0x00000000001135ea: add byte ptr [rbp + 0x46], dh; add rsp, 0x68; ret; 
0x0000000000113679: add byte ptr [rbp + 0x47], dh; add rsp, 0x18; ret; 
0x0000000000113731: add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x000000000015fd2a: add byte ptr [rbp + 0x47], dh; add rsp, 0x68; ret; 
0x000000000014b1df: add byte ptr [rbp + 0x480c74d2], al; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009f859: add byte ptr [rbp + 0x481275c0], al; lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009e2f4: add byte ptr [rbp + 0x485774c0], al; add esp, 8; pop rbp; pop r12; ret; 
0x000000000010f524: add byte ptr [rbp + 0x49], dh; add rsp, 0x130; pop rbp; ret; 
0x00000000001137cf: add byte ptr [rbp + 0x49], dh; add rsp, 0x58; ret; 
0x00000000001157c8: add byte ptr [rbp + 0x4a], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d4a8a: add byte ptr [rbp + 0x4c1175c0], al; mov eax, eax; add rsp, 8; ret; 
0x000000000009a498: add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x00000000001565ef: add byte ptr [rbp + 0x4e], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fed3: add byte ptr [rbp + 0x4e], dh; add rsp, 0x68; ret; 
0x0000000000160b7b: add byte ptr [rbp + 0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000005b059: add byte ptr [rbp + 0x51], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000df40e: add byte ptr [rbp + 0x52], dh; add rsp, 0x38; ret; 
0x00000000001029a0: add byte ptr [rbp + 0x53], dh; add rsp, 0x38; ret; 
0x000000000013ceba: add byte ptr [rbp + 0x54], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000440ef: add byte ptr [rbp + 0x589ff42], cl; scasd eax, dword ptr [rdi]; sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x0000000000051c67: add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000114bae: add byte ptr [rbp + 0x5a], dh; add rsp, 0x38; ret; 
0x00000000001150df: add byte ptr [rbp + 0x5d], dh; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x0000000000051b99: add byte ptr [rbp + 0x5f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000006264d: add byte ptr [rbp + 0x61], dh; add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000113f15: add byte ptr [rbp + 0x61], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d119a: add byte ptr [rbp + 0x61], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000e44fe: add byte ptr [rbp + 0x62], dh; add rsp, 0x38; ret; 
0x00000000000bd5c6: add byte ptr [rbp + 0x67], dh; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000081a39: add byte ptr [rbp + 0x69], dh; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000081bf7: add byte ptr [rbp + 0x6b], dh; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000151f0b: add byte ptr [rbp + 0x6c], dh; add rsp, 0x30; pop rbx; ret; 
0x00000000000e160a: add byte ptr [rbp + 0x6f], dh; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000151dc4: add byte ptr [rbp + 0x6f], dh; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x00000000001525a2: add byte ptr [rbp + 0x71], dh; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x0000000000151c94: add byte ptr [rbp + 0x73], dh; add rsp, 0x10; pop r12; ret; 
0x0000000000114d03: add byte ptr [rbp + 0x75], dh; add rsp, 0x38; ret; 
0x00000000001526e1: add byte ptr [rbp + 0x76], dh; add rsp, 0x28; pop rbx; pop r12; ret; 
0x000000000014768d: add byte ptr [rbp + 0x77], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013e580: add byte ptr [rbp + 0x7850fff], al; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000098d03: add byte ptr [rbp + 0x7c850fc0], al; add byte ptr [rax], al; add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000062562: add byte ptr [rbp + 0x7c], dh; add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000112c74: add byte ptr [rbp + 0x7f], dh; add rsp, 0x40; pop r12; ret; 
0x000000000011cd39: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000012f7b7: add byte ptr [rbp + 0xb], dh; add rsp, 0x28; ret; 
0x0000000000113d1c: add byte ptr [rbp + 0xc], dh; add rsp, 0x18; ret; 
0x0000000000043549: add byte ptr [rbp + 0xc], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120a89: add byte ptr [rbp + 0xc], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042351: add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x000000000008cd23: add byte ptr [rbp + 0xc], dh; xor r8d, r8d; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x000000000006234f: add byte ptr [rbp + 0xd], dh; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x0000000000086ba4: add byte ptr [rbp + 0xd], dh; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x000000000012e078: add byte ptr [rbp + 0xd], dh; add rsp, 0xd8; ret; 
0x0000000000062de6: add byte ptr [rbp + 0xe], dh; add rsp, 0x18; ret; 
0x00000000000e2e14: add byte ptr [rbp + 0xe], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001524d2: add byte ptr [rbp + 0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000005648f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000005637f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x00000000000435c3: add byte ptr [rbp + 0xf], dh; add rsp, 0x118; ret; 
0x0000000000093586: add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000005503d: add byte ptr [rbp + 3], dh; push r10; ret; 
0x0000000000042b94: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000047442: add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000013688b: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000155eb5: add byte ptr [rbp + 5], dh; add rsp, 0x48; ret; 
0x0000000000153c04: add byte ptr [rbp + 5], dh; add rsp, 0x78; ret; 
0x000000000010d54f: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000157e79: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbx; ret; 
0x00000000000d026c: add byte ptr [rbp + 6], dh; add rsp, 0x40; pop rbp; ret; 
0x0000000000144bdc: add byte ptr [rbp + 7], dh; add rsp, 0x10; pop r12; ret; 
0x000000000004736e: add byte ptr [rbp + 7], dh; pop rbx; ret; 
0x0000000000042eee: add byte ptr [rbp + 8], dh; add rsp, 0x148; ret; 
0x00000000000d42e5: add byte ptr [rbp + 8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x000000000011c1ea: add byte ptr [rbp + 8], dh; add rsp, 0x418; ret; 
0x0000000000043751: add byte ptr [rbp + 8], dh; add rsp, 0x98; ret; 
0x0000000000044421: add byte ptr [rbp + 8], dh; add rsp, 0xa8; ret; 
0x0000000000052c04: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x00000000000e50e5: add byte ptr [rbp + 8], dh; mov eax, 0x40; ret; 
0x0000000000157dac: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x18; ret; 
0x000000000010fdb2: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000062842: add byte ptr [rbp + 9], dh; add rsp, 0x1010; pop rbp; ret; 
0x0000000000160c39: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157d38: add byte ptr [rbp + 9], dh; add rsp, 0x90; pop rbx; ret; 
0x00000000000ddc54: add byte ptr [rbp + 9], dh; add rsp, 0xe0; pop rbx; ret; 
0x000000000007a3b6: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000001932ef: add byte ptr [rbp + rcx*4 + 0x5f], cl; add dword ptr [rcx - 9], eax; ret; 
0x00000000000bcd75: add byte ptr [rbp + rcx*8 + 0x48], dh; lea eax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0465: add byte ptr [rbp + rcx*8 + 0x48], dh; lea eax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd74: add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0464: add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x0000000000094665: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000012d114: add byte ptr [rbp - 0x16], dh; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000009563c: add byte ptr [rbp - 0x17], dh; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000094602: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x000000000006d7b4: add byte ptr [rbp - 0x297af040], al; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000023a64: add byte ptr [rbp - 0x2c], dh; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x000000000005ea2f: add byte ptr [rbp - 0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000023a74: add byte ptr [rbp - 0x3c], dh; ret; 
0x00000000000246d2: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000014b0cc: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x0000000000062e65: add byte ptr [rbp - 0x3f6af040], al; movzx eax, al; neg eax; pop rbp; ret; 
0x000000000010c11c: add byte ptr [rbp - 0x76b7febd], cl; ret; 
0x0000000000118929: add byte ptr [rbp - 0x76f98b01], al; cmp eax, 0xd3a14; ret; 
0x000000000002ca04: add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000428a5: add byte ptr [rbp - 0x79], dh; movdqa xmm1, xmm0; call 0x192eb0; add rsp, 0x10; pop rbx; ret; 
0x000000000009d5d8: add byte ptr [rbp - 0x7acc812e], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000001395c4: add byte ptr [rbp - 0x7b], al; dec dword ptr [rdi]; test dl, bl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000006d15a: add byte ptr [rbp - 0x7b], al; dec dword ptr [rdi]; test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000155c90: add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x0000000000028239: add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; ret; 
0x00000000001972b1: add byte ptr [rbp - 0x7b], al; sal byte ptr [rbp + 0x7b], cl; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000052ac2: add byte ptr [rbp - 0x7b], al; sal byte ptr [rsp + rsi*2 - 0x41], 1; add byte ptr [rip - 0x2711800], al; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000049b3b: add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], -0x7c; ret; 
0x0000000000117862: add byte ptr [rbp - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x83; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7f1d], eax; mov rax, r8; ret; 
0x000000000015d435: add byte ptr [rbp - 0x7c99008e], cl; inc byte ptr [rbx]; ja 0x15d450; cmp dx, cx; sete al; ret; 
0x0000000000125b10: add byte ptr [rbp - 0x7cc48a40], al; sub eax, 0xca1f0; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x000000000015ce92: add byte ptr [rbp - 0x7cc68a40], al; sub eax, 0x947ba; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000006104d: add byte ptr [rbp - 0x7cc98a40], al; sub eax, 0x18d6f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x000000000002fdb7: add byte ptr [rbp - 0x7cdb8140], al; call 0x84586c3; pop rbx; ret; 
0x0000000000118608: add byte ptr [rbp - 0x8f38b25], al; ret; 
0x0000000000054337: add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x00000000000295dc: add byte ptr [rbp - 0xc7af040], al; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000000e4f98: add byte ptr [rbp], bh; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x00000000000e4802: add byte ptr [rbp], bh; add cl, ch; ret; 
0x0000000000184d7a: add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x0000000000180139: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000098d0b: add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000911f7: add byte ptr [rbx + 0x158901ea], al; ret; 
0x00000000000938a5: add byte ptr [rbx + 0x15af1705], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000008ac4f: add byte ptr [rbx + 0x1789cfe2], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000117e2f: add byte ptr [rbx + 0x17f01f8], al; ret; 
0x000000000009c1eb: add byte ptr [rbx + 0x22], dh; lea rax, [rax - 8]; ret; 
0x0000000000061bc4: add byte ptr [rbx + 0x28907c8], al; mov eax, 1; ret; 
0x00000000000baf7f: add byte ptr [rbx + 0x30178916], cl; in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000900af: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000b850f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b935f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ebf: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000001100cf: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000008254e: add byte ptr [rbx + 0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000b932f: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b8f: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000013bee4: add byte ptr [rbx + 0x45740aff], al; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000cef3f: add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000cef6f: add byte ptr [rbx + 0x463b0c47], cl; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000192d2f: add byte ptr [rbx + 0x463bfc47], cl; cld; jne 0x192e20; ret; 
0x000000000010dac6: add byte ptr [rbx + 0x47426f8], al; mov eax, r9d; ret; 
0x00000000000b84df: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e9f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000018e380: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x000000000017ad2f: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000017e0df: add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x00000000001370f8: add byte ptr [rbx + 0x4804c244], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000157a03: add byte ptr [rbx + 0x48082444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000004349d: add byte ptr [rbx + 0x48082444], cl; add esp, 0x18; ret; 
0x000000000018ae4f: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b931f: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 4]; ret; 
0x00000000000bc102: add byte ptr [rbx + 0x48], bl; cmove eax, edx; ret; 
0x00000000000b771f: add byte ptr [rbx + 0x49178916], cl; sub eax, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x0000000000029b44: add byte ptr [rbx + 0x4be02e0], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000099bd3: add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000001688af: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001686af: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001684af: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001925db: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x1927f0; xor eax, eax; ret; 
0x000000000018e5e2: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x000000000018f9b0: add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18fbe6; xor eax, eax; ret; 
0x000000000016d89f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000000ec812: add byte ptr [rbx + 0x5b010447], al; pop rbp; pop r12; ret; 
0x000000000008b645: add byte ptr [rbx + 0x5d], bl; mov eax, r8d; pop r12; ret; 
0x00000000000635d4: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000004429c: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000030080: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000832ce: add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000bb3cf: add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x000000000010d318: add byte ptr [rbx + 0x87702fe], al; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x00000000000bc6f0: add byte ptr [rbx + 0xa7401f8], al; cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x0000000000137c18: add byte ptr [rbx + 0xb88182d], al; add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x0000000000121f1b: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000013c545: add byte ptr [rbx + 0xd7401f8], al; test eax, eax; jne 0x13c568; mov eax, r8d; ret; 
0x000000000016df4f: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dedf: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016de6f: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000102574: add byte ptr [rbx + 0xed00d0d], cl; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x000000000014e386: add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x00000000000e51f6: add byte ptr [rbx + rax*4 + 0x38], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000101935: add byte ptr [rbx + rcx*4 + 0x63], cl; and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000045eef: add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000011f9d4: add byte ptr [rbx + rcx*4 + 2], ah; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x0000000000062f26: add byte ptr [rbx + rcx*4 + 2], ah; cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000007b9ab: add byte ptr [rbx + rcx*4 - 0x5b], cl; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000000531a7: add byte ptr [rbx + rcx*4 - 0x74], cl; and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000010dac3: add byte ptr [rbx + rcx*4], ah; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x0000000000048306: add byte ptr [rbx + rcx*4], ah; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x00000000000fec9a: add byte ptr [rbx + rcx*4], cl; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000edf65: add byte ptr [rbx - 0x157cfe15], al; add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000150a76: add byte ptr [rbx - 0x37f0efc0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150aae: add byte ptr [rbx - 0x37f0f3c0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150a59: add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000116f6d: add byte ptr [rbx - 0x387c0f19], al; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000094725: add byte ptr [rbx - 0x39], bl; add eax, 0x15cd5f; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000878cf: add byte ptr [rbx - 0x3b7cb7ff], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000048309: add byte ptr [rbx - 0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x000000000011cf9f: add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x000000000014132a: add byte ptr [rbx - 0x3f7ae7c0], cl; jne 0x141338; ret; 
0x000000000010c727: add byte ptr [rbx - 0x48], bl; or dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000013f6ac: add byte ptr [rbx - 0x49f0fe0d], al; ret; 
0x00000000000ec49f: add byte ptr [rbx - 0x688bfb1e], al; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000192f9b: add byte ptr [rbx - 0x70f0c006], al; ret; 
0x00000000000a7abb: add byte ptr [rbx - 0x71f08005], 0x45; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000a5dbb: add byte ptr [rbx - 0x71f08005], 0x53; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000f0b04: add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x00000000000473cc: add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000017ad3f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000001769ff: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000a8a87: add byte ptr [rbx - 0x760fdbac], cl; adc byte ptr [rdi], cl; mov dh, 0x54; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a9f: add byte ptr [rbx - 0x7617dbac], cl; adc byte ptr [rdi], cl; mov bh, 0x54; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x0000000000150a36: add byte ptr [rbx - 0x7637f100], cl; ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x00000000000c9f57: add byte ptr [rbx - 0x76b30383], cl; out 0x89, al; ret; 
0x000000000013c390: add byte ptr [rbx - 0x77bffe12], al; ja 0x13c399; ret; 
0x0000000000102e47: add byte ptr [rbx - 0x7bf00001], al; ret; 
0x0000000000024238: add byte ptr [rbx - 0x7bf00008], al; out 0, al; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000000bf1e3: add byte ptr [rbx - 0x7bf0cf03], al; ret; 
0x000000000003e1c7: add byte ptr [rbx - 0x7bf0fc08], al; xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x00000000000ef95d: add byte ptr [rbx - 0x7bf0fd02], al; mov dword ptr [rax + rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000039f2b: add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000015d44f: add byte ptr [rbx - 0x7c99fa17], al; stc; add esi, dword ptr [rsi + 7]; ret; 
0x000000000012c747: add byte ptr [rbx - 0x7cb7e7ad], cl; ret; 
0x0000000000141609: add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001414d7: add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x00000000000e8837: add byte ptr [rbx - 0x7cb7f7bd], cl; ret; 
0x00000000000bca8f: add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x0000000000060caf: add byte ptr [rbx - 0x7cb7fbbd], cl; ret; 
0x00000000001892f3: add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000006dc70: add byte ptr [rbx - 0x9bef71d], al; ret; 
0x000000000005b15c: add byte ptr [rbx - 4], dh; dec dword ptr [rcx - 0x77]; ret; 
0x00000000001170f3: add byte ptr [rbx], ah; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000093597: add byte ptr [rbx], ch; push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000000d005c: add byte ptr [rbx], cl; add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x00000000000d0159: add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000012357f: add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123327: add byte ptr [rcx + 0x107223c6], cl; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000012fdb7: add byte ptr [rcx + 0x18e8c1f8], cl; ret; 
0x000000000014d312: add byte ptr [rcx + 0x1b802], cl; add byte ptr [rax], al; ret; 
0x00000000000ec843: add byte ptr [rcx + 0x1b828], cl; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d4229: add byte ptr [rcx + 0x1eb850c7], al; add eax, 0xcac1fa89; add al, byte ptr [rcx - 0x70a3d706]; add dh, byte ptr [rsi + 3]; ret; 
0x0000000000194f41: add byte ptr [rcx + 0x21], cl; ret; 
0x00000000000d6beb: add byte ptr [rcx + 0x29], al; ret; 
0x000000000008973f: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x00000000000822e7: add byte ptr [rcx + 0x31c289df], cl; shr al, 0x9d; ret; 
0x00000000001789ef: add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000bc0d7: add byte ptr [rcx + 0x358d48d0], cl; ret; 
0x000000000002c13b: add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x00000000000f875b: add byte ptr [rcx + 0x39], al; ret; 
0x000000000005f36b: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000157ffa: add byte ptr [rcx + 0x47894817], cl; or byte ptr [rax - 0x77], cl; ja 0x15801d; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000102639: add byte ptr [rcx + 0x51], al; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025f9: add byte ptr [rcx + 0x51], al; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x000000000010257a: add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x00000000001193a8: add byte ptr [rcx + 0x5c], al; pop r13; ret; 
0x000000000012d1b3: add byte ptr [rcx + 0x5c], al; pop rbp; ret; 
0x000000000011936f: add byte ptr [rcx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000cd81a: add byte ptr [rcx + 0x63], cl; ret; 
0x00000000000ff2bc: add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x0000000000092717: add byte ptr [rcx + 0x807448], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x00000000000a3fe8: add byte ptr [rcx + 0xf], 0x93; ret; 
0x00000000001509e8: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 0x20], edx; ret; 
0x00000000001500c5: add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000eb75f: add byte ptr [rcx + 0xf], al; mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000005b3bf: add byte ptr [rcx + 0xf], al; mov dh, 0x43; add dword ptr [rax + rax*8 - 0x7cb6f78c], eax; ret; 
0x0000000000095175: add byte ptr [rcx + 1], al; adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000000531af: add byte ptr [rcx + 1], cl; ret; 
0x000000000015cd53: add byte ptr [rcx + 9], cl; add byte ptr [rcx], al; add rsp, 8; ret; 
0x0000000000125527: add byte ptr [rcx + rax*2 - 0x75], ah; add al, 0x24; pop rbx; pop rbp; pop r12; ret; 
0x000000000010717a: add byte ptr [rcx + rbx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000118601: add byte ptr [rcx + rcx*4 + 0x25], al; push rdi; jb 0x118615; add byte ptr [rbp - 0x8f38b25], al; ret; 
0x00000000000cb184: add byte ptr [rcx + rcx*4 + 0x42], 4; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000a89b7: add byte ptr [rcx + rcx*4 + 7], al; add rax, rdi; ret; 
0x00000000000a8748: add byte ptr [rcx + rcx*4 + 7], cl; mov rax, r12; pop r12; ret; 
0x0000000000114f89: add byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009d718: add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x00000000001259a6: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; pop r13; ret; 
0x000000000015e554: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x000000000010e602: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000011439b: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0060: add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000082c43: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000062656: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x00000000000dddf4: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001174a4: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000004125d: add byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000197331: add byte ptr [rcx + rcx*4 - 0x29], al; call 0x197440; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000038c76: add byte ptr [rcx + rcx*4 - 0x38], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196b6f: add byte ptr [rcx + rcx*4 - 0x39], al; mov qword ptr [rsp], rax; call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000151dca: add byte ptr [rcx + rcx*4 - 0x40], 0x5d; ret; 
0x000000000011755e: add byte ptr [rcx + rcx*4 - 0x40], al; add rsp, 8; ret; 
0x000000000015d185: add byte ptr [rcx + rcx*4 - 0x40], al; mov qword ptr [rdx], 0; ret; 
0x00000000000a22e1: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000002f704: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; ret; 
0x0000000000081a42: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000000438ee: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x0000000000088044: add byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000046c18: add byte ptr [rcx + rcx*4 - 0x40], cl; add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001178a2: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; ret; 
0x000000000015d3e8: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x000000000014fae3: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000099cb0: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000001535de: add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; ret; 
0x00000000000980a0: add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000018d602: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000188c4f: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x00000000001093cd: add byte ptr [rcx + rcx*4 - 0x4c], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008561e: add byte ptr [rcx + rdi + 0x5b], dh; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000047c96: add byte ptr [rcx - 0x1e], al; jg 0x47c27; adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x000000000014d31f: add byte ptr [rcx - 0x39], al; add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000051448: add byte ptr [rcx - 0x39], cl; ret; 
0x000000000008cd3f: add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000002c0f0: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000014d36f: add byte ptr [rcx - 0x75], al; cmp byte ptr [rax + 0xf000000], 0xc8; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000ecafd: add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 + 0x63], r9b; ret; 
0x0000000000104999: add byte ptr [rcx - 0x75], cl; add r8b, r13b; pop rbp; ret; 
0x000000000007f1c7: add byte ptr [rcx - 0x75], cl; push rdi; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x0000000000157700: add byte ptr [rcx - 0x76b7d7b9], cl; ja 0x157720; mov eax, r8d; ret; 
0x0000000000095199: add byte ptr [rcx - 0x77], al; imul esp, dword ptr [rbx*2 + 0x10438941], 0x41; mov dword ptr [rbx + 0x14], 0; ret; 
0x0000000000023d2b: add byte ptr [rcx - 0x77], al; ret; 
0x00000000000627a2: add byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x77], 0xd8; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x00000000000288e7: add byte ptr [rcx - 0x77], cl; add ecx, dword ptr [rax - 0x77]; ror dword ptr [rax + 0x39], 1; ret; 
0x0000000000148eac: add byte ptr [rcx - 0x77], cl; and al, 0x30; call 0x1578f0; mov rax, r12; pop r12; ret; 
0x000000000008593c: add byte ptr [rcx - 0x77], cl; call 0xffffffffcbf36ccf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000008e2f9: add byte ptr [rcx - 0x77], cl; call 0xffffffffcef3f68c; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000ff807: add byte ptr [rcx - 0x77], cl; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000038e17: add byte ptr [rcx - 0x77], cl; fisttp word ptr [rax - 0x7d]; ret; 
0x000000000011ce69: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x40]; pop rbx; ret; 
0x000000000009811a: add byte ptr [rcx - 0x77], cl; push rcx; or byte ptr [rax + 0x39], cl; ret; 
0x000000000007dce0: add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000197421: add byte ptr [rcx - 0x7b], cl; ret; 
0x000000000005d9df: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000013e588: add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000053be9: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000018886b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000012c6ef: add byte ptr [rcx - 0x877b], cl; dec dword ptr [rax - 0x7d]; ret; 
0x00000000001395cd: add byte ptr [rcx - 0xa], al; ret; 
0x000000000012fd27: add byte ptr [rcx - 0xda08], cl; inc dword ptr [rax]; ret; 
0x000000000007bad1: add byte ptr [rcx - 5], al; jg 0x7bae8; test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000006c6b9: add byte ptr [rcx - 9], al; ret; 
0x000000000015f45e: add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000095206: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000951dd: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x00000000000951bd: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x0000000000149136: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009d714: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x000000000003448d: add byte ptr [rcx], al; add byte ptr [rax], al; and eax, esi; ret; 
0x0000000000190d14: add byte ptr [rcx], al; add byte ptr [rax], al; cmp rdx, rcx; jne 0x190cf6; vzeroupper; ret; 
0x00000000000e5068: add byte ptr [rcx], al; add byte ptr [rax], al; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000113ea7: add byte ptr [rcx], al; add byte ptr [rax], al; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000061bc1: add byte ptr [rcx], al; add byte ptr [rax], al; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000013bf2a: add byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000000bb92f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x00000000000bb9df: add byte ptr [rcx], al; add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000015cdf0: add byte ptr [rcx], al; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000046e69: add byte ptr [rcx], al; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000138164: add byte ptr [rcx], al; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x000000000009c6a5: add byte ptr [rcx], al; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000004779c: add byte ptr [rcx], al; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000046c22: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d2911: add byte ptr [rcx], al; add rsp, 8; ret; 
0x00000000000a0474: add byte ptr [rcx], al; je 0xa0435; ret; 
0x00000000000bcd84: add byte ptr [rcx], al; je 0xbcd45; ret; 
0x000000000011d943: add byte ptr [rcx], al; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000131943: add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000000dfc2d: add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfdf8: add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d5: add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000015e333: add byte ptr [rcx], al; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000125b1a: add byte ptr [rcx], al; mov eax, r8d; add rsp, 8; ret; 
0x0000000000137c1e: add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x0000000000061057: add byte ptr [rcx], al; mov eax, r8d; pop rbx; ret; 
0x0000000000102a82: add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x000000000015ce9c: add byte ptr [rcx], al; mov rax, r8; pop rbp; ret; 
0x00000000000341a8: add byte ptr [rcx], al; movzx eax, ax; ret; 
0x00000000000475fe: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000054cd5: add byte ptr [rcx], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000938ab: add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000083f41: add byte ptr [rcx], al; ret; 
0x00000000000e4fd0: add byte ptr [rcx], al; sbb dword ptr [rdx + rdi*4], edx; jge 0xe4fd8; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x0000000000046701: add byte ptr [rcx], al; xor eax, eax; pop rbx; ret; 
0x00000000000328aa: add byte ptr [rcx], bh; jp 0x328e6; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000c9e67: add byte ptr [rcx], bh; ret; 
0x0000000000115aae: add byte ptr [rcx], bl; rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000c9ff7: add byte ptr [rcx], ch; ret; 
0x00000000000412b9: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; ret; 
0x00000000000246f1: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041ba6: add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000011cf2b: add byte ptr [rcx], dh; fucomi st(3); or al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000445bc: add byte ptr [rcx], dh; imul al; fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000042177: add byte ptr [rcx], dh; leave; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x000000000008d8dd: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000196c17: add byte ptr [rcx], dh; rol byte ptr [rbp - 0x7b], 0xc0; jne 0x196b70; add rsp, 0x38; ret; 
0x0000000000102a9f: add byte ptr [rcx], dh; rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000117e27: add byte ptr [rcx], dh; rol byte ptr [rdi + 0xd7a2005], 0; cmp eax, 1; jg 0x117e36; ret; 
0x0000000000097ca0: add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 0x34; ret; 
0x000000000009ef39: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000048071: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000bb9e2: add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000018bfcf: add byte ptr [rcx], dh; ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x000000000018c9d0: add byte ptr [rcx], dh; ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c9a6; vzeroupper; ret; 
0x00000000000295e4: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000000ee477: add byte ptr [rcx], dh; sar byte ptr [rax], 0xe; je 0xee3bd; ret; 
0x0000000000111b7c: add byte ptr [rcx], dh; shr al, 0x7c; ret; 
0x00000000000d0fcf: add byte ptr [rcx], dh; shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0eaf: add byte ptr [rcx], dh; shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x000000000015e027: add byte ptr [rcx], dh; test byte ptr [rax - 0x73], 0x3d; ret; 
0x0000000000117e26: add byte ptr [rcx], sil; rol byte ptr [rdi + 0xd7a2005], 0; cmp eax, 1; jg 0x117e36; ret; 
0x0000000000190c56: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000cb17d: add byte ptr [rdi + 0x4c], dh; or eax, 0x80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000cf084: add byte ptr [rdi + 2], bh; neg eax; ret; 
0x000000000012fc0a: add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x0000000000192e24: add byte ptr [rdi + 9], bh; neg eax; ret; 
0x0000000000102866: add byte ptr [rdi + rax*8 + 4], ah; and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000011d236: add byte ptr [rdi + rax*8], ah; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000043c5a: add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041e60: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001144ee: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001199af: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009e95a: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000412b6: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246ee: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000010de5e: add byte ptr [rdi + rax*8], ah; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000041256: add byte ptr [rdi + rax*8], ah; sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000000e4fbb: add byte ptr [rdi + rcx*4 + 0x49], dh; cmp eax, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000340a8: add byte ptr [rdi + rcx], al; mov bh, 0xc0; ret; 
0x0000000000032846: add byte ptr [rdi + rdi*8], bh; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x00000000000424c7: add byte ptr [rdi], bh; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x000000000010de61: add byte ptr [rdi], bl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000bbaea: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000087cc8: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000141d96: add byte ptr [rdi], cl; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000926bd: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x38], eax; pop rbp; pop r12; ret; 
0x00000000000919c4: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x00000000001509fa: add byte ptr [rdi], cl; adc dword ptr [rdx], ebx; ret; 
0x000000000014d2a2: add byte ptr [rdi], cl; adc dword ptr [rdx], ecx; ret; 
0x00000000001500ea: add byte ptr [rdi], cl; adc dword ptr [rdx], edx; ret; 
0x00000000001509da: add byte ptr [rdi], cl; adc dword ptr [rdx], esp; ret; 
0x000000000010d264: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d270: add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000010046d: add byte ptr [rdi], cl; adc dword ptr [rsi + 8], eax; ret; 
0x000000000014854a: add byte ptr [rdi], cl; adc dword ptr [rsi + 8], ecx; ret; 
0x000000000014d1af: add byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000a066c: add byte ptr [rdi], cl; add byte ptr [rax - 0x73], cl; adc eax, 0xeff9a; cmove rax, rdx; ret; 
0x00000000000de286: add byte ptr [rdi], cl; add eax, 0x1f0fb4eb; add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000015d24d: add byte ptr [rdi], cl; add eax, 0x2e6690eb; nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x000000000014e7e5: add byte ptr [rdi], cl; add eax, 0xa1e88beb; adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x000000000018ae1f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000018b4ff: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189c1f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016e09f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000018938f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000018939f: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000012d0d5: add byte ptr [rdi], cl; mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x0000000000144722: add byte ptr [rdi], cl; mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000118085: add byte ptr [rdi], cl; mov cl, 0x15; ret; 
0x0000000000091b3f: add byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000189c0f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016e10f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000018a7bf: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000ea56f: add byte ptr [rdi], cl; mov dh, 0x43; add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000038dd7: add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000019939f: add byte ptr [rdi], cl; mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x000000000019231f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000019230f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001922df: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000001922ff: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922ef: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000048d07: add byte ptr [rdi], cl; mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e6d4f: add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d4eb9: add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000bc147: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x00000000000aa39f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000018462f: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000001463da: add byte ptr [rdi], cl; mov dh, 7; add eax, ecx; sub rdx, 1; jne 0x146368; ret; 
0x000000000018507f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000184d9f: add byte ptr [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x0000000000184daf: add byte ptr [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000000ac65f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac66f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000ac64f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000184dbf: add byte ptr [rdi], cl; mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x00000000000ac67f: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184d8f: add byte ptr [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000ac15f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000ac18f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac17f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x00000000000ac19f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1af: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce37f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce38f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac16f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000000423ff: add byte ptr [rdi], cl; push rsi; add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423da: add byte ptr [rdi], cl; push rsi; add eax, 0x17a35e; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x00000000000422bb: add byte ptr [rdi], cl; push rsp; ret; 
0x000000000018c884: add byte ptr [rdi], cl; pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x00000000000d1dc1: add byte ptr [rdi], cl; sub dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x0000000000196787: add byte ptr [rdi], cl; test bh, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000178cd4: add byte ptr [rdi], cl; test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000156110: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebx; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000043327: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x000000000009d4db: add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ebp; add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d5fe: add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], ebp; add esp, 0x18; ret; 
0x00000000000578c1: add byte ptr [rdi], cl; test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x000000000010e0ef: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], esi; add esp, 0x78; ret; 
0x000000000010e6e5: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebx; add esp, 0x68; ret; 
0x00000000000521f5: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ecx; add esp, 0x10; pop rbx; ret; 
0x00000000001521ac: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], ebx; add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000013e09e: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000001474ea: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000000], esp; add esp, 0x68; pop rbx; pop rbp; ret; 
0x00000000001152b0: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edx; add esp, 0x60; pop rbp; ret; 
0x000000000010e826: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000010df74: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esp; add esp, 0x68; pop rbp; pop r12; ret; 
0x000000000014e86e: add byte ptr [rdi], cl; test dword ptr [rsi], edi; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000012d2f3: add byte ptr [rdi], cl; test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000045fe8: add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x0000000000156753: add byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x000000000014f66f: add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x000000000009c1e2: add byte ptr [rdx + 0x2b], dh; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x00000000000baf3f: add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000e50f5: add byte ptr [rdx + 0x40], bh; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000001769bf: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000011cf9a: add byte ptr [rdx + 0x64], bh; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x00000000000e4f96: add byte ptr [rdx + 0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e4fe9: add byte ptr [rdx + 0x7f], bh; cmovne rax, rdx; ret; 
0x000000000011f50b: add byte ptr [rdx + 8], bh; syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x00000000000e819e: add byte ptr [rdx + rbp], bh; je 0xe81a7; cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000958fb: add byte ptr [rdx + rdx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x00000000000986cc: add byte ptr [rdx - 0x7d], cl; xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000047396: add byte ptr [rdx - 1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x0000000000049b37: add byte ptr [rdx], ah; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], -0x7c; ret; 
0x000000000010405d: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003454b: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000341fa: add byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x00000000001465cc: add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xaa527]; ret; 
0x0000000000026f76: add byte ptr [rdx], al; add rsp, 8; ret; 
0x00000000000951fb: add byte ptr [rdx], al; jbe 0x95200; ret; 
0x0000000000034108: add byte ptr [rdx], al; movzx eax, ax; ret; 
0x000000000015c823: add byte ptr [rdx], bh; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009cb8c: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000041259: add byte ptr [rdx], ch; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x000000000010261d: add byte ptr [rdx], ch; call 0x102520; add rsp, 0x18; ret; 
0x00000000001282cb: add byte ptr [rdx], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000183db8: add byte ptr [rdx], dl; jae 0x183db0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000041ba1: add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000018edbf: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018edbe: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e4f2: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011f0a9: add byte ptr [rip - 0x1000], ah; or eax, edx; ret; 
0x0000000000090885: add byte ptr [rip - 0x16141c8c], bl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000052aca: add byte ptr [rip - 0x2711800], al; std; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e4f3c: add byte ptr [rsi + 0x29], bh; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x000000000009391a: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091012: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5a: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117e3d: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x000000000006309e: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x0000000000152dfb: add byte ptr [rsi + 0xa], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000b3961: add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000004263b: add byte ptr [rsi + 0xf], ah; fild dword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000ce32b: add byte ptr [rsi + 0xf], ah; jbe 0xce37f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac14b: add byte ptr [rsi + 0xf], ah; je 0xac19f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac62d: add byte ptr [rsi + 0xf], ah; je 0xac681; and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x0000000000093664: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000042085: add byte ptr [rsi + 0xf], ah; push rsi; or eax, 0x17a672; mulsd xmm0, xmm1; ret; 
0x000000000004205f: add byte ptr [rsi + 0xf], ah; push rsi; or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x0000000000041efb: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x17a7dc; orpd xmm0, xmm1; ret; 
0x00000000000ac57c: add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac5a1: add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000012224a: add byte ptr [rsi + 1], bh; call 0x1220e0; ret; 
0x0000000000094e4c: add byte ptr [rsi + 1], dh; ret; 
0x00000000000e50c7: add byte ptr [rsi + rbx + 0x48], dh; cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000009f69c: add byte ptr [rsi + rcx + 0x58d4800], dl; mov ecx, 0x48000126; cmove eax, edx; ret; 
0x0000000000093977: add byte ptr [rsi + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000009552e: add byte ptr [rsi - 0x59], dh; add rsp, 8; ret; 
0x00000000000e40bd: add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000162f2d: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0x88f35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000014140d: add byte ptr [rsi - 0x70], ah; endbr64; mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000012223d: add byte ptr [rsi - 0x70], ah; endbr64; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x1220e0; ret; 
0x00000000001257cd: add byte ptr [rsi - 0x70], ah; endbr64; ret; 
0x00000000000cf68d: add byte ptr [rsi - 0x70], ah; endbr64; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x000000000017aced: add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000cfadd: add byte ptr [rsi - 0x70], ah; mov ch, dh; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000001789cd: add byte ptr [rsi - 0x70], ah; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e8d: add byte ptr [rsi - 0x70], ah; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b6e6d: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000017899d: add byte ptr [rsi - 0x70], ah; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5d: add byte ptr [rsi - 0x70], ah; mov word ptr [rdi], dx; ret; 
0x00000000000b710d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b70cd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70ed: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b945d: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85fd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000319bd: add byte ptr [rsi - 0x70], ah; ret; 
0x0000000000188d2d: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000000baf2d: add byte ptr [rsi - 0x70], ah; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000000cf35d: add byte ptr [rsi - 0x70], ah; xor rax, rax; ret; 
0x00000000001769cf: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001769df: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000041c14: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d304: add byte ptr [rsi - 0x77], ah; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x000000000013a51a: add byte ptr [rsi - 0x77], ah; rol r14, 0x45; ret; 
0x000000000010c988: add byte ptr [rsi - 9], ah; mov byte ptr [rax], 0xff; jne 0x10c995; mov word ptr [rdi], si; xor eax, eax; ret; 
0x0000000000041236: add byte ptr [rsi*2 + 0x5c8b45e6], 0x80; or byte ptr [rbx + rax + 0x5f], cl; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000043c5d: add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000017c96c: add byte ptr [rsi], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000e3249: add byte ptr [rsi], dl; add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000112a19: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000043069: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000015d181: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; mov qword ptr [rdx], 0; ret; 
0x00000000000c6a9c: add byte ptr [rsp + rax + 0x44], dh; mov eax, eax; ret; 
0x00000000000cf53e: add byte ptr [rsp + riz*8 + 0x119850f], al; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000005ba5a: add byte ptr cs:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001161a7: add byte ptr ds:[rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x0000000000119912: add byte ptr ds:[rax - 0x77], cl; je 0x119920; pop rbx; ret; 
0x0000000000043c5e: add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011cf9c: add byte ptr fs:[rax], al; add byte ptr [rbx - 0x3f7ac7c0], cl; cmove eax, edx; ret; 
0x00000000000a0392: add byte ptr gs:[rbp + 0x31], al; in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x000000000013a433: add byte ptr gs:[rbx + 0x5d], bl; pop r12; ret; 
0x000000000018a8ef: add ch, al; cli; jg 0x18a8fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b61f: add ch, al; cli; jg 0x18b62b; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x0000000000135110: add ch, al; mov edx, 0xe9fff4cc; ret; 
0x0000000000184c92: add ch, al; std; xlatb; ret; 
0x00000000000a8632: add ch, bl; test eax, 0x48001f0f; mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000009e921: add ch, byte ptr [rcx]; ror byte ptr [rax - 0x75], 1; push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000bcd0c: add ch, dh; or al, 0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x0000000000043aea: add cl, 0xe9; add esi, ebx; stosq qword ptr [rdi], rax; ret; 
0x00000000000d123f: add cl, al; stc; add cl, byte ptr [rax - 0x77]; ret; 
0x00000000000b39fc: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000178807: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x00000000000480cb: add cl, byte ptr [r8 - 0x77]; add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ea572: add cl, byte ptr [r8 - 0x7d]; ret; 
0x00000000000eb763: add cl, byte ptr [r9 - 0x7d]; ret; 
0x0000000000100450: add cl, byte ptr [rax + 0x16893847]; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000002c0f4: add cl, byte ptr [rax + 0x39]; ret; 
0x000000000007dcd7: add cl, byte ptr [rax + 0x39]; ror dword ptr [rdi], 0x8d; out dx, eax; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000018be68: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x000000000008959d: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x00000000000bcd56: add cl, byte ptr [rax - 0x73]; add eax, 0x112c2; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000bc875: add cl, byte ptr [rax - 0x73]; add eax, 0x12933; cmovne rax, rdx; ret; 
0x00000000000a0735: add cl, byte ptr [rax - 0x73]; add eax, 0x162d3; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x000000000009f215: add cl, byte ptr [rax - 0x73]; add eax, 0x17703; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f0e5: add cl, byte ptr [rax - 0x73]; add eax, 0x1a8a3; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a09f3: add cl, byte ptr [rax - 0x73]; add eax, 0x1b1b5; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0683: add cl, byte ptr [rax - 0x73]; add eax, 0x1b505; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0523: add cl, byte ptr [rax - 0x73]; add eax, 0x1b685; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012dc2c: add cl, byte ptr [rax - 0x73]; add eax, 0x5dcac; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db6c: add cl, byte ptr [rax - 0x73]; add eax, 0x5dd8c; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012daac: add cl, byte ptr [rax - 0x73]; add eax, 0x5de4c; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dc77: add cl, byte ptr [rax - 0x73]; add eax, 0x629f1; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbb7: add cl, byte ptr [rax - 0x73]; add eax, 0x62ad1; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daf7: add cl, byte ptr [rax - 0x73]; add eax, 0x62b91; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd37: add cl, byte ptr [rax - 0x73]; add eax, 0x62ee1; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000000a0795: add cl, byte ptr [rax - 0x73]; add eax, 0x86f3; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x000000000009f7c5: add cl, byte ptr [rax - 0x73]; add eax, 0x9733; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f6f5: add cl, byte ptr [rax - 0x73]; add eax, 0x9743; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f75f: add cl, byte ptr [rax - 0x73]; add eax, 0xaef9; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a08d8: add cl, byte ptr [rax - 0x73]; add eax, 0xe560; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0838: add cl, byte ptr [rax - 0x73]; add eax, 0xe5e0; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000a098c: add cl, byte ptr [rax - 0x73]; add eax, 0xeaf7c; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a061c: add cl, byte ptr [rax - 0x73]; add eax, 0xeb2cc; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04bc: add cl, byte ptr [rax - 0x73]; add eax, 0xeb44c; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a09d7: add cl, byte ptr [rax - 0x73]; add eax, 0xefcc1; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0667: add cl, byte ptr [rax - 0x73]; add eax, 0xf0011; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0507: add cl, byte ptr [rax - 0x73]; add eax, 0xf0191; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05c7: add cl, byte ptr [rax - 0x73]; add eax, 0xf0661; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x000000000012dc93: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8dee5; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000012dbd3: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8dfc5; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012db13: add cl, byte ptr [rax - 0x73]; add eax, 0xfff8e085; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000018a6a9: add cl, byte ptr [rax - 0x73]; jg 0x18a6b0; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3dd: add cl, byte ptr [rax - 0x73]; jg 0x18b3e4; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76e9: add cl, byte ptr [rax - 0x73]; jg 0xb76f0; jne 0xb7f80; ret; 
0x00000000000b8dcd: add cl, byte ptr [rax - 0x73]; jg 0xb8dd4; jne 0xb97d0; ret; 
0x000000000009869e: add cl, byte ptr [rax - 0x73]; push rsp; ret; 
0x00000000000d1dba: add cl, byte ptr [rax - 0x75]; add eax, 0x11a086; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x000000000017ae05: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a75: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000001144d3: add cl, byte ptr [rax - 0x75]; add eax, 0xd79ed; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000001769a5: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000b39fd: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x0000000000178808: add cl, byte ptr [rax - 0x76b7fdbe]; clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x00000000000480cc: add cl, byte ptr [rax - 0x77]; add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b3969: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001787c3: add cl, byte ptr [rax - 0x77]; clc; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x00000000001787e5: add cl, byte ptr [rax - 0x77]; clc; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000017880b: add cl, byte ptr [rax - 0x77]; clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x0000000000178823: add cl, byte ptr [rax - 0x77]; clc; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x0000000000178565: add cl, byte ptr [rax - 0x77]; clc; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x0000000000085c6f: add cl, byte ptr [rax - 0x77]; ret; 
0x00000000000d6f25: add cl, byte ptr [rax - 0x77]; retf 0xb948; ret; 
0x000000000006ab61: add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000016dee2: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b3a68: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000017ad85: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x00000000000b3b0c: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000013bb2a: add cl, byte ptr [rcx + 0x39]; clc; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x00000000001500bb: add cl, byte ptr [rcx + 0x40c741f0]; sbb byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x00000000000d4aab: add cl, byte ptr [rcx + rcx*4 - 0x40]; add rsp, 8; ret; 
0x0000000000094d87: add cl, byte ptr [rcx - 0x3fcef7b9]; ret; 
0x0000000000086bfc: add cl, byte ptr [rcx - 0x77]; ret; 
0x00000000000b7708: add cl, byte ptr [rcx - 0x7d]; call 0x7f98bf13; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000eb764: add cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000116f6a: add cl, byte ptr [rdi + 0xd]; add byte ptr [rbx - 0x387c0f19], al; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000340c8: add cl, byte ptr [rdi]; mov bh, 0xc0; ret; 
0x000000000018b3e1: add cl, byte ptr [rdi]; test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017cb91: add cl, byte ptr [rdi]; test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000b39fa: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017ad43: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000000b3a28: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x00000000000b3aac: add cl, byte ptr [rdx + 0x42880841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000e842a: add cl, ch; imul edi, edi, -1; dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x00000000000319b8: add cl, ch; mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x00000000000be527: add cl, ch; movabs al, byte ptr [0xeb8087b8bfffffc]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002e048: add cl, ch; ret; 
0x00000000001985e0: add cl, ch; stosb byte ptr [rdi], al; add eax, 0x2e66fff8; nop dword ptr [rax + rax]; ret; 
0x00000000000578c7: add cl, cl; ret; 
0x00000000001122e8: add cl, dh; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000a8a57: add dh, al; add byte ptr [rax], al; ret; 
0x00000000001170ed: add dh, al; add eax, 0xd867b; and ecx, dword ptr [rcx + rcx*4 - 0x40]; mov byte ptr [rsi - 1], 0; ret; 
0x00000000000a8627: add dh, al; inc dword ptr [r8]; mov qword ptr [rdx], rcx; ret; 
0x00000000000ec47f: add dh, al; or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000ec48f: add dh, al; or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000016e093: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000001573dd: add dh, byte ptr [rax + rdx + 0x45]; xor eax, eax; test eax, eax; je 0x157410; mov eax, r8d; ret; 
0x000000000015742d: add dh, byte ptr [rax + rdx + 0x45]; xor eax, eax; test eax, eax; je 0x157460; mov eax, r8d; ret; 
0x00000000000baf6b: add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000bb4d7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb587: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x0000000000120f47: add dh, byte ptr [rbp + 0x46]; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010d31b: add dh, byte ptr [rdi + 8]; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000018fd8c: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000190463: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000015798b: add dh, byte ptr [rdx + riz*2 + 0x48]; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000951fc: add dh, byte ptr [rsi + 1]; ret; 
0x00000000000d423a: add dh, byte ptr [rsi + 3]; ret; 
0x00000000000dd191: add dh, byte ptr [rsp + rbx*2 - 0x7b]; dec dword ptr [rdi]; xchg esp, eax; ret; 
0x000000000009f241: add dh, dh; jb 0x9f256; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009f831: add dh, dh; jb 0x9f846; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009faf1: add dh, dh; jb 0x9fb06; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000012db0f: add dh, dh; jge 0x12db16; lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbcf: add dh, dh; jge 0x12dbd6; lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc8f: add dh, dh; jge 0x12dc96; lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x00000000000a051f: add dh, dh; jge 0xa0526; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a067f: add dh, dh; jge 0xa0686; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a09ef: add dh, dh; jge 0xa09f6; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000bc871: add dh, dh; jno 0xbc878; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000005c02f: add dh, dh; ret; 
0x00000000000d683c: add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000ce097: add dil, r15b; ret; 
0x00000000000420ff: add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004207d: add dl, dh; movups xmm0, xmmword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042057: add dl, dh; movups xmm0, xmmword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000042067: add dl, dh; mulps xmm0, xmm1; ret; 
0x000000000002c7b7: add dword ptr [r8 + 0x39], r9d; ret; 
0x000000000012d62d: add dword ptr [r8 + 0x3b], ecx; pop rbp; mov eax, 0x89483e74; ret; 
0x000000000005b3c3: add dword ptr [r8 + r8*8 - 0x7cb6f78c], eax; ret; 
0x000000000010c11e: add dword ptr [r8 - 0x77], ecx; ret; 
0x0000000000037ff4: add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000e81db: add dword ptr [r8 - 0x7d], r9d; mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x0000000000189c16: add dword ptr [r8], r8d; vzeroupper; ret; 
0x00000000000eb5a9: add dword ptr [r9 - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000ec46d: add dword ptr [rax + 0x1b807], ecx; add byte ptr [rax], al; ret; 
0x000000000017acf1: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x00000000000469a0: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6491b5ae; ret; 
0x0000000000198d4b: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6ca6d559; ret; 
0x0000000000198d9f: add dword ptr [rax + 0x29], ecx; fmul dword ptr [rax - 0x3f]; call 0x6ca6d5ad; ret; 
0x000000000002c804: add dword ptr [rax + 0x39480751], ecx; ret; 
0x000000000002c44e: add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000121e57: add dword ptr [rax + 0x3b], ecx; add eax, 0xca539; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x000000000012d62e: add dword ptr [rax + 0x3b], ecx; pop rbp; mov eax, 0x89483e74; ret; 
0x0000000000127a36: add dword ptr [rax + 0x63], ecx; fmul dword ptr [rax - 0x77]; ror byte ptr [rcx + 0x2b], 1; cmp byte ptr [r8 + 0x39], r9b; ret; 
0x00000000000edf6b: add dword ptr [rax + 0x63], ecx; ret; 
0x0000000000092a13: add dword ptr [rax + 0xf740a39], eax; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x0000000000064e33: add dword ptr [rax + 1], ecx; ret; 
0x00000000000ec43f: add dword ptr [rax + 1], edi; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3f0: add dword ptr [rax + 1], edi; ret; 
0x000000000011a77b: add dword ptr [rax + 9], ecx; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000e81e0: add dword ptr [rax + rax*8 - 0x3fce538b], eax; ret; 
0x000000000005b3c4: add dword ptr [rax + rax*8 - 0x7cb6f78c], eax; ret; 
0x0000000000055844: add dword ptr [rax + rcx + 0x48], esi; mov eax, dword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x00000000000555fc: add dword ptr [rax + rcx + 0x49], esi; mov edx, dword ptr [rax + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000009c26b: add dword ptr [rax + rdi - 0x3e], eax; jne 0x9c258; sub rax, 0x10; ret; 
0x000000000003175f: add dword ptr [rax - 0x49f000b9], ecx; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001787ca: add dword ptr [rax - 0x73], ecx; add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000018a4fb: add dword ptr [rax - 0x73], ecx; jg 0x18a501; jne 0x18a930; vzeroupper; ret; 
0x000000000018b213: add dword ptr [rax - 0x73], ecx; jg 0x18b219; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76c5: add dword ptr [rax - 0x73], ecx; jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000b8da8: add dword ptr [rax - 0x73], ecx; jg 0xb8dae; jne 0xb97d0; ret; 
0x000000000008af2d: add dword ptr [rax - 0x75], ecx; sub byte ptr [r15 + rcx - 0x4a], r8b; ret; 
0x00000000000b39d6: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x00000000001787c1: add dword ptr [rax - 0x776b7fe], ecx; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x0000000000094e76: add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000639cb: add dword ptr [rax - 0x77], ecx; adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a037c: add dword ptr [rax - 0x77], ecx; add byte ptr [r9 + rcx*4 - 0x20], r9b; pop rbp; pop r12; pop r13; ret; 
0x000000000017ae02: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a72: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000001769a2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000176952: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000017ad82: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000176a62: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000006ab58: add dword ptr [rax - 0x77], ecx; lea edx, [rax - 0x77000005]; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000008df51: add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000a5611: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000008df2a: add dword ptr [rax - 0x77], ecx; sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x000000000013c393: add dword ptr [rax - 0x78], eax; ja 0x13c399; ret; 
0x000000000012bb32: add dword ptr [rax - 0x7b], ecx; push qword ptr [rbp - 0x1a]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c35: add dword ptr [rax - 0x7b], ecx; ror byte ptr [rax - 0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x000000000013cb4c: add dword ptr [rax - 0x7b], ecx; sar byte ptr [rax + 0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000017c90a: add dword ptr [rax - 0x7d], ecx; fdivr st(7); ret; 
0x00000000000b661b: add dword ptr [rax - 0x7d], ecx; fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000e81dc: add dword ptr [rax - 0x7d], ecx; mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x00000000000258d8: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000052411: add dword ptr [rax - 0x7f], ecx; ret; 
0x000000000005b4c2: add dword ptr [rax - 8], ebp; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000000038858: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000009391c: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x0000000000091014: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f5c: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x0000000000117e3f: add dword ptr [rax], 0xcab80000; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7a01; syscall; ret; 
0x00000000000ec3cb: add dword ptr [rax], 0xf9800000; pop rsi; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000001221ec: add dword ptr [rax], 1; ret; 
0x00000000000e5069: add dword ptr [rax], eax; add byte ptr [rax + 0x20], bh; cmove rax, rdx; ret; 
0x0000000000190d15: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x000000000013b6b5: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000b1917: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000001847df: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x00000000000d6edd: add dword ptr [rax], eax; add byte ptr [rax - 0x41], cl; ret; 
0x0000000000047f81: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1a937b; add rsp, 8; ret; 
0x000000000015fb26: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000160021: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000015f45f: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000001437fa: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000bbbf2: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015fade: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000017cd8d: add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000026206: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013bed3: add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x0000000000163686: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000127900: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000dcfbf: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000010263e: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x101f30; add rsp, 0x18; ret; 
0x000000000012224c: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1220e0; ret; 
0x0000000000118edf: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x61e20; mov rax, r12; pop r12; ret; 
0x0000000000043dde: add dword ptr [rax], eax; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000cf191: add dword ptr [rax], eax; add byte ptr [rax], al; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf16f: add dword ptr [rax], eax; add byte ptr [rax], al; cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000cf562: add dword ptr [rax], eax; add byte ptr [rax], al; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf612: add dword ptr [rax], eax; add byte ptr [rax], al; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x0000000000192e21: add dword ptr [rax], eax; add byte ptr [rax], al; jg 0x192e30; neg eax; ret; 
0x00000000000cf081: add dword ptr [rax], eax; add byte ptr [rax], al; jg 0xcf089; neg eax; ret; 
0x000000000018fbe7: add dword ptr [rax], eax; add byte ptr [rax], al; jl 0x18fbf0; neg eax; ret; 
0x00000000000ec441: add dword ptr [rax], eax; add byte ptr [rax], al; mov byte ptr [rdi], 0x5b; ret; 
0x00000000001576fd: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x0000000000057c2e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000009522e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x157074], eax; ret; 
0x000000000014d324: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000009d715: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x000000000011755b: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; add rsp, 8; ret; 
0x000000000008cd42: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000006309b: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000057b56: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000095207: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951de: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951be: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000148526: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000048196: add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001509e5: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000001500c2: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000926ba: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000014d29f: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001500e7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001509f7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509d7: add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000117594: add dword ptr [rax], eax; add byte ptr [rax], al; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000060f0a: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000087595: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000009eb14: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832cb: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000010c791: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000010261a: add dword ptr [rax], eax; add byte ptr [rax], al; push 0; call 0x102520; add rsp, 0x18; ret; 
0x000000000005562f: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000043b8a: add dword ptr [rax], eax; add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010e291: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x0000000000113895: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1138a8; ret; 
0x00000000000e5215: add dword ptr [rax], eax; add byte ptr [rax], al; test edi, edi; js 0xe5220; ret; 
0x000000000006344c: add dword ptr [rax], eax; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x0000000000062356: add dword ptr [rax], eax; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000093584: add dword ptr [rax], eax; add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000028237: add dword ptr [rax], eax; add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; ret; 
0x0000000000061bc2: add dword ptr [rax], eax; add byte ptr [rbx + 0x28907c8], al; mov eax, 1; ret; 
0x000000000009b8aa: add dword ptr [rax], eax; add byte ptr [rbx + 0x4c], bl; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000018fa29: add dword ptr [rax], eax; add byte ptr [rbx + 0x4f3bfc4e], cl; cld; jne 0x18fbe6; xor eax, eax; ret; 
0x000000000013dea3: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000001150e6: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000101933: add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x63], cl; and byte ptr [rax - 0x7d], cl; ret; 
0x000000000002c139: add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x0000000000160b82: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x00000000000438ec: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x000000000015d3e6: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x00000000000e8a73: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000194dd0: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000006ea60: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000a45c7: add dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret; 
0x00000000000bb9e0: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x00000000000295e2: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000011f509: add dword ptr [rax], eax; add byte ptr [rdx + 8], bh; syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x00000000000b395f: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000184c90: add dword ptr [rax], eax; add ch, al; std; xlatb; ret; 
0x00000000000d123d: add dword ptr [rax], eax; add cl, al; stc; add cl, byte ptr [rax - 0x77]; ret; 
0x0000000000052ac9: add dword ptr [rax], eax; add eax, 0xfd8ee800; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000009f665: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000009f0f2: add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000054336: add dword ptr [rax], eax; jne 0x54330; pop rbx; ret; 
0x00000000000a05a7: add dword ptr [rax], eax; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x00000000000bdf8b: add dword ptr [rax], eax; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f0eb: add dword ptr [rax], eax; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a09f9: add dword ptr [rax], eax; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0689: add dword ptr [rax], eax; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0529: add dword ptr [rax], eax; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000bcd5c: add dword ptr [rax], eax; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x000000000009f21b: add dword ptr [rax], eax; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x00000000000a073b: add dword ptr [rax], eax; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x000000000009f13e: add dword ptr [rax], eax; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x0000000000180138: add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181a41: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000e4f95: add dword ptr [rax], eax; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000181a0d: add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000048149: add dword ptr [rax], eax; mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000001463d9: add dword ptr [rax], eax; movzx eax, byte ptr [rdi]; add eax, ecx; sub rdx, 1; jne 0x146368; ret; 
0x0000000000048114: add dword ptr [rax], eax; ret; 
0x0000000000189c17: add dword ptr [rax], eax; vzeroupper; ret; 
0x0000000000094d01: add dword ptr [rax], ecx; add byte ptr [rax - 0x68], cl; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000009c1fb: add dword ptr [rax], ecx; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000000a86e2: add dword ptr [rax], edi; retf 0xe975; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000134a86: add dword ptr [rax], esp; je 0x134a06; mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x0000000000028236: add dword ptr [rax], r8d; add byte ptr [rbp - 0x7b], al; ror byte ptr [rdi], 0x85; ret; 
0x000000000009f701: add dword ptr [rax], r8d; cmovne rax, rdx; ret; 
0x000000000009c1fa: add dword ptr [rax], r9d; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000087e9b: add dword ptr [rbp + 0x12], esi; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000bb847: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x00000000000bb6f7: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x0000000000129780: add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000017e0ab: add dword ptr [rbp + 0x32], esi; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000127b8e: add dword ptr [rbp + 0x38], ebx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000129787: add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000013f297: add dword ptr [rbp + 0x45ac74c9], eax; cmp ebx, ecx; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x000000000010de0e: add dword ptr [rbp + 0x47], esi; mov eax, 0x10c; syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x000000000013c548: add dword ptr [rbp + rcx - 0x7b], esi; sal byte ptr [rbp + 0x19], 0x44; mov eax, eax; ret; 
0x00000000000d6c9f: add dword ptr [rbp + rcx*4 + 0x14], eax; ret; 
0x00000000000a13f3: add dword ptr [rbp - 0x16], esi; ret; 
0x000000000005562b: add dword ptr [rbp - 0x1e], esi; mov eax, 1; ret; 
0x00000000001161ac: add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000001463e3: add dword ptr [rbp - 0x7e], esi; ret; 
0x000000000016df52: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000008d4e5: add dword ptr [rbx + 0x18], ebp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f8753: add dword ptr [rbx + 0x1be01ea], eax; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x0000000000157bc0: add dword ptr [rbx + 0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127b24: add dword ptr [rbx + 0x38], ebp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046ada: add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000de23e: add dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x00000000000edf68: add dword ptr [rbx + 0x634801ea], eax; ret; 
0x000000000011a785: add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000011336b: add dword ptr [rbx - 0x389bfff3], ecx; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000006a71c: add dword ptr [rbx - 0x64f7b], ecx; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000119295: add dword ptr [rbx], ebp; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec3e7: add dword ptr [rbx], edi; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x000000000017ad71: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a66: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000000a0b76: add dword ptr [rcx + 0x39], ecx; ret; 
0x000000000017ad51: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a46: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000017ad41: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a26: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000157f89: add dword ptr [rcx + 0xf], eax; xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000011a788: add dword ptr [rcx + 9], ecx; ret; 
0x00000000000df4d6: add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000015e334: add dword ptr [rcx + rcx*4 - 0x20], eax; pop rbp; pop r12; pop r13; ret; 
0x0000000000125b1b: add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x0000000000137c1f: add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbp; ret; 
0x0000000000085682: add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000061058: add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000122e62: add dword ptr [rcx + rcx*4 - 0x40], eax; ret; 
0x000000000013c7f8: add dword ptr [rcx + rcx*4 - 0x40], ecx; mov byte ptr [r8 + 2], 0; ret; 
0x000000000015ce9d: add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000012df0b: add dword ptr [rcx + rcx*8 - 0x76b7578b], eax; clc; ret; 
0x00000000000a88cb: add dword ptr [rcx + rcx*8 - 0xec6f78c], eax; jne 0xa88c0; ret; 
0x00000000000dd813: add dword ptr [rcx + rdi - 0x1d], ecx; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x000000000012ddfb: add dword ptr [rcx + rdi - 0x3e], ecx; jne 0x12dde8; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012ef23: add dword ptr [rcx + rdi - 0x3e], ecx; jne 0x12ef10; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x0000000000149524: add dword ptr [rcx + rdx + 0x48], esi; add esp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000479c8: add dword ptr [rcx - 0x42], edi; xor eax, eax; ret; 
0x00000000000eb5aa: add dword ptr [rcx - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000b3a16: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x0000000000178821: add dword ptr [rcx - 0x776b7fe], ecx; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x0000000000066693: add dword ptr [rcx - 0x77], ecx; or byte ptr [r15 + r9 - 0x4a], r8b; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000863ff: add dword ptr [rcx - 0x77], ecx; push rax; sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000007457d: add dword ptr [rcx - 0x77], ecx; push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000570b0: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x000000000002fda6: add dword ptr [rcx - 0x77cf7bd], ecx; std; je 0x2fdc8; pop rbx; ret; 
0x0000000000053210: add dword ptr [rcx - 0x78], eax; add ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000002a03b: add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000eb5ae: add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000001932f3: add dword ptr [rcx - 9], eax; ret; 
0x00000000000cf54b: add dword ptr [rcx], eax; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x000000000013bf21: add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x0000000000192e9f: add dword ptr [rcx], eax; add dword ptr [rcx], eax; add dword ptr [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x0000000000192ea1: add dword ptr [rcx], eax; add dword ptr [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x0000000000192ea3: add dword ptr [rcx], eax; imul rax, rdi; shr rax, 0x38; ret; 
0x000000000007b325: add dword ptr [rcx], eax; ret; 
0x00000000000e4fd1: add dword ptr [rcx], ebx; push rsp; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000f0b0b: add dword ptr [rcx], edi; ret; 
0x00000000000bc046: add dword ptr [rdi + 0x15], esi; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000bbc07: add dword ptr [rdi + 0x26], esi; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000157b24: add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157b34: add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000018be64: add dword ptr [rdi + 0x2c], esi; jb 0x18be6b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000010d6d0: add dword ptr [rdi + 0x2d], esi; mov eax, 4; syscall; cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x000000000010d790: add dword ptr [rdi + 0x2d], esi; mov eax, 6; syscall; cmp rax, -0x1000; ja 0x10d7a8; ret; 
0x000000000010d72f: add dword ptr [rdi + 0x2e], esi; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x10d748; ret; 
0x000000000010dbd5: add dword ptr [rdi + 0x30], esi; mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x0000000000190d3c: add dword ptr [rdi + 0x3a], esi; jb 0x190d43; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018b977: add dword ptr [rdi + 0x3b], esi; jb 0x18b981; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000190717: add dword ptr [rdi + 0x53], esi; jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000117e32: add dword ptr [rdi + 1], edi; ret; 
0x0000000000062fb9: add dword ptr [rdi + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec813: add dword ptr [rdi + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000012bc06: add dword ptr [rdi + rbx*2 + 0x31], esi; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000094d26: add dword ptr [rdi + rcx - 0x7b], esi; div byte ptr [rbp + 0x13]; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x000000000012daa6: add dword ptr [rdi + rdx - 0xa], esi; jge 0x12daaf; lea rax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012db66: add dword ptr [rdi + rdx - 0xa], esi; jge 0x12db6f; lea rax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012dc26: add dword ptr [rdi + rdx - 0xa], esi; jge 0x12dc2f; lea rax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x00000000000a04b6: add dword ptr [rdi + rdx - 0xa], esi; jge 0xa04bf; lea rax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a0616: add dword ptr [rdi + rdx - 0xa], esi; jge 0xa061f; lea rax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a0986: add dword ptr [rdi + rdx - 0xa], esi; jge 0xa098f; lea rax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a2224: add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000151b89: add dword ptr [rdi], -0x13; dec dword ptr [rax - 0x77]; ret; 
0x0000000000043f34: add dword ptr [rdi], ecx; adc dword ptr [rdi], eax; ret; 
0x00000000000a050c: add dword ptr [rdi], ecx; add byte ptr [rax - 0x73], cl; adc eax, 0xf011a; cmove rax, rdx; ret; 
0x00000000000341a9: add dword ptr [rdi], ecx; mov bh, 0xc0; ret; 
0x00000000000a884b: add dword ptr [rdi], ecx; mov esi, 0xd139070c; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a8813: add dword ptr [rdi], ecx; mov esi, 0xf2390714; je 0xa8810; ret; 
0x00000000000f0afe: add dword ptr [rdi], ecx; test bl, bh; add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x0000000000117ed1: add dword ptr [rdi], ecx; test byte ptr [rcx], bl; add al, byte ptr [rax]; add bh, dh; ret; 
0x0000000000155c85: add dword ptr [rdi], ecx; test dword ptr [rax + rax + 0x1b80000], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x00000000001787ce: add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000018a7af: add dword ptr [rdi], ecx; test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b217: add dword ptr [rdi], ecx; test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b4e3: add dword ptr [rdi], ecx; test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017cb6e: add dword ptr [rdi], ecx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000018b843: add dword ptr [rdi], ecx; xchg dword ptr [rsi + 0xffffffc], esi; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x00000000000bc73f: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x00000000000b39d4: add dword ptr [rdx + 0x48028801], ecx; mov eax, edi; ret; 
0x0000000000102a83: add dword ptr [rdx + 2], edi; cmove eax, edx; ret; 
0x0000000000190470: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000063030: add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x000000000018fda1: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000121f26: add dword ptr [rdx + rax*2], 1; ret; 
0x000000000012146b: add dword ptr [rdx - 0x2708fff4], ebp; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001868e6: add dword ptr [rdx - 0x2ef272b8], edx; add qword ptr [r8], rax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018fcfa: add dword ptr [rdx - 0x2f], esp; jl 0x18fd47; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000000bcb3a: add dword ptr [rdx - 0x75], eax; or al, 0x87; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x0000000000190407: add dword ptr [rdx - 0xf], esp; jl 0x190454; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190547: add dword ptr [rdx - 0xf], esp; jl 0x190594; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000013c462: add dword ptr [rdx], eax; pop rbx; ret; 
0x000000000013c461: add dword ptr [rdx], r8d; pop rbx; ret; 
0x00000000000938a6: add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000046c1d: add dword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000043b86: add dword ptr [rsi + 0x17], esi; mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043bd6: add dword ptr [rsi + 0x17], esi; mov rax, 0xfffffffffffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000b39b2: add dword ptr [rsi + 0xf], esp; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3aa8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b08: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3965: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x00000000000b3b28: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b48: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b68: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6739: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000043f2b: add dword ptr [rsi + 0xf], esp; fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001170d5: add dword ptr [rsi - 0x10], esi; cmp al, 0x20; je 0x1170c8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000b39e7: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000b39f7: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000148261: add dword ptr [rsp + rcx + 0x48], esi; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009f0f1: add dword ptr cs:[rax], eax; cmovne rax, rdx; ret; 
0x000000000009f6a4: add dword ptr es:[rax], eax; cmove rax, rdx; ret; 
0x000000000013b60a: add eax, 0x10; ret; 
0x0000000000183aa5: add eax, 0x10; sub edx, esi; cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x00000000000de12b: add eax, 0x10dd40; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd14a: add eax, 0x10ed21; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bcd59: add eax, 0x112c2; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000bcd12: add eax, 0x11389; cmove rax, rdx; ret; 
0x00000000000bdf88: add eax, 0x11923; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000d1dbd: add eax, 0x11a086; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000bc852: add eax, 0x11b79; cmove rax, rdx; ret; 
0x00000000000d0172: add eax, 0x11bcf9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0152: add eax, 0x11bd19; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d0052: add eax, 0x11be19; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0132: add eax, 0x11ef69; add rsp, 8; ret; 
0x000000000009f812: add eax, 0x120a9; cmove rax, rdx; ret; 
0x000000000009f13b: add eax, 0x12340; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000009f662: add eax, 0x12559; cmove rax, rdx; ret; 
0x00000000000bca02: add eax, 0x12699; cmove rax, rdx; ret; 
0x000000000009f6a2: add eax, 0x126b9; cmove rax, rdx; ret; 
0x00000000000bcaf2: add eax, 0x12879; cmove rax, rdx; ret; 
0x00000000000bc878: add eax, 0x12933; cmovne rax, rdx; ret; 
0x00000000000bc812: add eax, 0x129c9; cmove rax, rdx; ret; 
0x00000000000bc962: add eax, 0x12f89; cmove rax, rdx; ret; 
0x000000000009f826: add eax, 0x14c635; lea rdx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f236: add eax, 0x14cc25; lea rdx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e956: add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009f8a5: add eax, 0x14f69e; add rsp, 8; ret; 
0x000000000009f89e: add eax, 0x14f6bd; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f867: add eax, 0x14f6dc; ret; 
0x000000000009f860: add eax, 0x14f6fb; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009d710: add eax, 0x151793; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x000000000009f855: add eax, 0x151c36; test eax, eax; jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009a0ca: add eax, 0x151e11; mov qword ptr [rax], rdi; ret; 
0x000000000009a0c0: add eax, 0x151f1b; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009942f: add eax, 0x152a3c; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000098092: add eax, 0x153dd9; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000009a05f: add eax, 0x154e10; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000961d0: add eax, 0x155d0b; mov qword ptr [rax], rdx; ret; 
0x00000000000961c6: add eax, 0x155e15; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000960bb: add eax, 0x156ac0; add rsp, 0x10; pop rbp; ret; 
0x0000000000095233: add eax, 0x157074; ret; 
0x000000000009520d: add eax, 0x15707e; ret; 
0x0000000000095229: add eax, 0x157082; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951e4: add eax, 0x15709f; ret; 
0x0000000000095202: add eax, 0x1570a9; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951c4: add eax, 0x1570b7; ret; 
0x00000000000951d9: add eax, 0x1570d2; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b9: add eax, 0x1570f2; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095195: add eax, 0x15711e; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000094eaa: add eax, 0x157439; ret; 
0x0000000000094e93: add eax, 0x157448; ret; 
0x0000000000094e3a: add eax, 0x157459; ret; 
0x0000000000094e2a: add eax, 0x157471; ret; 
0x000000000012db72: add eax, 0x158d4800; adc eax, 0x480005dd; cmove eax, edx; ret; 
0x000000000012dc32: add eax, 0x158d4800; xor eax, 0x480005dc; cmove eax, edx; ret; 
0x0000000000095277: add eax, 0x159c24; ret; 
0x0000000000095249: add eax, 0x159c3e; ret; 
0x0000000000093836: add eax, 0x159d65; ret; 
0x0000000000093941: add eax, 0x15ae7e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000094728: add eax, 0x15cd5f; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000094721: add eax, 0x15cd7a; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x000000000008d342: add eax, 0x15eb29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeba: add eax, 0x160fb1; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000a0738: add eax, 0x162d3; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x0000000000084732: add eax, 0x167739; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d424e: add eax, 0x16d; ret; 
0x000000000009f218: add eax, 0x17703; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x0000000000042900: add eax, 0x179e6b; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000042908: add eax, 0x179ea3; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x000000000004263f: add eax, 0x17a11c; por xmm0, xmm1; ret; 
0x0000000000042402: add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423fb: add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d6: add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x00000000000423dd: add eax, 0x17a35e; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000041ef7: add eax, 0x17a7f4; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000420f0: add eax, 0x17abfb; ret; 
0x0000000000042081: add eax, 0x17ac5a; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x000000000004205b: add eax, 0x17ac88; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000042455: add eax, 0x17af36; ret; 
0x000000000004240a: add eax, 0x17af79; ret; 
0x00000000000423e5: add eax, 0x17afa2; ret; 
0x00000000000328c2: add eax, 0x181ab6; ret; 
0x00000000000328a6: add eax, 0x181ad2; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000042b96: add eax, 0x18c48348; ret; 
0x00000000000241a6: add eax, 0x18fcf3; ret; 
0x00000000000241b6: add eax, 0x191abc; ret; 
0x00000000000529fa: add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000529f3: add eax, 0x19bc6d; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000048332: add eax, 0x1a3b39; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000048302: add eax, 0x1a3b69; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000047c5a: add eax, 0x1a4211; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004407b: add eax, 0x1a7df0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f3b: add eax, 0x1a7f30; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df2: add eax, 0x1a8079; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000440f4: add eax, 0x1a80af; mov eax, edx; ret; 
0x00000000000440a5: add eax, 0x1a80fe; ret; 
0x0000000000044095: add eax, 0x1a8112; ret; 
0x0000000000043d32: add eax, 0x1a8139; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c56: add eax, 0x1a8215; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000043c3a: add eax, 0x1a8231; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bf2: add eax, 0x1a8279; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ba2: add eax, 0x1a82c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b53: add eax, 0x1a8318; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043af4: add eax, 0x1a8377; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009f0e8: add eax, 0x1a8a3; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000432a2: add eax, 0x1a8bc9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043062: add eax, 0x1a8e09; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f22: add eax, 0x1a8f49; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000047f86: add eax, 0x1a937b; add rsp, 8; ret; 
0x0000000000042543: add eax, 0x1a9928; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004221d: add eax, 0x1a9c4e; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004757e: add eax, 0x1a9d69; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000041e5c: add eax, 0x1aa00f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000412b2: add eax, 0x1aabb9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000041252: add eax, 0x1aac19; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000a030b: add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x00000000000a09f6: add eax, 0x1b1b5; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0686: add eax, 0x1b505; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0526: add eax, 0x1b685; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000344c6: add eax, 0x1b7a1d; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e6: add eax, 0x1b7a3d; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d56: add eax, 0x1b806d; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000033d12: add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x00000000000328e6: add eax, 0x1b94dd; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000a05ab: add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000003284e: add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000002f5a6: add eax, 0x1be3bd; ret; 
0x000000000009faf8: add eax, 0x1bef3; cmovne rax, rdx; ret; 
0x000000000009f838: add eax, 0x1c103; cmovne rax, rdx; ret; 
0x000000000009f248: add eax, 0x1c643; cmovne rax, rdx; ret; 
0x0000000000026f59: add eax, 0x1c69f6; test eax, eax; je 0x26f68; ret; 
0x00000000000246ea: add eax, 0x1c7781; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000024406: add eax, 0x1c7a65; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab6: add eax, 0x1cb6ed; ret; 
0x0000000000025aa6: add eax, 0x1cb70d; ret; 
0x0000000000023a51: add eax, 0x1cd8d2; ret; 
0x00000000000de288: add eax, 0x1f0fb4eb; add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000198acf: add eax, 0x1f4ae800; clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x5519e], 0; ret; 
0x000000000003454a: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000018d3b5: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a25: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018496a: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000001158ea: add eax, 0x2404c641; add byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x00000000001974af: add eax, 0x25ecc; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x0000000000115ab4: add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001974b7: add eax, 0x271d8; ret; 
0x00000000000b3a24: add eax, 0x289018b; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000047444: add eax, 0x28c48348; ret; 
0x0000000000178854: add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x000000000015d24f: add eax, 0x2e6690eb; nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x00000000001985e3: add eax, 0x2e66fff8; nop dword ptr [rax + rax]; ret; 
0x000000000017cc05: add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000a8be2: add eax, 0x3819; cmove rax, rdx; ret; 
0x000000000012dc50: add eax, 0x3842b; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dad0: add eax, 0x385cb; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000013688d: add eax, 0x38c48348; ret; 
0x000000000002a5a9: add eax, 0x39480000; ret; 
0x000000000012db90: add eax, 0x3aeeb; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x0000000000162365: add eax, 0x3b34e800; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000015d452: add eax, 0x3f98366; jbe 0x15d460; ret; 
0x000000000018d3d5: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188d65: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018498a: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000012d1b0: add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x0000000000048105: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048154: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x00000000000a0687: add eax, 0x480001b5; lea edx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x0000000000153397: add eax, 0x4800098a; lea edx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000114e57: add eax, 0x48000d70; mov eax, dword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x00000000000a0997: add eax, 0x48000eaf; cmove eax, edx; ret; 
0x000000000017ad88: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x0000000000176a38: add eax, 0x48054289; mov eax, edi; ret; 
0x00000000001788a8: add eax, 0x48054289; mov eax, edi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000016dbd3: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9406: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f26: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b7846: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb066: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x0000000000123490: add eax, 0x48104623; lea eax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000019005f: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000001905e4: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000155eb7: add eax, 0x48c48348; ret; 
0x000000000017892d: add eax, 0x49f88948; sub eax, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x00000000001788ab: add eax, 0x49f88948; sub eax, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000017ae09: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a79: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000178929: add eax, 0x5428948; mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x0000000000178850: add eax, 0x54a8d48; jne 0x178b20; ret; 
0x000000000017cc01: add eax, 0x54a8d48; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000198ad9: add eax, 0x5519e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019863d: add eax, 0x5532a; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198e0e: add eax, 0x56319; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000198e74: add eax, 0x566eb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198f47: add eax, 0x56f20; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000199079: add eax, 0x5799e; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000b774a: add eax, 0x57f8d48; jne 0xb7f80; ret; 
0x00000000000b8e2e: add eax, 0x57f8d48; jne 0xb97d0; ret; 
0x000000000019873d: add eax, 0x58d4800; xchg ebx, eax; fadd dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000198ce4: add eax, 0x5b050f00; ret; 
0x0000000000134a90: add eax, 0x5bf08948; ret; 
0x000000000012f0ab: add eax, 0x5cc40; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000001071d8: add eax, 0x5d000000; pop r12; ret; 
0x0000000000199014: add eax, 0x5d050f00; ret; 
0x0000000000154161: add eax, 0x5d5b0000; pop r12; pop r13; ret; 
0x000000000012dc2f: add eax, 0x5dcac; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db6f: add eax, 0x5dd8c; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012daaf: add eax, 0x5de4c; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dd00: add eax, 0x5e07b; cmove rax, rdx; ret; 
0x0000000000184dc3: add eax, 0x60; add rax, rdi; ret; 
0x000000000018d421: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a91: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849aa: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000012dc7a: add eax, 0x629f1; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbba: add eax, 0x62ad1; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012dafa: add eax, 0x62b91; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd3a: add eax, 0x62ee1; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x000000000015cc67: add eax, 0x640008f2; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000017cc2f: add eax, 0x6e88349; lea rcx, [rdx + 6]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b8e4f: add eax, 0x6e88349; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000c9fd6: add eax, 0x74db8500; sbb al, 0x39; ret; 
0x00000000000c9ee1: add eax, 0x74db8500; sbb dword ptr [rcx], edi; ret; 
0x0000000000153c06: add eax, 0x78c48348; ret; 
0x00000000000f2ade: add eax, 0x7b8b4828; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b774e: add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x000000000006f620: add eax, 0x83480000; ret; 
0x000000000017ad8b: add eax, 0x8428d48; ret; 
0x00000000000a0798: add eax, 0x86f3; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x0000000000163656: add eax, 0x88815; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162ff6: add eax, 0x88e75; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162fd6: add eax, 0x88e95; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f96: add eax, 0x88ed5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f76: add eax, 0x88ef5; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f56: add eax, 0x88f15; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f36: add eax, 0x88f35; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000d44e5: add eax, 0x89480000; ret; 
0x000000000008e2f7: add eax, 0x89490000; call 0xffffffffcef3f68c; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000c9476: add eax, 0x89490000; ret; 
0x0000000000160ee6: add eax, 0x8af85; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000160cf2: add eax, 0x8b179; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000198722: add eax, 0x8b486400; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007b9a9: add eax, 0x8b4c0000; movsd dword ptr [rdi], dword ptr [rsi]; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000000e2eca: add eax, 0x8c48348; ret; 
0x00000000000bcaed: add eax, 0x8d48000d; add eax, 0x12879; cmove rax, rdx; ret; 
0x0000000000160fc8: add eax, 0x8decb; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x000000000015cc66: add eax, 0x8f205; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000319bb: add eax, 0x90660000; ret; 
0x0000000000120fe4: add eax, 0x91697; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015d590: add eax, 0x93ba7; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000015c81f: add eax, 0x9475c; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000198e04: add eax, 0x9525e800; call 0xffffffffc761ea0d; add eax, 0x56319; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009f7c8: add eax, 0x9733; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f6f8: add eax, 0x9743; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000153396: add eax, 0x98a05; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000b8e32: add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x0000000000153491: add eax, 0x9d986; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000153486: add eax, 0x9d9b5; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x000000000014e7e7: add eax, 0xa1e88beb; adc al, 0xfe; call qword ptr [rax - 0x5e1f00d]; ret; 
0x00000000000a1c82: add eax, 0xa569; cmove rax, rdx; ret; 
0x00000000001471ca: add eax, 0xa99ad; add rsp, 8; ret; 
0x00000000001471b5: add eax, 0xa99c2; test eax, eax; je 0x1471c0; ret; 
0x00000000001465d4: add eax, 0xaa527; ret; 
0x00000000001465a8: add eax, 0xaa553; add rsp, 8; ret; 
0x0000000000141416: add eax, 0xaabd5; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000143196: add eax, 0xad885; test rax, rax; jne 0x1431a8; ret; 
0x0000000000141d5e: add eax, 0xaecbd; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x000000000009f762: add eax, 0xaef9; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x0000000000140ed9: add eax, 0xaf8e6; test eax, eax; je 0x140ee8; ret; 
0x0000000000138744: add eax, 0xb5197; add rsp, 8; ret; 
0x000000000013bf11: add eax, 0xba; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000a0402: add eax, 0xbab9; cmove rax, rdx; ret; 
0x00000000001300a6: add eax, 0xbbdad; add rax, qword ptr fs:[0]; ret; 
0x000000000012f632: add eax, 0xbc839; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000120c4c: add eax, 0xbd000800; add eax, 0xeb000000; ret; 
0x000000000018e7ea: add eax, 0xc0310000; ret; 
0x000000000012d23d: add eax, 0xc2c36; pop rbp; ret; 
0x000000000017ae0d: add eax, 0xc428d48; ret; 
0x00000000000b85ad: add eax, 0xc478d48; ret; 
0x00000000000b8f3d: add eax, 0xc478d48; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000a09b0: add eax, 0xc56fb; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a0640: add eax, 0xc5a4b; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04e0: add eax, 0xc85ab; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x0000000000122ad6: add eax, 0xc9385; mov eax, dword ptr [rax + 0x38]; ret; 
0x0000000000125f65: add eax, 0xc9e72; add byte ptr [rax + rax], al; add al, ch; popfq; ret; 
0x0000000000121ec1: add eax, 0xca496; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e98: add eax, 0xca4bf; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e67: add eax, 0xca4f0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000121e41: add eax, 0xca516; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e5a: add eax, 0xca539; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000121aca: add eax, 0xca88d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121a95: add eax, 0xca8c2; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000d422f: add eax, 0xcac1fa89; add al, byte ptr [rcx - 0x70a3d706]; add dh, byte ptr [rsi + 3]; ret; 
0x00000000001202c6: add eax, 0xcbba5; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001221f2: add eax, 0xcd881; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e2: add eax, 0xcd891; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000121f17: add eax, 0xcdb34; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000011d232: add eax, 0xcec39; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000bcdfb: add eax, 0xcef00; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcd7a: add eax, 0xcf121; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000011c70a: add eax, 0xcf761; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001199f2: add eax, 0xd2479; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001199bd: add eax, 0xd24ae; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011917f: add eax, 0xd2cec; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118b1a: add eax, 0xd3351; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118925: add eax, 0xd3a1e; test edi, edi; je 0x118934; mov dword ptr [rip + 0xd3a14], edi; ret; 
0x000000000011936b: add eax, 0xd44c0; pop rcx; pop rbp; pop r12; pop r13; ret; 
0x00000000000b940d: add eax, 0xd478d48; ret; 
0x0000000000118e16: add eax, 0xd4a0d; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000116f69: add eax, 0xd4f02; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000001193f4: add eax, 0xd64c7; add rsp, 0x18; ret; 
0x0000000000115992: add eax, 0xd64d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011596a: add eax, 0xd6501; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001193a4: add eax, 0xd6557; pop r12; pop r13; ret; 
0x0000000000115826: add eax, 0xd6645; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000118eac: add eax, 0xd69bf; add rsp, 8; ret; 
0x0000000000118e51: add eax, 0xd6a3a; pop rbp; pop r12; pop r13; ret; 
0x0000000000114e56: add eax, 0xd7005; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x00000000001145a6: add eax, 0xd78c5; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144ea: add eax, 0xd7981; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001144d6: add eax, 0xd79ed; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000117e2b: add eax, 0xd7a20; cmp eax, 1; jg 0x117e36; ret; 
0x000000000011790f: add eax, 0xd7e7c; add rsp, 8; ret; 
0x00000000001178e8: add eax, 0xd7e9f; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000011789e: add eax, 0xd7eed; mov rax, r8; add rsp, 8; ret; 
0x000000000011786e: add eax, 0xd7f1d; mov rax, r8; ret; 
0x000000000011397d: add eax, 0xd84ee; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011391c: add eax, 0xd854f; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001170ef: add eax, 0xd867b; and ecx, dword ptr [rcx + rcx*4 - 0x40]; mov byte ptr [rsi - 1], 0; ret; 
0x000000000011336a: add eax, 0xd8b01; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000113334: add eax, 0xd8b37; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b4a: add eax, 0xd9321; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000112a12: add eax, 0xd9459; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000001160bb: add eax, 0xd957c; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000115dbd: add eax, 0xd98b6; add rsp, 8; ret; 
0x0000000000115daf: add eax, 0xd98bc; mov qword ptr [rip + 0xd98e5], rax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000115db6: add eax, 0xd98e5; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000115d02: add eax, 0xd9939; mov eax, 1; add rsp, 8; ret; 
0x0000000000110fc2: add eax, 0xdaea9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112d0d: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x0000000000198c28: add eax, 0xdb854800; jne 0x198c10; pop rbx; ret; 
0x000000000010de5a: add eax, 0xde011; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010de42: add eax, 0xde029; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dde6: add eax, 0xde085; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010dc0a: add eax, 0xde261; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dbaa: add eax, 0xde2c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db4a: add eax, 0xde321; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dabf: add eax, 0xde3ac; mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x000000000010d7c2: add eax, 0xde6a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d762: add eax, 0xde709; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d702: add eax, 0xde769; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b784d: add eax, 0xde88349; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x000000000010d466: add eax, 0xde9f5; lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000dd812: add eax, 0xe3394c01; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a046a: add eax, 0xe4a81; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a08db: add eax, 0xe560; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a083b: add eax, 0xe5e0; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000a098f: add eax, 0xeaf7c; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x0000000000120c51: add eax, 0xeb000000; ret; 
0x00000000000a061f: add eax, 0xeb2cc; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04bf: add eax, 0xeb44c; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a0590: add eax, 0xeb7fb; cmove rax, rdx; ret; 
0x00000000000fec96: add eax, 0xed31d; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x000000000016df3a: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000a09da: add eax, 0xefcc1; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a066a: add eax, 0xf0011; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a050a: add eax, 0xf0191; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05ca: add eax, 0xf0661; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x0000000000120467: add eax, 0xf7000cba; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000120267: add eax, 0xf7000cbc; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc67: add eax, 0xf7000cc2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d67: add eax, 0xf7000d31; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115367: add eax, 0xf7000d6b; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115167: add eax, 0xf7000d6d; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff67: add eax, 0xf7000dbf; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc67: add eax, 0xf7000de2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000102667: add eax, 0xf7000e98; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000016df43: add eax, 0xf7f0ff3; ret; 
0x00000000000a1cc2: add eax, 0xf9e9; cmove rax, rdx; ret; 
0x000000000012f0ae: add eax, 0xfa834800; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x0000000000052acb: add eax, 0xfd8ee800; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000112f45: add eax, 0xfff0003d; push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x112f58; neg eax; ret; 
0x0000000000113195: add eax, 0xfff0003d; push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x1131a8; neg eax; ret; 
0x000000000012dc96: add eax, 0xfff8dee5; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000012dbd6: add eax, 0xfff8dfc5; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012db16: add eax, 0xfff8e085; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dd1b: add eax, 0xfff8e1d0; cmovne rax, rdx; ret; 
0x000000000009d16a: add eax, 0xfffffe71; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d107: add eax, 0xfffffed4; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0fea: add eax, 0xfffffee1; ret; 
0x00000000000d0fda: add eax, 0xfffffef1; add rsp, 0x58; ret; 
0x00000000000d0eca: add eax, 0xfffffef1; ret; 
0x00000000000d0eba: add eax, 0xffffff01; add rsp, 0x58; ret; 
0x000000000010d478: add eax, 0xffffff43; cmove rax, rdx; ret; 
0x0000000000054331: add eax, 1; cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000ec3e5: add eax, 1; cmp eax, dword ptr [rsi + 0x40]; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x0000000000121e55: add eax, 1; cmp rax, qword ptr [rip + 0xca539]; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000122191: add eax, 1; mov dword ptr [rdx], eax; ret; 
0x00000000000bcb38: add eax, 1; mov ecx, dword ptr [rdi + r8*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x00000000001221d2: add eax, 1; mov word ptr [rdx], ax; ret; 
0x00000000000a8811: add eax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x00000000000a06bf: add eax, 1; ret; 
0x00000000000a88c9: add eax, 1; test cl, cl; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000a28d1: add eax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000cfae8: add eax, 2; ret; 
0x00000000000cfb01: add eax, 3; ret; 
0x0000000000157772: add eax, 4; bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000001577b2: add eax, 4; bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bdfb4: add eax, 4; cmp edx, esi; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000001577f5: add eax, 4; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bcc33: add eax, 4; test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x0000000000117899: add eax, 8; mov qword ptr [rip + 0xd7eed], rax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117869: add eax, 8; mov qword ptr [rip + 0xd7f1d], rax; mov rax, r8; ret; 
0x000000000002440d: add eax, dword ptr [0]; ret; 
0x00000000000f9752: add eax, dword ptr [rax]; add al, ch; mov dh, 0x8b; dec dword ptr [rax - 0x77]; ret; 
0x000000000006680d: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x7d]; ret; 
0x000000000017cb72: add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000121a9a: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000dcff8: add eax, dword ptr [rax]; add byte ptr [rax], al; cmovne eax, edx; ret; 
0x00000000000cfb43: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000010ea31: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10ea80; ret; 
0x0000000000113565: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113578; ret; 
0x000000000013a7c7: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; ret; 
0x0000000000094600: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x0000000000029b42: add eax, dword ptr [rax]; add byte ptr [rbx + 0x4be02e0], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000051ec4: add eax, dword ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000002c0ee: add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000023d29: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000ff805: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; dec dword ptr [rbp - 0x77]; ret; 
0x000000000012fc08: add eax, dword ptr [rax]; add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x000000000012dada: add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000bc134: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000012dc53: add eax, dword ptr [rax]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dad3: add eax, dword ptr [rax]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db93: add eax, dword ptr [rax]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a8747: add eax, dword ptr [rax]; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000de127: add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc119: add eax, dword ptr [rax]; ret; 
0x0000000000088041: add eax, dword ptr [rbx + rcx*4]; mov eax, r8d; ret; 
0x0000000000178819: add eax, dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x000000000005503f: add eax, dword ptr [rcx + 0x52]; ret; 
0x0000000000123589: add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000b395e: add eax, dword ptr [rcx]; add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000010db7f: add eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10db90; ret; 
0x00000000000d0e95: add eax, dword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb5: add eax, dword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000015fec3: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x0000000000123331: add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000178919: add eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x000000000009e920: add eax, dword ptr [rdx]; sub eax, edx; mov rdx, qword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x0000000000115a02: add eax, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x000000000017cc08: add eax, dword ptr fs:[rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000010d3e6: add eax, eax; cmp rdi, rsi; ja 0x10d3d8; mov eax, r8d; ret; 
0x000000000005ea38: add eax, eax; mov eax, r8d; ret; 
0x00000000000a8afb: add eax, eax; notrack jmp rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000ee328: add eax, eax; pop rbx; pop rbp; ret; 
0x0000000000184e91: add eax, eax; vzeroupper; ret; 
0x000000000012dd8b: add eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009f839: add eax, ecx; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x00000000001885b8: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x000000000013cbd3: add eax, ecx; cmovs eax, edx; ret; 
0x00000000001484f5: add eax, ecx; notrack jmp rax; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000abf49: add eax, ecx; ret; 
0x0000000000183ae6: add eax, ecx; sub rax, rdi; ret; 
0x000000000018d2dd: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018895d: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x00000000001463de: add eax, ecx; sub rdx, 1; jne 0x146368; ret; 
0x00000000001847e6: add eax, ecx; vzeroupper; ret; 
0x0000000000184e8e: add eax, edi; add rax, r8; vzeroupper; ret; 
0x00000000000abf46: add eax, edi; add rax, rcx; ret; 
0x000000000018d2da: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018895a: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001847e3: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x00000000000ac77a: add eax, edi; add rax, rsi; ret; 
0x00000000000a220f: add eax, edi; dec dword ptr [rax + 0x29]; ret; 
0x00000000000a89c5: add eax, edi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89dd: add eax, edi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a89a6: add eax, edi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x000000000014d27b: add eax, edi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000a8979: add eax, edi; ret; 
0x000000000018d395: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a15: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000018495a: add eax, edi; vzeroupper; ret; 
0x00000000000b1d56: add eax, edx; sub rax, rdi; ret; 
0x00000000000cf84b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000481e0: add eax, esi; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000bc0c1: add eax, esi; notrack jmp rax; nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x00000000000ac77d: add eax, esi; ret; 
0x00000000000da9f0: add ebp, dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000160026: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000009e9b6: add ebx, dword ptr [rbx + 0x44]; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000009d10e: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000095181: add ebx, dword ptr [rbx + 0x5d]; ret; 
0x000000000015348e: add ebx, dword ptr [rbx - 0x39]; add eax, 0x9d986; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000041240: add ebx, dword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000010e36b: add ebx, ebx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000016e103: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000190d12: add ecx, 0x100; cmp rdx, rcx; jne 0x190cf6; vzeroupper; ret; 
0x000000000010c8a6: add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000015f45c: add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000018be3f: add ecx, 0x80; cmp rdx, rcx; jne 0x18be2b; vzeroupper; ret; 
0x000000000013c745: add ecx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000000b3a6a: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x0000000000178885: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x0000000000095a5c: add ecx, dword ptr [rax + 0x29]; ret; 
0x000000000013c940: add ecx, dword ptr [rax - 0x3f]; call 0x7ff44c4c; ret; 
0x000000000017cbb3: add ecx, dword ptr [rax - 0x73]; add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000198d52: add ecx, dword ptr [rax - 0x73]; insb byte ptr [rdi], dx; ret; 
0x000000000018a6cd: add ecx, dword ptr [rax - 0x73]; jg 0x18a6d5; jne 0x18a930; vzeroupper; ret; 
0x000000000018b401: add ecx, dword ptr [rax - 0x73]; jg 0x18b409; jne 0x18b660; vzeroupper; ret; 
0x00000000000b770c: add ecx, dword ptr [rax - 0x73]; jg 0xb7714; jne 0xb7f80; ret; 
0x00000000000b8df0: add ecx, dword ptr [rax - 0x73]; jg 0xb8df8; jne 0xb97d0; ret; 
0x0000000000136f2e: add ecx, dword ptr [rax - 0x75]; push rdi; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b3a6e: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000178889: add ecx, dword ptr [rax - 0x77]; clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x00000000000e8645: add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000154792: add ecx, dword ptr [rax - 0x77]; or byte ptr [r8 + 1], r15b; pop rbx; pop rbp; pop r12; ret; 
0x00000000000288ea: add ecx, dword ptr [rax - 0x77]; ror dword ptr [rax + 0x39], 1; ret; 
0x0000000000064303: add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000a70c1: add ecx, dword ptr [rbp + 0x39]; ret; 
0x00000000000469a7: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x000000000016de72: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b8514: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000000b9364: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000b7784: add ecx, dword ptr [rcx + 0x357890f]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc4: add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b3a6b: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x0000000000178886: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x0000000000153517: add ecx, dword ptr [rcx - 0x77]; ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; ret; 
0x0000000000053213: add ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000db9e7: add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f1d42: add ecx, dword ptr [rdi]; test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000018a6d1: add ecx, dword ptr [rdi]; test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7710: add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000017cbb7: add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000c974e: add ecx, dword ptr [rdi]; xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000c9472: add ecx, dword ptr [rdi]; xchg dl, bh; add eax, 0x89490000; ret; 
0x000000000002a5a5: add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000db682: add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001840f0: add ecx, eax; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000cbaa6: add ecx, ebp; retf 0xfffb; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000119864: add ecx, ebx; ret; 
0x0000000000116f71: add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000d422a: add edi, 0x51eb850; mov edx, edi; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x00000000000e81de: add edi, 1; test al, al; jne 0xe8191; xor eax, eax; ret; 
0x000000000009eb12: add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c38b: add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000117bb9: add edi, dword ptr [rsi - 1]; inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x00000000000482f2: add edi, eax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000011fab1: add edi, ebp; xor eax, eax; ret; 
0x000000000013c728: add edi, edx; mov qword ptr [r9], rdi; ret; 
0x00000000000e505e: add edx, 0x4df3231b; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000093552: add edx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000013c64b: add edx, 1; mov eax, edx; cmp esi, eax; ja 0x13c63c; mov eax, 0xffffffff; ret; 
0x000000000013cb4a: add edx, 1; test rdx, rdx; js 0x13cb60; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000013c455: add edx, 2; mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013c67e: add edx, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000013c78f: add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x0000000000121025: add edx, eax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000009ef61: add edx, eax; jb 0x9ef6c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000184dd8: add edx, eax; jl 0x184e10; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184d73: add edx, eax; jl 0x184e10; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184df8: add edx, eax; jl 0x184e10; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184d22: add edx, eax; jl 0x184e10; add rax, rdi; vzeroupper; ret; 
0x00000000000ac688: add edx, eax; jl 0xac6f0; add rax, rdi; ret; 
0x00000000000ac698: add edx, eax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac6b8: add edx, eax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac6d8: add edx, eax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000056af2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000005b4c7: add edx, ebp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000000a8a3e: add edx, edi; notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000bafc9: add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x000000000015d43c: add esi, dword ptr [rdi + 0x11]; cmp dx, cx; sete al; ret; 
0x000000000009f219: add esi, dword ptr [rdi + 1]; add byte ptr [rax - 0x73], cl; adc eax, 0xd60fc; cmovne rax, rdx; ret; 
0x0000000000118969: add esi, dword ptr [rip - 0x2708fff3]; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000014896f: add esi, dword ptr [rsi + 0xe]; mov eax, 2; ret; 
0x000000000015d456: add esi, dword ptr [rsi + 7]; ret; 
0x00000000001161a1: add esi, eax; call ptr [r8 + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000001494bf: add esi, eax; cmp rsi, qword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000015773a: add esi, eax; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x00000000000ec469: add esi, eax; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000011faec: add esi, ebp; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000013c83e: add esi, ebx; movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000016e023: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000000bbb5e: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f467: add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000013c7f1: add esi, ebx; stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d3: add esi, ebx; stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aed: add esi, ebx; stosq qword ptr [rdi], rax; ret; 
0x00000000000bc21a: add esi, edi; int1; mov eax, eax; ret; 
0x00000000000ee3e4: add esi, esi; ret; 
0x00000000000bb92d: add esp, 0x100; sub rax, rdx; ret; 
0x00000000000bb9dd: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000062846: add esp, 0x1010; pop rbp; ret; 
0x0000000000062651: add esp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000118e4c: add esp, 0x10; lea rax, [rip + 0xd6a3a]; pop rbp; pop r12; pop r13; ret; 
0x000000000009d4e3: add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000000044152: add esp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000001525a6: add esp, 0x10; mov eax, r8d; pop r12; ret; 
0x000000000015cdf3: add esp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000046d2d: add esp, 0x10; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x000000000002ff30: add esp, 0x10; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000812d9: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000995a0: add esp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000009ce45: add esp, 0x10; mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000993a9: add esp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000008dfda: add esp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000000144be0: add esp, 0x10; pop r12; ret; 
0x000000000002ff08: add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000000960c1: add esp, 0x10; pop rbp; ret; 
0x0000000000062566: add esp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000081125: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042895: add esp, 0x10; pop rbx; ret; 
0x0000000000160b7f: add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000015288e: add esp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043022: add esp, 0x118; ret; 
0x000000000010f528: add esp, 0x130; pop rbp; ret; 
0x00000000000438e9: add esp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000042ef2: add esp, 0x148; ret; 
0x000000000013dea0: add esp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000147316: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000046e6c: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000009cf7b: add esp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000062e2a: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000476c2: add esp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000007a3f8: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000429f6: add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000349eb: add esp, 0x18; ret; 
0x000000000015d3e3: add esp, 0x190; mov rax, r8; pop rbp; ret; 
0x00000000001150e3: add esp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d83e: add esp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000000062353: add esp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000000947f8: add esp, 0x20; and eax, 0xc; pop rbx; ret; 
0x00000000000df3a1: add esp, 0x20; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000138167: add esp, 0x20; mov eax, r8d; pop rbp; ret; 
0x00000000000dfdff: add esp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000082ca9: add esp, 0x20; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000042ab1: add esp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x0000000000042b42: add esp, 0x20; pop rbp; ret; 
0x000000000002f82d: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ca0b6: add esp, 0x20; pop rbx; ret; 
0x00000000000d42e9: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000044583: add esp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001259a1: add esp, 0x260; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000152ea9: add esp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000081878: add esp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000008ab9e: add esp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000006272b: add esp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000147242: add esp, 0x28; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001526e5: add esp, 0x28; pop rbx; pop r12; ret; 
0x00000000000426d3: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b05d: add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000047446: add esp, 0x28; ret; 
0x0000000000086ba8: add esp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x000000000005b9c5: add esp, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000001972b8: add esp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000011327d: add esp, 0x30; pop rbp; ret; 
0x0000000000091259: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196e9f: add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010e82e: add esp, 0x30; pop rbx; ret; 
0x0000000000025b96: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002448c: add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000005b878: add esp, 0x38; ret; 
0x000000000014f159: add esp, 0x40; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112c78: add esp, 0x40; pop r12; ret; 
0x0000000000099202: add esp, 0x40; pop rbp; ret; 
0x0000000000043999: add esp, 0x40; pop rbx; ret; 
0x0000000000122b9c: add esp, 0x40; ret; 
0x00000000000623e3: add esp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x000000000011c1ee: add esp, 0x418; ret; 
0x000000000005b5b6: add esp, 0x450; pop rbp; ret; 
0x0000000000083e3f: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001521b4: add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000008dbdb: add esp, 0x48; ret; 
0x000000000014eabf: add esp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000015c7d1: add esp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000005520d: add esp, 0x58; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000013e0a6: add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000d0ea4: add esp, 0x58; ret; 
0x000000000015415e: add esp, 0x5c8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000113b2f: add esp, 0x60; mov eax, r11d; pop rbx; ret; 
0x00000000001140a8: add esp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000001152b8: add esp, 0x60; pop rbp; ret; 
0x000000000010df7c: add esp, 0x68; pop rbp; pop r12; ret; 
0x00000000000bcf7e: add esp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001010ed: add esp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010e6ed: add esp, 0x68; ret; 
0x00000000000bd0d3: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010e0f7: add esp, 0x78; ret; 
0x000000000015e54f: add esp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000011cd3d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x000000000004354d: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157d3c: add esp, 0x90; pop rbx; ret; 
0x00000000000436c4: add esp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044297: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024243: add esp, 0x98; ret; 
0x0000000000114396: add esp, 0xa0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000142407: add esp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043a8d: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000001210a0: add esp, 0xa0; pop rbx; ret; 
0x00000000000de746: add esp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000044425: add esp, 0xa8; ret; 
0x000000000002f6ff: add esp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000001100ca: add esp, 0xb8; pop rbx; pop r12; pop r13; pop r14; ret; 
0x00000000000e49bb: add esp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000122084: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052c08: add esp, 0xd8; ret; 
0x00000000000d119e: add esp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000ddc58: add esp, 0xe0; pop rbx; ret; 
0x0000000000081a3d: add esp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000ee325: add esp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000013c611: add esp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000149559: add esp, 8; lea r8d, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000001465cf: add esp, 8; lea rax, [rip + 0xaa527]; ret; 
0x00000000000dd751: add esp, 8; lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000146bb1: add esp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000137087: add esp, 8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000000832e9: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000155e41: add esp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000832c7: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000089dfb: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000014e00a: add esp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000005b931: add esp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000082404: add esp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011759f: add esp, 8; mov eax, r8d; ret; 
0x0000000000102819: add esp, 8; mov eax, r9d; ret; 
0x0000000000085429: add esp, 8; mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000004779f: add esp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000a0a41: add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009efc2: add esp, 8; mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000009f9e5: add esp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x00000000000831b2: add esp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000014e043: add esp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d9: add esp, 8; movzx eax, al; neg eax; ret; 
0x0000000000148e30: add esp, 8; movzx eax, al; pop rbp; pop r12; ret; 
0x000000000014a2f7: add esp, 8; movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000000522b6: add esp, 8; movzx eax, al; ret; 
0x000000000014142e: add esp, 8; movzx eax, ax; ret; 
0x0000000000157f26: add esp, 8; not eax; shr eax, 0x1f; ret; 
0x000000000008541a: add esp, 8; pop rbp; pop r12; ret; 
0x000000000008b4e7: add esp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000055688: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024e09: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000026f79: add esp, 8; ret; 
0x0000000000162fc5: add esp, 8; sar eax, 0x1f; ret; 
0x0000000000149544: add esp, 8; sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000012bbbc: add esp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000935e3: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000ee533: add esp, 8; xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000046c85: add esp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000091f00: add esp, dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000b39f4: add esp, dword ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000018fcf9: add qword ptr [r10 - 0x2f], r12; jl 0x18fd47; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000048d0a: add qword ptr [r8 - 0x7d], rcx; ret; 
0x0000000000186920: add qword ptr [r8], rax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001868ec: add qword ptr [r8], rax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000006ab57: add qword ptr [rax - 0x77], rcx; lea edx, [rax - 0x77000005]; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000008df29: add qword ptr [rax - 0x77], rcx; sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x00000000000a45c6: add qword ptr [rax], r8; add byte ptr [rcx - 9], al; ret; 
0x0000000000094d00: add qword ptr [rax], r9; add byte ptr [rax - 0x68], cl; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000186bc0: add qword ptr [rax], rax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000127b8d: add qword ptr [rbp + 0x38], rbx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d4e4: add qword ptr [rbx + 0x18], rbp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127b23: add qword ptr [rbx + 0x38], rbp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000012df0a: add qword ptr [rcx + rcx*8 - 0x76b7578b], rax; clc; ret; 
0x0000000000066692: add qword ptr [rcx - 0x77], rcx; or byte ptr [r15 + r9 - 0x4a], r8b; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001787cd: add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000017cb6d: add qword ptr [rdi], rcx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000046c1c: add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c454: add r10, 2; mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013c67d: add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000004123f: add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000016e102: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000005b9c4: add r12d, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000013c83d: add r14, r11; movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000016e092: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000016e022: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000000bcb37: add r8, 1; mov ecx, dword ptr [rdi + r8*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x00000000000a7ac1: add r8b, byte ptr [r8]; add bh, dh; ret; 
0x000000000018ae37: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a7: add r8b, byte ptr [r8]; vzeroupper; ret; 
0x000000000010499c: add r8b, r13b; pop rbp; ret; 
0x000000000010d3e5: add r8d, eax; cmp rdi, rsi; ja 0x10d3d8; mov eax, r8d; ret; 
0x000000000005ea37: add r8d, eax; mov eax, r8d; ret; 
0x000000000002c0f3: add r9b, byte ptr [r8 + 0x39]; ret; 
0x00000000001122e7: add r9b, r14b; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000183aa4: add rax, 0x10; sub edx, esi; cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x0000000000034549: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000018d3b4: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a24: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184969: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000178853: add rax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x000000000017cc04: add rax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018d3d4: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a44: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184989: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000019873c: add rax, 0x58d4800; xchg ebx, eax; fadd dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000018d420: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a90: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849a9: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000054330: add rax, 1; cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x0000000000121e54: add rax, 1; cmp rax, qword ptr [rip + 0xca539]; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x00000000000a8810: add rax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x00000000000cfaf0: add rax, 1; ret; 
0x00000000000a88c8: add rax, 1; test cl, cl; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000a28d0: add rax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000cfae7: add rax, 2; ret; 
0x00000000000cfb00: add rax, 3; ret; 
0x0000000000157771: add rax, 4; bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000001577b1: add rax, 4; bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bdfb3: add rax, 4; cmp edx, esi; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000001577f4: add rax, 4; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bcc32: add rax, 4; test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x0000000000117898: add rax, 8; mov qword ptr [rip + 0xd7eed], rax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117868: add rax, 8; mov qword ptr [rip + 0xd7f1d], rax; mov rax, r8; ret; 
0x000000000002440c: add rax, qword ptr [0]; ret; 
0x00000000000d0e94: add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb4: add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000015fec2: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000002440b: add rax, qword ptr fs:[0]; ret; 
0x00000000000a8afa: add rax, r8; notrack jmp rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000184e90: add rax, r8; vzeroupper; ret; 
0x000000000012dd8a: add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001885b7: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000001484f4: add rax, rcx; notrack jmp rax; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000abf48: add rax, rcx; ret; 
0x0000000000183ae5: add rax, rcx; sub rax, rdi; ret; 
0x000000000018d2dc: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018895c: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001847e5: add rax, rcx; vzeroupper; ret; 
0x0000000000184e8d: add rax, rdi; add rax, r8; vzeroupper; ret; 
0x00000000000abf45: add rax, rdi; add rax, rcx; ret; 
0x000000000018d2d9: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188959: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001847e2: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000ac779: add rax, rdi; add rax, rsi; ret; 
0x00000000000a89c4: add rax, rdi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89dc: add rax, rdi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a89a5: add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x000000000014d27a: add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000a8978: add rax, rdi; ret; 
0x000000000018d394: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a14: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184959: add rax, rdi; vzeroupper; ret; 
0x00000000000b1d55: add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf84a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000481df: add rax, rsi; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000bc0c0: add rax, rsi; notrack jmp rax; nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x00000000000ac77c: add rax, rsi; ret; 
0x0000000000190d11: add rcx, 0x100; cmp rdx, rcx; jne 0x190cf6; vzeroupper; ret; 
0x000000000018be3e: add rcx, 0x80; cmp rdx, rcx; jne 0x18be2b; vzeroupper; ret; 
0x000000000013c744: add rcx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x000000000017cbb6: add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000001840ef: add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000e81dd: add rdi, 1; test al, al; jne 0xe8191; xor eax, eax; ret; 
0x00000000000482f1: add rdi, rax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000013c727: add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x00000000000e505d: add rdx, 0x4df3231b; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000093551: add rdx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000013cb49: add rdx, 1; test rdx, rdx; js 0x13cb60; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000056af1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000121024: add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000009ef60: add rdx, rax; jb 0x9ef6c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000184dd7: add rdx, rax; jl 0x184e10; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184d72: add rdx, rax; jl 0x184e10; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184df7: add rdx, rax; jl 0x184e10; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184d21: add rdx, rax; jl 0x184e10; add rax, rdi; vzeroupper; ret; 
0x00000000000ac687: add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x00000000000ac697: add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac6b7: add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac6d7: add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000a8a3d: add rdx, rdi; notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x0000000000157739: add rsi, r8; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x00000000001494be: add rsi, rax; cmp rsi, qword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000000bb92c: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb9dc: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000062845: add rsp, 0x1010; pop rbp; ret; 
0x0000000000062650: add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000118e4b: add rsp, 0x10; lea rax, [rip + 0xd6a3a]; pop rbp; pop r12; pop r13; ret; 
0x000000000009d4e2: add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x0000000000044151: add rsp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000001525a5: add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x000000000015cdf2: add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000046d2c: add rsp, 0x10; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x000000000002ff2f: add rsp, 0x10; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000812d8: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000009959f: add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000009ce44: add rsp, 0x10; mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x00000000000993a8: add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000008dfd9: add rsp, 0x10; movzx eax, al; pop rbx; neg eax; ret; 
0x0000000000144bdf: add rsp, 0x10; pop r12; ret; 
0x000000000002ff07: add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000000960c0: add rsp, 0x10; pop rbp; ret; 
0x0000000000062565: add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000081124: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042894: add rsp, 0x10; pop rbx; ret; 
0x0000000000160b7e: add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000015288d: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043021: add rsp, 0x118; ret; 
0x000000000010f527: add rsp, 0x130; pop rbp; ret; 
0x00000000000438e8: add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000042ef1: add rsp, 0x148; ret; 
0x000000000013de9f: add rsp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000147315: add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000046e6b: add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000009cf7a: add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000062e29: add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000476c1: add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000007a3f7: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000429f5: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000349ea: add rsp, 0x18; ret; 
0x000000000015d3e2: add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x00000000001150e2: add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d83d: add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x0000000000062352: add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000000947f7: add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x00000000000df3a0: add rsp, 0x20; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000138166: add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x00000000000dfdfe: add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000082ca8: add rsp, 0x20; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000042ab0: add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x0000000000042b41: add rsp, 0x20; pop rbp; ret; 
0x000000000002f82c: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ca0b5: add rsp, 0x20; pop rbx; ret; 
0x00000000000d42e8: add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000044582: add rsp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001259a0: add rsp, 0x260; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000152ea8: add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000081877: add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000008ab9d: add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000006272a: add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000147241: add rsp, 0x28; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001526e4: add rsp, 0x28; pop rbx; pop r12; ret; 
0x00000000000426d2: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b05c: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000047445: add rsp, 0x28; ret; 
0x0000000000086ba7: add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x00000000001972b7: add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000011327c: add rsp, 0x30; pop rbp; ret; 
0x0000000000091258: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000196e9e: add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x000000000010e82d: add rsp, 0x30; pop rbx; ret; 
0x0000000000025b95: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002448b: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000005b877: add rsp, 0x38; ret; 
0x000000000014f158: add rsp, 0x40; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112c77: add rsp, 0x40; pop r12; ret; 
0x0000000000099201: add rsp, 0x40; pop rbp; ret; 
0x0000000000043998: add rsp, 0x40; pop rbx; ret; 
0x0000000000122b9b: add rsp, 0x40; ret; 
0x00000000000623e2: add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x000000000011c1ed: add rsp, 0x418; ret; 
0x000000000005b5b5: add rsp, 0x450; pop rbp; ret; 
0x0000000000083e3e: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001521b3: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000008dbda: add rsp, 0x48; ret; 
0x000000000014eabe: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000015c7d0: add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000005520c: add rsp, 0x58; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000013e0a5: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x00000000000d0ea3: add rsp, 0x58; ret; 
0x000000000015415d: add rsp, 0x5c8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000113b2e: add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x00000000001140a7: add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000001152b7: add rsp, 0x60; pop rbp; ret; 
0x000000000010df7b: add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000000bcf7d: add rsp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001010ec: add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000010e6ec: add rsp, 0x68; ret; 
0x00000000000bd0d2: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000010e0f6: add rsp, 0x78; ret; 
0x000000000015e54e: add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000011cd3c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000004354c: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157d3b: add rsp, 0x90; pop rbx; ret; 
0x00000000000436c3: add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044296: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024242: add rsp, 0x98; ret; 
0x0000000000114395: add rsp, 0xa0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000142406: add rsp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043a8c: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000012109f: add rsp, 0xa0; pop rbx; ret; 
0x00000000000de745: add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000044424: add rsp, 0xa8; ret; 
0x000000000002f6fe: add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000001100c9: add rsp, 0xb8; pop rbx; pop r12; pop r13; pop r14; ret; 
0x00000000000e49ba: add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000122083: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000052c07: add rsp, 0xd8; ret; 
0x00000000000d119d: add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000ddc57: add rsp, 0xe0; pop rbx; ret; 
0x0000000000081a3c: add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000ee324: add rsp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000013c610: add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000149558: add rsp, 8; lea r8d, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000001465ce: add rsp, 8; lea rax, [rip + 0xaa527]; ret; 
0x00000000000dd750: add rsp, 8; lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000146bb0: add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000137086: add rsp, 8; mov eax, 0xa; pop rbx; pop rbp; ret; 
0x00000000000832e8: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000155e40: add rsp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000832c6: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000089dfa: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000014e009: add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000005b930: add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000082403: add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011759e: add rsp, 8; mov eax, r8d; ret; 
0x0000000000102818: add rsp, 8; mov eax, r9d; ret; 
0x0000000000085428: add rsp, 8; mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000004779e: add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000a0a40: add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009efc1: add rsp, 8; mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000009f9e4: add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x00000000000831b1: add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000014e042: add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d8: add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000148e2f: add rsp, 8; movzx eax, al; pop rbp; pop r12; ret; 
0x000000000014a2f6: add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret; 
0x00000000000522b5: add rsp, 8; movzx eax, al; ret; 
0x000000000014142d: add rsp, 8; movzx eax, ax; ret; 
0x0000000000157f25: add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000085419: add rsp, 8; pop rbp; pop r12; ret; 
0x000000000008b4e6: add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000055687: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000024e08: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000026f78: add rsp, 8; ret; 
0x0000000000162fc4: add rsp, 8; sar eax, 0x1f; ret; 
0x0000000000149543: add rsp, 8; sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000012bbbb: add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000935e2: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000ee532: add rsp, 8; xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000046c84: add rsp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000001221eb: add word ptr [rax], 1; ret; 
0x0000000000121f25: add word ptr [rdx + rax*2], 1; ret; 
0x000000000004217b: addps xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000421ef: addps xmm0, xmm0; ret; 
0x0000000000042101: addps xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004217a: addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000421ee: addsd xmm0, xmm0; ret; 
0x0000000000042100: addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042460: addss xmm0, xmm0; ret; 
0x00000000000a5dce: and al, 0; add bh, dh; ret; 
0x00000000000b4221: and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000a2074: and al, 0; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000d41b5: and al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e4fc2: and al, 0; add byte ptr [rbp + 0x1c], dh; mov eax, 0xfffa; ret; 
0x00000000001158ee: and al, 0; mov rax, r12; pop r12; ret; 
0x000000000003007f: and al, 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000128781: and al, 0x10; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e2c95: and al, 0x10; add rsp, 0x28; ret; 
0x00000000000e2c8c: and al, 0x10; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000041bab: and al, 0x10; fld xword ptr [rsp + 8]; ret; 
0x00000000000a8a4b: and al, 0x10; mov qword ptr [rax], rdx; ret; 
0x00000000000a8b03: and al, 0x10; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000122b2f: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b90: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000041b76: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000a89fc: and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8a05: and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x0000000000113476: and al, 0x18; add rsp, 0x28; ret; 
0x00000000001193eb: and al, 0x18; call 0x1196f0; lea rax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x000000000011346d: and al, 0x18; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000a8973: and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000002ff05: and al, 0x20; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000151611: and al, 0x28; push rax; call 0x151330; add rsp, 0x28; ret; 
0x00000000000f69eb: and al, 0x30; adc al, 0x83; ret; 
0x0000000000148eb0: and al, 0x30; call 0x1578f0; mov rax, r12; pop r12; ret; 
0x0000000000120e18: and al, 0x38; idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000115a04: and al, 0x38; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x000000000015fc24: and al, 0x38; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x00000000000a1f74: and al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000000429f4: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010ebf8: and al, 0x48; add esp, 0x18; ret; 
0x0000000000120592: and al, 0x48; add esp, 0x20; pop rbp; ret; 
0x00000000001141d0: and al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c3e6: and al, 0x48; add esp, 0x28; ret; 
0x0000000000120658: and al, 0x48; add esp, 0x30; pop rbp; ret; 
0x0000000000196f02: and al, 0x48; add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122b39: and al, 0x48; add esp, 0x38; ret; 
0x0000000000122b9a: and al, 0x48; add esp, 0x40; ret; 
0x000000000015684b: and al, 0x48; add esp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000001414ef: and al, 0x48; mov dword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000013caa5: and al, 0x48; mov edx, dword ptr [rsp + 8]; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x0000000000115a09: and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x000000000015fc29: and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000011f2ce: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x000000000015fd20: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fec9: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000012552c: and al, 0x5b; pop rbp; pop r12; ret; 
0x000000000009519d: and al, 0x5d; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000a2c0b: and al, 0x5d; pop r12; pop r13; pop r14; ret; 
0x0000000000153c70: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce0: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d50: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db1: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e15: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e80: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f03: and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x0000000000153bfa: and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x000000000008ab9b: and al, 0x74; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000015a738: and al, 0x7d; in al, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001093d1: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002fdbb: and al, 0x83; call 0x84586c3; pop rbx; ret; 
0x000000000005f4d8: and al, 0x83; ret; 
0x0000000000053be5: and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000be4a4: and al, 0x89; ret; 
0x0000000000109a1c: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000531ab: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000001385cb: and al, 0xa8; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000e2e75: and al, 0xc; add rsp, 0x18; ret; 
0x00000000000e2d4f: and al, 0xc; add rsp, 0x28; ret; 
0x0000000000115201: and al, 0xc; add rsp, 0x38; ret; 
0x00000000000e2e6c: and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d46: and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151f8: and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000113d3c: and al, 0xc; lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x0000000000113d41: and al, 0xc; mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x00000000000a8ab9: and al, 0xc; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8b99: and al, 0xc; mov word ptr [rdi + 4], ax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89e4: and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x0000000000041c66: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c8c: and al, 0xe8; fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041cdc: and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x000000000011f7fc: and al, 0xe8; idiv rdi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000010c48d: and al, 0xe8; lodsd eax, dword ptr [rsi]; cmp eax, 0x48b48ff; and al, 0x48; add esp, 0x28; ret; 
0x00000000000a8aa2: and al, 0xe8; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8b7a: and al, 0xe8; mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000042611: and al, 0xe8; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041d96: and al, 0xe8; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057cc9: and al, 0xe8; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057da2: and al, 0xe8; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000005b125: and al, 0xe8; pinsrw xmm0, eax, 6; ret; 
0x000000000014006e: and al, 0xe8; pushfq; and ch, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000000301a7: and al, 0xe8; ret; 
0x00000000000a8ac2: and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8ba2: and al, 0xe; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8aa9: and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8b81: and al, 0xec; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89c2: and al, 0xf0; add rax, rdi; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x0000000000042616: and al, 0xf0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000d0290: and al, 0xf0; fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041cd8: and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041d9b: and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c18: and al, 0xf0; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d0294: and al, 0xf0; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000a8a8a: and al, 0xf0; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8b62: and al, 0xf0; mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041c61: and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005b11f: and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d029a: and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000d02a0: and al, 0xf0; ret; 
0x00000000000a8a91: and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8b69: and al, 0xf4; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89cc: and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89a3: and al, 0xf8; add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a8a6b: and al, 0xf8; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b33: and al, 0xf8; mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000001993a3: and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x00000000000a8a73: and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b3b: and al, 0xfa; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89ae: and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000041d26: and al, 0xfc; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000041d2a: and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000be38e: and al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010eb15: and al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eb24; ret; 
0x0000000000046ad9: and al, 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000011f4cb: and al, 4; add rsp, 0x20; pop rbp; ret; 
0x0000000000120e1e: and al, 4; add rsp, 0x28; ret; 
0x0000000000120e15: and al, 4; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000047865: and al, 4; jne 0x478ba; add rsp, 0x18; ret; 
0x00000000000b7858: and al, 7; add byte ptr [rax], al; ret; 
0x00000000000a89da: and al, 8; add rax, rdi; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000157a06: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000349e8: and al, 8; add rsp, 0x18; ret; 
0x0000000000048277: and al, 8; add rsp, 0x28; ret; 
0x000000000011327a: and al, 8; add rsp, 0x30; pop rbp; ret; 
0x00000000001211f3: and al, 8; add rsp, 0x38; ret; 
0x0000000000043497: and al, 8; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000112bcc: and al, 8; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e23a: and al, 8; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000120911: and al, 8; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000041dd2: and al, 8; fadd st(0); ret; 
0x0000000000041d2e: and al, 8; fscale; fstp st(1); ret; 
0x0000000000041c94: and al, 8; fsubrp st(1); ret; 
0x0000000000041de6: and al, 8; fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000013caa9: and al, 8; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x0000000000122b34: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b95: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000013ccf5: and al, 8; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000041baf: and al, 8; ret; 
0x0000000000118959: and al, 8; syscall; cmp rax, -0xfff; jae 0x118966; ret; 
0x00000000000349dc: and al, 8; xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000034a0c: and al, 8; xor esi, esi; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000042b3d: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbp; ret; 
0x0000000000041e64: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000e2e41: and al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x000000000011f545: and al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f554; ret; 
0x0000000000023a6a: and al, byte ptr [rsp + rbx - 0x7dc6b800]; fadd dword ptr [rax]; add byte ptr [rax], al; jne 0x23a3b; ret; 
0x00000000001115f3: and al, ch; test esp, 0x8948fffc; ret; 
0x00000000000341c6: and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a6: and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034186: and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034106: and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034146: and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a6: and ax, 0x400; movzx eax, ax; ret; 
0x0000000000041cd1: and ax, 0x8000; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c5a: and ax, 0x8000; mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000034126: and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e6: and ax, 0x800; movzx eax, ax; ret; 
0x000000000012014a: and bh, byte ptr [rbp - 0x2708fff4]; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b7e2b: and bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b7e2a: and bl, r14b; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000d128c: and byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x00000000000ac631: and byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x000000000008d93a: and byte ptr [r15 + 0x12], r14b; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127cf2: and byte ptr [r15 + 0x1a], r14b; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000008d87f: and byte ptr [r15 + 0xd], r14b; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c523: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000896d7: and byte ptr [r8 + 1], r9b; ret; 
0x000000000011d7f2: and byte ptr [r8 + 2], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bb2e6: and byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x0000000000091976: and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000011f121: and byte ptr [rax + 0x21], cl; clc; or rax, rsi; ret; 
0x00000000000860b8: and byte ptr [rax + 0x3b], cl; sub byte ptr [rbx + 0x11], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000008625f: and byte ptr [rax + 0x3b], cl; sub byte ptr [rbx + 0x12], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001509f5: and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000018d3b7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a27: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018496c: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000000896d8: and byte ptr [rax + 1], cl; ret; 
0x000000000011d7f3: and byte ptr [rax + 2], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004732e: and byte ptr [rax + 9], cl; clc; ret; 
0x00000000000b1d4d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf899: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000001974a9: and byte ptr [rax + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x00000000000d012f: and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x00000000000b7b25: and byte ptr [rax - 0x73], cl; jg 0xb7b4a; jne 0xb7f80; ret; 
0x00000000000b92b9: and byte ptr [rax - 0x73], cl; jg 0xb92de; jne 0xb97d0; ret; 
0x00000000000250e4: and byte ptr [rax - 0x77], cl; ret; 
0x00000000000dd4b9: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000008e662: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000006e408: and byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e506d: and byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e513b: and byte ptr [rax], al; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000bc1db: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000010eab5: and byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eac4; ret; 
0x00000000000b8fac: and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000000bb2e7: and byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000012dc48: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dac8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db88: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09a8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a0638: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04d8: and byte ptr [rbp + 0x45], dh; and ecx, 8; lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x000000000018c54d: and byte ptr [rbp - 0x27], dh; vzeroupper; ret; 
0x00000000000d1a07: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000000d128d: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000002f82f: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000148dc7: and byte ptr [rbx - 0x48], bl; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000018c6e8: and byte ptr [rbx], bh; cmp r12b, byte ptr [rax]; jne 0x18c529; vzeroupper; ret; 
0x000000000011f0a3: and byte ptr [rcx + 0xfffe2], al; add byte ptr [rip - 0x1000], ah; or eax, edx; ret; 
0x000000000005f08c: and byte ptr [rcx + 9], cl; ret; 
0x00000000000df3a3: and byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000082cab: and byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; ret; 
0x0000000000041242: and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000085412: and byte ptr [rcx + rcx*4 - 0x40], al; mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000138169: and byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; ret; 
0x00000000000dfe01: and byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; ret; 
0x00000000001494bb: and byte ptr [rcx - 0x39feb70a], cl; cmp rsi, qword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000018a55b: and byte ptr [rcx - 0x7d], cl; rcr byte ptr [rdi + 0x49], 0x29; ror byte ptr [rax - 0x73], 1; jl 0x18a57e; and ecx, ebp; ret; 
0x0000000000053cb3: and byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000120d04: and byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120d70; ret; 
0x00000000000ec998: and byte ptr [rcx], bh; push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000bc95c: and byte ptr [rcx], cl; or eax, 0x58d4800; mov dword ptr [rdi], ebp; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x0000000000091977: and byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d93b: and byte ptr [rdi + 0x12], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127cf3: and byte ptr [rdi + 0x1a], dh; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000100464: and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bbbc0: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbfa5: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008d880: and byte ptr [rdi + 0xd], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000015cf33: and byte ptr [rdi + 9], al; add byte ptr [rcx], al; add rsp, 8; ret; 
0x000000000009f80c: and byte ptr [rdi - 0x72b7fff2], cl; add eax, 0x120a9; cmove rax, rdx; ret; 
0x000000000010c524: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd5: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000034189: and byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x0000000000183fd4: and byte ptr [rdi], cl; mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000000b7b29: and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x0000000000190f5d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x00000000000bbf25: and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000013fa85: and byte ptr [rdi], cl; xchg esp, eax; ret; 
0x000000000018fd3a: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000019042c: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000117e2c: and byte ptr [rdx + 0xd], bh; add byte ptr [rbx + 0x17f01f8], al; ret; 
0x000000000018a888: and byte ptr [rdx - 0x13abfb2], cl; jg 0x18a8a7; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000157bbd: and byte ptr [rsi + 0x10], dh; add dword ptr [rbx + 0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ac632: and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x0000000000041cd4: and byte ptr [rsi - 0x77], 0x44; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c5d: and byte ptr [rsi - 0x77], 0x44; and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x00000000001170d9: and byte ptr [rsp + rbp*8 - 0x3a], dh; inc dword ptr [rax]; mov rax, r8; ret; 
0x000000000012bfe1: and byte ptr [rsp + rcx + 0x5b], dh; ret; 
0x000000000018c6e7: and byte ptr ds:[rbx], bh; cmp r12b, byte ptr [rax]; jne 0x18c529; vzeroupper; ret; 
0x000000000008ce5a: and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000bc198: and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000cfae2: and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000000bcd54: and ch, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000a08d6: and ch, 2; lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0836: and ch, 2; lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x0000000000184c03: and ch, al; std; xlatb; ret; 
0x000000000018493c: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000140071: and ch, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e4f53: and ch, dh; jb 0xe4fa0; cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x00000000000cfacd: and cl, 0xf; je 0xcfaf0; ret; 
0x00000000000fbda8: and cl, bpl; ret; 
0x000000000011ce4a: and cl, byte ptr [rax + 0x39]; ret; 
0x000000000009c1ed: and cl, byte ptr [rax - 0x73]; clc; ret; 
0x00000000000a0b7e: and cl, byte ptr [rcx + rcx*4 - 0x28]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099f51: and cl, byte ptr [rdi + 0x15]; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000000fbda9: and cl, ch; ret; 
0x00000000000bc0fb: and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x0000000000192d10: and dh, 0xf; je 0x192d30; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x00000000000cef50: and dh, 0xf; je 0xcef70; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x00000000000cefb0: and dh, 0xf; je 0xcefd0; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cf010: and dh, 0xf; je 0xcf020; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf060: and dh, 0xf; je 0xcf070; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x000000000009f75d: and dh, 2; lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x0000000000192ce2: and dl, 0xf; je 0x192d00; mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192e20; ret; 
0x00000000000cef26: and dl, 0xf; je 0xcef40; mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000cef86: and dl, 0xf; je 0xcefa0; mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefe6: and dl, 0xf; je 0xcf000; mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf036: and dl, 0xf; je 0xcf050; mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000e5a8a: and dl, byte ptr [rdi - 0x6f990005]; xor eax, eax; ret; 
0x000000000010eae5: and dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x0000000000087d20: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7c: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ac8ae: and dword ptr [rcx - 0x77], ecx; ret; 
0x0000000000116f4b: and dword ptr [rdi + 0xd], ecx; add byte ptr [rcx], bl; rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000094d2d: and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000160cba: and dword ptr [rdi + rdx*8], eax; xor eax, eax; ret; 
0x000000000009389b: and dword ptr [rdi - 0x76b7ffeb], ebp; sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x000000000008dee4: and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000043be4: and dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000088537: and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x00000000000b795b: and dword ptr [rsi], eax; add byte ptr [rax], al; ret; 
0x000000000012124b: and dword ptr [rsp + rcx + 0x64d8f700], ebp; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000002440f: and eax, 0; ret; 
0x0000000000061bc0: and eax, 0x100; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001138c7: and eax, 0x100f; ret; 
0x0000000000094c48: and eax, 0x10; ret; 
0x000000000018d1d1: and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000117e13: and eax, 0x18; test eax, eax; jne 0x117e28; sub dword ptr [rip + 0xd7a2d], 1; ret; 
0x0000000000063081: and eax, 0x18; test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f33: and eax, 0x18; test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000090fe7: and eax, 0x18; test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000938f3: and eax, 0x18; test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x000000000002fd60: and eax, 0x1f0fffff; add byte ptr [rax], r8b; ret; 
0x00000000000cf581: and eax, 0x1f; je 0xcf4c5; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf621: and eax, 0x1f; je 0xcf680; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x0000000000041dee: and eax, 0x200; ret; 
0x000000000010299c: and eax, 0x28; jne 0x1029f6; add rsp, 0x38; ret; 
0x000000000010d396: and eax, 0x28; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d54b: and eax, 0x28; jne 0x10d558; add rsp, 0x10; pop rbp; ret; 
0x000000000010d65b: and eax, 0x28; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010d6ad: and eax, 0x28; jne 0x10d6b9; add rsp, 0x18; ret; 
0x000000000010e0eb: and eax, 0x28; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6e1: and eax, 0x28; jne 0x10e785; add rsp, 0x68; ret; 
0x000000000010e822: and eax, 0x28; jne 0x10e8df; add rsp, 0x30; pop rbx; ret; 
0x000000000010e952: and eax, 0x28; jne 0x10ea0f; add rsp, 0x30; pop rbx; ret; 
0x000000000010f520: and eax, 0x28; jne 0x10f570; add rsp, 0x130; pop rbp; ret; 
0x000000000010fdae: and eax, 0x28; jne 0x10fdbd; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112c70: and eax, 0x28; jne 0x112cf6; add rsp, 0x40; pop r12; ret; 
0x00000000001135e6: and eax, 0x28; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113675: and eax, 0x28; jne 0x1136c3; add rsp, 0x18; ret; 
0x000000000011372d: and eax, 0x28; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137cb: and eax, 0x28; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113ca8: and eax, 0x28; jne 0x113cd4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113d18: and eax, 0x28; jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000114baa: and eax, 0x28; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c4a: and eax, 0x28; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114cff: and eax, 0x28; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dcf: and eax, 0x28; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000114ec9: and eax, 0x28; jne 0x114ed5; add rsp, 0x28; ret; 
0x00000000001152ac: and eax, 0x28; jne 0x115349; add rsp, 0x60; pop rbp; ret; 
0x0000000000115a0f: and eax, 0x28; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115a88: and eax, 0x28; jne 0x115a94; add rsp, 0x28; ret; 
0x0000000000115b5f: and eax, 0x28; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d83: and eax, 0x28; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e52: and eax, 0x28; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001184b3: and eax, 0x28; jne 0x1184c2; add rsp, 0xd8; ret; 
0x000000000011858c: and eax, 0x28; jne 0x11859b; add rsp, 0xd8; ret; 
0x00000000001198d4: and eax, 0x28; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011bf48: and eax, 0x28; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c008: and eax, 0x28; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e6: and eax, 0x28; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c44f: and eax, 0x28; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6bc: and eax, 0x28; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x000000000011f2d4: and eax, 0x28; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cd9: and eax, 0x28; jne 0x120ce5; add rsp, 0x18; ret; 
0x0000000000121098: and eax, 0x28; jne 0x1210af; add rsp, 0xa0; pop rbx; ret; 
0x000000000012131e: and eax, 0x28; jne 0x12136b; add rsp, 0x58; ret; 
0x0000000000129d6a: and eax, 0x28; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012ba93: and eax, 0x28; jne 0x12baa2; add rsp, 0xd8; ret; 
0x000000000012d2ef: and eax, 0x28; jne 0x12d3cd; leave; ret; 
0x000000000012e074: and eax, 0x28; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e16a: and eax, 0x28; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e284: and eax, 0x28; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012e34c: and eax, 0x28; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f18a: and eax, 0x28; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a4: and eax, 0x28; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x000000000012f36c: and eax, 0x28; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f7b3: and eax, 0x28; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f813: and eax, 0x28; jne 0x12f825; add rsp, 0x28; ret; 
0x000000000012f8dc: and eax, 0x28; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9bc: and eax, 0x28; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa9c: and eax, 0x28; jne 0x12faab; add rsp, 0xd8; ret; 
0x00000000001367ea: and eax, 0x28; jne 0x136819; add rsp, 0x38; ret; 
0x0000000000136887: and eax, 0x28; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f4: and eax, 0x28; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013c90d: and eax, 0x28; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013e344: and eax, 0x28; jne 0x13e365; add rsp, 0x20; pop rbx; ret; 
0x000000000013e399: and eax, 0x28; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3ec: and eax, 0x28; jne 0x13e3f8; add rsp, 0x28; ret; 
0x000000000013ec7b: and eax, 0x28; jne 0x13ec87; add rsp, 0x18; ret; 
0x0000000000144bd8: and eax, 0x28; jne 0x144be6; add rsp, 0x10; pop r12; ret; 
0x0000000000146546: and eax, 0x28; jne 0x146553; add rsp, 0x40; pop rbp; ret; 
0x000000000014931c: and eax, 0x28; jne 0x149363; add rsp, 0x10; pop rbx; ret; 
0x000000000014988f: and eax, 0x28; jne 0x1498c2; add rsp, 0x10; pop rbx; ret; 
0x000000000014992d: and eax, 0x28; jne 0x149965; add rsp, 0x10; pop rbx; ret; 
0x000000000014a540: and eax, 0x28; jne 0x14a557; add rsp, 0x40; pop rbx; ret; 
0x000000000015193e: and eax, 0x28; jne 0x151961; add rsp, 0x10; pop rbx; ret; 
0x0000000000151c90: and eax, 0x28; jne 0x151d0a; add rsp, 0x10; pop r12; ret; 
0x0000000000151f07: and eax, 0x28; jne 0x151f7a; add rsp, 0x30; pop rbx; ret; 
0x0000000000152047: and eax, 0x28; jne 0x1520ba; add rsp, 0x30; pop rbx; ret; 
0x0000000000153c00: and eax, 0x28; jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000153c76: and eax, 0x28; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce6: and eax, 0x28; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d56: and eax, 0x28; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db7: and eax, 0x28; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e1b: and eax, 0x28; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e86: and eax, 0x28; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f09: and eax, 0x28; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000015443e: and eax, 0x28; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155eb1: and eax, 0x28; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000155f1c: and eax, 0x28; jne 0x155f63; add rsp, 0x10; pop rbx; ret; 
0x0000000000155fac: and eax, 0x28; jne 0x155ff2; add rsp, 0x10; pop rbx; ret; 
0x000000000015607c: and eax, 0x28; jne 0x1560c5; add rsp, 0x10; pop rbp; ret; 
0x00000000001564cc: and eax, 0x28; jne 0x156514; add rsp, 0x10; pop rbx; ret; 
0x000000000015655c: and eax, 0x28; jne 0x1565a3; add rsp, 0x10; pop rbx; ret; 
0x000000000015672c: and eax, 0x28; jne 0x156779; add rsp, 0x10; pop rbx; ret; 
0x00000000001567bc: and eax, 0x28; jne 0x156803; add rsp, 0x10; pop rbx; ret; 
0x00000000001574ac: and eax, 0x28; jne 0x1574f5; add rsp, 0x10; pop rbx; ret; 
0x000000000015753c: and eax, 0x28; jne 0x157585; add rsp, 0x10; pop rbx; ret; 
0x00000000001575cc: and eax, 0x28; jne 0x157615; add rsp, 0x10; pop rbx; ret; 
0x000000000015765c: and eax, 0x28; jne 0x1576a5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157d34: and eax, 0x28; jne 0x157d44; add rsp, 0x90; pop rbx; ret; 
0x0000000000157da8: and eax, 0x28; jne 0x157db7; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e09: and eax, 0x28; jne 0x157e18; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e75: and eax, 0x28; jne 0x157e82; add rsp, 0x10; pop rbx; ret; 
0x0000000000157ee8: and eax, 0x28; jne 0x157ef5; add rsp, 0x10; pop rbx; ret; 
0x000000000015ccdd: and eax, 0x28; jne 0x15cd14; add rsp, 0x18; ret; 
0x000000000015cfd4: and eax, 0x28; jne 0x15d00c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d064: and eax, 0x28; jne 0x15d09c; add rsp, 0x10; pop rbp; ret; 
0x000000000015fc2f: and eax, 0x28; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd26: and eax, 0x28; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fecf: and eax, 0x28; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff98: and eax, 0x28; jne 0x15ffdc; add rsp, 0x38; ret; 
0x000000000016102b: and eax, 0x28; jne 0x161037; add rsp, 0x28; ret; 
0x00000000001635b6: and eax, 0x28; jne 0x1635c3; add rsp, 0x10; pop rbx; ret; 
0x000000000016363c: and eax, 0x28; jne 0x163649; add rsp, 0x10; pop rbx; ret; 
0x0000000000042b90: and eax, 0x28; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042eea: and eax, 0x28; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043017: and eax, 0x28; jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000004322b: and eax, 0x28; jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043323: and eax, 0x28; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bf: and eax, 0x28; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043642: and eax, 0x28; jne 0x43658; add rsp, 0x118; ret; 
0x000000000004374d: and eax, 0x28; jne 0x4375c; add rsp, 0x98; ret; 
0x0000000000043991: and eax, 0x28; jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043ced: and eax, 0x28; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441d: and eax, 0x28; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743e: and eax, 0x28; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752e: and eax, 0x28; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047db8: and eax, 0x28; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e05: and eax, 0x28; jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e57: and eax, 0x28; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea4: and eax, 0x28; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef7: and eax, 0x28; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f44: and eax, 0x28; jne 0x47f50; add rsp, 0x18; ret; 
0x00000000000521f1: and eax, 0x28; jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c00: and eax, 0x28; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414a: and eax, 0x28; jne 0x54159; add rsp, 0xd8; ret; 
0x00000000000578bd: and eax, 0x28; jne 0x57945; leave; ret; 
0x000000000005b5ae: and eax, 0x28; jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b870: and eax, 0x28; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c73: and eax, 0x28; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d48: and eax, 0x28; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dff: and eax, 0x28; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed1: and eax, 0x28; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f93: and eax, 0x28; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062053: and eax, 0x28; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062141: and eax, 0x28; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062218: and eax, 0x28; jne 0x62227; add rsp, 0xd8; ret; 
0x000000000006283e: and eax, 0x28; jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de2: and eax, 0x28; jne 0x62df7; add rsp, 0x18; ret; 
0x000000000006316b: and eax, 0x28; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063246: and eax, 0x28; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c3: and eax, 0x28; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657f: and eax, 0x28; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086678: and eax, 0x28; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086748: and eax, 0x28; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086801: and eax, 0x28; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000008dbd3: and eax, 0x28; jne 0x8dbeb; add rsp, 0x48; ret; 
0x00000000000991fa: and eax, 0x28; jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x000000000009d5fa: and eax, 0x28; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000ca0ae: and eax, 0x28; jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000cab8b: and eax, 0x28; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac66: and eax, 0x28; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000d01ee: and eax, 0x28; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d0268: and eax, 0x28; jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d1034: and eax, 0x28; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b7: and eax, 0x28; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf87: and eax, 0x28; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000ddc50: and eax, 0x28; jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce4: and eax, 0x28; jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000df40a: and eax, 0x28; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e3661: and eax, 0x28; jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3831: and eax, 0x28; jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418a: and eax, 0x28; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422a: and eax, 0x28; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44fa: and eax, 0x28; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45aa: and eax, 0x28; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000004785d: and eax, 0x28; movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x0000000000057b3a: and eax, 0x2c7; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000014659f: and eax, 0x30; call rax; lea rax, [rip + 0xaa553]; add rsp, 8; ret; 
0x0000000000023a46: and eax, 0x30; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000000bc116: and eax, 0x3fc00; ret; 
0x00000000000bc216: and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000bc161: and eax, 0x3fffc00; ret; 
0x000000000010286a: and eax, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; ret; 
0x000000000009f237: and eax, 0x480014cc; lea edx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x0000000000113cae: and eax, 0x48c88944; add esp, 0x38; ret; 
0x0000000000198e07: and eax, 0x5bffe895; mov qword ptr [rip + 0x56319], 0; ret; 
0x000000000008757a: and eax, 0x6e0f4866; ret; 
0x0000000000042298: and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000342b6: and eax, 0x7f; ret; 
0x00000000000bc1ff: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x00000000000bc1b7: and eax, 0x7ff80000; ret; 
0x0000000000041ba2: and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000057c54: and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x000000000008cd56: and eax, 0x804; ret; 
0x00000000000424bb: and eax, 0x807fffff; lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000421b8: and eax, 0x80; ret; 
0x0000000000041cd2: and eax, 0x89668000; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c5b: and eax, 0x89668000; and al, 0xf0; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000044295: and eax, 0x98c48148; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009466b: and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x00000000000947fb: and eax, 0xc; pop rbx; ret; 
0x000000000014471f: and eax, 0xf000002; mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x000000000011fe47: and eax, 0xf7000cc0; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011f247: and eax, 0xf7000ccc; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011d147: and eax, 0xf7000ced; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe47: and eax, 0xf7000dc0; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec47: and eax, 0xf7000dd2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4447: and eax, 0xf700107a; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000102a94: and eax, 0xf; ret; 
0x000000000018edc0: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e4f3: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000011390d: and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x000000000011f0aa: and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000113e9b: and eax, 0xfffffecf; or eax, 0x30; mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000012fd2a: and eax, 0xffffff; ret; 
0x00000000000b1c94: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c37: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x0000000000115ab1: and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000094e68: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x000000000013b607: and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000010044b: and eax, 0xfffffff9; or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000094d90: and eax, 0xfffffffd; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000009c201: and eax, 1; cmovne rax, rdx; ret; 
0x0000000000094d17: and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000122e60: and eax, 1; mov eax, r8d; ret; 
0x0000000000034246: and eax, 1; ret; 
0x00000000000340c6: and eax, 2; movzx eax, ax; ret; 
0x0000000000055bec: and eax, 2; sub eax, 1; ret; 
0x000000000011faf3: and eax, 3; ret; 
0x0000000000034166: and eax, 4; movzx eax, ax; ret; 
0x0000000000034086: and eax, 8; movzx eax, ax; ret; 
0x00000000000424e8: and eax, 8; ret; 
0x00000000000c79e0: and eax, dword ptr [rax]; add dh, dh; ret; 
0x000000000009f13d: and eax, dword ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0xf1c49; cmovne rax, rdx; ret; 
0x000000000011fce5: and eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x0000000000172d99: and eax, dword ptr [rdi + 0xc8b0002]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000001788f9: and eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x0000000000123491: and eax, dword ptr [rsi + 0x10]; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000b1912: and eax, ecx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x0000000000041b23: and eax, ecx; ret; 
0x000000000011f123: and eax, edi; or rax, rsi; ret; 
0x000000000011faa9: and eax, edx; mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000041fac: and eax, edx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000041ea3: and eax, edx; ret; 
0x0000000000041ee4: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000ac718: and eax, edx; test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x0000000000034491: and eax, esi; ret; 
0x00000000000dd14b: and ebp, ebp; adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000087d21: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7d: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094606: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x00000000000ee45f: and ebx, 8; je 0xee3f7; pop rbx; ret; 
0x0000000000085914: and ebx, dword ptr [rbx + 0x4c]; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000141c7d: and ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000bdf89: and ebx, dword ptr [rcx]; add dword ptr [rax], eax; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bc130: and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000047d76: and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000000ee40e: and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x000000000018edc5: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000018e4f8: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000012dc4b: and ecx, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dacb: and ecx, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db8b: and ecx, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09ab: and ecx, 8; lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a063b: and ecx, 8; lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04db: and ecx, 8; lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000d002c: and ecx, dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x00000000000957d5: and ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000001170f4: and ecx, dword ptr [rcx + rcx*4 - 0x40]; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000123315: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123328; ret; 
0x000000000012337e: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c65: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cc2: and ecx, dword ptr [rdx + 0xc]; lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123cd8; ret; 
0x0000000000123582: and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000123567: and ecx, dword ptr [rsi + 0xc]; lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123580; ret; 
0x0000000000123e97: and ecx, dword ptr [rsi + 0xc]; lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123eb0; ret; 
0x000000000018a567: and ecx, ebp; ret; 
0x00000000000420e3: and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203f: and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000102a3a: and ecx, esi; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x00000000000bcd7b: and ecx, esi; or al, 0; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000001974a7: and edi, 0x20; je 0x1974bc; movss xmm0, dword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000010d6eb: and edi, 0xd8f7000d; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000342c6: and edi, 0xffffff80; sete al; ret; 
0x0000000000116f6e: and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000010c8a0: and edi, 0xfffffff8; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae2: and edi, 0xfffffff8; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x00000000000c4072: and edi, ecx; dec dword ptr [rax - 0x7d]; ret; 
0x000000000010d74b: and edi, esp; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000014b0af: and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x0000000000047c97: and edx, 0x7fffffff; mov dword ptr [rax], edx; mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x0000000000041d03: and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x000000000004227d: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x000000000012fd13: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fda1: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000011f0a4: and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000008ac50: and edx, 0xffffffcf; mov dword ptr [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000095266: and edx, 0xfffffff0; test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000121021: and edx, 0xfffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000ee40b: and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret; 
0x00000000000555fa: and edx, 1; je 0x55607; mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000055842: and edx, 1; je 0x5584f; mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000008ad43: and edx, 1; mov eax, edx; ret; 
0x00000000000ec4a0: and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000b1aae: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000012f0a7: and edx, eax; lea rax, [rip + 0x5cc40]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcdf7: and edx, eax; lea rax, [rip + 0xcef00]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000041fcb: and edx, eax; mov qword ptr [rdi], rdx; ret; 
0x0000000000042316: and edx, eax; movd xmm0, edx; mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000041f5c: and edx, eax; movq xmm0, rdx; ret; 
0x0000000000042330: and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x0000000000042360: and esi, 0x80000000; movd xmm0, esi; ret; 
0x00000000000422fd: and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x0000000000042443: and esi, 0x807fffff; shl eax, 0x17; or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000423b6: and esi, 0x807fffff; shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x0000000000057cc0: and esi, 0xd6097fff; mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x000000000012fd3c: and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000033df4: and esi, dword ptr [rdi + 0x10]; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x000000000012332a: and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000b1ba2: and esi, eax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000e5061: and esi, ebx; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000b19ac: and esi, ecx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000160cb9: and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000043be3: and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000094605: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x000000000018493b: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000122e5f: and r8d, 1; mov eax, r8d; ret; 
0x000000000012dc4a: and r9d, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012daca: and r9d, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db8a: and r9d, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09aa: and r9d, 8; lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a063a: and r9d, 8; lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04da: and r9d, 8; lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000cf580: and rax, 0x1f; je 0xcf4c5; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf620: and rax, 0x1f; je 0xcf680; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000b1c93: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c36: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x0000000000094e67: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000b1911: and rax, rcx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x000000000011f122: and rax, rdi; or rax, rsi; ret; 
0x0000000000041fab: and rax, rdx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000041ee3: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000420e2: and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203e: and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x000000000010c89f: and rdi, 0xfffffffffffffff8; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae1: and rdi, 0xfffffffffffffff8; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000095265: and rdx, 0xfffffffffffffff0; test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000121020: and rdx, 0xfffffffffffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000b1aad: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000012f0a6: and rdx, rax; lea rax, [rip + 0x5cc40]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcdf6: and rdx, rax; lea rax, [rip + 0xcef00]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000041fca: and rdx, rax; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f5b: and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000b1ba1: and rsi, rax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b19ab: and rsi, rcx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000057cbf: and si, 0x7fff; or esi, edx; mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041ef4: andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x0000000000042076: andpd xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042050: andpd xmm1, xmmword ptr [rip + 0x17a688]; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041efc: andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000423f9: andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d4: andps xmm0, xmmword ptr [rip + 0x17a355]; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000041ef5: andps xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x0000000000042077: andps xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042051: andps xmm1, xmmword ptr [rip + 0x17a688]; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041efd: andps xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x0000000000134df3: bnd call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000012fc6a: bnd jb 0x12fc80; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000041d0a: bnd je 0x41c58; ret; 
0x000000000009f12f: bnd je 0x9f14b; test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x00000000000a8819: bnd je 0xa8810; ret; 
0x00000000000bdf7f: bnd je 0xbdf98; test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bdfb8: bnd je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000000951ba: bnd jo 0x951d2; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x0000000000188a21: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849e1: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000188a41: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849f1: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000188a8d: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184a1f: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000001885b4: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000000ac25a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x0000000000188956: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184a86: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000000ac170: bsf eax, eax; add rax, rdi; ret; 
0x000000000018d391: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a11: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849d1: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000184951: bsf eax, eax; cmp rdx, rax; jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x000000000018c401: bsf eax, eax; cmp rdx, rax; jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x00000000000ac180: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac190: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac160: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000ac0bf: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000b16f7: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000b14c7: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000abf39: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d0: bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce119: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce380: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce390: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a0: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b0: bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000a06b9: bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06da: bsf eax, edi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000b1bfa: bsf eax, edx; ret; 
0x00000000000cf737: bsf eax, edx; shr rax, 2; ret; 
0x0000000000185291: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001852b1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000185277: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000185001: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa55a: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000aa620: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183fa4: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000cf343: bsf ecx, edx; cmp rax, rcx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000000184009: bsf ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fcd: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fed: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa3f0: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183e41: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e61: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e81: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e27: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000b1d52: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf847: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000aa381: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000b1810: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x00000000000b15f0: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a06d9: bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000b1c42: bsf rax, rdx; ret; 
0x00000000000cf736: bsf rax, rdx; shr rax, 2; ret; 
0x00000000000aa559: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000aa61f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000184073: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000cf342: bsf rcx, rdx; cmp rax, rcx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000aa3ef: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000b1d51: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf846: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000aa380: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184da0: bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184db0: bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184dc0: bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x0000000000184e8a: bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x00000000000ac776: bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000ac5a6: bsr eax, eax; add rax, rdi; ret; 
0x0000000000184caf: bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000ac650: bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac660: bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac670: bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000188871: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000ac6d0: bsr eax, eax; sub rdx, 0x10; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac6b0: bsr eax, eax; sub rdx, 0x20; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac690: bsr eax, eax; sub rdx, 0x30; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac680: bsr eax, eax; sub rdx, 0x40; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x00000000000b1bab: bsr eax, esi; add rax, rdi; ret; 
0x00000000000b1ab9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x00000000000b19b5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x00000000000b191a: bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1baa: bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b1ab8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000b19b4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000018506c: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000157835: bswap eax; cdqe; mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x000000000015013e: bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000015019b: bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000015016b: bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d35e: bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014d3bb: bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d38b: bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x0000000000150a9a: bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x00000000001509a2: bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000150a5d: bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000014d347: bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000012fce6: bswap eax; ret; 
0x000000000018506e: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000001577f2: bswap edx; add rax, 4; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000157775: bswap edx; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000001577b5: bswap edx; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000150123: bswap rax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000041ec4: btr edx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ec3: btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000057d61: bts eax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000b1f13: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf843: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1e74: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x0000000000057b51: bts esi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000057d60: bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x00000000000b1f12: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf842: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1e73: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x0000000000057b50: bts rsi, 0x34; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000001025ff: call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025a2: call 0x102520; add rsp, 0x18; ret; 
0x000000000012348f: call 0x10585799; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000123dcf: call 0x105860d9; lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x000000000010d206: call 0x10ca00; add rsp, 0x18; ret; 
0x000000000010c9ca: call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162fbf: call 0x10e690; add rsp, 8; sar eax, 0x1f; ret; 
0x000000000012ead8: call 0x10ec90; test rax, rax; je 0x12eaf0; add rsp, 8; ret; 
0x000000000011d947: call 0x111d94c; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011db47: call 0x111db4c; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000024234: call 0x113590; cmp eax, -1; je 0x24328; add rsp, 0x98; ret; 
0x00000000001139d5: call 0x1138f0; pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x000000000009cb88: call 0x114500; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000113d48: call 0x1145c0; add rsp, 0x18; ret; 
0x0000000000094cff: call 0x114e50; cdqe; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x00000000001471c4: call 0x114e90; mov dword ptr [rip + 0xa99ad], eax; add rsp, 8; ret; 
0x0000000000117908: call 0x117600; mov qword ptr [rip + 0xd7e7c], rax; add rsp, 8; ret; 
0x0000000000118ea5: call 0x1191a0; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x00000000001193ed: call 0x1196f0; lea rax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x0000000000198ad1: call 0x11aa20; pop rbx; mov qword ptr [rip + 0x5519e], 0; ret; 
0x0000000000121d10: call 0x1214a0; movsxd rbx, ebx; mov qword ptr [rip + 0xca641], rbx; pop rbx; ret; 
0x000000000012222d: call 0x1220e0; ret; 
0x000000000012bbb6: call 0x12b850; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000012bb89: call 0x12b850; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000012de05: call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012edca: call 0x12e560; nop; mov rax, rdi; ret; 
0x000000000012ee9b: call 0x12e560; ret; 
0x0000000000148c96: call 0x12fc90; nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x000000000002f593: call 0x12fc90; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000130096: call 0x12fc90; nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x000000000009e1d6: call 0x12fc90; nop dword ptr [rax + rax]; endbr64; ret; 
0x000000000014f038: call 0x12fc90; nop dword ptr [rax]; endbr64; ret; 
0x0000000000157d44: call 0x12fc90; nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x000000000012da52: call 0x12fc90; nop word ptr [rax + rax]; endbr64; ret; 
0x0000000000146b1e: call 0x12fc90; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000157b1a: call 0x12fc90; nop; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000014e7ea: call 0x12fc90; nop; endbr64; ret; 
0x000000000013655d: call 0x135ad0; add rsp, 0x18; ret; 
0x0000000000136e9a: call 0x136910; add rsp, 0x18; ret; 
0x000000000013b5e3: call 0x13a8a0; cmp eax, -0xb; je 0x13b5e0; pop rbx; ret; 
0x0000000000140eec: call 0x140970; or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x00000000001465c2: call 0x146490; or dword ptr [rip + 0xaa512], 2; add rsp, 8; lea rax, [rip + 0xaa527]; ret; 
0x00000000000d6c9e: call 0x149ab0a4; ret; 
0x000000000014e004: call 0x149fa0; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000151614: call 0x151330; add rsp, 0x28; ret; 
0x000000000015803c: call 0x153750; mov dword ptr [rax], 0; pop rbx; ret; 
0x000000000014b0ed: call 0x156810; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x000000000014b10d: call 0x156d00; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000148eb2: call 0x1578f0; mov rax, r12; pop r12; ret; 
0x000000000002fdd1: call 0x15ff30; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000198f3f: call 0x15ff30; pop rbp; mov qword ptr [rip + 0x56f20], 0; ret; 
0x00000000000ec404: call 0x16170bcf; mov eax, 1; ret; 
0x00000000000428ac: call 0x192eb0; add rsp, 0x10; pop rbx; ret; 
0x0000000000042a09: call 0x192eb0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042aa7: call 0x192eb0; movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x000000000004288f: call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000197335: call 0x197440; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000196b77: call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000008def7: call 0x1e96200; ret; 
0x000000000008df07: call 0x1e96211; ret; 
0x0000000000122e5e: call 0x1f2b1a4; mov eax, r8d; ret; 
0x0000000000123820: call 0x1f2bb66; mov eax, r8d; ret; 
0x000000000012d0dc: call 0x1f353ef; ret; 
0x000000000013873d: call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x000000000010c596: call 0x22330; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000141c75: call 0x22330; mov dword ptr fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e815e: call 0x22330; mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000157b90: call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000000ff519: call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000158030: call 0x22330; mov qword ptr [rbx], 0; call 0x153750; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001199e0: call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000198e6d: call 0x22330; mov qword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x0000000000199072: call 0x22330; mov qword ptr [rip + 0x5799e], 0; pop rbx; ret; 
0x000000000015343c: call 0x22330; mov qword ptr fs:[rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000843fe: call 0x22330; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x0000000000198e06: call 0x22330; pop rbx; mov qword ptr [rip + 0x56319], 0; ret; 
0x00000000001975bd: call 0x22330; test rbx, rbx; jne 0x1975ad; pop rbx; ret; 
0x0000000000198b83: call 0x22330; test rbx, rbx; jne 0x198b75; pop rbx; ret; 
0x0000000000094ccc: call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x0000000000041295: call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001122e6: call 0x22330; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000145ac4: call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x000000000013c60b: call 0x224d0; add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x00000000000a0939: call 0x224d0; pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x00000000000a8e2d: call 0x22560; add rsp, 8; ret; 
0x0000000000162e5a: call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x000000000015d4b0: call 0x22580; test eax, eax; sete al; add rsp, 8; ret; 
0x000000000018bf6c: call 0x2364280; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000026f6c: call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x000000000005d8d1: call 0x2a05d8d4; ret; 
0x0000000000184fb8: call 0x2a9d2cc; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000008dedb: call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000046c78: call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000349e0: call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000e96e4: call 0x390e9a84; ret; 
0x000000000007e841: call 0x3950808e; ret; 
0x0000000000041c8d: call 0x3fdfdd6b; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041cb9: call 0x3fdfdd97; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000046072: call 0x4160a1d2; pop rbp; pop rbp; ret; 
0x00000000000828cf: call 0x41646a31; pop rbp; pop r14; ret; 
0x00000000000828f6: call 0x41646a58; pop rbp; pop r14; ret; 
0x000000000008d412: call 0x41651574; pop rbp; pop r14; ret; 
0x00000000000bcc02: call 0x41680d64; pop rbp; ret; 
0x00000000000e2fd1: call 0x416a7133; pop rbp; ret; 
0x00000000000e300f: call 0x416a7171; pop rbp; ret; 
0x00000000000e348b: call 0x416a75eb; pop rbp; pop rbp; ret; 
0x00000000000e4352: call 0x416a84b2; pop rbp; pop rbp; ret; 
0x000000000011a23a: call 0x416de39c; pop rbp; ret; 
0x00000000001417d4: call 0x41705936; pop rbp; pop r14; ret; 
0x0000000000141975: call 0x41705ad7; pop rbp; pop r14; ret; 
0x0000000000041c10: call 0x41c15; mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c67: call 0x41c6c; fld xword ptr [rsp - 0x18]; ret; 
0x000000000014d35c: call 0x41dce262; mov dword ptr [rax + 0xa8], eax; mov eax, 1; ret; 
0x000000000015013c: call 0x41dd1042; mov dword ptr [rax + 0x48], eax; mov eax, 1; ret; 
0x000000000009efc7: call 0x41ec7918; pop rsp; pop r13; ret; 
0x000000000009efdc: call 0x41ec792d; pop rsp; pop r13; ret; 
0x0000000000081a3f: call 0x44081a44; mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000081bfd: call 0x44081c02; mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000047d18: call 0x47800; add rsp, 8; ret; 
0x0000000000057d63: call 0x478ec598; or byte ptr [rax + 2], bh; ret; 
0x0000000000047f7f: call 0x48120; lea rax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x000000000015fadd: call 0x4815fae3; mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x00000000000445bf: call 0x48aa0; add rsp, 8; ret; 
0x00000000000bcaa7: call 0x48e453f4; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000b6a04: call 0x48f45519; mov eax, edi; ret; 
0x00000000000b6af4: call 0x48f45609; mov eax, edx; ret; 
0x00000000000b9b44: call 0x48f48659; mov eax, edi; ret; 
0x00000000001785d3: call 0x4aa4cde8; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x00000000001787c9: call 0x4aa4cfcf; add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000017884f: call 0x4aa4d059; add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x00000000001788b1: call 0x4aa4d0bf; or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x00000000001788d1: call 0x4aa4d0e0; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x0000000000178933: call 0x4aa4d145; or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000017cbb2: call 0x4aa513ba; add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017cbda: call 0x4aa513e3; add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017cc00: call 0x4aa5140a; add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ccc2: call 0x4aa514d1; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017cd54: call 0x4aa51566; or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000016d680: call 0x4f06e677; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000001701b0: call 0x4f0711a7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000094e71: call 0x5096967a; add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000522ab: call 0x51cd0; test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x000000000009869d: call 0x5496cea4; ret; 
0x00000000000578b0: call 0x56b00; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x0000000000117be3: call 0x5bf2052c; pop r12; pop r13; pop rbp; ret; 
0x000000000008f50f: call 0x5c4a526f; ret; 
0x000000000009c362: call 0x5c4b20c2; pop r13; pop r14; ret; 
0x00000000000bcba7: call 0x5c4d2907; pop r13; ret; 
0x00000000000bcbde: call 0x5c4d293e; pop r13; ret; 
0x00000000000e82d4: call 0x5c4fe034; ret; 
0x00000000000e83d5: call 0x5c4fe135; ret; 
0x0000000000114f8c: call 0x5c52acec; pop r13; ret; 
0x000000000011a225: call 0x5c52ff85; pop r13; ret; 
0x0000000000127b29: call 0x5c53d889; ret; 
0x0000000000130994: call 0x5c5466f4; pop r13; pop r14; ret; 
0x000000000014174c: call 0x5c5574ac; pop r13; pop r14; ret; 
0x000000000014180a: call 0x5c55756a; pop r13; pop r14; ret; 
0x0000000000198917: call 0x5c5ae677; ret; 
0x000000000009f9ea: call 0x5d4b5630; ret; 
0x000000000009fa49: call 0x5d4b568f; ret; 
0x00000000001419f2: call 0x5d557638; pop r14; ret; 
0x0000000000141a5d: call 0x5d5576a3; pop r14; ret; 
0x000000000012fe06: call 0x61d60; pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000000118ee3: call 0x61e20; mov rax, r12; pop r12; ret; 
0x0000000000119428: call 0x61e20; pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000000160d1a: call 0x63a00; test rbx, rbx; jne 0x160d30; pop rbx; ret; 
0x00000000000469a6: call 0x6491b5ae; ret; 
0x0000000000160d4a: call 0x6bbd0; test rbx, rbx; jne 0x160d60; pop rbx; ret; 
0x0000000000198d51: call 0x6ca6d559; ret; 
0x0000000000198da5: call 0x6ca6d5ad; ret; 
0x0000000000041cdd: call 0x6cdf5cbd; and al, 8; ret; 
0x00000000000cfac5: call 0x74df7ecc; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000018eda8: call 0x75e125bd; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000004a19f: call 0x7609de05; ret; 
0x000000000004cfdf: call 0x760a0c45; ret; 
0x000000000004fbdf: call 0x760a3845; ret; 
0x0000000000058e7f: call 0x760acae5; ret; 
0x000000000018d2e4: call 0x781197eb; ret; 
0x000000000018d39c: call 0x781198a3; ret; 
0x000000000018d3c0: call 0x781198c7; ret; 
0x000000000018d3e0: call 0x781198e7; ret; 
0x000000000018d42c: call 0x78119933; ret; 
0x000000000018d4cd: call 0x781199d4; ret; 
0x000000000018d608: call 0x78119b0f; ret; 
0x000000000018d63a: call 0x78119b41; ret; 
0x000000000018d651: call 0x78119b58; ret; 
0x000000000018d675: call 0x78119b7c; ret; 
0x000000000018d695: call 0x78119b9c; ret; 
0x000000000018d6b5: call 0x78119bbc; ret; 
0x000000000018d6c5: call 0x78119bcc; ret; 
0x000000000018d6ec: call 0x78119bf3; ret; 
0x000000000018d710: call 0x78119c17; ret; 
0x000000000018d730: call 0x78119c37; ret; 
0x000000000018d77c: call 0x78119c83; ret; 
0x00000000000b770b: call 0x7f98bf13; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000b7726: call 0x7f98bf2f; add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x00000000000b7749: call 0x7f98bf53; add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x00000000000b780e: call 0x7f98c01e; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b782e: call 0x7f98c03f; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000b7850: call 0x7f98c062; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x00000000000b7953: call 0x7f98c16d; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000000b7a0a: call 0x7f98c229; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b7a94: call 0x7f98c2b6; sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x00000000000b7b24: call 0x7f98c349; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x00000000000b8e2d: call 0x7f98d637; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000b8f44: call 0x7f98d756; or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x00000000000b9074: call 0x7f98d88d; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b90a7: call 0x7f98d8c1; adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x00000000000b9169: call 0x7f98d987; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000b9228: call 0x7f98da4a; sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x000000000018a6cc: call 0x7fa5eed4; add ecx, dword ptr [rdi]; test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b212: call 0x7fa5fa18; add dword ptr [rdi], ecx; test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b3dc: call 0x7fa5fbe3; add cl, byte ptr [rdi]; test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000013c943: call 0x7ff44c4c; ret; 
0x0000000000157951: call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x000000000011656d: call 0x81dd0; mov eax, 1; add rsp, 8; ret; 
0x0000000000157f3c: call 0x830f0; add rsp, 8; ret; 
0x000000000002fdbd: call 0x84586c3; pop rbx; ret; 
0x000000000002fda5: call 0x84686ab; cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x00000000000832c1: call 0x86eb0; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000157f20: call 0x8b310; add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000115cae: call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x0000000000117554: call 0x8b9e0; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000008e58b: call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x000000000008fd89: call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000090083: call 0x913e0; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000093e77: call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000e2c8e: call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000011346f: call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000e2e6e: call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d48: call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151fa: call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000011f4c4: call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000120e17: call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000043499: call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000112bce: call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010ebf1: call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010e23c: call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011f8c2: call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000001211eb: call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000012058a: call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000010c3de: call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120650: call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x00000000000e2fca: call 0x94a70; mov eax, r13d; pop rbp; pop r12; pop r13; ret; 
0x0000000000099428: call 0x952e0; mov rax, qword ptr [rip + 0x152a3c]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000bce33: call 0xbcd90; lea rax, [rax + rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047392: call 0xbd250; mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000012ed88: call 0xbd470; add rsp, 8; ret; 
0x0000000000047551: call 0xbd470; pop rbx; ret; 
0x00000000000dcfb9: call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x00000000000e2ec2: call 0xdd160; test eax, eax; jne 0xe2ed0; add rsp, 8; ret; 
0x0000000000141428: call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x00000000000f2403: call 0xeca60; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000010d261: call 0xf10d266; adc dword ptr [rsi + 0x60], esi; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000198ef7: call 0xffffffff80389efb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000019925f: call 0xffffffff8038a263; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019928f: call 0xffffffff8038a293; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001992bf: call 0xffffffff8038a2c3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001992ef: call 0xffffffff8038a2f3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019931f: call 0xffffffff8038a323; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000f4d61: call 0xffffffff835939db; ret; 
0x00000000000f5826: call 0xffffffff835948a0; ret; 
0x0000000000057da3: call 0xffffffff890c8eb7; add bh, byte ptr [rax + 2]; ret; 
0x000000000013cbc8: call 0xffffffff8913cbd0; sar byte ptr [rdx + 0x7fffffff], 1; add eax, ecx; cmovs eax, edx; ret; 
0x0000000000093db3: call 0xffffffff89523db0; ret; 
0x00000000000a53da: call 0xffffffff895353de; ret; 
0x00000000000e7669: call 0xffffffff89577663; ret; 
0x00000000001558db: call 0xffffffff895e2069; ret; 
0x0000000000155a6b: call 0xffffffff895e21f9; ret; 
0x0000000000150a5b: call 0xffffffff89dd1961; add bh, byte ptr [rax + 1]; ret; 
0x00000000000d13c7: call 0xffffffff89dd7714; ret; 
0x00000000001882d4: call 0xffffffff8b18840a; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b421c: call 0xffffffffa7915131; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000a8b7b: call 0xffffffffb7199309; and al, 0xec; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8aa3: call 0xffffffffb7199b31; push rsp; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000e4f7e: call 0xffffffffb80e5080; jg 0xe4f85; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000185262: call 0xffffffffc542c866; std; xlatb; ret; 
0x000000000018c1a2: call 0xffffffffc54337a6; std; xlatb; ret; 
0x0000000000129694: call 0xffffffffc64ad6b8; mov eax, edx; cmove eax, ecx; ret; 
0x000000000005b330: call 0xffffffffc73efb39; jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000129657: call 0xffffffffc74ad67b; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000198e09: call 0xffffffffc761ea0d; add eax, 0x56319; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000008593f: call 0xffffffffcbf36ccf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000008e2fc: call 0xffffffffcef3f68c; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000010d608: call 0xffffffffd907d61a; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001975c0: call 0xffffffffdb9ebec4; jne 0x1975ad; pop rbx; ret; 
0x0000000000198839: call 0xffffffffdb9ed13d; jne 0x198820; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198964: call 0xffffffffdb9ed268; jne 0x198940; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198b86: call 0xffffffffdb9ed48a; jne 0x198b75; pop rbx; ret; 
0x0000000000198dba: call 0xffffffffdd52d6be; jne 0x198db0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094e6d: call 0xffffffffe8ca9683; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000760b0: call 0xffffffffe90760ab; cmpsd dword ptr [rsi], dword ptr [rdi]; ret; 
0x00000000000e7a51: call 0xffffffffe90e7a50; mov dh, 0xa8; dec dword ptr [rax - 0x77]; ret; 
0x0000000000167b03: call 0xfffffffff0750654; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a4e3: call 0xfffffffff0753034; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679d3: call 0xfffffffff0760324; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a11: call 0xfffffffff0760362; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167a49: call 0xfffffffff076039a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a87: call 0xfffffffff07603d8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167abf: call 0xfffffffff0760410; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167ae7: call 0xfffffffff0760438; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b0f: call 0xfffffffff0760460; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a3b3: call 0xfffffffff0762d04; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a3f1: call 0xfffffffff0762d42; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a429: call 0xfffffffff0762d7a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a467: call 0xfffffffff0762db8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a49f: call 0xfffffffff0762df0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a4c7: call 0xfffffffff0762e18; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a4ef: call 0xfffffffff0762e40; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000010d2f5: call 0xfffffffff310d2fa; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000055c3d: call 0xfffffffff888a54a; clc; jne 0x55c30; mov rax, rdx; ret; 
0x00000000000bc114: call 0xfffffffffc0be627; add eax, dword ptr [rax]; ret; 
0x00000000000bc15f: call 0xfffffffffc0be66a; inc dword ptr [rbx]; ret; 
0x000000000011f0a2: call 0xfffffffffff471c7; sldt word ptr [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001161a3: call ptr [r8 + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000011942c: call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x00000000001161a4: call ptr [rax + rax*4 + 0x3e]; add byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x00000000000a093d: call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000013b755: call ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; ret; 
0x0000000000046542: call ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000000875bd: call ptr [rbp + 0x41]; pop rsp; ret; 
0x0000000000198f43: call ptr [rbp + 0x48]; mov dword ptr [rip + 0x56f20], 0; ret; 
0x00000000000f2407: call ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000198ad5: call ptr [rbx + 0x48]; mov dword ptr [rip + 0x5519e], 0; ret; 
0x0000000000198e0a: call ptr [rbx + 0x48]; mov dword ptr [rip + 0x56319], 0; ret; 
0x00000000000dd757: call ptr [rbx + 0x5d]; lea rax, [rax + rdx*8]; ret; 
0x00000000000e3235: call ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000008a0d5: call ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000009e8d3: call ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000832f0: call ptr [rbx + 0x5d]; ret; 
0x0000000000149f71: call ptr [rbx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000009f3a8: call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000015fb23: call qword ptr [rax + 0x1e0]; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000016001e: call qword ptr [rax + 0x1e0]; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000157b1e: call qword ptr [rax - 0x5e1f00d]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000937ce: call qword ptr [rax - 0x5e1f00d]; mov rax, 0xffffffffffffffff; ret; 
0x000000000014e7ee: call qword ptr [rax - 0x5e1f00d]; ret; 
0x000000000013f96e: call qword ptr [rax - 0x7bf03f7c]; mov eax, 0xf000004; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000120fdb: call qword ptr [rdx]; ja 0x120fec; movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000082ac2: call rax; cmp eax, -1; je 0x82ad8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000001465a4: call rax; lea rax, [rip + 0xaa553]; add rsp, 8; ret; 
0x0000000000038582: call rax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd892: call rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000012bfda: call rax; xor eax, eax; test byte ptr [rbx + 0x1c], 0x20; je 0x12bff0; pop rbx; ret; 
0x000000000009552c: cdq; adc eax, 0x48a77600; add esp, 8; ret; 
0x0000000000045feb: cdq; add byte ptr [rax], al; add al, ch; pop rsp; ret; 
0x00000000000bca03: cdq; add dword ptr es:[rax], eax; cmove rax, rdx; ret; 
0x0000000000047326: cdq; idiv esi; mov edi, edx; shl rdi, 0x20; or rax, rdi; ret; 
0x0000000000047348: cdq; idiv rsi; ret; 
0x00000000001471cc: cdq; or al, byte ptr [rax]; add rsp, 8; ret; 
0x00000000001471b7: cdq; or al, byte ptr [rax]; test eax, eax; je 0x1471c0; ret; 
0x0000000000115d04: cdq; or eax, 0x1b800; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000048243: cdq; ret; 
0x0000000000042545: cdq; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000013f7d3: cdq; sti; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000018c58f: cdq; vzeroupper; ret; 
0x00000000000472f6: cdq; xor eax, edx; sub eax, edx; ret; 
0x0000000000047308: cdq; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000094d04: cdqe; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000157837: cdqe; mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x00000000000ec463: cdqe; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000006fd9c: clc; add al, byte ptr [rcx - 9]; ret; 
0x000000000013a99c: clc; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x000000000010d26d: clc; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rsi + 0x70], edi; ret; 
0x000000000008959c: clc; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000085c6e: clc; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000013c547: clc; add dword ptr [rbp + rcx - 0x7b], esi; sal byte ptr [rbp + 0x19], 0x44; mov eax, eax; ret; 
0x0000000000157f88: clc; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000117e31: clc; add dword ptr [rdi + 1], edi; ret; 
0x000000000012bc05: clc; add dword ptr [rdi + rbx*2 + 0x31], esi; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000a2223: clc; add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000013b609: clc; add eax, 0x10; ret; 
0x00000000000f1d41: clc; add ecx, dword ptr [rdi]; test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014896e: clc; add esi, dword ptr [rsi + 0xe]; mov eax, 2; ret; 
0x0000000000184e8f: clc; add rax, r8; vzeroupper; ret; 
0x00000000000abf47: clc; add rax, rcx; ret; 
0x000000000018d2db: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018895b: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x00000000001847e4: clc; add rax, rcx; vzeroupper; ret; 
0x00000000000a89a4: clc; add rax, rdi; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000ac77b: clc; add rax, rsi; ret; 
0x0000000000121023: clc; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000342b5: clc; and eax, 0x7f; ret; 
0x000000000012fd29: clc; and eax, 0xffffff; ret; 
0x0000000000094d58: clc; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012fce5: clc; bswap eax; ret; 
0x00000000000a093c: clc; call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x0000000000198ad4: clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x5519e], 0; ret; 
0x000000000009e8d2: clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000009f3a7: clc; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000472f5: clc; cdq; xor eax, edx; sub eax, edx; ret; 
0x0000000000055c41: clc; clc; jne 0x55c30; mov rax, rdx; ret; 
0x000000000013b5e9: clc; cmc; je 0x13b5e0; pop rbx; ret; 
0x0000000000192d17: clc; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x000000000018e35d: clc; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f98d: clc; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x0000000000047346: clc; cqo; idiv rsi; ret; 
0x0000000000047306: clc; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x00000000000a2210: clc; dec dword ptr [rax + 0x29]; ret; 
0x000000000012dc99: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ddfe; cmove rax, rdx; ret; 
0x000000000012dbd9: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8dede; cmove rax, rdx; ret; 
0x000000000012db19: clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8df9e; cmove rax, rdx; ret; 
0x000000000012dd17: clc; dec dword ptr [rax - 0x73]; add eax, 0xfff8e1d0; cmovne rax, rdx; ret; 
0x000000000010c3e1: clc; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x000000000009e952: clc; dec dword ptr [rax - 0x75]; add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000010e23f: clc; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x0000000000113275: clc; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x0000000000075cca: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000cb73b: clc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000112bd1: clc; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x000000000010ea6d: clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000113472: clc; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x000000000007b9af: clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000000c6a98: clc; inc dword ptr [rax]; add byte ptr [rax], al; je 0xc6aa3; mov eax, r8d; ret; 
0x000000000013bb2d: clc; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x000000000005b39f: clc; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000010dac8: clc; je 0x10dad0; mov eax, r9d; ret; 
0x000000000011f9d9: clc; je 0x11fa14; mov eax, r8d; ret; 
0x0000000000062f2b: clc; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000bc202: clc; jg 0xbc1fc; int1; mov eax, eax; ret; 
0x00000000000e4fe5: clc; jg 0xe4ffb; add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x0000000000192d1a: clc; jne 0x192e20; ret; 
0x0000000000055c42: clc; jne 0x55c30; mov rax, rdx; ret; 
0x00000000000d012c: clc; jno 0xd01ae; and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x00000000000989c9: clc; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000018b55f: clc; lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000000e366b: clc; leave; ret; 
0x0000000000189c7f: clc; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x00000000001170ea: clc; mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd867b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000117075: clc; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000a89c6: clc; mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89de: clc; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000167b27: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016847b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016867b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016887b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b0b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016844f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016864f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016884f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167adf: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168497: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d417: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000168697: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d387: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000168897: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d2f7: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167b43: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018b557: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c77: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a827: clc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000bc052: clc; mov qword ptr [rdi], rcx; ret; 
0x000000000018be81: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x000000000018fd70: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000000bbc1e: clc; mov qword ptr [rdi], rsi; ret; 
0x000000000018e8df: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018faaf: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000018e359: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f989: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000005b6a5: clc; mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x00000000000bbc16: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000000a8a6c: clc; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b34: clc; mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89a7: clc; mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000ac8c3: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000011f0c6: clc; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000014d27c: clc; notrack jmp rax; xor eax, eax; ret; 
0x0000000000140edb: clc; or al, byte ptr [rax]; test eax, eax; je 0x140ee8; ret; 
0x000000000005b6ab: clc; or dword ptr [rdi - 0x2f], esi; mov rax, r8; ret; 
0x000000000012fd43: clc; or eax, esi; bswap eax; ret; 
0x000000000011f124: clc; or rax, rsi; ret; 
0x0000000000095652: clc; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x00000000000a8eee: clc; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000062f0f: clc; push qword ptr [rbp + rcx + 0x44]; mov eax, eax; ret; 
0x00000000000929df: clc; push qword ptr [rbp - 0x40]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000082ac5: clc; push qword ptr [rdi + rcx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011939d: clc; push qword ptr [rdi + rcx + 0x5d]; lea rax, [rip + 0xd6557]; pop r12; pop r13; ret; 
0x00000000001221ce: clc; push qword ptr [rsi + rbp - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x00000000000e4f46: clc; push rbx; pop rax; jne 0xe4f50; ret; 
0x0000000000047331: clc; ret; 
0x000000000012fcf5: clc; rol ax, 8; ret; 
0x000000000012fc0f: clc; sar rax, 6; ret; 
0x000000000005b4c4: clc; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000000e9ec5: clc; sbb byte ptr [rcx], bh; ret; 
0x00000000000d0029: clc; sbb dword ptr [rdi + 0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000000563ca: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000012fdb9: clc; shr eax, 0x18; ret; 
0x000000000011f09f: clc; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000000cf84f: clc; shr rax, 2; ret; 
0x000000000002fdab: clc; std; je 0x2fdc8; pop rbx; ret; 
0x00000000001785d0: clc; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x00000000001788ce: clc; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x00000000001788ee: clc; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x000000000017890e: clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x0000000000178930: clc; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x0000000000178950: clc; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x0000000000178970: clc; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x00000000001787c6: clc; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x00000000001787e8: clc; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000017880e: clc; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x0000000000178826: clc; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017884c: clc; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017886e: clc; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017888c: clc; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x0000000000178568: clc; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x00000000001788ae: clc; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000018d396: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a16: clc; sub rax, rdx; vzeroupper; ret; 
0x000000000010c8a2: clc; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae4: clc; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000018495b: clc; vzeroupper; ret; 
0x00000000000578b8: clc; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x000000000012d2ea: clc; xor rcx, qword ptr fs:[0x28]; jne 0x12d3cd; leave; ret; 
0x00000000000e501a: cld; add byte ptr [rax], al; ret; 
0x00000000000bc133: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000bc118: cld; add eax, dword ptr [rax]; ret; 
0x0000000000198f42: cld; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x56f20], 0; ret; 
0x0000000000192d32: cld; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; ret; 
0x0000000000192e12: cld; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; xor eax, eax; ret; 
0x00000000001925e1: cld; cmp eax, ecx; jne 0x1927f0; xor eax, eax; ret; 
0x000000000018f9b3: cld; cmp ecx, dword ptr [rdi - 4]; jne 0x18fbe6; xor eax, eax; ret; 
0x000000000018e386: cld; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x00000000001115f7: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000005b15e: cld; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000041d27: cld; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000041d2b: cld; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000bc218: cld; inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000bc163: cld; inc dword ptr [rbx]; ret; 
0x000000000018f9b6: cld; jne 0x18fbe6; xor eax, eax; ret; 
0x0000000000192d35: cld; jne 0x192e20; ret; 
0x0000000000192e15: cld; jne 0x192e20; xor eax, eax; ret; 
0x000000000018b53d: cld; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c5d: cld; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x00000000001682b2: cld; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001684b5: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001686b5: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001688b5: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018b536: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c56: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a806: cld; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000bc05a: cld; mov dword ptr [rdi], ecx; ret; 
0x000000000018be8c: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x000000000018fd82: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000bbc2c: cld; mov dword ptr [rdi], esi; ret; 
0x000000000018e383: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x00000000001925de: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x1927f0; xor eax, eax; ret; 
0x000000000018e5e5: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x00000000000bbc26: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000157779: cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000167cea: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167eca: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680aa: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016828a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167eae: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016808e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016826e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ee6: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d5a6: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001680c6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d526: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001682a6: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d4a6: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167d06: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d626: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000009f1a0: cld; or al, 0; cmovne rax, rdx; ret; 
0x00000000000bc84d: cld; or al, 0; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000d2f6b: cld; push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x00000000000bbb6f: cld; ret; 
0x00000000000241a8: cld; sbb byte ptr [rax], al; ret; 
0x000000000018fef1: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcb7: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000001901b3: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001903df: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018a80d: cld; vzeroupper; ret; 
0x00000000000a4f88: cld; xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000bce02: cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret; 
0x00000000000bc040: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x000000000010d347: cli; add al, 0x74; or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x0000000000190462: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000ea372: cli; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bc045: cli; add dword ptr [rdi + 0x15], esi; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000bbc06: cli; add dword ptr [rdi + 0x26], esi; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000157b23: cli; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157b33: cli; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000018be63: cli; add dword ptr [rdi + 0x2c], esi; jb 0x18be6b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000190d3b: cli; add dword ptr [rdi + 0x3a], esi; jb 0x190d43; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018b976: cli; add dword ptr [rdi + 0x3b], esi; jb 0x18b981; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000190716: cli; add dword ptr [rdi + 0x53], esi; jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000019046f: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000018fda0: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000c9475: cli; add eax, 0x89490000; ret; 
0x000000000002a5a4: cli; add ecx, dword ptr [rdi]; xchg dword ptr [rax + 0x39480000], esp; ret; 
0x00000000000dd05b: cli; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000bbfa4: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf24: cli; and byte ptr [rdi], cl; xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000013fa84: cli; and byte ptr [rdi], cl; xchg esp, eax; ret; 
0x000000000019042b: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000008dee3: cli; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000041ef3: cli; andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000e518b: cli; cmc; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000000a28cc: cli; cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x000000000012bfb3: cli; cmp edi, 0x56; je 0x12bfc0; mov eax, 7; ret; 
0x0000000000112a03: cli; cmp edx, 4; ja 0x112a10; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x00000000000dcfa3: cli; cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x0000000000091e83: cli; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1f3: cli; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x000000000012fc03: cli; cmp rdi, 0x3ff; ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x0000000000079cfc: cli; dec dword ptr [rcx - 0x77]; ret; 
0x00000000000bc137: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x0000000000081ec1: cli; inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000018bdac: cli; ja 0x18bdbe; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bd4c: cli; ja 0x18bdc7; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000190418: cli; jb 0x19042a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001893fb: cli; jg 0x189415; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000189bdb: cli; jg 0x189bf5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000189c9c: cli; jg 0x189cb6; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a19b: cli; jg 0x18a1b5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018a84c: cli; jg 0x18a866; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018a8f1: cli; jg 0x18a8fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018aeab: cli; jg 0x18aec5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018b57c: cli; jg 0x18b596; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018b621: cli; jg 0x18b62b; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b98d: cli; jg 0x18b997; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018be76: cli; jg 0x18be80; vzeroupper; ret; 
0x000000000018fd5b: cli; jg 0x18fd65; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000019043a: cli; jg 0x190444; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000190745: cli; jg 0x19074f; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000190d5c: cli; jg 0x190d66; vzeroupper; ret; 
0x000000000009a056: cli; jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000013b603: cli; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000241a3: cli; lea rax, [rip + 0x18fcf3]; ret; 
0x00000000000241b3: cli; lea rax, [rip + 0x191abc]; ret; 
0x00000000000a8a74: cli; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8b3c: cli; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89af: cli; mov byte ptr [rdi + 2], dl; ret; 
0x000000000010c9b3: cli; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000001686b8: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000010dea3: cli; mov eax, 0x102; syscall; cmp rax, -0xfff; jae 0x10deb4; ret; 
0x000000000010ff23: cli; mov eax, 0x107; syscall; cmp rax, -0xfff; jae 0x10ff34; ret; 
0x00000000001145c3: cli; mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x1145d4; ret; 
0x000000000010fe63: cli; mov eax, 0x10a; syscall; cmp rax, -0xfff; jae 0x10fe74; ret; 
0x0000000000120013: cli; mov eax, 0x110; syscall; cmp rax, -0xfff; jae 0x120024; ret; 
0x0000000000120073: cli; mov eax, 0x11b; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000001200d3: cli; mov eax, 0x11f; syscall; cmp rax, -0xfff; jae 0x1200e4; ret; 
0x000000000011f543: cli; mov eax, 0x122; syscall; cmp rax, -0xfff; jae 0x11f554; ret; 
0x000000000011fce3: cli; mov eax, 0x123; syscall; cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x000000000010eb13: cli; mov eax, 0x124; syscall; cmp rax, -0xfff; jae 0x10eb24; ret; 
0x000000000010eb73: cli; mov eax, 0x125; syscall; cmp rax, -0xfff; jae 0x10eb84; ret; 
0x000000000011fe03: cli; mov eax, 0x126; syscall; cmp rax, -0xfff; jae 0x11fe14; ret; 
0x0000000000120103: cli; mov eax, 0x12c; syscall; cmp rax, -0xfff; jae 0x120114; ret; 
0x000000000011fc23: cli; mov eax, 0x131; syscall; cmp rax, -0xfff; jae 0x11fc34; ret; 
0x0000000000115503: cli; mov eax, 0x132; syscall; cmp rax, -0xfff; jae 0x115514; ret; 
0x0000000000120163: cli; mov eax, 0x134; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000001201f3: cli; mov eax, 0x13f; syscall; cmp rax, -0xfff; jae 0x120204; ret; 
0x0000000000120223: cli; mov eax, 0x14a; syscall; cmp rax, -0xfff; jae 0x120234; ret; 
0x0000000000120253: cli; mov eax, 0x14b; syscall; cmp rax, -0xfff; jae 0x120264; ret; 
0x000000000010e353: cli; mov eax, 0x15; syscall; cmp rax, -0x1000; ja 0x10e368; ret; 
0x000000000010eb43: cli; mov eax, 0x16; syscall; cmp rax, -0xfff; jae 0x10eb54; ret; 
0x0000000000102713: cli; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca3: cli; mov eax, 0x18; syscall; ret; 
0x0000000000118cc3: cli; mov eax, 0x1b; syscall; cmp rax, -0xfff; jae 0x118cd4; ret; 
0x0000000000118c93: cli; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x118ca4; ret; 
0x00000000001213b3: cli; mov eax, 0x1e; syscall; cmp rax, -0x1000; ja 0x1213c8; ret; 
0x0000000000121453: cli; mov eax, 0x1f; syscall; cmp rax, -0x1000; ja 0x121468; ret; 
0x000000000010eab3: cli; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x10eac4; ret; 
0x000000000010eae3: cli; mov eax, 0x21; syscall; cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x00000000000d41b3: cli; mov eax, 0x24; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e2d93: cli; mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000d41e3: cli; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e40c3: cli; mov eax, 0x27; syscall; ret; 
0x00000000001209c3: cli; mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x1209d4; ret; 
0x0000000000120993: cli; mov eax, 0x30; syscall; cmp rax, -0xfff; jae 0x1209a4; ret; 
0x0000000000120383: cli; mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x120394; ret; 
0x00000000001204e3: cli; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x1204f4; ret; 
0x0000000000120483: cli; mov eax, 0x33; syscall; cmp rax, -0xfff; jae 0x120494; ret; 
0x0000000000120453: cli; mov eax, 0x34; syscall; cmp rax, -0xfff; jae 0x120464; ret; 
0x00000000000e3173: cli; mov eax, 0x3b; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000433d3: cli; mov eax, 0x3e; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000e2b43: cli; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000001212a3: cli; mov eax, 0x40; syscall; cmp rax, -0x1000; ja 0x1212b8; ret; 
0x00000000001213e3: cli; mov eax, 0x43; syscall; cmp rax, -0x1000; ja 0x1213f8; ret; 
0x0000000000121233: cli; mov eax, 0x44; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x0000000000121263: cli; mov eax, 0x47; syscall; cmp rax, -0x1000; ja 0x121278; ret; 
0x000000000010e793: cli; mov eax, 0x49; syscall; cmp rax, -0xfff; jae 0x10e7a4; ret; 
0x0000000000116ee3: cli; mov eax, 0x4c; syscall; cmp rax, -0x1000; ja 0x116ef8; ret; 
0x0000000000116f13: cli; mov eax, 0x4d; syscall; cmp rax, -0x1000; ja 0x116f28; ret; 
0x000000000010ec33: cli; mov eax, 0x50; syscall; cmp rax, -0xfff; jae 0x10ec44; ret; 
0x000000000010ec63: cli; mov eax, 0x51; syscall; cmp rax, -0xfff; jae 0x10ec74; ret; 
0x0000000000062e83: cli; mov eax, 0x52; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x000000000010de73: cli; mov eax, 0x53; syscall; cmp rax, -0xfff; jae 0x10de84; ret; 
0x000000000010ff53: cli; mov eax, 0x54; syscall; cmp rax, -0xfff; jae 0x10ff64; ret; 
0x000000000010fdd3: cli; mov eax, 0x56; syscall; cmp rax, -0xfff; jae 0x10fde4; ret; 
0x000000000010fef3: cli; mov eax, 0x57; syscall; cmp rax, -0xfff; jae 0x10ff04; ret; 
0x000000000010fe33: cli; mov eax, 0x58; syscall; cmp rax, -0xfff; jae 0x10fe44; ret; 
0x000000000010fe93: cli; mov eax, 0x59; syscall; cmp rax, -0xfff; jae 0x10fea4; ret; 
0x000000000010dd83: cli; mov eax, 0x5a; syscall; cmp rax, -0xfff; jae 0x10dd94; ret; 
0x000000000010ddb3: cli; mov eax, 0x5b; syscall; cmp rax, -0xfff; jae 0x10ddc4; ret; 
0x000000000010f583: cli; mov eax, 0x5c; syscall; cmp rax, -0xfff; jae 0x10f594; ret; 
0x000000000010f5b3: cli; mov eax, 0x5d; syscall; cmp rax, -0xfff; jae 0x10f5c4; ret; 
0x000000000010f5e3: cli; mov eax, 0x5e; syscall; cmp rax, -0xfff; jae 0x10f5f4; ret; 
0x000000000010dd73: cli; mov eax, 0x5f; syscall; ret; 
0x0000000000114003: cli; mov eax, 0x62; syscall; cmp rax, -0xfff; jae 0x114014; ret; 
0x000000000011ffe3: cli; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11fff4; ret; 
0x00000000000e40e3: cli; mov eax, 0x66; syscall; ret; 
0x000000000011fe63: cli; mov eax, 0x67; syscall; cmp rax, -0xfff; jae 0x11fe74; ret; 
0x00000000000e4103: cli; mov eax, 0x68; syscall; ret; 
0x00000000000e40f3: cli; mov eax, 0x6b; syscall; ret; 
0x00000000000e4113: cli; mov eax, 0x6c; syscall; ret; 
0x00000000000e43a3: cli; mov eax, 0x6d; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e40d3: cli; mov eax, 0x6e; syscall; ret; 
0x00000000000e43d3: cli; mov eax, 0x6f; syscall; ret; 
0x00000000000e4433: cli; mov eax, 0x70; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4123: cli; mov eax, 0x73; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4463: cli; mov eax, 0x76; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4493: cli; mov eax, 0x78; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e4373: cli; mov eax, 0x79; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x000000000011f3e3: cli; mov eax, 0x7a; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f413: cli; mov eax, 0x7b; syscall; cmp rax, -0xfff; jae 0x11f424; ret; 
0x00000000000e4403: cli; mov eax, 0x7c; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x000000000011fbc3: cli; mov eax, 0x7d; syscall; cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x000000000011fbf3: cli; mov eax, 0x7e; syscall; cmp rax, -0xfff; jae 0x11fc04; ret; 
0x00000000000439c3: cli; mov eax, 0x83; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x000000000010d5f3: cli; mov eax, 0x84; syscall; cmp rax, -0xfff; jae 0x10d604; ret; 
0x0000000000120043: cli; mov eax, 0x86; syscall; cmp rax, -0xfff; jae 0x120054; ret; 
0x000000000011f603: cli; mov eax, 0x87; syscall; cmp rax, -0xfff; jae 0x11f614; ret; 
0x000000000010dc23: cli; mov eax, 0x89; syscall; cmp rax, -0xfff; jae 0x10dc34; ret; 
0x000000000010dc53: cli; mov eax, 0x8a; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x0000000000114403: cli; mov eax, 0x8d; syscall; cmp rax, -0xfff; jae 0x114414; ret; 
0x0000000000102653: cli; mov eax, 0x8e; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102683: cli; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b3: cli; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e3: cli; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102743: cli; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102773: cli; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a3: cli; mov eax, 0x94; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x0000000000118d23: cli; mov eax, 0x95; syscall; cmp rax, -0xfff; jae 0x118d34; ret; 
0x0000000000118d53: cli; mov eax, 0x96; syscall; cmp rax, -0xfff; jae 0x118d64; ret; 
0x0000000000118d83: cli; mov eax, 0x97; syscall; cmp rax, -0xfff; jae 0x118d94; ret; 
0x0000000000118db3: cli; mov eax, 0x98; syscall; cmp rax, -0xfff; jae 0x118dc4; ret; 
0x0000000000115843: cli; mov eax, 0x99; syscall; cmp rax, -0xfff; jae 0x115854; ret; 
0x000000000011fb53: cli; mov eax, 0x9a; syscall; cmp rax, -0xfff; jae 0x11fb64; ret; 
0x000000000011ff23: cli; mov eax, 0x9b; syscall; cmp rax, -0xfff; jae 0x11ff34; ret; 
0x000000000011fb23: cli; mov eax, 0x9e; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x0000000000115383: cli; mov eax, 0xa1; syscall; cmp rax, -0xfff; jae 0x115394; ret; 
0x0000000000115443: cli; mov eax, 0xa2; syscall; cmp rax, -0xfff; jae 0x115454; ret; 
0x0000000000115353: cli; mov eax, 0xa3; syscall; cmp rax, -0xfff; jae 0x115364; ret; 
0x000000000011f383: cli; mov eax, 0xa6; syscall; cmp rax, -0xfff; jae 0x11f394; ret; 
0x0000000000115873: cli; mov eax, 0xa7; syscall; cmp rax, -0xfff; jae 0x115884; ret; 
0x00000000001158a3: cli; mov eax, 0xa8; syscall; cmp rax, -0xfff; jae 0x1158b4; ret; 
0x0000000000118bc3: cli; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x118bd4; ret; 
0x0000000000115003: cli; mov eax, 0xaa; syscall; cmp rax, -0xfff; jae 0x115014; ret; 
0x0000000000115153: cli; mov eax, 0xab; syscall; cmp rax, -0xfff; jae 0x115164; ret; 
0x000000000011f233: cli; mov eax, 0xac; syscall; cmp rax, -0xfff; jae 0x11f244; ret; 
0x000000000011f203: cli; mov eax, 0xad; syscall; cmp rax, -0xfff; jae 0x11f214; ret; 
0x000000000011fc53: cli; mov eax, 0xae; syscall; cmp rax, -0xfff; jae 0x11fc64; ret; 
0x000000000011fc83: cli; mov eax, 0xb0; syscall; cmp rax, -0xfff; jae 0x11fc94; ret; 
0x000000000011fd43: cli; mov eax, 0xb1; syscall; cmp rax, -0xfff; jae 0x11fd54; ret; 
0x000000000011fef3: cli; mov eax, 0xb4; syscall; cmp rax, -0xfff; jae 0x11ff04; ret; 
0x0000000000118b93: cli; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000120283: cli; mov eax, 0xba; syscall; ret; 
0x000000000011f3b3: cli; mov eax, 0xbb; syscall; cmp rax, -0x1000; ja 0x11f3c8; ret; 
0x000000000011d0a3: cli; mov eax, 0xc2; syscall; cmp rax, -0xfff; jae 0x11d0b4; ret; 
0x000000000011cfe3: cli; mov eax, 0xc4; syscall; cmp rax, -0xfff; jae 0x11cff4; ret; 
0x000000000011d193: cli; mov eax, 0xc5; syscall; cmp rax, -0xfff; jae 0x11d1a4; ret; 
0x000000000011d133: cli; mov eax, 0xc6; syscall; cmp rax, -0xfff; jae 0x11d144; ret; 
0x000000000011d013: cli; mov eax, 0xc7; syscall; cmp rax, -0xfff; jae 0x11d024; ret; 
0x00000000000d0dc3: cli; mov eax, 0xc9; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x000000000011fcb3: cli; mov eax, 0xd5; syscall; cmp rax, -0xfff; jae 0x11fcc4; ret; 
0x000000000011fb83: cli; mov eax, 0xe4; syscall; ret; 
0x0000000000120293: cli; mov eax, 0xea; syscall; cmp rax, -0xfff; jae 0x1202a4; ret; 
0x0000000000116cc3: cli; mov eax, 0xeb; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x000000000011fdd3: cli; mov eax, 0xfd; syscall; cmp rax, -0xfff; jae 0x11fde4; ret; 
0x000000000011fda3: cli; mov eax, 0xfe; syscall; cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x000000000011fe33: cli; mov eax, 0xff; syscall; cmp rax, -0xfff; jae 0x11fe44; ret; 
0x00000000000479f3: cli; mov eax, 0xffffffff; ret; 
0x0000000000146473: cli; mov eax, 1; ret; 
0x0000000000113893: cli; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x1138a8; ret; 
0x00000000000e5213: cli; mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x0000000000148ca3: cli; mov eax, 2; ret; 
0x0000000000113563: cli; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x113578; ret; 
0x000000000010e323: cli; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000010d293: cli; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000093563: cli; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000010d283: cli; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000157b43: cli; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000010c9a3: cli; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001138c3: cli; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000094d13: cli; mov eax, dword ptr [rdi + 8]; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008cd83: cli; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008cd53: cli; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000094da3: cli; mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000de2e3: cli; mov eax, dword ptr [rdi]; ret; 
0x000000000008def3: cli; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008df03: cli; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x00000000000440a3: cli; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x0000000000044093: cli; mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x00000000001471b3: cli; mov eax, dword ptr [rip + 0xa99c2]; test eax, eax; je 0x1471c0; ret; 
0x0000000000118923: cli; mov eax, dword ptr [rip + 0xd3a1e]; test edi, edi; je 0x118934; mov dword ptr [rip + 0xd3a14], edi; ret; 
0x000000000010d333: cli; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000041b73: cli; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000342b3: cli; mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fce3: cli; mov eax, edi; bswap eax; ret; 
0x00000000000472f3: cli; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x000000000012fcf3: cli; mov eax, edi; rol ax, 8; ret; 
0x00000000001686b2: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000013a7c3: cli; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000015e103: cli; mov edi, dword ptr [rip + 0x8e326]; test edi, edi; jns 0x15e110; ret; 
0x00000000000a06b3: cli; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06d3: cli; mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x0000000000163683: cli; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000928f3: cli; mov rax, 0xffffffffffffffff; ret; 
0x00000000001576c3: cli; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de293: cli; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093e93: cli; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000093853: cli; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000087493: cli; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000951f3: cli; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e43: cli; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095253: cli; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e83: cli; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000095223: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b3: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095243: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea3: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e33: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e23: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000093833: cli; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000043c53: cli; mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000344c3: cli; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e3: cli; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d53: cli; mov rax, qword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328e3: cli; mov rax, qword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a3: cli; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000024403: cli; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab3: cli; mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa3: cli; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163653: cli; mov rax, qword ptr [rip + 0x88815]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162ff3: cli; mov rax, qword ptr [rip + 0x88e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162fd3: cli; mov rax, qword ptr [rip + 0x88e95]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f93: cli; mov rax, qword ptr [rip + 0x88ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f73: cli; mov rax, qword ptr [rip + 0x88ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f53: cli; mov rax, qword ptr [rip + 0x88f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f33: cli; mov rax, qword ptr [rip + 0x88f35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160ee3: cli; mov rax, qword ptr [rip + 0x8af85]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015cc63: cli; mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153393: cli; mov rax, qword ptr [rip + 0x98a05]; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000141413: cli; mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000143193: cli; mov rax, qword ptr [rip + 0xad885]; test rax, rax; jne 0x1431a8; ret; 
0x00000000001300a3: cli; mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x0000000000122ad3: cli; mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001202c3: cli; mov rax, qword ptr [rip + 0xcbba5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115823: cli; mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114e53: cli; mov rax, qword ptr [rip + 0xd7005]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x00000000001145a3: cli; mov rax, qword ptr [rip + 0xd78c5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dde3: cli; mov rax, qword ptr [rip + 0xde085]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fec93: cli; mov rax, qword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000342d3: cli; mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034453: cli; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034463: cli; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000094c43: cli; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000047343: cli; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000047303: cli; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000093863: cli; mov rax, rdi; ret; 
0x0000000000121483: cli; mov rcx, qword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121490; ret; 
0x000000000014e023: cli; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14e030; ret; 
0x0000000000154723: cli; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154730; ret; 
0x0000000000122243: cli; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x1220e0; ret; 
0x0000000000122223: cli; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x00000000001175b3: cli; mov rdi, qword ptr [rip + 0xd81ad]; test rdi, rdi; jne 0x1175d0; mov eax, 1; ret; 
0x000000000005b621: cli; mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000042293: cli; movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000042a23: cli; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000271f3: cli; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000010c973: cli; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000ac8c9: cli; movzx edx, dl; sub eax, edx; ret; 
0x00000000000a8a3f: cli; notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x0000000000190444: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000010c3f4: cli; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000042633: cli; pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000421b3: cli; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000424e3: cli; pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000005b45e: cli; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000e51a7: cli; push rsp; push rbx; setne al; ret; 
0x00000000000bbf66: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000023ef3: cli; ret; 
0x00000000000d4231: cli; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x0000000000094193: cli; setae al; ret; 
0x000000000008282c: cli; stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x00000000000d4236: cli; sub byte ptr [rdi + rcx*4 + 2], bl; jbe 0xd4240; ret; 
0x000000000009471b: cli; sub dh, byte ptr [rbp - 0x1f]; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x000000000010c9c3: cli; sub rsp, 0x10; push 0; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000010c9e3: cli; sub rsp, 0x10; push 1; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef3: cli; sub rsp, 0x10; push 2; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000136e93: cli; sub rsp, 0x10; push 2; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f13: cli; sub rsp, 0x10; push 3; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000117903: cli; sub rsp, 8; call 0x117600; mov qword ptr [rip + 0xd7e7c], rax; add rsp, 8; ret; 
0x0000000000047d13: cli; sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000141423: cli; sub rsp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000157f33: cli; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000137e39: cli; test dword ptr [rbx], ecx; add byte ptr [rcx], al; add rsp, 8; ret; 
0x0000000000157f53: cli; test edx, edx; jne 0x157f68; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157fa3: cli; test edx, edx; jne 0x157fb8; mov r8d, 1; mov eax, r8d; ret; 
0x000000000002fd83: cli; test esi, esi; je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x00000000000b1c99: cli; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3c: cli; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e68: cli; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df8: cli; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf798: cli; test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72c: cli; test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000bbf53: cli; test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000b1d63: cli; test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf693: cli; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x00000000001901c1: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000000342c3: cli; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000094c63: cli; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000000092873: cli; xor eax, eax; ret; 
0x0000000000113823: cli; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x113838; ret; 
0x000000000008cd63: cli; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd73: cli; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000908a3: cli; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000141267: cmc; adc esi, ebp; dec dword ptr [rax + 0x39]; ret; 
0x00000000000cfae1: cmc; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000000e766a: cmc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e4f54: cmc; jb 0xe4fa0; cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x000000000013b5ea: cmc; je 0x13b5e0; pop rbx; ret; 
0x00000000000e4477: cmc; jns 0xe448a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e518c: cmc; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x0000000000162f77: cmc; mov cs, word ptr [rax]; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000016d52a: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f3e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d523: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000011fe77: cmc; mov edi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe77: cmc; mov edi, 0xd8f7000d; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001680a7: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680c3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000120177: cmc; mov esp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000192323: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000000bcd0d: cmc; or al, 0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x0000000000125f37: cmc; ret; 
0x000000000010ec77: cmc; ror dword ptr [rip + 0x64d8f700], 1; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000192327: cmc; sub eax, edx; ret; 
0x0000000000112d1c: cmova eax, edx; ret; 
0x00000000000de2b1: cmova edx, eax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000de2b0: cmova rdx, rax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x0000000000093e9d: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000885e4: cmovae eax, dword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000093e9c: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000885e3: cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000121030: cmovb eax, edx; ret; 
0x0000000000189c58: cmovb ecx, dword ptr [rcx + 0x42fc0754]; mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000018b538: cmovb ecx, dword ptr [rcx + 0x4afc0754]; lea eax, [rdi + rax]; vzeroupper; ret; 
0x000000000005b461: cmovb edx, edi; mov rax, r10; ret; 
0x000000000005b460: cmovb r10, rdi; mov rax, r10; ret; 
0x000000000012102f: cmovb rax, rdx; ret; 
0x000000000009f35d: cmovbe eax, edx; ret; 
0x000000000009418c: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000009418b: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000000bc13d: cmove eax, ecx; ret; 
0x00000000000a06bc: cmove eax, edx; add eax, 1; ret; 
0x00000000000d0ea0: cmove eax, edx; add rsp, 0x58; ret; 
0x000000000009cb97: cmove eax, edx; add rsp, 8; ret; 
0x000000000012d238: cmove eax, edx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x0000000000033c3f: cmove eax, edx; ret; 
0x00000000000476be: cmove esp, eax; add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000476bd: cmove r12, rax; add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000bc13c: cmove rax, rcx; ret; 
0x00000000000a06dd: cmove rax, rdx; add eax, 1; ret; 
0x00000000000d0e9f: cmove rax, rdx; add rsp, 0x58; ret; 
0x000000000009cb96: cmove rax, rdx; add rsp, 8; ret; 
0x000000000012d237: cmove rax, rdx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x0000000000033c3e: cmove rax, rdx; ret; 
0x0000000000086e1b: cmovg eax, ecx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916e3: cmovg eax, ecx; test rdx, rdx; jne 0x916d8; ret; 
0x00000000000cf196: cmovg ecx, eax; mov eax, r9d; ret; 
0x00000000000cf195: cmovg r9d, eax; mov eax, r9d; ret; 
0x0000000000086e1a: cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916e2: cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x000000000012ed00: cmovl ecx, dword ptr [rcx + 0x415d5be0]; pop rsp; ret; 
0x000000000018ae8a: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x00000000000cf174: cmovl ecx, eax; mov eax, r9d; ret; 
0x00000000000cf173: cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000a289b: cmovne eax, eax; mov rax, r8; ret; 
0x000000000008a724: cmovne eax, ecx; ret; 
0x00000000000a1ff7: cmovne eax, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c3e: cmovne eax, edi; ret; 
0x000000000015c82a: cmovne eax, edx; add rsp, 8; ret; 
0x0000000000086ef7: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000095272: cmovne eax, edx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x00000000000ee414: cmovne eax, edx; pop rbx; ret; 
0x000000000009c205: cmovne eax, edx; ret; 
0x0000000000188394: cmovne eax, edx; vzeroupper; ret; 
0x00000000001296d3: cmovne eax, esi; ret; 
0x00000000000b1ab1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000032849: cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000008ce60: cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000b1ab5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000a289a: cmovne r8, rax; mov rax, r8; ret; 
0x000000000008a723: cmovne rax, rcx; ret; 
0x00000000000a1ff6: cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c3d: cmovne rax, rdi; ret; 
0x000000000015c829: cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000095271: cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000009c204: cmovne rax, rdx; ret; 
0x0000000000188393: cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b1ab0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000000b1ab4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000127d01: cmovns eax, dword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000e5c6d: cmovns eax, dword ptr [rbx + 0x394810c1]; ret; 
0x00000000000b7af1: cmovns eax, dword ptr [rbx - 0x72b7e018]; jg 0xb7b19; jne 0xb7f80; ret; 
0x00000000000b798f: cmovns eax, dword ptr [rbx - 0x72b7e818]; jg 0xb79af; jne 0xb7f80; ret; 
0x00000000000b790d: cmovns eax, dword ptr [rbx - 0x72b7ec18]; jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b8fcb: cmovns eax, dword ptr [rbx - 0x72b7ef18]; jg 0xb8fe4; jne 0xb97d0; ret; 
0x00000000000b77c8: cmovns eax, dword ptr [rbx - 0x72b7f618]; jg 0xb77da; jne 0xb7f80; ret; 
0x00000000000b7746: cmovns eax, dword ptr [rbx - 0x72b7fa18]; jg 0xb7754; jne 0xb7f80; ret; 
0x0000000000078bbe: cmovns eax, dword ptr [rbx - 0x76b20f20]; ret; 
0x00000000001143dc: cmovns eax, edx; ret; 
0x00000000000b798e: cmovns r8, qword ptr [r11 - 0x72b7e818]; jg 0xb79af; jne 0xb7f80; ret; 
0x00000000000b790c: cmovns r8, qword ptr [r11 - 0x72b7ec18]; jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b8fca: cmovns r8d, dword ptr [r11 - 0x72b7ef18]; jg 0xb8fe4; jne 0xb97d0; ret; 
0x0000000000127d00: cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000189c7a: cmovp ecx, dword ptr [rcx + 0x42f80754]; mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000018b55a: cmovp ecx, dword ptr [rcx + 0x4af80754]; lea eax, [rdi + rax]; vzeroupper; ret; 
0x000000000007f320: cmovs eax, dword ptr [rbx + 0x149f0e0]; ret; 
0x0000000000147758: cmovs eax, dword ptr [rbx - 0x3fcef73c]; pop rbx; pop rbp; ret; 
0x0000000000027200: cmovs eax, edx; ret; 
0x00000000000b8fa5: cmovs ecx, dword ptr [rbp - 0x7af0f081]; and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x00000000000b7891: cmovs ecx, dword ptr [rbp - 0x7af0f081]; in al, 6; add byte ptr [rax], al; ret; 
0x000000000017cdb5: cmovs ecx, dword ptr [rbp - 0x7af0f0b6]; mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b8e26: cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f98d637; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x0000000000082ac8: cmovs ecx, dword ptr [rbx + 0x48082444]; add esp, 0x18; ret; 
0x000000000010ff9d: cmovs ecx, dword ptr [rbx + 0x48c03116]; cmp ecx, edx; seta al; sbb eax, 0; ret; 
0x000000000018fd69: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000011f9cd: cmovs ecx, dword ptr [rbx + 0xcc49b15]; add byte ptr [rbx + rcx*4 + 2], ah; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x000000000010dabc: cmovs ecx, dword ptr [rbx + 0xde3ac05]; add byte ptr [rbx + rcx*4], ah; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x0000000000096965: cmovs ecx, dword ptr [rbx - 0x173ef7be]; add al, 0x39; ret; 
0x00000000000bb0a9: cmovs ecx, dword ptr [rcx - 0x12cff8a9]; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000bb089: cmovs ecx, dword ptr [rcx - 0x12cff9a9]; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb069: cmovs ecx, dword ptr [rcx - 0x12cffaa9]; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b8f69: cmovs ecx, dword ptr [rcx - 0x72b7f9a9]; or eax, 0xee88349; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b8f39: cmovs ecx, dword ptr [rcx - 0x72b7faa9]; or al, 0x49; sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b7849: cmovs ecx, dword ptr [rcx - 0x7cb6faa9]; call 0x7f98c062; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x0000000000092a18: cmovs edi, dword ptr [rcx]; int1; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000012d078: cmovs edi, dword ptr [rcx]; js 0x12d085; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000018c6eb: cmp ah, byte ptr [rax]; jne 0x18c529; vzeroupper; ret; 
0x0000000000183fd8: cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000183d5f: cmp ah, byte ptr [rbx - 0x25]; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000183b5a: cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000183db6: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000162e58: cmp al, 0; call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x00000000001170d8: cmp al, 0x20; je 0x1170c8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000156751: cmp al, 0x24; add byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x000000000010299b: cmp al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01ed: cmp al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd0209; add rsp, 0x28; ret; 
0x0000000000099430: cmp al, 0x2a; adc eax, 0xc0314500; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000e819f: cmp al, 0x2a; je 0xe81a7; cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c0: cmp al, 0x2a; je 0xe81a7; cmp al, 0x3f; jne 0xe81f9; mov eax, 1; ret; 
0x00000000000ec438: cmp al, 0x2e; je 0xec480; mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000a2893: cmp al, 0x3d; mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000e81a3: cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c4: cmp al, 0x3f; jne 0xe81f9; mov eax, 1; ret; 
0x0000000000116e58: cmp al, 0x48; add esp, 0x38; ret; 
0x000000000018c6b7: cmp al, 0xa; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb4d: cmp al, 0xa; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018c6b4: cmp al, 0xe; cmp edi, dword ptr [rdx + rcx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb4a: cmp al, 0xe; cmp edi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x0000000000032847: cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000042832: cmp al, 0xff; dec dword ptr [rdi]; mov word ptr [rbp - 0x7f000000], es; sti; push rax; ret; 
0x000000000018f993: cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7a40: cmp al, 5; add byte ptr [rax], al; ret; 
0x000000000018b422: cmp al, byte ptr [rdx]; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000019268e: cmp al, byte ptr [rsi - 1]; jne 0x192805; xor eax, eax; ret; 
0x000000000018e4eb: cmp al, cl; jne 0x18edc0; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000192742: cmp al, cl; jne 0x192805; cmp eax, ecx; jne 0x192805; xor eax, eax; ret; 
0x00000000001927ff: cmp al, cl; jne 0x192805; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000ac166: cmp al, dh; ret; 
0x00000000000ac165: cmp al, r14b; ret; 
0x00000000001221cc: cmp ax, -1; je 0x122200; add eax, 1; mov word ptr [rdx], ax; ret; 
0x0000000000041b7a: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x000000000009e951: cmp bh, al; dec dword ptr [rax - 0x75]; add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000012965a: cmp bh, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000001296d1: cmp bh, cl; cmovne eax, esi; ret; 
0x0000000000120e19: cmp bh, dh; dec dword ptr [rbx + 0x48042444]; add esp, 0x28; ret; 
0x0000000000120d61: cmp bh, dh; dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x00000000000832e0: cmp bl, ch; movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000928ec: cmp bl, ch; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000091f07: cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000cf066: cmp byte ptr [r11], r15b; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x00000000000926c0: cmp byte ptr [r13 + 0x41], r11b; pop rsp; ret; 
0x0000000000043b42: cmp byte ptr [r15], r9b; adc dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x00000000001279a7: cmp byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000128541: cmp byte ptr [r8 - 0x7d], cl; ret; 
0x00000000000fed68: cmp byte ptr [r8], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000091e60: cmp byte ptr [r9 - 0x3b7cb7fd], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008d307: cmp byte ptr [rax + 0x39], cl; adc byte ptr [r10 + 0x32], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000007e829: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000014d372: cmp byte ptr [rax + 0xf000000], 0xc8; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000054334: cmp byte ptr [rax + 1], 0; jne 0x54330; pop rbx; ret; 
0x00000000000ac1a7: cmp byte ptr [rax + 1], cl; clc; ret; 
0x00000000000ec462: cmp byte ptr [rax - 0x68], cl; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec461: cmp byte ptr [rax - 0x68], r9b; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x0000000000115a05: cmp byte ptr [rax - 0x75], cl; and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x000000000015fc25: cmp byte ptr [rax - 0x75], cl; and al, 0x48; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x0000000000127b26: cmp byte ptr [rax - 0x77], cl; call 0x5c53d889; ret; 
0x000000000009268d: cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000128542: cmp byte ptr [rax - 0x7d], cl; ret; 
0x0000000000054309: cmp byte ptr [rax - 1], 0x2f; jne 0x54300; pop rbx; ret; 
0x0000000000116f76: cmp byte ptr [rax - 1], bh; ret; 
0x000000000017c908: cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b6619: cmp byte ptr [rax], 1; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000183fd3: cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000ac196: cmp byte ptr [rax], ah; ret; 
0x0000000000091e87: cmp byte ptr [rax], al; je 0x91e90; ret; 
0x00000000000fed69: cmp byte ptr [rax], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b14d4: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x00000000000ac676: cmp byte ptr [rax], dh; ret; 
0x00000000000ac186: cmp byte ptr [rax], dl; ret; 
0x00000000000ac185: cmp byte ptr [rax], r10b; ret; 
0x0000000000183fd2: cmp byte ptr [rax], r12b; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000000ac195: cmp byte ptr [rax], r12b; ret; 
0x00000000000ac675: cmp byte ptr [rax], r14b; ret; 
0x00000000000b14d3: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000cf06a: cmp byte ptr [rbp + 0x13], dh; ret; 
0x00000000000cf069: cmp byte ptr [rbp + 0x13], r14b; ret; 
0x00000000000926c1: cmp byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000011cfa2: cmp byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000000e1b57: cmp byte ptr [rbx + 0x10d9812d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc27: cmp byte ptr [rbx + 0x10f7412d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000084fcf: cmp byte ptr [rbx + 0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000025b98: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000091f08: cmp byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000002448e: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000138877: cmp byte ptr [rbx + 0xb7bc12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000126567: cmp byte ptr [rbx + 0xc98c12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124ab7: cmp byte ptr [rbx + 0xcb2192d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000cf067: cmp byte ptr [rbx], bh; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x000000000015e20b: cmp byte ptr [rcx + rcx*4 - 0x10], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000086406: cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000008af98: cmp byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000feca0: cmp byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000091e61: cmp byte ptr [rcx - 0x3b7cb7fd], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000139c85: cmp byte ptr [rcx - 0xa], al; ret; 
0x000000000012148a: cmp byte ptr [rcx], 0; je 0x121490; ret; 
0x0000000000092a14: cmp byte ptr [rcx], 0xa; je 0x92a28; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000017c909: cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000b661a: cmp byte ptr [rcx], al; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000b8e94: cmp byte ptr [rcx], cl; add byte ptr [rax], al; ret; 
0x0000000000127b90: cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000009685e: cmp byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000146554: cmp byte ptr [rdi + 0x1f0ffffe], dl; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000004229b: cmp byte ptr [rdi + 0x2d], 0; add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x000000000004736c: cmp byte ptr [rdi], 0; jne 0x47378; pop rbx; ret; 
0x0000000000043b43: cmp byte ptr [rdi], cl; adc dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x00000000000f07ce: cmp byte ptr [rdi], cl; mov dh, 0x14; cmp ch, cl; ret; 
0x000000000018e23d: cmp byte ptr [rdi], dl; ret; 
0x00000000000f07cd: cmp byte ptr [rdi], r9b; mov dh, 0x14; cmp ch, cl; ret; 
0x0000000000087de5: cmp byte ptr [rdx], cl; je 0x87df8; cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x0000000000162364: cmp byte ptr [rip + 0x3b34e800], al; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000011390c: cmp byte ptr [rip - 0x1010], ah; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000328ad: cmp byte ptr [rsi + 0x17], dh; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000001161a6: cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x00000000000e5138: cmp byte ptr [rsi], ah; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5008: cmp byte ptr [rsi], ah; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e51f9: cmp byte ptr [rsi], ah; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x00000000000ee47a: cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000115cad: cmp ch, al; sub eax, 0xb8fff75d; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000183d62: cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000118e52: cmp ch, byte ptr [rdx + 0xd]; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000f07d2: cmp ch, cl; ret; 
0x00000000000ec400: cmp cl, 0x2d; jne 0xec3ed; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3cf: cmp cl, 0x5e; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000646c1: cmp cl, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x0000000000134a68: cmp cl, 5; jbe 0x1349d9; xor eax, eax; pop rbx; ret; 
0x0000000000100466: cmp cl, bh; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000183b5d: cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x00000000000bb4d4: cmp cl, byte ptr [rax + rdx + 2]; jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb584: cmp cl, byte ptr [rax + rdx + 2]; jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x000000000013e78b: cmp cl, byte ptr [rax - 0x77]; ret; 
0x0000000000183aa3: cmp cl, byte ptr [rax - 0x7d]; rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x000000000013e74c: cmp cl, byte ptr [rax - 0x7d]; ret; 
0x000000000005448c: cmp cl, byte ptr [rdi]; xchg esp, eax; ret; 
0x0000000000057be5: cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x000000000015d453: cmp cx, 3; jbe 0x15d460; ret; 
0x00000000001282e4: cmp dh, al; add byte ptr [rax], ah; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001282c9: cmp dh, al; add byte ptr [rdx], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000129697: cmp dh, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000188391: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000190d3e: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000129708: cmp dh, cl; cmovne eax, edx; ret; 
0x00000000000f7e1c: cmp dh, dh; ret; 
0x0000000000120fd9: cmp di, 0x12; ja 0x120fec; movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000129659: cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000001296d0: cmp dil, cl; cmovne eax, esi; ret; 
0x000000000019042a: cmp dl, 0x20; jb 0x190439; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000190417: cmp dl, 0x40; jb 0x19042a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000018b975: cmp dl, 1; ja 0x18b9b5; jb 0x18b981; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018be62: cmp dl, 1; ja 0x18be93; jb 0x18be6b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000190715: cmp dl, 1; ja 0x19076d; jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000190d3a: cmp dl, 1; ja 0x190d79; jb 0x190d43; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000bbc05: cmp dl, 1; ja 0xbbc30; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000bc044: cmp dl, 1; ja 0xbc05e; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x000000000018fd9f: cmp dl, 1; jb 0x18fda8; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000019046e: cmp dl, 1; jb 0x190475; mov byte ptr [rdi], cl; ret; 
0x0000000000190461: cmp dl, 2; jb 0x19046e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000009f31b: cmp dl, 2; je 0x9f32e; cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x000000000009f320: cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x0000000000190456: cmp dl, 4; jb 0x190461; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000190443: cmp dl, 8; jb 0x190452; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000009c26d: cmp dl, al; jne 0x9c258; sub rax, 0x10; ret; 
0x00000000000a86e3: cmp dl, cl; jne 0xa86d0; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x000000000009c26c: cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x0000000000041233: cmp dword ptr [r8 + rax*4 + 4], r10d; jne 0x41220; mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x00000000000bcccb: cmp dword ptr [r9], edx; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x000000000008749c: cmp dword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000012d07a: cmp dword ptr [rax + 8], edi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x0000000000041234: cmp dword ptr [rax + rax*4 + 4], edx; jne 0x41220; mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x00000000000e5137: cmp dword ptr [rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5007: cmp dword ptr [rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e51f8: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000087de4: cmp dword ptr [rax], 0xa; je 0x87df8; cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000012148b: cmp dword ptr [rax], eax; je 0x121490; ret; 
0x000000000015398d: cmp dword ptr [rax], ebx; je 0x1539a0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094eab: cmp dword ptr [rbp + rdx], esi; ret; 
0x0000000000121e5b: cmp dword ptr [rbp - 0x76b7fff4], esp; adc byte ptr [r10 + 0x13], r14b; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000099f4e: cmp dword ptr [rbx + 0x154f222d], eax; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000000949f6: cmp dword ptr [rbx + 0x159e022d], eax; add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000098843: cmp dword ptr [rbx + 0x15], eax; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000127cf7: cmp dword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000085620: cmp dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000011c24f: cmp dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x000000000015ce96: cmp dword ptr [rbx + 0x947ba2d], eax; add byte ptr [rcx], al; mov rax, r8; pop rbp; ret; 
0x00000000000a2053: cmp dword ptr [rbx], 0; je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x0000000000048333: cmp dword ptr [rbx], edi; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000122274: cmp dword ptr [rcx + 0x10], edx; jb 0x122281; seta al; movzx eax, al; neg eax; ret; 
0x00000000001144eb: cmp dword ptr [rcx + 0xd], 0xc76400; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000113533: cmp dword ptr [rcx - 0x2708fff3], ecx; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bcccc: cmp dword ptr [rcx], edx; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x0000000000093e99: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008d309: cmp dword ptr [rdi + 0x10], eax; jb 0x8d340; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d769: cmp dword ptr [rdi + 0x10], eax; jb 0x8d7b0; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000001028ac: cmp dword ptr [rdi + 0x10], edx; jb 0x1028b9; setne al; movzx eax, al; neg eax; ret; 
0x0000000000102a7d: cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x000000000008cd2a: cmp dword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x0000000000091e85: cmp dword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x00000000000cef0b: cmp dword ptr [rdi + 0xc], ecx; jne 0xcf080; xor eax, eax; ret; 
0x00000000001028cc: cmp dword ptr [rdi + 4], edx; ja 0x1028d7; setne al; movzx eax, al; ret; 
0x000000000009ef1f: cmp dword ptr [rdi + 8], esi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000012d0fc: cmp dword ptr [rdi], 0; je 0x12d110; ret; 
0x00000000000328ab: cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000008a721: cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x0000000000023a6f: cmp dword ptr [rdx + 0xd8], eax; jne 0x23a3b; ret; 
0x00000000000885e0: cmp dword ptr [rdx + 8], eax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000121433: cmp dword ptr [rdx - 0x2708fff4], ebp; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000092a15: cmp dword ptr [rdx], ecx; je 0x92a28; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000012da53: cmp dword ptr [rdx], esp; add byte ptr [rax], al; nop word ptr [rax + rax]; endbr64; ret; 
0x000000000009e1f5: cmp dword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x0000000000095529: cmp dword ptr [rip + 0x159961], edi; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000119911: cmp dword ptr [rsi], 0; mov rbx, rsi; je 0x119920; pop rbx; ret; 
0x00000000000e5136: cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5006: cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e51f7: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000102a03: cmp dx, 0xa; je 0x102a48; mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x0000000000102a0e: cmp dx, 2; je 0x102a18; ret; 
0x000000000015d43f: cmp dx, cx; sete al; ret; 
0x00000000000dcff4: cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x0000000000112f4d: cmp eax, -0x5f; je 0x112f58; neg eax; ret; 
0x000000000011319d: cmp eax, -0x5f; je 0x1131a8; neg eax; ret; 
0x000000000013b5e8: cmp eax, -0xb; je 0x13b5e0; pop rbx; ret; 
0x000000000009cb93: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000012218c: cmp eax, -1; je 0x122200; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x00000000001221cd: cmp eax, -1; je 0x122200; add eax, 1; mov word ptr [rdx], ax; ret; 
0x0000000000024239: cmp eax, -1; je 0x24328; add rsp, 0x98; ret; 
0x0000000000062f0e: cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x0000000000082ac4: cmp eax, -1; je 0x82ad8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000929de: cmp eax, -1; jne 0x929a3; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000160d32: cmp eax, -1; sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x000000000002fdaa: cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x0000000000055c40: cmp eax, -8; jne 0x55c30; mov rax, rdx; ret; 
0x0000000000083f3e: cmp eax, 0x10016a8; ret; 
0x000000000008ded6: cmp eax, 0x1274e9; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000e4fe4: cmp eax, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e4fb6: cmp eax, 0x138f; je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x0000000000098dad: cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa9: cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x000000000009552a: cmp eax, 0x159961; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000094a51: cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093927: cmp eax, 0x15ae94; syscall; ret; 
0x000000000009101f: cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f67: cmp eax, 0x16a814; syscall; ret; 
0x0000000000046c73: cmp eax, 0x16d861; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000d0028: cmp eax, 0x19; jg 0xd0050; mov rax, r12; pop r12; ret; 
0x0000000000047651: cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x00000000000951f8: cmp eax, 0x2000000; jbe 0x95200; ret; 
0x00000000000e4fbf: cmp eax, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x000000000010dac7: cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x000000000011f9d8: cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x0000000000062f2a: cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000000098094: cmp eax, 0x31450015; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000015ff9e: cmp eax, 0x38c48348; ret; 
0x0000000000094e48: cmp eax, 0x408; jbe 0x94e50; ret; 
0x000000000010c490: cmp eax, 0x48b48ff; and al, 0x48; add esp, 0x28; ret; 
0x0000000000098daf: cmp eax, 0x50f0015; pop rbp; ret; 
0x00000000000e50e1: cmp eax, 0x517b; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e5111: cmp eax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000198ce1: cmp eax, 0x55b1a; syscall; pop rbx; ret; 
0x0000000000198e01: cmp eax, 0x5632a; call 0x22330; pop rbx; mov qword ptr [rip + 0x56319], 0; ret; 
0x0000000000199011: cmp eax, 0x57502; syscall; pop rbp; ret; 
0x00000000000e4f45: cmp eax, 0x58465342; jne 0xe4f50; ret; 
0x00000000000e509d: cmp eax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000344e7: cmp eax, 0x64001b7a; add rax, qword ptr [0]; ret; 
0x00000000000d012b: cmp eax, 0x71; jg 0xd0150; lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x00000000000d012a: cmp eax, 0x7f71f883; and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x00000000000a28cd: cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000000062f0a: cmp eax, 0x83c08941; clc; push qword ptr [rbp + rcx + 0x44]; mov eax, eax; ret; 
0x00000000000c3f71: cmp eax, 0x850f0c00; ret; 
0x0000000000172d7f: cmp eax, 0x8b000287; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000012084f: cmp eax, 0x8b48fff7; and al, 8; add rsp, 0x28; ret; 
0x0000000000120915: cmp eax, 0x8b48fff7; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x00000000000ee2dd: cmp eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x000000000015e105: cmp eax, 0x8e326; test edi, edi; jns 0x15e110; ret; 
0x0000000000095258: cmp eax, 0xa0; jbe 0x95260; ret; 
0x0000000000142681: cmp eax, 0xae392; syscall; pop rbp; ret; 
0x00000000000e50cb: cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000011892f: cmp eax, 0xd3a14; ret; 
0x0000000000117e4a: cmp eax, 0xd7a01; syscall; ret; 
0x00000000001175b6: cmp eax, 0xd81ad; test rdi, rdi; jne 0x1175d0; mov eax, 1; ret; 
0x00000000001500a1: cmp eax, 0xf1890006; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000000c6a97: cmp eax, 0xff; je 0xc6aa3; mov eax, r8d; ret; 
0x0000000000094e88: cmp eax, 0xffff; jbe 0x94e90; ret; 
0x000000000010c38b: cmp eax, 0xfffff000; ja 0x10c3f0; ret; 
0x000000000010c43b: cmp eax, 0xfffff000; ja 0x10c4a0; ret; 
0x000000000010d5d3: cmp eax, 0xfffff000; ja 0x10d59a; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d6db: cmp eax, 0xfffff000; ja 0x10d6e8; ret; 
0x000000000010d73a: cmp eax, 0xfffff000; ja 0x10d748; ret; 
0x000000000010d79b: cmp eax, 0xfffff000; ja 0x10d7a8; ret; 
0x000000000010db23: cmp eax, 0xfffff000; ja 0x10db30; ret; 
0x000000000010db86: cmp eax, 0xfffff000; ja 0x10db90; ret; 
0x000000000010dbe0: cmp eax, 0xfffff000; ja 0x10dbf0; ret; 
0x000000000010de19: cmp eax, 0xfffff000; ja 0x10de28; ret; 
0x000000000010e1f3: cmp eax, 0xfffff000; ja 0x10e250; ret; 
0x000000000010e298: cmp eax, 0xfffff000; ja 0x10e2f0; ret; 
0x000000000010e32c: cmp eax, 0xfffff000; ja 0x10e338; ret; 
0x000000000010e35c: cmp eax, 0xfffff000; ja 0x10e368; ret; 
0x000000000010ea38: cmp eax, 0xfffff000; ja 0x10ea80; ret; 
0x000000000010ebb8: cmp eax, 0xfffff000; ja 0x10ec00; ret; 
0x0000000000112b88: cmp eax, 0xfffff000; ja 0x112be0; ret; 
0x000000000011320b: cmp eax, 0xfffff000; ja 0x113288; ret; 
0x00000000001132cf: cmp eax, 0xfffff000; ja 0x1132e0; ret; 
0x0000000000113314: cmp eax, 0xfffff000; ja 0x113320; ret; 
0x000000000011341b: cmp eax, 0xfffff000; ja 0x113480; ret; 
0x00000000001134cb: cmp eax, 0xfffff000; ja 0x113530; ret; 
0x000000000011356c: cmp eax, 0xfffff000; ja 0x113578; ret; 
0x0000000000113829: cmp eax, 0xfffff000; ja 0x113838; ret; 
0x000000000011385f: cmp eax, 0xfffff000; ja 0x113870; ret; 
0x000000000011389c: cmp eax, 0xfffff000; ja 0x1138a8; ret; 
0x0000000000113d82: cmp eax, 0xfffff000; ja 0x113dd8; ret; 
0x0000000000113f95: cmp eax, 0xfffff000; ja 0x113fa0; ret; 
0x0000000000113fd6: cmp eax, 0xfffff000; ja 0x113fe0; ret; 
0x0000000000114608: cmp eax, 0xfffff000; ja 0x114660; ret; 
0x00000000001146a8: cmp eax, 0xfffff000; ja 0x114700; ret; 
0x000000000011474e: cmp eax, 0xfffff000; ja 0x1147b8; ret; 
0x000000000011480e: cmp eax, 0xfffff000; ja 0x114878; ret; 
0x000000000011519b: cmp eax, 0xfffff000; ja 0x115210; ret; 
0x00000000001153c8: cmp eax, 0xfffff000; ja 0x115410; ret; 
0x0000000000115488: cmp eax, 0xfffff000; ja 0x1154d0; ret; 
0x0000000000115548: cmp eax, 0xfffff000; ja 0x115550; ret; 
0x0000000000116ccc: cmp eax, 0xfffff000; ja 0x116cd8; ret; 
0x0000000000116eb1: cmp eax, 0xfffff000; ja 0x116ec0; ret; 
0x0000000000116eec: cmp eax, 0xfffff000; ja 0x116ef8; ret; 
0x0000000000116f1c: cmp eax, 0xfffff000; ja 0x116f28; ret; 
0x0000000000118b07: cmp eax, 0xfffff000; ja 0x118b70; pop rbx; pop rbp; ret; 
0x0000000000118c08: cmp eax, 0xfffff000; ja 0x118c60; ret; 
0x000000000011c6e3: cmp eax, 0xfffff000; ja 0x11c6f0; ret; 
0x000000000011f3bc: cmp eax, 0xfffff000; ja 0x11f3c8; ret; 
0x000000000011f461: cmp eax, 0xfffff000; ja 0x11f4d8; ret; 
0x000000000011f514: cmp eax, 0xfffff000; ja 0x11f520; ret; 
0x000000000011f64b: cmp eax, 0xfffff000; ja 0x11f6b0; ret; 
0x000000000011f6fb: cmp eax, 0xfffff000; ja 0x11f760; ret; 
0x000000000011f7ab: cmp eax, 0xfffff000; ja 0x11f810; ret; 
0x000000000011f85b: cmp eax, 0xfffff000; ja 0x11f8d8; ret; 
0x000000000011f928: cmp eax, 0xfffff000; ja 0x11f980; ret; 
0x000000000011f9f0: cmp eax, 0xfffff000; ja 0x11fa28; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011fa54: cmp eax, 0xfffff000; ja 0x11fa60; ret; 
0x00000000001202f8: cmp eax, 0xfffff000; ja 0x120350; ret; 
0x00000000001203c8: cmp eax, 0xfffff000; ja 0x120420; ret; 
0x0000000000120531: cmp eax, 0xfffff000; ja 0x1205a0; ret; 
0x00000000001205eb: cmp eax, 0xfffff000; ja 0x120660; ret; 
0x00000000001206a8: cmp eax, 0xfffff000; ja 0x120700; ret; 
0x0000000000120751: cmp eax, 0xfffff000; ja 0x1207c0; ret; 
0x0000000000120808: cmp eax, 0xfffff000; ja 0x120860; ret; 
0x00000000001208ab: cmp eax, 0xfffff000; ja 0x120928; ret; 
0x0000000000120d0b: cmp eax, 0xfffff000; ja 0x120d70; ret; 
0x0000000000120dbb: cmp eax, 0xfffff000; ja 0x120e28; ret; 
0x0000000000120e6b: cmp eax, 0xfffff000; ja 0x120ed0; ret; 
0x00000000001210db: cmp eax, 0xfffff000; ja 0x121140; ret; 
0x000000000012118b: cmp eax, 0xfffff000; ja 0x121200; ret; 
0x000000000012123c: cmp eax, 0xfffff000; ja 0x121248; ret; 
0x000000000012126c: cmp eax, 0xfffff000; ja 0x121278; ret; 
0x00000000001212ac: cmp eax, 0xfffff000; ja 0x1212b8; ret; 
0x000000000012137f: cmp eax, 0xfffff000; ja 0x121390; ret; 
0x00000000001213bc: cmp eax, 0xfffff000; ja 0x1213c8; ret; 
0x00000000001213ec: cmp eax, 0xfffff000; ja 0x1213f8; ret; 
0x000000000012141f: cmp eax, 0xfffff000; ja 0x121430; ret; 
0x000000000012145c: cmp eax, 0xfffff000; ja 0x121468; ret; 
0x000000000012e9ce: cmp eax, 0xfffff000; ja 0x12e9e0; ret; 
0x0000000000043411: cmp eax, 0xfffff000; ja 0x43420; ret; 
0x000000000004345d: cmp eax, 0xfffff000; ja 0x434b0; ret; 
0x0000000000048228: cmp eax, 0xfffff000; ja 0x48280; ret; 
0x0000000000062e8c: cmp eax, 0xfffff000; ja 0x62e98; ret; 
0x0000000000062ebf: cmp eax, 0xfffff000; ja 0x62ed0; ret; 
0x00000000000d0dcc: cmp eax, 0xfffff000; ja 0xd0dd8; ret; 
0x00000000000d0ee1: cmp eax, 0xfffff000; ja 0xd0ef0; ret; 
0x00000000000d1081: cmp eax, 0xfffff000; ja 0xd1090; ret; 
0x00000000000dd078: cmp eax, 0xfffff000; ja 0xdd047; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd0f8: cmp eax, 0xfffff000; ja 0xdd0c7; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd126: cmp eax, 0xfffff000; ja 0xdd130; ret; 
0x00000000000de2bc: cmp eax, 0xfffff000; ja 0xde2c8; ret; 
0x00000000000e2c3b: cmp eax, 0xfffff000; ja 0xe2ca0; ret; 
0x00000000000e2cee: cmp eax, 0xfffff000; ja 0xe2d60; ret; 
0x00000000000e2e48: cmp eax, 0xfffff000; ja 0xe2e80; ret; 
0x0000000000112f46: cmp eax, 0xfffff000; jbe 0x112f68; cmp eax, -0x5f; je 0x112f58; neg eax; ret; 
0x0000000000113196: cmp eax, 0xfffff000; jbe 0x1131b8; cmp eax, -0x5f; je 0x1131a8; neg eax; ret; 
0x0000000000112d12: cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x000000000010265c: cmp eax, 0xfffff001; jae 0x102664; ret; 
0x000000000010268c: cmp eax, 0xfffff001; jae 0x102694; ret; 
0x00000000001026bc: cmp eax, 0xfffff001; jae 0x1026c4; ret; 
0x00000000001026ec: cmp eax, 0xfffff001; jae 0x1026f4; ret; 
0x000000000010271c: cmp eax, 0xfffff001; jae 0x102724; ret; 
0x000000000010274c: cmp eax, 0xfffff001; jae 0x102754; ret; 
0x000000000010277c: cmp eax, 0xfffff001; jae 0x102784; ret; 
0x00000000001027ac: cmp eax, 0xfffff001; jae 0x1027b4; ret; 
0x000000000010d5fc: cmp eax, 0xfffff001; jae 0x10d604; ret; 
0x000000000010dc2c: cmp eax, 0xfffff001; jae 0x10dc34; ret; 
0x000000000010dc5c: cmp eax, 0xfffff001; jae 0x10dc64; ret; 
0x000000000010dd8c: cmp eax, 0xfffff001; jae 0x10dd94; ret; 
0x000000000010ddbc: cmp eax, 0xfffff001; jae 0x10ddc4; ret; 
0x000000000010de7c: cmp eax, 0xfffff001; jae 0x10de84; ret; 
0x000000000010deac: cmp eax, 0xfffff001; jae 0x10deb4; ret; 
0x000000000010e79c: cmp eax, 0xfffff001; jae 0x10e7a4; ret; 
0x000000000010eabc: cmp eax, 0xfffff001; jae 0x10eac4; ret; 
0x000000000010eaec: cmp eax, 0xfffff001; jae 0x10eaf4; ret; 
0x000000000010eb1c: cmp eax, 0xfffff001; jae 0x10eb24; ret; 
0x000000000010eb4c: cmp eax, 0xfffff001; jae 0x10eb54; ret; 
0x000000000010eb7c: cmp eax, 0xfffff001; jae 0x10eb84; ret; 
0x000000000010ec3c: cmp eax, 0xfffff001; jae 0x10ec44; ret; 
0x000000000010ec6c: cmp eax, 0xfffff001; jae 0x10ec74; ret; 
0x000000000010f58c: cmp eax, 0xfffff001; jae 0x10f594; ret; 
0x000000000010f5bc: cmp eax, 0xfffff001; jae 0x10f5c4; ret; 
0x000000000010f5ec: cmp eax, 0xfffff001; jae 0x10f5f4; ret; 
0x000000000010f61f: cmp eax, 0xfffff001; jae 0x10f627; ret; 
0x000000000010fddc: cmp eax, 0xfffff001; jae 0x10fde4; ret; 
0x000000000010fe0f: cmp eax, 0xfffff001; jae 0x10fe17; ret; 
0x000000000010fe3c: cmp eax, 0xfffff001; jae 0x10fe44; ret; 
0x000000000010fe6c: cmp eax, 0xfffff001; jae 0x10fe74; ret; 
0x000000000010fe9c: cmp eax, 0xfffff001; jae 0x10fea4; ret; 
0x000000000010fecf: cmp eax, 0xfffff001; jae 0x10fed7; ret; 
0x000000000010fefc: cmp eax, 0xfffff001; jae 0x10ff04; ret; 
0x000000000010ff2c: cmp eax, 0xfffff001; jae 0x10ff34; ret; 
0x000000000010ff5c: cmp eax, 0xfffff001; jae 0x10ff64; ret; 
0x00000000001131cf: cmp eax, 0xfffff001; jae 0x1131d7; ret; 
0x000000000011400c: cmp eax, 0xfffff001; jae 0x114014; ret; 
0x000000000011440c: cmp eax, 0xfffff001; jae 0x114414; ret; 
0x00000000001145cc: cmp eax, 0xfffff001; jae 0x1145d4; ret; 
0x000000000011500c: cmp eax, 0xfffff001; jae 0x115014; ret; 
0x000000000011515c: cmp eax, 0xfffff001; jae 0x115164; ret; 
0x000000000011535c: cmp eax, 0xfffff001; jae 0x115364; ret; 
0x000000000011538c: cmp eax, 0xfffff001; jae 0x115394; ret; 
0x000000000011544c: cmp eax, 0xfffff001; jae 0x115454; ret; 
0x000000000011550c: cmp eax, 0xfffff001; jae 0x115514; ret; 
0x000000000011584c: cmp eax, 0xfffff001; jae 0x115854; ret; 
0x000000000011587c: cmp eax, 0xfffff001; jae 0x115884; ret; 
0x00000000001158ac: cmp eax, 0xfffff001; jae 0x1158b4; ret; 
0x000000000011895e: cmp eax, 0xfffff001; jae 0x118966; ret; 
0x0000000000118b9c: cmp eax, 0xfffff001; jae 0x118ba4; ret; 
0x0000000000118bcc: cmp eax, 0xfffff001; jae 0x118bd4; ret; 
0x0000000000118c9c: cmp eax, 0xfffff001; jae 0x118ca4; ret; 
0x0000000000118ccc: cmp eax, 0xfffff001; jae 0x118cd4; ret; 
0x0000000000118cff: cmp eax, 0xfffff001; jae 0x118d07; ret; 
0x0000000000118d2c: cmp eax, 0xfffff001; jae 0x118d34; ret; 
0x0000000000118d5c: cmp eax, 0xfffff001; jae 0x118d64; ret; 
0x0000000000118d8c: cmp eax, 0xfffff001; jae 0x118d94; ret; 
0x0000000000118dbc: cmp eax, 0xfffff001; jae 0x118dc4; ret; 
0x000000000011cfbf: cmp eax, 0xfffff001; jae 0x11cfc7; ret; 
0x000000000011cfec: cmp eax, 0xfffff001; jae 0x11cff4; ret; 
0x000000000011d01c: cmp eax, 0xfffff001; jae 0x11d024; ret; 
0x000000000011d04f: cmp eax, 0xfffff001; jae 0x11d057; ret; 
0x000000000011d07f: cmp eax, 0xfffff001; jae 0x11d087; ret; 
0x000000000011d0ac: cmp eax, 0xfffff001; jae 0x11d0b4; ret; 
0x000000000011d0df: cmp eax, 0xfffff001; jae 0x11d0e7; ret; 
0x000000000011d10c: cmp eax, 0xfffff001; jae 0x11d114; ret; 
0x000000000011d13c: cmp eax, 0xfffff001; jae 0x11d144; ret; 
0x000000000011d16f: cmp eax, 0xfffff001; jae 0x11d177; ret; 
0x000000000011d19c: cmp eax, 0xfffff001; jae 0x11d1a4; ret; 
0x000000000011d1cf: cmp eax, 0xfffff001; jae 0x11d1d7; ret; 
0x000000000011f20c: cmp eax, 0xfffff001; jae 0x11f214; ret; 
0x000000000011f23c: cmp eax, 0xfffff001; jae 0x11f244; ret; 
0x000000000011f38c: cmp eax, 0xfffff001; jae 0x11f394; ret; 
0x000000000011f3ec: cmp eax, 0xfffff001; jae 0x11f3f4; ret; 
0x000000000011f41c: cmp eax, 0xfffff001; jae 0x11f424; ret; 
0x000000000011f54c: cmp eax, 0xfffff001; jae 0x11f554; ret; 
0x000000000011f5df: cmp eax, 0xfffff001; jae 0x11f5e7; ret; 
0x000000000011f60c: cmp eax, 0xfffff001; jae 0x11f614; ret; 
0x000000000011fb2c: cmp eax, 0xfffff001; jae 0x11fb34; ret; 
0x000000000011fb5c: cmp eax, 0xfffff001; jae 0x11fb64; ret; 
0x000000000011fb9f: cmp eax, 0xfffff001; jae 0x11fba7; ret; 
0x000000000011fbcc: cmp eax, 0xfffff001; jae 0x11fbd4; ret; 
0x000000000011fbfc: cmp eax, 0xfffff001; jae 0x11fc04; ret; 
0x000000000011fc2c: cmp eax, 0xfffff001; jae 0x11fc34; ret; 
0x000000000011fc5c: cmp eax, 0xfffff001; jae 0x11fc64; ret; 
0x000000000011fc8c: cmp eax, 0xfffff001; jae 0x11fc94; ret; 
0x000000000011fcbc: cmp eax, 0xfffff001; jae 0x11fcc4; ret; 
0x000000000011fcec: cmp eax, 0xfffff001; jae 0x11fcf4; ret; 
0x000000000011fd1f: cmp eax, 0xfffff001; jae 0x11fd27; ret; 
0x000000000011fd4c: cmp eax, 0xfffff001; jae 0x11fd54; ret; 
0x000000000011fd7f: cmp eax, 0xfffff001; jae 0x11fd87; ret; 
0x000000000011fdac: cmp eax, 0xfffff001; jae 0x11fdb4; ret; 
0x000000000011fddc: cmp eax, 0xfffff001; jae 0x11fde4; ret; 
0x000000000011fe0c: cmp eax, 0xfffff001; jae 0x11fe14; ret; 
0x000000000011fe3c: cmp eax, 0xfffff001; jae 0x11fe44; ret; 
0x000000000011fe6c: cmp eax, 0xfffff001; jae 0x11fe74; ret; 
0x000000000011fe9f: cmp eax, 0xfffff001; jae 0x11fea7; ret; 
0x000000000011fecf: cmp eax, 0xfffff001; jae 0x11fed7; ret; 
0x000000000011fefc: cmp eax, 0xfffff001; jae 0x11ff04; ret; 
0x000000000011ff2c: cmp eax, 0xfffff001; jae 0x11ff34; ret; 
0x000000000011ff5f: cmp eax, 0xfffff001; jae 0x11ff67; ret; 
0x000000000011ff8f: cmp eax, 0xfffff001; jae 0x11ff97; ret; 
0x000000000011ffbf: cmp eax, 0xfffff001; jae 0x11ffc7; ret; 
0x000000000011ffec: cmp eax, 0xfffff001; jae 0x11fff4; ret; 
0x000000000012001c: cmp eax, 0xfffff001; jae 0x120024; ret; 
0x000000000012004c: cmp eax, 0xfffff001; jae 0x120054; ret; 
0x000000000012007c: cmp eax, 0xfffff001; jae 0x120084; ret; 
0x00000000001200af: cmp eax, 0xfffff001; jae 0x1200b7; ret; 
0x00000000001200dc: cmp eax, 0xfffff001; jae 0x1200e4; ret; 
0x000000000012010c: cmp eax, 0xfffff001; jae 0x120114; ret; 
0x000000000012013f: cmp eax, 0xfffff001; jae 0x120147; ret; 
0x000000000012016c: cmp eax, 0xfffff001; jae 0x120174; ret; 
0x000000000012019f: cmp eax, 0xfffff001; jae 0x1201a7; ret; 
0x00000000001201cf: cmp eax, 0xfffff001; jae 0x1201d7; ret; 
0x00000000001201fc: cmp eax, 0xfffff001; jae 0x120204; ret; 
0x000000000012022c: cmp eax, 0xfffff001; jae 0x120234; ret; 
0x000000000012025c: cmp eax, 0xfffff001; jae 0x120264; ret; 
0x000000000012029c: cmp eax, 0xfffff001; jae 0x1202a4; ret; 
0x000000000012038c: cmp eax, 0xfffff001; jae 0x120394; ret; 
0x000000000012045c: cmp eax, 0xfffff001; jae 0x120464; ret; 
0x000000000012048c: cmp eax, 0xfffff001; jae 0x120494; ret; 
0x00000000001204bf: cmp eax, 0xfffff001; jae 0x1204c7; ret; 
0x00000000001204ec: cmp eax, 0xfffff001; jae 0x1204f4; ret; 
0x000000000012096f: cmp eax, 0xfffff001; jae 0x120977; ret; 
0x000000000012099c: cmp eax, 0xfffff001; jae 0x1209a4; ret; 
0x00000000001209cc: cmp eax, 0xfffff001; jae 0x1209d4; ret; 
0x00000000001209ff: cmp eax, 0xfffff001; jae 0x120a07; ret; 
0x00000000000433dc: cmp eax, 0xfffff001; jae 0x433e4; ret; 
0x00000000000439cc: cmp eax, 0xfffff001; jae 0x439d4; ret; 
0x0000000000054f02: cmp eax, 0xfffff001; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41bc: cmp eax, 0xfffff001; jae 0xd41c4; ret; 
0x00000000000d41ec: cmp eax, 0xfffff001; jae 0xd41f4; ret; 
0x00000000000e2b4c: cmp eax, 0xfffff001; jae 0xe2b54; ret; 
0x00000000000e2d9c: cmp eax, 0xfffff001; jae 0xe2da4; ret; 
0x00000000000e317c: cmp eax, 0xfffff001; jae 0xe3184; ret; 
0x00000000000e412c: cmp eax, 0xfffff001; jae 0xe4134; ret; 
0x00000000000e437c: cmp eax, 0xfffff001; jae 0xe4384; ret; 
0x00000000000e43ac: cmp eax, 0xfffff001; jae 0xe43b4; ret; 
0x00000000000e440c: cmp eax, 0xfffff001; jae 0xe4414; ret; 
0x00000000000e443c: cmp eax, 0xfffff001; jae 0xe4444; ret; 
0x00000000000e446c: cmp eax, 0xfffff001; jae 0xe4474; ret; 
0x00000000000e449c: cmp eax, 0xfffff001; jae 0xe44a4; ret; 
0x00000000000ac7af: cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000000189e11: cmp eax, 1; ja 0x189c20; je 0x189c10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018ab01: cmp eax, 1; ja 0x18a7d0; je 0x18a7c0; vzeroupper; ret; 
0x000000000018a9dd: cmp eax, 1; ja 0x18a8b0; je 0x18a8a0; vzeroupper; ret; 
0x000000000018b70d: cmp eax, 1; ja 0x18b5e0; je 0x18b5d0; vzeroupper; ret; 
0x00000000000a2222: cmp eax, 1; ja 0xa2200; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c546: cmp eax, 1; je 0x13c558; test eax, eax; jne 0x13c568; mov eax, r8d; ret; 
0x00000000001484bb: cmp eax, 1; je 0x148510; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x0000000000148517: cmp eax, 1; je 0x148530; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bc6f1: cmp eax, 1; je 0xbc700; cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x0000000000117e30: cmp eax, 1; jg 0x117e36; ret; 
0x00000000000947f2: cmp eax, 1; sbb eax, eax; add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x0000000000157f87: cmp eax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x00000000000bc6f6: cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x0000000000156015: cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000014896d: cmp eax, 3; jbe 0x148980; mov eax, 2; ret; 
0x00000000000f1f92: cmp eax, 3; je 0xf1ff0; xor eax, eax; pop rbp; ret; 
0x000000000004830a: cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x000000000009466e: cmp eax, 4; je 0x94674; ret; 
0x0000000000094c8b: cmp eax, 4; sete al; movzx eax, al; sub eax, 2; add rsp, 8; ret; 
0x000000000005b6aa: cmp eax, 9; ja 0x5b680; mov rax, r8; ret; 
0x00000000000e3175: cmp eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000a2054: cmp eax, dword ptr [rax]; je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086034: cmp eax, dword ptr [rbx + 0x445b012f]; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000013185c: cmp eax, dword ptr [rbx + 0xbe77c2d]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000125b14: cmp eax, dword ptr [rbx + 0xca1f02d]; add byte ptr [rcx], al; mov eax, r8d; add rsp, 8; ret; 
0x0000000000113b04: cmp eax, dword ptr [rcx - 0x77]; ret; 
0x0000000000189a31: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000121e59: cmp eax, dword ptr [rip + 0xca539]; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000121f16: cmp eax, dword ptr [rip + 0xcdb34]; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000cef8e: cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefa3: cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000cefb8: cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cefd3: cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cefee: cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf003: cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cf018: cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf023: cmp eax, dword ptr [rsi + 0x2c]; jne 0xcf080; ret; 
0x00000000000cf03e: cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000cf053: cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x00000000000cf068: cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000cf073: cmp eax, dword ptr [rsi + 0x3c]; jne 0xcf080; ret; 
0x00000000000ec3e8: cmp eax, dword ptr [rsi + 0x40]; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000cef73: cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x00000000000cef43: cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x00000000000cef58: cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x0000000000192cea: cmp eax, dword ptr [rsi - 0x10]; jne 0x192e20; ret; 
0x0000000000192d03: cmp eax, dword ptr [rsi - 0xc]; jne 0x192e20; ret; 
0x0000000000192d33: cmp eax, dword ptr [rsi - 4]; jne 0x192e20; ret; 
0x0000000000192e13: cmp eax, dword ptr [rsi - 4]; jne 0x192e20; xor eax, eax; ret; 
0x0000000000192d18: cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x000000000015088d: cmp eax, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000cef2d: cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000e4f57: cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x00000000000cf18e: cmp eax, eax; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x0000000000086e18: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916e0: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x00000000000cf347: cmp eax, ecx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x000000000008803e: cmp eax, ecx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000000a88a2: cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000001925e2: cmp eax, ecx; jne 0x1927f0; xor eax, eax; ret; 
0x000000000019274a: cmp eax, ecx; jne 0x192805; xor eax, eax; ret; 
0x00000000000cf158: cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x000000000012f633: cmp eax, ecx; or eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000192803: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000a87e7: cmp eax, ecx; setne r9b; test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x000000000013bb2c: cmp eax, edi; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x000000000005b39e: cmp eax, edi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000012ed7d: cmp eax, edx; ja 0x12ed92; lea rdx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x000000000012d075: cmp eax, edx; jae 0x12d088; cmp qword ptr [rax + 8], rdi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x0000000000157857: cmp eax, edx; jae 0x157868; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000009397f: cmp eax, edx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x0000000000153514: cmp eax, edx; je 0x15351b; mov r8, rax; mov rax, r8; pop rbx; ret; 
0x00000000001535d4: cmp eax, edx; je 0x1535df; lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a4: cmp eax, edx; je 0x1536af; lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153774: cmp eax, edx; je 0x15377f; lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x000000000013bb6a: cmp eax, edx; jne 0x13bb40; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000000a87b1: cmp eax, edx; jne 0xa87a0; mov rax, r8; ret; 
0x00000000000bcd07: cmp eax, edx; lea rdx, [rip + 0xcf500]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc847: cmp eax, edx; lea rdx, [rip + 0xcfc90]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f7: cmp eax, edx; lea rdx, [rip + 0xcff30]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae7: cmp eax, edx; lea rdx, [rip + 0xd05a0]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc807: cmp eax, edx; lea rdx, [rip + 0xd0650]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc957: cmp eax, edx; lea rdx, [rip + 0xd0920]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd7: cmp eax, edx; lea rdx, [rip + 0xdbfa0]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c77: cmp eax, edx; lea rdx, [rip + 0xe2db0]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f7: cmp eax, edx; lea rdx, [rip + 0xe4360]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb7: cmp eax, edx; lea rdx, [rip + 0xe6880]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f807: cmp eax, edx; lea rdx, [rip + 0xe8f20]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f657: cmp eax, edx; lea rdx, [rip + 0xe92a0]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f697: cmp eax, edx; lea rdx, [rip + 0xe9400]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000e5065: cmp eax, edx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000033c35: cmp eax, edx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000a8923: cmp eax, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x0000000000087dea: cmp eax, esi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000012787d: cmp eax, esi; jb 0x127890; mov eax, 1; ret; 
0x000000000013c6f1: cmp eax, esi; jb 0x13c6dd; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000160fc2: cmp eax, esi; jb 0x160fa5; mov qword ptr [rip + 0x8decb], r8; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x00000000000a877d: cmp eax, esi; jne 0xa8770; mov rax, r8; ret; 
0x00000000000cf18d: cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000a1fdb: cmp ebp, eax; jbe 0xa2001; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006d067: cmp ebp, eax; ret; 
0x00000000000dd133: cmp ebp, ebp; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000198dbd: cmp ebp, ebx; jne 0x198db0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000151b5a: cmp ebp, ebx; ret; 
0x0000000000162369: cmp ebp, esi; dec dword ptr [rax - 0x77]; ret; 
0x000000000009460a: cmp ebx, 0xa; je 0x94610; ret; 
0x00000000000ee2d9: cmp ebx, 0xa; je 0xee31b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000048284: cmp ebx, dword ptr [rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000048304: cmp ebx, dword ptr [rdx]; add byte ptr [rbx + rcx*4], ah; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000099eac: cmp ebx, ebp; jne 0x99e90; pop rbx; pop rbp; pop r12; ret; 
0x000000000013f29d: cmp ebx, ecx; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x00000000000dd815: cmp ebx, esp; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x000000000010db33: cmp ebx, esp; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000056524: cmp ecx, -1; jne 0x56518; mov rax, rdx; ret; 
0x000000000014b56c: cmp ecx, 0x3d8d48ff; pop rsi; ret; 
0x0000000000052941: cmp ecx, 0x40; je 0x52953; mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x000000000004234c: cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000102aa2: cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000a15f5: cmp ecx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x0000000000057be6: cmp ecx, 0xe0757fff; mov eax, 1; ret; 
0x000000000015d454: cmp ecx, 3; jbe 0x15d460; ret; 
0x000000000009f350: cmp ecx, 9; jbe 0x9f338; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000015fa26: cmp ecx, dword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x0000000000024d88: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000102a3c: cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x000000000018f9b4: cmp ecx, dword ptr [rdi - 4]; jne 0x18fbe6; xor eax, eax; ret; 
0x00000000000860ba: cmp ecx, dword ptr [rdx + 0x28]; jae 0x860d0; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086261: cmp ecx, dword ptr [rdx + 0x28]; jae 0x86278; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000018c6e9: cmp ecx, dword ptr [rdx + rdi + 0x20]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c719: cmp ecx, dword ptr [rdx + rdi + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb8f: cmp ecx, dword ptr [rdx + rdi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000009c1e6: cmp ecx, dword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009c1dd: cmp ecx, dword ptr [rip + 0x152cb5]; jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000018c54a: cmp ecx, dword ptr [rsi + rdx + 0x20]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c56a: cmp ecx, dword ptr [rsi + rdx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c58a: cmp ecx, dword ptr [rsi + rdx + 0x60]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c8af: cmp ecx, dword ptr [rsi + rdx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c9d6: cmp ecx, dword ptr [rsi + rdx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018cd94: cmp ecx, dword ptr [rsi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018c717: cmp ecx, dword ptr ds:[rdx + rdi + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb8e: cmp ecx, dword ptr ds:[rdx + rdi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018e965: cmp ecx, eax; jne 0x18ed93; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e40b: cmp ecx, eax; jne 0x18ed93; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e35f: cmp ecx, eax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018e456: cmp ecx, eax; jne 0x18ed9f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e387: cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x000000000018e658: cmp ecx, eax; jne 0x18edaa; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018f98f: cmp ecx, eax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000018fbdf: cmp ecx, eax; jne 0x18fbe6; xor eax, eax; ret; 
0x00000000000cf16c: cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x0000000000055be8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000000a8850: cmp ecx, edx; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x0000000000121028: cmp ecx, edx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000010ffa4: cmp ecx, edx; seta al; sbb eax, 0; ret; 
0x0000000000092a1a: cmp ecx, esi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x00000000000a8854: cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a88d0: cmp ecx, esi; jne 0xa88c0; ret; 
0x0000000000120fda: cmp edi, 0x12; ja 0x120fec; movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012fc05: cmp edi, 0x3ff; ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x000000000012bfb4: cmp edi, 0x56; je 0x12bfc0; mov eax, 7; ret; 
0x00000000000d4245: cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x000000000013bee5: cmp edi, 0xa; je 0x13bf2f; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013beea: cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013bf0f: cmp edi, 5; mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x0000000000122e76: cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x0000000000149499: cmp edi, dword ptr [rdx + 0x60]; ja 0x1494b0; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000018c83d: cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c6b6: cmp edi, dword ptr [rdx + rcx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb4c: cmp edi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x00000000001144be: cmp edi, eax; ja 0x1144e8; xor eax, eax; ret; 
0x00000000000482f5: cmp edi, eax; jb 0x482d5; xor eax, eax; ret; 
0x000000000005b333: cmp edi, eax; jbe 0x5b32a; mov rax, r10; ret; 
0x000000000005ea21: cmp edi, ecx; ja 0x5ea08; mov eax, r8d; ret; 
0x000000000018b958: cmp edi, ecx; jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001906f3: cmp edi, ecx; jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbed: cmp edi, ecx; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbb5b: cmp edi, edx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011d226: cmp edi, edx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x000000000010d3e9: cmp edi, esi; ja 0x10d3d8; mov eax, r8d; ret; 
0x0000000000094c67: cmp edi, esi; sete al; ret; 
0x00000000000e51be: cmp edx, 0x1badface; setne al; ret; 
0x00000000000e51d9: cmp edx, 0x1cd1; setne al; ret; 
0x00000000000bbfa3: cmp edx, 0x20; ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf23: cmp edx, 0x20; ja 0xbbfbc; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000d4235: cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x000000000009471a: cmp edx, 0x2a; jne 0x94700; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000e51d1: cmp edx, 0x2f; je 0xe51ea; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000018bdab: cmp edx, 0x40; ja 0x18bdbe; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bd4b: cmp edx, 0x40; ja 0x18bdc7; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000000e51b3: cmp edx, 0x414a53; je 0xe51ea; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51a6: cmp edx, 0x5346544e; setne al; ret; 
0x000000000012fd19: cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000190be1: cmp edx, 0x80; ja 0x190c74; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000102a04: cmp edx, 0xa; je 0x102a48; mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x00000000000e518a: cmp edx, 0xadf5; setne al; ret; 
0x00000000000bc136: cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000189306: cmp edx, 1; ja 0x1893a0; je 0x189390; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a0a6: cmp edx, 1; ja 0x18a140; je 0x18a130; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000102a0f: cmp edx, 2; je 0x102a18; ret; 
0x000000000008d2e9: cmp edx, 2; je 0x8d320; mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d749: cmp edx, 2; je 0x8d780; mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x00000000000bce01: cmp edx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000112a04: cmp edx, 4; ja 0x112a10; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x000000000010d346: cmp edx, 4; je 0x10d354; mov eax, 0x1c; syscall; neg eax; ret; 
0x0000000000085584: cmp edx, dword ptr [rax + 8]; jae 0x85598; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000008570e: cmp edx, dword ptr [rax + 8]; jae 0x85720; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000055037: cmp edx, dword ptr [rax]; mov eax, 0; jne 0x55043; push r10; ret; 
0x0000000000055540: cmp edx, dword ptr [rax]; mov eax, 0; jne 0x5554c; push r10; ret; 
0x000000000018bfb9: cmp edx, dword ptr [rsi + rcx]; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000018bfd4: cmp edx, dword ptr [rsi]; jne 0x18bfbc; ret; 
0x0000000000184965: cmp edx, eax; jbe 0x1849c0; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184985: cmp edx, eax; jbe 0x1849c0; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000001849a5: cmp edx, eax; jbe 0x1849c0; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184955: cmp edx, eax; jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x000000000018c415: cmp edx, eax; jbe 0x18c470; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c435: cmp edx, eax; jbe 0x18c470; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c455: cmp edx, eax; jbe 0x18c470; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c405: cmp edx, eax; jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x0000000000183d22: cmp edx, eax; jg 0x183d34; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183dd0; ret; 
0x000000000012ddfd: cmp edx, eax; jne 0x12dde8; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012ef25: cmp edx, eax; jne 0x12ef10; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000013baaa: cmp edx, eax; sbb eax, eax; ret; 
0x0000000000148eb3: cmp edx, ebp; add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x000000000005b626: cmp edx, ecx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000156011: cmp edx, ecx; je 0x156030; cmp eax, 2; sete al; movzx eax, al; ret; 
0x0000000000183aaa: cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x0000000000183d2c: cmp edx, ecx; jle 0x183dd0; ret; 
0x000000000018be46: cmp edx, ecx; jne 0x18be2b; vzeroupper; ret; 
0x0000000000190d19: cmp edx, ecx; jne 0x190cf6; vzeroupper; ret; 
0x000000000015d440: cmp edx, ecx; sete al; ret; 
0x000000000009a055: cmp edx, edi; jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000005b45d: cmp edx, edi; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x0000000000094192: cmp edx, edi; setae al; ret; 
0x00000000000a8818: cmp edx, esi; je 0xa8810; ret; 
0x00000000000bdfb7: cmp edx, esi; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x000000000013bece: cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000013c792: cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000002c132: cmp esi, 0x860f07ff; pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x00000000000dcfa4: cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x000000000008ce5d: cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000010d319: cmp esi, 2; ja 0x10d326; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000015d43a: cmp esi, 3; ja 0x15d450; cmp dx, cx; sete al; ret; 
0x000000000002fd88: cmp esi, 3; je 0x2fd90; ret; 
0x000000000009f355: cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000018cee0: cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000dd11b: cmp esi, dword ptr [rdi + 0x2a]; mov eax, 0xe3; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000001494c2: cmp esi, dword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000018b979: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018c745: cmp esi, dword ptr [rdx + rcx + 0x60]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cc0b: cmp esi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000013c650: cmp esi, eax; ja 0x13c63c; mov eax, 0xffffffff; ret; 
0x000000000013c97e: cmp esi, eax; jae 0x13c98b; shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000188c95: cmp esi, eax; jbe 0x188d10; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000013eaa7: cmp esi, ebp; dec dword ptr [rax - 0x77]; ret; 
0x000000000011d233: cmp esp, ebp; or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000008749b: cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000012d079: cmp qword ptr [rax + 8], rdi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000015398c: cmp qword ptr [rax], rbx; je 0x1539a0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127cf6: cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000a2052: cmp qword ptr [rbx], 0; je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x0000000000122273: cmp qword ptr [rcx + 0x10], rdx; jb 0x122281; seta al; movzx eax, al; neg eax; ret; 
0x0000000000093e98: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008d308: cmp qword ptr [rdi + 0x10], rax; jb 0x8d340; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d768: cmp qword ptr [rdi + 0x10], rax; jb 0x8d7b0; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008cd29: cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x0000000000091e84: cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009ef1e: cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000012d0fb: cmp qword ptr [rdi], 0; je 0x12d110; ret; 
0x000000000008a720: cmp qword ptr [rdx + 0x48], r8; cmovne eax, ecx; ret; 
0x0000000000023a6e: cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x00000000000885df: cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000009e1f4: cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x0000000000095528: cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000119910: cmp qword ptr [rsi], 0; mov rbx, rsi; je 0x119920; pop rbx; ret; 
0x0000000000055036: cmp r10, qword ptr [rax]; mov eax, 0; jne 0x55043; push r10; ret; 
0x000000000005553f: cmp r10, qword ptr [rax]; mov eax, 0; jne 0x5554c; push r10; ret; 
0x000000000005b45c: cmp r10, rdi; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x0000000000190714: cmp r10b, 1; ja 0x19076d; jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000008d2e8: cmp r10d, 2; je 0x8d320; mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d748: cmp r10d, 2; je 0x8d780; mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x00000000000832df: cmp r11b, r13b; movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000928eb: cmp r11b, r13b; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000094609: cmp r11d, 0xa; je 0x94610; ret; 
0x000000000013f29c: cmp r11d, r9d; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x000000000018c6ea: cmp r12b, byte ptr [rax]; jne 0x18c529; vzeroupper; ret; 
0x000000000013bee9: cmp r15d, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x0000000000055c3f: cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x00000000000e4fe3: cmp r8, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e4fb5: cmp r8, 0x138f; je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e4fbe: cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e4f44: cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000000947f1: cmp r8, 1; sbb eax, eax; add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x00000000000e4f56: cmp r8, rax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x000000000013bb2b: cmp r8, rdi; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x00000000000c6a96: cmp r8d, 0xff; je 0xc6aa3; mov eax, r8d; ret; 
0x0000000000189e10: cmp r8d, 1; ja 0x189c20; je 0x189c10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018ab00: cmp r8d, 1; ja 0x18a7d0; je 0x18a7c0; vzeroupper; ret; 
0x000000000018a9dc: cmp r8d, 1; ja 0x18a8b0; je 0x18a8a0; vzeroupper; ret; 
0x000000000018b70c: cmp r8d, 1; ja 0x18b5e0; je 0x18b5d0; vzeroupper; ret; 
0x00000000000a8922: cmp r8d, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000010c38a: cmp rax, -0x1000; ja 0x10c3f0; ret; 
0x000000000010c43a: cmp rax, -0x1000; ja 0x10c4a0; ret; 
0x000000000010d5d2: cmp rax, -0x1000; ja 0x10d59a; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d6da: cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x000000000010d739: cmp rax, -0x1000; ja 0x10d748; ret; 
0x000000000010d79a: cmp rax, -0x1000; ja 0x10d7a8; ret; 
0x000000000010db22: cmp rax, -0x1000; ja 0x10db30; ret; 
0x000000000010db85: cmp rax, -0x1000; ja 0x10db90; ret; 
0x000000000010dbdf: cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x000000000010de18: cmp rax, -0x1000; ja 0x10de28; ret; 
0x000000000010e1f2: cmp rax, -0x1000; ja 0x10e250; ret; 
0x000000000010e297: cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x000000000010e32b: cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000010e35b: cmp rax, -0x1000; ja 0x10e368; ret; 
0x000000000010ea37: cmp rax, -0x1000; ja 0x10ea80; ret; 
0x000000000010ebb7: cmp rax, -0x1000; ja 0x10ec00; ret; 
0x0000000000112b87: cmp rax, -0x1000; ja 0x112be0; ret; 
0x000000000011320a: cmp rax, -0x1000; ja 0x113288; ret; 
0x00000000001132ce: cmp rax, -0x1000; ja 0x1132e0; ret; 
0x0000000000113313: cmp rax, -0x1000; ja 0x113320; ret; 
0x000000000011341a: cmp rax, -0x1000; ja 0x113480; ret; 
0x00000000001134ca: cmp rax, -0x1000; ja 0x113530; ret; 
0x000000000011356b: cmp rax, -0x1000; ja 0x113578; ret; 
0x0000000000113828: cmp rax, -0x1000; ja 0x113838; ret; 
0x000000000011385e: cmp rax, -0x1000; ja 0x113870; ret; 
0x000000000011389b: cmp rax, -0x1000; ja 0x1138a8; ret; 
0x0000000000113d81: cmp rax, -0x1000; ja 0x113dd8; ret; 
0x0000000000113f94: cmp rax, -0x1000; ja 0x113fa0; ret; 
0x0000000000113fd5: cmp rax, -0x1000; ja 0x113fe0; ret; 
0x0000000000114607: cmp rax, -0x1000; ja 0x114660; ret; 
0x00000000001146a7: cmp rax, -0x1000; ja 0x114700; ret; 
0x000000000011474d: cmp rax, -0x1000; ja 0x1147b8; ret; 
0x000000000011480d: cmp rax, -0x1000; ja 0x114878; ret; 
0x000000000011519a: cmp rax, -0x1000; ja 0x115210; ret; 
0x00000000001153c7: cmp rax, -0x1000; ja 0x115410; ret; 
0x0000000000115487: cmp rax, -0x1000; ja 0x1154d0; ret; 
0x0000000000115547: cmp rax, -0x1000; ja 0x115550; ret; 
0x0000000000116ccb: cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116eb0: cmp rax, -0x1000; ja 0x116ec0; ret; 
0x0000000000116eeb: cmp rax, -0x1000; ja 0x116ef8; ret; 
0x0000000000116f1b: cmp rax, -0x1000; ja 0x116f28; ret; 
0x0000000000118b06: cmp rax, -0x1000; ja 0x118b70; pop rbx; pop rbp; ret; 
0x0000000000118c07: cmp rax, -0x1000; ja 0x118c60; ret; 
0x000000000011c6e2: cmp rax, -0x1000; ja 0x11c6f0; ret; 
0x000000000011f3bb: cmp rax, -0x1000; ja 0x11f3c8; ret; 
0x000000000011f460: cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x000000000011f513: cmp rax, -0x1000; ja 0x11f520; ret; 
0x000000000011f64a: cmp rax, -0x1000; ja 0x11f6b0; ret; 
0x000000000011f6fa: cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f7aa: cmp rax, -0x1000; ja 0x11f810; ret; 
0x000000000011f85a: cmp rax, -0x1000; ja 0x11f8d8; ret; 
0x000000000011f927: cmp rax, -0x1000; ja 0x11f980; ret; 
0x000000000011f9ef: cmp rax, -0x1000; ja 0x11fa28; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011fa53: cmp rax, -0x1000; ja 0x11fa60; ret; 
0x00000000001202f7: cmp rax, -0x1000; ja 0x120350; ret; 
0x00000000001203c7: cmp rax, -0x1000; ja 0x120420; ret; 
0x0000000000120530: cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205ea: cmp rax, -0x1000; ja 0x120660; ret; 
0x00000000001206a7: cmp rax, -0x1000; ja 0x120700; ret; 
0x0000000000120750: cmp rax, -0x1000; ja 0x1207c0; ret; 
0x0000000000120807: cmp rax, -0x1000; ja 0x120860; ret; 
0x00000000001208aa: cmp rax, -0x1000; ja 0x120928; ret; 
0x0000000000120d0a: cmp rax, -0x1000; ja 0x120d70; ret; 
0x0000000000120dba: cmp rax, -0x1000; ja 0x120e28; ret; 
0x0000000000120e6a: cmp rax, -0x1000; ja 0x120ed0; ret; 
0x00000000001210da: cmp rax, -0x1000; ja 0x121140; ret; 
0x000000000012118a: cmp rax, -0x1000; ja 0x121200; ret; 
0x000000000012123b: cmp rax, -0x1000; ja 0x121248; ret; 
0x000000000012126b: cmp rax, -0x1000; ja 0x121278; ret; 
0x00000000001212ab: cmp rax, -0x1000; ja 0x1212b8; ret; 
0x000000000012137e: cmp rax, -0x1000; ja 0x121390; ret; 
0x00000000001213bb: cmp rax, -0x1000; ja 0x1213c8; ret; 
0x00000000001213eb: cmp rax, -0x1000; ja 0x1213f8; ret; 
0x000000000012141e: cmp rax, -0x1000; ja 0x121430; ret; 
0x000000000012145b: cmp rax, -0x1000; ja 0x121468; ret; 
0x000000000012e9cd: cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x0000000000043410: cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000004345c: cmp rax, -0x1000; ja 0x434b0; ret; 
0x0000000000048227: cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000062e8b: cmp rax, -0x1000; ja 0x62e98; ret; 
0x0000000000062ebe: cmp rax, -0x1000; ja 0x62ed0; ret; 
0x00000000000d0dcb: cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000d0ee0: cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000d1080: cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000dd077: cmp rax, -0x1000; ja 0xdd047; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd0f7: cmp rax, -0x1000; ja 0xdd0c7; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd125: cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2bb: cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000e2c3a: cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2ced: cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000e2e47: cmp rax, -0x1000; ja 0xe2e80; ret; 
0x000000000010265b: cmp rax, -0xfff; jae 0x102664; ret; 
0x000000000010268b: cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026bb: cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026eb: cmp rax, -0xfff; jae 0x1026f4; ret; 
0x000000000010271b: cmp rax, -0xfff; jae 0x102724; ret; 
0x000000000010274b: cmp rax, -0xfff; jae 0x102754; ret; 
0x000000000010277b: cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027ab: cmp rax, -0xfff; jae 0x1027b4; ret; 
0x000000000010d5fb: cmp rax, -0xfff; jae 0x10d604; ret; 
0x000000000010dc2b: cmp rax, -0xfff; jae 0x10dc34; ret; 
0x000000000010dc5b: cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010dd8b: cmp rax, -0xfff; jae 0x10dd94; ret; 
0x000000000010ddbb: cmp rax, -0xfff; jae 0x10ddc4; ret; 
0x000000000010de7b: cmp rax, -0xfff; jae 0x10de84; ret; 
0x000000000010deab: cmp rax, -0xfff; jae 0x10deb4; ret; 
0x000000000010e79b: cmp rax, -0xfff; jae 0x10e7a4; ret; 
0x000000000010eabb: cmp rax, -0xfff; jae 0x10eac4; ret; 
0x000000000010eaeb: cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x000000000010eb1b: cmp rax, -0xfff; jae 0x10eb24; ret; 
0x000000000010eb4b: cmp rax, -0xfff; jae 0x10eb54; ret; 
0x000000000010eb7b: cmp rax, -0xfff; jae 0x10eb84; ret; 
0x000000000010ec3b: cmp rax, -0xfff; jae 0x10ec44; ret; 
0x000000000010ec6b: cmp rax, -0xfff; jae 0x10ec74; ret; 
0x000000000010f58b: cmp rax, -0xfff; jae 0x10f594; ret; 
0x000000000010f5bb: cmp rax, -0xfff; jae 0x10f5c4; ret; 
0x000000000010f5eb: cmp rax, -0xfff; jae 0x10f5f4; ret; 
0x000000000010f61e: cmp rax, -0xfff; jae 0x10f627; ret; 
0x000000000010fddb: cmp rax, -0xfff; jae 0x10fde4; ret; 
0x000000000010fe0e: cmp rax, -0xfff; jae 0x10fe17; ret; 
0x000000000010fe3b: cmp rax, -0xfff; jae 0x10fe44; ret; 
0x000000000010fe6b: cmp rax, -0xfff; jae 0x10fe74; ret; 
0x000000000010fe9b: cmp rax, -0xfff; jae 0x10fea4; ret; 
0x000000000010fece: cmp rax, -0xfff; jae 0x10fed7; ret; 
0x000000000010fefb: cmp rax, -0xfff; jae 0x10ff04; ret; 
0x000000000010ff2b: cmp rax, -0xfff; jae 0x10ff34; ret; 
0x000000000010ff5b: cmp rax, -0xfff; jae 0x10ff64; ret; 
0x00000000001131ce: cmp rax, -0xfff; jae 0x1131d7; ret; 
0x000000000011400b: cmp rax, -0xfff; jae 0x114014; ret; 
0x000000000011440b: cmp rax, -0xfff; jae 0x114414; ret; 
0x00000000001145cb: cmp rax, -0xfff; jae 0x1145d4; ret; 
0x000000000011500b: cmp rax, -0xfff; jae 0x115014; ret; 
0x000000000011515b: cmp rax, -0xfff; jae 0x115164; ret; 
0x000000000011535b: cmp rax, -0xfff; jae 0x115364; ret; 
0x000000000011538b: cmp rax, -0xfff; jae 0x115394; ret; 
0x000000000011544b: cmp rax, -0xfff; jae 0x115454; ret; 
0x000000000011550b: cmp rax, -0xfff; jae 0x115514; ret; 
0x000000000011584b: cmp rax, -0xfff; jae 0x115854; ret; 
0x000000000011587b: cmp rax, -0xfff; jae 0x115884; ret; 
0x00000000001158ab: cmp rax, -0xfff; jae 0x1158b4; ret; 
0x000000000011895d: cmp rax, -0xfff; jae 0x118966; ret; 
0x0000000000118b9b: cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000118bcb: cmp rax, -0xfff; jae 0x118bd4; ret; 
0x0000000000118c9b: cmp rax, -0xfff; jae 0x118ca4; ret; 
0x0000000000118ccb: cmp rax, -0xfff; jae 0x118cd4; ret; 
0x0000000000118cfe: cmp rax, -0xfff; jae 0x118d07; ret; 
0x0000000000118d2b: cmp rax, -0xfff; jae 0x118d34; ret; 
0x0000000000118d5b: cmp rax, -0xfff; jae 0x118d64; ret; 
0x0000000000118d8b: cmp rax, -0xfff; jae 0x118d94; ret; 
0x0000000000118dbb: cmp rax, -0xfff; jae 0x118dc4; ret; 
0x000000000011cfbe: cmp rax, -0xfff; jae 0x11cfc7; ret; 
0x000000000011cfeb: cmp rax, -0xfff; jae 0x11cff4; ret; 
0x000000000011d01b: cmp rax, -0xfff; jae 0x11d024; ret; 
0x000000000011d04e: cmp rax, -0xfff; jae 0x11d057; ret; 
0x000000000011d07e: cmp rax, -0xfff; jae 0x11d087; ret; 
0x000000000011d0ab: cmp rax, -0xfff; jae 0x11d0b4; ret; 
0x000000000011d0de: cmp rax, -0xfff; jae 0x11d0e7; ret; 
0x000000000011d10b: cmp rax, -0xfff; jae 0x11d114; ret; 
0x000000000011d13b: cmp rax, -0xfff; jae 0x11d144; ret; 
0x000000000011d16e: cmp rax, -0xfff; jae 0x11d177; ret; 
0x000000000011d19b: cmp rax, -0xfff; jae 0x11d1a4; ret; 
0x000000000011d1ce: cmp rax, -0xfff; jae 0x11d1d7; ret; 
0x000000000011f20b: cmp rax, -0xfff; jae 0x11f214; ret; 
0x000000000011f23b: cmp rax, -0xfff; jae 0x11f244; ret; 
0x000000000011f38b: cmp rax, -0xfff; jae 0x11f394; ret; 
0x000000000011f3eb: cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f41b: cmp rax, -0xfff; jae 0x11f424; ret; 
0x000000000011f54b: cmp rax, -0xfff; jae 0x11f554; ret; 
0x000000000011f5de: cmp rax, -0xfff; jae 0x11f5e7; ret; 
0x000000000011f60b: cmp rax, -0xfff; jae 0x11f614; ret; 
0x000000000011fb2b: cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fb5b: cmp rax, -0xfff; jae 0x11fb64; ret; 
0x000000000011fb9e: cmp rax, -0xfff; jae 0x11fba7; ret; 
0x000000000011fbcb: cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x000000000011fbfb: cmp rax, -0xfff; jae 0x11fc04; ret; 
0x000000000011fc2b: cmp rax, -0xfff; jae 0x11fc34; ret; 
0x000000000011fc5b: cmp rax, -0xfff; jae 0x11fc64; ret; 
0x000000000011fc8b: cmp rax, -0xfff; jae 0x11fc94; ret; 
0x000000000011fcbb: cmp rax, -0xfff; jae 0x11fcc4; ret; 
0x000000000011fceb: cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x000000000011fd1e: cmp rax, -0xfff; jae 0x11fd27; ret; 
0x000000000011fd4b: cmp rax, -0xfff; jae 0x11fd54; ret; 
0x000000000011fd7e: cmp rax, -0xfff; jae 0x11fd87; ret; 
0x000000000011fdab: cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x000000000011fddb: cmp rax, -0xfff; jae 0x11fde4; ret; 
0x000000000011fe0b: cmp rax, -0xfff; jae 0x11fe14; ret; 
0x000000000011fe3b: cmp rax, -0xfff; jae 0x11fe44; ret; 
0x000000000011fe6b: cmp rax, -0xfff; jae 0x11fe74; ret; 
0x000000000011fe9e: cmp rax, -0xfff; jae 0x11fea7; ret; 
0x000000000011fece: cmp rax, -0xfff; jae 0x11fed7; ret; 
0x000000000011fefb: cmp rax, -0xfff; jae 0x11ff04; ret; 
0x000000000011ff2b: cmp rax, -0xfff; jae 0x11ff34; ret; 
0x000000000011ff5e: cmp rax, -0xfff; jae 0x11ff67; ret; 
0x000000000011ff8e: cmp rax, -0xfff; jae 0x11ff97; ret; 
0x000000000011ffbe: cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000011ffeb: cmp rax, -0xfff; jae 0x11fff4; ret; 
0x000000000012001b: cmp rax, -0xfff; jae 0x120024; ret; 
0x000000000012004b: cmp rax, -0xfff; jae 0x120054; ret; 
0x000000000012007b: cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000001200ae: cmp rax, -0xfff; jae 0x1200b7; ret; 
0x00000000001200db: cmp rax, -0xfff; jae 0x1200e4; ret; 
0x000000000012010b: cmp rax, -0xfff; jae 0x120114; ret; 
0x000000000012013e: cmp rax, -0xfff; jae 0x120147; ret; 
0x000000000012016b: cmp rax, -0xfff; jae 0x120174; ret; 
0x000000000012019e: cmp rax, -0xfff; jae 0x1201a7; ret; 
0x00000000001201ce: cmp rax, -0xfff; jae 0x1201d7; ret; 
0x00000000001201fb: cmp rax, -0xfff; jae 0x120204; ret; 
0x000000000012022b: cmp rax, -0xfff; jae 0x120234; ret; 
0x000000000012025b: cmp rax, -0xfff; jae 0x120264; ret; 
0x000000000012029b: cmp rax, -0xfff; jae 0x1202a4; ret; 
0x000000000012038b: cmp rax, -0xfff; jae 0x120394; ret; 
0x000000000012045b: cmp rax, -0xfff; jae 0x120464; ret; 
0x000000000012048b: cmp rax, -0xfff; jae 0x120494; ret; 
0x00000000001204be: cmp rax, -0xfff; jae 0x1204c7; ret; 
0x00000000001204eb: cmp rax, -0xfff; jae 0x1204f4; ret; 
0x000000000012096e: cmp rax, -0xfff; jae 0x120977; ret; 
0x000000000012099b: cmp rax, -0xfff; jae 0x1209a4; ret; 
0x00000000001209cb: cmp rax, -0xfff; jae 0x1209d4; ret; 
0x00000000001209fe: cmp rax, -0xfff; jae 0x120a07; ret; 
0x00000000000433db: cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000439cb: cmp rax, -0xfff; jae 0x439d4; ret; 
0x0000000000054f01: cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41bb: cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000d41eb: cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e2b4b: cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000e2d9b: cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000e317b: cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e412b: cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e437b: cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e43ab: cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e440b: cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e443b: cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e446b: cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e449b: cmp rax, -0xfff; jae 0xe44a4; ret; 
0x000000000009cb92: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000d0027: cmp rax, 0x19; jg 0xd0050; mov rax, r12; pop r12; ret; 
0x00000000000951f7: cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e47: cmp rax, 0x408; jbe 0x94e50; ret; 
0x00000000000e50e0: cmp rax, 0x517b; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e5110: cmp rax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e509c: cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000095257: cmp rax, 0xa0; jbe 0x95260; ret; 
0x00000000000e50ca: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000094e87: cmp rax, 0xffff; jbe 0x94e90; ret; 
0x00000000000a2221: cmp rax, 1; ja 0xa2200; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157f86: cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x000000000005b6a9: cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x0000000000121e58: cmp rax, qword ptr [rip + 0xca539]; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000121f15: cmp rax, qword ptr [rip + 0xcdb34]; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000086e17: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916df: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x00000000000cf346: cmp rax, rcx; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x000000000008803d: cmp rax, rcx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x000000000005b39d: cmp rax, rdi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000012ed7c: cmp rax, rdx; ja 0x12ed92; lea rdx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x000000000012d074: cmp rax, rdx; jae 0x12d088; cmp qword ptr [rax + 8], rdi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000009397e: cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x0000000000153513: cmp rax, rdx; je 0x15351b; mov r8, rax; mov rax, r8; pop rbx; ret; 
0x00000000001535d3: cmp rax, rdx; je 0x1535df; lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a3: cmp rax, rdx; je 0x1536af; lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153773: cmp rax, rdx; je 0x15377f; lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x00000000000bcd06: cmp rax, rdx; lea rdx, [rip + 0xcf500]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc846: cmp rax, rdx; lea rdx, [rip + 0xcfc90]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f6: cmp rax, rdx; lea rdx, [rip + 0xcff30]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae6: cmp rax, rdx; lea rdx, [rip + 0xd05a0]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc806: cmp rax, rdx; lea rdx, [rip + 0xd0650]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc956: cmp rax, rdx; lea rdx, [rip + 0xd0920]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd6: cmp rax, rdx; lea rdx, [rip + 0xdbfa0]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c76: cmp rax, rdx; lea rdx, [rip + 0xe2db0]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f6: cmp rax, rdx; lea rdx, [rip + 0xe4360]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb6: cmp rax, rdx; lea rdx, [rip + 0xe6880]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f806: cmp rax, rdx; lea rdx, [rip + 0xe8f20]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f656: cmp rax, rdx; lea rdx, [rip + 0xe92a0]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f696: cmp rax, rdx; lea rdx, [rip + 0xe9400]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000e5064: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000033c34: cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000000087de9: cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000012787c: cmp rax, rsi; jb 0x127890; mov eax, 1; ret; 
0x0000000000160fc1: cmp rax, rsi; jb 0x160fa5; mov qword ptr [rip + 0x8decb], r8; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x00000000000a1fda: cmp rbp, rax; jbe 0xa2001; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198dbc: cmp rbp, rbx; jne 0x198db0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000dd814: cmp rbx, r12; jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099eab: cmp rbx, rbp; jne 0x99e90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000056523: cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x00000000000a15f4: cmp rcx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x000000000015fa25: cmp rcx, qword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x00000000000860b9: cmp rcx, qword ptr [rdx + 0x28]; jae 0x860d0; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086260: cmp rcx, qword ptr [rdx + 0x28]; jae 0x86278; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000009c1e5: cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009c1dc: cmp rcx, qword ptr [rip + 0x152cb5]; jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000018e964: cmp rcx, rax; jne 0x18ed93; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e40a: cmp rcx, rax; jne 0x18ed93; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e35e: cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f98e: cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x0000000000055be7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000121027: cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret; 
0x000000000010ffa3: cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x0000000000092a19: cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000012fc04: cmp rdi, 0x3ff; ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x0000000000149498: cmp rdi, qword ptr [rdx + 0x60]; ja 0x1494b0; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000482f4: cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x000000000018b957: cmp rdi, r9; jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001906f2: cmp rdi, r9; jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbec: cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001144bd: cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x000000000005b332: cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x00000000000bbb5a: cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011d225: cmp rdi, rdx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x000000000010d3e8: cmp rdi, rsi; ja 0x10d3d8; mov eax, r8d; ret; 
0x0000000000094c66: cmp rdi, rsi; sete al; ret; 
0x00000000000e51bd: cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51d8: cmp rdx, 0x1cd1; setne al; ret; 
0x00000000000bbfa2: cmp rdx, 0x20; ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf22: cmp rdx, 0x20; ja 0xbbfbc; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000094719: cmp rdx, 0x2a; jne 0x94700; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000e51d0: cmp rdx, 0x2f; je 0xe51ea; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x000000000018bdaa: cmp rdx, 0x40; ja 0x18bdbe; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bd4a: cmp rdx, 0x40; ja 0x18bdc7; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000000e51b2: cmp rdx, 0x414a53; je 0xe51ea; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51a5: cmp rdx, 0x5346544e; setne al; ret; 
0x0000000000190be0: cmp rdx, 0x80; ja 0x190c74; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000000e5189: cmp rdx, 0xadf5; setne al; ret; 
0x00000000000bce00: cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000085583: cmp rdx, qword ptr [rax + 8]; jae 0x85598; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000008570d: cmp rdx, qword ptr [rax + 8]; jae 0x85720; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000012ddfc: cmp rdx, r8; jne 0x12dde8; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012ef24: cmp rdx, r8; jne 0x12ef10; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x0000000000184964: cmp rdx, rax; jbe 0x1849c0; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184984: cmp rdx, rax; jbe 0x1849c0; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000001849a4: cmp rdx, rax; jbe 0x1849c0; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184954: cmp rdx, rax; jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x000000000018c414: cmp rdx, rax; jbe 0x18c470; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c434: cmp rdx, rax; jbe 0x18c470; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c454: cmp rdx, rax; jbe 0x18c470; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c404: cmp rdx, rax; jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x000000000013baa9: cmp rdx, rax; sbb eax, eax; ret; 
0x000000000005b625: cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000156010: cmp rdx, rcx; je 0x156030; cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000018be45: cmp rdx, rcx; jne 0x18be2b; vzeroupper; ret; 
0x0000000000190d18: cmp rdx, rcx; jne 0x190cf6; vzeroupper; ret; 
0x000000000009a054: cmp rdx, rdi; jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x0000000000094191: cmp rdx, rdi; setae al; ret; 
0x00000000001494c1: cmp rsi, qword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000013c97d: cmp rsi, rax; jae 0x13c98b; shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000188c94: cmp rsi, rax; jbe 0x188d10; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000015d439: cmp si, 3; ja 0x15d450; cmp dx, cx; sete al; ret; 
0x0000000000129696: cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000188390: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000129707: cmp sil, cl; cmovne eax, edx; ret; 
0x000000000018e7e9: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x00000000000d33a6: cmpsb byte ptr [rsi], byte ptr [rdi]; lodsd eax, dword ptr [rsi]; sti; dec dword ptr [rax + 0x39]; ret; 
0x0000000000121d02: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, 0; pop rbx; ret; 
0x0000000000144726: cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000095530: cmpsd dword ptr [rsi], dword ptr [rdi]; add rsp, 8; ret; 
0x00000000000b4220: cmpsd dword ptr [rsi], dword ptr [rdi]; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000001071d5: cmpsd dword ptr [rsi], dword ptr [rdi]; pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x00000000000760b5: cmpsd dword ptr [rsi], dword ptr [rdi]; ret; 
0x00000000000960b2: cmpxchg dword ptr [rip + 0x156ac7], edx; lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x0000000000093898: cmpxchg dword ptr [rip + 0x15af21], edx; mov qword ptr [rip + 0x15af22], rbx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000047347: cqo; idiv rsi; ret; 
0x0000000000047307: cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000153990: cvtdq2ps xmm3, xmmword ptr [rbp + 0x41]; pop rsp; ret; 
0x00000000000436c6: cwde; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000044299: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000f1600: cwde; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000018d22b: cwde; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000094d05: cwde; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000157838: cwde; mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x00000000000ec464: cwde; movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x0000000000128a99: cwde; out dx, eax; inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x00000000000bce3b: cwde; pop rbx; pop rbp; pop r12; ret; 
0x000000000004c644: cwde; ret; 
0x0000000000190809: dec byte ptr [rax + 0x7f]; je 0x190825; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x00000000001909e7: dec byte ptr [rax + 0x7f]; jg 0x1909ef; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190b71: dec byte ptr [rax + 0x7f]; jg 0x190b79; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190811: dec byte ptr [rax + 0x7f]; jl 0x19082d; cld; vzeroupper; ret; 
0x000000000019091a: dec byte ptr [rax + 0x7f]; jns 0x19091d; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190aa5: dec byte ptr [rax + 0x7f]; jns 0x190aa8; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190921: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000003746d: dec byte ptr [rax - 0x77]; ret; 
0x00000000000dc03c: dec byte ptr [rax - 0x7d]; ret; 
0x0000000000119ea8: dec byte ptr [rbp - 0x75]; pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x0000000000047328: dec byte ptr [rcx - 0x183eb729]; and byte ptr [rax + 9], cl; clc; ret; 
0x000000000009f356: dec byte ptr [rcx]; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000000bbc34: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000018b521: dec byte ptr [rdx - 0x73]; add al, 7; vzeroupper; ret; 
0x0000000000031761: dec dword ptr [r15]; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000037e25: dec dword ptr [rax + 0x29]; ret; 
0x00000000000b19a7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000029e09: dec dword ptr [rax + 0x3948074a]; ret; 
0x00000000000a53d3: dec dword ptr [rax + 0x39]; fmul dword ptr [rdi]; test dword ptr [rax + rbp*8 - 0x76b70001], esi; ret; 
0x0000000000198dbb: dec dword ptr [rax + 0x39]; fnsave dword ptr [rbp - 0x11]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000408aa: dec dword ptr [rax + 0x39]; ret; 
0x0000000000121d14: dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0xca641; pop rbx; ret; 
0x0000000000031268: dec dword ptr [rax + 0x63]; ret; 
0x00000000000b1ba9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x0000000000127b8c: dec dword ptr [rax + 1]; pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000052449: dec dword ptr [rax + 1]; ret; 
0x00000000000bc9fd: dec dword ptr [rax + rax]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x0000000000043bdf: dec dword ptr [rax - 0x2d]; ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x00000000001558d8: dec dword ptr [rax - 0x2f]; call 0xffffffff895e2069; ret; 
0x0000000000155a68: dec dword ptr [rax - 0x2f]; call 0xffffffff895e21f9; ret; 
0x000000000019863a: dec dword ptr [rax - 0x39]; add eax, 0x5532a; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000198e71: dec dword ptr [rax - 0x39]; add eax, 0x566eb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000199076: dec dword ptr [rax - 0x39]; add eax, 0x5799e; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000004f398: dec dword ptr [rax - 0x39]; ret; 
0x000000000012dc9a: dec dword ptr [rax - 0x73]; adc eax, 0xfff8ddfe; cmove rax, rdx; ret; 
0x000000000012dbda: dec dword ptr [rax - 0x73]; adc eax, 0xfff8dede; cmove rax, rdx; ret; 
0x000000000012db1a: dec dword ptr [rax - 0x73]; adc eax, 0xfff8df9e; cmove rax, rdx; ret; 
0x00000000000bce37: dec dword ptr [rax - 0x73]; add al, 0x98; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e842f: dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x0000000000120fe1: dec dword ptr [rax - 0x73]; add eax, 0x91697; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012dd18: dec dword ptr [rax - 0x73]; add eax, 0xfff8e1d0; cmovne rax, rdx; ret; 
0x00000000000e832f: dec dword ptr [rax - 0x73]; or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000006e872: dec dword ptr [rax - 0x73]; or byte ptr [r8 - 0x77], cl; ret; 
0x000000000012058e: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x20; pop rbp; ret; 
0x000000000010c3e2: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000120654: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x30; pop rbp; ret; 
0x0000000000178cda: dec dword ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000009e953: dec dword ptr [rax - 0x75]; add eax, 0x14d515; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009942c: dec dword ptr [rax - 0x75]; add eax, 0x152a3c; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x000000000011917c: dec dword ptr [rax - 0x75]; add eax, 0xd2cec; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000349e4: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x18; ret; 
0x000000000010e240: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x0000000000113276: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x00000000001211ef: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x38; ret; 
0x00000000000578b4: dec dword ptr [rax - 0x75]; clc; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x000000000012b48f: dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000006d064: dec dword ptr [rax - 0x75]; cmp ebp, eax; ret; 
0x0000000000137d6b: dec dword ptr [rax - 0x75]; jnp 0x137db8; test rdi, rdi; jne 0x137d60; pop rbx; ret; 
0x0000000000049d2b: dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000138741: dec dword ptr [rax - 0x77]; add eax, 0xb5197; add rsp, 8; ret; 
0x000000000011790c: dec dword ptr [rax - 0x77]; add eax, 0xd7e7c; add rsp, 8; ret; 
0x000000000009d10b: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000011d7ef: dec dword ptr [rax - 0x77]; and byte ptr [r8 + 2], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018b84f: dec dword ptr [rax - 0x77]; clc; vzeroupper; ret; 
0x000000000004a171: dec dword ptr [rax - 0x77]; fadd dword ptr [rcx + 0xf]; xchg esp, eax; ret; 
0x000000000006d0fb: dec dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x77]; ret; 
0x0000000000036181: dec dword ptr [rax - 0x77]; fucompi st(0); push rsi; ret; 
0x000000000007c595: dec dword ptr [rax - 0x77]; lea esi, [rax]; idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x000000000015a7d1: dec dword ptr [rax - 0x77]; mov edi, 0xffff0885; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000041291: dec dword ptr [rax - 0x77]; out dx, eax; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001385c7: dec dword ptr [rax - 0x77]; pushfq; and al, 0xa8; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000026843: dec dword ptr [rax - 0x77]; ret; 
0x000000000015794b: dec dword ptr [rax - 0x77]; sal dword ptr [rcx], 0xc0; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000471e2: dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000119987: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000008282e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000008292d: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000b5c0e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000d2f6e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x0000000000161347: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], cl; test bh, bh; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000011ce01: dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x00000000001534de: dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000075cc7: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000153837: dec dword ptr [rax - 0x7d]; mov eax, 0xe0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003816a: dec dword ptr [rax - 0x7d]; ret; 
0x000000000011c919: dec dword ptr [rax - 0x7f]; ret; 
0x000000000009533d: dec dword ptr [rax - 9]; fisttp dword ptr [rax + 0x21]; ret; 
0x00000000000a6cf5: dec dword ptr [rbp + 0x39]; ret; 
0x000000000007b9b2: dec dword ptr [rbp + 0x63]; ret; 
0x0000000000088533: dec dword ptr [rbp + rcx*4 + 0x2c]; and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x00000000000388fb: dec dword ptr [rbp - 0x73]; je 0x38906; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000038853: dec dword ptr [rbp - 0x73]; jl 0x3885f; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x00000000000e34b9: dec dword ptr [rbp - 0x77]; ret; 
0x000000000011f4c8: dec dword ptr [rbx + 0x48042444]; add esp, 0x20; pop rbp; ret; 
0x0000000000120e1b: dec dword ptr [rbx + 0x48042444]; add esp, 0x28; ret; 
0x000000000011f96e: dec dword ptr [rbx + 0x48082444]; add esp, 0x18; ret; 
0x0000000000112bd2: dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x00000000000e2e72: dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000e2d4c: dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x00000000001151fe: dec dword ptr [rbx + 0x480c2444]; add esp, 0x38; ret; 
0x00000000000e2c92: dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x0000000000113473: dec dword ptr [rbx + 0x48182444]; add esp, 0x28; ret; 
0x00000000000be52c: dec dword ptr [rbx + 0xeb8087b]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e8029: dec dword ptr [rbx - 0x4ef6b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000074f6e: dec dword ptr [rbx - 0x8ef4b]; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x0000000000074f4b: dec dword ptr [rbx - 0x8ef7b]; inc dword ptr [rcx]; ret; 
0x000000000013beeb: dec dword ptr [rbx]; mov edx, 0x104; cmove eax, edx; ret; 
0x0000000000195525: dec dword ptr [rcx + 0x21]; ret; 
0x00000000000e35ab: dec dword ptr [rcx + 0x29]; ret; 
0x000000000002c57c: dec dword ptr [rcx + 0x3948fc51]; ret; 
0x000000000005b45b: dec dword ptr [rcx + 0x39]; cli; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000c81eb: dec dword ptr [rcx + 1]; ret; 
0x000000000013c45a: dec dword ptr [rcx + r9*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013c45b: dec dword ptr [rcx + rcx*4 + 0x10]; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x0000000000167cce: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000118ee7: dec dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x0000000000084402: dec dword ptr [rcx + rcx*4 - 0x20]; pop rbp; pop r12; pop r13; ret; 
0x000000000011454d: dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000649ff: dec dword ptr [rcx - 0x60f43]; dec dword ptr [rax + 0x39]; ret; 
0x00000000000dd4b1: dec dword ptr [rcx - 0x72b2bfbd]; je 0xdd4dd; and byte ptr [rax - 0x7d], cl; ret; 
0x000000000006661d: dec dword ptr [rcx - 0x77]; fmul qword ptr [rax - 0x77]; ret; 
0x00000000000eb29c: dec dword ptr [rcx - 0x77]; fmul qword ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000005b15f: dec dword ptr [rcx - 0x77]; ret; 
0x000000000009cf76: dec dword ptr [rcx - 0x77]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop r12; ret; 
0x000000000002d5f4: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000000c974a: dec dword ptr [rcx - 0x7d]; sti; add ecx, dword ptr [rdi]; xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000c946e: dec dword ptr [rcx - 0x7d]; sti; add ecx, dword ptr [rdi]; xchg dl, bh; add eax, 0x89490000; ret; 
0x000000000013ab8c: dec dword ptr [rcx - 0x8b7b]; inc dword ptr [rbp - 0x77]; ret; 
0x0000000000094f42: dec dword ptr [rcx - 9]; ret; 
0x000000000012a4cf: dec dword ptr [rcx]; ret; 
0x0000000000122e77: dec dword ptr [rcx]; setbe r8b; mov eax, r8d; ret; 
0x000000000011f0a6: dec dword ptr [rdi]; add byte ptr [rax], al; and eax, 0xfffff000; or eax, edx; ret; 
0x0000000000031762: dec dword ptr [rdi]; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000005d7b6: dec dword ptr [rdi]; mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x000000000005c113: dec dword ptr [rdi]; mov dh, 0x58; or al, 0xf6; ret; 
0x0000000000053be1: dec dword ptr [rdi]; mov dh, 0x84; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000053e9c: dec dword ptr [rdi]; mov dh, 0x8c; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000184ed3: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000ac775: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000a06b8: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 1; ret; 
0x0000000000042834: dec dword ptr [rdi]; mov word ptr [rbp - 0x7f000000], es; sti; push rax; ret; 
0x0000000000032848: dec dword ptr [rdi]; ror byte ptr [r8 - 0x73], 1; add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x00000000000d1fe7: dec dword ptr [rdi]; sub dword ptr [rax], eax; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000a4f85: dec dword ptr [rdi]; test ah, bh; xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000f1e12: dec dword ptr [rdi]; test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000018b849: dec dword ptr [rdi]; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x000000000006f61c: dec dword ptr [rdi]; test byte ptr [rsi], cl; add eax, 0x83480000; ret; 
0x00000000000a5dca: dec dword ptr [rdi]; test byte ptr [rsp], dh; add bh, dh; ret; 
0x00000000001395c7: dec dword ptr [rdi]; test dl, bl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x000000000013e582: dec dword ptr [rdi]; test dword ptr [rdi], eax; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000192690: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000006d15d: dec dword ptr [rdi]; test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x00000000001060e2: dec dword ptr [rdi]; xchg ebp, eax; ret; 
0x00000000001175e6: dec dword ptr [rdi]; xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000a4783: dec dword ptr [rdi]; xchg ebx, eax; ret; 
0x000000000006a480: dec dword ptr [rdi]; xchg esp, eax; ret; 
0x000000000013bee6: dec dword ptr [rdx]; je 0x13bf2f; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000b19a6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000029e08: dec qword ptr [rax + 0x3948074a]; ret; 
0x00000000000b5c0d: dec qword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000002fd85: div byte ptr [rax + rcx - 0x7d]; inc byte ptr [rbx]; je 0x2fd90; ret; 
0x0000000000094d2a: div byte ptr [rbp + 0x13]; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000057b38: div byte ptr [rbp + 0x25]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057d46: div byte ptr [rbp + 0x27]; test rax, rax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000057bc9: div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000d0ed6: div byte ptr [rbp + 0x2f]; mov eax, 0x60; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x000000000011a983: div byte ptr [rbp + 0xa]; pop rbp; pop r12; pop r13; ret; 
0x0000000000042c39: div byte ptr [rbp + 0xc]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000000b1d66: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000011a8d5: div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000e5a86: div byte ptr [rbp + rdx - 0x17]; and dl, byte ptr [rdi - 0x6f990005]; xor eax, eax; ret; 
0x00000000000a861e: div byte ptr [rbp - 0x11]; mov qword ptr [rdx], rcx; ret; 
0x0000000000057be2: div byte ptr [rbp - 0x13]; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x000000000011396e: div byte ptr [rbp - 0x25]; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000a2857: div byte ptr [rbp - 0x6a]; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000160ce6: div byte ptr [rdi + rax - 0x17]; rcl byte ptr [rip - 0x6f990011], cl; mov rax, qword ptr [rip + 0x8b179]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010d3ea: div dword ptr [rdi - 0x15]; mov eax, r8d; ret; 
0x0000000000056521: div eax; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x000000000005ea35: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000000bc204: div ecx; mov eax, eax; ret; 
0x0000000000056520: div r8; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x00000000001974b5: divps xmm0, xmmword ptr [rip + 0x271d8]; ret; 
0x00000000001974b4: divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x0000000000157b20: endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157b30: endbr64; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x00000000000dd058: endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000008dee0: endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000041ef0: endbr64; andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x000000000012bfb0: endbr64; cmp edi, 0x56; je 0x12bfc0; mov eax, 7; ret; 
0x0000000000112a00: endbr64; cmp edx, 4; ja 0x112a10; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x00000000000dcfa0: endbr64; cmp esi, 1; je 0xdcfb0; xor eax, eax; ret; 
0x0000000000091e80: endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x000000000009e1f0: endbr64; cmp qword ptr [rip + 0x150d14], 0; je 0x9e200; ret; 
0x000000000012fc00: endbr64; cmp rdi, 0x3ff; ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x000000000013b600: endbr64; lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000241a0: endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x00000000000241b0: endbr64; lea rax, [rip + 0x191abc]; ret; 
0x000000000010c9b0: endbr64; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x000000000010dea0: endbr64; mov eax, 0x102; syscall; cmp rax, -0xfff; jae 0x10deb4; ret; 
0x000000000010ff20: endbr64; mov eax, 0x107; syscall; cmp rax, -0xfff; jae 0x10ff34; ret; 
0x00000000001145c0: endbr64; mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x1145d4; ret; 
0x000000000010fe60: endbr64; mov eax, 0x10a; syscall; cmp rax, -0xfff; jae 0x10fe74; ret; 
0x0000000000120010: endbr64; mov eax, 0x110; syscall; cmp rax, -0xfff; jae 0x120024; ret; 
0x0000000000120070: endbr64; mov eax, 0x11b; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000001200d0: endbr64; mov eax, 0x11f; syscall; cmp rax, -0xfff; jae 0x1200e4; ret; 
0x000000000011f540: endbr64; mov eax, 0x122; syscall; cmp rax, -0xfff; jae 0x11f554; ret; 
0x000000000011fce0: endbr64; mov eax, 0x123; syscall; cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x000000000010eb10: endbr64; mov eax, 0x124; syscall; cmp rax, -0xfff; jae 0x10eb24; ret; 
0x000000000010eb70: endbr64; mov eax, 0x125; syscall; cmp rax, -0xfff; jae 0x10eb84; ret; 
0x000000000011fe00: endbr64; mov eax, 0x126; syscall; cmp rax, -0xfff; jae 0x11fe14; ret; 
0x0000000000120100: endbr64; mov eax, 0x12c; syscall; cmp rax, -0xfff; jae 0x120114; ret; 
0x000000000011fc20: endbr64; mov eax, 0x131; syscall; cmp rax, -0xfff; jae 0x11fc34; ret; 
0x0000000000115500: endbr64; mov eax, 0x132; syscall; cmp rax, -0xfff; jae 0x115514; ret; 
0x0000000000120160: endbr64; mov eax, 0x134; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000001201f0: endbr64; mov eax, 0x13f; syscall; cmp rax, -0xfff; jae 0x120204; ret; 
0x0000000000120220: endbr64; mov eax, 0x14a; syscall; cmp rax, -0xfff; jae 0x120234; ret; 
0x0000000000120250: endbr64; mov eax, 0x14b; syscall; cmp rax, -0xfff; jae 0x120264; ret; 
0x000000000010e350: endbr64; mov eax, 0x15; syscall; cmp rax, -0x1000; ja 0x10e368; ret; 
0x000000000010eb40: endbr64; mov eax, 0x16; syscall; cmp rax, -0xfff; jae 0x10eb54; ret; 
0x0000000000102710: endbr64; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca0: endbr64; mov eax, 0x18; syscall; ret; 
0x0000000000118cc0: endbr64; mov eax, 0x1b; syscall; cmp rax, -0xfff; jae 0x118cd4; ret; 
0x0000000000118c90: endbr64; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x118ca4; ret; 
0x00000000001213b0: endbr64; mov eax, 0x1e; syscall; cmp rax, -0x1000; ja 0x1213c8; ret; 
0x0000000000121450: endbr64; mov eax, 0x1f; syscall; cmp rax, -0x1000; ja 0x121468; ret; 
0x000000000010eab0: endbr64; mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x10eac4; ret; 
0x000000000010eae0: endbr64; mov eax, 0x21; syscall; cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x00000000000d41b0: endbr64; mov eax, 0x24; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e2d90: endbr64; mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000d41e0: endbr64; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e40c0: endbr64; mov eax, 0x27; syscall; ret; 
0x00000000001209c0: endbr64; mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x1209d4; ret; 
0x0000000000120990: endbr64; mov eax, 0x30; syscall; cmp rax, -0xfff; jae 0x1209a4; ret; 
0x0000000000120380: endbr64; mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x120394; ret; 
0x00000000001204e0: endbr64; mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x1204f4; ret; 
0x0000000000120480: endbr64; mov eax, 0x33; syscall; cmp rax, -0xfff; jae 0x120494; ret; 
0x0000000000120450: endbr64; mov eax, 0x34; syscall; cmp rax, -0xfff; jae 0x120464; ret; 
0x00000000000e3170: endbr64; mov eax, 0x3b; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000433d0: endbr64; mov eax, 0x3e; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000e2b40: endbr64; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000001212a0: endbr64; mov eax, 0x40; syscall; cmp rax, -0x1000; ja 0x1212b8; ret; 
0x00000000001213e0: endbr64; mov eax, 0x43; syscall; cmp rax, -0x1000; ja 0x1213f8; ret; 
0x0000000000121230: endbr64; mov eax, 0x44; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x0000000000121260: endbr64; mov eax, 0x47; syscall; cmp rax, -0x1000; ja 0x121278; ret; 
0x000000000010e790: endbr64; mov eax, 0x49; syscall; cmp rax, -0xfff; jae 0x10e7a4; ret; 
0x0000000000116ee0: endbr64; mov eax, 0x4c; syscall; cmp rax, -0x1000; ja 0x116ef8; ret; 
0x0000000000116f10: endbr64; mov eax, 0x4d; syscall; cmp rax, -0x1000; ja 0x116f28; ret; 
0x000000000010ec30: endbr64; mov eax, 0x50; syscall; cmp rax, -0xfff; jae 0x10ec44; ret; 
0x000000000010ec60: endbr64; mov eax, 0x51; syscall; cmp rax, -0xfff; jae 0x10ec74; ret; 
0x0000000000062e80: endbr64; mov eax, 0x52; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x000000000010de70: endbr64; mov eax, 0x53; syscall; cmp rax, -0xfff; jae 0x10de84; ret; 
0x000000000010ff50: endbr64; mov eax, 0x54; syscall; cmp rax, -0xfff; jae 0x10ff64; ret; 
0x000000000010fdd0: endbr64; mov eax, 0x56; syscall; cmp rax, -0xfff; jae 0x10fde4; ret; 
0x000000000010fef0: endbr64; mov eax, 0x57; syscall; cmp rax, -0xfff; jae 0x10ff04; ret; 
0x000000000010fe30: endbr64; mov eax, 0x58; syscall; cmp rax, -0xfff; jae 0x10fe44; ret; 
0x000000000010fe90: endbr64; mov eax, 0x59; syscall; cmp rax, -0xfff; jae 0x10fea4; ret; 
0x000000000010dd80: endbr64; mov eax, 0x5a; syscall; cmp rax, -0xfff; jae 0x10dd94; ret; 
0x000000000010ddb0: endbr64; mov eax, 0x5b; syscall; cmp rax, -0xfff; jae 0x10ddc4; ret; 
0x000000000010f580: endbr64; mov eax, 0x5c; syscall; cmp rax, -0xfff; jae 0x10f594; ret; 
0x000000000010f5b0: endbr64; mov eax, 0x5d; syscall; cmp rax, -0xfff; jae 0x10f5c4; ret; 
0x000000000010f5e0: endbr64; mov eax, 0x5e; syscall; cmp rax, -0xfff; jae 0x10f5f4; ret; 
0x000000000010dd70: endbr64; mov eax, 0x5f; syscall; ret; 
0x0000000000114000: endbr64; mov eax, 0x62; syscall; cmp rax, -0xfff; jae 0x114014; ret; 
0x000000000011ffe0: endbr64; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11fff4; ret; 
0x00000000000e40e0: endbr64; mov eax, 0x66; syscall; ret; 
0x000000000011fe60: endbr64; mov eax, 0x67; syscall; cmp rax, -0xfff; jae 0x11fe74; ret; 
0x00000000000e4100: endbr64; mov eax, 0x68; syscall; ret; 
0x00000000000e40f0: endbr64; mov eax, 0x6b; syscall; ret; 
0x00000000000e4110: endbr64; mov eax, 0x6c; syscall; ret; 
0x00000000000e43a0: endbr64; mov eax, 0x6d; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e40d0: endbr64; mov eax, 0x6e; syscall; ret; 
0x00000000000e43d0: endbr64; mov eax, 0x6f; syscall; ret; 
0x00000000000e4430: endbr64; mov eax, 0x70; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4120: endbr64; mov eax, 0x73; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4460: endbr64; mov eax, 0x76; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4490: endbr64; mov eax, 0x78; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e4370: endbr64; mov eax, 0x79; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x000000000011f3e0: endbr64; mov eax, 0x7a; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f410: endbr64; mov eax, 0x7b; syscall; cmp rax, -0xfff; jae 0x11f424; ret; 
0x00000000000e4400: endbr64; mov eax, 0x7c; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x000000000011fbc0: endbr64; mov eax, 0x7d; syscall; cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x000000000011fbf0: endbr64; mov eax, 0x7e; syscall; cmp rax, -0xfff; jae 0x11fc04; ret; 
0x00000000000439c0: endbr64; mov eax, 0x83; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x000000000010d5f0: endbr64; mov eax, 0x84; syscall; cmp rax, -0xfff; jae 0x10d604; ret; 
0x0000000000120040: endbr64; mov eax, 0x86; syscall; cmp rax, -0xfff; jae 0x120054; ret; 
0x000000000011f600: endbr64; mov eax, 0x87; syscall; cmp rax, -0xfff; jae 0x11f614; ret; 
0x000000000010dc20: endbr64; mov eax, 0x89; syscall; cmp rax, -0xfff; jae 0x10dc34; ret; 
0x000000000010dc50: endbr64; mov eax, 0x8a; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x0000000000114400: endbr64; mov eax, 0x8d; syscall; cmp rax, -0xfff; jae 0x114414; ret; 
0x0000000000102650: endbr64; mov eax, 0x8e; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102680: endbr64; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b0: endbr64; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e0: endbr64; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102740: endbr64; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102770: endbr64; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a0: endbr64; mov eax, 0x94; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x0000000000118d20: endbr64; mov eax, 0x95; syscall; cmp rax, -0xfff; jae 0x118d34; ret; 
0x0000000000118d50: endbr64; mov eax, 0x96; syscall; cmp rax, -0xfff; jae 0x118d64; ret; 
0x0000000000118d80: endbr64; mov eax, 0x97; syscall; cmp rax, -0xfff; jae 0x118d94; ret; 
0x0000000000118db0: endbr64; mov eax, 0x98; syscall; cmp rax, -0xfff; jae 0x118dc4; ret; 
0x0000000000115840: endbr64; mov eax, 0x99; syscall; cmp rax, -0xfff; jae 0x115854; ret; 
0x000000000011fb50: endbr64; mov eax, 0x9a; syscall; cmp rax, -0xfff; jae 0x11fb64; ret; 
0x000000000011ff20: endbr64; mov eax, 0x9b; syscall; cmp rax, -0xfff; jae 0x11ff34; ret; 
0x000000000011fb20: endbr64; mov eax, 0x9e; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x0000000000115380: endbr64; mov eax, 0xa1; syscall; cmp rax, -0xfff; jae 0x115394; ret; 
0x0000000000115440: endbr64; mov eax, 0xa2; syscall; cmp rax, -0xfff; jae 0x115454; ret; 
0x0000000000115350: endbr64; mov eax, 0xa3; syscall; cmp rax, -0xfff; jae 0x115364; ret; 
0x000000000011f380: endbr64; mov eax, 0xa6; syscall; cmp rax, -0xfff; jae 0x11f394; ret; 
0x0000000000115870: endbr64; mov eax, 0xa7; syscall; cmp rax, -0xfff; jae 0x115884; ret; 
0x00000000001158a0: endbr64; mov eax, 0xa8; syscall; cmp rax, -0xfff; jae 0x1158b4; ret; 
0x0000000000118bc0: endbr64; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x118bd4; ret; 
0x0000000000115000: endbr64; mov eax, 0xaa; syscall; cmp rax, -0xfff; jae 0x115014; ret; 
0x0000000000115150: endbr64; mov eax, 0xab; syscall; cmp rax, -0xfff; jae 0x115164; ret; 
0x000000000011f230: endbr64; mov eax, 0xac; syscall; cmp rax, -0xfff; jae 0x11f244; ret; 
0x000000000011f200: endbr64; mov eax, 0xad; syscall; cmp rax, -0xfff; jae 0x11f214; ret; 
0x000000000011fc50: endbr64; mov eax, 0xae; syscall; cmp rax, -0xfff; jae 0x11fc64; ret; 
0x000000000011fc80: endbr64; mov eax, 0xb0; syscall; cmp rax, -0xfff; jae 0x11fc94; ret; 
0x000000000011fd40: endbr64; mov eax, 0xb1; syscall; cmp rax, -0xfff; jae 0x11fd54; ret; 
0x000000000011fef0: endbr64; mov eax, 0xb4; syscall; cmp rax, -0xfff; jae 0x11ff04; ret; 
0x0000000000118b90: endbr64; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000120280: endbr64; mov eax, 0xba; syscall; ret; 
0x000000000011f3b0: endbr64; mov eax, 0xbb; syscall; cmp rax, -0x1000; ja 0x11f3c8; ret; 
0x000000000011d0a0: endbr64; mov eax, 0xc2; syscall; cmp rax, -0xfff; jae 0x11d0b4; ret; 
0x000000000011cfe0: endbr64; mov eax, 0xc4; syscall; cmp rax, -0xfff; jae 0x11cff4; ret; 
0x000000000011d190: endbr64; mov eax, 0xc5; syscall; cmp rax, -0xfff; jae 0x11d1a4; ret; 
0x000000000011d130: endbr64; mov eax, 0xc6; syscall; cmp rax, -0xfff; jae 0x11d144; ret; 
0x000000000011d010: endbr64; mov eax, 0xc7; syscall; cmp rax, -0xfff; jae 0x11d024; ret; 
0x00000000000d0dc0: endbr64; mov eax, 0xc9; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x000000000011fcb0: endbr64; mov eax, 0xd5; syscall; cmp rax, -0xfff; jae 0x11fcc4; ret; 
0x000000000011fb80: endbr64; mov eax, 0xe4; syscall; ret; 
0x0000000000120290: endbr64; mov eax, 0xea; syscall; cmp rax, -0xfff; jae 0x1202a4; ret; 
0x0000000000116cc0: endbr64; mov eax, 0xeb; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x000000000011fdd0: endbr64; mov eax, 0xfd; syscall; cmp rax, -0xfff; jae 0x11fde4; ret; 
0x000000000011fda0: endbr64; mov eax, 0xfe; syscall; cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x000000000011fe30: endbr64; mov eax, 0xff; syscall; cmp rax, -0xfff; jae 0x11fe44; ret; 
0x00000000000479f0: endbr64; mov eax, 0xffffffff; ret; 
0x0000000000146470: endbr64; mov eax, 1; ret; 
0x0000000000113890: endbr64; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x1138a8; ret; 
0x00000000000e5210: endbr64; mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x0000000000148ca0: endbr64; mov eax, 2; ret; 
0x0000000000113560: endbr64; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x113578; ret; 
0x000000000010e320: endbr64; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000010d290: endbr64; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000093560: endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000010d280: endbr64; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000157b40: endbr64; mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000010c9a0: endbr64; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001138c0: endbr64; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000094d10: endbr64; mov eax, dword ptr [rdi + 8]; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008cd80: endbr64; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008cd50: endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000094da0: endbr64; mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000de2e0: endbr64; mov eax, dword ptr [rdi]; ret; 
0x000000000008def0: endbr64; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008df00: endbr64; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x00000000000440a0: endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x0000000000044090: endbr64; mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x00000000001471b0: endbr64; mov eax, dword ptr [rip + 0xa99c2]; test eax, eax; je 0x1471c0; ret; 
0x0000000000118920: endbr64; mov eax, dword ptr [rip + 0xd3a1e]; test edi, edi; je 0x118934; mov dword ptr [rip + 0xd3a14], edi; ret; 
0x000000000010d330: endbr64; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000041b70: endbr64; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000342b0: endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fce0: endbr64; mov eax, edi; bswap eax; ret; 
0x00000000000472f0: endbr64; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x000000000012fcf0: endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000013a7c0: endbr64; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000015e100: endbr64; mov edi, dword ptr [rip + 0x8e326]; test edi, edi; jns 0x15e110; ret; 
0x00000000000a06b0: endbr64; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06d0: endbr64; mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x0000000000163680: endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000928f0: endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000001576c0: endbr64; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de290: endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093e90: endbr64; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000093850: endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000087490: endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000951f0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e40: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095250: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e80: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000095220: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b0: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095240: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea0: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e30: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e20: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000093830: endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000043c50: endbr64; mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000344c0: endbr64; mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e0: endbr64; mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d50: endbr64; mov rax, qword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328e0: endbr64; mov rax, qword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a0: endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000024400: endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab0: endbr64; mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa0: endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163650: endbr64; mov rax, qword ptr [rip + 0x88815]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162ff0: endbr64; mov rax, qword ptr [rip + 0x88e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162fd0: endbr64; mov rax, qword ptr [rip + 0x88e95]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f90: endbr64; mov rax, qword ptr [rip + 0x88ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f70: endbr64; mov rax, qword ptr [rip + 0x88ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f50: endbr64; mov rax, qword ptr [rip + 0x88f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f30: endbr64; mov rax, qword ptr [rip + 0x88f35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160ee0: endbr64; mov rax, qword ptr [rip + 0x8af85]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000015cc60: endbr64; mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153390: endbr64; mov rax, qword ptr [rip + 0x98a05]; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000141410: endbr64; mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000143190: endbr64; mov rax, qword ptr [rip + 0xad885]; test rax, rax; jne 0x1431a8; ret; 
0x00000000001300a0: endbr64; mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x0000000000122ad0: endbr64; mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001202c0: endbr64; mov rax, qword ptr [rip + 0xcbba5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115820: endbr64; mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114e50: endbr64; mov rax, qword ptr [rip + 0xd7005]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x00000000001145a0: endbr64; mov rax, qword ptr [rip + 0xd78c5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dde0: endbr64; mov rax, qword ptr [rip + 0xde085]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fec90: endbr64; mov rax, qword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000342d0: endbr64; mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034450: endbr64; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034460: endbr64; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000094c40: endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000047340: endbr64; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000047300: endbr64; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000093860: endbr64; mov rax, rdi; ret; 
0x0000000000121480: endbr64; mov rcx, qword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121490; ret; 
0x000000000014e020: endbr64; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14e030; ret; 
0x0000000000154720: endbr64; mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154730; ret; 
0x0000000000122240: endbr64; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x1220e0; ret; 
0x0000000000122220: endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x00000000001175b0: endbr64; mov rdi, qword ptr [rip + 0xd81ad]; test rdi, rdi; jne 0x1175d0; mov eax, 1; ret; 
0x0000000000042290: endbr64; movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000042a20: endbr64; movmskps eax, xmm0; and eax, 8; ret; 
0x00000000000271f0: endbr64; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000010c970: endbr64; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000042630: endbr64; pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000421b0: endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000424e0: endbr64; pmovmskb eax, xmm0; and eax, 8; ret; 
0x0000000000023ef0: endbr64; ret; 
0x000000000010c9c0: endbr64; sub rsp, 0x10; push 0; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000010c9e0: endbr64; sub rsp, 0x10; push 1; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef0: endbr64; sub rsp, 0x10; push 2; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000136e90: endbr64; sub rsp, 0x10; push 2; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f10: endbr64; sub rsp, 0x10; push 3; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000117900: endbr64; sub rsp, 8; call 0x117600; mov qword ptr [rip + 0xd7e7c], rax; add rsp, 8; ret; 
0x0000000000047d10: endbr64; sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000141420: endbr64; sub rsp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000157f30: endbr64; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000157f50: endbr64; test edx, edx; jne 0x157f68; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157fa0: endbr64; test edx, edx; jne 0x157fb8; mov r8d, 1; mov eax, r8d; ret; 
0x000000000002fd80: endbr64; test esi, esi; je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x00000000000bbf50: endbr64; test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000b1d60: endbr64; test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf690: endbr64; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x00000000000342c0: endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000094c60: endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x0000000000092870: endbr64; xor eax, eax; ret; 
0x0000000000113820: endbr64; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x113838; ret; 
0x000000000008cd60: endbr64; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd70: endbr64; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000908a0: endbr64; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000023a71: fadd dword ptr [rax]; add byte ptr [rax], al; jne 0x23a3b; ret; 
0x000000000008e5b1: fadd dword ptr [rax]; add byte ptr [rax], al; lea rcx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000000827ef: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000052c0a: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000118cf8: fadd dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118d07; ret; 
0x000000000010ffaa: fadd dword ptr [rax]; ret; 
0x00000000000627a8: fadd dword ptr [rbp - 0x7b]; sal byte ptr [rbp + 2], 0x5b; ret; 
0x000000000006e18a: fadd dword ptr [rbx + 0x10df9e0]; adc byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000158b34: fadd dword ptr [rbx + 0x14807e0]; ret; 
0x000000000015a824: fadd dword ptr [rbx - 0x76b7f820]; ret; 
0x00000000000d6c68: fadd dword ptr [rbx - 0x76b7f840]; ret; 
0x000000000017cb94: fadd dword ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000ec7db: fadd dword ptr [rcx + 0x5c]; pop r13; pop r14; pop r15; ret; 
0x00000000000c7e02: fadd dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x000000000004a174: fadd dword ptr [rcx + 0xf]; xchg esp, eax; ret; 
0x000000000007ea2b: fadd dword ptr [rcx - 0x77]; ret; 
0x0000000000198743: fadd dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000d44e4: fadd dword ptr [rip - 0x76b80000]; ret; 
0x00000000000445c0: fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000121378: fadd qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x121390; ret; 
0x00000000000993a3: fadd qword ptr [rcx - 0x78]; or al, 0x18; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x0000000000190e50: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x190e10; lea rax, [rdi + 7]; ret; 
0x000000000012dc31: fadd qword ptr [rip + 0x158d4800]; xor eax, 0x480005dc; cmove eax, edx; ret; 
0x0000000000041e28: fadd st(0); add rsp, 8; ret; 
0x0000000000041dd4: fadd st(0); ret; 
0x0000000000043f2e: fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000188a7b: fcmovnb st(0), st(5); std; xlatb; ret; 
0x00000000000e1c33: fcom dword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000023a53: fcomp dword ptr [rax + rax]; ret; 
0x0000000000088136: fcomp dword ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000a2c3b: fcomp dword ptr [rbx + 0x48]; cmovne eax, edi; ret; 
0x00000000000c9ffb: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000c9f07: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000008d885: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000089dff: fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000001974a5: fcomp dword ptr [rbx + 0x7420e783]; adc bl, dh; movups xmm0, xmmword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x00000000000f4d02: fdiv st(2); dec dword ptr [rax - 0x77]; ret; 
0x000000000005d7bc: fdiv st(6); ret; 
0x000000000006e3ec: fdiv st(7), st(0); inc dword ptr [rbx + rcx*4 + 0x63]; or byte ptr [rcx - 0x7d], al; retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000012dc98: fdivp st(0); dec dword ptr [rax - 0x73]; adc eax, 0xfff8ddfe; cmove rax, rdx; ret; 
0x000000000005d9dc: fdivr dword ptr [rsi - 0x7cbeffec]; in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000120d60: fdivr qword ptr [rax]; idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000009f868: fdivr st(6), st(0); adc al, 0; ret; 
0x00000000000a273e: fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000012a4cd: fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000017c90d: fdivr st(7); ret; 
0x00000000000b661e: fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000f0525: fdivrp st(6); ret; 
0x0000000000190fb2: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x1910a0; lea rax, [rdi + 0xf]; ret; 
0x00000000000a478e: fiadd dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x000000000006bf53: fiadd dword ptr [rcx + 1]; retf 0x8948; ret; 
0x000000000018b482: fiadd dword ptr [rcx]; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000a3fe3: fiadd dword ptr [rdi + rcx - 0x4a]; add byte ptr [r9 + 0xf], 0x93; ret; 
0x00000000000c945d: fiadd word ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x00000000001847de: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000018a74e: fiadd word ptr [rcx]; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000048104: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048153: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000141282: ficom dword ptr [rcx]; out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x000000000011cdfe: ficom word ptr [rdi - 0x10]; dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x000000000018464f: fidiv dword ptr [rbx - 0x32]; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000112d11: fidivr dword ptr [rip - 0x1000]; mov eax, 0; cmova eax, edx; ret; 
0x0000000000054488: fild dword ptr [rax + 0xf3a007d]; xchg esp, eax; ret; 
0x0000000000075ff8: fild dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000113b2a: fild dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x000000000006dc6a: fild dword ptr [rcx + 0x80e2]; add byte ptr [rbx - 0x9bef71d], al; ret; 
0x00000000000a8744: fild dword ptr [rcx - 0x3a]; add eax, dword ptr [rax]; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000a4f2d: fild dword ptr [rcx - 0x7d]; ret; 
0x00000000000428ff: fild dword ptr [rip + 0x179e6b]; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x000000000004263e: fild dword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000041d28: fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000d0292: fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000013c674: fild word ptr [rax + rcx*4 + 0x19]; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000ca04d: fild word ptr [rdx + 0x1f0ffff5]; add byte ptr [rax], 0; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000b1f15: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf845: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000006d0fe: fimul dword ptr [rax - 0x77]; ret; 
0x0000000000041689: fimul dword ptr [rax - 0x7d]; ret; 
0x0000000000132676: fimul dword ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014e384: fimul dword ptr [rcx]; add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x0000000000132675: fimul dword ptr ss:[rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000167d51: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000049dfa: fimul word ptr [rax + 0xf]; mov esi, 0x83480143; ret; 
0x0000000000064825: fimul word ptr [rax - 0x77]; ret; 
0x0000000000066812: fimul word ptr [rax - 0x7d]; ret; 
0x0000000000167d52: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a87f1: fimul word ptr [rcx + rcx*4 - 0x40]; ret; 
0x00000000000f0898: fimul word ptr [rdi]; mov cs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000de2cc: fist dword ptr [rax]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000034545: fistp qword ptr [rcx + 0x1b]; add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000095340: fisttp dword ptr [rax + 0x21]; ret; 
0x000000000013b8d4: fisttp dword ptr [rax + 1]; ret; 
0x0000000000196e82: fisttp dword ptr [rax + 9]; ror dword ptr [rdi], cl; xchg esp, eax; ret; 
0x0000000000121f22: fisttp dword ptr [rax + rax]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000121f19: fisttp dword ptr [rax + rax]; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000056a55: fisttp dword ptr [rax - 0x77]; ret; 
0x0000000000121d17: fisttp dword ptr [rax - 0x77]; sbb eax, 0xca641; pop rbx; ret; 
0x0000000000121cfd: fisttp dword ptr [rax - 0x77]; sbb eax, 0xca65b; pop rbx; ret; 
0x00000000001324d5: fisttp dword ptr [rbx]; add al, ch; ret; 
0x0000000000132591: fisttp dword ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000001324b0: fisttp dword ptr [rbx]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000e65eb: fisttp dword ptr [rcx - 0x77]; test byte ptr [rdi], -0x6c; ret; 
0x000000000015f31b: fisttp dword ptr [rcx]; ret; 
0x000000000013b6b1: fisttp dword ptr [rdi]; test dword ptr [rax], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000042636: fisttp dword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x000000000010e36c: fisttp dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e2f4: fisttp dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113970: fisttp dword ptr [rip - 0x80000000]; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000167f31: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000bb922: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000167f32: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000eb530: fisttp qword ptr [rcx - 0x77]; ret; 
0x00000000000eb4e6: fisttp qword ptr [rcx - 0x7d]; ret; 
0x0000000000167b81: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c7d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bc9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000038e1a: fisttp word ptr [rax - 0x7d]; ret; 
0x0000000000056aef: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000167b82: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c7e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bca: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000822e9: fisttp word ptr [rcx - 0x173fce3e]; popfq; ret; 
0x0000000000037ff1: fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000c8f0b: fisttp word ptr [rdi]; xchg ebx, eax; ret; 
0x000000000010de88: fisttp word ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cf283: fld dword ptr [rax]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x00000000000de2b5: fld dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000c7e11: fld dword ptr [rcx + 0xf]; xchg ebx, eax; ret; 
0x00000000000cf18c: fld dword ptr [rcx + rdi - 0x40]; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x000000000009959a: fld qword ptr [rcx - 0x78]; or al, 0x28; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000012db71: fld qword ptr [rip + 0x158d4800]; adc eax, 0x480005dd; cmove eax, edx; ret; 
0x0000000000041c8e: fld st(0); fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000188756: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000000d6c64: fld xword ptr [rcx]; ret; 
0x0000000000041dd0: fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000041d2c: fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000041c92: fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041bad: fld xword ptr [rsp + 8]; ret; 
0x0000000000041cda: fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c1c: fld xword ptr [rsp - 0x18]; ret; 
0x00000000000d1093: fldcw word ptr [rbp - 0x2708ffef]; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121393: fldcw word ptr [rdx - 0x2708fff4]; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115993: fldenv [rbp + rcx]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ce289: fldenv [rsi + 0xf]; jbe 0xce2dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac0a9: fldenv [rsi + 0xf]; je 0xac0fd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac397: fldenv [rsi + 0xf]; je 0xac3eb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000abfa1: fldenv [rsi + 0xf]; xlatb; ret; 
0x00000000000cf46c: fldenv [rsi + 0xf]; xlatb; retf 0xf66; xlatb; ret; 
0x0000000000055a71: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000ee214: fldpi; leave; nop word ptr [rax + rax]; ret; 
0x00000000000579a1: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000055bb4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x00000000001221f4: fmul dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e4: fmul dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000004f6a8: fmul dword ptr [rax - 0x39]; ret; 
0x00000000000469a3: fmul dword ptr [rax - 0x3f]; call 0x6491b5ae; ret; 
0x0000000000198d4e: fmul dword ptr [rax - 0x3f]; call 0x6ca6d559; ret; 
0x0000000000198da2: fmul dword ptr [rax - 0x3f]; call 0x6ca6d5ad; ret; 
0x000000000008a25e: fmul dword ptr [rax - 0x77]; ret; 
0x0000000000127a39: fmul dword ptr [rax - 0x77]; ror byte ptr [rcx + 0x2b], 1; cmp byte ptr [r8 + 0x39], r9b; ret; 
0x00000000000e8146: fmul dword ptr [rax - 0x7d]; ret; 
0x0000000000158b31: fmul dword ptr [rax - 9]; fadd dword ptr [rbx + 0x14807e0]; ret; 
0x000000000006bf01: fmul dword ptr [rbx + 0xf660446]; insb byte ptr [rdi], dx; ret; 
0x000000000011ce6c: fmul dword ptr [rcx + rcx*4 - 0x40]; pop rbx; ret; 
0x00000000000a53d6: fmul dword ptr [rdi]; test dword ptr [rax + rbp*8 - 0x76b70001], esi; ret; 
0x00000000000c856a: fmul dword ptr [rdi]; xchg ebx, eax; ret; 
0x0000000000168121: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a04e9: fmul qword ptr [rax + rax]; cmovne rax, rdx; ret; 
0x0000000000066620: fmul qword ptr [rax - 0x77]; ret; 
0x00000000000de7d3: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000168122: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000eb29f: fmul qword ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000010e254: fmul qword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000198dbe: fnsave dword ptr [rbp - 0x11]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000188754: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000010d436: fnsave dword ptr [rdi - 0x19]; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0896: fnstcw word ptr [rcx]; fimul word ptr [rdi]; mov cs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000cf16b: fnstcw word ptr [rcx]; sar dword ptr [rax + 1], 0x44; cmovl ecx, eax; mov eax, r9d; ret; 
0x0000000000041e23: fnstcw word ptr [rdx + 0xa]; jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x0000000000041e55: fnstcw word ptr [rdx - 0x2e]; jne 0x41e2a; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000098093: fnstcw word ptr [rip + 0x31450015]; shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000041dea: fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x0000000000041d30: fscale; fstp st(1); ret; 
0x00000000000e1b5b: fst dword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000bd613: fst dword ptr [rdx]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000e16f3: fst qword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000141d2e: fstp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000000a2226: fstp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000141601: fstp qword ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efab], cl; ret; 
0x00000000001414cf: fstp qword ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7efbb], cl; ret; 
0x000000000012d1ad: fstp qword ptr [rbx - 0x48]; add eax, 0x41000000; pop rsp; pop rbp; ret; 
0x00000000000d0298: fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041c58: fstp st(0); and ax, 0x8000; mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041dec: fstp st(0); and eax, 0x200; ret; 
0x0000000000041e22: fstp st(1); jp 0x41e30; jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x0000000000041d32: fstp st(1); ret; 
0x0000000000041c90: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x0000000000041cde: fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c1a: fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000183b5c: fstp xword ptr [rdx]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000041d94: fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000433ec: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000043428: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000048288: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144d0: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000041ded: fsub dword ptr [rip + 0x200]; ret; 
0x0000000000183d5c: fsub dword ptr [rsi + 0xf]; cmp ah, byte ptr [rbx - 0x25]; cmp ch, byte ptr [rcx]; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000063dbf: fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000000b25c4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000000b164c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000019920c: fsub st(3), st(0); mov cl, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0296: fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000026f73: fsubr qword ptr [rcx + 0x1c]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000041c96: fsubrp st(1); ret; 
0x00000000000ef7c3: fucomi st(1); ret; 
0x000000000011cf2d: fucomi st(3); or al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000184fb2: fucomi st(4); vptest ymm5, ymm0; jae 0x185250; xor eax, eax; vzeroupper; ret; 
0x000000000018bf66: fucomi st(4); vptest ymm5, ymm0; jae 0x18c190; xor eax, eax; vzeroupper; ret; 
0x0000000000117bb7: fucompi st(0); add edi, dword ptr [rsi - 1]; inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x0000000000036184: fucompi st(0); push rsi; ret; 
0x00000000001260d7: fucompi st(0); ret; 
0x0000000000041de8: fxam; fnstsw ax; fstp st(0); and eax, 0x200; ret; 
0x000000000011942b: hlt; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x0000000000192d02: hlt; cmp eax, dword ptr [rsi - 0xc]; jne 0x192e20; ret; 
0x00000000000a8853: hlt; cmp ecx, esi; je 0xa8848; ret; 
0x0000000000128a98: hlt; cwde; out dx, eax; inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x00000000000d4418: hlt; dec dword ptr [rax - 0x77]; ret; 
0x0000000000118ee6: hlt; dec dword ptr [rcx + rcx*4 - 0x20]; pop r12; ret; 
0x00000000001151fc: hlt; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x00000000001158e5: hlt; inc dword ptr [rbp + 0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000db9e4: hlt; inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000db67f: hlt; inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000102a3e: hlt; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000192d05: hlt; jne 0x192e20; ret; 
0x00000000000a8a92: hlt; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8b6a: hlt; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89cd: hlt; mov byte ptr [rdi + 4], dl; ret; 
0x000000000016d4aa: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016812e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d4a3: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168287: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682a3: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000183dbb: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000192313: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000000a881b: hlt; ret; 
0x0000000000192317: hlt; sub eax, edx; ret; 
0x00000000000bc7d0: idiv bh; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000d3687: idiv bh; dec dword ptr [rax - 0x7d]; ret; 
0x000000000007b9b0: idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x0000000000116570: idiv bh; mov eax, 1; add rsp, 8; ret; 
0x00000000000bc91b: idiv bh; pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000271fa: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x00000000000a8e30: idiv edi; add rsp, 8; ret; 
0x0000000000121d12: idiv edi; dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0xca641; pop rbx; ret; 
0x00000000000d8b15: idiv edi; dec dword ptr [rax + 1]; ret; 
0x0000000000075cc5: idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000075341: idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000074f72: idiv edi; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x0000000000075b4d: idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x0000000000074f4f: idiv edi; inc dword ptr [rcx]; ret; 
0x0000000000115cb1: idiv edi; mov eax, 1; add rsp, 8; ret; 
0x0000000000120d62: idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000001153fd: idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f6a0: idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151fd: idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000011f4c7: idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000120e1a: idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x000000000011f96d: idiv edi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000118c51: idiv edi; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000117557: idiv edi; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000114650: idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011f8c5: idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000001211ee: idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000012058d: idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x00000000001147aa: idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120653: idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x0000000000047327: idiv esi; mov edi, edx; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000004734a: idiv esi; ret; 
0x000000000011f69f: idiv r15; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x000000000011f8c4: idiv r15; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000075b4c: idiv rdi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x000000000011f96c: idiv rdi; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011f750: idiv rdi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011f7ff: idiv rdi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000047349: idiv rsi; ret; 
0x00000000000445be: imul al; fadd qword ptr [rax + rax]; add rsp, 8; ret; 
0x00000000000a8e2c: imul al; xchg edi, eax; idiv edi; add rsp, 8; ret; 
0x000000000013655a: imul byte ptr [rdx + 2]; call 0x135ad0; add rsp, 0x18; ret; 
0x00000000000c059c: imul cl; ret; 
0x00000000000de195: imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000de23c: imul eax, dword ptr [rcx + rax], 0x5b; pop rbp; pop r12; ret; 
0x000000000019005e: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x1900b3; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000192ea6: imul eax, edi; shr rax, 0x38; ret; 
0x00000000000ddaff: imul eax; pop rbx; hlt; dec dword ptr [rax - 0x77]; ret; 
0x0000000000037fa7: imul eax; ret; 
0x00000000000f1b63: imul eax; xchg edi, eax; ret; 
0x0000000000157bc1: imul ebp, dword ptr [rax], 0x5b; pop rbp; pop r12; ret; 
0x0000000000026f5b: imul ebx, dword ptr [rax + rax], 0x674c085; ret; 
0x0000000000127cb4: imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008d4e6: imul ebx, dword ptr [rax], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000004757f: imul ebx, dword ptr [rbp + 0x1a], 0x408b0000; pop rax; ret; 
0x0000000000042901: imul ebx, dword ptr [rsi + 0xf660017], -0x15; add eax, 0x179ea3; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000162e5c: imul ebx; inc dword ptr [rbp + 0x31]; leave; add rsp, 8; mov eax, r9d; ret; 
0x0000000000081bf9: imul ecx, dword ptr [rax - 0x7f], -0x3c; call 0x44081c02; mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000081a3b: imul ecx, dword ptr [rax - 0x7f], 0xe8c4; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x0000000000127c14: imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009ea46: imul ecx, dword ptr [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000896d4: imul ecx, dword ptr [rcx + 0x2b], 0x47; and byte ptr [rax + 1], cl; ret; 
0x0000000000118ea2: imul ecx, dword ptr [rip + 0x2f6e800], 0x8d480000; add eax, 0xd69bf; add rsp, 8; ret; 
0x0000000000127b25: imul edi, dword ptr [rax], 0x48; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000048303: imul edi, dword ptr [rbx], 0x8b64001a; add byte ptr [rbx - 0x3e8bfb08], al; mov eax, 0xffffffff; ret; 
0x000000000018fef7: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcbd: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000000e842c: imul edi, edi, -1; dec dword ptr [rax - 0x73]; add bl, byte ptr [r11 + 0x5d]; pop r12; ret; 
0x0000000000127c64: imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000013cbc6: imul edx, edx, 0x3e8; mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000010ec03: imul edx, edx, 0xd8f7000d; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114703: imul esi, dword ptr [rdi + 0xd], 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120703: imul esi, dword ptr [rdi - 0x2708fff4], 0x48028964; mov eax, 0xffffffff; ret; 
0x000000000006e624: imul esi, edx, -1; inc dword ptr [rcx - 9]; ret; 
0x00000000000dfd02: imul esi, esi, 0x64010010; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x0000000000093469: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000009519c: imul esp, dword ptr [rbx*2 + 0x10438941], 0x41; mov dword ptr [rbx + 0x14], 0; ret; 
0x00000000000c4071: imul esp, dword ptr [rbx], -7; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000125bf2: imul esp, dword ptr [rcx + 0x6401000c], 0x4c198941; mov eax, eax; pop rbx; ret; 
0x000000000010d703: imul esp, edi, 0xc764000d; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000192ea5: imul rax, rdi; shr rax, 0x38; ret; 
0x0000000000192d38: in al, 0; add byte ptr [rax], al; ret; 
0x000000000011fb85: in al, 0; add byte ptr [rax], al; syscall; ret; 
0x0000000000029a4f: in al, 0x29; ret; 
0x000000000013f1f8: in al, 0x44; mov eax, edx; ret; 
0x0000000000142714: in al, 0x48; add esp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000012838e: in al, 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000168126: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000d0072: in al, 0x4c; mov eax, esp; pop r12; ret; 
0x000000000002ffb4: in al, 0x4c; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000000095448: in al, 0x5b; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008e243: in al, 0x5b; mov rax, r12; pop rbp; pop r12; pop r14; ret; 
0x000000000010d44a: in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000034b45: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000a0396: in al, 0x5d; mov rax, r12; pop r12; pop r13; ret; 
0x00000000000d0059: in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000421e5: in al, 0x66; ucomiss xmm0, xmm4; jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000155c93: in al, 0x74; ret; 
0x000000000012ecfe: in al, 0x75; cmovl ecx, dword ptr [rcx + 0x415d5be0]; pop rsp; ret; 
0x000000000011c24d: in al, 0x75; cmp dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x00000000000cf5f6: in al, 0x75; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x0000000000127267: in al, 0xe8; ret; 
0x00000000001051b8: in al, 0xeb; ret; 
0x000000000016d48a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000bc032: in al, 0xf3; ret; 
0x0000000000074f77: in al, 0xf; lahf; ret; 
0x00000000000cf5ad: in al, 0xf; test dword ptr [rax + rax - 0xf580000], ebp; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000009e8cd: in al, 0xf; test dword ptr [rdx + 0x4e], ebx; clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000b7898: in al, 6; add byte ptr [rax], al; ret; 
0x000000000010c9e6: in al, dx; adc byte ptr [rdx + 1], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef6: in al, dx; adc byte ptr [rdx + 2], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000136e96: in al, dx; adc byte ptr [rdx + 2], ch; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f16: in al, dx; adc byte ptr [rdx + 3], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000010c9c6: in al, dx; adc byte ptr [rdx], ch; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000151dc9: in al, dx; add byte ptr [rcx + rcx*4 - 0x40], 0x5d; ret; 
0x00000000001558d7: in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e2069; ret; 
0x0000000000155a67: in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e21f9; ret; 
0x000000000015a73a: in al, dx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001534dd: in al, dx; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000048103: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048152: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000153b73: in al, dx; inc dword ptr [rbp + 0x5b0775db]; pop rbp; pop r12; ret; 
0x000000000015d4b3: in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x000000000016d880: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000001170db: in al, dx; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000094667: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000016812a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a8aaa: in al, dx; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8b82: in al, dx; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000016d88a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000012fcdb: in al, dx; nop dword ptr [rax]; endbr64; mov eax, edi; bswap eax; ret; 
0x000000000011d234: in al, dx; or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011d17b: in al, dx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000141d60: in al, dx; or al, byte ptr [rax]; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x0000000000052a50: in al, dx; or al, ch; or esi, edi; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000157f36: in al, dx; or byte ptr [rax - 0x75], cl; jg 0x157f54; call 0x830f0; add rsp, 8; ret; 
0x00000000000a8e26: in al, dx; or byte ptr [rax - 0x77], cl; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000138736: in al, dx; or byte ptr [rdi + 0x400], bh; call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x00000000000445b6: in al, dx; or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000198f40: in al, dx; outsd dx, dword ptr [rsi]; cld; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x56f20], 0; ret; 
0x000000000008e1a2: in al, dx; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000a88d3: in al, dx; ret; 
0x000000000010dcd9: in al, dx; sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x000000000012dc73: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbb3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daf3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x00000000000a09d3: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0663: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0503: in al, dx; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x0000000000184fb3: in al, dx; vptest ymm5, ymm0; jae 0x185250; xor eax, eax; vzeroupper; ret; 
0x000000000018bf67: in al, dx; vptest ymm5, ymm0; jae 0x18c190; xor eax, eax; vzeroupper; ret; 
0x00000000000a08dd: in eax, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xd24e9; cmovne rax, rdx; ret; 
0x00000000000a083d: in eax, 0; add byte ptr [rax - 0x73], cl; adc eax, 0xd2569; cmovne rax, rdx; ret; 
0x0000000000167f36: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000115887: in eax, 0x65; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008d7a5: in eax, 0x66; nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000000e4387: in eax, 0x7a; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008ce5b: in eax, 0x7f; cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000014e723: in eax, 0x89; ret; 
0x00000000000e3187: in eax, 0x8c; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015fa2a: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000131a26: in eax, 0xb; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000120087: in eax, 0xbd; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e7664: in eax, 0xc; add al, ch; xor al, 0xe8; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000010eb87: in eax, 0xd2; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012dc97: in eax, 0xde; clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8ddfe; cmove rax, rdx; ret; 
0x000000000010de87: in eax, 0xdf; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bc199: in eax, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000016d50a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000cfae3: in eax, 0xf; je 0xcfb00; add rax, 2; ret; 
0x00000000000bcd55: in eax, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000a08d7: in eax, 2; lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0837: in eax, 2; lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000dd14c: in eax, dx; adc byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd134: in eax, dx; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000005d9e2: in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000119863: in eax, dx; add ecx, ebx; ret; 
0x000000000009fa42: in eax, dx; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x0000000000198b82: in eax, dx; call 0x22330; test rbx, rbx; jne 0x198b75; pop rbx; ret; 
0x0000000000057be4: in eax, dx; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000146f18: in eax, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000011f74f: in eax, dx; idiv rdi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000014f668: in eax, dx; inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x000000000011789f: in eax, dx; jle 0x1178af; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; ret; 
0x0000000000198915: in eax, dx; jne 0x198900; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094aab: in eax, dx; jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d900: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000bb702: in eax, dx; lea rax, [rcx - 1]; ret; 
0x00000000000bb0c9: in eax, dx; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000bb0df: in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb101: in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb11f: in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb13f: in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb165: in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb181: in eax, dx; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb1a1: in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1c1: in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb1e7: in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb209: in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb227: in eax, dx; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb247: in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb263: in eax, dx; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb283: in eax, dx; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb2a3: in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2c3: in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2e9: in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb339: in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bb00f: in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb02d: in eax, dx; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb04d: in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bb06f: in eax, dx; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000bb08f: in eax, dx; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb0af: in eax, dx; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000baf45: in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000baf57: in eax, dx; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000baf6d: in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf85: in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000baf9b: in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafad: in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000bafcb: in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000bafd7: in eax, dx; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000bafed: in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000baf31: in eax, dx; mov byte ptr [rdi], ch; ret; 
0x0000000000118c4f: in eax, dx; mov ecx, 0x448bfff7; and al, 8; add rsp, 0x28; ret; 
0x0000000000167f3a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000e83d2: in eax, dx; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d90a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011d08b: in eax, dx; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000086e22: in eax, dx; ret; 
0x00000000000bb852: in eax, dx; sub rax, 1; ret; 
0x00000000000c9edf: in eax, dx; xchg ebx, eax; add eax, 0x74db8500; sbb dword ptr [rcx], edi; ret; 
0x000000000009e852: in eax, dx; xor eax, eax; ret; 
0x0000000000102aa4: inc al; add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000011fda5: inc byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x000000000011a016: inc byte ptr [rbp - 0x60f0be2e]; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x0000000000055841: inc byte ptr [rbx + 0x87401e2]; mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x00000000000555f9: inc byte ptr [rbx + 0x87401e2]; mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000015d43b: inc byte ptr [rbx]; ja 0x15d450; cmp dx, cx; sete al; ret; 
0x000000000002fd89: inc byte ptr [rbx]; je 0x2fd90; ret; 
0x00000000000bf99d: inc byte ptr [rcx + 0x29]; ret; 
0x00000000000dcfa5: inc byte ptr [rcx]; je 0xdcfb0; xor eax, eax; ret; 
0x000000000009f23e: inc byte ptr [rdi + 0xe]; add dh, dh; jb 0x9f256; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000001193ee: inc byte ptr [rdx]; add byte ptr [rax], al; lea rax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x000000000008ce5e: inc byte ptr [rdx]; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000010d31a: inc byte ptr [rdx]; ja 0x10d326; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x00000000000a8629: inc dword ptr [r8]; mov qword ptr [rdx], rcx; ret; 
0x00000000000fed66: inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000035a22: inc dword ptr [rax - 0x76b7bcc8]; ret; 
0x00000000000e83e8: inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x00000000000e556b: inc dword ptr [rax - 0x7af0f506]; ret; 
0x0000000000196fba: inc dword ptr [rax]; add byte ptr [rax - 0x75], cl; je 0x196fe5; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000075343: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000063c06: inc dword ptr [rax]; add byte ptr [rax], al; add dh, dh; ret; 
0x000000000018edc1: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000000bc138: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; ret; 
0x00000000000c6a99: inc dword ptr [rax]; add byte ptr [rax], al; je 0xc6aa3; mov eax, r8d; ret; 
0x00000000000e5149: inc dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000018edc7: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x000000000011fe35: inc dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fe44; ret; 
0x0000000000094e8a: inc dword ptr [rax]; add byte ptr [rsi + 1], dh; ret; 
0x000000000012fd40: inc dword ptr [rax]; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000000a862a: inc dword ptr [rax]; mov qword ptr [rdx], rcx; ret; 
0x0000000000117078: inc dword ptr [rax]; mov rax, r8; ret; 
0x00000000001170fa: inc dword ptr [rax]; ret; 
0x0000000000102814: inc dword ptr [rbp + 0x31]; leave; add rsp, 8; mov eax, r9d; ret; 
0x00000000000ed9c5: inc dword ptr [rbp + 0x31]; shl byte ptr [rsi + 0xf], cl; outsb dx, byte ptr [rsi]; ret; 
0x00000000001158e6: inc dword ptr [rbp + 0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000e2ec6: inc dword ptr [rbp + 0x480575c0]; add esp, 8; ret; 
0x000000000015cc35: inc dword ptr [rbp + 0x480e78c0]; add esp, 8; pop rbp; pop r12; ret; 
0x0000000000153b74: inc dword ptr [rbp + 0x5b0775db]; pop rbp; pop r12; ret; 
0x000000000014e03c: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000522af: inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; movzx eax, al; ret; 
0x000000000015d4b4: inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x000000000010c7f7: inc dword ptr [rbp - 0x74f38a40]; push rbx; add al, 0xeb; ret; 
0x000000000013ab92: inc dword ptr [rbp - 0x77]; ret; 
0x000000000011c24a: inc dword ptr [rbp - 0x7b]; in al, 0x75; cmp dword ptr [rbx + 0x5d], ebx; pop r12; ret; 
0x0000000000074f74: inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x0000000000117bbc: inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x0000000000026f70: inc dword ptr [rbx + 0x1c69dc0d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000113e9f: inc dword ptr [rbx + 0x478930c8]; or byte ptr [rax + 0x100], bh; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000001465c6: inc dword ptr [rbx + 0xaa5120d]; add byte ptr [rdx], al; add rsp, 8; lea rax, [rip + 0xaa527]; ret; 
0x0000000000140ef0: inc dword ptr [rbx + 0xaf8cc0d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x000000000006e3ee: inc dword ptr [rbx + rcx*4 + 0x63]; or byte ptr [rcx - 0x7d], al; retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000071182: inc dword ptr [rbx - 0x78f0d008]; ret; 
0x000000000013b5e7: inc dword ptr [rbx - 0xc8b0a08]; pop rbx; ret; 
0x000000000012fc07: inc dword ptr [rbx]; add byte ptr [rax], al; ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x0000000000047d78: inc dword ptr [rbx]; add byte ptr [rax], al; xor eax, ecx; ret; 
0x00000000000bc219: inc dword ptr [rbx]; div ecx; mov eax, eax; ret; 
0x00000000000bc164: inc dword ptr [rbx]; ret; 
0x000000000012fd12: inc dword ptr [rcx + 0xe2]; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x00000000000eb5a5: inc dword ptr [rcx + 0xf]; mov dh, 0x43; add dword ptr [rcx - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000d60b2: inc dword ptr [rcx + 0xf]; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014f669: inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x0000000000057d9b: inc dword ptr [rcx + rbp - 0x38]; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057de1: inc dword ptr [rcx + rbp - 0x40]; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000e2fce: inc dword ptr [rcx + rcx*4 - 0x18]; pop rbp; pop r12; pop r13; ret; 
0x0000000000081ec2: inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c6b49: inc dword ptr [rcx + rcx*4 - 0x38]; pop rbx; ret; 
0x0000000000041cff: inc dword ptr [rcx + rcx*4 - 0x3e]; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x0000000000085431: inc dword ptr [rcx + rcx*4 - 0x40]; pop rbp; pop r12; ret; 
0x0000000000054db5: inc dword ptr [rcx + rcx*4 - 0x40]; ret; 
0x00000000000e2b8f: inc dword ptr [rcx - 0x48]; add byte ptr [rax], al; add byte ptr [rax], al; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000117558: inc dword ptr [rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, r8d; add rsp, 8; ret; 
0x0000000000064822: inc dword ptr [rcx - 0x77]; fimul word ptr [rax - 0x77]; ret; 
0x00000000000a46f9: inc dword ptr [rcx - 0x7d]; ret; 
0x000000000006d4c7: inc dword ptr [rcx - 0xa]; ret; 
0x0000000000075b4f: inc dword ptr [rcx - 1]; push rsp; ret; 
0x000000000006ced4: inc dword ptr [rcx - 9]; ret; 
0x000000000007d0c0: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000015a7da: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000162de3: inc dword ptr [rcx]; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000074f51: inc dword ptr [rcx]; ret; 
0x000000000013bf10: inc dword ptr [rip + 0xba]; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000cf5ab: inc dword ptr [rsp + riz*8 + 0xac850f]; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000013bf0b: inc dword ptr [rsp + rsi*2]; sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x00000000000bb92a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb927: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb924: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000041b7d: inc eax; shr eax, 0x1f; ret; 
0x00000000000da9ee: inc edi; add ebp, dword ptr [rbx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000db9e5: inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000db680: inc edi; add ecx, dword ptr [rdx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bb929: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb926: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb923: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000009563a: insb byte ptr [rdi], dx; adc eax, 0x5be97500; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000151f0d: insb byte ptr [rdi], dx; add rsp, 0x30; pop rbx; ret; 
0x0000000000041cdb: insb byte ptr [rdi], dx; and al, 0xe8; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041c1d: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000d0293: insb byte ptr [rdi], dx; and al, 0xf0; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041dd1: insb byte ptr [rdi], dx; and al, 8; fadd st(0); ret; 
0x0000000000041d2d: insb byte ptr [rdi], dx; and al, 8; fscale; fstp st(1); ret; 
0x0000000000041c93: insb byte ptr [rdi], dx; and al, 8; fsubrp st(1); ret; 
0x0000000000041bae: insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000014d308: insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x0000000000115214: insb byte ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000025803: insb byte ptr [rdi], dx; ret; 
0x0000000000047ce6: insb byte ptr [rdi], dx; rol dword ptr [rcx + rcx*4 - 0x40], 0xf; adc dword ptr [rdi], eax; ret; 
0x0000000000091f03: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x00000000000874f8: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000014b494: insb byte ptr [rdi], dx; test al, 6; add al, ch; ret; 
0x00000000000a4441: insd dword ptr [rdi], dx; adc dword ptr [rax], eax; add byte ptr [rcx - 9], al; ret; 
0x00000000000d123c: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add cl, al; stc; add cl, byte ptr [rax - 0x77]; ret; 
0x00000000000471df: insd dword ptr [rdi], dx; mov bl, 0xfd; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x00000000000529f4: insd dword ptr [rdi], dx; mov esp, 0x8d480019; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000115168: insd dword ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000048150: insd dword ptr [rdi], dx; out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000013859f: insd dword ptr [rdi], dx; popfq; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000086e98: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918f1: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000105f95: insd dword ptr [rdi], dx; sbb al, ch; xchg esp, eax; ret; 
0x0000000000112bcf: insd dword ptr [rdi], dx; sbb bh, al; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x000000000008c084: insd dword ptr [rdi], dx; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000033d57: insd dword ptr [rdi], dx; sbb byte ptr [rbx], 0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000055073: insd dword ptr [rdi], dx; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015ca86: insd dword ptr [rdi], dx; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000094723: int 0x15; add byte ptr [rbx - 0x39], bl; add eax, 0x15cd5f; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000e2e6f: int 0x17; sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000117591: int 0x41; mov eax, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x00000000000bcd77: int 0x48; lea eax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0467: int 0x48; lea eax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000001333a3: int 0xb; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000f57d9: int 0xf2; dec dword ptr [rax - 0x77]; ret; 
0x000000000018e4ef: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000005ea36: int1; add r8d, eax; mov eax, r8d; ret; 
0x00000000000aa558: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000102a3b: int1; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x00000000001909e6: int1; dec byte ptr [rax + 0x7f]; jg 0x1909ef; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190b70: int1; dec byte ptr [rax + 0x7f]; jg 0x190b79; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190810: int1; dec byte ptr [rax + 0x7f]; jl 0x19082d; cld; vzeroupper; ret; 
0x00000000001154bc: int1; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000102813: int1; inc dword ptr [rbp + 0x31]; leave; add rsp, 8; mov eax, r9d; ret; 
0x0000000000092a1b: int1; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x00000000000a8855: int1; je 0xa8848; ret; 
0x000000000018fcf5: int1; jl 0x18fd40; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000001903e1: int1; jl 0x19042c; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e8: int1; jl 0x190433; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903ef: int1; jl 0x19043a; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000190402: int1; jl 0x19044d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190409: int1; jl 0x190454; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190410: int1; jl 0x19045b; adc dword ptr [rsi - 1], edx; ret; 
0x000000000019041d: int1; jl 0x190468; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190423: int1; jl 0x19046e; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001904ea: int1; jl 0x190535; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001904f1: int1; jl 0x19053c; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001904f8: int1; jl 0x190543; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000190542: int1; jl 0x19058d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190549: int1; jl 0x190594; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190550: int1; jl 0x19059b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000001905df: int1; jl 0x19062a; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905e6: int1; jl 0x190631; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905ed: int1; jl 0x190638; adc dword ptr [rsi + 7], edx; ret; 
0x000000000011487b: int1; jne 0x11488b; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000a88d1: int1; jne 0xa88c0; ret; 
0x000000000018aeb3: int1; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000011ce66: int1; mov byte ptr [rdx], 0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x000000000011357b: int1; mov byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000bc205: int1; mov eax, eax; ret; 
0x000000000016d2fb: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001686ff: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001494a0: int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000012d07e: int1; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000016d2f3: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000168877: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168893: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014d275: int1; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x00000000001922e3: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000000bcd7c: int1; or al, 0; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000005430e: int1; pop rbx; ret; 
0x000000000005557b: int1; push -0x2708ffe7; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001122e9: int1; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000bdfbe: int1; ret; 
0x0000000000129655: int1; shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000012dc7b: int1; sub dword ptr [rsi], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x6297a; cmove rax, rdx; ret; 
0x00000000001922e7: int1; sub eax, edx; ret; 
0x0000000000185041: int1; sub rax, rcx; je 0x185050; sbb eax, eax; or eax, 1; ret; 
0x000000000015fa20: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x000000000018aea9: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893f9: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000189403: int1; vzeroupper; ret; 
0x00000000000d4241: iretd; add al, 0x31; rol byte ptr [rcx - 0x5c28f401], 0; setb al; add eax, 0x16d; ret; 
0x00000000000c9751: iretd; add eax, 0x89490000; ret; 
0x00000000000dd769: iretd; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001296d2: iretd; cmovne eax, esi; ret; 
0x00000000000b1ab3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000005ea22: iretd; ja 0x5ea08; mov eax, r8d; ret; 
0x000000000018b959: iretd; jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001906f4: iretd; jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbee: iretd; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000008ac52: iretd; mov dword ptr [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e2d43: iretd; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151f5: iretd; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120e12: iretd; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x00000000001147a2: iretd; mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000aa622: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183fa6: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000019925d: iretd; nop; call 0xffffffff8038a263; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001331f3: iretd; or eax, dword ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000004134d: iretd; ret; 
0x000000000005b4be: iretd; rstorssp dword ptr [r8 - 8]; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000001028cf: ja 0x1028d7; setne al; movzx eax, al; ret; 
0x000000000010c390: ja 0x10c3f0; ret; 
0x000000000010c440: ja 0x10c4a0; ret; 
0x000000000010c90e: ja 0x10c978; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c9b5: ja 0x10c9bb; xor eax, eax; ret; 
0x000000000010c962: ja 0x10c9cc; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d31c: ja 0x10d326; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x000000000010d3eb: ja 0x10d3d8; mov eax, r8d; ret; 
0x000000000010d437: ja 0x10d420; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d5d8: ja 0x10d59a; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d6e0: ja 0x10d6e8; ret; 
0x000000000010d6d1: ja 0x10d700; mov eax, 4; syscall; cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x000000000010d73f: ja 0x10d748; ret; 
0x000000000010d730: ja 0x10d760; mov eax, 5; syscall; cmp rax, -0x1000; ja 0x10d748; ret; 
0x000000000010d7a0: ja 0x10d7a8; ret; 
0x000000000010d791: ja 0x10d7c0; mov eax, 6; syscall; cmp rax, -0x1000; ja 0x10d7a8; ret; 
0x000000000010db28: ja 0x10db30; ret; 
0x000000000010db8b: ja 0x10db90; ret; 
0x000000000010dbe5: ja 0x10dbf0; ret; 
0x000000000010dbd6: ja 0x10dc08; mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x000000000010de1e: ja 0x10de28; ret; 
0x000000000010e1f8: ja 0x10e250; ret; 
0x000000000010e29d: ja 0x10e2f0; ret; 
0x000000000010e331: ja 0x10e338; ret; 
0x000000000010e361: ja 0x10e368; ret; 
0x000000000010ea3d: ja 0x10ea80; ret; 
0x000000000010ebbd: ja 0x10ec00; ret; 
0x0000000000112a07: ja 0x112a10; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x0000000000112b8d: ja 0x112be0; ret; 
0x0000000000113210: ja 0x113288; ret; 
0x00000000001132d4: ja 0x1132e0; ret; 
0x0000000000113319: ja 0x113320; ret; 
0x0000000000113420: ja 0x113480; ret; 
0x00000000001134d0: ja 0x113530; ret; 
0x0000000000113571: ja 0x113578; ret; 
0x000000000011382e: ja 0x113838; ret; 
0x0000000000113864: ja 0x113870; ret; 
0x00000000001138a1: ja 0x1138a8; ret; 
0x0000000000113917: ja 0x113921; ret; 
0x000000000011390b: ja 0x113945; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000113960: ja 0x11396a; ret; 
0x0000000000113dc5: ja 0x113dcf; clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000113d87: ja 0x113dd8; ret; 
0x0000000000113f9a: ja 0x113fa0; ret; 
0x0000000000113fdb: ja 0x113fe0; ret; 
0x00000000001143d1: ja 0x1143e0; mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000001144c0: ja 0x1144e8; xor eax, eax; ret; 
0x000000000011460d: ja 0x114660; ret; 
0x00000000001146ad: ja 0x114700; ret; 
0x0000000000114704: ja 0x114713; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114753: ja 0x1147b8; ret; 
0x0000000000114813: ja 0x114878; ret; 
0x00000000001151a0: ja 0x115210; ret; 
0x00000000001153cd: ja 0x115410; ret; 
0x000000000011548d: ja 0x1154d0; ret; 
0x000000000011554d: ja 0x115550; ret; 
0x0000000000116cd1: ja 0x116cd8; ret; 
0x0000000000116eb6: ja 0x116ec0; ret; 
0x0000000000116ef1: ja 0x116ef8; ret; 
0x0000000000116f21: ja 0x116f28; ret; 
0x0000000000118b0c: ja 0x118b70; pop rbx; pop rbp; ret; 
0x0000000000118c0d: ja 0x118c60; ret; 
0x000000000011c6e8: ja 0x11c6f0; ret; 
0x000000000011f2c9: ja 0x11f2e0; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x000000000011f3c1: ja 0x11f3c8; ret; 
0x000000000011f466: ja 0x11f4d8; ret; 
0x000000000011f4c5: ja 0x11f518; idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x000000000011f519: ja 0x11f520; ret; 
0x000000000011f650: ja 0x11f6b0; ret; 
0x000000000011f700: ja 0x11f760; ret; 
0x000000000011f7b0: ja 0x11f810; ret; 
0x000000000011f860: ja 0x11f8d8; ret; 
0x000000000011f92d: ja 0x11f980; ret; 
0x000000000011f9f5: ja 0x11fa28; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011fa59: ja 0x11fa60; ret; 
0x00000000001202fd: ja 0x120350; ret; 
0x00000000001203cd: ja 0x120420; ret; 
0x0000000000120536: ja 0x1205a0; ret; 
0x00000000001205f0: ja 0x120660; ret; 
0x00000000001206ad: ja 0x120700; ret; 
0x0000000000120756: ja 0x1207c0; ret; 
0x000000000012080d: ja 0x120860; ret; 
0x00000000001208b0: ja 0x120928; ret; 
0x0000000000120d10: ja 0x120d70; ret; 
0x0000000000120dc0: ja 0x120e28; ret; 
0x0000000000120e70: ja 0x120ed0; ret; 
0x0000000000120fdd: ja 0x120fec; movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000001210e0: ja 0x121140; ret; 
0x0000000000121190: ja 0x121200; ret; 
0x0000000000121241: ja 0x121248; ret; 
0x0000000000121271: ja 0x121278; ret; 
0x00000000001212b1: ja 0x1212b8; ret; 
0x0000000000121384: ja 0x121390; ret; 
0x00000000001213c1: ja 0x1213c8; ret; 
0x00000000001213f1: ja 0x1213f8; ret; 
0x0000000000121424: ja 0x121430; ret; 
0x0000000000121461: ja 0x121468; ret; 
0x0000000000127cf4: ja 0x127d10; cmp qword ptr [rbx + 0x28], 0; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000012e9d3: ja 0x12e9e0; ret; 
0x000000000012e9c7: ja 0x12e9f4; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x000000000012ed7f: ja 0x12ed92; lea rdx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x000000000012fc0b: ja 0x12fc15; mov rax, rdi; sar rax, 6; ret; 
0x000000000013c396: ja 0x13c399; ret; 
0x000000000013c652: ja 0x13c63c; mov eax, 0xffffffff; ret; 
0x000000000014768f: ja 0x1476d9; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001494c5: ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000014949c: ja 0x1494b0; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000157706: ja 0x157720; mov eax, r8d; ret; 
0x000000000015773e: ja 0x157758; mov rax, r8; ret; 
0x0000000000158003: ja 0x15801d; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x000000000015d43d: ja 0x15d450; cmp dx, cx; sete al; ret; 
0x0000000000188c98: ja 0x188ce2; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000189309: ja 0x1893a0; je 0x189390; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189a29: ja 0x189b80; je 0x189b70; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189e14: ja 0x189c20; je 0x189c10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a0a9: ja 0x18a140; je 0x18a130; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018ab04: ja 0x18a7d0; je 0x18a7c0; vzeroupper; ret; 
0x000000000018a9e0: ja 0x18a8b0; je 0x18a8a0; vzeroupper; ret; 
0x000000000018aa2a: ja 0x18aa6c; sub r8, 0x20; jb 0x18a645; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018ad99: ja 0x18ae30; je 0x18ae20; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000018b844: ja 0x18b500; je 0x18b4f0; mov rax, rdi; vzeroupper; ret; 
0x000000000018b710: ja 0x18b5e0; je 0x18b5d0; vzeroupper; ret; 
0x000000000018b978: ja 0x18b9b5; jb 0x18b981; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018bbbc: ja 0x18bbfe; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018bcd8: ja 0x18bd1a; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018bdae: ja 0x18bdbe; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018bd4e: ja 0x18bdc7; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018be65: ja 0x18be93; jb 0x18be6b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018d648: ja 0x18d692; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x00000000001901c7: ja 0x1901c2; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000190718: ja 0x19076d; jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001909e3: ja 0x1909e7; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190b6d: ja 0x190b71; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190c57: ja 0x190c6b; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190be7: ja 0x190c74; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190d3d: ja 0x190d79; jb 0x190d43; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000246ec: ja 0x2470a; add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000033c2e: ja 0x33ca8; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000000033df5: ja 0x33e07; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000043416: ja 0x43420; ret; 
0x0000000000043462: ja 0x434b0; ret; 
0x0000000000043af5: ja 0x43a7a; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004822d: ja 0x48280; ret; 
0x000000000005b6ad: ja 0x5b680; mov rax, r8; ret; 
0x000000000005ea23: ja 0x5ea08; mov eax, r8d; ret; 
0x0000000000062e91: ja 0x62e98; ret; 
0x0000000000062ec4: ja 0x62ed0; ret; 
0x0000000000062f09: ja 0x62f48; mov r8d, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x0000000000087dec: ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x000000000008d881: ja 0x8d890; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d93c: ja 0x8d950; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000092a1c: ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x000000000009ef20: ja 0x9ef2a; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000009ef19: ja 0x9ef30; mov rax, r8; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000009f21a: ja 0x9f21d; add byte ptr [rax - 0x73], cl; adc eax, 0xd60fc; cmovne rax, rdx; ret; 
0x00000000000a2225: ja 0xa2200; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b6e87: ja 0xb6e8b; ret; 
0x00000000000b6ea3: ja 0xb6ea9; mov dword ptr [rdi], ecx; ret; 
0x00000000000b6ee4: ja 0xb6eee; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f69: ja 0xb6f7b; ret; 
0x00000000000b6fbf: ja 0xb6fd5; ret; 
0x00000000000b7041: ja 0xb705b; ret; 
0x00000000000b7707: ja 0xb770b; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b7743: ja 0xb7749; mov dword ptr [rdi], ecx; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b77c4: ja 0xb77ce; mov qword ptr [rdi], rcx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b78c9: ja 0xb78db; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b794f: ja 0xb7965; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b79d1: ja 0xb79eb; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b8077: ja 0xb8099; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b84c7: ja 0xb84cb; lea rax, [rdi + 2]; ret; 
0x00000000000b84e3: ja 0xb84e9; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b8534: ja 0xb853e; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b8619: ja 0xb862b; lea rax, [rdi + 0x10]; ret; 
0x00000000000b868f: ja 0xb86a5; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8711: ja 0xb872b; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8de7: ja 0xb8deb; lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x00000000000b8fe9: ja 0xb8ffb; lea rax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b909f: ja 0xb90b5; lea rax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b98c7: ja 0xb98e9; sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000ba197: ja 0xba19b; ret; 
0x00000000000ba1b3: ja 0xba1b9; mov dword ptr [rdi], ecx; ret; 
0x00000000000ba1f4: ja 0xba1fe; mov qword ptr [rdi], rcx; ret; 
0x00000000000ba279: ja 0xba28b; ret; 
0x00000000000ba2cf: ja 0xba2e5; ret; 
0x00000000000ba351: ja 0xba36b; ret; 
0x00000000000bac87: ja 0xbac8b; ret; 
0x00000000000baca3: ja 0xbaca9; mov dword ptr [rdi], ecx; ret; 
0x00000000000bace4: ja 0xbacee; mov qword ptr [rdi], rcx; ret; 
0x00000000000bad69: ja 0xbad7b; ret; 
0x00000000000badbf: ja 0xbadd5; ret; 
0x00000000000bae41: ja 0xbae5b; ret; 
0x00000000000bbc08: ja 0xbbc30; jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000bbbc1: ja 0xbbc41; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbdd4: ja 0xbbdf6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbea2: ja 0xbbec4; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbfa6: ja 0xbbfb3; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbf26: ja 0xbbfbc; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfc0: ja 0xbbfd8; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bc047: ja 0xbc05e; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000cb17e: ja 0xcb1cc; or eax, 0x80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000cf281: ja 0xcf360; add rax, rdi; add rax, rcx; ret; 
0x00000000000cf349: ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000d0dd1: ja 0xd0dd8; ret; 
0x00000000000d0ee6: ja 0xd0ef0; ret; 
0x00000000000d1086: ja 0xd1090; ret; 
0x00000000000dd07d: ja 0xdd047; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd0fd: ja 0xdd0c7; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000dd12b: ja 0xdd130; ret; 
0x00000000000dd11c: ja 0xdd148; mov eax, 0xe3; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2c1: ja 0xde2c8; ret; 
0x00000000000e2c40: ja 0xe2ca0; ret; 
0x00000000000e2cf3: ja 0xe2d60; ret; 
0x00000000000e2e4d: ja 0xe2e80; ret; 
0x00000000000e2e68: ja 0xe2e92; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x0000000000102661: jae 0x102664; ret; 
0x0000000000102691: jae 0x102694; ret; 
0x00000000001026c1: jae 0x1026c4; ret; 
0x00000000001026f1: jae 0x1026f4; ret; 
0x0000000000102721: jae 0x102724; ret; 
0x0000000000102751: jae 0x102754; ret; 
0x0000000000102781: jae 0x102784; ret; 
0x00000000001027b1: jae 0x1027b4; ret; 
0x000000000010d601: jae 0x10d604; ret; 
0x000000000010dc31: jae 0x10dc34; ret; 
0x000000000010dc61: jae 0x10dc64; ret; 
0x000000000010dd91: jae 0x10dd94; ret; 
0x000000000010ddc1: jae 0x10ddc4; ret; 
0x000000000010de81: jae 0x10de84; ret; 
0x000000000010deb1: jae 0x10deb4; ret; 
0x000000000010e7a1: jae 0x10e7a4; ret; 
0x000000000010eac1: jae 0x10eac4; ret; 
0x000000000010eaf1: jae 0x10eaf4; ret; 
0x000000000010eb21: jae 0x10eb24; ret; 
0x000000000010eb51: jae 0x10eb54; ret; 
0x000000000010eb81: jae 0x10eb84; ret; 
0x000000000010ec41: jae 0x10ec44; ret; 
0x000000000010ec71: jae 0x10ec74; ret; 
0x000000000010f591: jae 0x10f594; ret; 
0x000000000010f5c1: jae 0x10f5c4; ret; 
0x000000000010f5f1: jae 0x10f5f4; ret; 
0x000000000010f624: jae 0x10f627; ret; 
0x000000000010fde1: jae 0x10fde4; ret; 
0x000000000010fe14: jae 0x10fe17; ret; 
0x000000000010fe41: jae 0x10fe44; ret; 
0x000000000010fe71: jae 0x10fe74; ret; 
0x000000000010fea1: jae 0x10fea4; ret; 
0x000000000010fed4: jae 0x10fed7; ret; 
0x000000000010ff01: jae 0x10ff04; ret; 
0x000000000010ff31: jae 0x10ff34; ret; 
0x000000000010ff61: jae 0x10ff64; ret; 
0x00000000001131d4: jae 0x1131d7; ret; 
0x0000000000113d49: jae 0x113d53; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000114011: jae 0x114014; ret; 
0x0000000000114411: jae 0x114414; ret; 
0x00000000001145d1: jae 0x1145d4; ret; 
0x0000000000115011: jae 0x115014; ret; 
0x0000000000115161: jae 0x115164; ret; 
0x0000000000115361: jae 0x115364; ret; 
0x0000000000115391: jae 0x115394; ret; 
0x0000000000115451: jae 0x115454; ret; 
0x0000000000115511: jae 0x115514; ret; 
0x0000000000115851: jae 0x115854; ret; 
0x0000000000115881: jae 0x115884; ret; 
0x00000000001158b1: jae 0x1158b4; ret; 
0x0000000000118963: jae 0x118966; ret; 
0x0000000000118ba1: jae 0x118ba4; ret; 
0x0000000000118bd1: jae 0x118bd4; ret; 
0x0000000000118ca1: jae 0x118ca4; ret; 
0x0000000000118cd1: jae 0x118cd4; ret; 
0x0000000000118d04: jae 0x118d07; ret; 
0x0000000000118d31: jae 0x118d34; ret; 
0x0000000000118d61: jae 0x118d64; ret; 
0x0000000000118d91: jae 0x118d94; ret; 
0x0000000000118dc1: jae 0x118dc4; ret; 
0x000000000011cfc4: jae 0x11cfc7; ret; 
0x000000000011cff1: jae 0x11cff4; ret; 
0x000000000011d021: jae 0x11d024; ret; 
0x000000000011d054: jae 0x11d057; ret; 
0x000000000011d084: jae 0x11d087; ret; 
0x000000000011d0b1: jae 0x11d0b4; ret; 
0x000000000011d0e4: jae 0x11d0e7; ret; 
0x000000000011d111: jae 0x11d114; ret; 
0x000000000011d141: jae 0x11d144; ret; 
0x000000000011d174: jae 0x11d177; ret; 
0x000000000011d1a1: jae 0x11d1a4; ret; 
0x000000000011d1d4: jae 0x11d1d7; ret; 
0x000000000011f211: jae 0x11f214; ret; 
0x000000000011f241: jae 0x11f244; ret; 
0x000000000011f391: jae 0x11f394; ret; 
0x000000000011f3f1: jae 0x11f3f4; ret; 
0x000000000011f421: jae 0x11f424; ret; 
0x000000000011f551: jae 0x11f554; ret; 
0x000000000011f5e4: jae 0x11f5e7; ret; 
0x000000000011f611: jae 0x11f614; ret; 
0x000000000011fb31: jae 0x11fb34; ret; 
0x000000000011fb61: jae 0x11fb64; ret; 
0x000000000011fba4: jae 0x11fba7; ret; 
0x000000000011fbd1: jae 0x11fbd4; ret; 
0x000000000011fc01: jae 0x11fc04; ret; 
0x000000000011fc31: jae 0x11fc34; ret; 
0x000000000011fc61: jae 0x11fc64; ret; 
0x000000000011fc91: jae 0x11fc94; ret; 
0x000000000011fcc1: jae 0x11fcc4; ret; 
0x000000000011fcf1: jae 0x11fcf4; ret; 
0x000000000011fd24: jae 0x11fd27; ret; 
0x000000000011fd51: jae 0x11fd54; ret; 
0x000000000011fd84: jae 0x11fd87; ret; 
0x000000000011fdb1: jae 0x11fdb4; ret; 
0x000000000011fde1: jae 0x11fde4; ret; 
0x000000000011fe11: jae 0x11fe14; ret; 
0x000000000011fe41: jae 0x11fe44; ret; 
0x000000000011fe71: jae 0x11fe74; ret; 
0x000000000011fea4: jae 0x11fea7; ret; 
0x000000000011fed4: jae 0x11fed7; ret; 
0x000000000011ff01: jae 0x11ff04; ret; 
0x000000000011ff31: jae 0x11ff34; ret; 
0x000000000011ff64: jae 0x11ff67; ret; 
0x000000000011ff94: jae 0x11ff97; ret; 
0x000000000011ffc4: jae 0x11ffc7; ret; 
0x000000000011fff1: jae 0x11fff4; ret; 
0x0000000000120021: jae 0x120024; ret; 
0x0000000000120051: jae 0x120054; ret; 
0x0000000000120081: jae 0x120084; ret; 
0x00000000001200b4: jae 0x1200b7; ret; 
0x00000000001200e1: jae 0x1200e4; ret; 
0x0000000000120111: jae 0x120114; ret; 
0x0000000000120144: jae 0x120147; ret; 
0x0000000000120171: jae 0x120174; ret; 
0x00000000001201a4: jae 0x1201a7; ret; 
0x00000000001201d4: jae 0x1201d7; ret; 
0x0000000000120201: jae 0x120204; ret; 
0x0000000000120231: jae 0x120234; ret; 
0x0000000000120261: jae 0x120264; ret; 
0x00000000001202a1: jae 0x1202a4; ret; 
0x0000000000120391: jae 0x120394; ret; 
0x0000000000120461: jae 0x120464; ret; 
0x0000000000120491: jae 0x120494; ret; 
0x00000000001204c4: jae 0x1204c7; ret; 
0x00000000001204f1: jae 0x1204f4; ret; 
0x0000000000120974: jae 0x120977; ret; 
0x00000000001209a1: jae 0x1209a4; ret; 
0x00000000001209d1: jae 0x1209d4; ret; 
0x0000000000120a04: jae 0x120a07; ret; 
0x0000000000121f1c: jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000012d077: jae 0x12d088; cmp qword ptr [rax + 8], rdi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000013bb2e: jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x000000000013c980: jae 0x13c98b; shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000149fe9: jae 0x14a00b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000151c96: jae 0x151ce0; add esp, 0x10; pop r12; ret; 
0x0000000000157859: jae 0x157868; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000015fa29: jae 0x15fa10; mov eax, 1; ret; 
0x0000000000183dba: jae 0x183db0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000184284: jae 0x184620; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184fb9: jae 0x185250; xor eax, eax; vzeroupper; ret; 
0x000000000018aafa: jae 0x18a7e0; cmp r8d, 1; ja 0x18a7d0; je 0x18a7c0; vzeroupper; ret; 
0x000000000018a9d6: jae 0x18a8c0; cmp r8d, 1; ja 0x18a8b0; je 0x18a8a0; vzeroupper; ret; 
0x000000000018b706: jae 0x18b5f0; cmp r8d, 1; ja 0x18b5e0; je 0x18b5d0; vzeroupper; ret; 
0x000000000018bf6d: jae 0x18c190; xor eax, eax; vzeroupper; ret; 
0x0000000000042219: jae 0x42230; mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004253f: jae 0x42558; mov rax, qword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000042c3d: jae 0x42c7f; xor eax, eax; pop rbx; ret; 
0x0000000000042c60: jae 0x42ca2; pop rbx; ret; 
0x00000000000433e1: jae 0x433e4; ret; 
0x00000000000439d1: jae 0x439d4; ret; 
0x0000000000054f07: jae 0x54f0c; xor eax, eax; ret; 
0x0000000000056432: jae 0x5647d; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000005b15d: jae 0x5b15b; dec dword ptr [rcx - 0x77]; ret; 
0x000000000005b3a0: jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000005b628: jae 0x5b60c; mov rax, r8; ret; 
0x0000000000085587: jae 0x85598; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000085711: jae 0x85720; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x00000000000860bd: jae 0x860d0; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086264: jae 0x86278; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000863fa: jae 0x86410; lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x0000000000088040: jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x000000000008df25: jae 0x8df38; lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x000000000008e025: jae 0x8e038; lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x0000000000093981: jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000009c1ec: jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009e848: jae 0x9e860; mov rax, qword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x00000000000bc042: jae 0xbc057; cmp dl, 1; ja 0xbc05e; jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000d41c1: jae 0xd41c4; ret; 
0x00000000000d41f1: jae 0xd41f4; ret; 
0x00000000000d4aa4: jae 0xd4ab7; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x00000000000e2b51: jae 0xe2b54; ret; 
0x00000000000e2da1: jae 0xe2da4; ret; 
0x00000000000e3181: jae 0xe3184; ret; 
0x00000000000e4125: jae 0xe4127; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4131: jae 0xe4134; ret; 
0x00000000000e4381: jae 0xe4384; ret; 
0x00000000000e43b1: jae 0xe43b4; ret; 
0x00000000000e4411: jae 0xe4414; ret; 
0x00000000000e4441: jae 0xe4444; ret; 
0x00000000000e4471: jae 0xe4474; ret; 
0x00000000000e44a1: jae 0xe44a4; ret; 
0x00000000000e5112: jae 0xe515d; push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000ec3ec: jae 0xec3b4; or byte ptr [r9], r8b; mov eax, 1; ret; 
0x00000000001028af: jb 0x1028b9; setne al; movzx eax, al; neg eax; ret; 
0x000000000010d474: jb 0x10d3f6; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000001161a0: jb 0x1161a3; mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x00000000001185ff: jb 0x11860e; add byte ptr [rcx + rcx*4 + 0x25], al; push rdi; jb 0x118615; add byte ptr [rbp - 0x8f38b25], al; ret; 
0x0000000000118606: jb 0x118615; add byte ptr [rbp - 0x8f38b25], al; ret; 
0x0000000000121e63: jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000122277: jb 0x122281; seta al; movzx eax, al; neg eax; ret; 
0x000000000012332b: jb 0x12333d; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000123393: jb 0x1233a5; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000123c7b: jb 0x123c8d; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000123cdb: jb 0x123ced; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x0000000000125f66: jb 0x125f06; or al, 0; add byte ptr [rax + rax], al; add al, ch; popfq; ret; 
0x000000000012787f: jb 0x127890; mov eax, 1; ret; 
0x000000000012fc6b: jb 0x12fc80; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000013ba9e: jb 0x13bab0; movzx eax, byte ptr [rdi + 1]; lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000013bb68: jb 0x13bb30; cmp eax, edx; jne 0x13bb40; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x000000000013c6f3: jb 0x13c6dd; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000013c742: jb 0x13c6f5; add rcx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000001494c9: jb 0x1494eb; ret; 
0x00000000001494c3: jb 0x1494ed; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000015d437: jb 0x15d438; cmp si, 3; ja 0x15d450; cmp dx, cx; sete al; ret; 
0x0000000000160fc4: jb 0x160fa5; mov qword ptr [rip + 0x8decb], r8; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x000000000017ccfa: jb 0x17ccfe; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000189d30: jb 0x189b15; vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018aa30: jb 0x18a645; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b760: jb 0x18b375; vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x000000000018b97a: jb 0x18b981; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000018b95a: jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000018be67: jb 0x18be6b; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000018fd3b: jb 0x18fd51; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018fd68: jb 0x18fd79; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000018fd7c: jb 0x18fd8a; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000018fd8d: jb 0x18fd9f; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000018fda2: jb 0x18fda8; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000019041a: jb 0x19042a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019042d: jb 0x190439; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000190446: jb 0x190452; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000190459: jb 0x190461; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000190464: jb 0x19046e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000190471: jb 0x190475; mov byte ptr [rdi], cl; ret; 
0x000000000019071a: jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000001906f5: jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000190d3f: jb 0x190d43; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000482f7: jb 0x482d5; xor eax, eax; ret; 
0x000000000005b456: jb 0x5b380; cmp r10, rdi; pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000860c5: jb 0x860e7; mov dword ptr [rcx], eax; ret; 
0x000000000008626c: jb 0x8628e; mov dword ptr [rcx], eax; ret; 
0x000000000008d30c: jb 0x8d340; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000008d76c: jb 0x8d7b0; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000993a2: jb 0x99380; mov byte ptr [r8 + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x0000000000099599: jb 0x99578; mov byte ptr [r8 + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000009c1e3: jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009ef22: jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000009ef63: jb 0x9ef6c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000009f244: jb 0x9f256; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009f834: jb 0x9f846; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009faf4: jb 0x9fb06; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x00000000000b806e: jb 0xb7629; movdqu xmmword ptr [rdi + 0x20], xmm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b807d: jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98cd: jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8e5a: jb 0xb8e65; add byte ptr [rax], al; ret; 
0x00000000000bb32d: jb 0xbabc9; movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bbb5d: jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbc0a: jb 0xbbc11; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000bbbef: jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bc049: jb 0xbc04d; mov byte ptr [rdi], cl; ret; 
0x00000000000bdf84: jb 0xbdf8e; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000c6b42: jb 0xc6ae0; mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x00000000000e4f55: jb 0xe4fa0; cmp eax, eax; jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x000000000010c912: jbe 0x10c974; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c95e: jbe 0x10c9c0; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d267: jbe 0x10d2c9; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d2f0: jbe 0x10d352; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000112f4b: jbe 0x112f68; cmp eax, -0x5f; je 0x112f58; neg eax; ret; 
0x000000000011319b: jbe 0x1131b8; cmp eax, -0x5f; je 0x1131a8; neg eax; ret; 
0x00000000001147bc: jbe 0x1147cb; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000001170d6: jbe 0x1170c8; cmp al, 0x20; je 0x1170c8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000134a6b: jbe 0x1349d9; xor eax, eax; pop rbx; ret; 
0x0000000000148970: jbe 0x148980; mov eax, 2; ret; 
0x0000000000149ad7: jbe 0x149b20; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000001526e3: jbe 0x15272d; add esp, 0x28; pop rbx; pop r12; ret; 
0x0000000000157bbe: jbe 0x157bd0; add dword ptr [rbx + 0x28], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000015d457: jbe 0x15d460; ret; 
0x0000000000166057: jbe 0x166064; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fe97: jbe 0x17fea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000001845c5: jbe 0x184620; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184451: jbe 0x184620; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000184967: jbe 0x1849c0; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184987: jbe 0x1849c0; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000001849a7: jbe 0x1849c0; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184957: jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x0000000000188cb7: jbe 0x188d10; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188cd7: jbe 0x188d10; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188cf7: jbe 0x188d10; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000188c97: jbe 0x188d10; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000018b4e6: jbe 0x18b4e9; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018bfa1: jbe 0x18bfba; vpmovmskb eax, ymm2; sub eax, -1; jne 0x18bfb0; vzeroupper; ret; 
0x000000000018c027: jbe 0x18bffa; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x000000000018c067: jbe 0x18c080; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x000000000018c176: jbe 0x18c18f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x18bfb0; vzeroupper; ret; 
0x000000000018c417: jbe 0x18c470; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c437: jbe 0x18c470; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c457: jbe 0x18c470; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c407: jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x000000000018d647: jbe 0x18d6c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000198c26: jbe 0x198c83; add eax, 0xdb854800; jne 0x198c10; pop rbx; ret; 
0x000000000002c95a: jbe 0x2c95c; add al, ch; xor edx, dword ptr cs:[rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000002c9fd: jbe 0x2ca17; add al, ch; mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000328ae: jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000043b87: jbe 0x43ba0; mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000043bd7: jbe 0x43bf0; mov rax, 0xfffffffffffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000005b335: jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000094e4d: jbe 0x94e50; ret; 
0x0000000000094e8d: jbe 0x94e90; ret; 
0x00000000000951fd: jbe 0x95200; ret; 
0x000000000009525d: jbe 0x95260; ret; 
0x000000000009552f: jbe 0x954d8; add rsp, 8; ret; 
0x000000000009f353: jbe 0x9f338; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000000a1fdd: jbe 0xa2001; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000abe97: jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abf3f: jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a6: jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b6: jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c6: jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d6: jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce28c: jbe 0xce2dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ce32e: jbe 0xce37f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ce11f: jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce386: jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce396: jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a6: jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b6: jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000d423b: jbe 0xd4240; ret; 
0x00000000000e4465: jbe 0xe4467; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x0000000000102a12: je 0x102a18; ret; 
0x0000000000102a07: je 0x102a48; mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x00000000001071d4: je 0x10717d; pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x000000000010717b: je 0x1071d6; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000010d349: je 0x10d354; mov eax, 0x1c; syscall; neg eax; ret; 
0x000000000010daca: je 0x10dad0; mov eax, r9d; ret; 
0x0000000000112f50: je 0x112f58; neg eax; ret; 
0x00000000001131a0: je 0x1131a8; neg eax; ret; 
0x000000000011330a: je 0x113332; mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x113320; ret; 
0x0000000000114e62: je 0x114e65; ret; 
0x0000000000115cac: je 0x115ce8; call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x0000000000115cfe: je 0x115d18; mov qword ptr [rip + 0xd9939], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000116567: je 0x116580; sub rsp, 8; call 0x81dd0; mov eax, 1; add rsp, 8; ret; 
0x0000000000116ea7: je 0x116ed8; mov eax, 0x105; syscall; cmp rax, -0x1000; ja 0x116ec0; ret; 
0x0000000000116fce: je 0x116fd4; mov qword ptr [rdx + 8], rax; test rax, rax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x0000000000116fd7: je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x00000000001170da: je 0x1170c8; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000117590: je 0x11755f; mov r8d, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000117552: je 0x117570; call 0x8b9e0; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000117866: je 0x117873; add rax, 8; mov qword ptr [rip + 0xd7f1d], rax; mov rax, r8; ret; 
0x0000000000117896: je 0x1178a3; add rax, 8; mov qword ptr [rip + 0xd7eed], rax; mov rax, r8; add rsp, 8; ret; 
0x000000000011892c: je 0x118934; mov dword ptr [rip + 0xd3a14], edi; ret; 
0x000000000011939f: je 0x1193b0; pop rbp; lea rax, [rip + 0xd6557]; pop r12; pop r13; ret; 
0x0000000000119917: je 0x119920; pop rbx; ret; 
0x000000000011ce65: je 0x11ce58; mov byte ptr [rdx], 0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x000000000011d223: je 0x11d230; cmp rdi, rdx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x000000000011f34a: je 0x11f34d; ret; 
0x000000000011f9db: je 0x11fa14; mov eax, r8d; ret; 
0x000000000011fa4a: je 0x11fa78; mov eax, 0x149; syscall; cmp rax, -0x1000; ja 0x11fa60; ret; 
0x000000000012148d: je 0x121490; ret; 
0x0000000000121cf9: je 0x121d10; movsxd rbx, ebx; mov qword ptr [rip + 0xca65b], rbx; pop rbx; ret; 
0x000000000012218f: je 0x122200; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x00000000001221d0: je 0x122200; add eax, 1; mov word ptr [rdx], ax; ret; 
0x0000000000125514: je 0x125528; pop rbx; pop rbp; pop r12; ret; 
0x000000000012bc07: je 0x12bc68; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000012bfb7: je 0x12bfc0; mov eax, 7; ret; 
0x000000000012bfe2: je 0x12bff0; pop rbx; ret; 
0x000000000012d0ff: je 0x12d110; ret; 
0x000000000012d198: je 0x12d1ae; pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x000000000012daa7: je 0x12dac0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012db67: je 0x12db80; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012dc27: je 0x12dc40; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012dcf3: je 0x12dd10; test eax, eax; lea rdx, [rip + 0x5e022]; lea rax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x000000000012eae0: je 0x12eaf0; add rsp, 8; ret; 
0x000000000012ee90: je 0x12eea0; test rdx, rdx; jne 0x12ee80; sub rsp, 8; call 0x12e560; ret; 
0x0000000000134a88: je 0x134a06; mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x000000000013b5eb: je 0x13b5e0; pop rbx; ret; 
0x000000000013becc: je 0x13bee0; cmp esi, 0x14; mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x000000000013bf0d: je 0x13bf29; cmp edi, 5; mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000013bee8: je 0x13bf2f; cmp edi, 0xb; mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013c549: je 0x13c558; test eax, eax; jne 0x13c568; mov eax, r8d; ret; 
0x000000000013f29a: je 0x13f248; cmp r11d, r9d; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x000000000014006c: je 0x140092; and al, 0xe8; pushfq; and ch, dh; dec dword ptr [rax - 0x77]; ret; 
0x0000000000140ee0: je 0x140ee8; ret; 
0x0000000000141d66: je 0x141d70; add rsp, 8; ret; 
0x0000000000142a0a: je 0x1429e9; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000145b20: je 0x145b08; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001471bc: je 0x1471c0; ret; 
0x0000000000148262: je 0x148270; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148437: je 0x148440; xor eax, eax; ret; 
0x00000000001484b9: je 0x1484d0; cmp eax, 1; je 0x148510; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000001484be: je 0x148510; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x000000000014851a: je 0x148530; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000149525: je 0x149538; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000014a2d2: je 0x14a2e0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014b1e2: je 0x14b1f0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b2a2: je 0x14b2b0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b3a2: je 0x14b3b0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001534e2: je 0x153465; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000153463: je 0x153470; pop rbx; ret; 
0x0000000000153516: je 0x15351b; mov r8, rax; mov rax, r8; pop rbx; ret; 
0x00000000001535d6: je 0x1535df; lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a6: je 0x1536af; lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153776: je 0x15377f; lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x000000000015398f: je 0x1539a0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000155dfe: je 0x155e10; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000156013: je 0x156030; cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000015684a: je 0x156870; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000001573de: je 0x1573f0; xor r8d, r8d; test eax, eax; je 0x157410; mov eax, r8d; ret; 
0x00000000001573e5: je 0x157410; mov eax, r8d; ret; 
0x000000000015742e: je 0x157440; xor r8d, r8d; test eax, eax; je 0x157460; mov eax, r8d; ret; 
0x0000000000157435: je 0x157460; mov eax, r8d; ret; 
0x000000000015798c: je 0x1579f0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157b8e: je 0x157b9d; call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x0000000000178cd5: je 0x178880; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000017ee95: je 0x17ee98; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fe7a: je 0x17fe7d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000183ae0: je 0x183ab8; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000183c38: je 0x183c18; xor eax, eax; ret; 
0x0000000000184a83: je 0x184aa0; tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000184c01: je 0x184c62; and ch, al; std; xlatb; ret; 
0x0000000000184cef: je 0x184d50; and ch, al; std; xlatb; ret; 
0x0000000000184e88: je 0x184e10; bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret; 
0x0000000000184e3a: je 0x184e10; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000184ff1: je 0x18500a; vpmovmskb eax, ymm2; sub eax, -1; jne 0x185000; vzeroupper; ret; 
0x0000000000185045: je 0x185050; sbb eax, eax; or eax, 1; ret; 
0x00000000001850e9: je 0x1850bc; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x0000000000185127: je 0x185140; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x0000000000185236: je 0x18524f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x185000; vzeroupper; ret; 
0x00000000001885b1: je 0x1885d0; tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x00000000001888af: je 0x188864; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000001888d4: je 0x1888f0; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018930f: je 0x189390; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189a2f: je 0x189b70; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000189e1a: je 0x189c10; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018a0af: je 0x18a130; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000018ab0a: je 0x18a7c0; vzeroupper; ret; 
0x000000000018a9e6: je 0x18a8a0; vzeroupper; ret; 
0x000000000018ad9f: je 0x18ae20; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000018b84a: je 0x18b4f0; mov rax, rdi; vzeroupper; ret; 
0x000000000018b716: je 0x18b5d0; vzeroupper; ret; 
0x000000000018c527: je 0x18c531; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000018c9a4: je 0x18c9ae; setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000018d22a: je 0x18d1c4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018d25f: je 0x18d270; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018eb27: je 0x18eb2b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000019080c: je 0x190825; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000192ce5: je 0x192d00; mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192e20; ret; 
0x0000000000192d13: je 0x192d30; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x0000000000196fbf: je 0x196fe5; adc byte ptr [rcx - 0x77], cl; ret; 
0x00000000001974aa: je 0x1974bc; movss xmm0, dword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000019937e: je 0x199368; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000002423c: je 0x24328; add rsp, 0x98; ret; 
0x0000000000026f60: je 0x26f68; ret; 
0x000000000002fd86: je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x000000000002fd8b: je 0x2fd90; ret; 
0x000000000002fdcf: je 0x2fdaf; call 0x15ff30; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000002fdad: je 0x2fdc8; pop rbx; ret; 
0x0000000000033df2: je 0x33dff; and esi, dword ptr [rdi + 0x10]; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000000388fe: je 0x38906; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000041d0b: je 0x41c58; ret; 
0x0000000000041f89: je 0x41f90; ret; 
0x0000000000042359: je 0x42360; ret; 
0x00000000000440cb: je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x0000000000047368: je 0x473a8; xor eax, eax; cmp byte ptr [rdi], 0; jne 0x47378; pop rbx; ret; 
0x0000000000047464: je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000047548: je 0x47560; lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x0000000000047575: je 0x47590; mov rax, qword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000004823a: je 0x48260; adc byte ptr [rax - 0x77], cl; jl 0x48265; or al, ch; cdq; ret; 
0x000000000004830d: je 0x482d0; mov eax, 0xffffffff; ret; 
0x00000000000482ef: je 0x48330; add rdi, rax; cmp rdi, r8; jb 0x482d5; xor eax, eax; ret; 
0x0000000000052944: je 0x52953; mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x0000000000052ac7: je 0x52a88; add dword ptr [rax], eax; add eax, 0xfd8ee800; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000054307: je 0x5430f; cmp byte ptr [rax - 1], 0x2f; jne 0x54300; pop rbx; ret; 
0x00000000000555fd: je 0x55607; mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000055845: je 0x5584f; mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x0000000000055be5: je 0x55bd0; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000058975: je 0x5899b; or byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x39], cl; ret; 
0x000000000005b32c: je 0x5b344; sub rax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x000000000005b517: je 0x5b58d; jns 0x5b4e1; or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000005b518: je 0x5b593; mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000005ea1c: je 0x5ea30; movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x5ea08; mov eax, r8d; ret; 
0x0000000000062f11: je 0x62f20; mov eax, r8d; ret; 
0x0000000000062f2d: je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000761d1: je 0x761d7; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000082ac7: je 0x82ad8; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000831af: je 0x831f1; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000843e2: je 0x843f0; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008561f: je 0x8565a; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000086efc: je 0x86f46; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000874a0: je 0x874a8; ret; 
0x0000000000087593: je 0x8754d; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000087500: je 0x8755d; pop rbp; pop r12; ret; 
0x0000000000087d1e: je 0x87d23; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7a: je 0x87d7f; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000087de7: je 0x87df8; cmp rax, rsi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x0000000000089df8: je 0x89db6; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000089de2: je 0x89dfa; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008ab9c: je 0x8abe6; add esp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000008aeaa: je 0x8aeb8; mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x8aeb8; ret; 
0x000000000008c92f: je 0x8c971; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000008d2f5: je 0x8d300; ret; 
0x000000000008d2ec: je 0x8d320; mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d755: je 0x8d760; ret; 
0x000000000008d74c: je 0x8d780; mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x000000000008e593: je 0x8e5a0; pop rbx; ret; 
0x0000000000091e89: je 0x91e90; ret; 
0x000000000009278b: je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000092949: je 0x9294e; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000092a17: je 0x92a28; cmp rcx, rsi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x0000000000093543: je 0x93555; mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x0000000000093978: je 0x93990; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000009460d: je 0x94610; ret; 
0x0000000000094671: je 0x94674; ret; 
0x0000000000094d27: je 0x94d38; test esi, esi; jne 0x94d40; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000094d83: je 0x94d90; or eax, 2; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000095180: je 0x95185; pop rbx; pop rbp; ret; 
0x00000000000958fc: je 0x95910; mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000098f4c: je 0x98f53; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009e1fc: je 0x9e200; ret; 
0x000000000009e2f7: je 0x9e350; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f130: je 0x9f14b; test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000009f31e: je 0x9f32e; cmp dl, 3; je 0x9f330; movsx eax, dl; ret; 
0x000000000009f323: je 0x9f330; movsx eax, dl; ret; 
0x000000000009f416: je 0x9f420; pop rbx; pop rbp; pop r12; ret; 
0x000000000009f75b: je 0x9f772; and dh, 2; lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x000000000009f89a: je 0x9f8aa; lea rax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000a0466: je 0xa0435; lea rax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a0476: je 0xa0435; ret; 
0x00000000000a04b7: je 0xa04d0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a0583: je 0xa05a0; test eax, eax; lea rdx, [rip + 0xeb7a2]; lea rax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x00000000000a0617: je 0xa0630; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a0834: je 0xa084b; and ch, 2; lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000a08d4: je 0xa08eb; and ch, 2; lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0987: je 0xa09a0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a15ee: je 0xa15fe; xor byte ptr [rdx + 0xd], 0x2a; cmp rcx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000a15f8: je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000a2056: je 0xa2068; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a2891: je 0xa2863; cmp al, 0x3d; mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000a8617: je 0xa8628; movzx esi, byte ptr [rcx]; test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000a8743: je 0xa8720; mov byte ptr [r11], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000a877b: je 0xa8781; cmp eax, esi; jne 0xa8770; mov rax, r8; ret; 
0x00000000000a87af: je 0xa87b5; cmp eax, edx; jne 0xa87a0; mov rax, r8; ret; 
0x00000000000a881a: je 0xa8810; ret; 
0x00000000000a8852: je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a8856: je 0xa8848; ret; 
0x00000000000a88a4: je 0xa8888; mov rax, r8; ret; 
0x00000000000a88ce: je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000aa3ed: je 0xaa400; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000aa619: je 0xaa4b5; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000ac0ac: je 0xac0fd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac14e: je 0xac19f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac258: je 0xac270; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac39a: je 0xac3eb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac602: je 0xac613; pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac630: je 0xac681; and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000000ac770: je 0xac6f0; bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000ac71c: je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x00000000000b16f5: je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000b1914: je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1ba4: je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000000b19ae: je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000b1bf0: je 0xb1bd2; pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000b1bf8: je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000b1c9d: je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c40: je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e64: je 0xb1e73; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df4: je 0xb1e73; sar rdx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000b1e6c: je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1dfc: je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000bbb54: je 0xbbb61; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbc97: je 0xbbcb0; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000000bc1ad: je 0xbc0d2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000bc155: je 0xbc0d2; mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x00000000000bc6f4: je 0xbc700; cmp eax, 2; je 0xbc708; xor eax, eax; ret; 
0x00000000000bc6f9: je 0xbc708; xor eax, eax; ret; 
0x00000000000bc744: je 0xbc728; ret; 
0x00000000000bc7a2: je 0xbc780; ret; 
0x00000000000bc8c7: je 0xbc8b0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bcaa6: je 0xbca90; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bcd76: je 0xbcd45; lea rax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000bcd86: je 0xbcd45; ret; 
0x00000000000bd20c: je 0xbd217; mov edx, dword ptr [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000000bdf80: je 0xbdf98; test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bdfb9: je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x00000000000c6a9d: je 0xc6aa3; mov eax, r8d; ret; 
0x00000000000cba95: je 0xcbabb; or byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x39], cl; ret; 
0x00000000000ce087: je 0xce09a; nop dword ptr [rax]; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cef29: je 0xcef40; mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000cef53: je 0xcef70; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x00000000000cef89: je 0xcefa0; mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefb3: je 0xcefd0; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cefe9: je 0xcf000; mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf013: je 0xcf020; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf039: je 0xcf050; mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000cf063: je 0xcf070; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000cf153: je 0xcf160; xor r9d, r9d; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000cf566: je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf584: je 0xcf4c5; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf616: je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf624: je 0xcf680; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf79c: je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf730: je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cfac9: je 0xcfae0; mov cl, dl; and cl, 0xf; je 0xcfaf0; ret; 
0x00000000000cfad0: je 0xcfaf0; ret; 
0x00000000000cfae5: je 0xcfb00; add rax, 2; ret; 
0x00000000000dcfa7: je 0xdcfb0; xor eax, eax; ret; 
0x00000000000dd4b7: je 0xdd4dd; and byte ptr [rax - 0x7d], cl; ret; 
0x00000000000dd797: je 0xdd7c4; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e4fbc: je 0xe4f4d; cmp r8, 0x2468; jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e509a: je 0xe50e8; cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e50c8: je 0xe50e8; cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e519f: je 0xe51e8; jle 0xe51b0; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000e51b9: je 0xe51ea; xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51d4: je 0xe51ea; xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x00000000000e5185: je 0xe51ea; xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x00000000000e81a1: je 0xe81a7; cmp al, 0x3f; jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c2: je 0xe81a7; cmp al, 0x3f; jne 0xe81f9; mov eax, 1; ret; 
0x00000000000ec4a3: je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ec43a: je 0xec480; mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000edf2d: je 0xedf68; ret; 
0x00000000000ee2dc: je 0xee31b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ee443: je 0xee3bd; ret; 
0x00000000000ee462: je 0xee3f7; pop rbx; ret; 
0x00000000000ee45d: je 0xee417; and ebx, 8; je 0xee3f7; pop rbx; ret; 
0x00000000000f1f90: je 0xf1fa0; cmp eax, 3; je 0xf1ff0; xor eax, eax; pop rbp; ret; 
0x00000000000f1f95: je 0xf1ff0; xor eax, eax; pop rbp; ret; 
0x00000000000f3f05: je 0xf3f2b; adc al, ch; ret; 
0x00000000000f57d8: je 0xf57a7; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ff61f: je 0xff5f9; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000102a7e: jg 0x102a94; add byte ptr [rax], al; add byte ptr [rcx], al; mov edx, 2; cmove eax, edx; ret; 
0x000000000010c917: jg 0x10c991; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c96b: jg 0x10c9e5; ret; 
0x0000000000112c76: jg 0x112cc0; add esp, 0x40; pop r12; ret; 
0x0000000000117870: jg 0x11787f; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000117e33: jg 0x117e36; ret; 
0x000000000013f29f: jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x000000000014e026: jg 0x14e068; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14e030; ret; 
0x0000000000154726: jg 0x154768; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154730; ret; 
0x0000000000157f3a: jg 0x157f54; call 0x830f0; add rsp, 8; ret; 
0x00000000001682e9: jg 0x16833a; ret; 
0x000000000016836f: jg 0x1683b8; ret; 
0x000000000016acc9: jg 0x16ad1a; ret; 
0x000000000016ad4f: jg 0x16ad98; ret; 
0x000000000016d2d8: jg 0x16d321; loope 0x16d2cf; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d3df: jg 0x16d428; ret; 
0x000000000016d488: jg 0x16d4d1; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d508: jg 0x16d551; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d588: jg 0x16d5d1; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d608: jg 0x16d651; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d888: jg 0x16d8d1; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d908: jg 0x16d951; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d998: jg 0x16d9e1; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016da18: jg 0x16da61; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016da8c: jg 0x16da95; ret; 
0x000000000016dae6: jg 0x16daf7; ret; 
0x000000000016dae1: jg 0x16db2a; psllq mm1, qword ptr [rdi]; jg 0x16daf7; ret; 
0x000000000016db56: jg 0x16db67; ret; 
0x000000000016dbc6: jg 0x16dbd7; ret; 
0x000000000016dbb3: jg 0x16dbfc; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbc1: jg 0x16dc0a; or eax, 0xf7f0ff3; ret; 
0x000000000016dc36: jg 0x16dc47; ret; 
0x000000000016dc31: jg 0x16dc7a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000016dca6: jg 0x16dcb7; ret; 
0x000000000016dca1: jg 0x16dcea; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000016dd16: jg 0x16dd27; ret; 
0x000000000016dd11: jg 0x16dd5a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000016dd86: jg 0x16dd97; ret; 
0x000000000016dd81: jg 0x16ddca; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000016ddf6: jg 0x16de07; ret; 
0x000000000016ddf1: jg 0x16de3a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000016de66: jg 0x16de77; ret; 
0x000000000016ded6: jg 0x16dee7; ret; 
0x000000000016df46: jg 0x16df57; ret; 
0x000000000016df33: jg 0x16df7c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df41: jg 0x16df8a; add eax, 0xf7f0ff3; ret; 
0x000000000016dfb6: jg 0x16dfc7; ret; 
0x000000000016dfb1: jg 0x16dffa; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000016e026: jg 0x16e037; ret; 
0x000000000016e021: jg 0x16e06a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000016e096: jg 0x16e0a7; ret; 
0x000000000016e091: jg 0x16e0da; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000016e106: jg 0x16e117; ret; 
0x000000000016e101: jg 0x16e14a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000016fe08: jg 0x16fe51; loope 0x16fdff; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016ff0f: jg 0x16ff58; ret; 
0x000000000016ffb8: jg 0x170001; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000170038: jg 0x170081; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000001700b8: jg 0x170101; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000170138: jg 0x170181; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000001703b8: jg 0x170401; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000170438: jg 0x170481; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000001704c8: jg 0x170511; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000170548: jg 0x170591; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000001705bc: jg 0x1705c5; ret; 
0x0000000000170616: jg 0x170627; ret; 
0x0000000000170611: jg 0x17065a; psllq mm1, qword ptr [rdi]; jg 0x170627; ret; 
0x0000000000170686: jg 0x170697; ret; 
0x00000000001706f6: jg 0x170707; ret; 
0x00000000001706e3: jg 0x17072c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000001706f1: jg 0x17073a; or eax, 0xf7f0ff3; ret; 
0x0000000000170766: jg 0x170777; ret; 
0x0000000000170761: jg 0x1707aa; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000001707d6: jg 0x1707e7; ret; 
0x00000000001707d1: jg 0x17081a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000170846: jg 0x170857; ret; 
0x0000000000170841: jg 0x17088a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000001708b6: jg 0x1708c7; ret; 
0x00000000001708b1: jg 0x1708fa; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000170926: jg 0x170937; ret; 
0x0000000000170921: jg 0x17096a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000170996: jg 0x1709a7; ret; 
0x0000000000170a06: jg 0x170a17; ret; 
0x0000000000170a76: jg 0x170a87; ret; 
0x0000000000170a63: jg 0x170aac; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000170a71: jg 0x170aba; add eax, 0xf7f0ff3; ret; 
0x0000000000170ae6: jg 0x170af7; ret; 
0x0000000000170ae1: jg 0x170b2a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000170b56: jg 0x170b67; ret; 
0x0000000000170b51: jg 0x170b9a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000170bc6: jg 0x170bd7; ret; 
0x0000000000170bc1: jg 0x170c0a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000170c36: jg 0x170c47; ret; 
0x0000000000170c31: jg 0x170c7a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000183d24: jg 0x183d34; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183dd0; ret; 
0x00000000001893fc: jg 0x189415; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018941c: jg 0x189435; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000189bdc: jg 0x189bf5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000189bfc: jg 0x189c15; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000189c9d: jg 0x189cb6; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189cbd: jg 0x189cd6; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189cde: jg 0x189cf7; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x0000000000189d39: jg 0x189d9b; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018a19c: jg 0x18a1b5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018a1bc: jg 0x18a1d5; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018a4fe: jg 0x18a501; jne 0x18a930; vzeroupper; ret; 
0x000000000018a6ac: jg 0x18a6b0; jne 0x18a930; vzeroupper; ret; 
0x000000000018a6d0: jg 0x18a6d5; jne 0x18a930; vzeroupper; ret; 
0x000000000018a6ea: jg 0x18a6f0; jne 0x18a930; vzeroupper; ret; 
0x000000000018a84d: jg 0x18a866; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018a86d: jg 0x18a886; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018a88e: jg 0x18a8a7; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x000000000018a8f2: jg 0x18a8fb; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018aa39: jg 0x18aa9b; vzeroupper; ret; 
0x000000000018aa29: jg 0x18aaa2; sub r8, 0x20; jb 0x18a645; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018aeac: jg 0x18aec5; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018aecc: jg 0x18aee5; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018b216: jg 0x18b219; jne 0x18b660; vzeroupper; ret; 
0x000000000018b3e0: jg 0x18b3e4; jne 0x18b660; vzeroupper; ret; 
0x000000000018b404: jg 0x18b409; jne 0x18b660; vzeroupper; ret; 
0x000000000018b41e: jg 0x18b424; jne 0x18b660; vzeroupper; ret; 
0x000000000018b57d: jg 0x18b596; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018b59d: jg 0x18b5b6; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x000000000018b5be: jg 0x18b5d7; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018b622: jg 0x18b62b; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b769: jg 0x18b7cb; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x000000000018b8c7: jg 0x18b8d0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018b933: jg 0x18b93c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018b98e: jg 0x18b997; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018ba5a: jg 0x18ba63; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018bb1f: jg 0x18bb44; vzeroupper; ret; 
0x000000000018bb19: jg 0x18bb5c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bb14: jg 0x18bb8f; rol ch, 0x7e; jg 0x18bb5c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bbc6: jg 0x18bbcb; vzeroupper; ret; 
0x000000000018bbc1: jg 0x18bc23; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018bc52: jg 0x18bc77; vzeroupper; ret; 
0x000000000018bc4c: jg 0x18bc8f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bc47: jg 0x18bcc2; rol ch, 0x7e; jg 0x18bc8f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bce2: jg 0x18bce7; vzeroupper; ret; 
0x000000000018bcdd: jg 0x18bd3f; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018bd58: jg 0x18bd61; vzeroupper; ret; 
0x000000000018bdb8: jg 0x18bdc1; vzeroupper; ret; 
0x000000000018bdd2: jg 0x18bddb; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018be77: jg 0x18be80; vzeroupper; ret; 
0x000000000018fd24: jg 0x18fd2d; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018fd48: jg 0x18fd51; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018fd5c: jg 0x18fd65; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x00000000001901ce: jg 0x1901c8; ret; 
0x000000000019043b: jg 0x190444; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000190431: jg 0x19044a; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000190660: jg 0x190669; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000001906cc: jg 0x1906d5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x000000000019072e: jg 0x190737; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000190746: jg 0x19074f; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000019083c: jg 0x190845; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000019092a: jg 0x19094f; vzeroupper; ret; 
0x0000000000190923: jg 0x190966; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000001909ea: jg 0x1909ef; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000001909f0: jg 0x1909f5; vzeroupper; ret; 
0x0000000000190ab5: jg 0x190ada; vzeroupper; ret; 
0x0000000000190aae: jg 0x190af1; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190b74: jg 0x190b79; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000190b7a: jg 0x190b7f; vzeroupper; ret; 
0x0000000000190bf9: jg 0x190c02; vzeroupper; ret; 
0x0000000000190c65: jg 0x190c6e; vzeroupper; ret; 
0x0000000000190c81: jg 0x190c8a; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000190d4f: jg 0x190d58; vzeroupper; ret; 
0x0000000000190d5d: jg 0x190d66; vzeroupper; ret; 
0x0000000000192e25: jg 0x192e30; neg eax; ret; 
0x0000000000196785: jg 0x196787; add byte ptr [rdi], cl; test bh, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000041ba4: jg 0x41ba6; add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x0000000000041d08: jg 0x41d13; bnd je 0x41c58; ret; 
0x0000000000041ebd: jg 0x41f25; movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041edd: jg 0x41f45; movq rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000423ba: jg 0x4233c; shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x0000000000042357: jg 0x42359; je 0x42360; ret; 
0x0000000000042447: jg 0x423c9; shl eax, 0x17; or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000424be: jg 0x42440; lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000425f4: jg 0x4263e; sub eax, edx; shr rax, 0x3f; ret; 
0x000000000004340a: jg 0x4340c; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x00000000000440c7: jg 0x440e0; test edi, edi; je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x0000000000047c9c: jg 0x47c27; adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x0000000000057bc4: jg 0x57c3b; sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057c57: jg 0x57c59; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x000000000007bad7: jg 0x7bae8; test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000008ce5c: jg 0x8cde1; inc byte ptr [rdx]; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x0000000000094cca: jg 0x94cf4; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x00000000000b6f56: jg 0xb6f5f; ret; 
0x00000000000b6f66: jg 0xb6f6f; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6f7a: jg 0xb6f83; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f99: jg 0xb6fa2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b6fa9: jg 0xb6fb2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b6fb9: jg 0xb6fc2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fda: jg 0xb6fe3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6ffa: jg 0xb7003; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b701a: jg 0xb7023; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b703a: jg 0xb7043; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b705e: jg 0xb7067; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b707d: jg 0xb7086; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b709d: jg 0xb70a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b70bb: jg 0xb70c4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b70db: jg 0xb70e4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70fb: jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b711b: jg 0xb7124; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b76c8: jg 0xb76cb; jne 0xb7f80; ret; 
0x00000000000b76ec: jg 0xb76f0; jne 0xb7f80; ret; 
0x00000000000b770f: jg 0xb7714; jne 0xb7f80; ret; 
0x00000000000b772a: jg 0xb7730; jne 0xb7f80; ret; 
0x00000000000b774d: jg 0xb7754; jne 0xb7f80; ret; 
0x00000000000b7772: jg 0xb777a; jne 0xb7f80; ret; 
0x00000000000b7790: jg 0xb7799; jne 0xb7f80; ret; 
0x00000000000b77ac: jg 0xb77b6; jne 0xb7f80; ret; 
0x00000000000b77cf: jg 0xb77da; jne 0xb7f80; ret; 
0x00000000000b77f4: jg 0xb7800; jne 0xb7f80; ret; 
0x00000000000b7812: jg 0xb781f; jne 0xb7f80; ret; 
0x00000000000b7832: jg 0xb7840; jne 0xb7f80; ret; 
0x00000000000b7854: jg 0xb7863; jne 0xb7f80; ret; 
0x00000000000b7874: jg 0xb7884; jne 0xb7f80; ret; 
0x00000000000b7894: jg 0xb78a5; jne 0xb7f80; ret; 
0x00000000000b78a6: jg 0xb78af; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b78ae: jg 0xb78c0; jne 0xb7f80; ret; 
0x00000000000b78c6: jg 0xb78cf; mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b78d1: jg 0xb78e4; jne 0xb7f80; ret; 
0x00000000000b78ea: jg 0xb78f3; mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b78f6: jg 0xb790a; jne 0xb7f80; ret; 
0x00000000000b7909: jg 0xb7912; mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b7914: jg 0xb7929; jne 0xb7f80; ret; 
0x00000000000b7929: jg 0xb7932; mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b7934: jg 0xb794a; jne 0xb7f80; ret; 
0x00000000000b7957: jg 0xb796e; jne 0xb7f80; ret; 
0x00000000000b796a: jg 0xb7973; mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b7976: jg 0xb798e; jne 0xb7f80; ret; 
0x00000000000b798a: jg 0xb7993; mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b7996: jg 0xb79af; jne 0xb7f80; ret; 
0x00000000000b79aa: jg 0xb79b3; mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b79b6: jg 0xb79d0; jne 0xb7f80; ret; 
0x00000000000b79d9: jg 0xb79f4; jne 0xb7f80; ret; 
0x00000000000b7a0e: jg 0xb7a2a; jne 0xb7f80; ret; 
0x00000000000b7a3c: jg 0xb7a59; jne 0xb7f80; ret; 
0x00000000000b7a6c: jg 0xb7a8a; jne 0xb7f80; ret; 
0x00000000000b7a8b: jg 0xb7a94; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b7a98: jg 0xb7ab7; jne 0xb7f80; ret; 
0x00000000000b7abb: jg 0xb7ac4; movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b7ac8: jg 0xb7ae8; jne 0xb7f80; ret; 
0x00000000000b7a8f: jg 0xb7ae8; or eax, 0x1de88349; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b7aeb: jg 0xb7af4; movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b7af8: jg 0xb7b19; jne 0xb7f80; ret; 
0x00000000000b7aef: jg 0xb7b48; cmovns eax, dword ptr [rbx - 0x72b7e018]; jg 0xb7b19; jne 0xb7f80; ret; 
0x00000000000b7b28: jg 0xb7b4a; jne 0xb7f80; ret; 
0x00000000000b7c46: jg 0xb7c4f; ret; 
0x00000000000b7c59: jg 0xb7c62; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b7c6a: jg 0xb7c73; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b7c89: jg 0xb7c92; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7c99: jg 0xb7ca2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b7cac: jg 0xb7cb5; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b7cca: jg 0xb7cd3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b7cea: jg 0xb7cf3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7d0a: jg 0xb7d13; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b7d2d: jg 0xb7d36; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7d4e: jg 0xb7d57; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b7d6d: jg 0xb7d76; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7d8d: jg 0xb7d96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7dab: jg 0xb7db4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7dcb: jg 0xb7dd4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7deb: jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7e0b: jg 0xb7e14; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b7e2e: jg 0xb7e37; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b7f42: jg 0xb7f4b; ret; 
0x00000000000b8086: jg 0xb80b8; ret; 
0x00000000000b8606: jg 0xb860f; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8616: jg 0xb861f; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b862a: jg 0xb8633; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b8649: jg 0xb8652; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b8669: jg 0xb8672; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b8689: jg 0xb8692; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b86aa: jg 0xb86b3; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b86ca: jg 0xb86d3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b86ea: jg 0xb86f3; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b870a: jg 0xb8713; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b872e: jg 0xb8737; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b874d: jg 0xb8756; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b876d: jg 0xb8776; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b878b: jg 0xb8794; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b87ab: jg 0xb87b4; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b87cb: jg 0xb87d4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b878f: jg 0xb87e8; or eax, 0x1c478d48; ret; 
0x00000000000b87eb: jg 0xb87f4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b8dab: jg 0xb8dae; jne 0xb97d0; ret; 
0x00000000000b8dd0: jg 0xb8dd4; jne 0xb97d0; ret; 
0x00000000000b8df3: jg 0xb8df8; jne 0xb97d0; ret; 
0x00000000000b8e0e: jg 0xb8e14; jne 0xb97d0; ret; 
0x00000000000b8e31: jg 0xb8e38; jne 0xb97d0; ret; 
0x00000000000b8e56: jg 0xb8e5e; jne 0xb97d0; ret; 
0x00000000000b8e74: jg 0xb8e7d; jne 0xb97d0; ret; 
0x00000000000b8e90: jg 0xb8e9a; jne 0xb97d0; ret; 
0x00000000000b8eb3: jg 0xb8ebe; jne 0xb97d0; ret; 
0x00000000000b8ed8: jg 0xb8ee4; jne 0xb97d0; ret; 
0x00000000000b8f06: jg 0xb8f13; jne 0xb97d0; ret; 
0x00000000000b8f26: jg 0xb8f34; jne 0xb97d0; ret; 
0x00000000000b8f48: jg 0xb8f57; jne 0xb97d0; ret; 
0x00000000000b8f78: jg 0xb8f88; jne 0xb97d0; ret; 
0x00000000000b8fa8: jg 0xb8fb9; jne 0xb97d0; ret; 
0x00000000000b8fc6: jg 0xb8fcf; lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b8fd2: jg 0xb8fe4; jne 0xb97d0; ret; 
0x00000000000b8ff5: jg 0xb9008; jne 0xb97d0; ret; 
0x00000000000b901a: jg 0xb902e; jne 0xb97d0; ret; 
0x00000000000b9048: jg 0xb905d; jne 0xb97d0; ret; 
0x00000000000b9078: jg 0xb908e; jne 0xb97d0; ret; 
0x00000000000b90ab: jg 0xb90c2; jne 0xb97d0; ret; 
0x00000000000b90da: jg 0xb90f2; jne 0xb97d0; ret; 
0x00000000000b910a: jg 0xb9123; jne 0xb97d0; ret; 
0x00000000000b913a: jg 0xb9154; jne 0xb97d0; ret; 
0x00000000000b916d: jg 0xb9188; jne 0xb97d0; ret; 
0x00000000000b91a2: jg 0xb91be; jne 0xb97d0; ret; 
0x00000000000b91d0: jg 0xb91ed; jne 0xb97d0; ret; 
0x00000000000b9200: jg 0xb921e; jne 0xb97d0; ret; 
0x00000000000b922c: jg 0xb924b; jne 0xb97d0; ret; 
0x00000000000b921f: jg 0xb9278; or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b925c: jg 0xb927c; jne 0xb97d0; ret; 
0x00000000000b928c: jg 0xb92ad; jne 0xb97d0; ret; 
0x00000000000b92bc: jg 0xb92de; jne 0xb97d0; ret; 
0x00000000000b9466: jg 0xb946f; lea rax, [rdi + 0x10]; ret; 
0x00000000000b9479: jg 0xb9482; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b949a: jg 0xb94a3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b9: jg 0xb94c2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d9: jg 0xb94e2; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b94fc: jg 0xb9505; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b951a: jg 0xb9523; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b953a: jg 0xb9543; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b955a: jg 0xb9563; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b957d: jg 0xb9586; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959e: jg 0xb95a7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bd: jg 0xb95c6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95dd: jg 0xb95e6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95fb: jg 0xb9604; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b961b: jg 0xb9624; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b963b: jg 0xb9644; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b95ff: jg 0xb9658; or eax, 0x1d478d48; ret; 
0x00000000000b965b: jg 0xb9664; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b967e: jg 0xb9687; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9792: jg 0xb979b; ret; 
0x00000000000b98d6: jg 0xb9908; lea rax, [rdi + 0x40]; ret; 
0x00000000000ba266: jg 0xba26f; ret; 
0x00000000000ba276: jg 0xba27f; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000ba28a: jg 0xba293; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000ba2a9: jg 0xba2b2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000ba2b9: jg 0xba2c2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000ba2c9: jg 0xba2d2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000ba2ea: jg 0xba2f3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000ba30a: jg 0xba313; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000ba32a: jg 0xba333; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000ba34a: jg 0xba353; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000ba36e: jg 0xba377; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000ba38d: jg 0xba396; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000ba3ad: jg 0xba3b6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000ba3cb: jg 0xba3d4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000ba3eb: jg 0xba3f4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000ba40b: jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000ba42b: jg 0xba434; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bad56: jg 0xbad5f; ret; 
0x00000000000bad66: jg 0xbad6f; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000bad7a: jg 0xbad83; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bad99: jg 0xbada2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000bada9: jg 0xbadb2; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000badb9: jg 0xbadc2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000badda: jg 0xbade3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000badfa: jg 0xbae03; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000bae1a: jg 0xbae23; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bae3a: jg 0xbae43; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000bae5e: jg 0xbae67; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bae7d: jg 0xbae86; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bae9d: jg 0xbaea6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000baebb: jg 0xbaec4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000baedb: jg 0xbaee4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000baefb: jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000baf1b: jg 0xbaf24; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb0c6: jg 0xbb0cf; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000bb0d9: jg 0xbb0e2; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb0fa: jg 0xbb103; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb119: jg 0xbb122; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb139: jg 0xbb142; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb15c: jg 0xbb165; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb17a: jg 0xbb183; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb19a: jg 0xbb1a3; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1ba: jg 0xbb1c3; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb1dd: jg 0xbb1e6; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb1fe: jg 0xbb207; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb21d: jg 0xbb226; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb23d: jg 0xbb246; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb25b: jg 0xbb264; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb27b: jg 0xbb284; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb29b: jg 0xbb2a4; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2bb: jg 0xbb2c4; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2de: jg 0xbb2e7; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb29f: jg 0xbb2f8; wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2bf: jg 0xbb318; adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2e2: jg 0xbb33b; adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb336: jg 0xbb368; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bb335: jg 0xbb3b6; xor byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bbdd8: jg 0xbbe0a; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbea6: jg 0xbbed8; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000bbf34: jg 0xbbf3d; ret; 
0x00000000000bbfb0: jg 0xbbfb9; ret; 
0x00000000000bbfc4: jg 0xbbfcd; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bbfc8: jg 0xbc011; adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bc203: jg 0xbc1fc; int1; mov eax, eax; ret; 
0x00000000000cf085: jg 0xcf089; neg eax; ret; 
0x00000000000d002b: jg 0xd0050; mov rax, r12; pop r12; ret; 
0x00000000000d012e: jg 0xd0150; lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x00000000000dd64a: jg 0xdd618; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000e4f83: jg 0xe4f85; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e4f43: jg 0xe4f8e; cmp eax, 0x58465342; jne 0xe4f50; ret; 
0x00000000000e4f9d: jg 0xe4f9f; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e4fda: jg 0xe4fdc; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000e4feb: jg 0xe4fed; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000000e4fe6: jg 0xe4ffb; add byte ptr [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret; 
0x00000000000e500b: jg 0xe500d; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000011fbc5: jge 0x11fbc7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x000000000012daab: jge 0x12daaf; lea rax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012daf6: jge 0x12dafa; lea rax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012db12: jge 0x12db16; lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012db6b: jge 0x12db6f; lea rax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012dbb6: jge 0x12dbba; lea rax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012dbd2: jge 0x12dbd6; lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc2b: jge 0x12dc2f; lea rax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012dc76: jge 0x12dc7a; lea rax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dc92: jge 0x12dc96; lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000012dd36: jge 0x12dd3a; lea rax, [rip + 0x62ee1]; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x000000000015a739: jge 0x15a727; dec dword ptr [rax - 0x77]; ret; 
0x0000000000181a3f: jge 0x1819db; add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181d3f: jge 0x181cd8; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000184fb6: jge 0x184fcf; call 0x2a9d2cc; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000018bf6a: jge 0x18bf83; call 0x2364280; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000042074: jge 0x420d0; andpd xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x00000000000423f3: jge 0x42440; movd xmm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x000000000005448a: jge 0x5448c; cmp cl, byte ptr [rdi]; xchg esp, eax; ret; 
0x0000000000056318: jge 0x56363; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000578c4: jge 0x578c6; add byte ptr [rax], al; leave; ret; 
0x0000000000090884: jge 0x90886; sbb eax, 0xe9ebe374; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000a04bb: jge 0xa04bf; lea rax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a0506: jge 0xa050a; lea rax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a0522: jge 0xa0526; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05c6: jge 0xa05ca; lea rax, [rip + 0xf0661]; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x00000000000a061b: jge 0xa061f; lea rax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a0666: jge 0xa066a; lea rax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0682: jge 0xa0686; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a098b: jge 0xa098f; lea rax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a09d6: jge 0xa09da; lea rax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a09f2: jge 0xa09f6; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000b1df5: jge 0xb1e3f; sar edx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000e4138: jge 0xe414a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4803: jge 0xe4805; add cl, ch; ret; 
0x00000000000e4f99: jge 0xe4f9b; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x00000000000e4fd6: jge 0xe4fd8; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x00000000000ea5d8: jge 0xea5cd; dec dword ptr [rax - 0x77]; ret; 
0x00000000000f23c9: jge 0xf23fb; pop rbx; pop rbp; pop r12; ret; 
0x00000000001115ec: jl 0x111612; or byte ptr [rax - 0x75], cl; jl 0x111617; and al, ch; test esp, 0x8948fffc; ret; 
0x00000000001115f1: jl 0x111617; and al, ch; test esp, 0x8948fffc; ret; 
0x000000000011f348: jl 0x11f35d; je 0x11f34d; ret; 
0x000000000013185f: jl 0x131848; or eax, dword ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013bb28: jl 0x13bb32; add cl, byte ptr [rcx + 0x39]; clc; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x0000000000184dda: jl 0x184e10; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184d75: jl 0x184e10; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184dfa: jl 0x184e10; add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184d24: jl 0x184e10; add rax, rdi; vzeroupper; ret; 
0x000000000018a565: jl 0x18a57e; and ecx, ebp; ret; 
0x000000000018a6b0: jl 0x18a6b4; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018a7ad: jl 0x18a7c6; add dword ptr [rdi], ecx; test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b4e1: jl 0x18b4fa; add dword ptr [rdi], ecx; test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018c83a: jl 0x18c84a; cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c83e: jl 0x18c84a; jne 0x18c529; vzeroupper; ret; 
0x000000000018fbeb: jl 0x18fbf0; neg eax; ret; 
0x000000000018fcb3: jl 0x18fcfd; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcba: jl 0x18fd04; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcc1: jl 0x18fd0b; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcc8: jl 0x18fd12; adc dword ptr [rcx - 1], edi; ret; 
0x000000000018fcf0: jl 0x18fd3a; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fcf6: jl 0x18fd40; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fcfd: jl 0x18fd47; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fd04: jl 0x18fd4e; adc dword ptr [rcx - 1], ebx; ret; 
0x000000000018feed: jl 0x18ff37; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fef4: jl 0x18ff3e; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fefb: jl 0x18ff45; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018ff02: jl 0x18ff4c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000019005b: jl 0x1900a5; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190062: jl 0x1900ac; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190069: jl 0x1900b3; adc dword ptr [rcx + 7], edi; ret; 
0x00000000001901b6: jl 0x190200; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901bd: jl 0x190207; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901c4: jl 0x19020e; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901cb: jl 0x190215; adc dword ptr [rdi - 8], edi; ret; 
0x00000000001903db: jl 0x190425; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e2: jl 0x19042c; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e9: jl 0x190433; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903f0: jl 0x19043a; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001903fd: jl 0x190447; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190403: jl 0x19044d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000019040a: jl 0x190454; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190411: jl 0x19045b; adc dword ptr [rsi - 1], edx; ret; 
0x000000000019041e: jl 0x190468; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000190424: jl 0x19046e; adc dword ptr [rsi - 1], edx; ret; 
0x00000000001904e4: jl 0x19052e; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001904eb: jl 0x190535; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001904f2: jl 0x19053c; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001904f9: jl 0x190543; adc dword ptr [rsi - 1], edx; ret; 
0x000000000019053d: jl 0x190587; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190543: jl 0x19058d; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019054a: jl 0x190594; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190551: jl 0x19059b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000001905e0: jl 0x19062a; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905e7: jl 0x190631; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905ee: jl 0x190638; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000190814: jl 0x19082d; cld; vzeroupper; ret; 
0x0000000000196d42: jl 0x196d68; adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000038856: jl 0x3885f; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000004823f: jl 0x48265; or al, ch; cdq; ret; 
0x0000000000062564: jl 0x625ae; add esp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x0000000000098d08: jl 0x98d0a; add byte ptr [rax], al; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x00000000000a4eca: jl 0xa4ee6; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a540a: jl 0xa5424; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a5467: jl 0xa5483; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ac68a: jl 0xac6f0; add rax, rdi; ret; 
0x00000000000ac69a: jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac6ba: jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac6da: jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000d41c8: jl 0xd41db; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41f8: jl 0xd420b; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4405: jl 0xe4407; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000ec3eb: jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x000000000010c91b: jle 0x10c98d; ret; 
0x000000000010c967: jle 0x10c9d9; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d273: jle 0x10d2e5; ret; 
0x000000000010d2fc: jle 0x10d36e; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x0000000000113fa4: jle 0x113fb3; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000113fe4: jle 0x113ff3; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000114018: jle 0x114027; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001178a0: jle 0x1178af; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; ret; 
0x0000000000117bba: jle 0x117bbb; inc dword ptr [rbp - 0x7cc08b40]; ret; 
0x000000000011fbf5: jle 0x11fbf7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc04; ret; 
0x0000000000120ebe: jle 0x120ef7; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x000000000014e871: jle 0x14e873; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000000152dfc: jle 0x152e08; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000183aac: jle 0x183ac4; movsxd rax, ecx; ret; 
0x0000000000183d2e: jle 0x183dd0; ret; 
0x00000000001850e5: jle 0x1850fd; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x000000000018bb18: jle 0x18bb99; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bc4b: jle 0x18bccc; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018c023: jle 0x18c03b; vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x0000000000190454: jle 0x190417; cmp dl, 4; jb 0x190461; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000198b81: jle 0x198b70; call 0x22330; test rbx, rbx; jne 0x198b75; pop rbx; ret; 
0x000000000002fdba: jle 0x2fde0; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000041ec1: jle 0x41e85; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ee1: jle 0x41ea3; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042276: jle 0x4223a; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000042296: jle 0x42258; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000423b4: jle 0x423f0; and esi, 0x807fffff; shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x000000000005b9e9: jle 0x5b8ea; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000082a75: jle 0x82a7a; or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008ccdc: jle 0x8ccf8; mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000008ce0c: jle 0x8ce28; mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x00000000000b1c41: jle 0xb1c8b; bsf eax, edx; ret; 
0x00000000000bbbc2: jle 0xbbbd3; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000e4f3d: jle 0xe4f68; mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000000e5021: jle 0xe5023; add byte ptr [rax], al; ret; 
0x00000000000e51a1: jle 0xe51b0; xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000f1ff2: jle 0xf201c; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001010e6: jne 0x1015f5; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x00000000001029a1: jne 0x1029f6; add rsp, 0x38; ret; 
0x0000000000102a7b: jne 0x102a14; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x0000000000102a3f: jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000106d53: jne 0x106d38; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c381: jne 0x10c398; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x10c3f0; ret; 
0x000000000010c431: jne 0x10c448; mov eax, 0x12; syscall; cmp rax, -0x1000; ja 0x10c4a0; ret; 
0x000000000010c98e: jne 0x10c995; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000010d39b: jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d550: jne 0x10d558; add rsp, 0x10; pop rbp; ret; 
0x000000000010d660: jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010d6b2: jne 0x10d6b9; add rsp, 0x18; ret; 
0x000000000010d837: jne 0x10da91; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret; 
0x000000000010db19: jne 0x10db48; mov eax, 0x85; syscall; cmp rax, -0x1000; ja 0x10db30; ret; 
0x000000000010db7c: jne 0x10dba8; mov eax, 0x103; syscall; cmp rax, -0x1000; ja 0x10db90; ret; 
0x000000000010dcd5: jne 0x10dcef; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010dd52: jne 0x10dd67; sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010de0f: jne 0x10de58; mov eax, 0x10c; syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x000000000010df75: jne 0x10e021; add rsp, 0x68; pop rbp; pop r12; ret; 
0x000000000010e0f0: jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e1ee: jne 0x10e200; syscall; cmp rax, -0x1000; ja 0x10e250; ret; 
0x000000000010e28e: jne 0x10e2a0; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x000000000010e6e6: jne 0x10e785; add rsp, 0x68; ret; 
0x000000000010e827: jne 0x10e8df; add rsp, 0x30; pop rbx; ret; 
0x000000000010e957: jne 0x10ea0f; add rsp, 0x30; pop rbx; ret; 
0x000000000010ea2e: jne 0x10ea40; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x10ea80; ret; 
0x000000000010eaf7: jne 0x10eacc; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ebae: jne 0x10ebc0; mov eax, 0x55; syscall; cmp rax, -0x1000; ja 0x10ec00; ret; 
0x000000000010f525: jne 0x10f570; add rsp, 0x130; pop rbp; ret; 
0x000000000010f5f7: jne 0x10f5c1; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fdb3: jne 0x10fdbd; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112b7e: jne 0x112b90; mov eax, 7; syscall; cmp rax, -0x1000; ja 0x112be0; ret; 
0x0000000000112c75: jne 0x112cf6; add rsp, 0x40; pop r12; ret; 
0x0000000000113201: jne 0x113218; mov eax, 0x146; syscall; cmp rax, -0x1000; ja 0x113288; ret; 
0x0000000000113411: jne 0x113428; mov eax, 0x115; syscall; cmp rax, -0x1000; ja 0x113480; ret; 
0x00000000001134c1: jne 0x1134d8; mov eax, 0x11d; syscall; cmp rax, -0x1000; ja 0x113530; ret; 
0x00000000001135eb: jne 0x113633; add rsp, 0x68; ret; 
0x000000000011367a: jne 0x1136c3; add rsp, 0x18; ret; 
0x0000000000113732: jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137d0: jne 0x11381b; add rsp, 0x58; ret; 
0x000000000011396f: jne 0x11394c; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000113b28: jne 0x113c09; add rsp, 0x60; mov eax, r11d; pop rbx; ret; 
0x0000000000113cad: jne 0x113cd4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113d1d: jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000113f16: jne 0x113f79; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000001140a1: jne 0x114168; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x00000000001141cf: jne 0x1141f5; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000001145fe: jne 0x114610; mov eax, 0x13; syscall; cmp rax, -0x1000; ja 0x114660; ret; 
0x000000000011469e: jne 0x1146b0; mov eax, 0x14; syscall; cmp rax, -0x1000; ja 0x114700; ret; 
0x000000000011487c: jne 0x11488b; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114baf: jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c4f: jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114d05: jne 0x114d4f; add esp, 0x38; ret; 
0x0000000000114d04: jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dd5: jne 0x114e1f; add esp, 0x38; ret; 
0x0000000000114dd4: jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000114ece: jne 0x114ed5; add rsp, 0x28; ret; 
0x00000000001150e0: jne 0x11513f; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x0000000000115191: jne 0x1151a8; mov eax, 0x17; syscall; cmp rax, -0x1000; ja 0x115210; ret; 
0x00000000001152b1: jne 0x115349; add rsp, 0x60; pop rbp; ret; 
0x00000000001153be: jne 0x1153d0; mov eax, 0x4a; syscall; cmp rax, -0x1000; ja 0x115410; ret; 
0x000000000011547e: jne 0x115490; mov eax, 0x4b; syscall; cmp rax, -0x1000; ja 0x1154d0; ret; 
0x00000000001157c9: jne 0x115815; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000115a14: jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115a8d: jne 0x115a94; add rsp, 0x28; ret; 
0x0000000000115b64: jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000115f4a: jne 0x115f20; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000011602b: jne 0x116000; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116152: jne 0x116114; xor eax, eax; pop rbp; ret; 
0x00000000001161ad: jne 0x116180; ret; 
0x000000000011653c: jne 0x116558; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000116d88: jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e57: jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001175be: jne 0x1175d0; mov eax, 1; ret; 
0x0000000000117e1a: jne 0x117e28; sub dword ptr [rip + 0xd7a2d], 1; ret; 
0x00000000001184b8: jne 0x1184c2; add rsp, 0xd8; ret; 
0x0000000000118591: jne 0x11859b; add rsp, 0xd8; ret; 
0x0000000000118879: jne 0x1188e0; sub dword ptr [rip + 0xd6fce], 1; add rsp, 8; ret; 
0x0000000000118bfe: jne 0x118c10; mov eax, 0x1a; syscall; cmp rax, -0x1000; ja 0x118c60; ret; 
0x00000000001198d9: jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011a8d6: jne 0x11a8e0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000011a984: jne 0x11a990; pop rbp; pop r12; pop r13; ret; 
0x000000000011bf4d: jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c00d: jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1eb: jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c24e: jne 0x11c289; pop rbx; pop rbp; pop r12; ret; 
0x000000000011c454: jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6c1: jne 0x11c6cb; add rsp, 0xd8; ret; 
0x000000000011c6d9: jne 0x11c708; mov eax, 0x88; syscall; cmp rax, -0x1000; ja 0x11c6f0; ret; 
0x000000000011cd3a: jne 0x11cd46; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011cdca: jne 0x11cdd6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000011cff7: jne 0x11cfe7; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d228: jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x000000000011f2d9: jne 0x11f2f3; add rsp, 0x68; ret; 
0x000000000011f3f7: jne 0x11f3c3; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f641: jne 0x11f658; mov eax, 0xe8; syscall; cmp rax, -0x1000; ja 0x11f6b0; ret; 
0x000000000011f6f1: jne 0x11f708; mov eax, 0x114; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f7a1: jne 0x11f7b8; mov eax, 0x116; syscall; cmp rax, -0x1000; ja 0x11f810; ret; 
0x000000000011f851: jne 0x11f868; mov eax, 0x113; syscall; cmp rax, -0x1000; ja 0x11f8d8; ret; 
0x000000000011f91e: jne 0x11f930; mov eax, 0x130; syscall; cmp rax, -0x1000; ja 0x11f980; ret; 
0x000000000011fcf7: jne 0x11fcba; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fff7: jne 0x11ffb7; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202ee: jne 0x120300; mov eax, 0x2b; syscall; cmp rax, -0x1000; ja 0x120350; ret; 
0x00000000001203be: jne 0x1203d0; mov eax, 0x2a; syscall; cmp rax, -0x1000; ja 0x120420; ret; 
0x00000000001204f7: jne 0x1204b2; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001205e1: jne 0x1205f8; mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120660; ret; 
0x000000000012069e: jne 0x1206b0; mov eax, 0x2f; syscall; cmp rax, -0x1000; ja 0x120700; ret; 
0x00000000001207fe: jne 0x120810; mov eax, 0x2e; syscall; cmp rax, -0x1000; ja 0x120860; ret; 
0x00000000001208a1: jne 0x1208b8; mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x120928; ret; 
0x0000000000120a8a: jne 0x120a98; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120cde: jne 0x120ce5; add rsp, 0x18; ret; 
0x0000000000120d01: jne 0x120d18; mov eax, 0x120; syscall; cmp rax, -0x1000; ja 0x120d70; ret; 
0x0000000000120db1: jne 0x120dc8; mov eax, 0x12b; syscall; cmp rax, -0x1000; ja 0x120e28; ret; 
0x0000000000120e61: jne 0x120e78; mov eax, 0x133; syscall; cmp rax, -0x1000; ja 0x120ed0; ret; 
0x0000000000120f48: jne 0x120f90; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012109d: jne 0x1210af; add rsp, 0xa0; pop rbx; ret; 
0x00000000001210d1: jne 0x1210e8; mov eax, 0x45; syscall; cmp rax, -0x1000; ja 0x121140; ret; 
0x0000000000121181: jne 0x121198; mov eax, 0x46; syscall; cmp rax, -0x1000; ja 0x121200; ret; 
0x0000000000121323: jne 0x12136b; add rsp, 0x58; ret; 
0x0000000000123321: jne 0x123328; ret; 
0x000000000012338a: jne 0x123390; ret; 
0x0000000000123573: jne 0x123580; ret; 
0x0000000000123c71: jne 0x123c78; ret; 
0x0000000000123cce: jne 0x123cd8; ret; 
0x0000000000123ea3: jne 0x123eb0; ret; 
0x0000000000123f1e: jne 0x123f50; sub dword ptr [rip + 0xcbc81], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000124ab6: jne 0x124af0; sub dword ptr [rip + 0xcb219], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124b8e: jne 0x124ba8; sub dword ptr [rip + 0xcb141], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000125b13: jne 0x125b50; sub dword ptr [rip + 0xca1f0], 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000125bee: jne 0x125c20; sub dword ptr [rip + 0xca169], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000126566: jne 0x1265a0; sub dword ptr [rip + 0xc98c1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012663e: jne 0x126658; sub dword ptr [rip + 0xc97e9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000127b4e: jne 0x127b58; pop rbx; pop rbp; pop r12; ret; 
0x000000000012838d: jne 0x128373; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000129d6f: jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012b8a0: jne 0x12b8d0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ba98: jne 0x12baa2; add rsp, 0xd8; ret; 
0x000000000012bb36: jne 0x12bb1e; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012d07d: jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000012d115: jne 0x12d101; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000012d0f9: jne 0x12d108; cmp qword ptr [rdi], 0; je 0x12d110; ret; 
0x000000000012d1ac: jne 0x12d18b; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x000000000012d2f4: jne 0x12d3cd; leave; ret; 
0x000000000012daf2: jne 0x12dae0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dac9: jne 0x12db10; and ecx, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012dbb2: jne 0x12dba0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012db89: jne 0x12dbd0; and ecx, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012dc72: jne 0x12dc60; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dc49: jne 0x12dc90; and ecx, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dd32: jne 0x12dd24; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ee1]; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x000000000012ddff: jne 0x12dde8; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012df0e: jne 0x12deb8; mov rax, rdi; ret; 
0x000000000012e079: jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e16f: jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e289: jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012e351: jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012ecff: jne 0x12ed10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000012edc4: jne 0x12edb0; sub rsp, 8; call 0x12e560; nop; mov rax, rdi; ret; 
0x000000000012ee95: jne 0x12ee80; sub rsp, 8; call 0x12e560; ret; 
0x000000000012ef27: jne 0x12ef10; sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012efee: jne 0x12ef99; mov rax, rdi; ret; 
0x000000000012f18f: jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a9: jne 0x12f2b3; add rsp, 0xd8; ret; 
0x000000000012f371: jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f7b8: jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f818: jne 0x12f825; add rsp, 0x28; ret; 
0x000000000012f8e1: jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9c1: jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012faa1: jne 0x12faab; add rsp, 0xd8; ret; 
0x000000000012fef3: jne 0x130096; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000013185b: jne 0x131898; sub dword ptr [rip + 0xbe77c], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013193c: jne 0x131980; sub dword ptr [rip + 0xbe6a3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000131a21: jne 0x131a40; sub dword ptr [rip + 0xbe5be], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013258c: jne 0x1325d0; sub dword ptr [rip + 0xbdb1b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000132671: jne 0x132690; sub dword ptr [rip + 0xbda36], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001331ee: jne 0x133220; sub dword ptr [rip + 0xbcf61], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001332bc: jne 0x133300; sub dword ptr [rip + 0xbce9b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013339e: jne 0x1333b8; sub dword ptr [rip + 0xbcdb9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013464e: jne 0x134680; sub dword ptr [rip + 0xbbc69], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013471c: jne 0x134760; sub dword ptr [rip + 0xbbba3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000001347fe: jne 0x134818; sub dword ptr [rip + 0xbbac1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001367ef: jne 0x136819; add rsp, 0x38; ret; 
0x000000000013688c: jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f9: jne 0x136900; add rsp, 0x28; ret; 
0x00000000001370e0: jne 0x136ffa; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000137d73: jne 0x137d60; pop rbx; ret; 
0x0000000000137e35: jne 0x137ea0; sub dword ptr [rip + 0xb85fa], 1; add rsp, 8; ret; 
0x000000000013815d: jne 0x1381c0; sub dword ptr [rip + 0xb82d2], 1; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x0000000000138876: jne 0x1388b0; sub dword ptr [rip + 0xb7bc1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013894e: jne 0x138968; sub dword ptr [rip + 0xb7ae9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000139f88: jne 0x13a00f; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a42e: jne 0x13a420; mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a86d: jne 0x13a897; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013bb6c: jne 0x13bb40; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x000000000013c387: jne 0x13c3b0; shr esi, 3; mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000013c54d: jne 0x13c568; mov eax, r8d; ret; 
0x000000000013c912: jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013c938: jne 0x13c950; movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x000000000013ca0d: jne 0x13ca55; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013caab: jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x000000000013cd74: jne 0x13ce3c; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000013cebb: jne 0x13cf11; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013d88b: jne 0x13d8e0; sub dword ptr [rip + 0xb2c84], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013e09f: jne 0x13e134; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x000000000013e349: jne 0x13e365; add rsp, 0x20; pop rbx; ret; 
0x000000000013e39e: jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3f1: jne 0x13e3f8; add rsp, 0x28; ret; 
0x000000000013ec80: jne 0x13ec87; add rsp, 0x18; ret; 
0x000000000013f1f7: jne 0x13f1dd; mov eax, r10d; ret; 
0x0000000000141330: jne 0x141338; ret; 
0x0000000000141374: jne 0x141360; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014145e: jne 0x141468; pop rbx; pop rbp; pop r12; ret; 
0x0000000000142616: jne 0x142660; sub dword ptr [rip + 0xae3f9], 1; pop rbp; ret; 
0x000000000014319e: jne 0x1431a8; ret; 
0x00000000001432fb: jne 0x143323; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000144bdd: jne 0x144be6; add rsp, 0x10; pop r12; ret; 
0x00000000001463e4: jne 0x146368; ret; 
0x000000000014654b: jne 0x146553; add rsp, 0x40; pop rbp; ret; 
0x00000000001465c0: jne 0x1465a6; call 0x146490; or dword ptr [rip + 0xaa512], 2; add rsp, 8; lea rax, [rip + 0xaa527]; ret; 
0x00000000001465f7: jne 0x146608; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000147313: jne 0x147336; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000001474eb: jne 0x147598; add rsp, 0x68; pop rbx; pop rbp; ret; 
0x000000000014768e: jne 0x147707; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000147757: jne 0x147768; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001478ff: jne 0x147935; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001482c7: jne 0x1482d8; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148377: jne 0x148388; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001483d7: jne 0x1483e8; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000148453: jne 0x148460; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001484d7: jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x0000000000149321: jne 0x149363; add rsp, 0x10; pop rbx; ret; 
0x00000000001493b7: jne 0x149460; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000149894: jne 0x1498c2; add rsp, 0x10; pop rbx; ret; 
0x0000000000149932: jne 0x149965; add rsp, 0x10; pop rbx; ret; 
0x0000000000149e9c: jne 0x149e0c; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000149f6c: jne 0x149edc; pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000014a545: jne 0x14a557; add rsp, 0x40; pop rbx; ret; 
0x000000000014b18c: jne 0x14b1a0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014b227: jne 0x14b238; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014b2be: jne 0x14b2d0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014c41e: jne 0x14c450; sub dword ptr [rip + 0xa48a1], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000014c88c: jne 0x14c8d0; sub dword ptr [rip + 0xa4493], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000014c96e: jne 0x14c988; sub dword ptr [rip + 0xa43b1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014e02c: jne 0x14e030; ret; 
0x000000000014e07f: jne 0x14e090; mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000014e787: jne 0x14e7ea; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000014e86f: jne 0x14e8f3; add rsp, 0x20; pop rbx; ret; 
0x000000000014eab8: jne 0x14eb62; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret; 
0x000000000014ec02: jne 0x14ec9d; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000151943: jne 0x151961; add rsp, 0x10; pop rbx; ret; 
0x0000000000151b45: jne 0x151bd7; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000151c95: jne 0x151d0a; add rsp, 0x10; pop r12; ret; 
0x0000000000151dc5: jne 0x151e36; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x0000000000151f0c: jne 0x151f7a; add rsp, 0x30; pop rbx; ret; 
0x000000000015204c: jne 0x1520ba; add rsp, 0x30; pop rbx; ret; 
0x00000000001521ad: jne 0x152252; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000015234d: jne 0x1523f2; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000001524d3: jne 0x1524e3; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000001525a3: jne 0x152616; add rsp, 0x10; mov eax, r8d; pop r12; ret; 
0x00000000001526e2: jne 0x15275a; add rsp, 0x28; pop rbx; pop r12; ret; 
0x000000000015288b: jne 0x1528cd; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret; 
0x0000000000152ea6: jne 0x152ed8; add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000153482: jne 0x1534d0; lea rax, [rip + 0x9d9b5]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x0000000000153b77: jne 0x153b80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000153c05: jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000153c7b: jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ceb: jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d5b: jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153dbc: jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e20: jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e8b: jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f0e: jne 0x153f15; add rsp, 0x78; ret; 
0x0000000000154443: jne 0x154468; add rsp, 0x28; ret; 
0x000000000015472c: jne 0x154730; ret; 
0x000000000015477f: jne 0x154790; mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000001548cc: jne 0x1548d7; add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x75; ret; 
0x0000000000155eb6: jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000155f21: jne 0x155f63; add rsp, 0x10; pop rbx; ret; 
0x0000000000155fb1: jne 0x155ff2; add rsp, 0x10; pop rbx; ret; 
0x0000000000156081: jne 0x1560c5; add rsp, 0x10; pop rbp; ret; 
0x0000000000156111: jne 0x1561af; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000156201: jne 0x15629f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001562f1: jne 0x15638f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001563e1: jne 0x15647f; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001564d1: jne 0x156514; add rsp, 0x10; pop rbx; ret; 
0x0000000000156561: jne 0x1565a3; add rsp, 0x10; pop rbx; ret; 
0x00000000001565f0: jne 0x156640; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000156690: jne 0x1566e0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000156731: jne 0x156779; add rsp, 0x10; pop rbx; ret; 
0x00000000001567c1: jne 0x156803; add rsp, 0x10; pop rbx; ret; 
0x0000000000156aba: jne 0x156bee; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157055: jne 0x1570ef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157145: jne 0x1571df; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157235: jne 0x1572cf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000157325: jne 0x1573bf; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000001574b1: jne 0x1574f5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157541: jne 0x157585; add rsp, 0x10; pop rbx; ret; 
0x00000000001575d1: jne 0x157615; add rsp, 0x10; pop rbx; ret; 
0x0000000000157661: jne 0x1576a5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157d39: jne 0x157d44; add rsp, 0x90; pop rbx; ret; 
0x0000000000157dad: jne 0x157db7; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e0e: jne 0x157e18; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e7a: jne 0x157e82; add rsp, 0x10; pop rbx; ret; 
0x0000000000157eed: jne 0x157ef5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157f56: jne 0x157f68; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157fa6: jne 0x157fb8; mov r8d, 1; mov eax, r8d; ret; 
0x000000000015c7ce: jne 0x15c7ef; add rsp, 0x520; mov rax, r12; pop r12; ret; 
0x000000000015cce2: jne 0x15cd14; add rsp, 0x18; ret; 
0x000000000015cd4f: jne 0x15cd80; sub dword ptr [rip + 0x94900], 1; add rsp, 8; ret; 
0x000000000015cde9: jne 0x15ce30; sub dword ptr [rip + 0x94866], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015ce95: jne 0x15ced0; sub dword ptr [rip + 0x947ba], 1; mov rax, r8; pop rbp; ret; 
0x000000000015cf2f: jne 0x15cf60; sub dword ptr [rip + 0x94720], 1; add rsp, 8; ret; 
0x000000000015cfd9: jne 0x15d00c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d069: jne 0x15d09c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d0f9: jne 0x15d148; sub dword ptr [rip + 0x94556], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015d1d9: jne 0x15d228; sub dword ptr [rip + 0x94476], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015d3e0: jne 0x15d415; add rsp, 0x190; mov rax, r8; pop rbp; ret; 
0x000000000015e548: jne 0x15e619; add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000015eb48: jne 0x15eb5f; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000015fc34: jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd2b: jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fed4: jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff9d: jne 0x15ffdc; add rsp, 0x38; ret; 
0x0000000000160b7c: jne 0x160bcf; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000160c3a: jne 0x160c45; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160d22: jne 0x160d30; pop rbx; ret; 
0x0000000000160d52: jne 0x160d60; pop rbx; ret; 
0x0000000000161030: jne 0x161037; add rsp, 0x28; ret; 
0x0000000000162ff7: jne 0x162f87; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001635bb: jne 0x1635c3; add rsp, 0x10; pop rbx; ret; 
0x0000000000163641: jne 0x163649; add rsp, 0x10; pop rbx; ret; 
0x0000000000178571: jne 0x178b20; ret; 
0x000000000017c902: jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017e0ac: jne 0x17e0e0; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000183c34: jne 0x183ca0; test esi, esi; je 0x183c18; xor eax, eax; ret; 
0x000000000018412d: jne 0x184110; sub eax, ecx; vzeroupper; ret; 
0x0000000000184612: jne 0x1845f0; sub eax, ecx; vzeroupper; ret; 
0x0000000000184943: jne 0x184960; xor eax, eax; vzeroupper; ret; 
0x0000000000184906: jne 0x1849a0; xor eax, eax; vzeroupper; ret; 
0x00000000001850f4: jne 0x185000; ret; 
0x0000000000184ffa: jne 0x185000; vzeroupper; ret; 
0x0000000000188c83: jne 0x188cb0; mov rax, r8; vzeroupper; ret; 
0x0000000000188c4a: jne 0x188cf0; mov rax, r8; vzeroupper; ret; 
0x000000000018a500: jne 0x18a930; vzeroupper; ret; 
0x000000000018b218: jne 0x18b660; vzeroupper; ret; 
0x000000000018be48: jne 0x18be2b; vzeroupper; ret; 
0x000000000018c032: jne 0x18bfb0; ret; 
0x000000000018bfaa: jne 0x18bfb0; vzeroupper; ret; 
0x000000000018bfd6: jne 0x18bfbc; ret; 
0x000000000018c3f3: jne 0x18c410; xor eax, eax; vzeroupper; ret; 
0x000000000018c3b6: jne 0x18c450; xor eax, eax; vzeroupper; ret; 
0x000000000018c54e: jne 0x18c529; vzeroupper; ret; 
0x000000000018c86b: jne 0x18c850; sub eax, ecx; vzeroupper; ret; 
0x000000000018c9d9: jne 0x18c9a6; vzeroupper; ret; 
0x000000000018cd50: jne 0x18cd30; sub eax, ecx; vzeroupper; ret; 
0x000000000018d633: jne 0x18d660; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x000000000018d5fd: jne 0x18d6a0; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x000000000018e967: jne 0x18ed93; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e40d: jne 0x18ed93; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e361: jne 0x18ed93; xor eax, eax; ret; 
0x000000000018e458: jne 0x18ed9f; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e389: jne 0x18ed9f; xor eax, eax; ret; 
0x000000000018e65a: jne 0x18edaa; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e4ed: jne 0x18edc0; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000018f991: jne 0x18fbd3; xor eax, eax; ret; 
0x000000000018f9b7: jne 0x18fbe6; xor eax, eax; ret; 
0x0000000000190d1b: jne 0x190cf6; vzeroupper; ret; 
0x0000000000190f20: jne 0x190e10; lea rax, [rdi + 0xb]; ret; 
0x0000000000190eda: jne 0x190e10; lea rax, [rdi + 0xf]; ret; 
0x0000000000190e85: jne 0x190e10; lea rax, [rdi + 3]; ret; 
0x0000000000190e57: jne 0x190e10; lea rax, [rdi + 7]; ret; 
0x0000000000190e06: jne 0x190e14; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000190e7c: jne 0x190ff0; test dl, 4; jne 0x190e10; lea rax, [rdi + 3]; ret; 
0x0000000000190f5e: jne 0x191020; test al, 0x40; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x0000000000190f66: jne 0x191030; lea rax, [rdi + 7]; ret; 
0x0000000000190e4e: jne 0x191030; test dl, 0x40; jne 0x190e10; lea rax, [rdi + 7]; ret; 
0x0000000000190f17: jne 0x191060; test dh, 4; jne 0x190e10; lea rax, [rdi + 0xb]; ret; 
0x0000000000190fb0: jne 0x191090; test ah, 0x40; jne 0x1910a0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190fb9: jne 0x1910a0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190ed1: jne 0x1910a0; test dh, 0x40; jne 0x190e10; lea rax, [rdi + 0xf]; ret; 
0x00000000001922b5: jne 0x192330; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000001925e4: jne 0x1927f0; xor eax, eax; ret; 
0x0000000000192744: jne 0x192805; cmp eax, ecx; jne 0x192805; xor eax, eax; ret; 
0x0000000000192801: jne 0x192805; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000001927e0: jne 0x192805; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x192805; xor eax, eax; ret; 
0x0000000000192691: jne 0x192805; xor eax, eax; ret; 
0x0000000000192e0e: jne 0x192e20; mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; xor eax, eax; ret; 
0x0000000000192ced: jne 0x192e20; ret; 
0x0000000000192e16: jne 0x192e20; xor eax, eax; ret; 
0x0000000000196c1d: jne 0x196b70; add rsp, 0x38; ret; 
0x0000000000196e9c: jne 0x196ef3; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000197043: jne 0x1970d9; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x00000000001972b5: jne 0x197332; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000001975bb: jne 0x1975a8; call 0x22330; test rbx, rbx; jne 0x1975ad; pop rbx; ret; 
0x00000000001975c5: jne 0x1975ad; pop rbx; ret; 
0x000000000019883e: jne 0x198820; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198916: jne 0x198900; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198969: jne 0x198940; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198b8b: jne 0x198b75; pop rbx; ret; 
0x0000000000198c2d: jne 0x198c10; pop rbx; ret; 
0x0000000000198c95: jne 0x198cc0; sub dword ptr [rip + 0x55b62], 1; pop rbx; ret; 
0x0000000000198dbf: jne 0x198db0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198dfd: jne 0x198de8; mov rdi, qword ptr [rip + 0x5632a]; call 0x22330; pop rbx; mov qword ptr [rip + 0x56319], 0; ret; 
0x0000000000198fab: jne 0x198fb2; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000198fa6: jne 0x198ff0; sub dword ptr [rip + 0x57569], 1; pop rbp; ret; 
0x000000000009e8ce: jne 0x2372e; pop rbx; pop rbp; pop r12; ret; 
0x0000000000023a65: jne 0x23a3b; mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000023a75: jne 0x23a3b; ret; 
0x0000000000024489: jne 0x244c0; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000002ca02: jne 0x2ca04; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000002f6f8: jne 0x2f7bf; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000002f82a: jne 0x2f85d; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000003007a: jne 0x30050; mov byte ptr [r12], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000033d9f: jne 0x33da8; mov eax, r8d; ret; 
0x0000000000040fbd: jne 0x40f98; ret; 
0x0000000000041238: jne 0x41220; mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000041cfa: jne 0x41c50; mov edx, r8d; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x0000000000041e58: jne 0x41e2a; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e26: jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x00000000000421ec: jne 0x421f8; addsd xmm0, xmm0; ret; 
0x00000000000422fb: jne 0x42310; and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x0000000000042352: jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000042518: jne 0x42520; addss xmm0, xmm0; ret; 
0x00000000000428a6: jne 0x4282f; movdqa xmm1, xmm0; call 0x192eb0; add rsp, 0x10; pop rbx; ret; 
0x0000000000042b95: jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042c3a: jne 0x42c48; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000042eef: jne 0x42ef9; add rsp, 0x148; ret; 
0x000000000004301c: jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x0000000000043230: jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043328: jne 0x433c6; add rsp, 0x98; ret; 
0x000000000004354a: jne 0x43558; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000435c4: jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043647: jne 0x43658; add rsp, 0x118; ret; 
0x00000000000436c1: jne 0x436f8; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000043752: jne 0x4375c; add rsp, 0x98; ret; 
0x00000000000437cd: jne 0x437e7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x00000000000438e6: jne 0x4390f; add rsp, 0x140; mov eax, r8d; pop rbx; ret; 
0x0000000000043996: jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043a8a: jne 0x43ab6; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000043cf2: jne 0x43cfc; add rsp, 0x148; ret; 
0x0000000000043dd7: jne 0x43de8; mov edx, dword ptr [rdi]; test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x0000000000044319: jne 0x44337; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000004439c: jne 0x443b7; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000044422: jne 0x4442c; add rsp, 0xa8; ret; 
0x00000000000466ff: jne 0x4671b; add byte ptr [rcx], al; xor eax, eax; pop rbx; ret; 
0x00000000000466fa: jne 0x46728; sub dword ptr [rip + 0x1a7585], 1; xor eax, eax; pop rbx; ret; 
0x000000000004736f: jne 0x47378; pop rbx; ret; 
0x0000000000047443: jne 0x4744a; add rsp, 0x28; ret; 
0x0000000000047533: jne 0x4753a; add rsp, 0x28; ret; 
0x00000000000475f7: jne 0x47630; sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x0000000000047867: jne 0x478ba; add rsp, 0x18; ret; 
0x0000000000047dbd: jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e0a: jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e5c: jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea9: jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047efc: jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f49: jne 0x47f50; add rsp, 0x18; ret; 
0x000000000004821e: jne 0x48230; mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000051aea: jne 0x51b1c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051b9a: jne 0x51bfb; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000051c68: jne 0x51cc4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000521f6: jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c05: jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414f: jne 0x54159; add rsp, 0xd8; ret; 
0x000000000005430d: jne 0x54300; pop rbx; ret; 
0x0000000000054338: jne 0x54330; pop rbx; ret; 
0x000000000005503e: jne 0x55043; push r10; ret; 
0x0000000000055547: jne 0x5554c; push r10; ret; 
0x0000000000055626: jne 0x555ac; sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x000000000005562c: jne 0x55610; mov eax, 1; ret; 
0x000000000005586e: jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x0000000000055874: jne 0x55858; mov eax, 1; ret; 
0x0000000000055c43: jne 0x55c30; mov rax, rdx; ret; 
0x0000000000056527: jne 0x56518; mov rax, rdx; ret; 
0x00000000000578c2: jne 0x57945; leave; ret; 
0x0000000000057b34: jne 0x57b50; test rsi, rsi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057b39: jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057bea: jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057be3: jne 0x57bd2; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057bc5: jne 0x57be0; test rsi, rsi; jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057bca: jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057d47: jne 0x57d70; test rax, rax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000057d4c: jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000005b05a: jne 0x5b0ad; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000005b39b: jne 0x5b390; cmp rax, rdi; jae 0x5b350; mov rax, r10; pop rbx; ret; 
0x000000000005b5b3: jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b875: jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061050: jne 0x61088; sub dword ptr [rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x0000000000061c78: jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d4d: jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061e04: jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed6: jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f98: jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062058: jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062146: jne 0x62150; add rsp, 0xd8; ret; 
0x000000000006221d: jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000062350: jne 0x6235f; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x00000000000623e0: jne 0x623fc; add rsp, 0x410; pop rbp; pop r12; pop r13; ret; 
0x0000000000062563: jne 0x625e1; add rsp, 0x10; pop rbx; pop r12; pop r13; ret; 
0x000000000006264e: jne 0x626b1; add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000062728: jne 0x6275d; add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000000627ac: jne 0x627b0; pop rbx; ret; 
0x0000000000062843: jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de7: jne 0x62df7; add rsp, 0x18; ret; 
0x0000000000063010: jne 0x63028; mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000063088: jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000063170: jne 0x6317a; add rsp, 0xd8; ret; 
0x000000000006324b: jne 0x63255; add rsp, 0xd8; ret; 
0x0000000000063393: jne 0x633a2; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret; 
0x0000000000081a3a: jne 0x81aa5; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000081bf8: jne 0x81c65; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000081d33: jne 0x81dca; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000083f3a: jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x00000000000864c8: jne 0x864d2; add rsp, 0xd8; ret; 
0x0000000000086584: jne 0x8658e; add rsp, 0xd8; ret; 
0x000000000008667d: jne 0x86687; add rsp, 0xd8; ret; 
0x000000000008674d: jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086806: jne 0x86810; add rsp, 0xd8; ret; 
0x0000000000086ba5: jne 0x86bb4; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x0000000000086e21: jne 0x86e10; ret; 
0x0000000000087733: jne 0x8767e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000000878bb: jne 0x8780e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000087e9c: jne 0x87eb0; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000089073: jne 0x89096; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000089a50: jne 0x89aea; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008a3fd: jne 0x8a4ec; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000008a71c: jne 0x8a730; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000008ac3e: jne 0x8ac80; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008ba73: jne 0x8ba98; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cd24: jne 0x8cd32; xor r8d, r8d; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x000000000008d36d: jne 0x8d380; mov rdi, rbp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000008d7cd: jne 0x8d7e0; mov rdi, rbp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000008dbd8: jne 0x8dbeb; add rsp, 0x48; ret; 
0x000000000008e162: jne 0x8e170; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000908a9: jne 0x908b0; ret; 
0x0000000000090fee: jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000916e9: jne 0x916d8; ret; 
0x0000000000092726: jne 0x92718; ret; 
0x00000000000929e1: jne 0x929a3; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009354e: jne 0x93540; ret; 
0x0000000000093587: jne 0x93598; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000938fa: jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000094603: jne 0x945ec; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x0000000000094666: jne 0x94654; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000009471d: jne 0x94700; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000949f5: jne 0x94a30; sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x0000000000094aac: jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094d2b: jne 0x94d40; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x0000000000094fb7: jne 0x94f98; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000009563d: jne 0x95628; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000098d06: jne 0x98d88; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x00000000000991ff: jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x0000000000099eae: jne 0x99e90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000099f4d: jne 0x99f88; sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x000000000009a057: jne 0x9a03f; test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000009a05c: jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000009c26f: jne 0x9c258; sub rax, 0x10; ret; 
0x000000000009d4dc: jne 0x9d58f; add rsp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d5ff: jne 0x9d6b2; add rsp, 0x18; ret; 
0x000000000009e851: jne 0x9e840; xor eax, eax; ret; 
0x000000000009e92b: jne 0x9e920; ret; 
0x000000000009f0e0: jne 0x9f0f8; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x000000000009f210: jne 0x9f228; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f6f0: jne 0x9f708; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f7c0: jne 0x9f7d8; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f85c: jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000a0502: jne 0xa04f0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a04d9: jne 0xa0520; and ecx, 8; lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000a05c2: jne 0xa05b4; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0661]; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x00000000000a0662: jne 0xa0650; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0639: jne 0xa0680; and ecx, 8; lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a0730: jne 0xa0748; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x00000000000a0790: jne 0xa07a8; test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x00000000000a09d2: jne 0xa09c0; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a09a9: jne 0xa09f0; and ecx, 8; lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a13f4: jne 0xa13e0; ret; 
0x00000000000a1df7: jne 0xa1de0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a20bb: jne 0xa20a0; pop rbx; mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x00000000000a2858: jne 0xa27f0; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000a28ce: jne 0xa28c0; add rax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x00000000000a861f: jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000a86e5: jne 0xa86d0; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x00000000000a877f: jne 0xa8770; mov rax, r8; ret; 
0x00000000000a87b3: jne 0xa87a0; mov rax, r8; ret; 
0x00000000000a87f0: jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a880e: jne 0xa8820; add rax, 1; movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x00000000000a88a0: jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000000a88d2: jne 0xa88c0; ret; 
0x00000000000a892c: jne 0xa8908; ret; 
0x00000000000aa64c: jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x00000000000ac0b5: jne 0xac190; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac157: jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac127: jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac3a3: jne 0xac3f0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac60a: jne 0xac680; xor eax, eax; ret; 
0x00000000000ac639: jne 0xac6b0; xor eax, eax; ret; 
0x00000000000b1d67: jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000b76ca: jne 0xb7f80; ret; 
0x00000000000b8dad: jne 0xb97d0; ret; 
0x00000000000bb4e1: jne 0xbb4d0; ret; 
0x00000000000bb4d8: jne 0xbb4f0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb591: jne 0xbb580; ret; 
0x00000000000bb588: jne 0xbb5a0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x00000000000bb701: jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000bb6f8: jne 0xbb710; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000bb851: jne 0xbb840; sub rax, 1; ret; 
0x00000000000bb848: jne 0xbb860; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x00000000000bbf57: jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000bcb41: jne 0xbcb18; mov rax, r8; ret; 
0x00000000000bcc38: jne 0xbcc28; xor eax, eax; ret; 
0x00000000000bccce: jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x00000000000bccd2: jne 0xbccb0; ret; 
0x00000000000bcd52: jne 0xbcd69; and ch, 2; lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000bd5c7: jne 0xbd630; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bdfbd: jne 0xbdfb0; ret; 
0x00000000000beeb2: jne 0xbeead; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000c680b: jne 0xc686c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000c68e9: jne 0xc6945; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000c69bb: jne 0xc69ed; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000ca0b3: jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000ca59c: jne 0xca641; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cab90: jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac6b: jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000cadb8: jne 0xcadc7; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret; 
0x00000000000cdfbb: jne 0xce00e; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000ce295: jne 0xce370; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce337: jne 0xce390; xor eax, eax; ret; 
0x00000000000ce307: jne 0xce3b0; xor eax, eax; ret; 
0x00000000000cef2f: jne 0xcf080; ret; 
0x00000000000cef0e: jne 0xcf080; xor eax, eax; ret; 
0x00000000000cf15a: jne 0xcf160; mov eax, r9d; ret; 
0x00000000000cf4e7: jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf4df: jne 0xcf660; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf697: jne 0xcf69d; xor rax, rax; ret; 
0x00000000000d01f3: jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d026d: jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d0ed7: jne 0xd0f08; mov eax, 0x60; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000d1039: jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000d119b: jne 0xd11fe; add rsp, 0xe0; mov eax, r8d; pop rbx; ret; 
0x00000000000d290a: jne 0xd2940; sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x00000000000d41f7: jne 0xd4275; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d42e6: jne 0xd42f0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000d4a8d: jne 0xd4aa0; mov rax, r8; add rsp, 8; ret; 
0x00000000000da6bc: jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf8c: jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000dd768: jne 0xdd739; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000dd817: jne 0xdd800; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ddc55: jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce9: jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000de192: jne 0xde1c0; sub dword ptr [rbx + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000de239: jne 0xde268; sub dword ptr [rbx + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000de743: jne 0xde77a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x00000000000df40f: jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000df4ce: jne 0xdf500; sub dword ptr [rip + 0x10fe09], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000dfc26: jne 0xdfc60; sub dword ptr [rip + 0x10f741], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfcfe: jne 0xdfd18; sub dword ptr [rip + 0x10f669], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e14a4: jne 0xe14dc; lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x00000000000e160b: jne 0xe167c; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e1b56: jne 0xe1b90; sub dword ptr [rip + 0x10d981], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1c2e: jne 0xe1c48; sub dword ptr [rip + 0x10d8a9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e2c31: jne 0xe2c48; mov eax, 0x3d; syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2e15: jne 0xe2e25; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000e2e3e: jne 0xe2e50; mov eax, 0x22; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x00000000000e2ec9: jne 0xe2ed0; add rsp, 8; ret; 
0x00000000000e3666: jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3836: jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418f: jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422f: jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44ff: jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45af: jne 0xe4613; add rsp, 0x38; ret; 
0x00000000000e49b4: jne 0xe4ed4; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000e4f4b: jne 0xe4f50; ret; 
0x00000000000e4f59: jne 0xe4fcd; mov eax, 0x7d00; ret; 
0x00000000000e4fc5: jne 0xe4fe3; mov eax, 0xfffa; ret; 
0x00000000000e50e6: jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000e57a0: jne 0xe597d; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000e81e3: jne 0xe8191; xor eax, eax; ret; 
0x00000000000e81a5: jne 0xe81d9; mov eax, 1; ret; 
0x00000000000e81c6: jne 0xe81f9; mov eax, 1; ret; 
0x00000000000e82d0: jne 0xe82c0; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e83d1: jne 0xe83c0; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec403: jne 0xec3ed; mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3d2: jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000ee434: jne 0xee3bd; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x00000000000ee495: jne 0xee3bd; ret; 
0x00000000000ee580: jne 0xee5d8; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000f15ff: jne 0xf1599; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000094d28: jne 0xffffffff831cc324; or dh, bh; xor eax, eax; ret; 
0x0000000000116efb: jno 0x116f4c; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213fb: jno 0x1213a7; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001525a4: jno 0x1525ee; add esp, 0x10; mov eax, r8d; pop r12; ret; 
0x0000000000157b1b: jno 0x157a9e; std; call qword ptr [rax - 0x5e1f00d]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000018bb10: jno 0x18baf2; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bc43: jno 0x18bc25; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018e61e: jno 0x18e627; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018fcc4: jno 0x18fcc4; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fefe: jno 0x18fefe; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000190065: jno 0x19006d; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000001901b5: jno 0x190233; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901bc: jno 0x19023a; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901c3: jno 0x190241; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901ca: jno 0x190248; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000190920: jno 0x190920; jg 0x190966; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190aab: jno 0x190aab; jg 0x190af1; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000000422b9: jno 0x422d1; add byte ptr [rdi], cl; push rsp; ret; 
0x00000000000860c1: jno 0x860c7; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086268: jno 0x8626e; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000095197: jno 0x951ae; add byte ptr [rcx - 0x77], al; imul esp, dword ptr [rbx*2 + 0x10438941], 0x41; mov dword ptr [rbx + 0x14], 0; ret; 
0x000000000009f0e4: jno 0x9f0e8; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x000000000009f214: jno 0x9f218; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f6f4: jno 0x9f6f8; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f7c4: jno 0x9f7c8; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x00000000000a0734: jno 0xa0738; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x00000000000a0794: jno 0xa0798; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x00000000000bbd48: jno 0xbbd3a; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbe36: jno 0xbbe28; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bc874: jno 0xbc878; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000d012d: jno 0xd01ae; and byte ptr [rax - 0x73], cl; add eax, 0x11ef69; add rsp, 8; ret; 
0x00000000001170f0: jnp 0x117078; or eax, 0x894c2300; rol dh, 0x46; inc dword ptr [rax]; ret; 
0x000000000011f415: jnp 0x11f417; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f424; ret; 
0x0000000000127cf8: jnp 0x127d22; add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000137d6e: jnp 0x137db8; test rdi, rdi; jne 0x137d60; pop rbx; ret; 
0x000000000013887b: jnp 0x138888; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001972b6: jnp 0x197300; add esp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000047f87: jnp 0x47f1c; sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000081122: jnp 0x8113c; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000084438: jnp 0x84450; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000cf4e1: jnp 0xcf4e4; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf5f4: jnp 0xcf57a; in al, 0x75; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000e50e2: jnp 0xe5135; add byte ptr [rax], al; jne 0xe50f0; mov eax, 0x40; ret; 
0x00000000000ea417: jnp 0xea41a; sub byte ptr [rsp + rdx + 0x3c], dh; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000ff517: jnp 0xff541; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000043dd8: jnp 0xffffffffbad6c2f5; add dword ptr [rax], eax; add byte ptr [rax], al; cmove eax, edx; ret; 
0x000000000010c3f3: jns 0x10c3ef; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dbf3: jns 0x10dbd7; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e2f3: jns 0x10e2d0; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144ec: jns 0x1144fb; add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001158e9: jns 0x1158f0; mov byte ptr [r12], 0; mov rax, r12; pop r12; ret; 
0x000000000011c6f3: jns 0x11c6ec; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8c3: jns 0x11f912; idiv edi; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000138b43: jns 0x138b50; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000015e10c: jns 0x15e110; ret; 
0x0000000000160cf3: jns 0x160ca6; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000018bb15: jns 0x18bad7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bc48: jns 0x18bc0a; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018fccb: jns 0x18fccc; ret; 
0x000000000018ff05: jns 0x18ff06; ret; 
0x000000000019006c: jns 0x190075; ret; 
0x000000000019091d: jns 0x19091d; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190aa8: jns 0x190aa8; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000019906f: jns 0x199076; add al, ch; mov ecx, 0x48ffe892; mov dword ptr [rip + 0x5799e], 0; pop rbx; ret; 
0x00000000000344a8: jns 0x344c5; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000034546: jns 0x34563; add byte ptr [rax + 5], cl; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000043bf3: jns 0x43b77; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df3: jns 0x43d75; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000479c9: jns 0x47989; xor eax, eax; ret; 
0x000000000005b519: jns 0x5b4e1; or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000009cb8a: jns 0x9cb93; add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000bbd4c: jns 0xbbd2e; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbe3a: jns 0xbbe1c; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bc853: jns 0xbc870; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000bcaf3: jns 0xbcb1d; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000d0ef3: jns 0xd0ea4; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e4375: jns 0xe4377; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e4478: jns 0xe448a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e44a8: jns 0xe44ba; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000b7808: jns 0xffffffff83547f65; call 0x7f98c01e; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000bafc6: jns 0xffffffffed3bb323; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000bb028: jns 0xffffffffed3bb785; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb048: jns 0xffffffffed3bb8a5; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000010c968: jo 0x10c979; adc dword ptr [rdi + 0x78], edi; ret; 
0x000000000010d2fd: jo 0x10d30e; adc dword ptr [rdi + 0xf8], edi; ret; 
0x000000000015327c: jo 0x1532d9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000029e05: jo 0x29e16; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x000000000002ab61: jo 0x2ab72; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x000000000002d389: jo 0x2d39a; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x000000000002eae1: jo 0x2eaf2; mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x0000000000042038: jo 0x34e4e186; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000087f5e: jo 0x87fa0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000000951bb: jo 0x951d2; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x1570b7; ret; 
0x00000000000951db: jo 0x951f2; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x0000000000095204: jo 0x9521b; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000bd0d5: jo 0xbd132; pop rbp; pop r12; ret; 
0x00000000000bd5cc: jo 0xbd629; pop rbp; pop r12; ret; 
0x00000000000e4435: jo 0xe4437; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000001143e4: jp 0x1143f3; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000114418: jp 0x114427; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000117e1f: jp 0x117e2e; add byte ptr [rcx], al; ret; 
0x0000000000117e2d: jp 0x117e3c; add byte ptr [rbx + 0x17f01f8], al; ret; 
0x000000000011f3e5: jp 0x11f3e7; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x0000000000138953: jp 0x138960; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014949a: jp 0x1494fc; ja 0x1494b0; sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000001494a3: jp 0x1494fd; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000018a7b2: jp 0x18a7b5; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000024408: jp 0x24426; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000328ac: jp 0x328e6; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000344c8: jp 0x344e5; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000344e8: jp 0x34505; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000041e56: jp 0x41e2a; jne 0x41e2a; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e24: jp 0x41e30; jne 0x41e30; fadd st(0); add rsp, 8; ret; 
0x00000000000421ea: jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000042516: jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000095173: jp 0x9518a; add byte ptr [rcx + 1], al; adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x00000000000e4388: jp 0xe439a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b8: jp 0xe43ca; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4418: jp 0xe442a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4448: jp 0xe445a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010c918: js 0x10c929; adc dword ptr [rsi + 0x70], edi; ret; 
0x00000000001138da: js 0x1138e4; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000114593: js 0x114547; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000001145d8: js 0x1145e7; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000114664: js 0x114673; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000116364: js 0x116326; lock dec dword ptr [rax + 1]; ret; 
0x0000000000116f96: js 0x116fa0; movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000117f74: js 0x117f83; add byte ptr [rax - 0x77], cl; ret; 
0x000000000012d07b: js 0x12d085; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000013cb50: js 0x13cb60; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000015c81b: js 0x15c838; lea rax, [rip + 0x9475c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000015cc38: js 0x15cc48; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000018b3e4: js 0x18b3e8; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000033c2f: js 0x33c95; mov qword ptr [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x0000000000054335: js 0x54338; add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x0000000000087f5a: js 0x87f6c; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000008aeb1: js 0x8aeb8; ret; 
0x000000000008e4ec: js 0x8e517; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a2c34: js 0xa2c37; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x00000000000d0026: js 0xd0070; cmp eax, 0x19; jg 0xd0050; mov rax, r12; pop r12; ret; 
0x00000000000d0129: js 0xd0168; cmp eax, 0x71; jg 0xd0150; lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x00000000000e4495: js 0xe4497; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e521b: js 0xe5220; ret; 
0x00000000000b7705: js 0xffffffff83547982; call 0x7f98bf13; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000baf68: js 0xffffffffed3bb1c5; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf96: js 0xffffffffed3bb3f3; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafe8: js 0xffffffffed3bb845; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000134a67: lahf; cmp cl, 5; jbe 0x1349d9; xor eax, eax; pop rbx; ret; 
0x000000000019928d: lahf; nop; call 0xffffffff8038a293; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000004754d: lahf; popfq; sbb al, byte ptr [rax]; call 0xbd470; pop rbx; ret; 
0x0000000000074f79: lahf; ret; 
0x000000000011a01b: lahf; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x000000000009a495: lar eax, word ptr [rax]; add byte ptr [rbp + 0x4c], bl; mov eax, eax; pop r12; pop r13; ret; 
0x000000000016da7c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016dd06: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc96: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc26: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbb6: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db46: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dad6: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e0f6: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e086: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e016: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dfa6: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df36: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dec6: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de56: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dde6: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd76: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016d266: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016da0c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d98c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d8fc: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d87c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d7fc: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d77c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6fc: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d67c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d5fc: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d57c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4fc: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d47c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3ec: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d35c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2cc: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d25c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016da86: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016da11: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d991: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d901: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d881: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d801: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d781: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d701: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d681: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d601: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d581: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d501: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d481: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d361: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2d1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016dd0b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc9b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc2b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbbb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db4b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dadb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e0fb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e08b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e01b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dfab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df3b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016decb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de5b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddeb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd7b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000013c45f: lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x00000000001535d9: lea eax, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a9: lea eax, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153779: lea eax, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x00000000000ce096: lea eax, [rax + rax - 1]; ret; 
0x0000000000102aab: lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000bce39: lea eax, [rax + rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ac184: lea eax, [rax + rdi + 0x10]; ret; 
0x00000000000ac194: lea eax, [rax + rdi + 0x20]; ret; 
0x00000000000ac674: lea eax, [rax + rdi + 0x30]; ret; 
0x00000000000ac164: lea eax, [rax + rdi - 0x10]; ret; 
0x00000000000dd75b: lea eax, [rax + rdx*8]; ret; 
0x000000000009c1ef: lea eax, [rax - 8]; ret; 
0x0000000000114405: lea eax, [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x114414; ret; 
0x00000000000e8431: lea eax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e8331: lea eax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c614: lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x000000000013c460: lea eax, [rcx + rax + 2]; pop rbx; ret; 
0x0000000000047c2c: lea eax, [rcx + rax*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000b1abd: lea eax, [rcx + rsi]; ret; 
0x0000000000051442: lea eax, [rcx - 0x43]; add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000087dff: lea eax, [rcx - 1]; ret; 
0x00000000000b861c: lea eax, [rdi + 0x10]; ret; 
0x00000000000b8fec: lea eax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b8631: lea eax, [rdi + 0x11]; ret; 
0x00000000000b9011: lea eax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b864f: lea eax, [rdi + 0x12]; ret; 
0x00000000000b903f: lea eax, [rdi + 0x12]; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b866f: lea eax, [rdi + 0x13]; ret; 
0x00000000000b906f: lea eax, [rdi + 0x13]; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b8692: lea eax, [rdi + 0x14]; ret; 
0x00000000000b90a2: lea eax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b86b1: lea eax, [rdi + 0x15]; ret; 
0x00000000000b90d1: lea eax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b86d1: lea eax, [rdi + 0x16]; ret; 
0x00000000000b9101: lea eax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b86f1: lea eax, [rdi + 0x17]; ret; 
0x00000000000b9131: lea eax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b8714: lea eax, [rdi + 0x18]; ret; 
0x00000000000b9164: lea eax, [rdi + 0x18]; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b8739: lea eax, [rdi + 0x19]; ret; 
0x00000000000b9199: lea eax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b8757: lea eax, [rdi + 0x1a]; ret; 
0x00000000000b91c7: lea eax, [rdi + 0x1a]; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b8777: lea eax, [rdi + 0x1b]; ret; 
0x00000000000b91f7: lea eax, [rdi + 0x1b]; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b8793: lea eax, [rdi + 0x1c]; ret; 
0x00000000000b9223: lea eax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b87b3: lea eax, [rdi + 0x1d]; ret; 
0x00000000000b9253: lea eax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b87d3: lea eax, [rdi + 0x1e]; ret; 
0x00000000000b9283: lea eax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b87f3: lea eax, [rdi + 0x1f]; ret; 
0x00000000000b92b3: lea eax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b9663: lea eax, [rdi + 0x20]; ret; 
0x00000000000b98d9: lea eax, [rdi + 0x40]; ret; 
0x000000000018b5c9: lea eax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018b76c: lea eax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b856d: lea eax, [rdi + 0xa]; ret; 
0x00000000000b8efd: lea eax, [rdi + 0xa]; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b858d: lea eax, [rdi + 0xb]; ret; 
0x00000000000b8f1d: lea eax, [rdi + 0xb]; sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b85af: lea eax, [rdi + 0xc]; ret; 
0x00000000000b8f3f: lea eax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b85cf: lea eax, [rdi + 0xd]; ret; 
0x00000000000b8f6f: lea eax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b85ef: lea eax, [rdi + 0xe]; ret; 
0x00000000000b8f9f: lea eax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b8609: lea eax, [rdi + 0xf]; ret; 
0x00000000000b8fc9: lea eax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b84b7: lea eax, [rdi + 1]; ret; 
0x00000000000b8dc7: lea eax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018ae27: lea eax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b84ca: lea eax, [rdi + 2]; ret; 
0x000000000018b3fb: lea eax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b8dea: lea eax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018ae3b: lea eax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b84d5: lea eax, [rdi + 3]; ret; 
0x000000000018b415: lea eax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b8e05: lea eax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000018ae55: lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b84e8: lea eax, [rdi + 4]; ret; 
0x00000000000b8e28: lea eax, [rdi + 4]; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b84fd: lea eax, [rdi + 5]; ret; 
0x00000000000b8e4d: lea eax, [rdi + 5]; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b851b: lea eax, [rdi + 6]; ret; 
0x00000000000b8e6b: lea eax, [rdi + 6]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b8527: lea eax, [rdi + 7]; ret; 
0x00000000000b8e87: lea eax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b853a: lea eax, [rdi + 8]; ret; 
0x00000000000b8eaa: lea eax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x000000000013b604: lea eax, [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000b854f: lea eax, [rdi + 9]; ret; 
0x00000000000b8ecf: lea eax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000ac1b9: lea eax, [rdi + rax + 0x10]; ret; 
0x000000000018d017: lea eax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884c7: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000ac1c9: lea eax, [rdi + rax + 0x20]; ret; 
0x00000000000ac0c3: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000018d037: lea eax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884e7: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d075: lea eax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188525: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000013baa5: lea eax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x0000000000188875: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000b14d0: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018cedd: lea eax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018838d: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b16fb: lea eax, [rdi + rax]; ret; 
0x000000000018b523: lea eax, [rdi + rax]; vzeroupper; ret; 
0x00000000000a8b09: lea eax, [rdi + rdx - 1]; ret; 
0x000000000018ae6d: lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000013c987: lea eax, [rdi + rsi + 8]; mov rax, r8; ret; 
0x00000000000b19b9: lea eax, [rdi + rsi]; ret; 
0x00000000000cf4ee: lea eax, [rdi - 0x10]; ret; 
0x00000000000cf651: lea eax, [rdi - 0xc]; ret; 
0x000000000005ea30: lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000000cf671: lea eax, [rdi - 4]; ret; 
0x00000000000cf661: lea eax, [rdi - 8]; ret; 
0x00000000000b84a3: lea eax, [rdi]; ret; 
0x000000000018b20e: lea eax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b8da3: lea eax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018ada5: lea eax, [rdi]; vzeroupper; ret; 
0x000000000017adcd: lea eax, [rdx + 0xa]; ret; 
0x000000000017aded: lea eax, [rdx + 0xb]; ret; 
0x000000000017ae0f: lea eax, [rdx + 0xc]; ret; 
0x000000000017ae2f: lea eax, [rdx + 0xd]; ret; 
0x000000000017d097: lea eax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ae4f: lea eax, [rdx + 0xe]; ret; 
0x000000000017acdf: lea eax, [rdx + 0xf]; ret; 
0x000000000017ad07: lea eax, [rdx + 1]; ret; 
0x000000000017ad1d: lea eax, [rdx + 2]; ret; 
0x000000000017ad35: lea eax, [rdx + 3]; ret; 
0x000000000017ad4b: lea eax, [rdx + 4]; ret; 
0x000000000017ad5d: lea eax, [rdx + 5]; ret; 
0x000000000017ad7b: lea eax, [rdx + 6]; ret; 
0x000000000017d142: lea eax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac87: lea eax, [rdx + 7]; ret; 
0x000000000017ad8d: lea eax, [rdx + 8]; ret; 
0x000000000017adad: lea eax, [rdx + 9]; ret; 
0x0000000000122c07: lea eax, [rdx + rax*4]; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x000000000014955d: lea eax, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000121f12: lea eax, [rdx + rcx]; cmp rax, qword ptr [rip + 0xcdb34]; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000087dee: lea eax, [rdx + rdi]; ret; 
0x00000000000bc1b3: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000009c211: lea eax, [rdx - 0x10]; ret; 
0x00000000000440f0: lea eax, [rdx - 1]; mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x000000000017acf5: lea eax, [rdx]; ret; 
0x00000000000bcd58: lea eax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000bcd11: lea eax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bdf87: lea eax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bc851: lea eax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000d0131: lea eax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x000000000009f811: lea eax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f13a: lea eax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000009f661: lea eax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x00000000000bca01: lea eax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x000000000009f6a1: lea eax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000bcaf1: lea eax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc877: lea eax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000bc811: lea eax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc961: lea eax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x000000000009f89d: lea eax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f85f: lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000960ba: lea eax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x0000000000094720: lea eax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000a0737: lea eax, [rip + 0x162d3]; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x000000000009f217: lea eax, [rip + 0x17703]; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x00000000000328c1: lea eax, [rip + 0x181ab6]; ret; 
0x00000000000328a5: lea eax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000241a5: lea eax, [rip + 0x18fcf3]; ret; 
0x00000000000241b5: lea eax, [rip + 0x191abc]; ret; 
0x00000000000529f9: lea eax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000009f0e7: lea eax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x0000000000047f85: lea eax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x00000000000a030a: lea eax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x00000000000a09f5: lea eax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0685: lea eax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0525: lea eax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05aa: lea eax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000003284d: lea eax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000009faf7: lea eax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f837: lea eax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f247: lea eax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a8be1: lea eax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x000000000012dc4f: lea eax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dacf: lea eax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db8f: lea eax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012f0aa: lea eax, [rip + 0x5cc40]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000012dc2e: lea eax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db6e: lea eax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012daae: lea eax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dcff: lea eax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x000000000012dc79: lea eax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbb9: lea eax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daf9: lea eax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd39: lea eax, [rip + 0x62ee1]; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000000a0797: lea eax, [rip + 0x86f3]; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x0000000000120fe3: lea eax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015c81e: lea eax, [rip + 0x9475c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009f7c7: lea eax, [rip + 0x9733]; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f6f7: lea eax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000153485: lea eax, [rip + 0x9d9b5]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x00000000000a1c81: lea eax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000001465d3: lea eax, [rip + 0xaa527]; ret; 
0x00000000001465a7: lea eax, [rip + 0xaa553]; add rsp, 8; ret; 
0x000000000009f761: lea eax, [rip + 0xaef9]; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a0401: lea eax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a09af: lea eax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a063f: lea eax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04df: lea eax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000bcdfa: lea eax, [rip + 0xcef00]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcd79: lea eax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000001193f3: lea eax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x00000000001193a3: lea eax, [rip + 0xd6557]; pop r12; pop r13; ret; 
0x0000000000118eab: lea eax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000118e50: lea eax, [rip + 0xd6a3a]; pop rbp; pop r12; pop r13; ret; 
0x0000000000115dbc: lea eax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x00000000000a0469: lea eax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a08da: lea eax, [rip + 0xe560]; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a083a: lea eax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000a098e: lea eax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a061e: lea eax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04be: lea eax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a058f: lea eax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x00000000000a09d9: lea eax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0669: lea eax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0509: lea eax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05c9: lea eax, [rip + 0xf0661]; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x00000000000a1cc1: lea eax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x00000000000d0fd9: lea eax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0ec9: lea eax, [rip - 0x10f]; ret; 
0x00000000000d0fe9: lea eax, [rip - 0x11f]; ret; 
0x000000000009d106: lea eax, [rip - 0x12c]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d169: lea eax, [rip - 0x18f]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012dd1a: lea eax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000012db15: lea eax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbd5: lea eax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc95: lea eax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000010d477: lea eax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0eb9: lea eax, [rip - 0xff]; add rsp, 0x58; ret; 
0x0000000000123495: lea eax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000121acb: lea ebp, [rax + 0xc]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000989ca: lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000000989cb: lea ecx, [rax + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000000b8125: lea ecx, [rbx + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d5: lea ecx, [rbx + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8491: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e51: lea ecx, [rbx + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000013f1f2: lea ecx, [rdi + 1]; test al, al; jne 0x13f1dd; mov eax, r10d; ret; 
0x000000000011faee: lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x00000000001785d6: lea ecx, [rdx + 0x10]; jne 0x178b20; ret; 
0x000000000017c967: lea ecx, [rdx + 0x10]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001788d4: lea ecx, [rdx + 0xa]; jne 0x178b20; ret; 
0x000000000017ccc5: lea ecx, [rdx + 0xa]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001788f4: lea ecx, [rdx + 0xb]; jne 0x178b20; ret; 
0x000000000017ccf5: lea ecx, [rdx + 0xb]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178914: lea ecx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000017cd25: lea ecx, [rdx + 0xc]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178936: lea ecx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017cd57: lea ecx, [rdx + 0xd]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178956: lea ecx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017cd87: lea ecx, [rdx + 0xe]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178976: lea ecx, [rdx + 0xf]; jne 0x178b20; ret; 
0x000000000017cdb7: lea ecx, [rdx + 0xf]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001787cc: lea ecx, [rdx + 1]; jne 0x178b20; ret; 
0x000000000017cb6c: lea ecx, [rdx + 1]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000008df28: lea ecx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001787ee: lea ecx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000017cb8f: lea ecx, [rdx + 2]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178814: lea ecx, [rdx + 3]; jne 0x178b20; ret; 
0x000000000017cbb5: lea ecx, [rdx + 3]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017882c: lea ecx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017cbdd: lea ecx, [rdx + 4]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000008558a: lea ecx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000178852: lea ecx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017cc03: lea ecx, [rdx + 5]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178874: lea ecx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017cc35: lea ecx, [rdx + 6]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178892: lea ecx, [rdx + 7]; jne 0x178b20; ret; 
0x000000000017cc63: lea ecx, [rdx + 7]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017856e: lea ecx, [rdx + 8]; jne 0x178b20; ret; 
0x000000000017c8ff: lea ecx, [rdx + 8]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001788b4: lea ecx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000017cc95: lea ecx, [rdx + 9]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017e247: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000123319: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123328; ret; 
0x0000000000123382: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c69: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cc6: lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123cd8; ret; 
0x0000000000134a65: lea ecx, [rdx - 0x61]; cmp cl, 5; jbe 0x1349d9; xor eax, eax; pop rbx; ret; 
0x000000000018829e: lea ecx, [rip + 0x1321c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000186bbd: lea ecx, [rip + 0x148fd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001868e9: lea ecx, [rip + 0x14bd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000008e5b6: lea ecx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000001854d4: lea ecx, [rip + 0x15fe6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001839ce: lea ecx, [rip + 0x17aec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000181d3d: lea ecx, [rip + 0x1977d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181a09: lea ecx, [rip + 0x19ab1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000180134: lea ecx, [rip + 0x1b386]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000118e9f: lea ecx, [rip + 0xd69cb]; call 0x1191a0; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000123586: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012356b: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123580; ret; 
0x0000000000123e9b: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123eb0; ret; 
0x000000000018b954: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001906ef: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbe9: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000a2c33: lea edi, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x0000000000162e57: lea edi, [rax + rax]; call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x000000000013bb27: lea edi, [rax + rcx + 2]; cmp r8, rdi; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x00000000000b78ad: lea edi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fd1: lea edi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b78d0: lea edi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8ff4: lea edi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b78f5: lea edi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9019: lea edi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b7913: lea edi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9047: lea edi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b7933: lea edi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9077: lea edi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7956: lea edi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90aa: lea edi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7975: lea edi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d9: lea edi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7995: lea edi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9109: lea edi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b5: lea edi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9139: lea edi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b79d8: lea edi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b916c: lea edi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a0d: lea edi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b91a1: lea edi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a3b: lea edi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91cf: lea edi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a6b: lea edi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91ff: lea edi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a97: lea edi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b922b: lea edi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac7: lea edi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b925b: lea edi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af7: lea edi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b928b: lea edi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b7b27: lea edi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92bb: lea edi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b77f3: lea edi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed7: lea edi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000b7811: lea edi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f05: lea edi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b7831: lea edi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f25: lea edi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b7853: lea edi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f47: lea edi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b7873: lea edi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f77: lea edi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b7893: lea edi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa7: lea edi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x000000000018a4fd: lea edi, [rdi + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b215: lea edi, [rdi + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76c7: lea edi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8daa: lea edi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a6ab: lea edi, [rdi + 2]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3df: lea edi, [rdi + 2]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76eb: lea edi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dcf: lea edi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018a6cf: lea edi, [rdi + 3]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b403: lea edi, [rdi + 3]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b770e: lea edi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8df2: lea edi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018a6e9: lea edi, [rdi + 4]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b41d: lea edi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b7729: lea edi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e0d: lea edi, [rdi + 4]; jne 0xb97d0; ret; 
0x00000000000b774c: lea edi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e30: lea edi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b7771: lea edi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e55: lea edi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b778f: lea edi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e73: lea edi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b77ab: lea edi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8f: lea edi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b77ce: lea edi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8eb2: lea edi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000bbb63: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000018a714: lea edi, [rdi + rdx + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b448: lea edi, [rdi + rdx + 1]; jne 0x18b660; vzeroupper; ret; 
0x000000000008ded5: lea edi, [rip + 0x1274e9]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000098dac: lea edi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa8: lea edi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a50: lea edi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093926: lea edi, [rip + 0x15ae94]; syscall; ret; 
0x000000000009101e: lea edi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f66: lea edi, [rip + 0x16a814]; syscall; ret; 
0x0000000000046c72: lea edi, [rip + 0x16d861]; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x0000000000047650: lea edi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198ce0: lea edi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x0000000000199010: lea edi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x0000000000142680: lea edi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e49: lea edi, [rip + 0xd7a01]; syscall; ret; 
0x00000000000440cd: lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x00000000000863fd: lea edx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000008df4f: lea edx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000094e74: lea edx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x0000000000087f55: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f24: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000006ab5b: lea edx, [rax - 0x77000005]; add cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000424c0: lea edx, [rcx + rdx - 0x7e]; or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000dd755: lea edx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000033d97: lea edx, [rdi + rdx*4]; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x0000000000033df8: lea edx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x000000000012332e: lea edx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000bdf8e: lea edx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f0ee: lea edx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000001882d2: lea edx, [rip + 0x131e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009f6fe: lea edx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000186937: lea edx, [rip + 0x14b83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018691d: lea edx, [rip + 0x14b9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a27: lea edx, [rip + 0x17a93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a02: lea edx, [rip + 0x17ab8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a57: lea edx, [rip + 0x19a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a3d: lea edx, [rip + 0x19a7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004754b: lea edx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x00000000000a09fc: lea edx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a068c: lea edx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a052c: lea edx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05a3: lea edx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x0000000000175307: lea edx, [rip + 0x261b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001752e2: lea edx, [rip + 0x261d8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d97: lea edx, [rip + 0x28723]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d7d: lea edx, [rip + 0x2873d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000012dc56: lea edx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dad6: lea edx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db96: lea edx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012dc35: lea edx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db75: lea edx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012dab5: lea edx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dcf8: lea edx, [rip + 0x5e022]; lea rax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x000000000012dc80: lea edx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbc0: lea edx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012db00: lea edx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd40: lea edx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000001370f3: lea edx, [rip + 0x7b687]; mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015339c: lea edx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000bc86c: lea edx, [rip + 0xc123e]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000012ed82: lea edx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x000000000009f19e: lea edx, [rip + 0xc44fc]; cmovne rax, rdx; ret; 
0x000000000009f768: lea edx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a09b6: lea edx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a0646: lea edx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04e6: lea edx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000bcd0a: lea edx, [rip + 0xcf500]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc84a: lea edx, [rip + 0xcfc90]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9fa: lea edx, [rip + 0xcff30]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a0891: lea edx, [rip + 0xd03d9]; cmovne rax, rdx; ret; 
0x00000000000a07f1: lea edx, [rip + 0xd0459]; cmovne rax, rdx; ret; 
0x00000000000bcaea: lea edx, [rip + 0xd05a0]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc80a: lea edx, [rip + 0xd0650]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc95a: lea edx, [rip + 0xd0920]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a08e1: lea edx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0841: lea edx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000bcd5f: lea edx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x000000000009f21e: lea edx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f7ce: lea edx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x00000000000a073e: lea edx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x00000000000a079e: lea edx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x00000000000a8bda: lea edx, [rip + 0xdbfa0]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c7a: lea edx, [rip + 0xe2db0]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x000000000009faec: lea edx, [rip + 0xe41ce]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82c: lea edx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x00000000000a03fa: lea edx, [rip + 0xe4360]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x000000000009f23c: lea edx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a1cba: lea edx, [rip + 0xe6880]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f80a: lea edx, [rip + 0xe8f20]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f65a: lea edx, [rip + 0xe92a0]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f69a: lea edx, [rip + 0xe9400]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000b1467: lea edx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1442: lea edx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a0995: lea edx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a0625: lea edx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04c5: lea edx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a0588: lea edx, [rip + 0xeb7a2]; lea rax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x00000000000aee07: lea edx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aeded: lea edx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a09e0: lea edx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0670: lea edx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0510: lea edx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05d0: lea edx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x00000000000a044f: lea edx, [rip + 0xf0c5b]; cmovne rax, rdx; ret; 
0x000000000009f141: lea edx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000012d22e: lea edx, [rip - 0x104]; test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x000000000012dd13: lea edx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000012db1c: lea edx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbdc: lea edx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc9c: lea edx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000010d46c: lea edx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0e99: lea edx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb9: lea edx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000001161aa: lea edx, [rsi + 1]; jne 0x116180; ret; 
0x00000000000bbb57: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000113d3f: lea edx, [rsp + 0xc]; mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x000000000007c598: lea esi, [rax]; idiv edi; inc dword ptr [rcx - 1]; push rsp; ret; 
0x00000000000860c0: lea esi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000011619f: lea esi, [rdx + 1]; mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x0000000000077585: lea esi, [rdx + rdi*8 - 0x76b60001]; ret; 
0x000000000015d436: lea esi, [rdx - 1]; cmp si, 3; ja 0x15d450; cmp dx, cx; sete al; ret; 
0x0000000000145abe: lea esi, [rip + 0x6fbc0]; call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x00000000000bbb68: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000349da: lea esi, [rsp + 8]; xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000075cc3: lea esp, [rax]; idiv edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e14a7: lea esp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000046070: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000001535d8: lea r8, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a8: lea r8, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153778: lea r8, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x000000000013c986: lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x000000000014955c: lea r8d, [rdx + rax]; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000018b953: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001906ee: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbe8: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000047c2b: lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000e5201: lea rax, [rax + rax - 1]; ret; 
0x00000000000bce38: lea rax, [rax + rbx*4]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ac183: lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac193: lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac673: lea rax, [rax + rdi + 0x30]; ret; 
0x00000000000ac163: lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000dd75a: lea rax, [rax + rdx*8]; ret; 
0x000000000009c1ee: lea rax, [rax - 8]; ret; 
0x00000000000e8430: lea rax, [rbx + 2]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e8330: lea rax, [rbx + 8]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b1abc: lea rax, [rcx + rsi]; ret; 
0x00000000000bb703: lea rax, [rcx - 1]; ret; 
0x00000000000b861b: lea rax, [rdi + 0x10]; ret; 
0x00000000000b8feb: lea rax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b8630: lea rax, [rdi + 0x11]; ret; 
0x00000000000b9010: lea rax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b864e: lea rax, [rdi + 0x12]; ret; 
0x00000000000b903e: lea rax, [rdi + 0x12]; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b866e: lea rax, [rdi + 0x13]; ret; 
0x00000000000b906e: lea rax, [rdi + 0x13]; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b8691: lea rax, [rdi + 0x14]; ret; 
0x00000000000b90a1: lea rax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b86b0: lea rax, [rdi + 0x15]; ret; 
0x00000000000b90d0: lea rax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b86d0: lea rax, [rdi + 0x16]; ret; 
0x00000000000b9100: lea rax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b86f0: lea rax, [rdi + 0x17]; ret; 
0x00000000000b9130: lea rax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b8713: lea rax, [rdi + 0x18]; ret; 
0x00000000000b9163: lea rax, [rdi + 0x18]; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b8738: lea rax, [rdi + 0x19]; ret; 
0x00000000000b9198: lea rax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b8756: lea rax, [rdi + 0x1a]; ret; 
0x00000000000b91c6: lea rax, [rdi + 0x1a]; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b8776: lea rax, [rdi + 0x1b]; ret; 
0x00000000000b91f6: lea rax, [rdi + 0x1b]; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b8792: lea rax, [rdi + 0x1c]; ret; 
0x00000000000b9222: lea rax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b87b2: lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9252: lea rax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b87d2: lea rax, [rdi + 0x1e]; ret; 
0x00000000000b9282: lea rax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b87f2: lea rax, [rdi + 0x1f]; ret; 
0x00000000000b92b2: lea rax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b9662: lea rax, [rdi + 0x20]; ret; 
0x00000000000b98d8: lea rax, [rdi + 0x40]; ret; 
0x000000000018b5c8: lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x000000000018b76b: lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b856c: lea rax, [rdi + 0xa]; ret; 
0x00000000000b8efc: lea rax, [rdi + 0xa]; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b858c: lea rax, [rdi + 0xb]; ret; 
0x00000000000b8f1c: lea rax, [rdi + 0xb]; sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b85ae: lea rax, [rdi + 0xc]; ret; 
0x00000000000b8f3e: lea rax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b85ce: lea rax, [rdi + 0xd]; ret; 
0x00000000000b8f6e: lea rax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b85ee: lea rax, [rdi + 0xe]; ret; 
0x00000000000b8f9e: lea rax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b8608: lea rax, [rdi + 0xf]; ret; 
0x00000000000b8fc8: lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b84b6: lea rax, [rdi + 1]; ret; 
0x00000000000b8dc6: lea rax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018ae26: lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b84c9: lea rax, [rdi + 2]; ret; 
0x000000000018b3fa: lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b8de9: lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018ae3a: lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b84d4: lea rax, [rdi + 3]; ret; 
0x000000000018b414: lea rax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b8e04: lea rax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000018ae54: lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b84e7: lea rax, [rdi + 4]; ret; 
0x00000000000b8e27: lea rax, [rdi + 4]; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b84fc: lea rax, [rdi + 5]; ret; 
0x00000000000b8e4c: lea rax, [rdi + 5]; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b851a: lea rax, [rdi + 6]; ret; 
0x00000000000b8e6a: lea rax, [rdi + 6]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b8526: lea rax, [rdi + 7]; ret; 
0x00000000000b8e86: lea rax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b8539: lea rax, [rdi + 8]; ret; 
0x00000000000b8ea9: lea rax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000b854e: lea rax, [rdi + 9]; ret; 
0x00000000000b8ece: lea rax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x000000000018b522: lea rax, [rdi + r8]; vzeroupper; ret; 
0x00000000000ac1b8: lea rax, [rdi + rax + 0x10]; ret; 
0x000000000018d016: lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884c6: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000ac1c8: lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac0c2: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000018d036: lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884e6: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d074: lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188524: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000013baa4: lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x0000000000188874: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000b14cf: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018cedc: lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018838c: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000b16fa: lea rax, [rdi + rax]; ret; 
0x00000000000a8b08: lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ae6c: lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000000b19b8: lea rax, [rdi + rsi]; ret; 
0x00000000000cf4ed: lea rax, [rdi - 0x10]; ret; 
0x00000000000cf650: lea rax, [rdi - 0xc]; ret; 
0x00000000000cf670: lea rax, [rdi - 4]; ret; 
0x00000000000cf660: lea rax, [rdi - 8]; ret; 
0x00000000000b84a2: lea rax, [rdi]; ret; 
0x000000000018b20d: lea rax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b8da2: lea rax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018ada4: lea rax, [rdi]; vzeroupper; ret; 
0x000000000017adcc: lea rax, [rdx + 0xa]; ret; 
0x000000000017adec: lea rax, [rdx + 0xb]; ret; 
0x000000000017ae0e: lea rax, [rdx + 0xc]; ret; 
0x000000000017ae2e: lea rax, [rdx + 0xd]; ret; 
0x000000000017d096: lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ae4e: lea rax, [rdx + 0xe]; ret; 
0x000000000017acde: lea rax, [rdx + 0xf]; ret; 
0x000000000017ad06: lea rax, [rdx + 1]; ret; 
0x000000000017ad1c: lea rax, [rdx + 2]; ret; 
0x000000000017ad34: lea rax, [rdx + 3]; ret; 
0x000000000017ad4a: lea rax, [rdx + 4]; ret; 
0x000000000017ad5c: lea rax, [rdx + 5]; ret; 
0x000000000017ad7a: lea rax, [rdx + 6]; ret; 
0x000000000017d141: lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac86: lea rax, [rdx + 7]; ret; 
0x000000000017ad8c: lea rax, [rdx + 8]; ret; 
0x000000000017adac: lea rax, [rdx + 9]; ret; 
0x0000000000122c06: lea rax, [rdx + rax*4]; mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000121f11: lea rax, [rdx + rcx]; cmp rax, qword ptr [rip + 0xcdb34]; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000009c210: lea rax, [rdx - 0x10]; ret; 
0x000000000017acf4: lea rax, [rdx]; ret; 
0x00000000000bcd57: lea rax, [rip + 0x112c2]; lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x00000000000bcd10: lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bdf86: lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x00000000000bc850: lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000d0130: lea rax, [rip + 0x11ef69]; add rsp, 8; ret; 
0x000000000009f810: lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f139: lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000009f660: lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x00000000000bca00: lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x000000000009f6a0: lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000bcaf0: lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc876: lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000bc810: lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc960: lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x000000000009f89c: lea rax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f85e: lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000960b9: lea rax, [rip + 0x156ac0]; add rsp, 0x10; pop rbp; ret; 
0x000000000009471f: lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000a0736: lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x000000000009f216: lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x00000000000328c0: lea rax, [rip + 0x181ab6]; ret; 
0x00000000000328a4: lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000241a4: lea rax, [rip + 0x18fcf3]; ret; 
0x00000000000241b4: lea rax, [rip + 0x191abc]; ret; 
0x00000000000529f8: lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000009f0e6: lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x0000000000047f84: lea rax, [rip + 0x1a937b]; add rsp, 8; ret; 
0x00000000000a0309: lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x00000000000a09f4: lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0684: lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0524: lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05a9: lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000003284c: lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000009faf6: lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f836: lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f246: lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a8be0: lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x000000000012dc4e: lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dace: lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db8e: lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012f0a9: lea rax, [rip + 0x5cc40]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000012dc2d: lea rax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db6d: lea rax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012daad: lea rax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dcfe: lea rax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x000000000012dc78: lea rax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbb8: lea rax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daf8: lea rax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd38: lea rax, [rip + 0x62ee1]; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000000a0796: lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x0000000000120fe2: lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015c81d: lea rax, [rip + 0x9475c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009f7c6: lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f6f6: lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000153484: lea rax, [rip + 0x9d9b5]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x00000000000a1c80: lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000001465d2: lea rax, [rip + 0xaa527]; ret; 
0x00000000001465a6: lea rax, [rip + 0xaa553]; add rsp, 8; ret; 
0x000000000009f760: lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a0400: lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a09ae: lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a063e: lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04de: lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000bcdf9: lea rax, [rip + 0xcef00]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000bcd78: lea rax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000001193f2: lea rax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x00000000001193a2: lea rax, [rip + 0xd6557]; pop r12; pop r13; ret; 
0x0000000000118eaa: lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000118e4f: lea rax, [rip + 0xd6a3a]; pop rbp; pop r12; pop r13; ret; 
0x0000000000115dbb: lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x00000000000a0468: lea rax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000a08d9: lea rax, [rip + 0xe560]; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0839: lea rax, [rip + 0xe5e0]; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000a098d: lea rax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a061d: lea rax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04bd: lea rax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a058e: lea rax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x00000000000a09d8: lea rax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0668: lea rax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0508: lea rax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05c8: lea rax, [rip + 0xf0661]; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x00000000000a1cc0: lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x00000000000d0fd8: lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0ec8: lea rax, [rip - 0x10f]; ret; 
0x00000000000d0fe8: lea rax, [rip - 0x11f]; ret; 
0x000000000009d105: lea rax, [rip - 0x12c]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000009d168: lea rax, [rip - 0x18f]; mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012dd19: lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000012db14: lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbd4: lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc94: lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000010d476: lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0eb8: lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x0000000000123494: lea rax, [rsi + rax*4]; mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x00000000000cf629: lea rax, es:[rdi - 0x10]; ret; 
0x00000000000b8124: lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d4: lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8490: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e50: lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000013f1f1: lea rcx, [rdi + 1]; test al, al; jne 0x13f1dd; mov eax, r10d; ret; 
0x00000000001785d5: lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x000000000017c966: lea rcx, [rdx + 0x10]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001788d3: lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x000000000017ccc4: lea rcx, [rdx + 0xa]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001788f3: lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x000000000017ccf4: lea rcx, [rdx + 0xb]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178913: lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000017cd24: lea rcx, [rdx + 0xc]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178935: lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017cd56: lea rcx, [rdx + 0xd]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178955: lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017cd86: lea rcx, [rdx + 0xe]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178975: lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x000000000017cdb6: lea rcx, [rdx + 0xf]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001787cb: lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x000000000017cb6b: lea rcx, [rdx + 1]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000008df27: lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001787ed: lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000017cb8e: lea rcx, [rdx + 2]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178813: lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x000000000017cbb4: lea rcx, [rdx + 3]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017882b: lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017cbdc: lea rcx, [rdx + 4]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000085589: lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000178851: lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017cc02: lea rcx, [rdx + 5]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178873: lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017cc34: lea rcx, [rdx + 6]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000178891: lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x000000000017cc62: lea rcx, [rdx + 7]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017856d: lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x000000000017c8fe: lea rcx, [rdx + 8]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001788b3: lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000017cc94: lea rcx, [rdx + 9]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017e246: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000123318: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123328; ret; 
0x0000000000123381: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c68: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cc5: lea rcx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123cd8; ret; 
0x000000000018829d: lea rcx, [rip + 0x1321c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000186bbc: lea rcx, [rip + 0x148fd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001868e8: lea rcx, [rip + 0x14bd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000008e5b5: lea rcx, [rip + 0x15a8e4]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000001854d3: lea rcx, [rip + 0x15fe6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001839cd: lea rcx, [rip + 0x17aec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000181d3c: lea rcx, [rip + 0x1977d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181a08: lea rcx, [rip + 0x19ab1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000180133: lea rcx, [rip + 0x1b386]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000118e9e: lea rcx, [rip + 0xd69cb]; call 0x1191a0; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000123585: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012356a: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123580; ret; 
0x0000000000123e9a: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123eb0; ret; 
0x0000000000162e56: lea rdi, [r8 + rax]; call 0x22560; xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x00000000000a2c32: lea rdi, [rax + 1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000013bb26: lea rdi, [rax + rcx + 2]; cmp r8, rdi; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x00000000000b78ac: lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fd0: lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b78cf: lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8ff3: lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b78f4: lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9018: lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b7912: lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9046: lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b7932: lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9076: lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7955: lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a9: lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7974: lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d8: lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7994: lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9108: lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b4: lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9138: lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b79d7: lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b916b: lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a0c: lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b91a0: lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a3a: lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91ce: lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a6a: lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fe: lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a96: lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b922a: lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac6: lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b925a: lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af6: lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b928a: lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b7b26: lea rdi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92ba: lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b77f2: lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed6: lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000b7810: lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f04: lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b7830: lea rdi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f24: lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b7852: lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f46: lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b7872: lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f76: lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b7892: lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa6: lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x000000000018a4fc: lea rdi, [rdi + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b214: lea rdi, [rdi + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76c6: lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8da9: lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a6aa: lea rdi, [rdi + 2]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3de: lea rdi, [rdi + 2]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76ea: lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dce: lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018a6ce: lea rdi, [rdi + 3]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b402: lea rdi, [rdi + 3]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b770d: lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8df1: lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000018a6e8: lea rdi, [rdi + 4]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b41c: lea rdi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b7728: lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e0c: lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x00000000000b774b: lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e2f: lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b7770: lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e54: lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x00000000000b778e: lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e72: lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b77aa: lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8e: lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b77cd: lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8eb1: lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000bbb62: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000018a713: lea rdi, [rdi + rdx + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b447: lea rdi, [rdi + rdx + 1]; jne 0x18b660; vzeroupper; ret; 
0x000000000008ded4: lea rdi, [rip + 0x1274e9]; call 0x33f90; endbr64; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000098dab: lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa7: lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a4f: lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093925: lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x000000000009101d: lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f65: lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000046c71: lea rdi, [rip + 0x16d861]; call 0x33f90; xor r8d, r8d; mov rax, r8; ret; 
0x000000000004764f: lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198cdf: lea rdi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x000000000019900f: lea rdi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x000000000014267f: lea rdi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e48: lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x0000000000087f54: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f23: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000000863fc: lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000008df4e: lea rdx, [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000094e73: lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000dd754: lea rdx, [rdi + rdi*8]; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x0000000000033d96: lea rdx, [rdi + rdx*4]; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x0000000000033df7: lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x000000000012332d: lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x00000000000bdf8d: lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f0ed: lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000001882d1: lea rdx, [rip + 0x131e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009f6fd: lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000186936: lea rdx, [rip + 0x14b83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018691c: lea rdx, [rip + 0x14b9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a26: lea rdx, [rip + 0x17a93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a01: lea rdx, [rip + 0x17ab8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a56: lea rdx, [rip + 0x19a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a3c: lea rdx, [rip + 0x19a7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000004754a: lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x00000000000a09fb: lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a068b: lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a052b: lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x00000000000a05a2: lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x0000000000175306: lea rdx, [rip + 0x261b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001752e1: lea rdx, [rip + 0x261d8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d96: lea rdx, [rip + 0x28723]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d7c: lea rdx, [rip + 0x2873d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000012dc55: lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dad5: lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db95: lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012dc34: lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db74: lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012dab4: lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dcf7: lea rdx, [rip + 0x5e022]; lea rax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x000000000012dc7f: lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbbf: lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daff: lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd3f: lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000001370f2: lea rdx, [rip + 0x7b687]; mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015339b: lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000bc86b: lea rdx, [rip + 0xc123e]; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000012ed81: lea rdx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x000000000009f19d: lea rdx, [rip + 0xc44fc]; cmovne rax, rdx; ret; 
0x000000000009f767: lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000a09b5: lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a0645: lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04e5: lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000bcd09: lea rdx, [rip + 0xcf500]; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc849: lea rdx, [rip + 0xcfc90]; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f9: lea rdx, [rip + 0xcff30]; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a0890: lea rdx, [rip + 0xd03d9]; cmovne rax, rdx; ret; 
0x00000000000a07f0: lea rdx, [rip + 0xd0459]; cmovne rax, rdx; ret; 
0x00000000000bcae9: lea rdx, [rip + 0xd05a0]; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc809: lea rdx, [rip + 0xd0650]; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc959: lea rdx, [rip + 0xd0920]; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a08e0: lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0840: lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x00000000000bcd5e: lea rdx, [rip + 0xd5abb]; cmovne rax, rdx; ret; 
0x000000000009f21d: lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f7cd: lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x00000000000a073d: lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x00000000000a079d: lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x00000000000a8bd9: lea rdx, [rip + 0xdbfa0]; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c79: lea rdx, [rip + 0xe2db0]; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x000000000009faeb: lea rdx, [rip + 0xe41ce]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f82b: lea rdx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x00000000000a03f9: lea rdx, [rip + 0xe4360]; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x000000000009f23b: lea rdx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x00000000000a1cb9: lea rdx, [rip + 0xe6880]; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f809: lea rdx, [rip + 0xe8f20]; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f659: lea rdx, [rip + 0xe92a0]; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f699: lea rdx, [rip + 0xe9400]; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x00000000000b1466: lea rdx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1441: lea rdx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a0994: lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a0624: lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04c4: lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a0587: lea rdx, [rip + 0xeb7a2]; lea rax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x00000000000aee06: lea rdx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aedec: lea rdx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a09df: lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a066f: lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a050f: lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05cf: lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x00000000000a044e: lea rdx, [rip + 0xf0c5b]; cmovne rax, rdx; ret; 
0x000000000009f140: lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000012d22d: lea rdx, [rip - 0x104]; test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x000000000012dd12: lea rdx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000012db1b: lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbdb: lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc9b: lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x000000000010d46b: lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000d0e98: lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb8: lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000001161a9: lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x00000000000bbb56: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000113d3e: lea rdx, [rsp + 0xc]; mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x00000000000860bf: lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000011619e: lea rsi, [rdx + 1]; mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x0000000000145abd: lea rsi, [rip + 0x6fbc0]; call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x00000000000bbb67: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000349d9: lea rsi, [rsp + 8]; xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000e14a6: lea rsp, [rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x000000000004606f: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000e14a5: lea rsp, ss:[rbp - 0x10]; pop r12; pop r13; pop rbp; ret; 
0x0000000000043f2a: leave; add dword ptr [rsi + 0xf], esp; fcmovnb st(0), st(1); shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000183ae4: leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000102817: leave; add rsp, 8; mov eax, r9d; ret; 
0x0000000000042179: leave; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000001025fe: leave; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000160d19: leave; call 0x63a00; test rbx, rbx; jne 0x160d30; pop rbx; ret; 
0x0000000000160d49: leave; call 0x6bbd0; test rbx, rbx; jne 0x160d60; pop rbx; ret; 
0x00000000000bb9e6: leave; cmove rax, rdx; ret; 
0x00000000000cf157: leave; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x0000000000155a66: leave; in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e21f9; ret; 
0x000000000013f299: leave; je 0x13f248; cmp r11d, r9d; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x00000000000a88cd: leave; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x0000000000113fa3: leave; jle 0x113fb3; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000123320: leave; jne 0x123328; ret; 
0x0000000000123389: leave; jne 0x123390; ret; 
0x0000000000123c70: leave; jne 0x123c78; ret; 
0x0000000000123ccd: leave; jne 0x123cd8; ret; 
0x000000000012df0d: leave; jne 0x12deb8; mov rax, rdi; ret; 
0x000000000005586d: leave; jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x000000000008a71b: leave; jne 0x8a730; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000000bb4e0: leave; jne 0xbb4d0; ret; 
0x00000000000bb590: leave; jne 0xbb580; ret; 
0x00000000000bb850: leave; jne 0xbb840; sub rax, 1; ret; 
0x00000000000bcb40: leave; jne 0xbcb18; mov rax, r8; ret; 
0x000000000018506f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x00000000000b6621: leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001205a3: leave; mov eax, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000c6b51: leave; mov eax, r9d; ret; 
0x0000000000093e73: leave; movsxd rdx, edx; call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000aa55c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000ee216: leave; nop word ptr [rax + rax]; ret; 
0x000000000011f558: leave; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f4dc: leave; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000038ca2: leave; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x000000000010259f: leave; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bf: leave; push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000011faea: leave; rdpkru; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x00000000000578c8: leave; ret; 
0x0000000000129692: leave; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000010c4a3: leave; stc; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000005584e: leave; xor eax, eax; ret; 
0x000000000011631e: lock dec dword ptr [rax + 1]; ret; 
0x0000000000119986: lock dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000011ce00: lock dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x000000000012b221: lock dec dword ptr [rax - 0x7d]; ret; 
0x00000000000cb73a: lodsb al, byte ptr [rsi]; clc; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013f29b: lodsb al, byte ptr [rsi]; cmp r11d, r9d; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x000000000012dc30: lodsb al, byte ptr [rsi]; fadd qword ptr [rip + 0x158d4800]; xor eax, 0x480005dc; cmove eax, edx; ret; 
0x00000000000a09b9: lodsb al, byte ptr [rsi]; or al, 0; cmovne rax, rdx; ret; 
0x000000000012124c: lodsb al, byte ptr [rsi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121204: lodsb al, byte ptr [rsi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000041254: lodsb al, byte ptr [rsi]; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000e81e4: lodsb al, byte ptr [rsi]; xor eax, eax; ret; 
0x00000000000d1094: lodsd eax, dword ptr [rsi]; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e518d: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000001975bf: lodsd eax, dword ptr [rsi]; call 0xffffffffdb9ebec4; jne 0x1975ad; pop rbx; ret; 
0x00000000001471cb: lodsd eax, dword ptr [rsi]; cdq; or al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000010c48f: lodsd eax, dword ptr [rsi]; cmp eax, 0x48b48ff; and al, 0x48; add esp, 0x28; ret; 
0x00000000001300a7: lodsd eax, dword ptr [rsi]; mov ebp, 0x4864000b; add eax, dword ptr [0]; ret; 
0x0000000000121144: lodsd eax, dword ptr [rsi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000056492: lodsd eax, dword ptr [rsi]; ret; 
0x00000000000e2c8f: lodsd eax, dword ptr [rsi]; sbb ebx, edi; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x00000000000d33a7: lodsd eax, dword ptr [rsi]; sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000011328b: loope 0x113218; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011553e: loope 0x11553e; mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115550; ret; 
0x000000000012dacc: loope 0x12dad6; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db8c: loope 0x12db96; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x000000000012dc4c: loope 0x12dc56; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000014d1e2: loope 0x14d24a; nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x00000000001686f7: loope 0x168745; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016873f: loope 0x16878d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016877d: loope 0x1687cb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001687b5: loope 0x168803; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001687f3: loope 0x168841; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016882b: loope 0x168879; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168853: loope 0x1688a1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b0d7: loope 0x16b125; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b11f: loope 0x16b16d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b15d: loope 0x16b1ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b195: loope 0x16b1e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b1d3: loope 0x16b221; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b20b: loope 0x16b259; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b233: loope 0x16b281; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d2da: loope 0x16d2cf; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016fe0a: loope 0x16fdff; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000017893b: loope 0x17893e; add byte ptr [rax], al; ret; 
0x000000000018aed3: loope 0x18af1d; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000190fbb: loope 0x190fbd; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000198c2e: loope 0x198c8b; ret; 
0x000000000005631b: loope 0x56369; mov dword ptr [rdi], ecx; ret; 
0x000000000005634c: loope 0x5639a; mov dword ptr [rdi - 8], ecx; ret; 
0x00000000000563cd: loope 0x5641b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000006e020: loope 0x6e021; inc dword ptr [rcx - 0xa]; ret; 
0x00000000000759a2: loope 0x759a4; add byte ptr [rax + 0x39], cl; ret; 
0x000000000008282b: loope 0x82827; stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000009471e: loope 0x94768; lea eax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000a04dc: loope 0xa04e6; lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000a063c: loope 0xa0646; lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a09ac: loope 0xa09b6; lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000b1d4c: loope 0xb1d6e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000b1f68: loope 0xb1f8a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000b6e56: loope 0xb6ebe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b8496: loope 0xb84fe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000ba166: loope 0xba1ce; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000bac56: loope 0xbacbe; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000bc131: loope 0xbc133; cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x00000000000cface: loope 0xcfadf; je 0xcfaf0; ret; 
0x00000000000ee3e2: loope 0xee3e3; add esi, esi; ret; 
0x00000000001193a0: minps xmm1, xmmword ptr [rax - 0x73]; add eax, 0xd6557; pop r12; pop r13; ret; 
0x000000000014d3c0: mov ah, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000011fef5: mov ah, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff04; ret; 
0x00000000001093d0: mov ah, 0x24; add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000109a1b: mov ah, 0x24; nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000060fdf: mov ah, 0x5b; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000012097b: mov ah, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000012dc58: mov ah, 0xd9; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x00000000000a04c1: mov ah, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xeb3d5; cmove rax, rdx; ret; 
0x000000000014dd8a: mov ah, byte ptr [rsi + 6]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011fc85: mov al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc94; ret; 
0x00000000000d0ddc: mov al, 0x11; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000112b41: mov al, 0x66; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000018850f: mov al, 0xc5; std; xlatb; ret; 
0x0000000000120d74: mov al, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000017cdbc: mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000043f32: mov al, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f24: mov al, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044064: mov al, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000b7acc: mov al, 4; add byte ptr [rax], al; ret; 
0x00000000000b76cc: mov al, 8; add byte ptr [rax], al; ret; 
0x000000000008e586: mov al, ah; add byte ptr [rax], al; add al, ch; movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x000000000010dc55: mov al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000017cbe2: mov al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ad16: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39fb: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000017ad44: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a29: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000b3aad: mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x000000000017acf0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000b39d5: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000185070: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000017ad54: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a49: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000000b3acd: mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000017ad00: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017ad10: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f5: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b39e5: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000014b0ef: mov bh, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x000000000018ae21: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000018b501: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189c21: mov bh, 0x16; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016e0a1: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000189391: mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000bbc36: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000a8b7f: mov bh, 0x44; and al, 0xec; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000033dfa: mov bh, 0x44; mov eax, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000190e58: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x00000000000a89fa: mov bh, 0x54; and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8ab7: mov bh, 0x54; and al, 0xc; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a89e2: mov bh, 0x54; and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a8aa7: mov bh, 0x54; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8a69: mov bh, 0x54; and al, 0xf8; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x000000000014d2ff: mov bh, 0x80; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000003408a: mov bh, 0xc0; ret; 
0x000000000012fd0d: mov bh, 0xc7; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000120704: mov bh, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d2f4: mov bh, 0xe8; add byte ptr [rax], al; add bl, dh; movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000a058b: mov bh, 0xe; add byte ptr [rax - 0x73], cl; add eax, 0xeb7fb; cmove rax, rdx; ret; 
0x000000000018ae31: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a7e1: mov bh, 0xe; movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000e6c3a: mov bh, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x000000000012fd5c: mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000136559: mov bh, 0xf6; push 2; call 0x135ad0; add rsp, 0x18; ret; 
0x0000000000120fe0: mov bh, 0xff; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000001221ca: mov bh, 2; cmp ax, -1; je 0x122200; add eax, 1; mov word ptr [rdx], ax; ret; 
0x000000000012d0d7: mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x000000000010c975: mov bh, 7; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x000000000010e0f2: mov bl, 0; add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000011ffb8: mov bl, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000019274e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000986c9: mov bl, 0x44; adc eax, 0x4c834a00; xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000175309: mov bl, 0x61; add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000009089e: mov bl, 0x90; endbr64; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x00000000000471e0: mov bl, 0xfd; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000180137: mov bl, 1; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000043423: mov bl, byte ptr [r10]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000433e8: mov bl, byte ptr [rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000043424: mov bl, byte ptr [rdx]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000013c458: mov byte ptr [r10 - 1], r8b; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000013f2a1: mov byte ptr [r10], 0; ret; 
0x00000000000a8745: mov byte ptr [r11], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x0000000000141c0d: mov byte ptr [r12 + 0x18], 0; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000152e16: mov byte ptr [r12 + rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001158eb: mov byte ptr [r12], 0; mov rax, r12; pop r12; ret; 
0x000000000003007c: mov byte ptr [r12], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000009f9de: mov byte ptr [r13 + rax], 0; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000013c7f5: mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x000000000013c7fc: mov byte ptr [r8 + 2], 0; ret; 
0x000000000009959b: mov byte ptr [r8 + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000993a4: mov byte ptr [r8 + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x00000000000266e2: mov byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000a86e7: mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x000000000009f249: mov byte ptr [r9], 0; cmovne rax, rdx; ret; 
0x0000000000192367: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000012df09: mov byte ptr [rax + 1], cl; test cl, cl; jne 0x12deb8; mov rax, rdi; ret; 
0x000000000013c7f6: mov byte ptr [rax + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x000000000013c7fd: mov byte ptr [rax + 2], 0; ret; 
0x00000000000a8a75: mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8a93: mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8ac4: mov byte ptr [rax + 6], dl; ret; 
0x000000000009959c: mov byte ptr [rax + rbp], cl; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000000993a5: mov byte ptr [rax + rbx], cl; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x00000000000529ff: mov byte ptr [rax + rdx], 0; ret; 
0x00000000000271f7: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000266e3: mov byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a867e: mov byte ptr [rax], 0; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000000a86e8: mov byte ptr [rax], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000038c74: mov byte ptr [rax], 0; mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a8a58: mov byte ptr [rax], 0; ret; 
0x00000000001282e5: mov byte ptr [rax], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001282ca: mov byte ptr [rax], 0xa; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c98b: mov byte ptr [rax], 0xff; jne 0x10c995; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000015e551: mov byte ptr [rax], al; add byte ptr [rax], al; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000063015: mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000014d301: mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000011cd3f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000011c6dc: mov byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11c6f0; ret; 
0x0000000000055068: mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008af97: mov byte ptr [rax], bh; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086405: mov byte ptr [rax], bh; mov eax, r9d; ret; 
0x00000000000639cf: mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000639d0: mov byte ptr [rax], ch; pop rbx; pop rbp; pop r12; ret; 
0x0000000000163658: mov byte ptr [rax], cl; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000b6622: mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000008af96: mov byte ptr [rax], dil; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086404: mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000009f9df: mov byte ptr [rbp + rax], 0; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000011d945: mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a8746: mov byte ptr [rbx], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x0000000000137c1c: mov byte ptr [rbx], cl; add byte ptr [rcx], al; mov eax, r8d; pop rbp; ret; 
0x0000000000122e55: mov byte ptr [rcx + 0x48b44f9], cl; adc byte ptr [rcx - 0x2d], al; call 0x1f2b1a4; mov eax, r8d; ret; 
0x0000000000123817: mov byte ptr [rcx + 0x48b44f9], cl; adc byte ptr [rcx - 0x2d], al; call 0x1f2bb66; mov eax, r8d; ret; 
0x00000000001789b3: mov byte ptr [rcx + 2], dl; ret; 
0x00000000001789d2: mov byte ptr [rcx + 4], dl; ret; 
0x0000000000178a13: mov byte ptr [rcx + 8], dl; ret; 
0x00000000000a8628: mov byte ptr [rcx - 1], 0; mov qword ptr [rdx], rcx; ret; 
0x00000000001161a2: mov byte ptr [rcx - 1], 0x5c; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x00000000000b1916: mov byte ptr [rcx], 0; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000009f24a: mov byte ptr [rcx], 0; cmovne rax, rdx; ret; 
0x000000000013c676: mov byte ptr [rcx], bl; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000e862a: mov byte ptr [rcx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000178990: mov byte ptr [rcx], dl; ret; 
0x000000000013c675: mov byte ptr [rcx], r11b; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000bb0ca: mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000b947b: mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c5b: mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0db: mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8618: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8fe8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b6f68: mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b78c8: mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000bb0e0: mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb102: mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb120: mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb140: mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b868e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b909e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b6fbe: mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b794e: mov byte ptr [rdi + 0x14], dh; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b9501: mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7cb1: mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb161: mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb166: mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb182: mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb1a2: mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1c2: mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9583: mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d33: mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1e3: mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b8710: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7040: mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b79d0: mov byte ptr [rdi + 0x18], dh; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000bb1e8: mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb20a: mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb228: mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb248: mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb264: mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb284: mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb2a4: mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2c4: mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b7e35: mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2e5: mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb2ea: mov byte ptr [rdi + 0x21], ch; ret; 
0x0000000000100451: mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bb33a: mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000018b5c5: mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000189ce5: mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018a895: mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000189ce8: mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x0000000000189d3b: mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x00000000000bb010: mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb02e: mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb04e: mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bb070: mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000bb090: mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb0b0: mov byte ptr [rdi + 0xf], ch; ret; 
0x0000000000189c15: mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x00000000000baf46: mov byte ptr [rdi + 1], ch; ret; 
0x000000000013c395: mov byte ptr [rdi + 1], dh; ret; 
0x000000000013c394: mov byte ptr [rdi + 1], sil; ret; 
0x000000000018ae36: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a6: mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000a8b3d: mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000baf58: mov byte ptr [rdi + 2], ch; ret; 
0x00000000000b84c6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b8de6: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x00000000000b6e86: mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7706: mov byte ptr [rdi + 2], dh; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b9309: mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000a89b0: mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf69: mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf6e: mov byte ptr [rdi + 3], ch; ret; 
0x000000000013c83c: mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000000a8b6b: mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000baf86: mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b84e2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6ea2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b7742: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b9337: mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000a89ce: mov byte ptr [rdi + 4], dl; ret; 
0x00000000000baf97: mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000baf9c: mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a8ba4: mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000bafae: mov byte ptr [rdi + 6], ch; ret; 
0x000000000014b0a8: mov byte ptr [rdi + 6], dl; movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000a8a07: mov byte ptr [rdi + 6], dl; ret; 
0x000000000014b0b6: mov byte ptr [rdi + 7], al; ret; 
0x00000000000bafcc: mov byte ptr [rdi + 7], ch; ret; 
0x000000000005b51a: mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x00000000000ec450: mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000ec405: mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000ec3d4: mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000ec480: mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000ec490: mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000ec4a5: mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ec46a: mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec43c: mov byte ptr [rdi + 8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3ed: mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000ec410: mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000bafd8: mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b8533: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ee3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b77c3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b9389: mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd9: mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe9: mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000bafee: mov byte ptr [rdi + 9], ch; ret; 
0x0000000000189c42: mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x0000000000189c43: mov byte ptr [rdi + rax], 0; vzeroupper; ret; 
0x000000000004205c: mov byte ptr [rdi + rdx + 0x560f6600], ch; or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x000000000013c55e: mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000167c8b: mov byte ptr [rdi - 1], dl; ret; 
0x00000000000a8b10: mov byte ptr [rdi], 0; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ada1: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x00000000001170eb: mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd867b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x000000000018a4f5: mov byte ptr [rdi], 0; sub r8, 1; lea rdi, [rdi + 1]; jne 0x18a930; vzeroupper; ret; 
0x0000000000189311: mov byte ptr [rdi], 0; vzeroupper; ret; 
0x00000000000ec445: mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec46e: mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000baf32: mov byte ptr [rdi], ch; ret; 
0x00000000000bbc0f: mov byte ptr [rdi], cl; ret; 
0x000000000018be69: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x00000000000a8981: mov byte ptr [rdi], dh; add rax, rdi; ret; 
0x00000000000b84a0: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b8da0: mov byte ptr [rdi], dh; lea rax, [rdi]; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x00000000000b6e60: mov byte ptr [rdi], dh; ret; 
0x00000000000b76c0: mov byte ptr [rdi], dh; sub r8, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b92e2: mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x000000000018b4f3: mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000189c13: mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x00000000000b7b52: mov byte ptr [rdi], dl; ret; 
0x000000000018a7c3: mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000baf42: mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000a8980: mov byte ptr [rdi], sil; add rax, rdi; ret; 
0x00000000000b67aa: mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39d2: mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b39e2: mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000017ad19: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39fe: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000178809: mov byte ptr [rdx + 2], al; mov rax, rdi; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x00000000000b3a12: mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000017ad47: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a2c: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000178847: mov byte ptr [rdx + 4], al; mov rax, rdi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x00000000000b6740: mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3a82: mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3ab0: mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x000000000013c459: mov byte ptr [rdx - 1], al; mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000011ce67: mov byte ptr [rdx], 0; mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x0000000000134d6a: mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000013f2a2: mov byte ptr [rdx], 0; ret; 
0x000000000017acf2: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000008df2f: mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000000b39d7: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000001787c2: mov byte ptr [rdx], al; mov rax, rdi; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x00000000000529f2: mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000032853: mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000011357c: mov byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001170ee: mov byte ptr [rip + 0xd867b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000042054: mov byte ptr [rsi + 0xff20017], ah; adc byte ptr [rip + 0x17ac88], al; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000134a8e: mov byte ptr [rsi + 5], dl; mov rax, rsi; pop rbx; ret; 
0x00000000000a13f0: mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000a13ed: mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x0000000000117076: mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000001170f8: mov byte ptr [rsi - 1], 0; ret; 
0x0000000000141c0e: mov byte ptr [rsp + 0x18], 0; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000152e17: mov byte ptr [rsp + rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001158ec: mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x000000000003007d: mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000074f70: mov ch, 0x10; idiv edi; inc dword ptr [rbp - 0x7b]; in al, 0xf; lahf; ret; 
0x000000000009e1d7: mov ch, 0x1a; or dword ptr [rax], eax; nop dword ptr [rax + rax]; endbr64; ret; 
0x000000000009c1df: mov ch, 0x2c; adc eax, 0x482b7200; cmp ecx, dword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000013f2a0: mov ch, 0x41; mov byte ptr [rdx], 0; ret; 
0x00000000001158b7: mov ch, 0x65; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b7: mov ch, 0x7a; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a09f7: mov ch, 0xb1; add dword ptr [rax], eax; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x000000000011fdb7: mov ch, 0xc0; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012092c: mov ch, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000153487: mov ch, 0xd9; or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x000000000010deb7: mov ch, 0xdf; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0b7: mov ch, 0xed; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a0688: mov ch, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x1b41e; cmove rax, rdx; ret; 
0x000000000018e6e6: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cfae0: mov ch, dh; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x000000000011fd45: mov cl, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fd54; ret; 
0x0000000000093899: mov cl, 0x15; and dword ptr [rdi - 0x76b7ffeb], ebp; sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000144724: mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000118087: mov cl, 0x15; ret; 
0x000000000012058b: mov cl, 0x40; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000013c743: mov cl, 0x48; add ecx, 2; mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000001147bb: mov cl, 0x76; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000019920e: mov cl, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000181a0b: mov cl, 0x9a; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001212bb: mov cl, 0xab; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000124b93: mov cl, 0xc; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000015f464: mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000a09f8: mov cl, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x1b0ce; cmove rax, rdx; ret; 
0x000000000012331b: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123328; ret; 
0x0000000000123384: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123390; ret; 
0x0000000000123c6b: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123c78; ret; 
0x0000000000123cc8: mov cl, byte ptr [rbx - 0x367acef4]; jne 0x123cd8; ret; 
0x00000000000aedf5: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x0000000000153398: mov cl, byte ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0x9da9e; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000b9474: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c54: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d4: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b9578: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d28: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7e29: mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000018a889: mov cl, byte ptr [rsi + 0x40]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x0000000000185074: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000018fda4: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000cfacb: mov cl, dl; and cl, 0xf; je 0xcfaf0; ret; 
0x00000000000f089a: mov cs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000162f78: mov cs, word ptr [rax]; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000012356d: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x123580; ret; 
0x0000000000123e9d: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x123eb0; ret; 
0x000000000018fd92: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000b8624: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9494: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f74: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b8728: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9598: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7058: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000001680d4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b9300: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b70: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x000000000016e034: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84c0: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e80: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000018fd91: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000014b0ca: mov dh, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x000000000008b4e4: mov dh, 0; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000091b41: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000032845: mov dh, 0; cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000008b644: mov dh, 0; pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008df57: mov dh, 0; ret; 
0x0000000000040fb9: mov dh, 0x11; test dl, dl; jne 0x40f98; ret; 
0x000000000009c269: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x9c258; sub rax, 0x10; ret; 
0x00000000000f07d0: mov dh, 0x14; cmp ch, cl; ret; 
0x000000000018b4f1: mov dh, 0x16; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000189c11: mov dh, 0x16; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016e111: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000018a7c1: mov dh, 0x16; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000ac8a5: mov dh, 0x16; sub eax, edx; ret; 
0x00000000000328c3: mov dh, 0x1a; sbb byte ptr [rax], al; ret; 
0x00000000000a861a: mov dh, 0x31; test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000ea571: mov dh, 0x43; add cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000eb762: mov dh, 0x43; add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000005b3c2: mov dh, 0x43; add dword ptr [rax + rax*8 - 0x7cb6f78c], eax; ret; 
0x0000000000037ff3: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000eb5a8: mov dh, 0x43; add dword ptr [rcx - 0x73], ecx; push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000000a8ba0: mov dh, 0x44; and al, 0xe; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b67: mov dh, 0x44; and al, 0xf4; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000001993a1: mov dh, 0x44; and al, 0xf; add rsp, 0x10; pop rbx; ret; 
0x00000000000a8b39: mov dh, 0x44; and al, 0xfa; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000183fd1: mov dh, 0x44; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000006669e: mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000074534: mov dh, 0x46; or al, 0x83; ret; 
0x00000000000e81da: mov dh, 0x47; add dword ptr [rax - 0x7d], ecx; mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x0000000000192321: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000192311: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001922e1: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000192301: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922f1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000029e07: mov dh, 0x48; dec dword ptr [rax + 0x3948074a]; ret; 
0x0000000000048d09: mov dh, 0x4b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a3fe6: mov dh, 0x4d; add byte ptr [rcx + 0xf], 0x93; ret; 
0x0000000000031764: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a8a03: mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8ac0: mov dh, 0x54; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8a8f: mov dh, 0x54; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a89ca: mov dh, 0x54; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a8a71: mov dh, 0x54; and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a89ac: mov dh, 0x54; and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x0000000000183fd6: mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000192325: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000000192315: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x00000000001922e5: mov dh, 0x56; int1; sub eax, edx; ret; 
0x00000000001922f5: mov dh, 0x56; sub eax, edx; ret; 
0x00000000000f7e1a: mov dh, 0x58; cmp dh, dh; ret; 
0x000000000005d7b8: mov dh, 0x58; or al, 0x89; fdiv st(6); ret; 
0x000000000005c115: mov dh, 0x58; or al, 0xf6; ret; 
0x00000000000680f6: mov dh, 0x6b; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d4ebb: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000053be3: mov dh, 0x84; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000f9756: mov dh, 0x8b; dec dword ptr [rax - 0x77]; ret; 
0x0000000000053e9e: mov dh, 0x8c; and al, 0x87; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000e7a56: mov dh, 0xa8; dec dword ptr [rax - 0x77]; ret; 
0x000000000014e047: mov dh, 0xc0; add eax, 1; ret; 
0x0000000000157db0: mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000010fdb6: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000014a365: mov dh, 0xc0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ce094: mov dh, 0xc0; lea eax, [rax + rax - 1]; ret; 
0x00000000000e51ff: mov dh, 0xc0; lea rax, [rax + rax - 1]; ret; 
0x0000000000052b38: mov dh, 0xc0; neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e6c: mov dh, 0xc0; neg eax; pop rbp; ret; 
0x00000000000246dd: mov dh, 0xc0; neg eax; ret; 
0x0000000000149f8e: mov dh, 0xc0; pop r12; ret; 
0x0000000000148e34: mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000008dfde: mov dh, 0xc0; pop rbx; neg eax; ret; 
0x000000000014a2fb: mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x0000000000043c30: mov dh, 0xc0; ret; 
0x00000000000ac8c5: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000094c92: mov dh, 0xc0; sub eax, 2; add rsp, 8; ret; 
0x00000000000bc149: mov dh, 0xc1; pop rbx; ret; 
0x00000000000bc0f9: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x00000000000bbf62: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000271f6: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000001207c4: mov dh, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000ecbc1: mov dh, 0xc; or byte ptr [rax + 0x63], cl; ret; 
0x00000000000bc191: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x00000000000ac8cb: mov dh, 0xd2; sub eax, edx; ret; 
0x000000000011f0c9: mov dh, 0xd7; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000012df07: mov dh, 0xe; mov byte ptr [rax + 1], cl; test cl, cl; jne 0x12deb8; mov rax, rdi; ret; 
0x00000000000bbc0d: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x00000000000aa3a1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000184631: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000185084: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000146f17: mov dh, 0xed; dec dword ptr [rax - 0x77]; ret; 
0x000000000012fd79: mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000012fd11: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000158027: mov dh, 0xff; dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000158063: mov dh, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x00000000000a0528: mov dh, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x00000000000529ea: mov dh, 4; adc byte ptr [rdx + 6], bh; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000ec467: mov dh, 4; add esi, eax; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000001370f6: mov dh, 7; add byte ptr [rbx + 0x4804c244], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001463dc: mov dh, 7; add eax, ecx; sub rdx, 1; jne 0x146368; ret; 
0x000000000013f1ef: mov dh, 7; lea rcx, [rdi + 1]; test al, al; jne 0x13f1dd; mov eax, r10d; ret; 
0x0000000000186934: mov dh, 7; lea rdx, [rip + 0x14b83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a24: mov dh, 7; lea rdx, [rip + 0x17a93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a54: mov dh, 7; lea rdx, [rip + 0x19a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000175304: mov dh, 7; lea rdx, [rip + 0x261b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d94: mov dh, 7; lea rdx, [rip + 0x28723]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1464: mov dh, 7; lea rdx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aee04: mov dh, 7; lea rdx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000185081: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000ac8a2: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000aa3a4: mov dh, 7; sub eax, ecx; ret; 
0x0000000000184634: mov dh, 7; sub eax, ecx; vzeroupper; ret; 
0x000000000010e829: mov dl, 0; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000011ff88: mov dl, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11ff97; ret; 
0x0000000000114594: mov dl, 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000001200ba: mov dl, 0xbd; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000124abb: mov dl, 0xc; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000a0621: mov dl, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xeb255; cmove rax, rdx; ret; 
0x0000000000123330: mov dl, 3; add al, 0xa; ret; 
0x000000000017cbba: mov dl, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000319ba: mov dl, 5; add byte ptr [rax], al; nop; ret; 
0x00000000000ea371: mov dl, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b7ca7: mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b9303: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b73: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf63: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b9332: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b92: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000baf92: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b9383: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd3: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe3: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000167d10: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000b92e0: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x00000000000b7b50: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000baf40: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x0000000000102868: mov dword ptr [0x40], 0; mov eax, r8d; ret; 
0x000000000009519f: mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000951a3: mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000009519a: mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000047a72: mov dword ptr [r11], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000047af3: mov dword ptr [r11], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008ab98: mov dword ptr [r12 + 0x74], eax; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000001500be: mov dword ptr [r8 + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000150140: mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000015019d: mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x000000000015016d: mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d360: mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x000000000014d3bd: mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d38d: mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000014d330: mov dword ptr [r8 + 4], 0; mov eax, 1; ret; 
0x000000000014d320: mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x000000000012efe8: mov dword ptr [r8 + 4], eax; test eax, eax; jne 0x12ef99; mov rax, rdi; ret; 
0x000000000013c681: mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000013c748: mov dword ptr [r8], r11d; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000131946: mov dword ptr [r8], r9d; add rsp, 0x18; ret; 
0x00000000000dfc30: mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x000000000018fd9a: mov dword ptr [r9 - 2], ecx; ret; 
0x000000000018fd85: mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000dfdfb: mov dword ptr [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d8: mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000141d90: mov dword ptr [rax + 0x10], 0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086e9b: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f1d: mov dword ptr [rax + 0x10], ecx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f59: mov dword ptr [rax + 0x10], edi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086e5d: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000001500bf: mov dword ptr [rax + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x000000000008762c: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000095907: mov dword ptr [rax + 0x20], edx; add rsp, 8; ret; 
0x000000000008cdc0: mov dword ptr [rax + 0x20], edx; pop rbx; ret; 
0x0000000000086401: mov dword ptr [rax + 0x28], edx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x0000000000087628: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000086e61: mov dword ptr [rax + 0x40], ecx; ret; 
0x0000000000086e9f: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f5d: mov dword ptr [rax + 0x40], esi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000150141: mov dword ptr [rax + 0x48], eax; mov eax, 1; ret; 
0x0000000000087cc2: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000015019e: mov dword ptr [rax + 0x54], eax; mov eax, 1; ret; 
0x000000000015016e: mov dword ptr [rax + 0x58], eax; mov eax, 1; ret; 
0x000000000014d361: mov dword ptr [rax + 0xa8], eax; mov eax, 1; ret; 
0x000000000014d3be: mov dword ptr [rax + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d38e: mov dword ptr [rax + 0xb8], eax; mov eax, 1; ret; 
0x000000000008e585: mov dword ptr [rax + 0xe0], ecx; call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x000000000012fd0e: mov dword ptr [rax + 0xf], 0xe281ffb6; add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000014d331: mov dword ptr [rax + 4], 0; mov eax, 1; ret; 
0x000000000014d321: mov dword ptr [rax + 4], 1; mov eax, 1; ret; 
0x000000000012efe9: mov dword ptr [rax + 4], eax; test eax, eax; jne 0x12ef99; mov rax, rdi; ret; 
0x00000000000a8abc: mov dword ptr [rax + 4], edx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8aac: mov dword ptr [rax + 4], edx; ret; 
0x00000000001414f1: mov dword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000092795: mov dword ptr [rax + 8], 0; ret; 
0x0000000000086e52: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000116f95: mov dword ptr [rax + 8], edi; movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000008cdb8: mov dword ptr [rax + 8], edx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000000ef963: mov dword ptr [rax + rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000189382: mov dword ptr [rax - 0x17], 0xffffff50; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000157777: mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000009278e: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000158041: mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000043068: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112a18: mov dword ptr [rax], 0x16; mov eax, 1; ret; 
0x000000000015d180: mov dword ptr [rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000042f28: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000001199f8: mov dword ptr [rax], 0x16; ret; 
0x00000000000d0178: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000000042b3b: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000041e62: mov dword ptr [rax], 0x22; add rsp, 8; ret; 
0x0000000000043c5c: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001145ac: mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000160eec: mov dword ptr [rax], 0x26; xor eax, eax; ret; 
0x0000000000041258: mov dword ptr [rax], 0x2a; mov rax, r11; ret; 
0x0000000000137c15: mov dword ptr [rax], 0x2d830000; sbb byte ptr [rax + 0x4401000b], cl; mov eax, eax; pop rbp; ret; 
0x00000000000d005b: mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0158: mov dword ptr [rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000011d015: mov dword ptr [rax], 0x50f0000; cmp rax, -0xfff; jae 0x11d024; ret; 
0x000000000010de60: mov dword ptr [rax], 0x5f; mov eax, 0xffffffff; ret; 
0x0000000000082834: mov dword ptr [rax], 0x89480000; ret; 
0x000000000009961b: mov dword ptr [rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000001144f0: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000009809b: mov dword ptr [rax], 0xc; mov rax, r8; ret; 
0x00000000001199b1: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009e95c: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x00000000001144dc: mov dword ptr [rax], 0xffffffff; xor eax, eax; ret; 
0x000000000011d238: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x0000000000048338: mov dword ptr [rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000412b8: mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246f0: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000521f8: mov dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x00000000000ceff3: mov dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000010dc25: mov dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10dc34; ret; 
0x0000000000057c0e: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057c2b: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000121ebd: mov dword ptr [rax], eax; mov qword ptr [rip + 0xca496], 0; ret; 
0x0000000000121e3d: mov dword ptr [rax], eax; mov qword ptr [rip + 0xca516], 0; ret; 
0x00000000000ec844: mov dword ptr [rax], ebp; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bba3: mov dword ptr [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000013c749: mov dword ptr [rax], ebx; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000131947: mov dword ptr [rax], ecx; add rsp, 0x18; ret; 
0x00000000000dfc31: mov dword ptr [rax], ecx; add rsp, 8; ret; 
0x000000000008558e: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000009a0bc: mov dword ptr [rax], ecx; mov rax, qword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c2: mov dword ptr [rax], ecx; mov rax, qword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000a8a80: mov dword ptr [rax], ecx; ret; 
0x0000000000116f75: mov dword ptr [rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000fec9f: mov dword ptr [rax], edi; mov rax, r8; ret; 
0x000000000009a0d0: mov dword ptr [rax], edi; ret; 
0x000000000011f1e7: mov dword ptr [rax], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c45d: mov dword ptr [rax], edx; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x0000000000047c9d: mov dword ptr [rax], edx; mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x0000000000149597: mov dword ptr [rax], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000008774d: mov dword ptr [rax], edx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c682: mov dword ptr [rax], edx; mov qword ptr [r9], r10; ret; 
0x0000000000086e5a: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000a8a8c: mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8a6e: mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8aa4: mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x0000000000033d18: mov dword ptr [rax], edx; ret; 
0x0000000000087f28: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x000000000009a0c6: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961cc: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000a8a61: mov dword ptr [rax], esi; ret; 
0x00000000000f2490: mov dword ptr [rbp + 0x30], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f23c8: mov dword ptr [rbp + 0x30], edi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f248f: mov dword ptr [rbp + 0x30], r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087591: mov dword ptr [rbp + 0x74], eax; mov eax, 1; pop rbp; pop r12; ret; 
0x00000000000e8164: mov dword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000154794: mov dword ptr [rbp + 8], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a20bf: mov dword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x000000000014e081: mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000926b6: mov dword ptr [rbp], eax; mov eax, 1; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x0000000000087e4a: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093464: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a037e: mov dword ptr [rbp], eax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000004806f: mov dword ptr [rbp], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013a432: mov dword ptr [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000013a431: mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000002fdd7: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000951a0: mov dword ptr [rbx + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000008cdd1: mov dword ptr [rbx + 0x10], eax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000015fb2a: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000094d07: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x0000000000127c63: mov dword ptr [rbx + 0x10], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000951a4: mov dword ptr [rbx + 0x14], 0; ret; 
0x0000000000157b96: mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000008c10e: mov dword ptr [rbx + 0x18], eax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000015fae2: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000127cb3: mov dword ptr [rbx + 0x18], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000081121: mov dword ptr [rbx + 0x18], edi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000014a028: mov dword ptr [rbx + 0x20], eax; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000011d7f1: mov dword ptr [rbx + 0x20], eax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091975: mov dword ptr [rbx + 0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000149fe8: mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009519b: mov dword ptr [rbx + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x00000000000ff51f: mov dword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000008cdd9: mov dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000001378c5: mov dword ptr [rbx + 0x30], eax; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011d9ed: mov dword ptr [rbx + 0x38], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000042c5f: mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000042c3c: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000000919be: mov dword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000115bf8: mov dword ptr [rbx + 0x60], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087e4e: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093468: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008fd8e: mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000086efa: mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000874fe: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e4ef: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008f507: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e649: mov dword ptr [rbx + 0x90], esi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000011db3f: mov dword ptr [rbx + 0x98], edx; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c5f3: mov dword ptr [rbx + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c71b: mov dword ptr [rbx + 4], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000935df: mov dword ptr [rbx + 8], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000002fda7: mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x000000000010c4fa: mov dword ptr [rbx + 8], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127c13: mov dword ptr [rbx + 8], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001132e3: mov dword ptr [rbx - 0x2708fff3], ecx; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000025b07: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000158036: mov dword ptr [rbx], 0; call 0x153750; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001199e6: mov dword ptr [rbx], 0; pop rbx; ret; 
0x0000000000091e62: mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a0a3e: mov dword ptr [rbx], eax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009eb11: mov dword ptr [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160025: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015348d: mov dword ptr [rbx], eax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x000000000009e9b5: mov dword ptr [rbx], eax; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000009d10d: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001534e6: mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000011998c: mov dword ptr [rbx], eax; pop rbx; setne al; movzx eax, al; ret; 
0x0000000000060ef6: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000047af4: mov dword ptr [rbx], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000087631: mov dword ptr [rbx], ecx; pop rbx; ret; 
0x00000000000bcd13: mov dword ptr [rbx], edx; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000639cd: mov dword ptr [rbx], edx; mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bba1: mov dword ptr [rbx], edx; mov dword ptr [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160d38: mov dword ptr [rbx], edx; pop rbx; ret; 
0x0000000000082c06: mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000957d4: mov dword ptr [rbx], esp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085913: mov dword ptr [rbx], esp; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000141c7c: mov dword ptr [rbx], esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085912: mov dword ptr [rbx], r12d; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000141c7b: mov dword ptr [rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000005b4ca: mov dword ptr [rcx + 0x3a8], edi; mov rsp, rdx; ret; 
0x00000000001789f2: mov dword ptr [rcx + 3], edx; ret; 
0x00000000001789e3: mov dword ptr [rcx + 4], edx; ret; 
0x0000000000178a54: mov dword ptr [rcx + 5], edx; ret; 
0x0000000000178a64: mov dword ptr [rcx + 6], edx; ret; 
0x0000000000178a33: mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a24: mov dword ptr [rcx + 8], edx; ret; 
0x000000000005584c: mov dword ptr [rcx + rcx*8], eax; xor eax, eax; ret; 
0x000000000005b92d: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000018fd9b: mov dword ptr [rcx - 2], ecx; ret; 
0x000000000018fd86: mov dword ptr [rcx - 4], ecx; ret; 
0x000000000018fd75: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000163685: mov dword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000e81df: mov dword ptr [rcx], 0xac75c084; xor eax, eax; ret; 
0x000000000003175e: mov dword ptr [rcx], 0xfff4788; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000433ee: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000860c7: mov dword ptr [rcx], eax; ret; 
0x000000000008aa1a: mov dword ptr [rcx], eax; xor eax, eax; pop rbx; ret; 
0x00000000000dfdfc: mov dword ptr [rcx], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d9: mov dword ptr [rcx], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013c74d: mov dword ptr [rcx], ecx; ret; 
0x000000000013c72b: mov dword ptr [rcx], edi; ret; 
0x00000000001789b1: mov dword ptr [rcx], edx; mov byte ptr [rcx + 2], dl; ret; 
0x00000000001789d0: mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x0000000000178a11: mov dword ptr [rcx], edx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000001789f0: mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x0000000000178a31: mov dword ptr [rcx], edx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a41: mov dword ptr [rcx], edx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a51: mov dword ptr [rcx], edx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a61: mov dword ptr [rcx], edx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a71: mov dword ptr [rcx], edx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a81: mov dword ptr [rcx], edx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000003453c: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000001789e0: mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x0000000000178a21: mov dword ptr [rcx], edx; mov word ptr [rcx + 8], dx; ret; 
0x000000000013c685: mov dword ptr [rcx], edx; ret; 
0x0000000000033c32: mov dword ptr [rcx], esi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000010d336: mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x0000000000121e60: mov dword ptr [rdi + 0x10], eax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x00000000000b862d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b900d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b949d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b866b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94db: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b86ed: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b912d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b955d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b868b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fbb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b794b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b94fe: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7cae: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb15e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b870d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b703d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b79cd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000564df: mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b78ed: mov dword ptr [rdi + 0x10], ecx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b792b: mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b79ad: mov dword ptr [rdi + 0x10], ecx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb0fd: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb13b: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb1bd: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b9580: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d30: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1e0: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b8750: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95c0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7080: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7a30: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000bb220: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b8770: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95e0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b70a0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7a60: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000bb240: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b8731: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b95a1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7061: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb201: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000010d31e: mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000113eac: mov dword ptr [rdi + 0x16], eax; ret; 
0x00000000000b8753: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b91c3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b95c3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7083: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7a33: mov dword ptr [rdi + 0x17], ecx; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000bb223: mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000015777b: mov dword ptr [rdi + 0x18], eax; mov eax, r8d; ret; 
0x00000000000918c7: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008d30f: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000b8735: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9195: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b95a5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b8773: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b91f3: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b95e3: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7065: mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7a05: mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b7a63: mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000bb205: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb243: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000015783d: mov dword ptr [rdi + 0x18], edx; mov eax, r8d; ret; 
0x00000000000918f4: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000158002: mov dword ptr [rdi + 0x18], esi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000157705: mov dword ptr [rdi + 0x18], esi; mov eax, r8d; ret; 
0x000000000015773d: mov dword ptr [rdi + 0x18], esi; mov rax, r8; ret; 
0x000000000015800d: mov dword ptr [rdi + 0x20], 0; ret; 
0x00000000000d128b: mov dword ptr [rdi + 0x20], eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000158005: mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000157736: mov dword ptr [rdi + 0x28], eax; add rsi, r8; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000157701: mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x000000000015790a: mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000011390a: mov dword ptr [rdi + 0x38], esi; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000918f8: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000918c3: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000918bb: mov dword ptr [rdi + 0x58], eax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000013b62e: mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000000827ed: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000b86ad: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b90cd: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b951d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fdd: mov dword ptr [rdi + 0xe], ecx; ret; 
0x00000000000b796d: mov dword ptr [rdi + 0xe], ecx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb17d: mov dword ptr [rdi + 0xe], ecx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b864b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b903b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b94bb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b86cd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b90fd: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b953d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6f9b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b790b: mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b798d: mov dword ptr [rdi + 0xf], ecx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb11b: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb19d: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000016df55: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dd98: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000016e038: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x000000000016dee5: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dd28: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8517: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b8e67: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x00000000000b9367: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x000000000016de75: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dcb8: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6ec7: mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b7787: mov dword ptr [rdi + 3], edx; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc7: mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000a8b84: mov dword ptr [rdi + 4], eax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b9c: mov dword ptr [rdi + 4], eax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000481e9: mov dword ptr [rdi + 4], eax; xor eax, eax; ret; 
0x00000000000b84f9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x00000000000b9349: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 6]; ret; 
0x000000000016dc48: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000a89ff: mov dword ptr [rdi + 4], edx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a89e7: mov dword ptr [rdi + 4], edx; ret; 
0x00000000000b7769: mov dword ptr [rdi + 4], edx; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bafa9: mov dword ptr [rdi + 4], edx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000010c9b4: mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000000b85ab: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b8f3b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b940b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x000000000016dbd8: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f2b: mov dword ptr [rdi + 5], edx; ret; 
0x00000000000b784b: mov dword ptr [rdi + 5], edx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb06b: mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85cb: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b8f6b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b942b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xe]; ret; 
0x000000000016db68: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f3b: mov dword ptr [rdi + 6], edx; ret; 
0x00000000000b786b: mov dword ptr [rdi + 6], edx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb08b: mov dword ptr [rdi + 6], edx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b8569: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8ef9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x00000000000b93c9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b85eb: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b8f9b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b944b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xf]; ret; 
0x000000000016daf8: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f09: mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7809: mov dword ptr [rdi + 7], edx; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b788b: mov dword ptr [rdi + 7], edx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb029: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb0ab: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000009ef33: mov dword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x000000000013b627: mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x0000000000157907: mov dword ptr [rdi + 8], eax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x0000000000113ea3: mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000057dda: mov dword ptr [rdi + 8], eax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057d66: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x0000000000157ffe: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000918cb: mov dword ptr [rdi + 8], eax; ret; 
0x00000000000564d8: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000094d88: mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000062fb6: mov dword ptr [rdi + 8], ebp; add dword ptr [rdi + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000056468: mov dword ptr [rdi + 8], ecx; ret; 
0x00000000000b93ab: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8589: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b8f19: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x00000000000b93e9: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b854b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x00000000000b8ecb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x0000000000055bb0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000055a78: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000008df53: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax]; ret; 
0x00000000000b6efb: mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b77eb: mov dword ptr [rdi + 8], edx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb00b: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb049: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x0000000000113916: mov dword ptr [rdi + 8], esi; ret; 
0x000000000018b51d: mov dword ptr [rdi + r8 - 2], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c3d: mov dword ptr [rdi + r8 - 2], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7ed: mov dword ptr [rdi + r8 - 2], edx; vzeroupper; ret; 
0x000000000018b539: mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c59: mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a809: mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018b51e: mov dword ptr [rdi + rax - 2], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c3e: mov dword ptr [rdi + rax - 2], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7ee: mov dword ptr [rdi + rax - 2], edx; vzeroupper; ret; 
0x000000000018b53a: mov dword ptr [rdi + rax - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c5a: mov dword ptr [rdi + rax - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a80a: mov dword ptr [rdi + rax - 4], edx; vzeroupper; ret; 
0x000000000018b55c: mov dword ptr [rdi + rax - 8], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c7c: mov dword ptr [rdi + rax - 8], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a8e4: mov dword ptr [rdi + rax - 8], edx; vzeroupper; ret; 
0x0000000000055c38: mov dword ptr [rdi + rax], eax; sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x0000000000056aed: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000bc05f: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x000000000018be94: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000bbc39: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x000000000018ae68: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893c8: mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000bc057: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000018be89: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000000bbc29: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018ae8c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893dc: mov dword ptr [rdi + rdx - 7], ecx; vzeroupper; ret; 
0x00000000000bc04f: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x000000000018be7e: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000bbc1b: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x00000000001679d5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a13: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000563cf: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000167b88: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c84: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bd0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d58: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f38: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168128: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682f9: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684f9: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001686f9: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679d1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a0f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b84: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c80: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bcc: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d54: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f34: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168124: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682f5: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684f5: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001686f5: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679cd: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a0b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b80: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c7c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bc8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d50: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f30: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168120: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682f1: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684f1: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001686f1: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679c9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a07: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167d5c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d5a8: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f3c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d528: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016812c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d4a8: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001682fd: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d419: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001684fd: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d389: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001686fd: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d2f9: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000b7e70: mov dword ptr [rdi - 1], edx; ret; 
0x00000000001680dd: mov dword ptr [rdi - 2], ecx; ret; 
0x0000000000167ef5: mov dword ptr [rdi - 2], edx; ret; 
0x00000000001680d9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001684b9: mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167b8f: mov dword ptr [rdi - 4], edx; ret; 
0x00000000001684b6: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001686b6: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001688b6: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000563c8: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634e: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000167a17: mov dword ptr [rdi - 8], edx; ret; 
0x0000000000167b8c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c88: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bd4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d628: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000047466: mov dword ptr [rdi], 0; pop rbx; ret; 
0x00000000000a89b9: mov dword ptr [rdi], eax; add rax, rdi; ret; 
0x00000000000a8b06: mov dword ptr [rdi], eax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000014a81f: mov dword ptr [rdi], eax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000a874a: mov dword ptr [rdi], eax; mov rax, r12; pop r12; ret; 
0x00000000000a86ec: mov dword ptr [rdi], eax; mov rax, r9; ret; 
0x000000000005b51f: mov dword ptr [rdi], eax; mov rax, rdi; ret; 
0x00000000000a8b64: mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b36: mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b7c: mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000056348: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056462: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000481e2: mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000041fb4: mov dword ptr [rdi], eax; subsd xmm0, xmm1; ret; 
0x0000000000113976: mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000bc963: mov dword ptr [rdi], ebp; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000563c1: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000000564d1: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000b84e5: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b8e25: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x00000000000b8537: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x00000000000b8ea7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000a8b50: mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ae34: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b84c4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e84: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7704: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b9307: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b77: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf67: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000b9335: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b95: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000baf95: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000b9387: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b8515: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b9365: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b7785: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000b8567: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f07: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7807: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000bb027: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b8587: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f17: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000bb047: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000018b537: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c57: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a807: mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000019045b: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000018ae62: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893c2: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000b85a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9408: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f28: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7848: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb068: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85c8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9428: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f38: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7868: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb088: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b85e8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9448: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f48: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b7888: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb0a8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000018b559: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c79: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a829: mov dword ptr [rdi], ecx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000018ae89: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893d9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b84f6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9346: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7766: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bafa6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b93a8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8548: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b77e8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb008: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000018b51a: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c3a: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7ea: mov dword ptr [rdi], ecx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000190467: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000157900: mov dword ptr [rdi], ecx; punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 8], rax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000004217e: mov dword ptr [rdi], ecx; ret; 
0x00000000000b7745: mov dword ptr [rdi], ecx; sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b77c7: mov dword ptr [rdi], ecx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x000000000018be83: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000000a8976: mov dword ptr [rdi], edx; add rax, rdi; ret; 
0x000000000008ac53: mov dword ptr [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041d92: mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b84b4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x00000000000b8dc4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018ae24: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b92f4: mov dword ptr [rdi], edx; lea rax, [rdi + 2]; ret; 
0x000000000018b504: mov dword ptr [rdi], edx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000000b84d2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000000b8e02: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000018ae52: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b9322: mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b8524: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b8e84: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b9374: mov dword ptr [rdi], edx; lea rax, [rdi + 8]; ret; 
0x0000000000189c24: mov dword ptr [rdi], edx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b7e90: mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7ed1: mov dword ptr [rdi], edx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b7ef1: mov dword ptr [rdi], edx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7f01: mov dword ptr [rdi], edx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000018a8d0: mov dword ptr [rdi], edx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000b7f11: mov dword ptr [rdi], edx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f21: mov dword ptr [rdi], edx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000157ffb: mov dword ptr [rdi], edx; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x000000000018a8e1: mov dword ptr [rdi], edx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ea0: mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7ee1: mov dword ptr [rdi], edx; mov word ptr [rdi + 8], dx; ret; 
0x000000000018a8c1: mov dword ptr [rdi], edx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000424c9: mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x00000000000a89c7: mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a89a9: mov dword ptr [rdi], edx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a89f7: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0x14]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a89df: mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x0000000000041fce: mov dword ptr [rdi], edx; ret; 
0x0000000000047d71: mov dword ptr [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000018a6a4: mov dword ptr [rdi], edx; sub r8, 2; lea rdi, [rdi + 2]; jne 0x18a930; vzeroupper; ret; 
0x00000000000b76e4: mov dword ptr [rdi], edx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x000000000018a6e2: mov dword ptr [rdi], edx; sub r8, 4; lea rdi, [rdi + 4]; jne 0x18a930; vzeroupper; ret; 
0x00000000000b7722: mov dword ptr [rdi], edx; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b77a4: mov dword ptr [rdi], edx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x000000000004231c: mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000189394: mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000000baf54: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000baf82: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000bafd4: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000a8b21: mov dword ptr [rdi], esi; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018fd83: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000057b76: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018fd72: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000018fd97: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x0000000000042336: mov dword ptr [rdi], esi; ret; 
0x000000000010c991: mov dword ptr [rdi], esi; xor eax, eax; ret; 
0x00000000000a89b8: mov dword ptr [rdi], r8d; add rax, rdi; ret; 
0x0000000000150a9c: mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000121eb9: mov dword ptr [rdx + 0x10], ecx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca496], 0; ret; 
0x0000000000121e39: mov dword ptr [rdx + 0x10], ecx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca516], 0; ret; 
0x00000000000860c4: mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x00000000001494c8: mov dword ptr [rdx + 0x20], esi; ret; 
0x00000000000958ff: mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x00000000001494a2: mov dword ptr [rdx + 0x58], edi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000014d2fa: mov dword ptr [rdx + 0x68], eax; movzx eax, word ptr [r8 + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x00000000001494a6: mov dword ptr [rdx + 0x68], ecx; ret; 
0x000000000014d306: mov dword ptr [rdx + 0x6c], eax; mov eax, 1; ret; 
0x00000000001509a4: mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x00000000001143e3: mov dword ptr [rdx + 0xd], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000008e5bd: mov dword ptr [rdx + 0xe0], ecx; pop rbx; ret; 
0x00000000000827fb: mov dword ptr [rdx + 0xe0], ecx; ret; 
0x000000000017ad77: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a6c: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000178887: mov dword ptr [rdx + 3], eax; mov rax, rdi; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x000000000006301d: mov dword ptr [rdx + 4], 1; ret; 
0x000000000017ad59: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000000cb186: mov dword ptr [rdx + 4], eax; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000b3a4e: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000178869: mov dword ptr [rdx + 4], eax; mov rax, rdi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x00000000000cb185: mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x000000000017ae0b: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x000000000017ad89: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176a39: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017892b: mov dword ptr [rdx + 5], eax; mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x00000000001788a9: mov dword ptr [rdx + 5], eax; mov rax, rdi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000017ae2b: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x000000000017ada9: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176a49: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x00000000001788c9: mov dword ptr [rdx + 6], eax; mov rax, rdi; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x000000000017894b: mov dword ptr [rdx + 6], eax; mov rax, rdi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017adc9: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x000000000017d093: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ae4b: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x00000000000b3af0: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000001788e9: mov dword ptr [rdx + 7], eax; mov rax, rdi; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x000000000017896b: mov dword ptr [rdx + 7], eax; mov rax, rdi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x000000000017ade9: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x000000000017acdb: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x00000000000b3ad2: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000001785cb: mov dword ptr [rdx + 8], eax; mov rax, rdi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x0000000000178909: mov dword ptr [rdx + 8], eax; mov rax, rdi; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000002fdbf: mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000116fd1: mov dword ptr [rdx + 8], eax; test rax, rax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x000000000006301a: mov dword ptr [rdx + 8], ecx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000112be3: mov dword ptr [rdx - 0x2708fff3], edx; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000057b3b: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057d4e: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000015d18a: mov dword ptr [rdx], 0; ret; 
0x0000000000057c32: mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000001144bb: mov dword ptr [rdx], eax; cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x000000000017ad04: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x000000000017ad32: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000017d13f: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac84: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x000000000017ad14: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f9: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000017ad42: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a27: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000017ad52: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a47: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000004342a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000057b78: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057da7: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000017ad72: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a67: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000017ad84: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176a34: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ada4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176a44: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017adc4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176a54: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017ade4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176a64: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000102890: mov dword ptr [rdx], eax; mov eax, r8d; ret; 
0x0000000000102830: mov dword ptr [rdx], eax; mov eax, r9d; ret; 
0x000000000004828a: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000017ae04: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a74: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ae24: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a94: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ae44: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176ab4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017acd4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000d1db9: mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000001144d2: mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000d4aaa: mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000b39e9: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000001787e4: mov dword ptr [rdx], eax; mov rax, rdi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x0000000000178822: mov dword ptr [rdx], eax; mov rax, rdi; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x0000000000178564: mov dword ptr [rdx], eax; mov rax, rdi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x0000000000034551: mov dword ptr [rdx], eax; ret; 
0x00000000000cb189: mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000434b4: mov dword ptr [rdx], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000871ac: mov dword ptr [rdx], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010257b: mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000000a8622: mov dword ptr [rdx], ecx; ret; 
0x00000000000dd000: mov dword ptr [rdx], edi; xor eax, eax; ret; 
0x0000000000085417: mov dword ptr [rdx], esp; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000000a0b7d: mov dword ptr [rdx], esp; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085416: mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f8a4: mov dword ptr [rip + 0x14f69e], eax; add rsp, 8; ret; 
0x000000000009f866: mov dword ptr [rip + 0x14f6dc], eax; ret; 
0x000000000009d70f: mov dword ptr [rip + 0x151793], 1; mov eax, r12d; pop r12; ret; 
0x000000000009a05e: mov dword ptr [rip + 0x154e10], 0; ret; 
0x0000000000095232: mov dword ptr [rip + 0x157074], eax; ret; 
0x000000000009520c: mov dword ptr [rip + 0x15707e], eax; ret; 
0x0000000000095228: mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951e3: mov dword ptr [rip + 0x15709f], eax; ret; 
0x0000000000095201: mov dword ptr [rip + 0x1570a9], 1; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951c3: mov dword ptr [rip + 0x1570b7], eax; ret; 
0x00000000000951d8: mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b8: mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000094ea9: mov dword ptr [rip + 0x157439], eax; ret; 
0x0000000000094e92: mov dword ptr [rip + 0x157448], eax; ret; 
0x0000000000094e78: mov dword ptr [rip + 0x157452], edx; ret; 
0x0000000000094e39: mov dword ptr [rip + 0x157459], eax; ret; 
0x0000000000094e29: mov dword ptr [rip + 0x157471], eax; ret; 
0x0000000000095276: mov dword ptr [rip + 0x159c24], eax; ret; 
0x0000000000095248: mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000093940: mov dword ptr [rip + 0x15ae7e], 0; ret; 
0x00000000000938a0: mov dword ptr [rip + 0x15af22], ebx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x0000000000094727: mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x00000000000440f3: mov dword ptr [rip + 0x1a80af], eax; mov eax, edx; ret; 
0x00000000000440d0: mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x000000000004757d: mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000023a50: mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x00000000000226b8: mov dword ptr [rip + 0x1ceae2], edx; pop rax; pop rbx; pop rbp; ret; 
0x0000000000198ad8: mov dword ptr [rip + 0x5519e], 0; ret; 
0x000000000019863c: mov dword ptr [rip + 0x5532a], 0; add rsp, 8; ret; 
0x0000000000198c24: mov dword ptr [rip + 0x55b76], ebx; test rbx, rbx; jne 0x198c10; pop rbx; ret; 
0x0000000000198e0d: mov dword ptr [rip + 0x56319], 0; ret; 
0x0000000000198e73: mov dword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x0000000000198f46: mov dword ptr [rip + 0x56f20], 0; ret; 
0x0000000000199078: mov dword ptr [rip + 0x5799e], 0; pop rbx; ret; 
0x0000000000113484: mov dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000160fd0: mov dword ptr [rip + 0x8deba], esi; ret; 
0x0000000000160fc7: mov dword ptr [rip + 0x8decb], eax; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x000000000015d58f: mov dword ptr [rip + 0x93ba7], 0; add rsp, 8; ret; 
0x0000000000153490: mov dword ptr [rip + 0x9d986], 2; ret; 
0x00000000001471c9: mov dword ptr [rip + 0xa99ad], eax; add rsp, 8; ret; 
0x0000000000138743: mov dword ptr [rip + 0xb5197], eax; add rsp, 8; ret; 
0x000000000012d23c: mov dword ptr [rip + 0xc2c36], eax; pop rbp; ret; 
0x0000000000121ec0: mov dword ptr [rip + 0xca496], 0; ret; 
0x0000000000121e97: mov dword ptr [rip + 0xca4bf], 0; ret; 
0x0000000000121e66: mov dword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000121e40: mov dword ptr [rip + 0xca516], 0; ret; 
0x0000000000121d19: mov dword ptr [rip + 0xca641], ebx; pop rbx; ret; 
0x0000000000121cff: mov dword ptr [rip + 0xca65b], ebx; pop rbx; ret; 
0x0000000000121ac9: mov dword ptr [rip + 0xca88d], 0; add rsp, 8; ret; 
0x0000000000121a94: mov dword ptr [rip + 0xca8c2], 3; add rsp, 8; ret; 
0x000000000011892e: mov dword ptr [rip + 0xd3a14], edi; ret; 
0x000000000011790e: mov dword ptr [rip + 0xd7e7c], eax; add rsp, 8; ret; 
0x00000000001178e7: mov dword ptr [rip + 0xd7e9f], 0; add rsp, 8; ret; 
0x000000000011789d: mov dword ptr [rip + 0xd7eed], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000011786d: mov dword ptr [rip + 0xd7f1d], eax; mov rax, r8; ret; 
0x00000000001160ba: mov dword ptr [rip + 0xd957c], 0; add rsp, 8; ret; 
0x0000000000115db5: mov dword ptr [rip + 0xd98e5], eax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000115d01: mov dword ptr [rip + 0xd9939], eax; mov eax, 1; add rsp, 8; ret; 
0x000000000014842e: mov dword ptr [rsi + 0x10], 2; test eax, eax; je 0x148440; xor eax, eax; ret; 
0x000000000014852b: mov dword ptr [rsi + 0x10], eax; ret; 
0x000000000004810a: mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048159: mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000047c30: mov dword ptr [rsi + 0x10], ecx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x0000000000047c34: mov dword ptr [rsi + 0x28], eax; xor eax, eax; ret; 
0x000000000008df2c: mov dword ptr [rsi + 0x28], ecx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001133ef: mov dword ptr [rsi + 0x48], eax; ret; 
0x00000000001133e7: mov dword ptr [rsi + 0x50], ecx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000112a0a: mov dword ptr [rsi + 0x66], edx; xor eax, eax; ret; 
0x000000000004810f: mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048192: mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000113fe3: mov dword ptr [rsi + 0xd], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000004819b: mov dword ptr [rsi + 0xe], eax; xor eax, eax; ret; 
0x0000000000148561: mov dword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000148523: mov dword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484c7: mov dword ptr [rsi + 8], eax; ret; 
0x0000000000055604: mov dword ptr [rsi + rax*8], edx; xor eax, eax; ret; 
0x000000000019046a: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000019045d: mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000100468: mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000001484d9: mov dword ptr [rsi], 0; ret; 
0x000000000014855a: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014851c: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484c0: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x0000000000148574: mov dword ptr [rsi], 0xa; ret; 
0x000000000014857b: mov dword ptr [rsi], 0xb; ret; 
0x0000000000148550: mov dword ptr [rsi], 0xc; ret; 
0x0000000000148545: mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000148533: mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x000000000014856d: mov dword ptr [rsi], 8; ret; 
0x00000000001484ff: mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000015783a: mov dword ptr [rsi], eax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x000000000004814c: mov dword ptr [rsi], eax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000008d313: mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000013b632: mov dword ptr [rsi], edi; ret; 
0x000000000013bb6f: mov dword ptr [rsi], edi; xor eax, eax; ret; 
0x0000000000047c9f: mov dword ptr [rsi], edx; mov eax, r8d; ret; 
0x00000000001577b7: mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000100454: mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000e2c8a: mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000041ba9: mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000011346b: mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000148eae: mov dword ptr [rsp + 0x30], eax; call 0x1578f0; mov rax, r12; pop r12; ret; 
0x000000000008ab99: mov dword ptr [rsp + 0x74], eax; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000e2e6a: mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d44: mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151f6: mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120e13: mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000043495: mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000112bca: mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010e238: mov dword ptr [rsp + 8], eax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000012090f: mov dword ptr [rsp + 8], eax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x0000000000041cd6: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041d99: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c16: mov dword ptr [rsp - 0x10], eax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c5f: mov dword ptr [rsp - 0x10], eax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x000000000005b11d: mov dword ptr [rsp - 0x10], edx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d028e: mov dword ptr [rsp - 0x10], esi; fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000057ccc: mov dword ptr [rsp - 0x10], esi; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c64: mov dword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057cc7: mov dword ptr [rsp - 0x18], eax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000196b74: mov dword ptr [rsp], eax; call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010ebee: mov dword ptr [rsp], eax; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010c3db: mov dword ptr [rsp], eax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000012064d: mov dword ptr [rsp], eax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x00000000000a2c09: mov dword ptr [rsp], ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000a1f72: mov dword ptr [rsp], esi; pop r12; pop r13; pop r14; ret; 
0x0000000000102867: mov dword ptr fs:[0x40], 0; mov eax, r8d; ret; 
0x0000000000131945: mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000000dfc2f: mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfdfa: mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000df4d7: mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000043067: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112a17: mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x000000000015d17f: mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000042f27: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000001199f7: mov dword ptr fs:[rax], 0x16; ret; 
0x00000000000d0177: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000042b3a: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000041e61: mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043c5b: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001145ab: mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000160eeb: mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000041257: mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000d005a: mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0157: mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000010de5f: mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000009961a: mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x00000000001144ef: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000009809a: mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000001199b0: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000009e95b: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000011d237: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000048337: mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000412b7: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246ef: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000116f74: mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000013a430: mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000141c7a: mov dword ptr fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000433ed: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000043429: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010288f: mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000010282f: mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000000048289: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144d1: mov dword ptr fs:[rdx], eax; mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000bbc28: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000016e030: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84f2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9342: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000bafa2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b93a3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8543: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000bb003: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000167ef0: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001680d0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b84b0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92f0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b6e70: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b76e0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000baf50: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000197419: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret; 
0x0000000000041fc1: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax + 0x48c22148], al; mov dword ptr [rdi], edx; ret; 
0x0000000000041f91: mov eax, 0; add byte ptr [rax], al; add byte ptr [rax + 0x66c22148], al; movq mm0, rdx; ret; 
0x00000000000bc193: mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000112d17: mov eax, 0; cmova eax, edx; ret; 
0x00000000000a2895: mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000127cfb: mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000055039: mov eax, 0; jne 0x55043; push r10; ret; 
0x0000000000055542: mov eax, 0; jne 0x5554c; push r10; ret; 
0x000000000014ca6b: mov eax, 0x1000a42; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000149135: mov eax, 0x100; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000113ea6: mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000013bf29: mov eax, 0x100; ret; 
0x000000000013bf20: mov eax, 0x101; ret; 
0x000000000013bf17: mov eax, 0x102; cmovne eax, edx; ret; 
0x000000000010dea4: mov eax, 0x102; syscall; cmp rax, -0xfff; jae 0x10deb4; ret; 
0x000000000010db7e: mov eax, 0x103; syscall; cmp rax, -0x1000; ja 0x10db90; ret; 
0x000000000010f617: mov eax, 0x104; syscall; cmp rax, -0xfff; jae 0x10f627; ret; 
0x0000000000116ea9: mov eax, 0x105; syscall; cmp rax, -0x1000; ja 0x116ec0; ret; 
0x000000000010dbd8: mov eax, 0x106; syscall; cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x000000000010ff24: mov eax, 0x107; syscall; cmp rax, -0xfff; jae 0x10ff34; ret; 
0x0000000000062eb7: mov eax, 0x108; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010fe07: mov eax, 0x109; syscall; cmp rax, -0xfff; jae 0x10fe17; ret; 
0x000000000009526c: mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000146bb4: mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000000bc1e1: mov eax, 0x10; pop rbx; ret; 
0x0000000000063028: mov eax, 0x10; ret; 
0x0000000000113d7a: mov eax, 0x10; syscall; cmp rax, -0x1000; ja 0x113dd8; ret; 
0x00000000001145c4: mov eax, 0x10; syscall; cmp rax, -0xfff; jae 0x1145d4; ret; 
0x000000000010fe64: mov eax, 0x10a; syscall; cmp rax, -0xfff; jae 0x10fe74; ret; 
0x000000000010fec7: mov eax, 0x10b; syscall; cmp rax, -0xfff; jae 0x10fed7; ret; 
0x000000000010de11: mov eax, 0x10c; syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x0000000000120014: mov eax, 0x110; syscall; cmp rax, -0xfff; jae 0x120024; ret; 
0x000000000011f853: mov eax, 0x113; syscall; cmp rax, -0x1000; ja 0x11f8d8; ret; 
0x000000000011f6f3: mov eax, 0x114; syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x0000000000113413: mov eax, 0x115; syscall; cmp rax, -0x1000; ja 0x113480; ret; 
0x000000000011f7a3: mov eax, 0x116; syscall; cmp rax, -0x1000; ja 0x11f810; ret; 
0x00000000001132c7: mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x1132e0; ret; 
0x000000000011330c: mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x113320; ret; 
0x000000000011f459: mov eax, 0x119; syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x000000000010c383: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x10c3f0; ret; 
0x0000000000113857: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x113870; ret; 
0x0000000000120074: mov eax, 0x11b; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000001134c3: mov eax, 0x11d; syscall; cmp rax, -0x1000; ja 0x113530; ret; 
0x00000000001200a7: mov eax, 0x11e; syscall; cmp rax, -0xfff; jae 0x1200b7; ret; 
0x00000000001200d4: mov eax, 0x11f; syscall; cmp rax, -0xfff; jae 0x1200e4; ret; 
0x0000000000120d03: mov eax, 0x120; syscall; cmp rax, -0x1000; ja 0x120d70; ret; 
0x000000000011f544: mov eax, 0x122; syscall; cmp rax, -0xfff; jae 0x11f554; ret; 
0x000000000011fce4: mov eax, 0x123; syscall; cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x000000000010eb14: mov eax, 0x124; syscall; cmp rax, -0xfff; jae 0x10eb24; ret; 
0x000000000010eb74: mov eax, 0x125; syscall; cmp rax, -0xfff; jae 0x10eb84; ret; 
0x000000000011fe04: mov eax, 0x126; syscall; cmp rax, -0xfff; jae 0x11fe14; ret; 
0x0000000000114746: mov eax, 0x127; syscall; cmp rax, -0x1000; ja 0x1147b8; ret; 
0x0000000000114806: mov eax, 0x128; syscall; cmp rax, -0x1000; ja 0x114878; ret; 
0x000000000010c433: mov eax, 0x12; syscall; cmp rax, -0x1000; ja 0x10c4a0; ret; 
0x0000000000120db3: mov eax, 0x12b; syscall; cmp rax, -0x1000; ja 0x120e28; ret; 
0x0000000000120104: mov eax, 0x12c; syscall; cmp rax, -0xfff; jae 0x120114; ret; 
0x000000000011fb97: mov eax, 0x12d; syscall; cmp rax, -0xfff; jae 0x11fba7; ret; 
0x000000000011f5d7: mov eax, 0x12e; syscall; cmp rax, -0xfff; jae 0x11f5e7; ret; 
0x0000000000113f8b: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113fa0; ret; 
0x0000000000113fcc: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113fe0; ret; 
0x0000000000120137: mov eax, 0x12f; syscall; cmp rax, -0xfff; jae 0x120147; ret; 
0x000000000011f920: mov eax, 0x130; syscall; cmp rax, -0x1000; ja 0x11f980; ret; 
0x000000000011fc24: mov eax, 0x131; syscall; cmp rax, -0xfff; jae 0x11fc34; ret; 
0x0000000000115504: mov eax, 0x132; syscall; cmp rax, -0xfff; jae 0x115514; ret; 
0x0000000000120e63: mov eax, 0x133; syscall; cmp rax, -0x1000; ja 0x120ed0; ret; 
0x0000000000120164: mov eax, 0x134; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x0000000000120197: mov eax, 0x136; syscall; cmp rax, -0xfff; jae 0x1201a7; ret; 
0x00000000001201c7: mov eax, 0x137; syscall; cmp rax, -0xfff; jae 0x1201d7; ret; 
0x0000000000114600: mov eax, 0x13; syscall; cmp rax, -0x1000; ja 0x114660; ret; 
0x0000000000048220: mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x00000000001201f4: mov eax, 0x13f; syscall; cmp rax, -0xfff; jae 0x120204; ret; 
0x0000000000113203: mov eax, 0x146; syscall; cmp rax, -0x1000; ja 0x113288; ret; 
0x000000000011fa4c: mov eax, 0x149; syscall; cmp rax, -0x1000; ja 0x11fa60; ret; 
0x00000000001146a0: mov eax, 0x14; syscall; cmp rax, -0x1000; ja 0x114700; ret; 
0x0000000000120224: mov eax, 0x14a; syscall; cmp rax, -0xfff; jae 0x120234; ret; 
0x0000000000120254: mov eax, 0x14b; syscall; cmp rax, -0xfff; jae 0x120264; ret; 
0x000000000010e354: mov eax, 0x15; syscall; cmp rax, -0x1000; ja 0x10e368; ret; 
0x00000000000911f0: mov eax, 0x15d5; add byte ptr [rax], al; add byte ptr [rbx + 0x158901ea], al; ret; 
0x000000000010d314: mov eax, 0x16; cmp esi, 2; ja 0x10d326; mov dword ptr [rdi + 0x10c], esi; xor eax, eax; ret; 
0x0000000000094e09: mov eax, 0x16; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000a8cae: mov eax, 0x16; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000094d40: mov eax, 0x16; ret; 
0x000000000010eb44: mov eax, 0x16; syscall; cmp rax, -0xfff; jae 0x10eb54; ret; 
0x0000000000115193: mov eax, 0x17; syscall; cmp rax, -0x1000; ja 0x115210; ret; 
0x0000000000102714: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca4: mov eax, 0x18; syscall; ret; 
0x000000000011fec7: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x11fed7; ret; 
0x0000000000118c00: mov eax, 0x1a; syscall; cmp rax, -0x1000; ja 0x118c60; ret; 
0x0000000000118cc4: mov eax, 0x1b; syscall; cmp rax, -0xfff; jae 0x118cd4; ret; 
0x0000000000118c94: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x118ca4; ret; 
0x000000000010d34b: mov eax, 0x1c; syscall; neg eax; ret; 
0x0000000000121417: mov eax, 0x1d; syscall; cmp rax, -0x1000; ja 0x121430; ret; 
0x00000000001213b4: mov eax, 0x1e; syscall; cmp rax, -0x1000; ja 0x1213c8; ret; 
0x0000000000121454: mov eax, 0x1f; syscall; cmp rax, -0x1000; ja 0x121468; ret; 
0x000000000003426b: mov eax, 0x200; ret; 
0x00000000000e506c: mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e513a: mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000bc1da: mov eax, 0x20; pop rbx; ret; 
0x000000000010eab4: mov eax, 0x20; syscall; cmp rax, -0xfff; jae 0x10eac4; ret; 
0x000000000010eae4: mov eax, 0x21; syscall; cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x00000000000e2e40: mov eax, 0x22; syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x00000000000d41b4: mov eax, 0x24; syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000e2d94: mov eax, 0x25; syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000d41e4: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e40c4: mov eax, 0x27; syscall; ret; 
0x00000000001131c7: mov eax, 0x28; syscall; cmp rax, -0xfff; jae 0x1131d7; ret; 
0x00000000001209c4: mov eax, 0x29; syscall; cmp rax, -0xfff; jae 0x1209d4; ret; 
0x00000000001203c0: mov eax, 0x2a; syscall; cmp rax, -0x1000; ja 0x120420; ret; 
0x00000000001202f0: mov eax, 0x2b; syscall; cmp rax, -0x1000; ja 0x120350; ret; 
0x0000000000120749: mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x1207c0; ret; 
0x00000000001208a3: mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x120928; ret; 
0x0000000000120529: mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205e3: mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x120660; ret; 
0x0000000000120800: mov eax, 0x2e; syscall; cmp rax, -0x1000; ja 0x120860; ret; 
0x00000000001206a0: mov eax, 0x2f; syscall; cmp rax, -0x1000; ja 0x120700; ret; 
0x00000000000bc1d3: mov eax, 0x30; pop rbx; ret; 
0x0000000000120994: mov eax, 0x30; syscall; cmp rax, -0xfff; jae 0x1209a4; ret; 
0x0000000000120384: mov eax, 0x31; syscall; cmp rax, -0xfff; jae 0x120394; ret; 
0x00000000001204e4: mov eax, 0x32; syscall; cmp rax, -0xfff; jae 0x1204f4; ret; 
0x0000000000120484: mov eax, 0x33; syscall; cmp rax, -0xfff; jae 0x120494; ret; 
0x0000000000120454: mov eax, 0x34; syscall; cmp rax, -0xfff; jae 0x120464; ret; 
0x00000000001209f7: mov eax, 0x35; syscall; cmp rax, -0xfff; jae 0x120a07; ret; 
0x0000000000120967: mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x120977; ret; 
0x00000000001204b7: mov eax, 0x37; syscall; cmp rax, -0xfff; jae 0x1204c7; ret; 
0x00000000000e3174: mov eax, 0x3b; syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e2c33: mov eax, 0x3d; syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000433d4: mov eax, 0x3e; syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000e2b44: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000bc1cc: mov eax, 0x40; pop rbx; ret; 
0x00000000000e50e8: mov eax, 0x40; ret; 
0x00000000001212a4: mov eax, 0x40; syscall; cmp rax, -0x1000; ja 0x1212b8; ret; 
0x00000000001213e4: mov eax, 0x43; syscall; cmp rax, -0x1000; ja 0x1213f8; ret; 
0x000000000002f701: mov eax, 0x44000000; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000121234: mov eax, 0x44; syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x00000000001210d3: mov eax, 0x45; syscall; cmp rax, -0x1000; ja 0x121140; ret; 
0x0000000000121183: mov eax, 0x46; syscall; cmp rax, -0x1000; ja 0x121200; ret; 
0x0000000000121264: mov eax, 0x47; syscall; cmp rax, -0x1000; ja 0x121278; ret; 
0x000000000010e794: mov eax, 0x49; syscall; cmp rax, -0xfff; jae 0x10e7a4; ret; 
0x00000000001153c0: mov eax, 0x4a; syscall; cmp rax, -0x1000; ja 0x115410; ret; 
0x0000000000115480: mov eax, 0x4b; syscall; cmp rax, -0x1000; ja 0x1154d0; ret; 
0x0000000000116ee4: mov eax, 0x4c; syscall; cmp rax, -0x1000; ja 0x116ef8; ret; 
0x0000000000116f14: mov eax, 0x4d; syscall; cmp rax, -0x1000; ja 0x116f28; ret; 
0x000000000010ec34: mov eax, 0x50; syscall; cmp rax, -0xfff; jae 0x10ec44; ret; 
0x000000000010ec64: mov eax, 0x51; syscall; cmp rax, -0xfff; jae 0x10ec74; ret; 
0x0000000000062e84: mov eax, 0x52; syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x000000000010de74: mov eax, 0x53; syscall; cmp rax, -0xfff; jae 0x10de84; ret; 
0x000000000010ff54: mov eax, 0x54; syscall; cmp rax, -0xfff; jae 0x10ff64; ret; 
0x000000000010ebb0: mov eax, 0x55; syscall; cmp rax, -0x1000; ja 0x10ec00; ret; 
0x000000000010fdd4: mov eax, 0x56; syscall; cmp rax, -0xfff; jae 0x10fde4; ret; 
0x000000000010fef4: mov eax, 0x57; syscall; cmp rax, -0xfff; jae 0x10ff04; ret; 
0x000000000010fe34: mov eax, 0x58; syscall; cmp rax, -0xfff; jae 0x10fe44; ret; 
0x000000000010fe94: mov eax, 0x59; syscall; cmp rax, -0xfff; jae 0x10fea4; ret; 
0x000000000010dd84: mov eax, 0x5a; syscall; cmp rax, -0xfff; jae 0x10dd94; ret; 
0x00000000001100cc: mov eax, 0x5b000000; pop r12; pop r13; pop r14; ret; 
0x00000000000e49bd: mov eax, 0x5b000000; pop rbp; ret; 
0x000000000010ddb4: mov eax, 0x5b; syscall; cmp rax, -0xfff; jae 0x10ddc4; ret; 
0x000000000010f584: mov eax, 0x5c; syscall; cmp rax, -0xfff; jae 0x10f594; ret; 
0x000000000010f5b4: mov eax, 0x5d; syscall; cmp rax, -0xfff; jae 0x10f5c4; ret; 
0x000000000010f5e4: mov eax, 0x5e; syscall; cmp rax, -0xfff; jae 0x10f5f4; ret; 
0x000000000010dd74: mov eax, 0x5f; syscall; ret; 
0x00000000000bc1c5: mov eax, 0x60; pop rbx; ret; 
0x00000000000d0ed9: mov eax, 0x60; syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x0000000000114004: mov eax, 0x62; syscall; cmp rax, -0xfff; jae 0x114014; ret; 
0x000000000011ffe4: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x11fff4; ret; 
0x00000000000e40e4: mov eax, 0x66; syscall; ret; 
0x000000000011fe64: mov eax, 0x67; syscall; cmp rax, -0xfff; jae 0x11fe74; ret; 
0x00000000000e4104: mov eax, 0x68; syscall; ret; 
0x00000000000e40f4: mov eax, 0x6b; syscall; ret; 
0x00000000000e4114: mov eax, 0x6c; syscall; ret; 
0x00000000000e43a4: mov eax, 0x6d; syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e40d4: mov eax, 0x6e; syscall; ret; 
0x00000000000e43d4: mov eax, 0x6f; syscall; ret; 
0x00000000000e4434: mov eax, 0x70; syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4124: mov eax, 0x73; syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000ee45e: mov eax, 0x7408e383; xchg ebx, eax; pop rbx; ret; 
0x00000000000e4464: mov eax, 0x76; syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4494: mov eax, 0x78; syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x00000000000e4374: mov eax, 0x79; syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x000000000011f3e4: mov eax, 0x7a; syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f414: mov eax, 0x7b; syscall; cmp rax, -0xfff; jae 0x11f424; ret; 
0x00000000000e4404: mov eax, 0x7c; syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e4f5b: mov eax, 0x7d00; ret; 
0x000000000011fbc4: mov eax, 0x7d; syscall; cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x00000000000e5020: mov eax, 0x7e; ret; 
0x000000000011fbf4: mov eax, 0x7e; syscall; cmp rax, -0xfff; jae 0x11fc04; ret; 
0x0000000000042278: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000000e4f82: mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e500a: mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000000043409: mov eax, 0x7f; syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x00000000000e4f3f: mov eax, 0x7fffffff; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x000000000013cbe0: mov eax, 0x7fffffff; ret; 
0x00000000000bc1ef: mov eax, 0x80; pop rbx; ret; 
0x0000000000043455: mov eax, 0x82; syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x00000000000439c4: mov eax, 0x83; syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x000000000013b5e4: mov eax, 0x83fffff2; clc; cmc; je 0x13b5e0; pop rbx; ret; 
0x000000000010d5f4: mov eax, 0x84; syscall; cmp rax, -0xfff; jae 0x10d604; ret; 
0x000000000010db1b: mov eax, 0x85; syscall; cmp rax, -0x1000; ja 0x10db30; ret; 
0x0000000000120044: mov eax, 0x86; syscall; cmp rax, -0xfff; jae 0x120054; ret; 
0x000000000011f604: mov eax, 0x87; syscall; cmp rax, -0xfff; jae 0x11f614; ret; 
0x000000000011c6db: mov eax, 0x88; syscall; cmp rax, -0x1000; ja 0x11c6f0; ret; 
0x00000000000f89eb: mov eax, 0x89000000; ret; 
0x000000000012d632: mov eax, 0x89483e74; ret; 
0x000000000010dc24: mov eax, 0x89; syscall; cmp rax, -0xfff; jae 0x10dc34; ret; 
0x000000000010dc54: mov eax, 0x8a; syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x0000000000183a04: mov eax, 0x8b00017a; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000114404: mov eax, 0x8d; syscall; cmp rax, -0xfff; jae 0x114414; ret; 
0x0000000000102654: mov eax, 0x8e; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102684: mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b4: mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e4: mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102744: mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102774: mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a4: mov eax, 0x94; syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x0000000000118d24: mov eax, 0x95; syscall; cmp rax, -0xfff; jae 0x118d34; ret; 
0x0000000000118d54: mov eax, 0x96; syscall; cmp rax, -0xfff; jae 0x118d64; ret; 
0x0000000000118d84: mov eax, 0x97; syscall; cmp rax, -0xfff; jae 0x118d94; ret; 
0x0000000000118db4: mov eax, 0x98; syscall; cmp rax, -0xfff; jae 0x118dc4; ret; 
0x0000000000115844: mov eax, 0x99; syscall; cmp rax, -0xfff; jae 0x115854; ret; 
0x000000000011fb54: mov eax, 0x9a; syscall; cmp rax, -0xfff; jae 0x11fb64; ret; 
0x000000000011ff24: mov eax, 0x9b; syscall; cmp rax, -0xfff; jae 0x11ff34; ret; 
0x000000000011ff57: mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11ff67; ret; 
0x000000000011fb24: mov eax, 0x9e; syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x0000000000115384: mov eax, 0xa1; syscall; cmp rax, -0xfff; jae 0x115394; ret; 
0x0000000000115444: mov eax, 0xa2; syscall; cmp rax, -0xfff; jae 0x115454; ret; 
0x0000000000115354: mov eax, 0xa3; syscall; cmp rax, -0xfff; jae 0x115364; ret; 
0x00000000000d1077: mov eax, 0xa4; xor edi, edi; syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x000000000011fe97: mov eax, 0xa5; syscall; cmp rax, -0xfff; jae 0x11fea7; ret; 
0x000000000011f384: mov eax, 0xa6; syscall; cmp rax, -0xfff; jae 0x11f394; ret; 
0x0000000000115874: mov eax, 0xa7; syscall; cmp rax, -0xfff; jae 0x115884; ret; 
0x00000000001158a4: mov eax, 0xa8; syscall; cmp rax, -0xfff; jae 0x1158b4; ret; 
0x0000000000115540: mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115550; ret; 
0x000000000013708a: mov eax, 0xa; pop rbx; pop rbp; ret; 
0x0000000000118bc4: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x118bd4; ret; 
0x0000000000115004: mov eax, 0xaa; syscall; cmp rax, -0xfff; jae 0x115014; ret; 
0x0000000000115154: mov eax, 0xab; syscall; cmp rax, -0xfff; jae 0x115164; ret; 
0x000000000011f234: mov eax, 0xac; syscall; cmp rax, -0xfff; jae 0x11f244; ret; 
0x000000000011f204: mov eax, 0xad; syscall; cmp rax, -0xfff; jae 0x11f214; ret; 
0x000000000011fc54: mov eax, 0xae; syscall; cmp rax, -0xfff; jae 0x11fc64; ret; 
0x000000000011fd77: mov eax, 0xaf; syscall; cmp rax, -0xfff; jae 0x11fd87; ret; 
0x000000000011fc84: mov eax, 0xb0; syscall; cmp rax, -0xfff; jae 0x11fc94; ret; 
0x000000000011fd44: mov eax, 0xb1; syscall; cmp rax, -0xfff; jae 0x11fd54; ret; 
0x000000000011ff87: mov eax, 0xb2; syscall; cmp rax, -0xfff; jae 0x11ff97; ret; 
0x000000000011ffb7: mov eax, 0xb3; syscall; cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000011fef4: mov eax, 0xb4; syscall; cmp rax, -0xfff; jae 0x11ff04; ret; 
0x000000000014d390: mov eax, 0xb8000000; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000118b94: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000120284: mov eax, 0xba; syscall; ret; 
0x000000000011f3b4: mov eax, 0xbb; syscall; cmp rax, -0x1000; ja 0x11f3c8; ret; 
0x000000000011d1c7: mov eax, 0xbc; syscall; cmp rax, -0xfff; jae 0x11d1d7; ret; 
0x000000000011d167: mov eax, 0xbd; syscall; cmp rax, -0xfff; jae 0x11d177; ret; 
0x000000000011d047: mov eax, 0xbe; syscall; cmp rax, -0xfff; jae 0x11d057; ret; 
0x000000000011d077: mov eax, 0xbf; syscall; cmp rax, -0xfff; jae 0x11d087; ret; 
0x000000000010d3e3: mov eax, 0xc00141c0; cmp rdi, rsi; ja 0x10d3d8; mov eax, r8d; ret; 
0x000000000011d0d7: mov eax, 0xc0; syscall; cmp rax, -0xfff; jae 0x11d0e7; ret; 
0x000000000011cfb7: mov eax, 0xc1; syscall; cmp rax, -0xfff; jae 0x11cfc7; ret; 
0x000000000011d0a4: mov eax, 0xc2; syscall; cmp rax, -0xfff; jae 0x11d0b4; ret; 
0x000000000011cfe4: mov eax, 0xc4; syscall; cmp rax, -0xfff; jae 0x11cff4; ret; 
0x000000000011d194: mov eax, 0xc5; syscall; cmp rax, -0xfff; jae 0x11d1a4; ret; 
0x000000000011d134: mov eax, 0xc6; syscall; cmp rax, -0xfff; jae 0x11d144; ret; 
0x000000000011d014: mov eax, 0xc7; syscall; cmp rax, -0xfff; jae 0x11d024; ret; 
0x00000000000d0dc4: mov eax, 0xc9; syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000f23d1: mov eax, 0xc; pop rbp; pop r12; ret; 
0x00000000000f24a0: mov eax, 0xc; ret; 
0x0000000000098da6: mov eax, 0xca; lea rdi, [rip + 0x153dce]; syscall; pop rbp; ret; 
0x0000000000099fa2: mov eax, 0xca; lea rdi, [rip + 0x154eca]; syscall; pop rbx; ret; 
0x0000000000094a4a: mov eax, 0xca; lea rdi, [rip + 0x159daa]; syscall; pop rbx; ret; 
0x0000000000093920: mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091018: mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f60: mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x000000000004764a: mov eax, 0xca; lea rdi, [rip + 0x1a6e8a]; syscall; pop rbp; ret; 
0x0000000000198cda: mov eax, 0xca; lea rdi, [rip + 0x55b1a]; syscall; pop rbx; ret; 
0x000000000019900a: mov eax, 0xca; lea rdi, [rip + 0x57502]; syscall; pop rbp; ret; 
0x000000000014267a: mov eax, 0xca; lea rdi, [rip + 0xae392]; syscall; pop rbp; ret; 
0x0000000000117e43: mov eax, 0xca; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x00000000000630a4: mov eax, 0xca; syscall; ret; 
0x000000000011fcb4: mov eax, 0xd5; syscall; cmp rax, -0xfff; jae 0x11fcc4; ret; 
0x0000000000118cf7: mov eax, 0xd8; syscall; cmp rax, -0xfff; jae 0x118d07; ret; 
0x00000000001205a4: mov eax, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de2b4: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x0000000000121377: mov eax, 0xdc; syscall; cmp rax, -0x1000; ja 0x121390; ret; 
0x000000000004814f: mov eax, 0xdeece66d; add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000015383a: mov eax, 0xe0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000dd11e: mov eax, 0xe3; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x000000000011fb84: mov eax, 0xe4; syscall; ret; 
0x000000000011f643: mov eax, 0xe8; syscall; cmp rax, -0x1000; ja 0x11f6b0; ret; 
0x000000000011fd17: mov eax, 0xe9; syscall; cmp rax, -0xfff; jae 0x11fd27; ret; 
0x0000000000054efa: mov eax, 0xe; syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x0000000000120294: mov eax, 0xea; syscall; cmp rax, -0xfff; jae 0x1202a4; ret; 
0x0000000000116cc4: mov eax, 0xeb; syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x000000000013f974: mov eax, 0xf000004; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e2ce6: mov eax, 0xf7; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x0000000000102a09: mov eax, 0xf; cmp dx, 2; je 0x102a18; ret; 
0x00000000000d422d: mov eax, 0xfa89051e; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x00000000000e5018: mov eax, 0xfc17; ret; 
0x00000000000c8567: mov eax, 0xfd83949; xchg ebx, eax; ret; 
0x000000000011fdd4: mov eax, 0xfd; syscall; cmp rax, -0xfff; jae 0x11fde4; ret; 
0x000000000011fda4: mov eax, 0xfe; syscall; cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x00000000000e5148: mov eax, 0xff; ret; 
0x000000000011fe34: mov eax, 0xff; syscall; cmp rax, -0xfff; jae 0x11fe44; ret; 
0x00000000000e4fc7: mov eax, 0xfffa; ret; 
0x0000000000041b65: mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000057c10: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057ddd: mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000160fe9: mov eax, 0xfffffffe; ret; 
0x0000000000043bda: mov eax, 0xfffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000013bed6: mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000001028c7: mov eax, 0xffffffff; cmp dword ptr [rdi + 4], edx; ja 0x1028d7; setne al; movzx eax, al; ret; 
0x0000000000088038: mov eax, 0xffffffff; cmp rax, rcx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000000dd053: mov eax, 0xffffffff; endbr64; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000015d17a: mov eax, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x000000000010288a: mov eax, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000008542d: mov eax, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000054db1: mov eax, 0xffffffff; mov eax, r8d; ret; 
0x000000000013cb61: mov eax, 0xffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000013b751: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000004653e: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x00000000000875b9: mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x00000000000412be: mov eax, 0xffffffff; pop rbp; ret; 
0x000000000008a0d1: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000832ec: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000008e663: mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000246f6: mov eax, 0xffffffff; ret; 
0x000000000008d2ee: mov eax, 0xffffffff; test edx, edx; je 0x8d300; ret; 
0x000000000008d74e: mov eax, 0xffffffff; test edx, edx; je 0x8d760; ret; 
0x00000000001278ff: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000dcfbe: mov eax, 1; add rsp, 8; ret; 
0x0000000000118ede: mov eax, 1; call 0x61e20; mov rax, r12; pop r12; ret; 
0x00000000000cf190: mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf16e: mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x0000000000192e20: mov eax, 1; jg 0x192e30; neg eax; ret; 
0x00000000000cf080: mov eax, 1; jg 0xcf089; neg eax; ret; 
0x000000000018fbe6: mov eax, 1; jl 0x18fbf0; neg eax; ret; 
0x00000000000ec440: mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000001576fc: mov eax, 1; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x0000000000057c2d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000011755a: mov eax, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000008cd41: mov eax, 1; mov eax, r8d; ret; 
0x0000000000057b55: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000048195: mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001509e4: mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000926b9: mov eax, 1; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000014d29e: mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001500e6: mov eax, 1; movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001509f6: mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509d6: mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000117593: mov eax, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000060f09: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000087594: mov eax, 1; pop rbp; pop r12; ret; 
0x000000000009eb13: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832ca: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000010c790: mov eax, 1; pop rbx; ret; 
0x000000000005562e: mov eax, 1; ret; 
0x0000000000043b89: mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000010e290: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x0000000000113894: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x1138a8; ret; 
0x00000000000e5214: mov eax, 1; test edi, edi; js 0xe5220; ret; 
0x000000000011d7f4: mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000057d54: mov eax, 2; ret; 
0x000000000013c38c: mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x00000000000dcff7: mov eax, 3; cmovne eax, edx; ret; 
0x00000000000cfb41: mov eax, 3; ret; 
0x000000000010ea30: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x10ea80; ret; 
0x0000000000113564: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x113578; ret; 
0x000000000013a7c6: mov eax, 3; syscall; ret; 
0x00000000000cfb51: mov eax, 4; ret; 
0x000000000010d6d3: mov eax, 4; syscall; cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x000000000012d1af: mov eax, 5; pop r12; pop rbp; ret; 
0x00000000001071d7: mov eax, 5; pop rbp; pop r12; ret; 
0x00000000000cfb61: mov eax, 5; ret; 
0x000000000010d732: mov eax, 5; syscall; cmp rax, -0x1000; ja 0x10d748; ret; 
0x00000000000cfb71: mov eax, 6; ret; 
0x000000000010d793: mov eax, 6; syscall; cmp rax, -0x1000; ja 0x10d7a8; ret; 
0x00000000000cfb81: mov eax, 7; ret; 
0x0000000000112b80: mov eax, 7; syscall; cmp rax, -0x1000; ja 0x112be0; ret; 
0x00000000000bc1e8: mov eax, 8; pop rbx; ret; 
0x000000000010e324: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000010c729: mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000094c46: mov eax, dword ptr [0x10]; ret; 
0x0000000000125529: mov eax, dword ptr [r12]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150120: mov eax, dword ptr [r8 + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150180: mov eax, dword ptr [r8 + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150150: mov eax, dword ptr [r8 + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000014d370: mov eax, dword ptr [r8 + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000bc79a: mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x000000000014d310: mov eax, dword ptr [r8]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000150a77: mov eax, dword ptr [rax + 0x10]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000047578: mov eax, dword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001221f8: mov eax, dword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e8: mov eax, dword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000014132b: mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141338; ret; 
0x0000000000114e5c: mov eax, dword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x000000000011d251: mov eax, dword ptr [rax + 0x1c8]; ret; 
0x000000000012d080: mov eax, dword ptr [rax + 0x30]; ret; 
0x0000000000122adb: mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011cfa0: mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x000000000014fff1: mov eax, dword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000034486: mov eax, dword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000150121: mov eax, dword ptr [rax + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000034296: mov eax, dword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000150931: mov eax, dword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150181: mov eax, dword ptr [rax + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150151: mov eax, dword ptr [rax + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000034266: mov eax, dword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003453f: mov eax, dword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000473ce: mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000092720: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x000000000014d1b4: mov eax, dword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000328f2: mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000014d371: mov eax, dword ptr [rax + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000150aaf: mov eax, dword ptr [rax + 0xc]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000011d22b: mov eax, dword ptr [rax + 8]; ret; 
0x000000000009e84b: mov eax, dword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x00000000000bc79b: mov eax, dword ptr [rax + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x0000000000055848: mov eax, dword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x0000000000122c0a: mov eax, dword ptr [rax + rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x0000000000034269: mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003445b: mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000033d63: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000123498: mov eax, dword ptr [rax + rdx]; shr eax, cl; and eax, 1; ret; 
0x0000000000122e59: mov eax, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x00000000000d0e92: mov eax, dword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb2: mov eax, dword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x0000000000150a37: mov eax, dword ptr [rax]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000010dac5: mov eax, dword ptr [rax]; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x0000000000048308: mov eax, dword ptr [rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x000000000014d311: mov eax, dword ptr [rax]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000328f0: mov eax, dword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000088043: mov eax, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000000fec9c: mov eax, dword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000871a9: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034483: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034293: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034263: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000033d60: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328ed: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000034480: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034290: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034260: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341c0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034180: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034100: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034140: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034120: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000034240: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340c0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000034160: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000034080: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012d0d4: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000000473cb: mov eax, dword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000014141d: mov eax, dword ptr [rax]; ret; 
0x0000000000093549: mov eax, dword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x0000000000112b62: mov eax, dword ptr [rbp + 0x10]; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ee330: mov eax, dword ptr [rbp + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034cb0: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000578b6: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x0000000000127c5f: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127caf: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cdd5: mov eax, dword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000008b6f8: mov eax, dword ptr [rbx + 0x28]; sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000008cdcd: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x0000000000127c0f: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015345e: mov eax, dword ptr [rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x000000000017ad74: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a69: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000017ad55: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a4a: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000017ad86: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176a36: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ae07: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a77: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ada6: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176a46: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017ae27: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a97: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017adc6: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x00000000000b3aed: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017d08f: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ae47: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176ab7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017ade6: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x00000000000b3b0d: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017acd7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769a7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000b3ace: mov eax, dword ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000009c1f9: mov eax, dword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000018013a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000bc73d: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x0000000000181a12: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000008774f: mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017ad30: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000017ad40: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000000b3a25: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000017ad50: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a45: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000017ad70: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000000b3a65: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000000b3a15: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000017d13c: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017ad81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176a31: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ada1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176a41: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017adc1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176a51: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017ade1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176a61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017ae01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a71: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ae21: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a91: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ae41: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176ab1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017acd1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000176951: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000017ad01: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017ad11: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f6: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b39e6: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000010d294: mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000cef8b: mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x000000000014ffe5: mov eax, dword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150925: mov eax, dword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000093564: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000009358c: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000087e9e: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000087eb0: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000010d284: mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000cefa0: mov eax, dword ptr [rdi + 0x14]; cmp eax, dword ptr [rsi + 0x14]; jne 0xcf080; ret; 
0x00000000000cefb5: mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000918ec: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000001576c5: mov eax, dword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000cefd0: mov eax, dword ptr [rdi + 0x1c]; cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cefeb: mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x0000000000148530: mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000de295: mov eax, dword ptr [rdi + 0x20]; ret; 
0x00000000000cf000: mov eax, dword ptr [rdi + 0x24]; cmp eax, dword ptr [rsi + 0x24]; jne 0xcf080; ret; 
0x00000000000cf015: mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x0000000000157854: mov eax, dword ptr [rdi + 0x28]; cmp eax, edx; jae 0x157868; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000093e95: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000095903: mov eax, dword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000157b44: mov eax, dword ptr [rdi + 0x28]; ret; 
0x000000000008ce29: mov eax, dword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000cf020: mov eax, dword ptr [rdi + 0x2c]; cmp eax, dword ptr [rsi + 0x2c]; jne 0xcf080; ret; 
0x00000000000cf03b: mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000001484d1: mov eax, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x00000000000cf050: mov eax, dword ptr [rdi + 0x34]; cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x00000000000cf065: mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000cf070: mov eax, dword ptr [rdi + 0x3c]; cmp eax, dword ptr [rsi + 0x3c]; jne 0xcf080; ret; 
0x0000000000127875: mov eax, dword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127890; mov eax, 1; ret; 
0x000000000008ccf9: mov eax, dword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000918bf: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000093855: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000008aeac: mov eax, dword ptr [rdi + 0x70]; test eax, eax; js 0x8aeb8; ret; 
0x0000000000087495: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000cef70: mov eax, dword ptr [rdi + 0xc]; cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x00000000000cef40: mov eax, dword ptr [rdi + 4]; cmp eax, dword ptr [rsi + 4]; jne 0xcf080; ret; 
0x000000000010c9a4: mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000001138c4: mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000113953: mov eax, dword ptr [rdi + 8]; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000094d14: mov eax, dword ptr [rdi + 8]; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000cef55: mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x000000000009397b: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x0000000000094d54: mov eax, dword ptr [rdi + 8]; sar eax, 1; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012d0f4: mov eax, dword ptr [rdi + 8]; test eax, eax; jne 0x12d108; cmp qword ptr [rdi], 0; je 0x12d110; ret; 
0x0000000000192ce7: mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192e20; ret; 
0x0000000000192d00: mov eax, dword ptr [rdi - 0xc]; cmp eax, dword ptr [rsi - 0xc]; jne 0x192e20; ret; 
0x0000000000192d30: mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; ret; 
0x0000000000192e10: mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; xor eax, eax; ret; 
0x000000000018e384: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x00000000001925dc: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x1927f0; xor eax, eax; ret; 
0x000000000018e5e3: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x0000000000192d15: mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x000000000018e8e1: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018fab1: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000018e357: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f987: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000008cd84: mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x000000000008cd54: mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x00000000000cef2b: mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x00000000000951f5: mov eax, dword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e45: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095255: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e85: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000094da4: mov eax, dword ptr [rdi]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000121491: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000093556: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000095225: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b5: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095245: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea5: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e35: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e25: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x00000000000de2e4: mov eax, dword ptr [rdi]; ret; 
0x000000000008def4: mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x000000000008df04: mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x000000000014e028: mov eax, dword ptr [rdi]; test eax, eax; jne 0x14e030; ret; 
0x0000000000154728: mov eax, dword ptr [rdi]; test eax, eax; jne 0x154730; ret; 
0x00000000000885dc: mov eax, dword ptr [rdx + 0x20]; cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce16: mov eax, dword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce6: mov eax, dword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000008a71e: mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000001133e3: mov eax, dword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000102a41: mov eax, dword ptr [rdx + 8]; ret; 
0x00000000000341f7: mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000aedf6: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001370f9: mov eax, dword ptr [rdx + rax*8 + 4]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000033dfc: mov eax, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000033d9a: mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x00000000000328b1: mov eax, dword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000150199: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x0000000000150169: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d3b9: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d389: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000012218a: mov eax, dword ptr [rdx]; cmp eax, -1; je 0x122200; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x000000000011f9d6: mov eax, dword ptr [rdx]; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x0000000000062f28: mov eax, dword ptr [rdx]; cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000000150a91: mov eax, dword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000150999: mov eax, dword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000085590: mov eax, dword ptr [rdx]; ret; 
0x0000000000150139: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d359: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000de12a: mov eax, dword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd149: mov eax, dword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000d1dbc: mov eax, dword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d0171: mov eax, dword ptr [rip + 0x11bcf9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0151: mov eax, dword ptr [rip + 0x11bd19]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d0051: mov eax, dword ptr [rip + 0x11be19]; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000009f825: mov eax, dword ptr [rip + 0x14c635]; lea rdx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f235: mov eax, dword ptr [rip + 0x14cc25]; lea rdx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e955: mov eax, dword ptr [rip + 0x14d515]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009f854: mov eax, dword ptr [rip + 0x151c36]; test eax, eax; jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009a0c9: mov eax, dword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009a0bf: mov eax, dword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009942e: mov eax, dword ptr [rip + 0x152a3c]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000098091: mov eax, dword ptr [rip + 0x153dd9]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000961cf: mov eax, dword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000961c5: mov eax, dword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x0000000000095194: mov eax, dword ptr [rip + 0x15711e]; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000093835: mov eax, dword ptr [rip + 0x159d65]; ret; 
0x000000000008d341: mov eax, dword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb9: mov eax, dword ptr [rip + 0x160fb1]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000084731: mov eax, dword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000048331: mov eax, dword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000048301: mov eax, dword ptr [rip + 0x1a3b69]; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000047c59: mov eax, dword ptr [rip + 0x1a4211]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000004407a: mov eax, dword ptr [rip + 0x1a7df0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f3a: mov eax, dword ptr [rip + 0x1a7f30]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df1: mov eax, dword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000440a4: mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x0000000000044094: mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x0000000000043d31: mov eax, dword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c55: mov eax, dword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000043c39: mov eax, dword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bf1: mov eax, dword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ba1: mov eax, dword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b52: mov eax, dword ptr [rip + 0x1a8318]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043af3: mov eax, dword ptr [rip + 0x1a8377]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000432a1: mov eax, dword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043061: mov eax, dword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f21: mov eax, dword ptr [rip + 0x1a8f49]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000042542: mov eax, dword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004221c: mov eax, dword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e5b: mov eax, dword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000412b1: mov eax, dword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000041251: mov eax, dword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000344c5: mov eax, dword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e5: mov eax, dword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d55: mov eax, dword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000033d11: mov eax, dword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x00000000000328e5: mov eax, dword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a5: mov eax, dword ptr [rip + 0x1be3bd]; ret; 
0x0000000000026f58: mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x00000000000246e9: mov eax, dword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000024405: mov eax, dword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab5: mov eax, dword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa5: mov eax, dword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163655: mov eax, dword ptr [rip + 0x88815]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162ff5: mov eax, dword ptr [rip + 0x88e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162fd5: mov eax, dword ptr [rip + 0x88e95]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f95: mov eax, dword ptr [rip + 0x88ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f75: mov eax, dword ptr [rip + 0x88ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f55: mov eax, dword ptr [rip + 0x88f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f35: mov eax, dword ptr [rip + 0x88f35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160ee5: mov eax, dword ptr [rip + 0x8af85]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000160cf1: mov eax, dword ptr [rip + 0x8b179]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015cc65: mov eax, dword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153395: mov eax, dword ptr [rip + 0x98a05]; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001471b4: mov eax, dword ptr [rip + 0xa99c2]; test eax, eax; je 0x1471c0; ret; 
0x0000000000141415: mov eax, dword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000143195: mov eax, dword ptr [rip + 0xad885]; test rax, rax; jne 0x1431a8; ret; 
0x0000000000141d5d: mov eax, dword ptr [rip + 0xaecbd]; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x0000000000140ed8: mov eax, dword ptr [rip + 0xaf8e6]; test eax, eax; je 0x140ee8; ret; 
0x00000000001300a5: mov eax, dword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x000000000012f631: mov eax, dword ptr [rip + 0xbc839]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000122ad5: mov eax, dword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001202c5: mov eax, dword ptr [rip + 0xcbba5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001221f1: mov eax, dword ptr [rip + 0xcd881]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e1: mov eax, dword ptr [rip + 0xcd891]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011d231: mov eax, dword ptr [rip + 0xcec39]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011c709: mov eax, dword ptr [rip + 0xcf761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001199f1: mov eax, dword ptr [rip + 0xd2479]; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001199bc: mov eax, dword ptr [rip + 0xd24ae]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011917e: mov eax, dword ptr [rip + 0xd2cec]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118b19: mov eax, dword ptr [rip + 0xd3351]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118924: mov eax, dword ptr [rip + 0xd3a1e]; test edi, edi; je 0x118934; mov dword ptr [rip + 0xd3a14], edi; ret; 
0x000000000011936a: mov eax, dword ptr [rip + 0xd44c0]; pop rcx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118e15: mov eax, dword ptr [rip + 0xd4a0d]; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000116f68: mov eax, dword ptr [rip + 0xd4f02]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000115991: mov eax, dword ptr [rip + 0xd64d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115969: mov eax, dword ptr [rip + 0xd6501]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115825: mov eax, dword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114e55: mov eax, dword ptr [rip + 0xd7005]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x00000000001145a5: mov eax, dword ptr [rip + 0xd78c5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144e9: mov eax, dword ptr [rip + 0xd7981]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001144d5: mov eax, dword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000011397c: mov eax, dword ptr [rip + 0xd84ee]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011391b: mov eax, dword ptr [rip + 0xd854f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000113369: mov eax, dword ptr [rip + 0xd8b01]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000113333: mov eax, dword ptr [rip + 0xd8b37]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b49: mov eax, dword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000112a11: mov eax, dword ptr [rip + 0xd9459]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x0000000000115dae: mov eax, dword ptr [rip + 0xd98bc]; mov qword ptr [rip + 0xd98e5], rax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000110fc1: mov eax, dword ptr [rip + 0xdaea9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010de59: mov eax, dword ptr [rip + 0xde011]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010de41: mov eax, dword ptr [rip + 0xde029]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dde5: mov eax, dword ptr [rip + 0xde085]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010dc09: mov eax, dword ptr [rip + 0xde261]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba9: mov eax, dword ptr [rip + 0xde2c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db49: mov eax, dword ptr [rip + 0xde321]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dabe: mov eax, dword ptr [rip + 0xde3ac]; mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x000000000010d7c1: mov eax, dword ptr [rip + 0xde6a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d761: mov eax, dword ptr [rip + 0xde709]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d701: mov eax, dword ptr [rip + 0xde769]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d465: mov eax, dword ptr [rip + 0xde9f5]; lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000fec95: mov eax, dword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x0000000000123c11: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123b89: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000123b01: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001238c1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001239e1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123691: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123951: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123721: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000001237a1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000123a71: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000123601: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034435: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000034415: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000343f5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034375: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000343b5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000034315: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034395: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000034355: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000342d5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034335: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000343d5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000342f5: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034455: mov eax, dword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034465: mov eax, dword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000328d1: mov eax, dword ptr [rsi + rax*8 + 0x80]; ret; 
0x000000000012efe6: mov eax, dword ptr [rsi]; mov dword ptr [r8 + 4], eax; test eax, eax; jne 0x12ef99; mov rax, rdi; ret; 
0x000000000010d334: mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x00000000000e2c93: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000a8b01: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x0000000000041b74: mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000113474: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000015160f: mov eax, dword ptr [rsp + 0x28]; push rax; call 0x151330; add rsp, 0x28; ret; 
0x000000000015fc22: mov eax, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x0000000000153c6e: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153cde: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d4e: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153daf: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e13: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e7e: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f01: mov eax, dword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x00000000000e2e73: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2d4d: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151ff: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x000000000011f4c9: mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x0000000000120e1c: mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000157a04: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000349e6: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000048275: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000113278: mov eax, dword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000001211f1: mov eax, dword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000042614: mov eax, dword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x00000000000a8b60: mov eax, dword ptr [rsp - 0x10]; mov dword ptr [rdi], eax; movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b78: mov eax, dword ptr [rsp - 0x18]; mov dword ptr [rdi], eax; movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000010ebf6: mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000120590: mov eax, dword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000010c3e4: mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120656: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x0000000000196f00: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122b37: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b98: mov eax, dword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000014e784: mov eax, dword ptr [rsp]; jne 0x14e7ea; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001414ed: mov eax, dword ptr [rsp]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000013caa3: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x000000000012552a: mov eax, dword ptr [rsp]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000125528: mov eax, dword ptr fs:[r12]; pop rbx; pop rbp; pop r12; ret; 
0x000000000010dac4: mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x0000000000048307: mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x000000000011f9d5: mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x0000000000062f27: mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x62f56; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x0000000000046c1a: mov eax, eax; add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000004301f: mov eax, eax; add rsp, 0x118; ret; 
0x000000000009cf78: mov eax, eax; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x00000000000d4a90: mov eax, eax; add rsp, 8; ret; 
0x0000000000062f0c: mov eax, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x000000000009ef1c: mov eax, eax; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000013c7fa: mov eax, eax; mov byte ptr [r8 + 2], 0; ret; 
0x000000000013c55c: mov eax, eax; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000001170f6: mov eax, eax; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000085414: mov eax, eax; mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000148558: mov eax, eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000011f9f8: mov eax, eax; mov eax, r8d; ret; 
0x000000000015d187: mov eax, eax; mov qword ptr [rdx], 0; ret; 
0x000000000014d349: mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000153519: mov eax, eax; mov rax, r8; pop rbx; ret; 
0x00000000000627a4: mov eax, eax; mov rax, rbx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000047ce9: mov eax, eax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000dfb26: mov eax, eax; pop r12; pop r13; pop r14; ret; 
0x000000000009a49b: mov eax, eax; pop r12; pop r13; ret; 
0x000000000008b649: mov eax, eax; pop r12; ret; 
0x000000000009a507: mov eax, eax; pop r13; ret; 
0x0000000000084563: mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000013b951: mov eax, eax; pop rbp; pop r12; pop r13; ret; 
0x000000000002f706: mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000995a4: mov eax, eax; pop rbp; ret; 
0x000000000009cf7f: mov eax, eax; pop rbx; pop r12; ret; 
0x0000000000046600: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046d31: mov eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046c8c: mov eax, eax; pop rbx; pop rbp; ret; 
0x00000000000438f0: mov eax, eax; pop rbx; ret; 
0x0000000000033da2: mov eax, eax; ret; 
0x000000000018d604: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000188c51: mov eax, eax; vzeroupper; ret; 
0x000000000009efc6: mov eax, ebp; mov rdx, r12; pop r12; pop r13; ret; 
0x00000000001419f1: mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000009f9e9: mov eax, ebp; pop r12; pop r13; ret; 
0x00000000000828ce: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000bcc01: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x00000000000bcba6: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008f50e: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000055bb3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000008d93f: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094669: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x000000000011ce6b: mov eax, ebx; mov rax, r8; pop rbx; ret; 
0x00000000000a2c3a: mov eax, ebx; pop rbx; cmovne rax, rdi; ret; 
0x00000000000c9f06: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008d884: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000089dfe: mov eax, ebx; pop rbx; pop rbp; ret; 
0x0000000000113b33: mov eax, ebx; pop rbx; ret; 
0x0000000000041244: mov eax, ebx; ret; 
0x00000000000627a7: mov eax, ebx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000055a7b: mov eax, ecx; adc eax, eax; ret; 
0x0000000000043233: mov eax, ecx; add rsp, 0x148; ret; 
0x0000000000113cb0: mov eax, ecx; add rsp, 0x38; ret; 
0x0000000000087f21: mov eax, ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000118954: mov eax, ecx; mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118966; ret; 
0x0000000000038ca6: mov eax, ecx; pop r12; ret; 
0x000000000007a178: mov eax, ecx; pop r14; ret; 
0x000000000007a0c7: mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000038c78: mov eax, ecx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c6b4b: mov eax, ecx; pop rbx; ret; 
0x00000000000bc110: mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000000bc15b: mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000086408: mov eax, ecx; ret; 
0x0000000000052946: mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x00000000000342b4: mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fd28: mov eax, edi; and eax, 0xffffff; ret; 
0x000000000012fce4: mov eax, edi; bswap eax; ret; 
0x00000000000472f4: mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret; 
0x0000000000047345: mov eax, edi; cqo; idiv rsi; ret; 
0x0000000000047305: mov eax, edi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x00000000001170e9: mov eax, edi; mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd867b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000117074: mov eax, edi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x000000000005b6a4: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x000000000011f0c5: mov eax, edi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000012fd42: mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000095651: mov eax, edi; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x00000000000a8eed: mov eax, edi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b522: mov eax, edi; ret; 
0x000000000012fcf4: mov eax, edi; rol ax, 8; ret; 
0x000000000012fc0e: mov eax, edi; sar rax, 6; ret; 
0x000000000012fdb8: mov eax, edi; shr eax, 0x18; ret; 
0x000000000011f09e: mov eax, edi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001785cf: mov eax, edi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x00000000001788cd: mov eax, edi; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x00000000001788ed: mov eax, edi; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x000000000017890d: mov eax, edi; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000017892f: mov eax, edi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017894f: mov eax, edi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017896f: mov eax, edi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x00000000001787c5: mov eax, edi; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x00000000001787e7: mov eax, edi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000017880d: mov eax, edi; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x0000000000178825: mov eax, edi; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017884b: mov eax, edi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017886d: mov eax, edi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017888b: mov eax, edi; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x0000000000178567: mov eax, edi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x00000000001788ad: mov eax, edi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000018ab21: mov eax, edi; vzeroupper; ret; 
0x00000000000bc12e: mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000012965c: mov eax, edx; cmove eax, ecx; ret; 
0x00000000000a1ff4: mov eax, edx; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013c6ef: mov eax, edx; cmp eax, esi; jb 0x13c6dd; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000013c64e: mov eax, edx; cmp esi, eax; ja 0x13c63c; mov eax, 0xffffffff; ret; 
0x000000000013cbcc: mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x000000000015fd1b: mov eax, edx; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000018886c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000013cb53: mov eax, edx; movsxd rdx, ecx; ret; 
0x0000000000056af5: mov eax, edx; pop rbx; ret; 
0x00000000000440f9: mov eax, edx; ret; 
0x00000000000bc212: mov eax, edx; xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000001500bc: mov eax, esi; mov dword ptr [r8 + 0x18], 1; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000001509b4: mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d28c: mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x0000000000107282: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000134a92: mov eax, esi; pop rbx; ret; 
0x0000000000041033: mov eax, esp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000085af5: mov eax, esp; pop r12; pop r13; pop r14; ret; 
0x00000000000a0399: mov eax, esp; pop r12; pop r13; ret; 
0x0000000000034b49: mov eax, esp; pop r12; ret; 
0x0000000000085a13: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000002ff34: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x000000000008e246: mov eax, esp; pop rbp; pop r12; pop r14; ret; 
0x00000000000477a3: mov eax, esp; pop rbp; pop r12; ret; 
0x0000000000117be5: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000005b935: mov eax, esp; pop rbx; pop r12; ret; 
0x0000000000080ad1: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22c: mov eax, esp; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000034aab: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000011942f: mov eax, esp; pop rdx; pop r12; ret; 
0x000000000013f1f9: mov eax, r10d; ret; 
0x0000000000094668: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x94674; ret; 
0x0000000000113b32: mov eax, r11d; pop rbx; ret; 
0x0000000000085af4: mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x000000000009d4e6: mov eax, r12d; pop r12; ret; 
0x0000000000085a12: mov eax, r12d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001259a7: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000014e00d: mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000117be4: mov eax, r12d; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000005b934: mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000000868b2: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000044155: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e2fcf: mov eax, r13d; pop rbp; pop r12; pop r13; ret; 
0x0000000000114f8a: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000015c6ca: mov eax, r14d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000004301e: mov eax, r8d; add rsp, 0x118; ret; 
0x000000000011755f: mov eax, r8d; add rsp, 8; ret; 
0x000000000013c55b: mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x0000000000085413: mov eax, r8d; mov dword ptr [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000148557: mov eax, r8d; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000015d186: mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000047ce8: mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000dfb25: mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x000000000008b648: mov eax, r8d; pop r12; ret; 
0x0000000000084562: mov eax, r8d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000150540: mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x000000000002f705: mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000137c20: mov eax, r8d; pop rbp; ret; 
0x00000000000465ff: mov eax, r8d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046d30: mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046e6f: mov eax, r8d; pop rbx; pop rbp; ret; 
0x00000000000438ef: mov eax, r8d; pop rbx; ret; 
0x0000000000033da1: mov eax, r8d; ret; 
0x0000000000043232: mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000113caf: mov eax, r9d; add rsp, 0x38; ret; 
0x00000000000c6b4a: mov eax, r9d; pop rbx; ret; 
0x0000000000086407: mov eax, r9d; ret; 
0x00000000000938fe: mov ebp, 0x10015ae; ret; 
0x0000000000060f07: mov ebp, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000184da1: mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret; 
0x0000000000184db1: mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret; 
0x00000000000ac661: mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac671: mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x00000000000ac651: mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000141d5f: mov ebp, 0x48000aec; test eax, eax; je 0x141d70; add rsp, 8; ret; 
0x000000000009f89f: mov ebp, 0x480014f6; mov dword ptr [rip + 0x14f69e], eax; add rsp, 8; ret; 
0x00000000001300a8: mov ebp, 0x4864000b; add eax, dword ptr [0]; ret; 
0x0000000000184dc1: mov ebp, 0x60c083c0; add rax, rdi; ret; 
0x0000000000026841: mov ebp, 0x8948ffff; ret; 
0x00000000000d0154: mov ebp, 0xc7640011; add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000120088: mov ebp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ac681: mov ebp, 0xea8348c0; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184e8b: mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x00000000000ac777: mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000ac5a7: mov ebp, 0xf80148c0; ret; 
0x0000000000184cb0: mov ebp, 0xf80148c0; vzeroupper; ret; 
0x00000000000b1bac: mov ebp, 0xf80148c6; ret; 
0x000000000012db70: mov ebp, ds; add eax, 0x158d4800; adc eax, 0x480005dd; cmove eax, edx; ret; 
0x00000000000696a8: mov ebp, ds; sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000014e7e9: mov ebp, eax; movabs eax, dword ptr [0xfa1e0ff390fffe14]; ret; 
0x0000000000111b79: mov ebx, 0x31000a42; shr al, 0x7c; ret; 
0x0000000000052ad9: mov ebx, 0x39480019; ret; 
0x00000000000bcd61: mov ebx, 0x48000d5a; cmovne eax, edx; ret; 
0x00000000000a33b4: mov ebx, 0x4bb; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000134721: mov ebx, 0x6401000b; mov dword ptr [r8], r9d; add rsp, 0x18; ret; 
0x0000000000038db4: mov ebx, 0x850f5f3c; test byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000094608: mov ebx, 0xafb8341; je 0x94610; ret; 
0x00000000001543b0: mov ebx, 0xbc0f48eb; ret; 
0x000000000014b10f: mov ebx, 0xc0850000; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000001202a8: mov ebx, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120354: mov ebx, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004123b: mov ebx, dword ptr [rax + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x00000000000e3669: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000004c951: mov ebx, dword ptr [rdx - 0x7cb80000]; ret; 
0x0000000000153456: mov ebx, dword ptr [rip + 0x98944]; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x0000000000167b21: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b05: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001199db: mov ebx, edi; mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000119915: mov ebx, esi; je 0x119920; pop rbx; ret; 
0x00000000001333a2: mov ecx, 0x1000bcd; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000005b4cb: mov ecx, 0x3a8; mov rsp, rdx; ret; 
0x0000000000118c50: mov ecx, 0x448bfff7; and al, 8; add rsp, 0x28; ret; 
0x00000000000a0403: mov ecx, 0x480000ba; cmove eax, edx; ret; 
0x000000000009f6a3: mov ecx, 0x48000126; cmove eax, edx; ret; 
0x0000000000199073: mov ecx, 0x48ffe892; mov dword ptr [rip + 0x5799e], 0; pop rbx; ret; 
0x00000000000412b3: mov ecx, 0x64001aab; mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000001348fc: mov ecx, 0x6401000b; mov dword ptr [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000a05a6: mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x0000000000120498: mov ecx, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f6b3: mov ecx, 0xf7000cc7; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000434b3: mov ecx, 0xf7001a89; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000010282a: mov ecx, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000c6b45: mov ecx, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x000000000010263d: mov ecx, 1; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000102619: mov ecx, 1; push 0; call 0x102520; add rsp, 0x18; ret; 
0x0000000000086e56: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000012d2e8: mov ecx, dword ptr [rbp - 8]; xor rcx, qword ptr fs:[0x28]; jne 0x12d3cd; leave; ret; 
0x000000000012331c: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123328; ret; 
0x0000000000123385: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c6c: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cc9: mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123cd8; ret; 
0x000000000018fd93: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000018fd80: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000018fd6e: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000121485: mov ecx, dword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121490; ret; 
0x00000000000bcb3b: mov ecx, dword ptr [rdi + r8*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x00000000000bcb3c: mov ecx, dword ptr [rdi + rax*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x000000000018c546: mov ecx, dword ptr [rdi + rdx + 0x20]; cmp ecx, dword ptr [rsi + rdx + 0x20]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c566: mov ecx, dword ptr [rdi + rdx + 0x40]; cmp ecx, dword ptr [rsi + rdx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c586: mov ecx, dword ptr [rdi + rdx + 0x60]; cmp ecx, dword ptr [rsi + rdx + 0x60]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c8ac: mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c9d3: mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018cd92: mov ecx, dword ptr [rdi]; cmp ecx, dword ptr [rsi]; jne 0x18c9a6; vzeroupper; ret; 
0x0000000000055062: mov ecx, dword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x0000000000102a37: mov ecx, dword ptr [rdx + 4]; and ecx, esi; cmp ecx, dword ptr [rax - 0xc]; jne 0x102a30; mov eax, dword ptr [rdx + 8]; ret; 
0x00000000000aedf3: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000e44a5: mov ecx, dword ptr [rip + 0x1079c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4475: mov ecx, dword ptr [rip + 0x1079f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4445: mov ecx, dword ptr [rip + 0x107a25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4415: mov ecx, dword ptr [rip + 0x107a55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b5: mov ecx, dword ptr [rip + 0x107ab5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4385: mov ecx, dword ptr [rip + 0x107ae5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4135: mov ecx, dword ptr [rip + 0x107d35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3185: mov ecx, dword ptr [rip + 0x108ce5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2da5: mov ecx, dword ptr [rip + 0x1090c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b55: mov ecx, dword ptr [rip + 0x109315]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41f5: mov ecx, dword ptr [rip + 0x117c75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41c5: mov ecx, dword ptr [rip + 0x117ca5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055579: mov ecx, dword ptr [rip + 0x1968f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000439d5: mov ecx, dword ptr [rip + 0x1a8495]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000433e5: mov ecx, dword ptr [rip + 0x1a8a85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001132e4: mov ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011328c: mov ecx, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011336c: mov ecx, dword ptr [rip + 0xc76400]; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000120a08: mov ecx, dword ptr [rip + 0xcb462]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001209d5: mov ecx, dword ptr [rip + 0xcb495]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001209a5: mov ecx, dword ptr [rip + 0xcb4c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120978: mov ecx, dword ptr [rip + 0xcb4f2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001204f5: mov ecx, dword ptr [rip + 0xcb975]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001204c8: mov ecx, dword ptr [rip + 0xcb9a2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120495: mov ecx, dword ptr [rip + 0xcb9d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120465: mov ecx, dword ptr [rip + 0xcba05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120395: mov ecx, dword ptr [rip + 0xcbad5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202a5: mov ecx, dword ptr [rip + 0xcbbc5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120265: mov ecx, dword ptr [rip + 0xcbc05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120235: mov ecx, dword ptr [rip + 0xcbc35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120205: mov ecx, dword ptr [rip + 0xcbc65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201d8: mov ecx, dword ptr [rip + 0xcbc92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201a8: mov ecx, dword ptr [rip + 0xcbcc2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120175: mov ecx, dword ptr [rip + 0xcbcf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120148: mov ecx, dword ptr [rip + 0xcbd22]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120115: mov ecx, dword ptr [rip + 0xcbd55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200e5: mov ecx, dword ptr [rip + 0xcbd85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200b8: mov ecx, dword ptr [rip + 0xcbdb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120085: mov ecx, dword ptr [rip + 0xcbde5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120055: mov ecx, dword ptr [rip + 0xcbe15]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120025: mov ecx, dword ptr [rip + 0xcbe45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fff5: mov ecx, dword ptr [rip + 0xcbe75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffc8: mov ecx, dword ptr [rip + 0xcbea2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff98: mov ecx, dword ptr [rip + 0xcbed2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff68: mov ecx, dword ptr [rip + 0xcbf02]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff35: mov ecx, dword ptr [rip + 0xcbf35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff05: mov ecx, dword ptr [rip + 0xcbf65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fed8: mov ecx, dword ptr [rip + 0xcbf92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fea8: mov ecx, dword ptr [rip + 0xcbfc2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe75: mov ecx, dword ptr [rip + 0xcbff5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe45: mov ecx, dword ptr [rip + 0xcc025]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe15: mov ecx, dword ptr [rip + 0xcc055]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fde5: mov ecx, dword ptr [rip + 0xcc085]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fdb5: mov ecx, dword ptr [rip + 0xcc0b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd88: mov ecx, dword ptr [rip + 0xcc0e2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd55: mov ecx, dword ptr [rip + 0xcc115]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd28: mov ecx, dword ptr [rip + 0xcc142]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcf5: mov ecx, dword ptr [rip + 0xcc175]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcc5: mov ecx, dword ptr [rip + 0xcc1a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc95: mov ecx, dword ptr [rip + 0xcc1d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc65: mov ecx, dword ptr [rip + 0xcc205]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc35: mov ecx, dword ptr [rip + 0xcc235]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc05: mov ecx, dword ptr [rip + 0xcc265]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbd5: mov ecx, dword ptr [rip + 0xcc295]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fba8: mov ecx, dword ptr [rip + 0xcc2c2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f615: mov ecx, dword ptr [rip + 0xcc855]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f5e8: mov ecx, dword ptr [rip + 0xcc882]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f555: mov ecx, dword ptr [rip + 0xcc915]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f425: mov ecx, dword ptr [rip + 0xcca45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3f5: mov ecx, dword ptr [rip + 0xcca75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f395: mov ecx, dword ptr [rip + 0xccad5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f35e: mov ecx, dword ptr [rip + 0xccb0c]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f245: mov ecx, dword ptr [rip + 0xccc25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f215: mov ecx, dword ptr [rip + 0xccc55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d1a5: mov ecx, dword ptr [rip + 0xcecc5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d178: mov ecx, dword ptr [rip + 0xcecf2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d145: mov ecx, dword ptr [rip + 0xced25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0e8: mov ecx, dword ptr [rip + 0xced82]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0b5: mov ecx, dword ptr [rip + 0xcedb5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d088: mov ecx, dword ptr [rip + 0xcede2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d058: mov ecx, dword ptr [rip + 0xcee12]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d025: mov ecx, dword ptr [rip + 0xcee45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cff5: mov ecx, dword ptr [rip + 0xcee75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfc8: mov ecx, dword ptr [rip + 0xceea2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118dc5: mov ecx, dword ptr [rip + 0xd30a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d95: mov ecx, dword ptr [rip + 0xd30d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d65: mov ecx, dword ptr [rip + 0xd3105]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d35: mov ecx, dword ptr [rip + 0xd3135]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d08: mov ecx, dword ptr [rip + 0xd3162]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118cd5: mov ecx, dword ptr [rip + 0xd3195]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ca5: mov ecx, dword ptr [rip + 0xd31c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118bd5: mov ecx, dword ptr [rip + 0xd3295]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ba5: mov ecx, dword ptr [rip + 0xd32c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118967: mov ecx, dword ptr [rip + 0xd3503]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001158b5: mov ecx, dword ptr [rip + 0xd65b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115885: mov ecx, dword ptr [rip + 0xd65e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115855: mov ecx, dword ptr [rip + 0xd6615]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115515: mov ecx, dword ptr [rip + 0xd6955]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115455: mov ecx, dword ptr [rip + 0xd6a15]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115395: mov ecx, dword ptr [rip + 0xd6ad5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115365: mov ecx, dword ptr [rip + 0xd6b05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115165: mov ecx, dword ptr [rip + 0xd6d05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115015: mov ecx, dword ptr [rip + 0xd6e55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001145d5: mov ecx, dword ptr [rip + 0xd7895]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114415: mov ecx, dword ptr [rip + 0xd7a55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114015: mov ecx, dword ptr [rip + 0xd7e55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001131d8: mov ecx, dword ptr [rip + 0xd8c92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff65: mov ecx, dword ptr [rip + 0xdbf05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff35: mov ecx, dword ptr [rip + 0xdbf35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff05: mov ecx, dword ptr [rip + 0xdbf65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fed8: mov ecx, dword ptr [rip + 0xdbf92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fea5: mov ecx, dword ptr [rip + 0xdbfc5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe75: mov ecx, dword ptr [rip + 0xdbff5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe45: mov ecx, dword ptr [rip + 0xdc025]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe18: mov ecx, dword ptr [rip + 0xdc052]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fde5: mov ecx, dword ptr [rip + 0xdc085]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f628: mov ecx, dword ptr [rip + 0xdc842]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f5f5: mov ecx, dword ptr [rip + 0xdc875]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f5c5: mov ecx, dword ptr [rip + 0xdc8a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f595: mov ecx, dword ptr [rip + 0xdc8d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec75: mov ecx, dword ptr [rip + 0xdd1f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec45: mov ecx, dword ptr [rip + 0xdd225]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb85: mov ecx, dword ptr [rip + 0xdd2e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb55: mov ecx, dword ptr [rip + 0xdd315]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb25: mov ecx, dword ptr [rip + 0xdd345]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eaf5: mov ecx, dword ptr [rip + 0xdd375]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eac5: mov ecx, dword ptr [rip + 0xdd3a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e7a5: mov ecx, dword ptr [rip + 0xdd6c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010deb5: mov ecx, dword ptr [rip + 0xddfb5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010de85: mov ecx, dword ptr [rip + 0xddfe5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ddc5: mov ecx, dword ptr [rip + 0xde0a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dd95: mov ecx, dword ptr [rip + 0xde0d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc65: mov ecx, dword ptr [rip + 0xde205]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc35: mov ecx, dword ptr [rip + 0xde235]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d605: mov ecx, dword ptr [rip + 0xde865]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001027b5: mov ecx, dword ptr [rip + 0xe96b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102785: mov ecx, dword ptr [rip + 0xe96e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102755: mov ecx, dword ptr [rip + 0xe9715]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102725: mov ecx, dword ptr [rip + 0xe9745]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026f5: mov ecx, dword ptr [rip + 0xe9775]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026c5: mov ecx, dword ptr [rip + 0xe97a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102695: mov ecx, dword ptr [rip + 0xe97d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102665: mov ecx, dword ptr [rip + 0xe9805]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102575: mov ecx, dword ptr [rip + 0xed00d]; mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x00000000000b7ca4: mov ecx, dword ptr [rsi + 0x10]; mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b8664: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8684: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000bb134: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b86e5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9555: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8705: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7035: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7015: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b8625: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9495: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f75: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000bb0f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000b8748: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95b8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b7078: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b8768: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95d8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7098: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b8729: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9599: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7059: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000cef08: mov ecx, dword ptr [rsi + 0xc]; cmp dword ptr [rdi + 0xc], ecx; jne 0xcf080; xor eax, eax; ret; 
0x00000000000b86a5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9515: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000bb175: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b8644: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f94: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000bb114: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b86c5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9535: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000bb195: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000018c6e5: mov ecx, dword ptr [rsi + rdi + 0x20]; cmp ecx, dword ptr [rdx + rdi + 0x20]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c715: mov ecx, dword ptr [rsi + rdi + 0x40]; cmp ecx, dword ptr [rdx + rdi + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb8c: mov ecx, dword ptr [rsi + rdi]; cmp ecx, dword ptr [rdx + rdi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018ae64: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893c4: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000bbc23: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018ae84: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893d4: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000bbc13: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018c866: mov ecx, dword ptr [rsi + rdx]; test eax, eax; jne 0x18c850; sub eax, ecx; vzeroupper; ret; 
0x000000000018cd4b: mov ecx, dword ptr [rsi + rdx]; test eax, eax; jne 0x18cd30; sub eax, ecx; vzeroupper; ret; 
0x0000000000167ec5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ee1: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680a5: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680c1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168285: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682a1: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168475: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168491: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168675: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168691: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168875: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168891: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001680d5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001925df: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x1927f0; xor eax, eax; ret; 
0x000000000018f9b1: mov ecx, dword ptr [rsi - 4]; cmp ecx, dword ptr [rdi - 4]; jne 0x18fbe6; xor eax, eax; ret; 
0x000000000018e5e6: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x00000000001684b3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001686b3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001688b3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018e381: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x18ed9f; xor eax, eax; ret; 
0x000000000016d5a4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d524: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d4a4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d624: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018e35b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f98b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000016d415: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d385: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d2f5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000018e8dd: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018faad: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x0000000000167ce5: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d01: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b84e0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000000b6ea0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000000b8531: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ee1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b9301: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b71: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b9330: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, [rdi + 5]; ret; 
0x00000000000b7b90: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b9381: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd1: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000016df53: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dee3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016de73: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000001893c0: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000000b84f0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9340: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b93a1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8541: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b8510: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b9360: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000b8561: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f01: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b8581: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f11: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000018a800: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000016dd95: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dd25: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dcb5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dc45: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dbd5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db65: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016daf5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000001893d1: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b85a1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9401: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f21: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b85c1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9421: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f31: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b85e1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9441: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f41: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000018a821: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000016e035: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000b84c1: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e81: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000115a07: mov ecx, dword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x000000000015fc27: mov ecx, dword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000011f2cc: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x000000000015fd1e: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fec7: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x0000000000153bf8: mov ecx, dword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000122b32: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b93: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000118957: mov ecx, dword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118966; ret; 
0x000000000018fd7f: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000123580: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000bc73b: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000bc12c: mov ecx, eax; mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret; 
0x000000000007a171: mov ecx, eax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x000000000015794d: mov ecx, eax; xor eax, eax; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000a8639: mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x0000000000122e56: mov ecx, edi; mov r8d, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000122c0d: mov ecx, edi; shr eax, cl; and eax, 1; ret; 
0x00000000000bbf5e: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000bbbf6: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000014d274: mov ecx, esi; movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x000000000015fa1f: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x0000000000138738: mov edi, 0x400; call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x0000000000118ead: mov edi, 0x48000d69; add esp, 8; ret; 
0x00000000000a8bdd: mov edi, 0x8d48000d; add eax, 0x3819; cmove rax, rdx; ret; 
0x000000000011fe78: mov edi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe78: mov edi, 0xd8f7000d; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d26c: mov edi, 0xf8; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d300: mov edi, 0xf8; ret; 
0x000000000011553b: mov edi, 0xfee1dead; mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115550; ret; 
0x000000000015a7d4: mov edi, 0xffff0885; inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ff516: mov edi, dword ptr [rbx + 0x28]; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000137d6d: mov edi, dword ptr [rbx + 0x48]; test rdi, rdi; jne 0x137d60; pop rbx; ret; 
0x0000000000157f39: mov edi, dword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000094cc9: mov edi, dword ptr [rdi + 0x28]; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x000000000014e025: mov edi, dword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14e030; ret; 
0x0000000000154725: mov edi, dword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154730; ret; 
0x00000000001199de: mov edi, dword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000013a7c4: mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x0000000000122245: mov edi, dword ptr [rdx + 0xa8]; mov esi, 1; call 0x1220e0; ret; 
0x0000000000122225: mov edi, dword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x0000000000198e00: mov edi, dword ptr [rip + 0x5632a]; call 0x22330; pop rbx; mov qword ptr [rip + 0x56319], 0; ret; 
0x000000000015e104: mov edi, dword ptr [rip + 0x8e326]; test edi, edi; jns 0x15e110; ret; 
0x00000000001175b5: mov edi, dword ptr [rip + 0xd81ad]; test rdi, rdi; jne 0x1175d0; mov eax, 1; ret; 
0x00000000000f1ff1: mov edi, dword ptr [rsi + 0x28]; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000018c839: mov edi, dword ptr [rsi + rcx + 0x40]; cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c6b3: mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb49: mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000005b623: mov edi, eax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x00000000000e2c88: mov edi, eax; mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000113469: mov edi, eax; mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000010ea64: mov edi, eax; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f697: mov edi, eax; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000043493: mov edi, eax; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000112bc8: mov edi, eax; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010ebec: mov edi, eax; mov dword ptr [rsp], eax; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010e235: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000196b71: mov edi, eax; mov qword ptr [rsp], rax; call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010c3d8: mov edi, eax; mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000041293: mov edi, ebp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000e2d42: mov edi, ecx; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151f4: mov edi, ecx; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120e11: mov edi, ecx; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x00000000001147a1: mov edi, ecx; mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000001232af: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123217: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000012317f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000122f0f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000012304f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000122caf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000122faf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000122d4f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000122ddf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000001230ef: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000122c1f: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000123c14: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123b8c: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000123b04: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001238c4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001239e4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123694: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123954: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123724: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000001237a4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000123a74: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000123604: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000197333: mov edi, edx; call 0x197440; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000005b6a7: mov edi, edx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x0000000000047329: mov edi, edx; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000018d1cf: mov edi, esi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018886f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000197332: mov edi, r10d; call 0x197440; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x00000000000e2c87: mov edi, r8d; mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000113468: mov edi, r8d; mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000010ea63: mov edi, r8d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f696: mov edi, r8d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000043492: mov edi, r8d; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000112bc7: mov edi, r8d; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010ebeb: mov edi, r8d; mov dword ptr [rsp], eax; call 0x94640; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000010e234: mov edi, r8d; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000196b70: mov edi, r8d; mov qword ptr [rsp], rax; call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010c3d7: mov edi, r8d; mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000e2d41: mov edi, r9d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001151f3: mov edi, r9d; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x0000000000120e10: mov edi, r9d; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x00000000001147a0: mov edi, r9d; mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000012102a: mov edx, 0; cmovb rax, rdx; ret; 
0x00000000000a28d6: mov edx, 0; cmove rax, rdx; ret; 
0x000000000015c824: mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000009cb8d: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000b14ca: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000013bf12: mov edx, 0; mov eax, 0x102; cmovne eax, edx; ret; 
0x00000000000bc0fe: mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x000000000015ce99: mov edx, 0x1000947; mov rax, r8; pop rbp; ret; 
0x00000000000e5067: mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000013beed: mov edx, 0x104; cmove eax, edx; ret; 
0x000000000013bed1: mov edx, 0x107; mov eax, 0xffffffff; cmove eax, edx; ret; 
0x00000000001143d3: mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x00000000000e50a2: mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000134803: mov edx, 0x6401000b; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x000000000011cf9b: mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x00000000000e4f97: mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e4fea: mov edx, 0x7f; cmovne rax, rdx; ret; 
0x000000000013cbce: mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret; 
0x00000000001385e9: mov edx, 0x89480000; ret; 
0x0000000000057d62: mov edx, 0x894830e8; or byte ptr [r8 + 2], r15b; ret; 
0x000000000019554a: mov edx, 0x94d3ff3; ret; 
0x0000000000122246: mov edx, 0xa8; mov esi, 1; call 0x1220e0; ret; 
0x0000000000122226: mov edx, 0xa8; xor esi, esi; call 0x1220e0; ret; 
0x00000000000445b8: mov edx, 0xa; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x00000000000db9e2: mov edx, 0xc7fff46a; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000120398: mov edx, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120424: mov edx, 0xd8f7000c; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000135112: mov edx, 0xe9fff4cc; ret; 
0x00000000000e4f7d: mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000a06b4: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000000a06d4: mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x000000000009f358: mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x0000000000033c38: mov edx, 0xffffffff; cmove rax, rdx; ret; 
0x00000000000271fb: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000e5130: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e5000: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x0000000000047397: mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000013cb68: mov edx, 0xffffffff; ret; 
0x0000000000043ddd: mov edx, 1; cmove eax, edx; ret; 
0x000000000006309a: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000102a84: mov edx, 2; cmove eax, edx; ret; 
0x00000000000529ed: mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000011f50c: mov edx, 8; syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x000000000008cdbc: mov edx, dword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000150a94: mov edx, dword ptr [rax + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000015099c: mov edx, dword ptr [rax + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000033d0a: mov edx, dword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x0000000000055600: mov edx, dword ptr [rax + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000008cdb5: mov edx, dword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000011f1e4: mov edx, dword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000181a0f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000018013d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000012356e: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123580; ret; 
0x0000000000123e9e: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123eb0; ret; 
0x000000000012d117: mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000000ee489: mov edx, dword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee437: mov edx, dword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x0000000000063013: mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000827f4: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000008ce0f: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccdf: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000bccc9: mov edx, dword ptr [rdi]; cmp dword ptr [r9], edx; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x000000000018bfd2: mov edx, dword ptr [rdi]; cmp edx, dword ptr [rsi]; jne 0x18bfbc; ret; 
0x0000000000043dd9: mov edx, dword ptr [rdi]; test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x00000000000bd20e: mov edx, dword ptr [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000034224: mov edx, dword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f4: mov edx, dword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055066: mov edx, dword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000009e925: mov edx, dword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x0000000000086e15: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916dd: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x0000000000034221: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f1: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003421e: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ee: mov edx, dword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e2e81: mov edx, dword ptr [rip + 0x108fe9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d61: mov edx, dword ptr [rip + 0x109109]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c9: mov edx, dword ptr [rip + 0x10dba1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dd131: mov edx, dword ptr [rip + 0x10ed39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d4aa1: mov edx, dword ptr [rip + 0x117391]; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000d1091: mov edx, dword ptr [rip + 0x11add9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ef1: mov edx, dword ptr [rip + 0x11af79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dd9: mov edx, dword ptr [rip + 0x11b091]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062ed1: mov edx, dword ptr [rip + 0x188f99]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e99: mov edx, dword ptr [rip + 0x188fd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048281: mov edx, dword ptr [rip + 0x1a3be9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000434b1: mov edx, dword ptr [rip + 0x1a89b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000043421: mov edx, dword ptr [rip + 0x1a8a49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000034543: mov edx, dword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000023a68: mov edx, dword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000162ed1: mov edx, dword ptr [rip + 0x88f99]; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000162e71: mov edx, dword ptr [rip + 0x88ff9]; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x000000000012e9e1: mov edx, dword ptr [rip + 0xbd489]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121469: mov edx, dword ptr [rip + 0xcaa01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121431: mov edx, dword ptr [rip + 0xcaa39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213f9: mov edx, dword ptr [rip + 0xcaa71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213c9: mov edx, dword ptr [rip + 0xcaaa1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121391: mov edx, dword ptr [rip + 0xcaad9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001212b9: mov edx, dword ptr [rip + 0xcabb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121249: mov edx, dword ptr [rip + 0xcac21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121201: mov edx, dword ptr [rip + 0xcac69]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121141: mov edx, dword ptr [rip + 0xcad29]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120e29: mov edx, dword ptr [rip + 0xcb041]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120d71: mov edx, dword ptr [rip + 0xcb0f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120929: mov edx, dword ptr [rip + 0xcb541]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120861: mov edx, dword ptr [rip + 0xcb609]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001207c1: mov edx, dword ptr [rip + 0xcb6a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120701: mov edx, dword ptr [rip + 0xcb769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120661: mov edx, dword ptr [rip + 0xcb809]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001205a1: mov edx, dword ptr [rip + 0xcb8c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120421: mov edx, dword ptr [rip + 0xcba49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120351: mov edx, dword ptr [rip + 0xcbb19]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa61: mov edx, dword ptr [rip + 0xcc409]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9cf: mov edx, dword ptr [rip + 0xcc49b]; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x000000000011f981: mov edx, dword ptr [rip + 0xcc4e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d9: mov edx, dword ptr [rip + 0xcc591]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f811: mov edx, dword ptr [rip + 0xcc659]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f761: mov edx, dword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6b1: mov edx, dword ptr [rip + 0xcc7b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f521: mov edx, dword ptr [rip + 0xcc949]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f3c9: mov edx, dword ptr [rip + 0xccaa1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121f1f: mov edx, dword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000011c6f1: mov edx, dword ptr [rip + 0xcf779]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000118c61: mov edx, dword ptr [rip + 0xd3209]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116f29: mov edx, dword ptr [rip + 0xd4f41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ef9: mov edx, dword ptr [rip + 0xd4f71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ec1: mov edx, dword ptr [rip + 0xd4fa9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd9: mov edx, dword ptr [rip + 0xd5191]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115551: mov edx, dword ptr [rip + 0xd6919]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001154d1: mov edx, dword ptr [rip + 0xd6999]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115411: mov edx, dword ptr [rip + 0xd6a59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115211: mov edx, dword ptr [rip + 0xd6c59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114879: mov edx, dword ptr [rip + 0xd75f1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001147b9: mov edx, dword ptr [rip + 0xd76b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114701: mov edx, dword ptr [rip + 0xd7769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114661: mov edx, dword ptr [rip + 0xd7809]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144b4: mov edx, dword ptr [rip + 0xd7a0e]; mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x00000000001143e1: mov edx, dword ptr [rip + 0xd7a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113fe1: mov edx, dword ptr [rip + 0xd7e89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113fa1: mov edx, dword ptr [rip + 0xd7ec9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dd9: mov edx, dword ptr [rip + 0xd8091]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001138a9: mov edx, dword ptr [rip + 0xd85c1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113871: mov edx, dword ptr [rip + 0xd85f9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113839: mov edx, dword ptr [rip + 0xd8631]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113579: mov edx, dword ptr [rip + 0xd88f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113531: mov edx, dword ptr [rip + 0xd8939]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113481: mov edx, dword ptr [rip + 0xd89e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113321: mov edx, dword ptr [rip + 0xd8b49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001132e1: mov edx, dword ptr [rip + 0xd8b89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113289: mov edx, dword ptr [rip + 0xd8be1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000112be1: mov edx, dword ptr [rip + 0xd9289]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ec01: mov edx, dword ptr [rip + 0xdd269]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ea81: mov edx, dword ptr [rip + 0xdd3e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e369: mov edx, dword ptr [rip + 0xddb01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e339: mov edx, dword ptr [rip + 0xddb31]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e2f1: mov edx, dword ptr [rip + 0xddb79]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e251: mov edx, dword ptr [rip + 0xddc19]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010de29: mov edx, dword ptr [rip + 0xde041]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010dbf1: mov edx, dword ptr [rip + 0xde279]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db91: mov edx, dword ptr [rip + 0xde2d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db31: mov edx, dword ptr [rip + 0xde339]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7a9: mov edx, dword ptr [rip + 0xde6c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d749: mov edx, dword ptr [rip + 0xde721]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6e9: mov edx, dword ptr [rip + 0xde781]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c4a1: mov edx, dword ptr [rip + 0xdf9c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c3f1: mov edx, dword ptr [rip + 0xdfa79]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000102881: mov edx, dword ptr [rip + 0xe95e9]; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102821: mov edx, dword ptr [rip + 0xe9649]; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000b7d25: mov edx, dword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7075: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7095: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000016e031: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000016df50: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dd91: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dee0: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dd21: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8512: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000000b9362: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000bafc2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000016de70: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000016dcb1: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b84f3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9343: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000b6eb3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000bafa3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000016dc41: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9404: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f24: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000bb064: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000016dbd1: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85c4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9424: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f34: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000bb084: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000016db61: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8563: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f03: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000bb023: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b85e4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9444: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f44: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000bb0a4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000016daf1: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b8583: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f13: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000bb043: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b93a4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8544: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000bb004: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000018b532: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c52: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a802: mov edx, dword ptr [rsi + r8 - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018b533: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c53: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a803: mov edx, dword ptr [rsi + rax - 4]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x000000000018b554: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c74: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a824: mov edx, dword ptr [rsi + rax - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000328a1: mov edx, dword ptr [rsi + rax*8]; lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000016d5a1: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d521: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d4a1: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d411: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d381: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d2f1: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167ef1: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001680d1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001682b0: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ce8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ec8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680a8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168288: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ee4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680c4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682a4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d04: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001684b0: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001686b0: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001688b0: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167b25: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168479: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168679: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168879: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b09: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168495: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168695: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168895: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b41: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d621: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b84d0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000018ae50: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b9320: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b6e90: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000b7720: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; sub r8, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000001893b0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000000baf80: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000b8521: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b9371: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ed1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000b77a1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000bafd1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000b84b1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b92f1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x00000000000b6e71: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000b76e1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000baf51: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x000000000010ff9f: mov edx, dword ptr [rsi]; xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x00000000000a8a49: mov edx, dword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x0000000000122b2d: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b8e: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000a8971: mov edx, dword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000013caa7: mov edx, dword ptr [rsp + 8]; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x00000000000a8a88: mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a8aa0: mov edx, dword ptr [rsp - 0x18]; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x0000000000041d01: mov edx, eax; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x000000000013f2b1: mov edx, eax; mov byte ptr [r10], 0; ret; 
0x00000000000bc798: mov edx, eax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x0000000000093546: mov edx, eax; mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x00000000000dcff0: mov edx, eax; neg edx; cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x0000000000112d0e: mov edx, eax; neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x000000000011faac: mov edx, eax; or eax, esi; wrpkru; xor eax, eax; ret; 
0x000000000010f615: mov edx, ecx; mov eax, 0x104; syscall; cmp rax, -0xfff; jae 0x10f627; ret; 
0x0000000000062eb5: mov edx, ecx; mov eax, 0x108; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010fe05: mov edx, ecx; mov eax, 0x109; syscall; cmp rax, -0xfff; jae 0x10fe17; ret; 
0x000000000010fec5: mov edx, ecx; mov eax, 0x10b; syscall; cmp rax, -0xfff; jae 0x10fed7; ret; 
0x00000000001132c5: mov edx, ecx; mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x1132e0; ret; 
0x0000000000113855: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x113870; ret; 
0x00000000001200a5: mov edx, ecx; mov eax, 0x11e; syscall; cmp rax, -0xfff; jae 0x1200b7; ret; 
0x000000000011fb95: mov edx, ecx; mov eax, 0x12d; syscall; cmp rax, -0xfff; jae 0x11fba7; ret; 
0x000000000011f5d5: mov edx, ecx; mov eax, 0x12e; syscall; cmp rax, -0xfff; jae 0x11f5e7; ret; 
0x0000000000120135: mov edx, ecx; mov eax, 0x12f; syscall; cmp rax, -0xfff; jae 0x120147; ret; 
0x0000000000120195: mov edx, ecx; mov eax, 0x136; syscall; cmp rax, -0xfff; jae 0x1201a7; ret; 
0x00000000001201c5: mov edx, ecx; mov eax, 0x137; syscall; cmp rax, -0xfff; jae 0x1201d7; ret; 
0x000000000011fec5: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x11fed7; ret; 
0x00000000001131c5: mov edx, ecx; mov eax, 0x28; syscall; cmp rax, -0xfff; jae 0x1131d7; ret; 
0x00000000001209f5: mov edx, ecx; mov eax, 0x35; syscall; cmp rax, -0xfff; jae 0x120a07; ret; 
0x0000000000120965: mov edx, ecx; mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x120977; ret; 
0x00000000001204b5: mov edx, ecx; mov eax, 0x37; syscall; cmp rax, -0xfff; jae 0x1204c7; ret; 
0x000000000011ff55: mov edx, ecx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11ff67; ret; 
0x000000000011fe95: mov edx, ecx; mov eax, 0xa5; syscall; cmp rax, -0xfff; jae 0x11fea7; ret; 
0x000000000011fd75: mov edx, ecx; mov eax, 0xaf; syscall; cmp rax, -0xfff; jae 0x11fd87; ret; 
0x000000000011ff85: mov edx, ecx; mov eax, 0xb2; syscall; cmp rax, -0xfff; jae 0x11ff97; ret; 
0x000000000011ffb5: mov edx, ecx; mov eax, 0xb3; syscall; cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000011d1c5: mov edx, ecx; mov eax, 0xbc; syscall; cmp rax, -0xfff; jae 0x11d1d7; ret; 
0x000000000011d165: mov edx, ecx; mov eax, 0xbd; syscall; cmp rax, -0xfff; jae 0x11d177; ret; 
0x000000000011d045: mov edx, ecx; mov eax, 0xbe; syscall; cmp rax, -0xfff; jae 0x11d057; ret; 
0x000000000011d075: mov edx, ecx; mov eax, 0xbf; syscall; cmp rax, -0xfff; jae 0x11d087; ret; 
0x000000000011d0d5: mov edx, ecx; mov eax, 0xc0; syscall; cmp rax, -0xfff; jae 0x11d0e7; ret; 
0x000000000011cfb5: mov edx, ecx; mov eax, 0xc1; syscall; cmp rax, -0xfff; jae 0x11cfc7; ret; 
0x0000000000118cf5: mov edx, ecx; mov eax, 0xd8; syscall; cmp rax, -0xfff; jae 0x118d07; ret; 
0x0000000000121375: mov edx, ecx; mov eax, 0xdc; syscall; cmp rax, -0x1000; ja 0x121390; ret; 
0x000000000011fd15: mov edx, ecx; mov eax, 0xe9; syscall; cmp rax, -0xfff; jae 0x11fd27; ret; 
0x000000000005b620: mov edx, edi; mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x00000000000bbf65: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000d4230: mov edx, edi; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x000000000013c78a: mov edx, esi; shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x00000000000a8e29: mov edx, esi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000009efc9: mov edx, esp; pop r12; pop r13; ret; 
0x0000000000041d00: mov edx, r8d; and edx, 0x7fffffff; or edx, esi; je 0x41c58; ret; 
0x000000000011faab: mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000102655: mov es, word ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000123588: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x00000000000b913e: mov es, word ptr [rsi]; add byte ptr [rax], al; ret; 
0x0000000000131a25: mov esi, 0x1000be5; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000d0054: mov esi, 0x31450011; in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000cf58e: mov esi, 0x48000000; lea eax, [rdi - 0x10]; ret; 
0x0000000000198e6e: mov esi, 0x48ffe894; mov dword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x0000000000113d43: mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x000000000009391b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15ae94]; syscall; ret; 
0x0000000000091013: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x15d79c]; syscall; ret; 
0x0000000000083f5b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0x16a814]; syscall; ret; 
0x0000000000117e3e: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip + 0xd7a01]; syscall; ret; 
0x000000000006309f: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000005d9dd: mov esi, 0x83410014; in eax, dx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000048b52: mov esi, 0x83480143; ret; 
0x000000000012a6c2: mov esi, 0x8348014b; ret; 
0x00000000000e094a: mov esi, 0x83480153; ret; 
0x000000000004a185: mov esi, 0x8348016b; ret; 
0x000000000009942a: mov esi, 0x8b48ffff; add eax, 0x152a3c; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000effb9: mov esi, 0xb60f000f; ret; 
0x000000000014e03a: mov esi, 0xc085ffff; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000a884d: mov esi, 0xd139070c; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x000000000011ff9b: mov esi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a8815: mov esi, 0xf2390714; je 0xa8810; ret; 
0x000000000012224b: mov esi, 1; call 0x1220e0; ret; 
0x000000000002ca01: mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x0000000000033c2d: mov esi, dword ptr [rdi + 0x78]; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000018c741: mov esi, dword ptr [rsi + rcx + 0x60]; cmp esi, dword ptr [rdx + rcx + 0x60]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cc08: mov esi, dword ptr [rsi + rcx]; cmp esi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018fd90: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000bbc27: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000018fd7e: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000000bbc18: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018fd6b: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000123328: mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000015f463: mov esi, eax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000011614d: mov esi, eax; test rax, rax; jne 0x116114; xor eax, eax; pop rbp; ret; 
0x0000000000117071: mov esi, ecx; mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000dcfb5: mov esi, edi; xor edi, edi; call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x00000000000f9757: mov esi, edx; dec dword ptr [rax - 0x77]; ret; 
0x00000000001494bc: mov esi, esi; add rsi, rax; cmp rsi, qword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x0000000000157734: mov esi, esi; mov dword ptr [rdi + 0x28], eax; add rsi, r8; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000184d25: mov esi, fs; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000046c1f: mov esp, 0x1001aa6; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000052a5e: mov esp, 0x39480019; ret; 
0x00000000000ac161: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x00000000000ac191: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x00000000000ac181: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000183fce: mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000115db0: mov esp, 0x48000d98; mov dword ptr [rip + 0xd98e5], eax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x00000000000a07a0: mov esp, 0x48000da6; cmovne eax, edx; ret; 
0x000000000018d012: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884c2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d032: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884e2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d070: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188520: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cff2: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884a2: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000000529fc: mov esp, 0x4c60019; adc byte ptr [rax], al; ret; 
0x0000000000134653: mov esp, 0x6401000b; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000123f23: mov esp, 0x6401000c; mov dword ptr [r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000d3567: mov esp, 0x83480011; ret; 
0x000000000018c8a8: mov esp, 0x8bc031d1; or al, 0x17; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c529; vzeroupper; ret; 
0x0000000000089df9: mov esp, 0x8c48348; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000000529f5: mov esp, 0x8d480019; add eax, 0x19bc61; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000091f32: mov esp, 0x93ebffff; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000190f60: mov esp, 0xa8000000; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x00000000000b14c8: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000018d3d2: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a42: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849f2: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x0000000000188a22: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001849e2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000000abf3a: mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a1: mov esp, 0xc22948c0; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b1: mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c1: mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d1: mov esp, 0xc22948c0; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11a: mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce381: mov esp, 0xc22948c0; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce391: mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a1: mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b1: mov esp, 0xc22948c0; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000184962: mov esp, 0xc23948c0; jbe 0x1849c0; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184982: mov esp, 0xc23948c0; jbe 0x1849c0; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000001849a2: mov esp, 0xc23948c0; jbe 0x1849c0; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184952: mov esp, 0xc23948c0; jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x000000000018c412: mov esp, 0xc23948c0; jbe 0x18c470; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c432: mov esp, 0xc23948c0; jbe 0x18c470; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c452: mov esp, 0xc23948c0; jbe 0x18c470; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c402: mov esp, 0xc23948c0; jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x00000000000a06ba: mov esp, 0xc2440fc7; add eax, 1; ret; 
0x0000000000188c92: mov esp, 0xc63948c0; jbe 0x188d10; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001885b5: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x00000000000cf344: mov esp, 0xc83948ca; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000b1d53: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf848: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000166052: mov esp, 0xd32949d2; jbe 0x166064; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fe92: mov esp, 0xd32949d2; jbe 0x17fea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abe92: mov esp, 0xd32949d2; jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000120178: mov esp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000024a64: mov esp, 0xe80018f5; ret; 
0x00000000000ac25b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000018d2d7: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188957: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184a87: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000000ac171: mov esp, 0xf80148c0; ret; 
0x000000000018d392: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a12: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x00000000001849d2: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000114548: mov esp, 0xffffffff; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e194: mov esp, eax; mov rax, r12; pop r12; ret; 
0x000000000008e1a1: mov esp, ebp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000012e9e3: mov esp, edx; or eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000005b4d1: mov esp, edx; ret; 
0x000000000011942a: mov esp, esi; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x0000000000148ead: mov qword ptr [r12 + 0x30], rax; call 0x1578f0; mov rax, r12; pop r12; ret; 
0x00000000000a1f71: mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x00000000000a2c08: mov qword ptr [r12], rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000086400: mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x0000000000057c0d: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057c2a: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000121ebc: mov qword ptr [r8], rax; mov qword ptr [rip + 0xca496], 0; ret; 
0x0000000000121e3c: mov qword ptr [r8], rax; mov qword ptr [rip + 0xca516], 0; ret; 
0x000000000005b4c9: mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x000000000005584b: mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000018fd74: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000013c684: mov qword ptr [r9], r10; ret; 
0x000000000013c74c: mov qword ptr [r9], rcx; ret; 
0x000000000013c72a: mov qword ptr [r9], rdi; ret; 
0x0000000000141d8f: mov qword ptr [rax + 0x10], 0; movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086e9a: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f1c: mov qword ptr [rax + 0x10], rcx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f58: mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000086e5c: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000008762b: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000095906: mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000008cdbf: mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000087627: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000086e60: mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000086e9e: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000087f5c: mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087cc1: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000008e584: mov qword ptr [rax + 0xe0], rcx; call 0x8e530; test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x00000000001414f0: mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000092794: mov qword ptr [rax + 8], 0; ret; 
0x0000000000086e51: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000116f94: mov qword ptr [rax + 8], rdi; movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000008cdb7: mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000009278d: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000001144db: mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000013c45c: mov qword ptr [rax], r10; lea eax, [r9 + r8 + 2]; pop rbx; ret; 
0x000000000008558d: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000009a0bb: mov qword ptr [rax], rcx; mov rax, qword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c1: mov qword ptr [rax], rcx; mov rax, qword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000fec9e: mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x000000000009a0cf: mov qword ptr [rax], rdi; ret; 
0x000000000011f1e6: mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008774c: mov qword ptr [rax], rdx; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086e59: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000033d17: mov qword ptr [rax], rdx; ret; 
0x0000000000087f27: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000009a0c5: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961cb: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000e8163: mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000154793: mov qword ptr [rbp + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a20be: mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x0000000000087e49: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093463: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a037d: mov qword ptr [rbp], rax; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000004806e: mov qword ptr [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002fdd6: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000008cdd0: mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000015fb29: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000094d06: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000127c62: mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000157b95: mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000008c10d: mov qword ptr [rbx + 0x18], rax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000015fae1: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000127cb2: mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000081120: mov qword ptr [rbx + 0x18], rdi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000014a027: mov qword ptr [rbx + 0x20], rax; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000011d7f0: mov qword ptr [rbx + 0x20], rax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091974: mov qword ptr [rbx + 0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000149fe7: mov qword ptr [rbx + 0x20], rsi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ff51e: mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000008cdd8: mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000001378c4: mov qword ptr [rbx + 0x30], rax; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000011d9ec: mov qword ptr [rbx + 0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000919bd: mov qword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000115bf7: mov qword ptr [rbx + 0x60], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000087e4d: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093467: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e4ee: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000008f506: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e648: mov qword ptr [rbx + 0x90], rsi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000011db3e: mov qword ptr [rbx + 0x98], rdx; mov byte ptr [rbx + 0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000935de: mov qword ptr [rbx + 8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000010c4f9: mov qword ptr [rbx + 8], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127c12: mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000025b06: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000158035: mov qword ptr [rbx], 0; call 0x153750; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001199e5: mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000000957d3: mov qword ptr [rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000060ef5: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a0a3d: mov qword ptr [rbx], rax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000009eb10: mov qword ptr [rbx], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160024: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000015348c: mov qword ptr [rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x000000000009e9b4: mov qword ptr [rbx], rax; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000009d10c: mov qword ptr [rbx], rax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001534e5: mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000011998b: mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000639cc: mov qword ptr [rbx], rdx; mov byte ptr [rax], bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000006bba0: mov qword ptr [rbx], rdx; mov dword ptr [rax], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000178a53: mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a63: mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a73: mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a83: mov qword ptr [rcx + 8], rdx; ret; 
0x000000000005b92c: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000163684: mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x000000000008aa19: mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000178a10: mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x0000000000178a30: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a40: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a50: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a60: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a70: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a80: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000003453b: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000178a20: mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x0000000000178a00: mov qword ptr [rcx], rdx; ret; 
0x0000000000033c31: mov qword ptr [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000564de: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000121e5f: mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x00000000000b86ec: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b912c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b955c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b870c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b703c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b79cc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b701c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b79ac: mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb1bc: mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b957f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1df: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b874f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b707f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7a2f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000bb21f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b876f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95df: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7a5f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000bb23f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b8730: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b95a0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7060: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb200: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000015777a: mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000918c6: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000008d30e: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000015783c: mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x00000000000918f3: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000158001: mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x0000000000157704: mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x000000000015773c: mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x000000000015800c: mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000d128a: mov qword ptr [rdi + 0x20], rax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000918f7: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000918c2: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000918ba: mov qword ptr [rdi + 0x58], rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000827ec: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000b86ac: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b90cc: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b951c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fdc: mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b796c: mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb17c: mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86cc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b90fc: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b953c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ffc: mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b798c: mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb19c: mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000016dd97: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dd27: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dcb7: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dc47: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85aa: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b8f3a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b940a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x000000000016dbd7: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f2a: mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b784a: mov qword ptr [rdi + 5], rdx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb06a: mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85ca: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b8f6a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x00000000000b942a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x000000000016db67: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f3a: mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b786a: mov qword ptr [rdi + 6], rdx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb08a: mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b85ea: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b8f9a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000000b944a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x000000000016daf7: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b6f4a: mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b788a: mov qword ptr [rdi + 7], rdx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb0aa: mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000009ef32: mov qword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x0000000000055baf: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000055a77: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000564d7: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000056467: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000157906: mov qword ptr [rdi + 8], rax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x0000000000057dd9: mov qword ptr [rdi + 8], rax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057d65: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000157ffd: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000918ca: mov qword ptr [rdi + 8], rax; ret; 
0x0000000000062fb5: mov qword ptr [rdi + 8], rbp; add dword ptr [rdi + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008df52: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000056aec: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000018b55b: mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c7b: mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a82b: mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x0000000000055c37: mov qword ptr [rdi + r8], rax; sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x000000000018ae8b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893db: mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000bc04e: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x000000000018be7d: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000bbc1a: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000001679d4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a12: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000563ce: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000167b87: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c83: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bcf: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d57: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f37: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168127: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682f8: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684f8: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001686f8: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679d0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a0e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b83: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c7f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bcb: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d53: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f33: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168123: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682f4: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684f4: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001686f4: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679cc: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a0a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b7f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c7b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bc7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d4f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f2f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016811f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682f0: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001684f0: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001686f0: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001679c8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a06: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167d5b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d5a7: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000167f3b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d527: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016812b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d4a7: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001682fc: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d418: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001684fc: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d388: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001686fc: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d2f8: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000b7eb0: mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000563c7: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634d: mov qword ptr [rdi - 8], r9; ret; 
0x00000000001679d8: mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a16: mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b8b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c87: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bd3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d627: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000563c0: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000000564d0: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000014a81e: mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000a8749: mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x0000000000056347: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056461: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000005631c: mov qword ptr [rdi], r9; ret; 
0x00000000000a8b05: mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a86eb: mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x000000000005b51e: mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x0000000000041fb3: mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000000b8536: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b8ea6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000b9386: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd6: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000bafe6: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000b8566: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f06: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7806: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000bb026: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000b8586: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f16: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000bb046: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000b85a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9407: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f27: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7847: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000bb067: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000b85c7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9427: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f37: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7867: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000bb087: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000b85e7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9447: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f47: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000b7887: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000bb0a7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000018b558: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c78: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a828: mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x000000000018ae88: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893d8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b93a7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8547: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b77e7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb007: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000b6ee6: mov qword ptr [rdi], rcx; ret; 
0x00000000000b77c6: mov qword ptr [rdi], rcx; sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x000000000018be82: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000000a8975: mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000b8523: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b8e83: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000000b9373: mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b7ed0: mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b7ef0: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7f00: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f10: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f20: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018a8e0: mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ee0: mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000041fcd: mov qword ptr [rdi], rdx; ret; 
0x00000000000b77a3: mov qword ptr [rdi], rdx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000bafd3: mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x0000000000057b75: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000018fd71: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000057b5a: mov qword ptr [rdi], rsi; ret; 
0x0000000000121eb8: mov qword ptr [rdx + 0x10], rcx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca496], 0; ret; 
0x0000000000121e38: mov qword ptr [rdx + 0x10], rcx; mov qword ptr [r8], rax; mov qword ptr [rip + 0xca516], 0; ret; 
0x00000000000860c3: mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001494c7: mov qword ptr [rdx + 0x20], rsi; ret; 
0x00000000000958fe: mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x00000000001494a1: mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000001494a5: mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000008e5bc: mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000000827fa: mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000017ae0a: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a7a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017892a: mov qword ptr [rdx + 5], rax; mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017ae2a: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a9a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017894a: mov qword ptr [rdx + 6], rax; mov rax, rdi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017d092: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ae4a: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176aba: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017896a: mov qword ptr [rdx + 7], rax; mov rax, rdi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x000000000017acda: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769aa: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000001785ca: mov qword ptr [rdx + 8], rax; mov rax, rdi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x0000000000116fd0: mov qword ptr [rdx + 8], rax; test rax, rax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x0000000000063019: mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000015d189: mov qword ptr [rdx], 0; ret; 
0x00000000000a0b7c: mov qword ptr [rdx], r12; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x00000000001144ba: mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x000000000017d13e: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac83: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000121493: mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000017ad83: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176a33: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ada3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176a43: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017adc3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176a53: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017ade3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176a63: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017ae03: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a73: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ae23: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a93: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ae43: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176ab3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017acd3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000000d1db8: mov qword ptr [rdx], rax; mov rax, qword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x0000000000176953: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000178563: mov qword ptr [rdx], rax; mov rax, rdi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x0000000000034550: mov qword ptr [rdx], rax; ret; 
0x00000000000871ab: mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a8621: mov qword ptr [rdx], rcx; ret; 
0x000000000009f8a3: mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f865: mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009520b: mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951e2: mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951c2: mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000094ea8: mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e91: mov qword ptr [rip + 0x157448], rax; ret; 
0x0000000000094e77: mov qword ptr [rip + 0x157452], rdx; ret; 
0x0000000000094e38: mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e28: mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000095275: mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000009393f: mov qword ptr [rip + 0x15ae7e], 0; ret; 
0x000000000009389f: mov qword ptr [rip + 0x15af22], rbx; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x000000000004757c: mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000023a4f: mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000000226b7: mov qword ptr [rip + 0x1ceae2], rdx; pop rax; pop rbx; pop rbp; ret; 
0x0000000000198ad7: mov qword ptr [rip + 0x5519e], 0; ret; 
0x000000000019863b: mov qword ptr [rip + 0x5532a], 0; add rsp, 8; ret; 
0x0000000000198c23: mov qword ptr [rip + 0x55b76], rbx; test rbx, rbx; jne 0x198c10; pop rbx; ret; 
0x0000000000198e0c: mov qword ptr [rip + 0x56319], 0; ret; 
0x0000000000198e72: mov qword ptr [rip + 0x566eb], 0; add rsp, 8; ret; 
0x0000000000198f45: mov qword ptr [rip + 0x56f20], 0; ret; 
0x0000000000199077: mov qword ptr [rip + 0x5799e], 0; pop rbx; ret; 
0x0000000000160fcf: mov qword ptr [rip + 0x8deba], rsi; ret; 
0x0000000000160fc6: mov qword ptr [rip + 0x8decb], r8; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x000000000015d58e: mov qword ptr [rip + 0x93ba7], 0; add rsp, 8; ret; 
0x0000000000138742: mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x000000000012d23b: mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x0000000000121ebf: mov qword ptr [rip + 0xca496], 0; ret; 
0x0000000000121e96: mov qword ptr [rip + 0xca4bf], 0; ret; 
0x0000000000121e65: mov qword ptr [rip + 0xca4f0], 2; ret; 
0x0000000000121e3f: mov qword ptr [rip + 0xca516], 0; ret; 
0x0000000000121d18: mov qword ptr [rip + 0xca641], rbx; pop rbx; ret; 
0x0000000000121cfe: mov qword ptr [rip + 0xca65b], rbx; pop rbx; ret; 
0x0000000000121ac8: mov qword ptr [rip + 0xca88d], 0; add rsp, 8; ret; 
0x0000000000121a93: mov qword ptr [rip + 0xca8c2], 3; add rsp, 8; ret; 
0x000000000011790d: mov qword ptr [rip + 0xd7e7c], rax; add rsp, 8; ret; 
0x00000000001178e6: mov qword ptr [rip + 0xd7e9f], 0; add rsp, 8; ret; 
0x000000000011789c: mov qword ptr [rip + 0xd7eed], rax; mov rax, r8; add rsp, 8; ret; 
0x000000000011786c: mov qword ptr [rip + 0xd7f1d], rax; mov rax, r8; ret; 
0x00000000001160b9: mov qword ptr [rip + 0xd957c], 0; add rsp, 8; ret; 
0x0000000000115db4: mov qword ptr [rip + 0xd98e5], rax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000115d00: mov qword ptr [rip + 0xd9939], rax; mov eax, 1; add rsp, 8; ret; 
0x000000000014842d: mov qword ptr [rsi + 0x10], 2; test eax, eax; je 0x148440; xor eax, eax; ret; 
0x0000000000047c2f: mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014852a: mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000048109: mov qword ptr [rsi + 0x10], rax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048158: mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000047c33: mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000008df2b: mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000001133ee: mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001133e6: mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000148560: mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000148522: mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484c6: mov qword ptr [rsi + 8], rax; ret; 
0x0000000000055603: mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000157839: mov qword ptr [rsi], rax; mov qword ptr [rdi + 0x18], rdx; mov eax, r8d; ret; 
0x000000000008d312: mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x000000000013b631: mov qword ptr [rsi], rdi; ret; 
0x000000000013bb6e: mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x000000000010e237: mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000012090e: mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x000000000005b11c: mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000d028d: mov qword ptr [rsp - 0x10], rsi; fild qword ptr [rsp - 0x10]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000041c63: mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057cc6: mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000196b73: mov qword ptr [rsp], rax; call 0x197440; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000010c3da: mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000012064c: mov qword ptr [rsp], rax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x00000000001533a2: mov qword ptr fs:[rax], rdx; ret; 
0x0000000000153441: mov qword ptr fs:[rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000957d2: mov qword ptr fs:[rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000015348b: mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x00000000001534e4: mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x000000000003453a: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000033c30: mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x000000000003454f: mov qword ptr fs:[rdx], rax; ret; 
0x00000000000bbc19: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000013f2b0: mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000bc797: mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x000000000010f614: mov r10, rcx; mov eax, 0x104; syscall; cmp rax, -0xfff; jae 0x10f627; ret; 
0x0000000000062eb4: mov r10, rcx; mov eax, 0x108; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010fe04: mov r10, rcx; mov eax, 0x109; syscall; cmp rax, -0xfff; jae 0x10fe17; ret; 
0x000000000010fec4: mov r10, rcx; mov eax, 0x10b; syscall; cmp rax, -0xfff; jae 0x10fed7; ret; 
0x0000000000113854: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x113870; ret; 
0x00000000001200a4: mov r10, rcx; mov eax, 0x11e; syscall; cmp rax, -0xfff; jae 0x1200b7; ret; 
0x000000000011fb94: mov r10, rcx; mov eax, 0x12d; syscall; cmp rax, -0xfff; jae 0x11fba7; ret; 
0x000000000011f5d4: mov r10, rcx; mov eax, 0x12e; syscall; cmp rax, -0xfff; jae 0x11f5e7; ret; 
0x0000000000120134: mov r10, rcx; mov eax, 0x12f; syscall; cmp rax, -0xfff; jae 0x120147; ret; 
0x0000000000120194: mov r10, rcx; mov eax, 0x136; syscall; cmp rax, -0xfff; jae 0x1201a7; ret; 
0x00000000001201c4: mov r10, rcx; mov eax, 0x137; syscall; cmp rax, -0xfff; jae 0x1201d7; ret; 
0x000000000011fec4: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x11fed7; ret; 
0x00000000001131c4: mov r10, rcx; mov eax, 0x28; syscall; cmp rax, -0xfff; jae 0x1131d7; ret; 
0x00000000001209f4: mov r10, rcx; mov eax, 0x35; syscall; cmp rax, -0xfff; jae 0x120a07; ret; 
0x0000000000120964: mov r10, rcx; mov eax, 0x36; syscall; cmp rax, -0xfff; jae 0x120977; ret; 
0x00000000001204b4: mov r10, rcx; mov eax, 0x37; syscall; cmp rax, -0xfff; jae 0x1204c7; ret; 
0x000000000011ff54: mov r10, rcx; mov eax, 0x9d; syscall; cmp rax, -0xfff; jae 0x11ff67; ret; 
0x000000000011fe94: mov r10, rcx; mov eax, 0xa5; syscall; cmp rax, -0xfff; jae 0x11fea7; ret; 
0x000000000011fd74: mov r10, rcx; mov eax, 0xaf; syscall; cmp rax, -0xfff; jae 0x11fd87; ret; 
0x000000000011ff84: mov r10, rcx; mov eax, 0xb2; syscall; cmp rax, -0xfff; jae 0x11ff97; ret; 
0x000000000011ffb4: mov r10, rcx; mov eax, 0xb3; syscall; cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000011d1c4: mov r10, rcx; mov eax, 0xbc; syscall; cmp rax, -0xfff; jae 0x11d1d7; ret; 
0x000000000011d164: mov r10, rcx; mov eax, 0xbd; syscall; cmp rax, -0xfff; jae 0x11d177; ret; 
0x000000000011d044: mov r10, rcx; mov eax, 0xbe; syscall; cmp rax, -0xfff; jae 0x11d057; ret; 
0x000000000011d074: mov r10, rcx; mov eax, 0xbf; syscall; cmp rax, -0xfff; jae 0x11d087; ret; 
0x000000000011d0d4: mov r10, rcx; mov eax, 0xc0; syscall; cmp rax, -0xfff; jae 0x11d0e7; ret; 
0x000000000011cfb4: mov r10, rcx; mov eax, 0xc1; syscall; cmp rax, -0xfff; jae 0x11cfc7; ret; 
0x0000000000118cf4: mov r10, rcx; mov eax, 0xd8; syscall; cmp rax, -0xfff; jae 0x118d07; ret; 
0x0000000000121374: mov r10, rcx; mov eax, 0xdc; syscall; cmp rax, -0x1000; ja 0x121390; ret; 
0x000000000011fd14: mov r10, rcx; mov eax, 0xe9; syscall; cmp rax, -0xfff; jae 0x11fd27; ret; 
0x00000000001132c4: mov r10d, ecx; mov eax, 0x118; syscall; cmp rax, -0x1000; ja 0x1132e0; ret; 
0x0000000000167b20: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b04: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000004123a: mov r11d, dword ptr [r8 + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000114547: mov r12, 0xffffffffffffffff; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e193: mov r12, rax; mov rax, r12; pop r12; ret; 
0x000000000008e1a0: mov r12, rbp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000012092b: mov r13b, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120027: mov r14d, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fec9b: mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x0000000000118953: mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118966; ret; 
0x000000000009cf77: mov r8, rax; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000153518: mov r8, rax; mov rax, r8; pop rbx; ret; 
0x000000000011ce6a: mov r8, rbx; mov rax, r8; pop rbx; ret; 
0x0000000000087f20: mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000001170e8: mov r8, rdi; mov byte ptr [rdi], 0; mov byte ptr [rip + 0xd867b], 0x23; mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x0000000000117073: mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x0000000000095650: mov r8, rdi; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000120e2b: mov r8b, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000e2b90: mov r8d, 0; cmovne r8, rax; mov rax, r8; ret; 
0x000000000010de10: mov r8d, 0x10c; syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x00000000000c8566: mov r8d, 0xfd83949; xchg ebx, eax; ret; 
0x0000000000088037: mov r8d, 0xffffffff; cmp rax, rcx; jae 0x88045; mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x000000000015d179: mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000102889: mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x000000000008542c: mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000054db0: mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000001576fb: mov r8d, 1; mov dword ptr [rdi + 0x28], eax; mov qword ptr [rdi + 0x18], rsi; mov eax, r8d; ret; 
0x0000000000117559: mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000008cd40: mov r8d, 1; mov eax, r8d; ret; 
0x0000000000117592: mov r8d, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000122e58: mov r8d, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000088042: mov r8d, dword ptr [rax]; mov eax, r8d; ret; 
0x00000000001484d0: mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x0000000000033dfb: mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x0000000000062f0b: mov r8d, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x000000000011f9f7: mov r8d, eax; mov eax, r8d; ret; 
0x00000000000627a3: mov r8d, eax; mov rax, rbx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000055061: mov r9, qword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000018ae83: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893d3: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000118956: mov r9, qword ptr [rsp + 8]; syscall; cmp rax, -0xfff; jae 0x118966; ret; 
0x00000000000bc73a: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x000000000007a170: mov r9, rax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000124b92: mov r9b, 0xc; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000102829: mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000c6b44: mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x000000000010263c: mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000102618: mov r9d, 1; push 0; call 0x102520; add rsp, 0x18; ret; 
0x0000000000043bd9: mov rax, 0xfffffffffffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000013cb60: mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x0000000000042f2e: mov rax, 0xffffffffffffffff; ret; 
0x00000000000cfb20: mov rax, 1; ret; 
0x00000000000cfb30: mov rax, 2; ret; 
0x00000000000cfb40: mov rax, 3; ret; 
0x00000000000cfb50: mov rax, 4; ret; 
0x00000000000cfb60: mov rax, 5; ret; 
0x00000000000cfb70: mov rax, 6; ret; 
0x00000000000cfb80: mov rax, 7; ret; 
0x0000000000094c45: mov rax, qword ptr [0x10]; ret; 
0x00000000001414ec: mov rax, qword ptr [r12]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112b61: mov rax, qword ptr [r13 + 0x10]; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000047577: mov rax, qword ptr [rax + 0x10]; pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000001221f7: mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e7: mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000114e5b: mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x000000000011d250: mov rax, qword ptr [rax + 0x1c8]; ret; 
0x000000000012d07f: mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000014fff0: mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000034485: mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034295: mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000150930: mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000034265: mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003453e: mov rax, qword ptr [rax + 0x58]; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000011d248: mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000009271f: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x000000000014d1b3: mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000011d22a: mov rax, qword ptr [rax + 8]; ret; 
0x000000000009e84a: mov rax, qword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x0000000000055847: mov rax, qword ptr [rax + rcx*8]; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x0000000000034298: mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000033d62: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000d0e91: mov rax, qword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xdf]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0fb1: mov rax, qword ptr [rax]; add rax, qword ptr [rdx + 8]; lea rdx, [rip - 0xef]; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000328ef: mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000034482: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x0000000000034292: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000034262: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000033d5f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328ec: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003447f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000003428f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003425f: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341bf: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000003419f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000003417f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000340ff: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003413f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000003409f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003411f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340df: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003423f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340bf: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003415f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000003407f: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012d0d3: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000000473ca: mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000014141c: mov rax, qword ptr [rax]; ret; 
0x0000000000093548: mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x00000000000578b5: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x0000000000127c5e: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127cae: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cdd4: mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000008b6f7: mov rax, qword ptr [rbx + 0x28]; sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000008cdcc: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x0000000000127c0e: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015345d: mov rax, qword ptr [rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x000000000017ae06: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a76: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ae26: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a96: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017d08e: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ae46: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176ab6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017acd6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769a6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000009c1f8: mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000017d13b: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ac80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017ad80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000176a30: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000017ada0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000176a40: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000017adc0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000176a50: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000017ade0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000176a60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000017ae00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000176a70: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000017ae20: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000176a90: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000017ae40: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000176ab0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000017acd0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000001769a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000176950: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000014ffe4: mov rax, qword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150924: mov rax, qword ptr [rdi + 0x10]; movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000918eb: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000001576c4: mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000de294: mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093e94: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000095902: mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000008ce28: mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000127874: mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127890; mov eax, 1; ret; 
0x000000000008ccf8: mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000918be: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000093854: mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000087494: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x000000000009397a: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x939a8; movzx eax, byte ptr [rax]; ret; 
0x000000000018e8e0: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018fab0: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000018e356: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f986: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x00000000000951f4: mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000094e44: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x94e50; ret; 
0x0000000000095254: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e84: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x0000000000121490: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000093555: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000095224: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x00000000000951d4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b4: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095244: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000094ea4: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e34: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e24: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x00000000000885db: mov rax, qword ptr [rdx + 0x20]; cmp qword ptr [rdx + 8], rax; cmovae rax, qword ptr [rdx + 8]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce15: mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce5: mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000001133e2: mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x0000000000034226: mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000328b0: mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x0000000000150198: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x54], eax; mov eax, 1; ret; 
0x0000000000150168: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0x58], eax; mov eax, 1; ret; 
0x000000000014d3b8: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d388: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x0000000000150a90: mov rax, qword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x0000000000150998: mov rax, qword ptr [rdx]; mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x0000000000150138: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d358: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x00000000000de129: mov rax, qword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000dd148: mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000d1dbb: mov rax, qword ptr [rip + 0x11a086]; movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d0170: mov rax, qword ptr [rip + 0x11bcf9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d0150: mov rax, qword ptr [rip + 0x11bd19]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d0050: mov rax, qword ptr [rip + 0x11be19]; xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000009f824: mov rax, qword ptr [rip + 0x14c635]; lea rdx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f234: mov rax, qword ptr [rip + 0x14cc25]; lea rdx, [rip + 0xe47fe]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000009e954: mov rax, qword ptr [rip + 0x14d515]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000009a0c8: mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009a0be: mov rax, qword ptr [rip + 0x151f1b]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x000000000009942d: mov rax, qword ptr [rip + 0x152a3c]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000098090: mov rax, qword ptr [rip + 0x153dd9]; xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x00000000000961ce: mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000000961c4: mov rax, qword ptr [rip + 0x155e15]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x0000000000095193: mov rax, qword ptr [rip + 0x15711e]; mov dword ptr [r11 + 0x24], ebp; pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x0000000000093834: mov rax, qword ptr [rip + 0x159d65]; ret; 
0x000000000008d340: mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb8: mov rax, qword ptr [rip + 0x160fb1]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000084730: mov rax, qword ptr [rip + 0x167739]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000048330: mov rax, qword ptr [rip + 0x1a3b39]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x0000000000048300: mov rax, qword ptr [rip + 0x1a3b69]; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x0000000000047c58: mov rax, qword ptr [rip + 0x1a4211]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000044079: mov rax, qword ptr [rip + 0x1a7df0]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043f39: mov rax, qword ptr [rip + 0x1a7f30]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043df0: mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043d30: mov rax, qword ptr [rip + 0x1a8139]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043c54: mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000043c38: mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043bf0: mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043ba0: mov rax, qword ptr [rip + 0x1a82c9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043b51: mov rax, qword ptr [rip + 0x1a8318]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043af2: mov rax, qword ptr [rip + 0x1a8377]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000432a0: mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043060: mov rax, qword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f20: mov rax, qword ptr [rip + 0x1a8f49]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000042541: mov rax, qword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004221b: mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000041e5a: mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000412b0: mov rax, qword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000041250: mov rax, qword ptr [rip + 0x1aac19]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x00000000000344c4: mov rax, qword ptr [rip + 0x1b7a1d]; add rax, qword ptr fs:[0]; ret; 
0x00000000000344e4: mov rax, qword ptr [rip + 0x1b7a3d]; add rax, qword ptr fs:[0]; ret; 
0x0000000000033d54: mov rax, qword ptr [rip + 0x1b806d]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000033d10: mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x00000000000328e4: mov rax, qword ptr [rip + 0x1b94dd]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f5a4: mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x00000000000246e8: mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000024404: mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025ab4: mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000025aa4: mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000163654: mov rax, qword ptr [rip + 0x88815]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162ff4: mov rax, qword ptr [rip + 0x88e75]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162fd4: mov rax, qword ptr [rip + 0x88e95]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f94: mov rax, qword ptr [rip + 0x88ed5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f74: mov rax, qword ptr [rip + 0x88ef5]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f54: mov rax, qword ptr [rip + 0x88f15]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f34: mov rax, qword ptr [rip + 0x88f35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160ee4: mov rax, qword ptr [rip + 0x8af85]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x0000000000160cf0: mov rax, qword ptr [rip + 0x8b179]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015cc64: mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000153394: mov rax, qword ptr [rip + 0x98a05]; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000141414: mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000143194: mov rax, qword ptr [rip + 0xad885]; test rax, rax; jne 0x1431a8; ret; 
0x0000000000141d5c: mov rax, qword ptr [rip + 0xaecbd]; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x00000000001300a4: mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x000000000012f630: mov rax, qword ptr [rip + 0xbc839]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000122ad4: mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001202c4: mov rax, qword ptr [rip + 0xcbba5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001221f0: mov rax, qword ptr [rip + 0xcd881]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e0: mov rax, qword ptr [rip + 0xcd891]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011d230: mov rax, qword ptr [rip + 0xcec39]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011c708: mov rax, qword ptr [rip + 0xcf761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001199f0: mov rax, qword ptr [rip + 0xd2479]; mov dword ptr fs:[rax], 0x16; ret; 
0x00000000001199bb: mov rax, qword ptr [rip + 0xd24ae]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011917d: mov rax, qword ptr [rip + 0xd2cec]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000118b18: mov rax, qword ptr [rip + 0xd3351]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000119369: mov rax, qword ptr [rip + 0xd44c0]; pop rcx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118e14: mov rax, qword ptr [rip + 0xd4a0d]; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000116f67: mov rax, qword ptr [rip + 0xd4f02]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000115990: mov rax, qword ptr [rip + 0xd64d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115968: mov rax, qword ptr [rip + 0xd6501]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000115824: mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000114e54: mov rax, qword ptr [rip + 0xd7005]; mov rax, qword ptr [rax + 0x18]; test rax, rax; je 0x114e65; ret; 
0x00000000001145a4: mov rax, qword ptr [rip + 0xd78c5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144e8: mov rax, qword ptr [rip + 0xd7981]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000001144d4: mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000011397b: mov rax, qword ptr [rip + 0xd84ee]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011391a: mov rax, qword ptr [rip + 0xd854f]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000113368: mov rax, qword ptr [rip + 0xd8b01]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000113332: mov rax, qword ptr [rip + 0xd8b37]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b48: mov rax, qword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000112a10: mov rax, qword ptr [rip + 0xd9459]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x0000000000115dad: mov rax, qword ptr [rip + 0xd98bc]; mov qword ptr [rip + 0xd98e5], rax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x0000000000110fc0: mov rax, qword ptr [rip + 0xdaea9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010de58: mov rax, qword ptr [rip + 0xde011]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000010de40: mov rax, qword ptr [rip + 0xde029]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dde4: mov rax, qword ptr [rip + 0xde085]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010dc08: mov rax, qword ptr [rip + 0xde261]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba8: mov rax, qword ptr [rip + 0xde2c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db48: mov rax, qword ptr [rip + 0xde321]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dabd: mov rax, qword ptr [rip + 0xde3ac]; mov eax, dword ptr fs:[rax]; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x000000000010d7c0: mov rax, qword ptr [rip + 0xde6a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d760: mov rax, qword ptr [rip + 0xde709]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d700: mov rax, qword ptr [rip + 0xde769]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d464: mov rax, qword ptr [rip + 0xde9f5]; lea rdx, [rip - 0x72]; test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000fec94: mov rax, qword ptr [rip + 0xed31d]; mov r8, qword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x0000000000123c10: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123b88: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000123b00: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001238c0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001239e0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123690: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123950: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123720: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000001237a0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000123a70: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000123600: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034434: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000034414: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000343f4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034374: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000343b4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000034314: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034394: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000034354: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000342d4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034334: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000343d4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000342f4: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034454: mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000034464: mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000328d0: mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x00000000000a8b00: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x000000000015fc21: mov rax, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x0000000000153c6d: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153cdd: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d4d: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153dae: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e12: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e7d: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f00: mov rax, qword ptr [rsp + 0x68]; xor rax, qword ptr fs:[0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x00000000000349e5: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000048274: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000113277: mov rax, qword ptr [rsp + 8]; add rsp, 0x30; pop rbp; ret; 
0x00000000001211f0: mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000042613: mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000012058f: mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x000000000010c3e3: mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000120655: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbp; ret; 
0x0000000000196eff: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000122b36: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b97: mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000014e783: mov rax, qword ptr [rsp]; jne 0x14e7ea; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000013caa2: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x0000000000094c44: mov rax, qword ptr fs:[0x10]; ret; 
0x00000000001414eb: mov rax, qword ptr fs:[r12]; mov qword ptr [rax + 8], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000033d5e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000000328eb: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003447e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000003428e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003425e: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341be: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000003419e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000003417e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000340fe: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003413e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000003409e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003411e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340de: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003423e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340be: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003415e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000003407e: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012d0d2: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x000000000014141b: mov rax, qword ptr fs:[rax]; ret; 
0x000000000015345c: mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x000000000005b3a2: mov rax, r10; pop rbx; ret; 
0x000000000005b337: mov rax, r10; ret; 
0x00000000000a0b7f: mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x0000000000041243: mov rax, r11; ret; 
0x0000000000041032: mov rax, r12; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000d1cd5: mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x00000000000a0398: mov rax, r12; pop r12; pop r13; ret; 
0x0000000000034b48: mov rax, r12; pop r12; ret; 
0x000000000008c0b5: mov rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000002ff33: mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008e245: mov rax, r12; pop rbp; pop r12; pop r14; ret; 
0x00000000000477a2: mov rax, r12; pop rbp; pop r12; ret; 
0x000000000006272e: mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000080ad0: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22b: mov rax, r12; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000034aaa: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000011942e: mov rax, r12; pop rdx; pop r12; ret; 
0x000000000009efc5: mov rax, r13; mov rdx, r12; pop r12; pop r13; ret; 
0x00000000001419f0: mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000009f9e8: mov rax, r13; pop r12; pop r13; ret; 
0x00000000000828cd: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000bcc00: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x00000000000bcba5: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000107281: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000046c19: mov rax, r8; add qword ptr [rip + 0x1aa6bc], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d4a8f: mov rax, r8; add rsp, 8; ret; 
0x000000000009ef1b: mov rax, r8; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000013c7f9: mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000001170f5: mov rax, r8; mov byte ptr [rsi - 1], 0; ret; 
0x000000000009a49a: mov rax, r8; pop r12; pop r13; ret; 
0x0000000000095655: mov rax, r8; pop r12; ret; 
0x000000000009a506: mov rax, r8; pop r13; ret; 
0x0000000000084832: mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000013b950: mov rax, r8; pop rbp; pop r12; pop r13; ret; 
0x0000000000085916: mov rax, r8; pop rbp; pop r12; ret; 
0x00000000000995a3: mov rax, r8; pop rbp; ret; 
0x000000000009cf7e: mov rax, r8; pop rbx; pop r12; ret; 
0x0000000000082714: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000099cb1: mov rax, r8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046c8b: mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000993ac: mov rax, r8; pop rbx; ret; 
0x0000000000046c80: mov rax, r8; ret; 
0x000000000018d603: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000188c50: mov rax, r8; vzeroupper; ret; 
0x0000000000038ca5: mov rax, r9; pop r12; ret; 
0x000000000007a177: mov rax, r9; pop r14; ret; 
0x000000000007a0c6: mov rax, r9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000038c77: mov rax, r9; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a86ee: mov rax, r9; ret; 
0x000000000008d410: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008f50d: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000008d93e: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a2c39: mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000008d883: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000627a6: mov rax, rbx; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x0000000000047344: mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000047304: mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret; 
0x000000000005b6a3: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x000000000011f0c4: mov rax, rdi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000a8eec: mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005b521: mov rax, rdi; ret; 
0x000000000012fc0d: mov rax, rdi; sar rax, 6; ret; 
0x000000000011f09d: mov rax, rdi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x00000000001785ce: mov rax, rdi; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x00000000001788cc: mov rax, rdi; sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x00000000001788ec: mov rax, rdi; sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x000000000017890c: mov rax, rdi; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000017892e: mov rax, rdi; sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017894e: mov rax, rdi; sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017896e: mov rax, rdi; sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x00000000001787c4: mov rax, rdi; sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x00000000001787e6: mov rax, rdi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000017880c: mov rax, rdi; sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x0000000000178824: mov rax, rdi; sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017884a: mov rax, rdi; sub r8, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017886c: mov rax, rdi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017888a: mov rax, rdi; sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x0000000000178566: mov rax, rdi; sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x00000000001788ac: mov rax, rdi; sub r8, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x000000000018ab20: mov rax, rdi; vzeroupper; ret; 
0x00000000000a1ff3: mov rax, rdx; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015fd1a: mov rax, rdx; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000013cb52: mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000056af4: mov rax, rdx; pop rbx; ret; 
0x0000000000055c45: mov rax, rdx; ret; 
0x0000000000134a91: mov rax, rsi; pop rbx; ret; 
0x00000000000e3668: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000153455: mov rbx, qword ptr [rip + 0x98944]; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x00000000001199da: mov rbx, rdi; mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000119914: mov rbx, rsi; je 0x119920; pop rbx; ret; 
0x0000000000086e55: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000012d2e7: mov rcx, qword ptr [rbp - 8]; xor rcx, qword ptr fs:[0x28]; jne 0x12d3cd; leave; ret; 
0x000000000018fd6d: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000121484: mov rcx, qword ptr [rdi + 8]; xor eax, eax; cmp byte ptr [rcx], 0; je 0x121490; ret; 
0x00000000000e44a4: mov rcx, qword ptr [rip + 0x1079c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4474: mov rcx, qword ptr [rip + 0x1079f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4444: mov rcx, qword ptr [rip + 0x107a25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4414: mov rcx, qword ptr [rip + 0x107a55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b4: mov rcx, qword ptr [rip + 0x107ab5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4384: mov rcx, qword ptr [rip + 0x107ae5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4134: mov rcx, qword ptr [rip + 0x107d35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3184: mov rcx, qword ptr [rip + 0x108ce5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2da4: mov rcx, qword ptr [rip + 0x1090c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b54: mov rcx, qword ptr [rip + 0x109315]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41f4: mov rcx, qword ptr [rip + 0x117c75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41c4: mov rcx, qword ptr [rip + 0x117ca5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000055578: mov rcx, qword ptr [rip + 0x1968f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000439d4: mov rcx, qword ptr [rip + 0x1a8495]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000433e4: mov rcx, qword ptr [rip + 0x1a8a85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000113323: mov rcx, qword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120a07: mov rcx, qword ptr [rip + 0xcb462]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001209d4: mov rcx, qword ptr [rip + 0xcb495]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001209a4: mov rcx, qword ptr [rip + 0xcb4c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120977: mov rcx, qword ptr [rip + 0xcb4f2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001204f4: mov rcx, qword ptr [rip + 0xcb975]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001204c7: mov rcx, qword ptr [rip + 0xcb9a2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120494: mov rcx, qword ptr [rip + 0xcb9d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120464: mov rcx, qword ptr [rip + 0xcba05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120394: mov rcx, qword ptr [rip + 0xcbad5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202a4: mov rcx, qword ptr [rip + 0xcbbc5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120264: mov rcx, qword ptr [rip + 0xcbc05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120234: mov rcx, qword ptr [rip + 0xcbc35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120204: mov rcx, qword ptr [rip + 0xcbc65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201d7: mov rcx, qword ptr [rip + 0xcbc92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201a7: mov rcx, qword ptr [rip + 0xcbcc2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120174: mov rcx, qword ptr [rip + 0xcbcf5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120147: mov rcx, qword ptr [rip + 0xcbd22]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120114: mov rcx, qword ptr [rip + 0xcbd55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200e4: mov rcx, qword ptr [rip + 0xcbd85]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200b7: mov rcx, qword ptr [rip + 0xcbdb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120084: mov rcx, qword ptr [rip + 0xcbde5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120054: mov rcx, qword ptr [rip + 0xcbe15]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120024: mov rcx, qword ptr [rip + 0xcbe45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fff4: mov rcx, qword ptr [rip + 0xcbe75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffc7: mov rcx, qword ptr [rip + 0xcbea2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff97: mov rcx, qword ptr [rip + 0xcbed2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff67: mov rcx, qword ptr [rip + 0xcbf02]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff34: mov rcx, qword ptr [rip + 0xcbf35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff04: mov rcx, qword ptr [rip + 0xcbf65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fed7: mov rcx, qword ptr [rip + 0xcbf92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fea7: mov rcx, qword ptr [rip + 0xcbfc2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe74: mov rcx, qword ptr [rip + 0xcbff5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe44: mov rcx, qword ptr [rip + 0xcc025]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe14: mov rcx, qword ptr [rip + 0xcc055]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fde4: mov rcx, qword ptr [rip + 0xcc085]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fdb4: mov rcx, qword ptr [rip + 0xcc0b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd87: mov rcx, qword ptr [rip + 0xcc0e2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd54: mov rcx, qword ptr [rip + 0xcc115]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd27: mov rcx, qword ptr [rip + 0xcc142]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcf4: mov rcx, qword ptr [rip + 0xcc175]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcc4: mov rcx, qword ptr [rip + 0xcc1a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc94: mov rcx, qword ptr [rip + 0xcc1d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc64: mov rcx, qword ptr [rip + 0xcc205]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc34: mov rcx, qword ptr [rip + 0xcc235]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc04: mov rcx, qword ptr [rip + 0xcc265]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbd4: mov rcx, qword ptr [rip + 0xcc295]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fba7: mov rcx, qword ptr [rip + 0xcc2c2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f614: mov rcx, qword ptr [rip + 0xcc855]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f5e7: mov rcx, qword ptr [rip + 0xcc882]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f554: mov rcx, qword ptr [rip + 0xcc915]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f424: mov rcx, qword ptr [rip + 0xcca45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3f4: mov rcx, qword ptr [rip + 0xcca75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f394: mov rcx, qword ptr [rip + 0xccad5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f35d: mov rcx, qword ptr [rip + 0xccb0c]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f244: mov rcx, qword ptr [rip + 0xccc25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f214: mov rcx, qword ptr [rip + 0xccc55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d1a4: mov rcx, qword ptr [rip + 0xcecc5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d177: mov rcx, qword ptr [rip + 0xcecf2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d144: mov rcx, qword ptr [rip + 0xced25]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0e7: mov rcx, qword ptr [rip + 0xced82]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0b4: mov rcx, qword ptr [rip + 0xcedb5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d087: mov rcx, qword ptr [rip + 0xcede2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d057: mov rcx, qword ptr [rip + 0xcee12]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d024: mov rcx, qword ptr [rip + 0xcee45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cff4: mov rcx, qword ptr [rip + 0xcee75]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfc7: mov rcx, qword ptr [rip + 0xceea2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118dc4: mov rcx, qword ptr [rip + 0xd30a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d94: mov rcx, qword ptr [rip + 0xd30d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d64: mov rcx, qword ptr [rip + 0xd3105]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d34: mov rcx, qword ptr [rip + 0xd3135]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d07: mov rcx, qword ptr [rip + 0xd3162]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118cd4: mov rcx, qword ptr [rip + 0xd3195]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ca4: mov rcx, qword ptr [rip + 0xd31c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118bd4: mov rcx, qword ptr [rip + 0xd3295]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ba4: mov rcx, qword ptr [rip + 0xd32c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118966: mov rcx, qword ptr [rip + 0xd3503]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001158b4: mov rcx, qword ptr [rip + 0xd65b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115884: mov rcx, qword ptr [rip + 0xd65e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115854: mov rcx, qword ptr [rip + 0xd6615]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115514: mov rcx, qword ptr [rip + 0xd6955]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115454: mov rcx, qword ptr [rip + 0xd6a15]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115394: mov rcx, qword ptr [rip + 0xd6ad5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115364: mov rcx, qword ptr [rip + 0xd6b05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115164: mov rcx, qword ptr [rip + 0xd6d05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115014: mov rcx, qword ptr [rip + 0xd6e55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001145d4: mov rcx, qword ptr [rip + 0xd7895]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114414: mov rcx, qword ptr [rip + 0xd7a55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114014: mov rcx, qword ptr [rip + 0xd7e55]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001131d7: mov rcx, qword ptr [rip + 0xd8c92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff64: mov rcx, qword ptr [rip + 0xdbf05]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff34: mov rcx, qword ptr [rip + 0xdbf35]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff04: mov rcx, qword ptr [rip + 0xdbf65]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fed7: mov rcx, qword ptr [rip + 0xdbf92]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fea4: mov rcx, qword ptr [rip + 0xdbfc5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe74: mov rcx, qword ptr [rip + 0xdbff5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe44: mov rcx, qword ptr [rip + 0xdc025]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe17: mov rcx, qword ptr [rip + 0xdc052]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fde4: mov rcx, qword ptr [rip + 0xdc085]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f627: mov rcx, qword ptr [rip + 0xdc842]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f5f4: mov rcx, qword ptr [rip + 0xdc875]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f5c4: mov rcx, qword ptr [rip + 0xdc8a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f594: mov rcx, qword ptr [rip + 0xdc8d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec74: mov rcx, qword ptr [rip + 0xdd1f5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec44: mov rcx, qword ptr [rip + 0xdd225]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb84: mov rcx, qword ptr [rip + 0xdd2e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb54: mov rcx, qword ptr [rip + 0xdd315]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb24: mov rcx, qword ptr [rip + 0xdd345]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eaf4: mov rcx, qword ptr [rip + 0xdd375]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eac4: mov rcx, qword ptr [rip + 0xdd3a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e7a4: mov rcx, qword ptr [rip + 0xdd6c5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010deb4: mov rcx, qword ptr [rip + 0xddfb5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010de84: mov rcx, qword ptr [rip + 0xddfe5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ddc4: mov rcx, qword ptr [rip + 0xde0a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dd94: mov rcx, qword ptr [rip + 0xde0d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc64: mov rcx, qword ptr [rip + 0xde205]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc34: mov rcx, qword ptr [rip + 0xde235]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d604: mov rcx, qword ptr [rip + 0xde865]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001027b4: mov rcx, qword ptr [rip + 0xe96b5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102784: mov rcx, qword ptr [rip + 0xe96e5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102754: mov rcx, qword ptr [rip + 0xe9715]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102724: mov rcx, qword ptr [rip + 0xe9745]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026f4: mov rcx, qword ptr [rip + 0xe9775]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026c4: mov rcx, qword ptr [rip + 0xe97a5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102694: mov rcx, qword ptr [rip + 0xe97d5]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102664: mov rcx, qword ptr [rip + 0xe9805]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b86e4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9554: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8704: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7034: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7014: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000bb1b4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b86a4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9514: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000bb174: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86c4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9534: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000bb194: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bbc12: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x0000000000167ec4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ee0: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680a4: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680c0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168284: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682a0: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168474: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168490: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168674: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168690: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168874: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168890: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000018e35a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018f98a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x000000000016d414: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d384: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d2f4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000018e8dc: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18ed93; xor eax, eax; ret; 
0x000000000018faac: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x18fbd3; xor eax, eax; ret; 
0x0000000000167ce4: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d00: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b8530: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ee0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000000b9380: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, [rdi + 9]; ret; 
0x00000000000b7bd0: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000b93a0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b8540: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b6ef0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b8560: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b93c0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b6f00: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b8580: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000000b93e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b6f10: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000016dd94: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dd24: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dcb4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dc44: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dbd4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016db64: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016daf4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000001893d0: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000000b85a0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9400: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f20: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b85c0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9420: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f30: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b85e0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9440: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f40: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000018a820: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x0000000000115a06: mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x000000000015fc26: mov rcx, qword ptr [rsp + 0x48]; xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000011f2cb: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x000000000015fd1d: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fec6: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x0000000000153bf7: mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000122b31: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b92: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000018fd6c: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000015794c: mov rcx, rax; xor eax, eax; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000a8638: mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000bbf5d: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000bbbf5: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015fa1e: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x00000000000ff515: mov rdi, qword ptr [rbx + 0x28]; call 0x22330; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000137d6c: mov rdi, qword ptr [rbx + 0x48]; test rdi, rdi; jne 0x137d60; pop rbx; ret; 
0x0000000000157f38: mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x0000000000094cc8: mov rdi, qword ptr [rdi + 0x28]; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x000000000014e024: mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x14e030; ret; 
0x0000000000154724: mov rdi, qword ptr [rdi + 0x40]; mov eax, dword ptr [rdi]; test eax, eax; jne 0x154730; ret; 
0x00000000001199dd: mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000122244: mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x1220e0; ret; 
0x0000000000122224: mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x0000000000198dff: mov rdi, qword ptr [rip + 0x5632a]; call 0x22330; pop rbx; mov qword ptr [rip + 0x56319], 0; ret; 
0x00000000001175b4: mov rdi, qword ptr [rip + 0xd81ad]; test rdi, rdi; jne 0x1175d0; mov eax, 1; ret; 
0x00000000000f1ff0: mov rdi, qword ptr [rsi + 0x28]; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000005b622: mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x0000000000041292: mov rdi, rbp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x000000000005b6a6: mov rdi, rdx; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x000000000018d1ce: mov rdi, rsi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018886e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000033c37: mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000e512f: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret; 
0x00000000000e4fff: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret; 
0x000000000013cb67: mov rdx, 0xffffffffffffffff; ret; 
0x0000000000150a93: mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0x10], eax; mov eax, 1; ret; 
0x000000000015099b: mov rdx, qword ptr [r8 + 0x90]; bswap eax; mov dword ptr [rdx + 0xc], eax; mov eax, 1; ret; 
0x00000000000555ff: mov rdx, qword ptr [r8 + rax*8]; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000008cdbb: mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000033d09: mov rdx, qword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x1b80d1]; mov qword ptr [rax], rdx; ret; 
0x000000000008cdb4: mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x000000000011f1e3: mov rdx, qword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ee488: mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee436: mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x0000000000063012: mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000827f3: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000008ce0e: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccde: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000034223: mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f3: mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055065: mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret; 
0x000000000009e924: mov rdx, qword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x0000000000086e14: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x86e10; ret; 
0x00000000000916dc: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x916d8; ret; 
0x0000000000034220: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341f0: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000003421d: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ed: mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e2e80: mov rdx, qword ptr [rip + 0x108fe9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000e2d60: mov rdx, qword ptr [rip + 0x109109]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c8: mov rdx, qword ptr [rip + 0x10dba1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000dd130: mov rdx, qword ptr [rip + 0x10ed39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d4aa0: mov rdx, qword ptr [rip + 0x117391]; xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x00000000000d1090: mov rdx, qword ptr [rip + 0x11add9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0ef0: mov rdx, qword ptr [rip + 0x11af79]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000d0dd8: mov rdx, qword ptr [rip + 0x11b091]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062ed0: mov rdx, qword ptr [rip + 0x188f99]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000062e98: mov rdx, qword ptr [rip + 0x188fd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048280: mov rdx, qword ptr [rip + 0x1a3be9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000434b0: mov rdx, qword ptr [rip + 0x1a89b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000043420: mov rdx, qword ptr [rip + 0x1a8a49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000034542: mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000023a67: mov rdx, qword ptr [rip + 0x1c8422]; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x0000000000162ed0: mov rdx, qword ptr [rip + 0x88f99]; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000162e70: mov rdx, qword ptr [rip + 0x88ff9]; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x000000000012e9e0: mov rdx, qword ptr [rip + 0xbd489]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121468: mov rdx, qword ptr [rip + 0xcaa01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121430: mov rdx, qword ptr [rip + 0xcaa39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213f8: mov rdx, qword ptr [rip + 0xcaa71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213c8: mov rdx, qword ptr [rip + 0xcaaa1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121390: mov rdx, qword ptr [rip + 0xcaad9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001212b8: mov rdx, qword ptr [rip + 0xcabb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121248: mov rdx, qword ptr [rip + 0xcac21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121200: mov rdx, qword ptr [rip + 0xcac69]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121140: mov rdx, qword ptr [rip + 0xcad29]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120e28: mov rdx, qword ptr [rip + 0xcb041]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120d70: mov rdx, qword ptr [rip + 0xcb0f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120928: mov rdx, qword ptr [rip + 0xcb541]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120860: mov rdx, qword ptr [rip + 0xcb609]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001207c0: mov rdx, qword ptr [rip + 0xcb6a9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120700: mov rdx, qword ptr [rip + 0xcb769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120660: mov rdx, qword ptr [rip + 0xcb809]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001205a0: mov rdx, qword ptr [rip + 0xcb8c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120420: mov rdx, qword ptr [rip + 0xcba49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120350: mov rdx, qword ptr [rip + 0xcbb19]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa60: mov rdx, qword ptr [rip + 0xcc409]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f9ce: mov rdx, qword ptr [rip + 0xcc49b]; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x000000000011f980: mov rdx, qword ptr [rip + 0xcc4e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f8d8: mov rdx, qword ptr [rip + 0xcc591]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f810: mov rdx, qword ptr [rip + 0xcc659]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f760: mov rdx, qword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6b0: mov rdx, qword ptr [rip + 0xcc7b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f520: mov rdx, qword ptr [rip + 0xcc949]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f3c8: mov rdx, qword ptr [rip + 0xccaa1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000121f1e: mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000011c6f0: mov rdx, qword ptr [rip + 0xcf779]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000118c60: mov rdx, qword ptr [rip + 0xd3209]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116f28: mov rdx, qword ptr [rip + 0xd4f41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ef8: mov rdx, qword ptr [rip + 0xd4f71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ec0: mov rdx, qword ptr [rip + 0xd4fa9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd8: mov rdx, qword ptr [rip + 0xd5191]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115550: mov rdx, qword ptr [rip + 0xd6919]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001154d0: mov rdx, qword ptr [rip + 0xd6999]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115410: mov rdx, qword ptr [rip + 0xd6a59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115210: mov rdx, qword ptr [rip + 0xd6c59]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114878: mov rdx, qword ptr [rip + 0xd75f1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001147b8: mov rdx, qword ptr [rip + 0xd76b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114700: mov rdx, qword ptr [rip + 0xd7769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000114660: mov rdx, qword ptr [rip + 0xd7809]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144b3: mov rdx, qword ptr [rip + 0xd7a0e]; mov qword ptr [rdx], rax; cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x00000000001143e0: mov rdx, qword ptr [rip + 0xd7a89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113fe0: mov rdx, qword ptr [rip + 0xd7e89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113fa0: mov rdx, qword ptr [rip + 0xd7ec9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dd8: mov rdx, qword ptr [rip + 0xd8091]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001138a8: mov rdx, qword ptr [rip + 0xd85c1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113870: mov rdx, qword ptr [rip + 0xd85f9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113838: mov rdx, qword ptr [rip + 0xd8631]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113578: mov rdx, qword ptr [rip + 0xd88f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113530: mov rdx, qword ptr [rip + 0xd8939]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113480: mov rdx, qword ptr [rip + 0xd89e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113320: mov rdx, qword ptr [rip + 0xd8b49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001132e0: mov rdx, qword ptr [rip + 0xd8b89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113288: mov rdx, qword ptr [rip + 0xd8be1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000112be0: mov rdx, qword ptr [rip + 0xd9289]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ec00: mov rdx, qword ptr [rip + 0xdd269]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ea80: mov rdx, qword ptr [rip + 0xdd3e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e368: mov rdx, qword ptr [rip + 0xddb01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e338: mov rdx, qword ptr [rip + 0xddb31]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e2f0: mov rdx, qword ptr [rip + 0xddb79]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e250: mov rdx, qword ptr [rip + 0xddc19]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010de28: mov rdx, qword ptr [rip + 0xde041]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010dbf0: mov rdx, qword ptr [rip + 0xde279]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db90: mov rdx, qword ptr [rip + 0xde2d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010db30: mov rdx, qword ptr [rip + 0xde339]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7a8: mov rdx, qword ptr [rip + 0xde6c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d748: mov rdx, qword ptr [rip + 0xde721]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6e8: mov rdx, qword ptr [rip + 0xde781]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c4a0: mov rdx, qword ptr [rip + 0xdf9c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c3f0: mov rdx, qword ptr [rip + 0xdfa79]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000102880: mov rdx, qword ptr [rip + 0xe95e9]; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102820: mov rdx, qword ptr [rip + 0xe9649]; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x00000000000b7d24: mov rdx, qword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7074: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7094: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000016dd90: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dd20: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dcb0: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000016dc40: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9403: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f23: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000bb063: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000016dbd0: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85c3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b9423: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b6f33: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000bb083: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000016db60: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85e3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000000b9443: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f43: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000bb0a3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000016daf0: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000018b553: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c73: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a823: mov rdx, qword ptr [rsi + r8 - 8]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000328a0: mov rdx, qword ptr [rsi + rax*8]; lea rax, [rip + 0x181ad2]; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000016d5a0: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d520: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d4a0: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d410: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d380: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d2f0: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167b24: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168478: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168678: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168878: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b08: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168494: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168694: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168894: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b40: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d620: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b8520: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b9370: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x00000000000b6ed0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000b77a0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000bafd0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x000000000010ff9e: mov rdx, qword ptr [rsi]; xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x00000000000a8a48: mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x0000000000122b2c: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b8d: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000a8970: mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x000000000013caa6: mov rdx, qword ptr [rsp + 8]; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x000000000003421c: mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000341ec: mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x58]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000009efc8: mov rdx, r12; pop r12; pop r13; ret; 
0x0000000000093545: mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x93540; ret; 
0x000000000005b61f: mov rdx, rdi; mov rdi, rax; cmp rdx, rcx; jae 0x5b60c; mov rax, r8; ret; 
0x00000000000bbf64: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000a8e28: mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000033c2c: mov rsi, qword ptr [rdi + 0x78]; mov qword ptr fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret; 
0x00000000000bbc17: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000018fd6a: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000015f462: mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000011614c: mov rsi, rax; test rax, rax; jne 0x116114; xor eax, eax; pop rbp; ret; 
0x0000000000117070: mov rsi, rcx; mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000000dcfb4: mov rsi, rdi; xor edi, edi; call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x000000000005b4d0: mov rsp, rdx; ret; 
0x000000000018fd8f: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000a04c0: mov spl, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xeb3d5; cmove rax, rdx; ret; 
0x000000000018fd99: mov word ptr [r9 - 2], cx; ret; 
0x00000000000a8abb: mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8aab: mov word ptr [rax + 4], dx; ret; 
0x00000000000531aa: mov word ptr [rax + riz*4], fs; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000b76f0: mov word ptr [rax], cs; add byte ptr [rax], al; ret; 
0x00000000000a8a6d: mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x0000000000151b47: mov word ptr [rax], es; add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000a8a60: mov word ptr [rax], si; ret; 
0x00000000000e3188: mov word ptr [rax], ss; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000074f47: mov word ptr [rbp - 0x7400000f], ds; test dword ptr [rax], edx; idiv edi; inc dword ptr [rcx]; ret; 
0x0000000000184d76: mov word ptr [rbp - 0x7d000000], ss; rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000042836: mov word ptr [rbp - 0x7f000000], es; sti; push rax; ret; 
0x00000000001789e2: mov word ptr [rcx + 4], dx; ret; 
0x0000000000178a23: mov word ptr [rcx + 8], dx; ret; 
0x00000000001789b0: mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x00000000001789a0: mov word ptr [rcx], dx; ret; 
0x00000000000b862c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b900c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b949c: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f7c: mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b78ec: mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000bb0fc: mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x0000000000113eab: mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000b8734: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b9194: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b95a4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b7064: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b7a04: mov word ptr [rdi + 0x18], cx; sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000bb204: mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000016e037: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000000a8b83: mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b9b: mov word ptr [rdi + 4], ax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000481e8: mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x00000000000b84f8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x00000000000b9348: mov word ptr [rdi + 4], dx; lea rax, [rdi + 6]; ret; 
0x00000000000a89fe: mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a89e6: mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7768: mov word ptr [rdi + 4], dx; sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000bafa8: mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b93aa: mov word ptr [rdi + 8], dx; lea rax, [rdi + 0xa]; ret; 
0x00000000000b854a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000000b8eca: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000000b6efa: mov word ptr [rdi + 8], dx; ret; 
0x00000000000b77ea: mov word ptr [rdi + 8], dx; sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000bb00a: mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000018b51c: mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c3c: mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7ec: mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000053e9f: mov word ptr [rdi + rax*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000bc05e: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x000000000018be93: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000bbc38: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000001680dc: mov word ptr [rdi - 2], cx; ret; 
0x0000000000167ef4: mov word ptr [rdi - 2], dx; ret; 
0x00000000001680d8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000a8b35: mov word ptr [rdi], ax; movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018ae33: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x00000000000b84c3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000000b6e83: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000b7703: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b9306: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, [rdi + 3]; ret; 
0x00000000000b7b76: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000baf66: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x000000000018b519: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c39: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7e9: mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x0000000000190466: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000000bc063: mov word ptr [rdi], cx; ret; 
0x000000000018be98: mov word ptr [rdi], cx; vzeroupper; ret; 
0x00000000000a8990: mov word ptr [rdi], dx; add rax, rdi; ret; 
0x00000000000b84b3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000000b8dc3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000018ae23: mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000000b92f3: mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x000000000018b503: mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189c23: mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a8c0: mov word ptr [rdi], dx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x00000000000a89a8: mov word ptr [rdi], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000b6e73: mov word ptr [rdi], dx; ret; 
0x000000000018a6a3: mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0x18a930; vzeroupper; ret; 
0x00000000000b76e3: mov word ptr [rdi], dx; sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x0000000000189393: mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000baf53: mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000a8b20: mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x000000000018fd96: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000000bbc3d: mov word ptr [rdi], si; ret; 
0x000000000010c990: mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000014d305: mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000017ad58: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000000b3a4d: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000178868: mov word ptr [rdx + 4], ax; mov rax, rdi; sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x00000000000b3ad1: mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000017ad03: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000017ad13: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000000b39f8: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000000b39e8: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000001787e3: mov word ptr [rdx], ax; mov rax, rdi; sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x00000000001221d5: mov word ptr [rdx], ax; ret; 
0x00000000001131db: mov word ptr [rip + 0x64d8f700], cs; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112a09: mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x0000000000048191: mov word ptr [rsi + 0xc], ax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000004819a: mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000190469: mov word ptr [rsi - 2], cx; ret; 
0x000000000004814b: mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000010c977: mov word ptr [rsi], ax; xor eax, eax; ret; 
0x000000000009f0f0: mov word ptr [rsi], gs; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000041cd5: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; fld xword ptr [rsp + 8]; ret; 
0x0000000000041d98: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c15: mov word ptr [rsp - 0x10], ax; fstp xword ptr [rdi]; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000041c5e: mov word ptr [rsp - 0x10], ax; mov qword ptr [rsp - 0x18], 0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057ccb: mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000bbc37: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000009f65c: movabs al, byte ptr [0x2559058d48000e92]; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000bcaec: movabs al, byte ptr [0x2879058d48000d05]; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x0000000000087497: movabs al, byte ptr [0x30788348000000]; je 0x874a8; ret; 
0x00000000000a8bdc: movabs al, byte ptr [0x3819058d48000dbf]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000024197: movabs al, byte ptr [0x441f0f66000e]; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x000000000008ce11: movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce1: movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000114398: movabs al, byte ptr [0x5d5be08944000000]; pop r12; ret; 
0x0000000000142409: movabs al, byte ptr [0x5d5be0894c000000]; pop r12; ret; 
0x000000000018bb1b: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000000b1445: movabs al, byte ptr [0x82048b8a0c8b000e]; sub eax, ecx; ret; 
0x000000000005ff34: movabs al, byte ptr [0x8304768b41000000]; ret; 
0x000000000005ff60: movabs al, byte ptr [0x8324348b41000000]; ret; 
0x000000000007a3b3: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000008e58c: movabs al, byte ptr [0xb74c08548ffffff]; pop rbx; ret; 
0x00000000000827f6: movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000000be529: movabs al, byte ptr [0xeb8087b8bfffffc]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000009b1ae: movabs byte ptr [0x11ec803d8d480011], al; add al, ch; ret; 
0x00000000001204ca: movabs byte ptr [0x18964d8f7000cb9], al; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffca: movabs byte ptr [0x18964d8f7000cbe], al; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfca: movabs byte ptr [0x18964d8f7000cee], al; or rax, 0xffffffffffffffff; ret; 
0x000000000004349a: movabs byte ptr [0x480824448b000511], al; add esp, 0x18; ret; 
0x0000000000042a0a: movabs byte ptr [0x5b18c48348001504], al; pop rbp; ret; 
0x000000000017ccca: movabs byte ptr [0x8348013880000002], al; fdivr st(7); ret; 
0x0000000000079d69: movabs byte ptr [0x859ce8d78948fffb], al; cli; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000042909: movabs dword ptr [0x15246ee800179e], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000423fd: movabs dword ptr [0x17a31905560f0017], eax; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17af79]; ret; 
0x00000000000423d8: movabs dword ptr [0x17a35e05560f0017], eax; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x000000000009f0e9: movabs dword ptr [0x2e8c158d480001a8], eax; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x00000000001493b9: movabs dword ptr [0x5b20c48348000000], eax; pop rbp; pop r12; ret; 
0x00000000000ea412: movabs dword ptr [0x7428017b800673d6], eax; adc al, 0x3c; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000134720: movabs dword ptr [0x889456401000bbb], eax; add rsp, 0x18; ret; 
0x0000000000131940: movabs dword ptr [0x889456401000be6], eax; add rsp, 0x18; ret; 
0x00000000000832e2: movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000d4eb2: movabs dword ptr [0xf00000896830fc7], eax; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000014c422: movabs eax, dword ptr [0x1989416401000a48]; mov rax, r8; pop rbx; ret; 
0x00000000001213cb: movabs eax, dword ptr [0x28964d8f7000caa]; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f3cb: movabs eax, dword ptr [0x28964d8f7000cca]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de2cb: movabs eax, dword ptr [0x28964d8f70010db]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000e2fcb: movabs eax, dword ptr [0x415de88944fffb1a]; pop rsp; pop r13; ret; 
0x0000000000125bf3: movabs eax, dword ptr [0x4c1989416401000c]; mov eax, eax; pop rbx; ret; 
0x00000000001548cb: movabs eax, dword ptr [0x7504388364000975]; ret; 
0x000000000018a870: movabs eax, dword ptr [0x77f8c5e0075c7f7e]; ret; 
0x000000000018a8f5: movabs eax, dword ptr [0x77f8c5f007447f7a]; ret; 
0x000000000018a850: movabs eax, dword ptr [0x77f8c5f0075c7f7a]; ret; 
0x00000000000e8160: movabs eax, dword ptr [0x845c748fff3]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000115acb: movabs eax, dword ptr [0xf0e083c019000d63]; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000014e7eb: movabs eax, dword ptr [0xfa1e0ff390fffe14]; ret; 
0x000000000004814e: movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000041fc0: movabs rax, 0x8000000000000000; and rdx, rax; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f90: movabs rax, 0x8000000000000000; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000042104: movapd xmm0, xmm1; ret; 
0x0000000000042105: movaps xmm0, xmm1; ret; 
0x00000000000d1dc2: movaps xmmword ptr [rax], xmm0; add rsp, 0x10; pop rbp; ret; 
0x00000000000d1fe8: movaps xmmword ptr [rax], xmm0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000004260e: movaps xmmword ptr [rsp - 0x18], xmm0; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042295: movd eax, mm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000041ee0: movd eax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042294: movd eax, xmm0; and eax, 0x7f800000; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000041ec0: movd edx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000042275: movd edx, mm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000042274: movd edx, xmm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000116f9a: movd mm0, eax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000420ea: movd mm0, eax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004244f: movd mm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x000000000004216f: movd mm0, eax; ret; 
0x0000000000047cde: movd mm0, eax; xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000423f6: movd mm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d1: movd mm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a355]; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042046: movd mm0, ecx; ret; 
0x0000000000042319: movd mm0, edx; mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000041f60: movd mm0, edx; ret; 
0x0000000000042308: movd mm0, esi; ret; 
0x0000000000041fb0: movd mm1, eax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x000000000002716f: movd mm1, esi; movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000116f9f: movd mm1, esi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000027173: movd mm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000004244e: movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000424cb: movd xmm0, eax; ret; 
0x00000000000423f5: movd xmm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a330]; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d0: movd xmm0, ecx; andps xmm0, xmmword ptr [rip + 0x17a355]; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042318: movd xmm0, edx; mov dword ptr [rdi], edx; subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000042307: movd xmm0, esi; ret; 
0x000000000002716e: movd xmm1, esi; movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000027172: movd xmm3, eax; punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000042a05: movdqa xmm0, xmm1; call 0x192eb0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042b36: movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000042ab4: movdqa xmm0, xmm2; pop rbp; ret; 
0x000000000005b121: movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000429f0: movdqa xmm0, xmmword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004288a: movdqa xmm0, xmmword ptr [rsp]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x00000000000428a8: movdqa xmm1, xmm0; call 0x192eb0; add rsp, 0x10; pop rbx; ret; 
0x0000000000042aac: movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x000000000014ffe8: movdqu xmm0, xmmword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150928: movdqu xmm0, xmmword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484fa: movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000001509b0: movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d288: movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b9470: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c50: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b8620: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9490: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f70: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b8660: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b8640: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f90: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b86e0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9550: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7030: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7010: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b86a0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9510: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b86c0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9530: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7110: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8780: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9610: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b9460: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8600: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8610: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f60: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6f50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b78a0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000013c83f: movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000001509c0: movdqu xmm1, xmmword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d298: movdqu xmm1, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000148540: movdqu xmm1, xmmword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x00000000001509e0: movdqu xmm2, xmmword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000b7114: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8784: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9614: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000bb274: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b70f4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000001509f0: movdqu xmm3, xmmword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509d0: movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c90b: movdqu xmm6, xmmword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c95b: movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2ed: movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c914: movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d269: movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c964: movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2f9: movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000016da81: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfc6: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87ed: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b92ad: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b965d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e30: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2e0: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b711d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2bd: movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016e0f1: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e081: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e011: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dfa1: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df31: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dec1: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de51: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dde1: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd71: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd01: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc91: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc21: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbb1: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db41: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dad1: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da77: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b8074: movdqu xmmword ptr [rdi + 0x20], xmm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98c4: movdqu xmmword ptr [rdi + 0x20], xmm6; sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b98d3: movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8083: movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000bb333: movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000016dd0f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc9f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc2f: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbbf: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b878d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b921d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b95fd: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70bd: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a8d: movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb25d: movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000016db4f: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87ad: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b924d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b961d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70dd: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7abd: movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb27d: movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000016dadf: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87cd: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b927d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b963d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70fd: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7aed: movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb29d: movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000016e0ff: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e08f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e01f: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dfaf: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df3f: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016decf: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de5f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddef: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd7f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000bbfcb: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bbf2c: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfd1: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x000000000016d26b: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016d2db: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016da16: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d996: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d906: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d886: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d806: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d786: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d706: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d686: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d606: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d586: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d506: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d486: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3f6: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d366: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2d6: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d261: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016da07: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d987: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d8f7: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d877: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d7f7: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d777: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6f7: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d677: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d577: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4f7: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d477: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3e7: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d357: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2c7: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d257: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000000b7f30: movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b9464: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8604: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8fc4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b9477: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c57: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d7: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8614: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f64: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b78c4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8667: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8687: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b94fa: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7caa: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb15a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b6fa7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b7927: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000bb137: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b8647: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f97: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7907: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000bb117: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b86e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9558: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8708: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7038: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7018: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b79a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb1b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b957b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b874b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b707b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bb21b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b876b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bb23b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b872c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb1fc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b86a8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9518: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b7968: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb178: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86c8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9538: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7988: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb198: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b8628: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9498: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f78: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b78e8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000bb0f8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bbfc2: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87e9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b9659: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e2c: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2dc: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b7119: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b8789: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a89: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb259: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b87a9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9619: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7ab9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb279: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b87c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b9639: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7ae9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb299: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b6f54: movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b78a4: movdqu xmmword ptr [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c4: movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000016dae4: movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000008aebc: movhps xmm0, qword ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000057d9f: movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000b3b32: movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b52: movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b72: movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b39bc: movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b67a3: movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3aa9: movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac9: movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae9: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b09: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3966: movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b39b8: movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b29: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b49: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b69: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b9: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b673a: movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3aa5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b05: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3962: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3b25: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b45: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b65: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6736: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b39af: movlpd xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2d: movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4d: movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6d: movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66bd: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b679e: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39b3: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b33: movlps qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b53: movlps qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b73: movlps qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b39bd: movlps qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b67a4: movlps qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3aaa: movlps qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3aca: movlps qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3aea: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b0a: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3967: movlps qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b39b9: movlps qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66ba: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b673b: movlps qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3aa6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000b3ac6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000000b3ae6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x00000000000b3b06: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000000b3963: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b3b26: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b46: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b66: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66b6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b6737: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b39b0: movlps xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b3b2e: movlps xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000b3b4e: movlps xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x00000000000b3b6e: movlps xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x00000000000b66be: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b679f: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39b4: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000042a24: movmskps eax, xmm0; and eax, 8; ret; 
0x0000000000093588: movntps xmmword ptr [rax + 0x18], xmm2; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000042a06: movq mm0, mm1; call 0x192eb0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000042b37: movq mm0, mm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x0000000000042ab5: movq mm0, mm2; pop rbp; ret; 
0x000000000014ffe9: movq mm0, qword ptr [rax + 0x30]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000150929: movq mm0, qword ptr [rax + 0x40]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001484fb: movq mm0, qword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000001509b1: movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d289: movq mm0, qword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b9471: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c51: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000b8621: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9491: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f71: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b8661: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b6fa1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b8641: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f91: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b86e1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9551: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7031: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7011: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b86a1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9511: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b86c1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9531: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7111: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8781: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9611: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b9461: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8601: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8611: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f61: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b6f51: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b78a1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000013c840: movq mm0, qword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000005b122: movq mm0, qword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000429f1: movq mm0, qword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004288b: movq mm0, qword ptr [rsp]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000116f99: movq mm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000420e9: movq mm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004216e: movq mm0, rax; ret; 
0x0000000000047cdd: movq mm0, rax; xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042045: movq mm0, rcx; ret; 
0x0000000000041f5f: movq mm0, rdx; ret; 
0x00000000000428a9: movq mm1, mm0; call 0x192eb0; add rsp, 0x10; pop rbx; ret; 
0x00000000001509c1: movq mm1, qword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d299: movq mm1, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001509c2: movq mm1, qword ptr [rax + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d29a: movq mm1, qword ptr [rax + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000148541: movq mm1, qword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000041faf: movq mm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000116f9e: movq mm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042aad: movq mm2, mm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret; 
0x00000000001509e1: movq mm2, qword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000b7115: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8785: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b87a5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b9615: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70d5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000bb275: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b70f5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000001509f1: movq mm3, qword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509f2: movq mm3, qword ptr [rax + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509d1: movq mm4, qword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x00000000001509d2: movq mm4, qword ptr [rax + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000010c90c: movq mm6, qword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c95c: movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2ee: movq mm6, qword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c915: movq mm7, qword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d26a: movq mm7, qword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c965: movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2fa: movq mm7, qword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000016da82: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfc7: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87ee: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b92ae: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000000b965e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e31: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2e1: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b711e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x00000000000bb2be: movq qword ptr [rdi + 0x10], mm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000016e0f2: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e082: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e012: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dfa2: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df32: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dec2: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de52: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dde2: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd72: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd02: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc92: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc22: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbb2: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016db42: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dad2: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016da78: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000b8075: movq qword ptr [rdi + 0x20], mm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98c5: movq qword ptr [rdi + 0x20], mm6; sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b98d4: movq qword ptr [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8084: movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000bb334: movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000016dd10: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dca0: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dc30: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbc0: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b878e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b921e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b95fe: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70be: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000000b7a8e: movq qword ptr [rdi + 0xd], mm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb25e: movq qword ptr [rdi + 0xd], mm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000016db50: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87ae: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b924e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b961e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70de: movq qword ptr [rdi + 0xe], mm2; ret; 
0x00000000000b7abe: movq qword ptr [rdi + 0xe], mm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb27e: movq qword ptr [rdi + 0xe], mm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000016dae0: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b87ce: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b927e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x00000000000b963e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70fe: movq qword ptr [rdi + 0xf], mm2; ret; 
0x00000000000b7aee: movq qword ptr [rdi + 0xf], mm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb29e: movq qword ptr [rdi + 0xf], mm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000016e100: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e090: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016e020: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dfb0: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016df40: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ded0: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016de60: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016ddf0: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dd80: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000bbfcc: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000bbf2d: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbfd2: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000016d26c: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000016d2dc: movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016da17: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d997: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d907: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d887: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d807: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d787: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d707: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d687: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d607: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d587: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d507: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d487: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3f7: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d367: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2d7: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d262: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000016da08: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d988: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d8f8: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d878: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d7f8: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d778: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d6f8: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d678: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d578: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d4f8: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d478: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d3e8: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d358: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d2c8: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000016d258: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000000b7f31: movq qword ptr [rdi - 1], mm0; ret; 
0x00000000000b9465: movq qword ptr [rdi], mm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b8605: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b8fc5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b9478: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, [rdi + 0x11]; ret; 
0x00000000000b7c58: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000bb0d8: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000b8615: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f65: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000b78c5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8668: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b94d8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x14]; ret; 
0x00000000000b8688: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x00000000000b6fb8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000000b94fb: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, [rdi + 0x15]; ret; 
0x00000000000b7cab: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000bb15b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b6fa8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b7928: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000bb138: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000b8648: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b94b8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b6f98: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7908: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000bb118: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000b86e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9559: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x18]; ret; 
0x00000000000b8709: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000000b7039: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000b7019: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b79a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000bb1b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000b957c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000bb1dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000b874c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b95bc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b707c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bb21c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000b876c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bb23c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000b872d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000bb1fd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000b86a9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000000b9519: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b6fd9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b7969: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000bb179: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000b86c9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b9539: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b6ff9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7989: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000bb199: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000b8629: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000000b9499: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b6f79: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b78e9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000bb0f9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bbfc3: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000000b87ea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b965a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7e2d: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000bb2dd: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000b711a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000bb2ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000b878a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a8a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb25a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b87aa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b961a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b70da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b7aba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000bb27a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000b87ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b963a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b70fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7aea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000bb29a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b6f55: movq qword ptr [rdi], mm0; ret; 
0x00000000000b78a5: movq qword ptr [rdi], mm0; sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000bb0c5: movq qword ptr [rdi], mm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000016dae5: movq qword ptr [rdi], mm1; ret; 
0x0000000000041edf: movq rax, mm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ede: movq rax, xmm0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ebf: movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000041ebe: movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000116f98: movq xmm0, rax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000420e8: movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004216d: movq xmm0, rax; ret; 
0x0000000000047cdc: movq xmm0, rax; xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042044: movq xmm0, rcx; ret; 
0x0000000000041f5e: movq xmm0, rdx; ret; 
0x0000000000041fae: movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000116f9d: movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000198720: movsb byte ptr [rdi], byte ptr [rsi]; add eax, 0x8b486400; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bbb6e: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000001385e8: movsb byte ptr [rdi], byte ptr [rsi]; mov edx, 0x89480000; ret; 
0x0000000000121e69: movsb byte ptr [rdi], byte ptr [rsi]; or al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000121e9a: movsb byte ptr [rdi], byte ptr [rsi]; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000bbb60: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000009c1e8: movsb byte ptr [rdi], byte ptr [rsi]; sub al, 0x15; add byte ptr [rbx + 0x22], dh; lea rax, [rax - 8]; ret; 
0x00000000000a1c84: movsd dword ptr [rdi], dword ptr [rsi]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000007b9ae: movsd dword ptr [rdi], dword ptr [rsi]; clc; idiv bh; dec dword ptr [rbp + 0x63]; ret; 
0x00000000000d41c7: movsd dword ptr [rdi], dword ptr [rsi]; jl 0xd41db; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000421ab: movsd dword ptr [rdi], dword ptr [rsi]; nop dword ptr [rax]; endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000121e43: movsd dword ptr [rdi], dword ptr [rsi]; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000121e5c: movsd dword ptr [rdi], dword ptr [rsi]; or al, 0; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x00000000001465aa: movsd dword ptr [rdi], dword ptr [rsi]; or al, byte ptr [rax]; add rsp, 8; ret; 
0x00000000001465d6: movsd dword ptr [rdi], dword ptr [rsi]; or al, byte ptr [rax]; ret; 
0x0000000000056382: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000011fcc7: movsd dword ptr [rdi], dword ptr [rsi]; ror dword ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010eac7: movsd dword ptr [rdi], dword ptr [rsi]; ror dword ptr [rip + 0x64d8f700], cl; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118dc7: movsd dword ptr [rdi], dword ptr [rsi]; xor byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000048006: movsd qword ptr [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041f57: movsd qword ptr [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x000000000004207e: movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042058: movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x00000000000d029c: movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000015f469: movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000042348: movss dword ptr [rdi], xmm0; cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000042303: movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x00000000001974ac: movss xmm0, dword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000009f325: movsx eax, dl; ret; 
0x00000000000a884c: movsx ecx, byte ptr [rdi + rax]; cmp ecx, edx; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x000000000005ea1e: movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x5ea08; mov eax, r8d; ret; 
0x00000000000a8814: movsx edx, byte ptr [rdi + rax]; cmp edx, esi; je 0xa8810; ret; 
0x0000000000148969: movsxd rax, dword ptr [rdi + 0x18]; cmp eax, 3; jbe 0x148980; mov eax, 2; ret; 
0x000000000014d276: movsxd rax, dword ptr [rdi + rcx*4]; add rax, rdi; notrack jmp rax; xor eax, eax; ret; 
0x0000000000047862: movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x0000000000183ca0: movsxd rax, ecx; add rax, rdi; ret; 
0x0000000000183aae: movsxd rax, ecx; ret; 
0x0000000000160c8c: movsxd rax, ecx; shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000121d15: movsxd rbx, ebx; mov qword ptr [rip + 0xca641], rbx; pop rbx; ret; 
0x0000000000121cfb: movsxd rbx, ebx; mov qword ptr [rip + 0xca65b], rbx; pop rbx; ret; 
0x00000000000b8120: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d0: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000bac4c: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b6e4c: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000183ae2: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000034458: movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000033d5b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000003428b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000003425b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341bb: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000003419b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000003417b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000340fb: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000003413b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000003409b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000003411b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340db: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000003423b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340bb: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000003415b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000003407b: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000034438: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000034418: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000343f8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034378: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000343b8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000034318: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034398: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000034358: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x00000000000342d8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000034338: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000343d8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000342f8: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000013c724: movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000013cb55: movsxd rdx, ecx; ret; 
0x0000000000093e74: movsxd rdx, edx; call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x000000000013c558: movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000004207f: movups xmm0, xmmword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042059: movups xmm0, xmmword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x00000000001974ad: movups xmm0, xmmword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x00000000000bbaeb: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000d029d: movups xmm0, xmmword ptr [rsp - 0x10]; ret; 
0x00000000000bbaee: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbcac: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbd53: movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbdda: movups xmmword ptr [r11], xmm8; ret; 
0x000000000008b854: movups xmmword ptr [r12 + 0xf0], xmm0; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000001509e9: movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000001509b6: movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x000000000014d28e: movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000001509ea: movups xmmword ptr [rax + 0x20], xmm2; ret; 
0x00000000000874fa: movups xmmword ptr [rax + 0x30], xmm0; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001509b7: movups xmmword ptr [rax + 0x30], xmm0; ret; 
0x0000000000087cc9: movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x000000000014d28f: movups xmmword ptr [rax + 8], xmm0; ret; 
0x0000000000141d97: movups xmmword ptr [rax], xmm0; add rsp, 8; ret; 
0x0000000000086ea2: movups xmmword ptr [rax], xmm0; ret; 
0x00000000000926be: movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000008e552: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000009e900: movups xmmword ptr [rbx + 0x18], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x000000000008e556: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x00000000001278fb: movups xmmword ptr [rbx + 0x30], xmm0; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091e5e: movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000091f05: movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000919c5: movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000008e54e: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x000000000008e655: movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000048007: movups xmmword ptr [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bbddb: movups xmmword ptr [rbx], xmm0; ret; 
0x00000000000bbd54: movups xmmword ptr [rbx], xmm4; ret; 
0x00000000000bbd46: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4a: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4f: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd4e: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x00000000000bbd43: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000010c51d: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb4: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbdce: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000015790d: movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000010c521: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd2: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b3c: movups xmmword ptr [rdi + 0x28], xmm0; movups xmmword ptr [rdi + 0x38], xmm0; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c525: movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbdd6: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000043b40: movups xmmword ptr [rdi + 0x38], xmm0; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c529: movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x0000000000043b44: movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000043b48: movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000092784: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000043b4c: movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000010c960: movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010c969: movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2f2: movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d2fe: movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x00000000000918fb: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000013c843: movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x00000000000bbaf6: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000000bbcb8: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbc8b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbcbd: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbc90: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc95: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000000bbc9a: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000041f58: movups xmmword ptr [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret; 
0x0000000000042349: movups xmmword ptr [rdi], xmm0; cmp ecx, 0x80; jne 0x42360; test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000057da4: movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000042304: movups xmmword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000010c51a: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; movups xmmword ptr [rdi + 0x40], xmm0; ret; 
0x00000000000bbcb1: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000000bbaf3: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000043f35: movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000bbdcb: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x000000000002717e: movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000014d2a3: movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001500eb: movups xmmword ptr [rdx], xmm2; ret; 
0x00000000001509fb: movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509db: movups xmmword ptr [rdx], xmm4; ret; 
0x00000000001133de: movups xmmword ptr [rsi + 0x58], xmm0; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000010c910: movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010d265: movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0xf8]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c919: movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000100456: movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000014854b: movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000047c28: movups xmmword ptr [rsi], xmm0; lea rax, [r9 + r8*4]; mov qword ptr [rsi + 0x10], r9; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000014ffed: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000015092d: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000014d1b0: movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000479c3: movups xmmword ptr [rsi], xmm0; sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000008b855: movups xmmword ptr [rsp + 0xf0], xmm0; add rsp, 0x28; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000014e046: movzx eax, al; add eax, 1; ret; 
0x0000000000157daf: movzx eax, al; add rsp, 0x18; ret; 
0x000000000010fdb5: movzx eax, al; add rsp, 0x58; ret; 
0x000000000014a364: movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ce093: movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000e51fe: movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000052b37: movzx eax, al; neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e6b: movzx eax, al; neg eax; pop rbp; ret; 
0x00000000000246dc: movzx eax, al; neg eax; ret; 
0x0000000000149f8d: movzx eax, al; pop r12; ret; 
0x0000000000148e33: movzx eax, al; pop rbp; pop r12; ret; 
0x000000000008dfdd: movzx eax, al; pop rbx; neg eax; ret; 
0x000000000014a2fa: movzx eax, al; pop rbx; pop rbp; ret; 
0x0000000000043c2f: movzx eax, al; ret; 
0x00000000000ac8c4: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000094c91: movzx eax, al; sub eax, 2; add rsp, 8; ret; 
0x0000000000034089: movzx eax, ax; ret; 
0x00000000000ec465: movzx eax, byte ptr [r9 + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000001840f2: movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018400c: movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa55d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183fa7: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fd0: movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183ff0: movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000184457: movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000014b0b2: movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000529e9: movzx eax, byte ptr [rax + rdx]; mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000009299f: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008b4e3: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000091b40: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000032844: movzx eax, byte ptr [rax]; cmp al, 0xff; cmovne edx, eax; lea rax, [rip + 0x1bb24d]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x000000000008b643: movzx eax, byte ptr [rax]; pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008df56: movzx eax, byte ptr [rax]; ret; 
0x00000000000ec466: movzx eax, byte ptr [rcx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000e81d9: movzx eax, byte ptr [rdi + 1]; add rdi, 1; test al, al; jne 0xe8191; xor eax, eax; ret; 
0x000000000013baa0: movzx eax, byte ptr [rdi + 1]; lea rax, [rdi + rax + 2]; cmp rdx, rax; sbb eax, eax; ret; 
0x000000000013c93a: movzx eax, byte ptr [rdi + 1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x0000000000102a90: movzx eax, byte ptr [rdi + 9]; and eax, 0xf; ret; 
0x0000000000185294: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001852b4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018527a: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000017e24b: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000185004: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e44: movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e64: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e84: movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000001882cd: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x131e8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000186918: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x14b9d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001839fd: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x17ab8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a38: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x19a7d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001752dd: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x261d8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d78: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x2873d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b143d: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0xea078]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aede8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0xec6cd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a13e9: movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000aa3f3: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183e2a: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa388: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000001922d0: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000192330: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000192320: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000192310: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000192300: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922f0: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001922e0: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000019268a: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x192805; xor eax, eax; ret; 
0x000000000018e660: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e413: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000001922b7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000001463db: movzx eax, byte ptr [rdi]; add eax, ecx; sub rdx, 1; jne 0x146368; ret; 
0x000000000013f1ee: movzx eax, byte ptr [rdi]; lea rcx, [rdi + 1]; test al, al; jne 0x13f1dd; mov eax, r10d; ret; 
0x0000000000186933: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x14b83]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000183a23: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x17a93]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000181a53: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x19a63]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000175303: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x261b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000172d93: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x28723]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000b1463: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0xea053]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000aee03: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0xec6b3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000185080: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000ac8a1: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000aa3a3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000184633: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x00000000000bc736: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000a8b9f: movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000001993a0: movzx eax, byte ptr [rsp + 0xf]; add rsp, 0x10; pop rbx; ret; 
0x00000000000a8b66: movzx eax, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a8b38: movzx eax, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000bc148: movzx eax, cl; pop rbx; ret; 
0x00000000000bbf61: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000271f5: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000012fd0c: movzx eax, di; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000bc0f8: movzx eax, dl; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x00000000000bbf60: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000271f4: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000014d2fd: movzx eax, word ptr [r8 + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000014d2fe: movzx eax, word ptr [rax + 0x88]; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x0000000000034489: movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000341c2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000341a2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000034182: movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x0000000000034102: movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000034142: movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000340a2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000034122: movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000340e2: movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x0000000000034242: movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000340c2: movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000034162: movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x0000000000034082: movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000012d0d6: movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x000000000010c974: movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000001221c9: movzx eax, word ptr [rdx]; cmp ax, -1; je 0x122200; add eax, 1; mov word ptr [rdx], ax; ret; 
0x00000000000a8b7e: movzx eax, word ptr [rsp - 0x14]; mov word ptr [rdi + 4], ax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000bc793: movzx ecx, byte ptr [rsi + rcx]; mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000bb4da: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb58a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb580; ret; 
0x00000000000bb84a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x00000000000aa384: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000aa646: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x0000000000184127: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x184110; sub eax, ecx; vzeroupper; ret; 
0x000000000018460c: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x1845f0; sub eax, ecx; vzeroupper; ret; 
0x000000000018e664: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000012df06: movzx ecx, byte ptr [rsi]; mov byte ptr [rax + 1], cl; test cl, cl; jne 0x12deb8; mov rax, rdi; ret; 
0x00000000000bbc0c: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000aa3a0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000184630: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000185083: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000bbc30: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000018ae30: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a7e0: movzx ecx, word ptr [rsi]; movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000012fd10: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000120fdf: movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012fd0f: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000011f0c8: movzx edx, bh; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000013c678: movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000009c268: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x0000000000040fb8: movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x000000000014b0ab: movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x000000000013c679: movzx edx, byte ptr [rdx + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000001840f7: movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000184011: movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa561: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000183fab: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fd5: movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183ff5: movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018445b: movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x00000000000bb6fa: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x0000000000185299: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001852b9: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000018527f: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000186bb8: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x148fd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001854cf: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x15fe6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181d38: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x1977d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000018012f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x1b386]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000017e24f: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000185008: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e49: movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e69: movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e89: movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000000aa3f7: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000183e2e: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000017ee8e: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x17ee98; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fe73: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x17fe7d; xchg edx, eax; sub eax, edx; ret; 
0x00000000001922d4: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000192334: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000192324: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000192314: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000192304: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922f4: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001922e4: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000016da30: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000018e417: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000001922bb: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000018b4f0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000189c10: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; mov byte ptr [rdi + 1], 0; vzeroupper; ret; 
0x000000000016e110: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000018a7c0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000ac8a4: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000a8a02: movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8abf: movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8a8e: movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a89c9: movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a8a70: movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a89ab: movzx edx, byte ptr [rsp - 6]; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000bc190: movzx edx, cl; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x000000000011f0c7: movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000ac8ca: movzx edx, dl; sub eax, edx; ret; 
0x000000000018b513: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c33: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7e3: movzx edx, word ptr [rsi + r8 - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000018b514: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c34: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a7e4: movzx edx, word ptr [rsi + rax - 2]; mov word ptr [rdi], cx; mov word ptr [rdi + r8 - 2], dx; vzeroupper; ret; 
0x000000000016d9b0: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000018ae20: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000018b500: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189c20: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016e0a0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000189390: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000a89f9: movzx edx, word ptr [rsp + 0x14]; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8ab6: movzx edx, word ptr [rsp + 0xc]; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a89e1: movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a8aa6: movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8a68: movzx edx, word ptr [rsp - 8]; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8619: movzx esi, byte ptr [rcx]; test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x000000000012fd78: movzx esi, dh; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000012fd5b: movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000136558: movzx esi, si; push 2; call 0x135ad0; add rsp, 0x18; ret; 
0x000000000012fd77: movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000000bbc35: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000000529e8: movzx r8, byte ptr [rax + r10]; mov edx, 6; mov byte ptr [rip + 0x19bc6d], al; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x000000000008b4e2: movzx r8d, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000008b642: movzx r8d, byte ptr [rax]; pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x00000000000bc735: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000bc792: movzx r9d, byte ptr [rsi + rcx]; mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000b19f7: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000018d1d0: mul dword ptr [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000042069: mulps xmm0, xmm1; ret; 
0x00000000000420ee: mulps xmm0, xmmword ptr [rip + 0x17abfb]; ret; 
0x0000000000042453: mulps xmm0, xmmword ptr [rip + 0x17af36]; ret; 
0x0000000000042408: mulps xmm0, xmmword ptr [rip + 0x17af79]; ret; 
0x00000000000423e3: mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x00000000000420ed: mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x0000000000042068: mulsd xmm0, xmm1; ret; 
0x0000000000042452: mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x0000000000042407: mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423e2: mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000052b3a: neg eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000433eb: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000043427: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048287: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144cf: neg eax; mov dword ptr fs:[rdx], eax; mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x0000000000102887: neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000102827: neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x000000000018bfbf: neg eax; or eax, 1; vzeroupper; ret; 
0x000000000004225b: neg eax; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000041e98: neg eax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000425a3: neg eax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000ec7da: neg eax; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000062e6e: neg eax; pop rbp; ret; 
0x000000000013f6b3: neg eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000246df: neg eax; ret; 
0x00000000000cf18b: neg ecx; cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf16a: neg ecx; cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x00000000000dcff2: neg edx; cmp eax, -0x16; mov eax, 3; cmovne eax, edx; ret; 
0x0000000000112d10: neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret; 
0x00000000000cf18a: neg r9d; cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf169: neg r9d; cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x0000000000041e97: neg rax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000425a2: neg rax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000cfaf8: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000009a758: nop dword ptr [rax + rax]; add rsp, 0x18; ret; 
0x00000000000832e3: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000145b2b: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000024e03: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000148e3b: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000014b363: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000420f8: nop dword ptr [rax + rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004245b: nop dword ptr [rax + rax]; addss xmm0, xmm0; ret; 
0x00000000000ec49b: nop dword ptr [rax + rax]; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000042328: nop dword ptr [rax + rax]; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac178: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000017eeab: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000184d9b: nop dword ptr [rax + rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000ac648: nop dword ptr [rax + rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000057d5b: nop dword ptr [rax + rax]; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002419b: nop dword ptr [rax + rax]; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000091f38: nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000146468: nop dword ptr [rax + rax]; endbr64; mov eax, 1; ret; 
0x0000000000148c9b: nop dword ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x000000000008cd4b: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000004409b: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rip + 0x1a80fe]; ret; 
0x000000000016367b: nop dword ptr [rax + rax]; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937eb: nop dword ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x00000000000de28b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000093848: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000951eb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x0000000000093828: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x000000000002f598: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x00000000000243fb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1c7a65]; add rax, qword ptr fs:[0]; ret; 
0x0000000000025a98: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x000000000015cc5b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000013009b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xbbdad]; add rax, qword ptr fs:[0]; ret; 
0x0000000000122acb: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xc9385]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011581b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000012221b: nop dword ptr [rax + rax]; endbr64; mov rdi, qword ptr [rdx + 0xa8]; xor esi, esi; call 0x1220e0; ret; 
0x000000000009381b: nop dword ptr [rax + rax]; endbr64; ret; 
0x00000000000342bb: nop dword ptr [rax + rax]; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014647b: nop dword ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000041dcb: nop dword ptr [rax + rax]; fld xword ptr [rsp + 8]; fadd st(0); ret; 
0x0000000000191058: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000191068: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000191078: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000191088: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000191098: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000190fe8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000190ff8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000191008: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000191018: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000191028: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000191038: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000191048: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cf648: nop dword ptr [rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf668: nop dword ptr [rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cf658: nop dword ptr [rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000328b8: nop dword ptr [rax + rax]; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec478: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000ec48b: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000b8498: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e58: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000b84bb: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000014d31b: nop dword ptr [rax + rax]; mov dword ptr [r8 + 4], 1; mov eax, 1; ret; 
0x00000000001789e8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001789d8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000001789b8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x00000000000a8b48: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e98: nop dword ptr [rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b58: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000baf4b: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000f2498: nop dword ptr [rax + rax]; mov eax, 0xc; ret; 
0x0000000000062e73: nop dword ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000440d8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000192e1b: nop dword ptr [rax + rax]; mov eax, 1; jg 0x192e30; neg eax; ret; 
0x000000000009e858: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x00000000000ff75b: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000026f53: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140ed3: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0xaf8e6]; test eax, eax; je 0x140ee8; ret; 
0x000000000012fd23: nop dword ptr [rax + rax]; mov eax, edi; and eax, 0xffffff; ret; 
0x0000000000125b7b: nop dword ptr [rax + rax]; mov eax, r8d; ret; 
0x00000000000b7b9b: nop dword ptr [rax + rax]; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b6e8b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a8a83: nop dword ptr [rax + rax]; mov edx, dword ptr [rsp - 0x10]; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x0000000000178a28: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a38: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a48: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a58: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a68: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a78: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x0000000000178a18: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001789f8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7ea8: nop dword ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7ee8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7ef8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f08: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f18: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000018a8db: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + r8 - 8], rdx; vzeroupper; ret; 
0x00000000000b7ed8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7eb8: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000013f2a8: nop dword ptr [rax + rax]; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000001573eb: nop dword ptr [rax + rax]; mov r8d, 1; mov eax, r8d; ret; 
0x00000000001484cb: nop dword ptr [rax + rax]; mov r8d, dword ptr [rdi + 0x30]; test r8d, r8d; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x00000000000cfb28: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x00000000000cfb38: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x00000000000cfb48: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x00000000000cfb58: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x00000000000cfb68: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000000cfb78: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x000000000009c1f3: nop dword ptr [rax + rax]; mov rax, qword ptr [rcx + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000008ce23: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf3: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000dd143: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043c33: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1a8231]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000246e3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000011c703: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b43: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010de3b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde029]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc03: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde261]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde2c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db43: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde321]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d7bb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde6a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d75b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde709]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d6fb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0xde769]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000328c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x000000000011ce73: nop dword ptr [rax + rax]; mov rax, r8; ret; 
0x000000000018d6bb: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000188d08: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x00000000000b812b: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000018b858: nop dword ptr [rax + rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000000b852b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000000b6eeb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000ee483: nop dword ptr [rax + rax]; mov rdx, qword ptr [rdi + 0x70]; xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000001211fb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcac69]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000120923: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcb541]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f8d3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc591]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f80b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc659]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f6ab: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc7b9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011c6eb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcf779]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113dd3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd8091]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113283: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd8be1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010e24b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xddc19]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010db2b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde339]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d7a3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde6c1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d743: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde721]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010d6e3: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde781]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b6ecb: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a43: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a896b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000a8988: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a8a8: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000014d283: nop dword ptr [rax + rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 8], xmm0; ret; 
0x00000000000b7f28: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f38: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000013c553: nop dword ptr [rax + rax]; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi + rdx], 0; ret; 
0x000000000019232b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000019231b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000019230b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000001922fb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000001922eb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000001922db: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000018507b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000018939b: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a7bb: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x0000000000146b25: nop dword ptr [rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178984: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e44: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b4: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b34: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000ac6e5: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001257c6: nop dword ptr [rax + rax]; nop; endbr64; ret; 
0x0000000000190fd7: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fc7: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b7e67: nop dword ptr [rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e77: nop dword ptr [rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb17: nop dword ptr [rax + rax]; nop; mov rax, 1; ret; 
0x0000000000178996: nop dword ptr [rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e56: nop dword ptr [rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf356: nop dword ptr [rax + rax]; nop; xor rax, rax; ret; 
0x000000000008e65b: nop dword ptr [rax + rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000009e403: nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000000926db: nop dword ptr [rax + rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x000000000010c723: nop dword ptr [rax + rax]; pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x0000000000148dd3: nop dword ptr [rax + rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116fab: nop dword ptr [rax + rax]; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000002fd63: nop dword ptr [rax + rax]; ret; 
0x000000000008ad3b: nop dword ptr [rax + rax]; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3b: nop dword ptr [rax + rax]; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000093593: nop dword ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092a23: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x0000000000087df3: nop dword ptr [rax + rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000140ee3: nop dword ptr [rax + rax]; sub rsp, 8; call 0x140970; or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x0000000000026f63: nop dword ptr [rax + rax]; sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x00000000000a09eb: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a067b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a051b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012db0b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbcb: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc8b: nop dword ptr [rax + rax]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x00000000000a059b: nop dword ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000012dd0b: nop dword ptr [rax + rax]; test eax, eax; lea rdx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x00000000001849db: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000189e28: nop dword ptr [rax + rax]; vzeroupper; ret; 
0x0000000000184e08: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0c8: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000046798: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000018461b: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000042173: nop dword ptr [rax + rax]; xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000000a285b: nop dword ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08b: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000cfaec: nop dword ptr [rax]; add rax, 1; ret; 
0x0000000000146bac: nop dword ptr [rax]; add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000000871b5: nop dword ptr [rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000009f8e9: nop dword ptr [rax]; add rsp, 8; ret; 
0x000000000014b3f5: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000018edbc: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000004235c: nop dword ptr [rax]; and esi, 0x80000000; movd xmm0, esi; ret; 
0x00000000000ac169: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x00000000000ac189: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac15c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x00000000000ac1ac: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce38c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000184dad: nop dword ptr [rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000184dbd: nop dword ptr [rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret; 
0x00000000000ac7bd: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac659: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x00000000000ac669: nop dword ptr [rax]; bsr eax, eax; lea rax, [rax + rdi + 0x30]; ret; 
0x0000000000095525: nop dword ptr [rax]; cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000157c1c: nop dword ptr [rax]; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000012bfac: nop dword ptr [rax]; endbr64; cmp edi, 0x56; je 0x12bfc0; mov eax, 7; ret; 
0x0000000000091e79: nop dword ptr [rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x91e90; ret; 
0x00000000000241ac: nop dword ptr [rax]; endbr64; lea rax, [rip + 0x191abc]; ret; 
0x000000000010c9ac: nop dword ptr [rax]; endbr64; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x0000000000094c9c: nop dword ptr [rax]; endbr64; mov eax, 0x18; syscall; ret; 
0x000000000010dd6c: nop dword ptr [rax]; endbr64; mov eax, 0x5f; syscall; ret; 
0x00000000000e40dc: nop dword ptr [rax]; endbr64; mov eax, 0x66; syscall; ret; 
0x00000000000e40fc: nop dword ptr [rax]; endbr64; mov eax, 0x68; syscall; ret; 
0x00000000000e40ec: nop dword ptr [rax]; endbr64; mov eax, 0x6b; syscall; ret; 
0x00000000000e410c: nop dword ptr [rax]; endbr64; mov eax, 0x6c; syscall; ret; 
0x00000000000e40cc: nop dword ptr [rax]; endbr64; mov eax, 0x6e; syscall; ret; 
0x00000000000479ed: nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000155ecd: nop dword ptr [rax]; endbr64; mov eax, 1; ret; 
0x00000000001544dc: nop dword ptr [rax]; endbr64; mov eax, 2; ret; 
0x000000000009355c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000157b3d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x28]; ret; 
0x00000000001138bc: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x000000000008cd7d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x00000000000de2dc: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; ret; 
0x000000000008defd: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x000000000004408d: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rip + 0x1a8112]; ret; 
0x00000000001471ac: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rip + 0xa99c2]; test eax, eax; je 0x1471c0; ret; 
0x00000000000342ac: nop dword ptr [rax]; endbr64; mov eax, edi; and eax, 0x7f; ret; 
0x000000000012fcdc: nop dword ptr [rax]; endbr64; mov eax, edi; bswap eax; ret; 
0x000000000012fce9: nop dword ptr [rax]; endbr64; mov eax, edi; rol ax, 8; ret; 
0x000000000013a7bc: nop dword ptr [rax]; endbr64; mov edi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x0000000000043c4c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x1a8215]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000025aac: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x1cb6ed]; ret; 
0x0000000000162fcc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x88e95]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000015338d: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x98a05]; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000011459d: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0xd78c5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x0000000000094c3c: nop dword ptr [rax]; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000004733d: nop dword ptr [rax]; endbr64; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000093859: nop dword ptr [rax]; endbr64; mov rax, rdi; ret; 
0x000000000004262d: nop dword ptr [rax]; endbr64; pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000421ac: nop dword ptr [rax]; endbr64; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000023eed: nop dword ptr [rax]; endbr64; ret; 
0x00000000000bbf4d: nop dword ptr [rax]; endbr64; test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000b1d5c: nop dword ptr [rax]; endbr64; test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x0000000000094cac: nop dword ptr [rax]; endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000937fc: nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x000000000008cd5c: nop dword ptr [rax]; endbr64; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd6d: nop dword ptr [rax]; endbr64; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x000000000009c209: nop dword ptr [rax]; lea rax, [rdx - 0x10]; ret; 
0x00000000000d0fd4: nop dword ptr [rax]; lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0ec4: nop dword ptr [rax]; lea rax, [rip - 0x10f]; ret; 
0x00000000000d0fe4: nop dword ptr [rax]; lea rax, [rip - 0x11f]; ret; 
0x00000000000d0eb4: nop dword ptr [rax]; lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x00000000001769bd: nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000a8a51: nop dword ptr [rax]; mov byte ptr [rax], 0; ret; 
0x00000000000a8625: nop dword ptr [rax]; mov byte ptr [rcx - 1], 0; mov qword ptr [rdx], rcx; ret; 
0x000000000017898c: nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000ec449: nop dword ptr [rax]; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000b7e4c: nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x000000000018a89c: nop dword ptr [rax]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x00000000000a897c: nop dword ptr [rax]; mov byte ptr [rdi], sil; add rax, rdi; ret; 
0x00000000000b7b4c: nop dword ptr [rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000a8a79: nop dword ptr [rax]; mov dword ptr [rax], ecx; ret; 
0x000000000018a8cd: nop dword ptr [rax]; mov dword ptr [rdi], edx; mov dword ptr [rdi + r8 - 4], edx; vzeroupper; ret; 
0x00000000000a89b4: nop dword ptr [rax]; mov dword ptr [rdi], r8d; add rax, rdi; ret; 
0x00000000000b92e9: nop dword ptr [rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; ret; 
0x0000000000063025: nop dword ptr [rax]; mov eax, 0x10; ret; 
0x000000000013cbd9: nop dword ptr [rax]; mov eax, 0x7fffffff; ret; 
0x00000000000e5014: nop dword ptr [rax]; mov eax, 0xfc17; ret; 
0x00000000000e5144: nop dword ptr [rax]; mov eax, 0xff; ret; 
0x0000000000090d3c: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x00000000000cf079: nop dword ptr [rax]; mov eax, 1; jg 0xcf089; neg eax; ret; 
0x000000000010c78c: nop dword ptr [rax]; mov eax, 1; pop rbx; ret; 
0x000000000011657c: nop dword ptr [rax]; mov eax, 1; ret; 
0x000000000013c399: nop dword ptr [rax]; mov eax, 2; ret; 
0x00000000000ee32d: nop dword ptr [rax]; mov eax, dword ptr [rbp + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000878cd: nop dword ptr [rax]; mov eax, dword ptr [rcx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017ad2c: nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000087eac: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x00000000000cefcd: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x1c]; cmp eax, dword ptr [rsi + 0x1c]; jne 0xcf080; ret; 
0x00000000000cef6d: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0xc]; cmp eax, dword ptr [rsi + 0xc]; jne 0xcf080; ret; 
0x0000000000192d2d: nop dword ptr [rax]; mov eax, dword ptr [rdi - 4]; cmp eax, dword ptr [rsi - 4]; jne 0x192e20; ret; 
0x000000000012fdb4: nop dword ptr [rax]; mov eax, edi; shr eax, 0x18; ret; 
0x00000000000b6ebd: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000016d89c: nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001684ac: nop dword ptr [rax]; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001686ac: nop dword ptr [rax]; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001688ac: nop dword ptr [rax]; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018ae4d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000000b931c: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 4]; ret; 
0x00000000000b7b7d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000baf7d: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x0000000000123324: nop dword ptr [rax]; mov esi, eax; and esi, dword ptr [rdx + 0x10]; lea rdx, [rdx + rsi*4]; add eax, dword ptr [rdx + rcx]; ret; 
0x000000000013cb59: nop dword ptr [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret; 
0x000000000011d24d: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x1c8]; ret; 
0x000000000011d241: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000017ac7d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000017694d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000014d3b4: nop dword ptr [rax]; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb4], eax; mov eax, 1; ret; 
0x000000000014d384: nop dword ptr [rax]; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [r8 + 0xb8], eax; mov eax, 1; ret; 
0x000000000008d339: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x15eb29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000008aeb4: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x160fb1]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000047c55: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a4211]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043de9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a8079]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043be9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a8279]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000043299: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x1a8bc9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012f629: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xbc839]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001221d9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xcd891]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x0000000000118b11: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd3351]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000115961: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd6501]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001144e5: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd7981]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000113364: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xd8b01]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000010de54: nop dword ptr [rax]; mov rax, qword ptr [rip + 0xde011]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000b67bc: nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000bc1bd: nop dword ptr [rax]; mov rax, rdx; pop rbx; ret; 
0x00000000000b7bdd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b6f0d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b6f1d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a8635: nop dword ptr [rax]; mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000e2e7c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x108fe9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000de2c4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x10dba1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000d0dd4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x11b091]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000062e94: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x188fd1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121464: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcaa01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213f4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcaa71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213c4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcaaa1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001212b4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcabb1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000121244: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcac21]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012113d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcad29]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120e25: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb041]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000120d6d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb0f9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012085c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb609]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001206fc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcb769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012034c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcbb19]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011fa5c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcc409]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f75d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcc709]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f51c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xcc949]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f3c4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xccaa1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000118c5c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd3209]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116f24: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd4f41]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116ef4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd4f71]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000116cd4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd5191]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000114875: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd75f1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001147b5: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd76b1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001146fc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7769]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011465c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7809]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113f9d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd7ec9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001138a4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd85c1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113574: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd88f1]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011352c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8939]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011347d: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd89e9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011331c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd8b49]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000112bdc: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xd9289]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e364: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xddb01]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e334: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xddb31]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c49c: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xdf9c9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c3ec: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0xdfa79]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000016d59c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d40c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d37c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167b3c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016d61c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016ddf9: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a8a5c: nop dword ptr [rax]; mov word ptr [rax], si; ret; 
0x00000000000a8b19: nop dword ptr [rax]; mov word ptr [rdi], si; lea rax, [rdi + rdx - 1]; ret; 
0x00000000001509ad: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rdx]; mov eax, esi; movups xmmword ptr [r8 + 0x30], xmm0; ret; 
0x00000000000b6f6c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f8c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b700c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000b6fcd: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000b6fec: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b860d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000000b6f59: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000001509bc: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [r8 + 0x30]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d294: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014853d: nop dword ptr [rax]; movdqu xmm1, xmmword ptr [rdi + 0x20]; mov dword ptr [rsi], 6; movups xmmword ptr [rsi + 8], xmm1; ret; 
0x0000000000183c9d: nop dword ptr [rax]; movsxd rax, ecx; add rax, rdi; ret; 
0x0000000000102a8d: nop dword ptr [rax]; movzx eax, byte ptr [rdi + 9]; and eax, 0xf; ret; 
0x00000000001922cd: nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000018d7bd: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000bc141: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x00000000000aa39d: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000016da2c: nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000016e109: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000016d9ac: nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000018b4fd: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000189c1d: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000016e099: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000189389: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000092714: nop dword ptr [rax]; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x0000000000094d34: nop dword ptr [rax]; or dword ptr [rdi + 8], 1; xor eax, eax; ret; 
0x00000000000928d5: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000038f24: nop dword ptr [rax]; ret; 
0x00000000000ce089: nop dword ptr [rax]; setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x00000000000cf60d: nop dword ptr [rax]; test rax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x00000000001886cd: nop dword ptr [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018a8ec: nop dword ptr [rax]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x00000000000d0165: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x00000000000ee471: nop dword ptr [rax]; xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000040fc1: nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001888ed: nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000117e24: nop dword ptr [rax]; xor eax, eax; xchg dword ptr [rip + 0xd7a20], eax; cmp eax, 1; jg 0x117e36; ret; 
0x000000000013f1fd: nop dword ptr [rax]; xor r10d, r10d; mov eax, r10d; ret; 
0x000000000015770c: nop dword ptr [rax]; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000008274d: nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cfaf7: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x00000000000420f7: nop dword ptr cs:[rax + rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042327: nop dword ptr cs:[rax + rax]; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x0000000000146467: nop dword ptr cs:[rax + rax]; endbr64; mov eax, 1; ret; 
0x0000000000093827: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000025a97: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000146b37: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000146b47: nop dword ptr cs:[rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000191057: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000191067: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000191077: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000191087: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000191097: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000190fe7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000190ff7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000191007: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000191017: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000191027: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000191037: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000191047: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cf647: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf667: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cf657: nop dword ptr cs:[rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000328b7: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec477: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000001789d7: nop dword ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000000a8b47: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e97: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b57: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000087f67: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009e857: nop dword ptr cs:[rax + rax]; mov eax, 1; ret; 
0x00000000001789f7: nop dword ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7eb7: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000013f2a7: nop dword ptr cs:[rax + rax]; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000b92c7: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000018a8a7: nop dword ptr cs:[rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b7f37: nop dword ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000146b24: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178983: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e43: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b3: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b33: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000ac6e4: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001257c5: nop dword ptr cs:[rax + rax]; nop; endbr64; ret; 
0x0000000000190fd6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fc6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b7e66: nop dword ptr cs:[rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e76: nop dword ptr cs:[rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb16: nop dword ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000178995: nop dword ptr cs:[rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e55: nop dword ptr cs:[rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf355: nop dword ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x00000000000ee467: nop dword ptr cs:[rax + rax]; ret; 
0x0000000000184e07: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0c7: nop dword ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000046797: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000cf677: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000009a757: nop word ptr [rax + rax]; add rsp, 0x18; ret; 
0x0000000000024e02: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000148e3a: nop word ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000ec49a: nop word ptr [rax + rax]; and edx, 4; je 0xec43c; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ac177: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000184d9a: nop word ptr [rax + rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000000ac647: nop word ptr [rax + rax]; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000057d5a: nop word ptr [rax + rax]; bts rax, 0x30; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000002419a: nop word ptr [rax + rax]; endbr64; lea rax, [rip + 0x18fcf3]; ret; 
0x0000000000091f37: nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000148caa: nop word ptr [rax + rax]; endbr64; mov eax, 2; ret; 
0x000000000008cd4a: nop word ptr [rax + rax]; endbr64; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x000000000016367a: nop word ptr [rax + rax]; endbr64; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret; 
0x00000000000937ea: nop word ptr [rax + rax]; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000093847: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000951ea: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x2000000; jbe 0x95200; ret; 
0x000000000015cc5a: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x8f205]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011581a: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xd6645]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000009381a: nop word ptr [rax + rax]; endbr64; ret; 
0x00000000000342ba: nop word ptr [rax + rax]; endbr64; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x000000000014647a: nop word ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x00000000000ec48a: nop word ptr [rax + rax]; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000b8497: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e57: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000001789e7: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001789b7: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x00000000000baf4a: nop word ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000062e72: nop word ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000440d7: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000000ff75a: nop word ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000026f52: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x1c69f6]; test eax, eax; je 0x26f68; ret; 
0x0000000000140ed2: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0xaf8e6]; test eax, eax; je 0x140ee8; ret; 
0x0000000000125b7a: nop word ptr [rax + rax]; mov eax, r8d; ret; 
0x00000000000b6e8a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000178a37: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a47: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a17: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000000b7ea7: nop word ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7ef7: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f07: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7ed7: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000008ce22: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000008ccf2: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000dd142: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x10ed21]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000246e2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x1c7781]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000011c702: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xcf761]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000112b42: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xd9321]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000010de3a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde029]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dc02: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde261]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010dba2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde2c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010db42: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde321]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d7ba: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde6a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d75a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde709]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d6fa: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0xde769]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000011ce72: nop word ptr [rax + rax]; mov rax, r8; ret; 
0x0000000000188d07: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x000000000018b857: nop word ptr [rax + rax]; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6eea: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000001211fa: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcac69]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000011f8d2: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xcc591]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113dd2: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd8091]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000113282: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xd8be1]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010d742: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0xde721]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a8987: nop word ptr [rax + rax]; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018939a: nop word ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000018a7ba: nop word ptr [rax + rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; vzeroupper; ret; 
0x000000000009e402: nop word ptr [rax + rax]; pop rbp; ret; 
0x00000000000926da: nop word ptr [rax + rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000148dd2: nop word ptr [rax + rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000116faa: nop word ptr [rax + rax]; pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042de7: nop word ptr [rax + rax]; ret; 
0x000000000008ad3a: nop word ptr [rax + rax]; shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae3a: nop word ptr [rax + rax]; shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000093592: nop word ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000092a22: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x0000000000087df2: nop word ptr [rax + rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x00000000000a059a: nop word ptr [rax + rax]; test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000012dd0a: nop word ptr [rax + rax]; test eax, eax; lea rdx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x0000000000189e27: nop word ptr [rax + rax]; vzeroupper; ret; 
0x000000000008a2ba: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000018461a: nop word ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x00000000000a285a: nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf08a: nop word ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000cfaf6: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x00000000000420f6: nop word ptr cs:[rax + rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x0000000000042326: nop word ptr cs:[rax + rax]; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x0000000000146466: nop word ptr cs:[rax + rax]; endbr64; mov eax, 1; ret; 
0x0000000000093826: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x0000000000025a96: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x0000000000146b36: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000146b46: nop word ptr cs:[rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000191056: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000191066: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000191076: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000191086: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000191096: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000190fe6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000190ff6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000191006: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000191016: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000191026: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000191036: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000191046: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x00000000000cf646: nop word ptr cs:[rax + rax]; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf666: nop word ptr cs:[rax + rax]; lea rax, [rdi - 4]; ret; 
0x00000000000cf656: nop word ptr cs:[rax + rax]; lea rax, [rdi - 8]; ret; 
0x00000000000328b6: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec476: nop word ptr cs:[rax + rax]; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000001789d6: nop word ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000000a8b46: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e96: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b56: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000087f66: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000009e856: nop word ptr cs:[rax + rax]; mov eax, 1; ret; 
0x00000000001789f6: nop word ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7eb6: nop word ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000013f2a6: nop word ptr cs:[rax + rax]; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000b92c6: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000018a8a6: nop word ptr cs:[rax + rax]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b7f36: nop word ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000146b23: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178982: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e42: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b2: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b32: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000ac6e3: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001257c4: nop word ptr cs:[rax + rax]; nop; endbr64; ret; 
0x0000000000190fd5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fc5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x00000000000b7e65: nop word ptr cs:[rax + rax]; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e75: nop word ptr cs:[rax + rax]; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb15: nop word ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000178994: nop word ptr cs:[rax + rax]; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e54: nop word ptr cs:[rax + rax]; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf354: nop word ptr cs:[rax + rax]; nop; xor rax, rax; ret; 
0x00000000000ee466: nop word ptr cs:[rax + rax]; ret; 
0x0000000000184e06: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0c6: nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000046796: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000cf676: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000000e2da8: nop; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bbf28: nop; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008f509: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4a526f; ret; 
0x0000000000109a1d: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000013b6ac: nop; add byte ptr [rax], al; add byte ptr [rbp + 0x20850fdb], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000004354f: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000150a56: nop; add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000088a89: nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000001150e5: nop; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000015d3e5: nop; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x40], cl; pop rbp; ret; 
0x000000000006302f: nop; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x0000000000155e3f: nop; add rsp, 8; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000014832f: nop; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000148d0f: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000094d8f: nop; and eax, 0xfffffffd; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x00000000000ac1bf: nop; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1cf: nop; bsf eax, eax; sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce39f: nop; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3af: nop; bsf eax, eax; sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac63f: nop; bsr eax, eax; add rax, rdi; ret; 
0x000000000019925e: nop; call 0xffffffff8038a263; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019928e: nop; call 0xffffffff8038a293; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001992be: nop; call 0xffffffff8038a2c3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001992ee: nop; call 0xffffffff8038a2f3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000019931e: nop; call 0xffffffff8038a323; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000bc84c: nop; cld; or al, 0; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000e50df: nop; cmp rax, 0x517b; jne 0xe50f0; mov eax, 0x40; ret; 
0x0000000000157b1f: nop; endbr64; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000157b2f: nop; endbr64; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x0000000000041eef: nop; endbr64; andpd xmm0, xmmword ptr [rip + 0x17a7f4]; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000e40bf: nop; endbr64; mov eax, 0x27; syscall; ret; 
0x00000000000e43cf: nop; endbr64; mov eax, 0x6f; syscall; ret; 
0x000000000012027f: nop; endbr64; mov eax, 0xba; syscall; ret; 
0x000000000011fb7f: nop; endbr64; mov eax, 0xe4; syscall; ret; 
0x000000000014ddbf: nop; endbr64; mov eax, 2; ret; 
0x000000000010d28f: nop; endbr64; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000928ef: nop; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000009524f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x95260; ret; 
0x0000000000094e7f: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x94e90; ret; 
0x000000000016364f: nop; endbr64; mov rax, qword ptr [rip + 0x88815]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000162f2f: nop; endbr64; mov rax, qword ptr [rip + 0x88f35]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160edf: nop; endbr64; mov rax, qword ptr [rip + 0x8af85]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000014140f: nop; endbr64; mov rax, qword ptr [rip + 0xaabd5]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000001202bf: nop; endbr64; mov rax, qword ptr [rip + 0xcbba5]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000010dddf: nop; endbr64; mov rax, qword ptr [rip + 0xde085]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000003445f: nop; endbr64; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000094c4f: nop; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x000000000012223f: nop; endbr64; mov rdi, qword ptr [rdx + 0xa8]; mov esi, 1; call 0x1220e0; ret; 
0x0000000000042a1f: nop; endbr64; movmskps eax, xmm0; and eax, 8; ret; 
0x000000000010c96f: nop; endbr64; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000424df: nop; endbr64; pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000001257cf: nop; endbr64; ret; 
0x0000000000047d0f: nop; endbr64; sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x00000000000cf68f: nop; endbr64; test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x0000000000094c5f: nop; endbr64; xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x000000000009286f: nop; endbr64; xor eax, eax; ret; 
0x000000000009089f: nop; endbr64; xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000190fdf: nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fcf: nop; lea rax, [rdi]; ret; 
0x000000000017acef: nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000000ec40f: nop; mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000a8b0f: nop; mov byte ptr [rdi], 0; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000cfadf: nop; mov ch, dh; and ch, 0xf; je 0xcfb00; add rax, 2; ret; 
0x0000000000167d0f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000000b92df: nop; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; ret; 
0x000000000014d32f: nop; mov dword ptr [r8 + 4], 0; mov eax, 1; ret; 
0x00000000001789cf: nop; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x00000000000b7e6f: nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e8f: nop; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000b7e7f: nop; mov dword ptr [rdi], edx; ret; 
0x0000000000095227: nop; mov dword ptr [rip + 0x157082], 1; mov dword ptr [rip + 0x157074], eax; ret; 
0x0000000000095200: nop; mov dword ptr [rip + 0x1570a9], 1; mov qword ptr [rip + 0x15707e], rax; ret; 
0x00000000000951d7: nop; mov dword ptr [rip + 0x1570d2], 1; mov qword ptr [rip + 0x15709f], rax; ret; 
0x00000000000951b7: nop; mov dword ptr [rip + 0x1570f2], 1; mov qword ptr [rip + 0x1570b7], rax; ret; 
0x0000000000095247: nop; mov dword ptr [rip + 0x159c3e], eax; ret; 
0x0000000000167eef: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001680cf: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000b6e6f: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000094d3f: nop; mov eax, 0x16; ret; 
0x00000000000e501f: nop; mov eax, 0x7e; ret; 
0x000000000013baaf: nop; mov eax, 0xffffffff; ret; 
0x000000000014d30f: nop; mov eax, dword ptr [r8]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000014852f: nop; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi], 7; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000cf01f: nop; mov eax, dword ptr [rdi + 0x2c]; cmp eax, dword ptr [rsi + 0x2c]; jne 0xcf080; ret; 
0x00000000000cf04f: nop; mov eax, dword ptr [rdi + 0x34]; cmp eax, dword ptr [rsi + 0x34]; jne 0xcf080; ret; 
0x00000000000cf06f: nop; mov eax, dword ptr [rdi + 0x3c]; cmp eax, dword ptr [rsi + 0x3c]; jne 0xcf080; ret; 
0x0000000000192cff: nop; mov eax, dword ptr [rdi - 0xc]; cmp eax, dword ptr [rsi - 0xc]; jne 0x192e20; ret; 
0x00000000001682af: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000b84cf: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000001893af: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x0000000000087f57: nop; mov qword ptr [rax + 0x10], rdi; mov qword ptr [rax + 0x40], rsi; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000087f26: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000178a0f: nop; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x00000000000b7ecf: nop; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x0000000000094ea7: nop; mov qword ptr [rip + 0x157439], rax; ret; 
0x0000000000094e90: nop; mov qword ptr [rip + 0x157448], rax; ret; 
0x0000000000094e37: nop; mov qword ptr [rip + 0x157459], rax; ret; 
0x0000000000094e27: nop; mov qword ptr [rip + 0x157471], rax; ret; 
0x0000000000054daf: nop; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x00000000000cfb1f: nop; mov rax, 1; ret; 
0x00000000000d016f: nop; mov rax, qword ptr [rip + 0x11bcf9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000d014f: nop; mov rax, qword ptr [rip + 0x11bd19]; mov dword ptr fs:[rax], 0x4b; xor eax, eax; add rsp, 8; ret; 
0x000000000004305f: nop; mov rax, qword ptr [rip + 0x1a8e09]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f1f: nop; mov rax, qword ptr [rip + 0x1a8f49]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x00000000000412af: nop; mov rax, qword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000160cef: nop; mov rax, qword ptr [rip + 0x8b179]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000011d22f: nop; mov rax, qword ptr [rip + 0xcec39]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000001199ef: nop; mov rax, qword ptr [rip + 0xd2479]; mov dword ptr fs:[rax], 0x16; ret; 
0x000000000011598f: nop; mov rax, qword ptr [rip + 0xd64d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000110fbf: nop; mov rax, qword ptr [rip + 0xdaea9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012edcf: nop; mov rax, rdi; ret; 
0x000000000018ab1f: nop; mov rax, rdi; vzeroupper; ret; 
0x00000000000b6eff: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b6f2f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b6f3f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000dd12f: nop; mov rdx, qword ptr [rip + 0x10ed39]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000004827f: nop; mov rdx, qword ptr [rip + 0x1a3be9]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012065f: nop; mov rdx, qword ptr [rip + 0xcb809]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000113fdf: nop; mov rdx, qword ptr [rip + 0xd7e89]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010ebff: nop; mov rdx, qword ptr [rip + 0xdd269]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010e2ef: nop; mov rdx, qword ptr [rip + 0xddb79]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010db8f: nop; mov rdx, qword ptr [rip + 0xde2d9]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b851f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x00000000000b936f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 8]; ret; 
0x000000000011706f: nop; mov rsi, rcx; mov r8, rdi; mov byte ptr [rsi - 1], 0; mov rax, r8; ret; 
0x00000000001789af: nop; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000017899f: nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e5f: nop; mov word ptr [rdi], dx; ret; 
0x00000000000b7c5f: nop; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000b6f9f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000b710f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b70cf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000b70ef: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b945f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0x10]; ret; 
0x00000000000b85ff: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000000b6f4f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000bb0bf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000001509df: nop; movdqu xmm2, xmmword ptr [rdx]; mov eax, 1; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000001509ef: nop; movdqu xmm3, xmmword ptr [r8 + 0x20]; mov eax, 1; movups xmmword ptr [rdx], xmm3; ret; 
0x00000000001509cf: nop; movdqu xmm4, xmmword ptr [r8 + 8]; mov eax, 1; movups xmmword ptr [rdx], xmm4; ret; 
0x000000000018b4ef: nop; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, [rdi + 1]; vzeroupper; ret; 
0x000000000015d251: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; endbr64; ret; 
0x000000000014719f: nop; pop rbp; ret; 
0x000000000019920f: nop; pop rbx; pop rbp; pop r12; ret; 
0x00000000000319bf: nop; ret; 
0x0000000000033d0b: nop; rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x000000000012997f: nop; sub eax, edx; ret; 
0x00000000001471bf: nop; sub rsp, 8; call 0x114e90; mov dword ptr [rip + 0xa99ad], eax; add rsp, 8; ret; 
0x00000000000cf55f: nop; test rax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000001849ef: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000188a0f: nop; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849bf: nop; vzeroupper; xor eax, eax; ret; 
0x00000000000baf2f: nop; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000115e2f: nop; xor eax, eax; add rsp, 8; ret; 
0x00000000001485ff: nop; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000005294f: nop; xor eax, eax; ret; 
0x000000000012f5bf: nop; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf35f: nop; xor rax, rax; ret; 
0x000000000009f8a7: not byte ptr [rax + rax]; add rsp, 8; ret; 
0x000000000009f8a0: not byte ptr [rax + rax]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x000000000009f862: not byte ptr [rax + rax]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000009f869: not byte ptr [rax + rax]; ret; 
0x00000000000dfd03: not byte ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000126735: not byte ptr [rsi + 0x6401000c]; mov dword ptr [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000dfc2a: not dword ptr [r8]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc2b: not dword ptr [rax]; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000127b3f: not dword ptr [rbx - 0x18]; sbb ch, byte ptr [rcx - 0x76b70011]; ret; 
0x0000000000041b21: not eax; and eax, ecx; ret; 
0x0000000000041ea1: not eax; and eax, edx; ret; 
0x0000000000160cb7: not eax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000041fa9: not eax; and rax, rdx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000157f29: not eax; shr eax, 0x1f; ret; 
0x0000000000061054: not esi; sbb byte ptr [rax], al; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000160cb6: not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000041fa8: not rax; and rax, rdx; movq xmm1, rax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x00000000000a8afd: notrack jmp rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rax; lea rax, [rdi + rdx - 1]; ret; 
0x00000000001484f7: notrack jmp rax; movdqu xmm0, xmmword ptr [rdi + 0x38]; mov dword ptr [rsi], 9; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bc0c3: notrack jmp rax; nop word ptr cs:[rax + rax]; xor eax, eax; pop rbx; ret; 
0x000000000014d27d: notrack jmp rax; xor eax, eax; ret; 
0x00000000000b8128: notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000a8968: notrack jmp rcx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x00000000000bb3d8: notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8494: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e54: notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a8a40: notrack jmp rdx; nop dword ptr [rax + rax]; mov rdx, qword ptr [rsp + 0x10]; mov qword ptr [rax], rdx; ret; 
0x00000000000a0303: or ah, 0; add byte ptr [rax], al; adc byte ptr [rax - 0x73], cl; add eax, 0x1b0e0; cmove rax, rdx; ret; 
0x0000000000121e6a: or al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000125f68: or al, 0; add byte ptr [rax + rax], al; add al, ch; popfq; ret; 
0x0000000000121acd: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121e44: or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000009961d: or al, 0; add byte ptr [rax], al; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000048030: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009809d: or al, 0; add byte ptr [rax], al; mov rax, r8; ret; 
0x00000000000f23d2: or al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000f24a1: or al, 0; add byte ptr [rax], al; ret; 
0x00000000001199b3: or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000009e95e: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000123f24: or al, 0; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000125b19: or al, 0; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x0000000000121a98: or al, 0; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000121f23: or al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x000000000012ed86: or al, 0; call 0xbd470; add rsp, 8; ret; 
0x000000000009f1a2: or al, 0; cmovne rax, rdx; ret; 
0x00000000000bcdfe: or al, 0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x0000000000121f1a: or al, 0; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000bcd0e: or al, 0; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc84e: or al, 0; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9fe: or al, 0; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000a09b3: or al, 0; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a0643: or al, 0; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04e3: or al, 0; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x000000000011c70d: or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001202c9: or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret; 
0x000000000011d235: or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x0000000000122ad9: or al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000011f9d3: or al, 0; mov eax, dword ptr fs:[rdx]; cmp eax, 0x26; je 0x11fa14; mov eax, r8d; ret; 
0x0000000000122d4d: or al, 0; mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000011cf99: or al, 0; mov edx, 0x64; mov eax, dword ptr [rax + 0x38]; test eax, eax; cmove eax, edx; ret; 
0x0000000000121e5d: or al, 0; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x00000000001221f5: or al, 0; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000001221e5: or al, 0; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000011cfcc: or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011c6f5: or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011f3cd: or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000012d240: or al, 0; pop rbp; ret; 
0x0000000000121d03: or al, 0; pop rbx; ret; 
0x00000000000bc870: or al, 0; test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x00000000000bcd7d: or al, 0; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x000000000018b955: or al, 0x16; cmp rdi, r9; jb 0x18bb25; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000001906f0: or al, 0x16; cmp rdi, r9; jb 0x190930; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000bbbea: or al, 0x16; cmp rdi, r9; jb 0xbbd58; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000018c8b0: or al, 0x16; jne 0x18c529; vzeroupper; ret; 
0x000000000018c9d7: or al, 0x16; jne 0x18c9a6; vzeroupper; ret; 
0x00000000000a13ee: or al, 0x16; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x00000000000aa386: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000aa648: or al, 0x16; test al, al; jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x0000000000184129: or al, 0x16; test eax, eax; jne 0x184110; sub eax, ecx; vzeroupper; ret; 
0x000000000018460e: or al, 0x16; test eax, eax; jne 0x1845f0; sub eax, ecx; vzeroupper; ret; 
0x000000000018c867: or al, 0x16; test eax, eax; jne 0x18c850; sub eax, ecx; vzeroupper; ret; 
0x000000000018cd4c: or al, 0x16; test eax, eax; jne 0x18cd30; sub eax, ecx; vzeroupper; ret; 
0x000000000018c8ad: or al, 0x17; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c9d4: or al, 0x17; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c9a6; vzeroupper; ret; 
0x00000000000993a6: or al, 0x18; add rsp, 0x10; mov rax, r8; pop rbx; ret; 
0x000000000008fdd0: or al, 0x24; add byte ptr [rax], al; call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x000000000010d65a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010e0ea: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6e0: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e785; add rsp, 0x68; ret; 
0x00000000001135e5: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113674: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1136c3; add rsp, 0x18; ret; 
0x000000000011372c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137ca: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113d17: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000114ba9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c49: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114cfe: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dce: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000115a0e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115b5e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d82: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e51: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001198d3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011f2d3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cd8: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x120ce5; add rsp, 0x18; ret; 
0x000000000012131d: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12136b; add rsp, 0x58; ret; 
0x000000000012d2ee: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12d3cd; leave; ret; 
0x000000000012e073: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e34b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f36b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f8db: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9bb: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa9b: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12faab; add rsp, 0xd8; ret; 
0x0000000000136886: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013c90c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013e398: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3eb: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e3f8; add rsp, 0x28; ret; 
0x0000000000153bff: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c0c; add rsp, 0x78; ret; 
0x000000000015fc2e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd25: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fece: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff97: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15ffdc; add rsp, 0x38; ret; 
0x0000000000042ee9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043322: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435be: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043641: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043cec: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441c: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743d: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752d: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e56: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea3: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef6: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f43: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bff: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c72: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d47: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfe: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f92: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062052: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062140: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062217: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62227; add rsp, 0xd8; ret; 
0x000000000006316a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063245: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c2: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657e: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086677: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086747: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086800: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab8a: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac65: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df409: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4189: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4229: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a9: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000009959d: or al, 0x28; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x000000000015f319: or al, 0x30; fisttp dword ptr [rcx]; ret; 
0x000000000011f0ce: or al, 0x30; ror byte ptr [rcx], 0xd0; ret; 
0x000000000010c718: or al, 0x31; ror byte ptr [rcx + 0x5d5b0453], 0x41; pop rsp; ret; 
0x000000000012331d: or al, 0x31; test ecx, ecx; jne 0x123328; ret; 
0x0000000000123386: or al, 0x31; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c6d: or al, 0x31; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cca: or al, 0x31; test ecx, ecx; jne 0x123cd8; ret; 
0x0000000000121130: or al, 0x35; idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000018cb90: or al, 0x3a; jne 0x18c9a6; vzeroupper; ret; 
0x00000000000cef72: or al, 0x3b; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000018cb8d: or al, 0x3e; cmp ecx, dword ptr [rdx + rdi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000011faef: or al, 0x3f; shr eax, cl; and eax, 3; ret; 
0x000000000008cd25: or al, 0x45; xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x00000000000e2e76: or al, 0x48; add esp, 0x18; ret; 
0x00000000000e2d50: or al, 0x48; add esp, 0x28; ret; 
0x0000000000115202: or al, 0x48; add esp, 0x38; ret; 
0x000000000004354b: or al, 0x48; add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000120a8b: or al, 0x48; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000014b1e3: or al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000148263: or al, 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000178912: or al, 0x48; lea ecx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000017cd23: or al, 0x48; lea ecx, [rdx + 0xc]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000123317: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123328; ret; 
0x0000000000123380: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c67: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cc4: or al, 0x48; lea ecx, [rdx + rcx*4]; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123cd8; ret; 
0x0000000000123569: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123580; ret; 
0x0000000000123e99: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123eb0; ret; 
0x00000000000b782f: or al, 0x48; lea edi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f23: or al, 0x48; lea edi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x0000000000113d3d: or al, 0x48; lea edx, [rsp + 0xc]; mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x000000000009ef23: or al, 0x48; mov dword ptr [rdi], esi; ret; 
0x000000000013b630: or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x0000000000121f1d: or al, 0x48; mov edx, dword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000b8f41: or al, 0x49; sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000843e3: or al, 0x4c; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x000000000008e163: or al, 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000947fd: or al, 0x5b; ret; 
0x00000000000a8aba: or al, 0x66; mov dword ptr [rax + 4], edx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8b9a: or al, 0x66; mov dword ptr [rdi + 4], eax; movzx eax, byte ptr [rsp + 0xe]; mov byte ptr [rdi + 6], al; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000a89e5: or al, 0x66; mov dword ptr [rdi + 4], edx; ret; 
0x0000000000048190: or al, 0x66; mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000033906: or al, 0x74; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000421eb: or al, 0x75; or dh, dl; addps xmm0, xmm0; ret; 
0x00000000000791ba: or al, 0x7e; ret; 
0x00000000000b8122: or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d2: or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000bac4e: or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000074536: or al, 0x83; ret; 
0x00000000000bcb3d: or al, 0x87; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x000000000005d7ba: or al, 0x89; fdiv st(6); ret; 
0x0000000000042c3b: or al, 0x89; jae 0x42c7f; xor eax, eax; pop rbx; ret; 
0x00000000000aedf4: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000012331a: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123328; ret; 
0x0000000000123383: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c6a: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123cc7: or al, 0x8a; mov ecx, dword ptr [rcx + rsi]; test ecx, ecx; jne 0x123cd8; ret; 
0x000000000018fd7d: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000010c7fb: or al, 0x8b; push rbx; add al, 0xeb; ret; 
0x000000000011cf2f: or al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000123587: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000012356c: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123580; ret; 
0x0000000000123e9c: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x123eb0; ret; 
0x00000000000b6e4e: or al, 0x93; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000048194: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001509a6: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b8126: or al, 0xb; notrack jmp rcx; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000bb3d6: or al, 0xb; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000b8492: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e52: or al, 0xb; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000113d42: or al, 0xbe; adc byte ptr [rax + rax], dl; call 0x1145c0; add rsp, 0x18; ret; 
0x000000000011f360: or al, 0xcb; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001151f9: or al, 0xe8; hlt; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x38; ret; 
0x00000000001153f9: or al, 0xe8; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000e2e6d: or al, 0xe8; int 0x17; sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000113dc3: or al, 0xe8; ja 0x113dcf; clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000120ebc: or al, 0xe8; jle 0x120ef7; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x000000000010ea69: or al, 0xe8; rcr dword ptr [rbx - 8], 1; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x000000000011f69c: or al, 0xe8; sahf; idiv r15; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000000e2d47: or al, 0xe8; sbb bl, bh; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x000000000012033d: or al, 0xe8; std; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001154b9: or al, 0xe8; xor ecx, 0x448bfff7; and al, 0xc; add rsp, 0x18; ret; 
0x00000000000bc795: or al, 0xe; mov r10, rax; mov eax, dword ptr [r8 + rax*4]; sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x000000000016dc33: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000005c117: or al, 0xf6; ret; 
0x000000000011860c: or al, 0xf7; ret; 
0x00000000000cef75: or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000017cd27: or al, 0xf; test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7833: or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x000000000010d286: or al, 1; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000011d252: or al, 1; add byte ptr [rax], al; ret; 
0x000000000010de12: or al, 1; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x000000000010d320: or al, 1; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7a70: or al, 5; add byte ptr [rax], al; ret; 
0x00000000000a884e: or al, 7; cmp ecx, edx; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x0000000000113dc6: or al, bh; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x000000000013708b: or al, byte ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000148576: or al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000118bc5: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118bd4; ret; 
0x00000000000445b9: or al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x000000000014c424: or al, byte ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001465ab: or al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000141329: or al, byte ptr [rax]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141338; ret; 
0x0000000000141d5a: or al, byte ptr [rax]; mov rax, qword ptr [rip + 0xaecbd]; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x0000000000141419: or al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000001465d7: or al, byte ptr [rax]; ret; 
0x0000000000142684: or al, byte ptr [rax]; syscall; pop rbp; ret; 
0x0000000000140edc: or al, byte ptr [rax]; test eax, eax; je 0x140ee8; ret; 
0x00000000001471b8: or al, byte ptr [rax]; test eax, eax; je 0x1471c0; ret; 
0x0000000000141d61: or al, byte ptr [rax]; test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x0000000000143199: or al, byte ptr [rax]; test rax, rax; jne 0x1431a8; ret; 
0x00000000000bc6f5: or al, byte ptr [rbx + 0xd7402f8]; xor eax, eax; ret; 
0x000000000010fe65: or al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fe74; ret; 
0x0000000000048241: or al, ch; cdq; ret; 
0x00000000000f1746: or al, ch; hlt; ret; 
0x000000000011f74d: or al, ch; in eax, dx; idiv rdi; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000118c4d: or al, ch; in eax, dx; mov ecx, 0x448bfff7; and al, 8; add rsp, 0x28; ret; 
0x00000000000471dd: or al, ch; insd dword ptr [rdi], dx; mov bl, 0xfd; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000112bcd: or al, ch; insd dword ptr [rdi], dx; sbb bh, al; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x0000000000043498: or al, ch; movabs byte ptr [0x480824448b000511], al; add esp, 0x18; ret; 
0x0000000000052a51: or al, ch; or esi, edi; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000012084c: or al, ch; out dx, al; cmp eax, 0x8b48fff7; and al, 8; add rsp, 0x28; ret; 
0x00000000001146ec: or al, ch; push rdi; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x00000000000f3447: or al, ch; ret; 
0x000000000011f969: or al, ch; ror dword ptr [rdi + rsi*8 - 1], 1; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011351d: or al, ch; sbb eax, 0x8bfff811; and al, 8; add rsp, 0x28; ret; 
0x0000000000120912: or al, ch; sub byte ptr [rip - 0x74b70009], bh; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x0000000000120409: or al, ch; xor dword ptr [rdx - 9], eax; dec dword ptr [rbx + 0x48082444]; add esp, 0x18; ret; 
0x0000000000115828: or ax, 0x6400; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000115858: or ax, 0xf700; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000082ac1: or bh, bh; rol byte ptr [rbx + 0xf74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000095172: or bh, byte ptr [rdx + 0x15]; add byte ptr [rcx + 1], al; adc eax, dword ptr [rbp + 1]; sbb byte ptr [r8 + 0x39], cl; ret; 
0x000000000011a985: or bl, byte ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000152dfd: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000010257c: or bl, byte ptr [rdx + 0x59]; pop rbx; ret; 
0x0000000000056340: or bl, ch; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000016ddf3: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000000ec481: or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000ec411: or byte ptr [r10], r8b; xor eax, eax; ret; 
0x000000000002fda8: or byte ptr [r11 + 0x1974fdf8], al; pop rbx; ret; 
0x00000000000e8332: or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000112ae1: or byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x0000000000094d15: or byte ptr [r11 + 0x68901e0], r8b; xor eax, eax; ret; 
0x000000000012d0f5: or byte ptr [r13 + 0x480d75c0], r8b; cmp dword ptr [rdi], 0; je 0x12d110; ret; 
0x0000000000141a58: or byte ptr [r13 + 0x4c], r11b; mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000012d1aa: or byte ptr [r13 - 0x23], sil; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x00000000000b39b6: or byte ptr [r14 + 0xf], spl; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b66c0: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b67a1: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3acf: or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000ec406: or byte ptr [r14], r10b; mov eax, 1; ret; 
0x00000000000ec4a6: or byte ptr [r14], r11b; mov eax, 2; ret; 
0x0000000000066696: or byte ptr [r15 + r9 - 0x4a], r8b; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008e550: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000113ea4: or byte ptr [r8 + 0x100], r15b; mov word ptr [rdi + 0x16], ax; ret; 
0x000000000009397c: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000154795: or byte ptr [r8 + 1], r15b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000057d67: or byte ptr [r8 + 2], r15b; ret; 
0x00000000000ec491: or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000057ddb: or byte ptr [r8 - 0x3ffe], r15b; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000b3aae: or byte ptr [r8 - 0x76b7f7be], cl; clc; ret; 
0x0000000000127c10: or byte ptr [r8 - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001769a8: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000006e875: or byte ptr [r8 - 0x77], cl; ret; 
0x0000000000157fff: or byte ptr [r8 - 0x77], r9b; ja 0x15801d; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x000000000006c57b: or byte ptr [r8 - 0x7d], cl; ret; 
0x000000000009ef34: or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x000000000005b51b: or byte ptr [r8], r8b; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000011a781: or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000b3b0e: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x0000000000178907: or byte ptr [r9 - 0x76b7f7be], cl; clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x000000000011a773: or byte ptr [r9 - 0x77], cl; adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000ec3d5: or byte ptr [r9], r11b; mov eax, 1; ret; 
0x00000000000ec46b: or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec43d: or byte ptr [r9], r8b; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3ee: or byte ptr [r9], r8b; mov eax, 1; ret; 
0x0000000000094d39: or byte ptr [r9], r8b; xor eax, eax; ret; 
0x000000000010c4fb: or byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000113ea5: or byte ptr [rax + 0x100], bh; mov word ptr [rdi + 0x16], ax; ret; 
0x0000000000146bb3: or byte ptr [rax + 0x10], bh; pop rbx; pop rbp; ret; 
0x00000000000a8cad: or byte ptr [rax + 0x16], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000041fc9: or byte ptr [rax + 0x21], 0xc2; mov qword ptr [rdi], rdx; ret; 
0x0000000000041f99: or byte ptr [rax + 0x21], 0xc2; movq xmm0, rdx; ret; 
0x00000000000e0f1b: or byte ptr [rax + 0x29], cl; ret; 
0x000000000009811e: or byte ptr [rax + 0x39], cl; ret; 
0x000000000009397d: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000000e50e7: or byte ptr [rax + 0x40], bh; ret; 
0x00000000000ecbc3: or byte ptr [rax + 0x63], cl; ret; 
0x000000000014d300: or byte ptr [rax + 0x66000000], 0x89; insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x0000000000137089: or byte ptr [rax + 0xa], bh; pop rbx; pop rbp; ret; 
0x000000000012fd76: or byte ptr [rax + 0xf], al; mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000014d29d: or byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001509d5: or byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm4; ret; 
0x0000000000155e43: or byte ptr [rax + 1], bh; pop rbp; pop r12; ret; 
0x0000000000154796: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000000832c9: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x00000000000a89db: or byte ptr [rax + 1], cl; clc; mov dword ptr [rdi], edx; movzx edx, word ptr [rsp + 0xc]; mov word ptr [rdi + 4], dx; ret; 
0x000000000012dd89: or byte ptr [rax + 1], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000014d29c: or byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000057d68: or byte ptr [rax + 2], bh; ret; 
0x0000000000094e49: or byte ptr [rax + rax], al; add byte ptr [rsi + 1], dh; ret; 
0x00000000000ec492: or byte ptr [rax + rdi*4], bl; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000f4d5e: or byte ptr [rax - 0x2f], cl; call 0xffffffff835939db; ret; 
0x00000000000f5823: or byte ptr [rax - 0x2f], cl; call 0xffffffff835948a0; ret; 
0x0000000000049977: or byte ptr [rax - 0x39], cl; ret; 
0x0000000000042039: or byte ptr [rax - 0x3f], 0xe0; xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000057ddc: or byte ptr [rax - 0x3ffe], bh; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000dd753: or byte ptr [rax - 0x73], cl; adc al, 0xff; pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x00000000000d0fb7: or byte ptr [rax - 0x73], cl; adc eax, 0xffffff11; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000d0e97: or byte ptr [rax - 0x73], cl; adc eax, 0xffffff21; cmove rax, rdx; add rsp, 0x58; ret; 
0x00000000000bdf85: or byte ptr [rax - 0x73], cl; add eax, 0x11923; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000012dc4d: or byte ptr [rax - 0x73], cl; add eax, 0x3842b; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dacd: or byte ptr [rax - 0x73], cl; add eax, 0x385cb; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db8d: or byte ptr [rax - 0x73], cl; add eax, 0x3aeeb; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000001465d1: or byte ptr [rax - 0x73], cl; add eax, 0xaa527; ret; 
0x00000000000a09ad: or byte ptr [rax - 0x73], cl; add eax, 0xc56fb; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a063d: or byte ptr [rax - 0x73], cl; add eax, 0xc5a4b; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04dd: or byte ptr [rax - 0x73], cl; add eax, 0xc85ab; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x00000000000b77a9: or byte ptr [rax - 0x73], cl; jg 0xb77b6; jne 0xb7f80; ret; 
0x00000000000b8e8d: or byte ptr [rax - 0x73], cl; jg 0xb8e9a; jne 0xb97d0; ret; 
0x000000000007f1cb: or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x00000000000570ac: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000057754: or byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000122b35: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000122b96: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x40; ret; 
0x0000000000055846: or byte ptr [rax - 0x75], cl; add al, 0xc8; mov qword ptr [r9 + rcx*8], rax; xor eax, eax; ret; 
0x000000000009a0bd: or byte ptr [rax - 0x75], cl; add eax, 0x151f1b; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000961c3: or byte ptr [rax - 0x75], cl; add eax, 0x155e15; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x000000000015fec5: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x0000000000157f37: or byte ptr [rax - 0x75], cl; jg 0x157f54; call 0x830f0; add rsp, 8; ret; 
0x0000000000094cc7: or byte ptr [rax - 0x75], cl; jg 0x94cf4; call 0x22330; xor eax, eax; add rsp, 8; ret; 
0x00000000001115ee: or byte ptr [rax - 0x75], cl; jl 0x111617; and al, ch; test esp, 0x8948fffc; ret; 
0x000000000008d23b: or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b3aaf: or byte ptr [rax - 0x76b7f7be], cl; clc; ret; 
0x000000000011789b: or byte ptr [rax - 0x77], cl; add eax, 0xd7eed; mov rax, r8; add rsp, 8; ret; 
0x000000000011786b: or byte ptr [rax - 0x77], cl; add eax, 0xd7f1d; mov rax, r8; ret; 
0x000000000009e9b3: or byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x44]; mov eax, eax; pop rbp; pop r12; ret; 
0x000000000009eb0f: or byte ptr [rax - 0x77], cl; add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b39c0: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012fc0c: or byte ptr [rax - 0x77], cl; clc; sar rax, 6; ret; 
0x00000000001785cd: or byte ptr [rax - 0x77], cl; clc; sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x000000000017890b: or byte ptr [rax - 0x77], cl; clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x00000000000b77c5: or byte ptr [rax - 0x77], cl; cmovns eax, dword ptr [rbx - 0x72b7f618]; jg 0xb77da; jne 0xb7f80; ret; 
0x0000000000127c11: or byte ptr [rax - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000158000: or byte ptr [rax - 0x77], cl; ja 0x15801d; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; ret; 
0x00000000000bb045: or byte ptr [rax - 0x77], cl; jns 0xffffffffed3bb8a5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafe5: or byte ptr [rax - 0x77], cl; js 0xffffffffed3bb845; mov byte ptr [rdi + 9], ch; ret; 
0x00000000001769a9: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000bb006: or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000006e876: or byte ptr [rax - 0x77], cl; ret; 
0x00000000000a8e27: or byte ptr [rax - 0x77], cl; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000096863: or byte ptr [rax - 0x77], r9b; ret; 
0x000000000011a8d2: or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000141370: or byte ptr [rax - 0x7b], cl; push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000009e927: or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000274da: or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000145c57: or byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000008e3a8: or byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000832eb: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000004123d: or byte ptr [rax], 0x4c; add ebx, dword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x0000000000196b79: or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000005fb32: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000117599: or byte ptr [rax], al; add byte ptr [rax], 0; add rsp, 8; mov eax, r8d; ret; 
0x00000000001414f3: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000194f3d: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x21], cl; ret; 
0x000000000009ef35: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x00000000000bc1e9: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000014856f: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010e325: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000011f50d: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x00000000000e6d4d: or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d4eb7: or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018e4f0: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000094d02: or byte ptr [rax], al; cdqe; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000160cf5: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000015cc69: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160ee9: or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x000000000005b51c: or byte ptr [rax], al; mov qword ptr [rdi], rax; mov rax, rdi; ret; 
0x000000000015d177: or byte ptr [rax], al; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret; 
0x0000000000162ed5: or byte ptr [rax], al; neg eax; mov r8d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r8d; ret; 
0x0000000000162e75: or byte ptr [rax], al; neg eax; mov r9d, 0xffffffff; mov dword ptr fs:[rdx], eax; mov eax, r9d; ret; 
0x0000000000095523: or byte ptr [rax], al; nop dword ptr [rax]; cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x0000000000160fd4: or byte ptr [rax], al; ret; 
0x000000000015e108: or byte ptr [rax], al; test edi, edi; jns 0x15e110; ret; 
0x0000000000160fcb: or byte ptr [rax], al; xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x00000000000bb00d: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb04b: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafeb: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x000000000013caaa: or byte ptr [rbp + 0x17], dh; add rsp, 0x20; pop rbp; ret; 
0x00000000000ee535: or byte ptr [rbp + 0x31], al; rol byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x0000000000058977: or byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x39], cl; ret; 
0x0000000000046c87: or byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x000000000008541c: or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000012d0f6: or byte ptr [rbp + 0x480d75c0], al; cmp dword ptr [rdi], 0; je 0x12d110; ret; 
0x0000000000141a59: or byte ptr [rbp + 0x4c], bl; mov eax, ebp; pop r12; pop r13; pop r14; ret; 
0x000000000013c613: or byte ptr [rbp + 0x5d5b2b04], cl; ret; 
0x00000000000e8626: or byte ptr [rbp + 0x9880fd2], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000042517: or byte ptr [rbp + 6], dh; addss xmm0, xmm0; ret; 
0x00000000000d9630: or byte ptr [rbp + rcx*4 + 0x15], cl; pop rsp; ret; 
0x000000000014955b: or byte ptr [rbp + rcx*4 + 4], al; add bl, byte ptr [rbx + 0x5d]; mov eax, r8d; ret; 
0x000000000012dd31: or byte ptr [rbp - 0x10], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ee1]; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000000a05c1: or byte ptr [rbp - 0x10], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0661]; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x000000000012dc71: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbb1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daf1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x00000000000a09d1: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0661: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0501: or byte ptr [rbp - 0x14], dh; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x000000000012d1ab: or byte ptr [rbp - 0x23], dh; pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x000000000007d733: or byte ptr [rbp - 0x4b7bf040], al; sub dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ea36d: or byte ptr [rbp - 0x577f02e], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000012d07c: or byte ptr [rbp - 0xf], dh; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000000bccc8: or byte ptr [rbx + 0x11394117], cl; jne 0xbcc65; test edx, edx; jne 0xbccb0; ret; 
0x000000000002fda9: or byte ptr [rbx + 0x1974fdf8], al; pop rbx; ret; 
0x000000000002fd87: or byte ptr [rbx + 0x37403fe], al; ret; 
0x00000000000fed67: or byte ptr [rbx + 0x38], 8; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec3e4: or byte ptr [rbx + 0x463b01c0], al; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x0000000000062fb8: or byte ptr [rbx + 0x48010447], al; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000008f55e: or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x00000000000bcbfe: or byte ptr [rbx + 0x4c], bl; mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000008b4e9: or byte ptr [rbx + 0x5d], bl; mov eax, r8d; ret; 
0x00000000000a8dfa: or byte ptr [rbx + 0x5d], bl; mov rax, r12; pop r12; pop r13; ret; 
0x000000000009ea47: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000005568a: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009f417: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000024e0b: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000094d16: or byte ptr [rbx + 0x68901e0], al; xor eax, eax; ret; 
0x0000000000085710: or byte ptr [rbx + 0xd], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000085586: or byte ptr [rbx + 0xf], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000004123e: or byte ptr [rbx + rax + 0x5f], cl; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x00000000000ee461: or byte ptr [rbx + rdx*4 + 0x5b], dh; ret; 
0x0000000000149546: or byte ptr [rcx + 0x29], al; rcr byte ptr [rbx + 0x5d], 1; mov eax, r8d; ret; 
0x00000000000a3173: or byte ptr [rcx + 0x29], cl; ret; 
0x0000000000056af0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x000000000003fa03: or byte ptr [rcx + rcx*4 + 0xc], cl; and al, 0xe8; ret; 
0x000000000009efc4: or byte ptr [rcx + rcx*4 - 0x18], cl; mov rdx, r12; pop r12; pop r13; ret; 
0x000000000009f9e7: or byte ptr [rcx + rcx*4 - 0x18], cl; pop r12; pop r13; ret; 
0x00000000000bcba4: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000014e00c: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x000000000005b933: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x00000000000ee046: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a8e82: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000477a1: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x00000000000a0a43: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; ret; 
0x00000000000829d0: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000013ccf6: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000010281b: or byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x00000000000465fe: or byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000082406: or byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000001175a1: or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000082713: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000831b4: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; ret; 
0x000000000013c98a: or byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000055bb2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x00000000000555fe: or byte ptr [rcx - 0x75], cl; adc al, 0xc0; mov qword ptr [rsi + rax*8], rdx; xor eax, eax; ret; 
0x000000000011a782: or byte ptr [rcx - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x00000000000896cb: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x00000000000b3b0f: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000178908: or byte ptr [rcx - 0x76b7f7be], cl; clc; sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x0000000000057c29: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000070eff: or byte ptr [rcx - 0x77], al; ret; 
0x000000000011a774: or byte ptr [rcx - 0x77], cl; adc byte ptr [r11 + 0x94801e0], al; ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000007f1cf: or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x000000000006e3f2: or byte ptr [rcx - 0x7d], al; retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b782b: or byte ptr [rcx - 0x7d], cl; call 0x7f98c03f; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x0000000000055c3e: or byte ptr [rcx - 0x7d], cl; clc; clc; jne 0x55c30; mov rax, rdx; ret; 
0x000000000005b3c8: or byte ptr [rcx - 0x7d], cl; ret; 
0x000000000006d150: or byte ptr [rcx - 0xa], al; ret; 
0x00000000000eaf53: or byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000010d296: or byte ptr [rcx], al; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000062eb8: or byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x000000000010d338: or byte ptr [rcx], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000ec46c: or byte ptr [rcx], al; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ec43e: or byte ptr [rcx], al; mov eax, 1; mov byte ptr [rdi], 0x5b; ret; 
0x00000000000ec3ef: or byte ptr [rcx], al; mov eax, 1; ret; 
0x0000000000094d3a: or byte ptr [rcx], al; xor eax, eax; ret; 
0x00000000000a88cf: or byte ptr [rcx], bh; int1; jne 0xa88c0; ret; 
0x00000000000ec3d6: or byte ptr [rcx], bl; mov eax, 1; ret; 
0x00000000000c9f03: or byte ptr [rcx], ch; ret; 
0x000000000012bbbe: or byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000047247: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000fed6a: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000010c4fc: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000010c5f0: or byte ptr [rcx], dh; ror byte ptr [rcx - 0x7cb7fbad], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000111b71: or byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x73], 0x3d; mov ebx, 0x31000a42; shr al, 0x7c; ret; 
0x0000000000138737: or byte ptr [rdi + 0x400], bh; call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x000000000008b641: or byte ptr [rdi + rcx - 0x4a], al; add byte ptr [rbx + 0x5d], bl; mov eax, r8d; pop r12; ret; 
0x0000000000066697: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008e551: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000034088: or byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x0000000000091d27: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008df55: or byte ptr [rdi], cl; mov dh, 0; ret; 
0x000000000014e045: or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x0000000000157dae: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000010fdb4: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x00000000000246db: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000148e32: or byte ptr [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000014a2f9: or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000000522b8: or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000ecbbf: or byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rax + 0x63], cl; ret; 
0x000000000018c528: or byte ptr [rdi], cl; pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x000000000017c901: or byte ptr [rdi], cl; test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000006c6b3: or byte ptr [rdi], cl; test edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x000000000006d53a: or byte ptr [rdi], cl; test esi, edx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x00000000001028b0: or byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x0000000000122278: or byte ptr [rdi], cl; xchg edi, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000445b7: or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000190445: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000009ef21: or byte ptr [rdx + 0xc], dh; mov qword ptr [rdi], rsi; ret; 
0x000000000018fd67: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000013bb29: or byte ptr [rdx], al; cmp r8, rdi; jae 0x13bb43; mov eax, 0xffffffff; ret; 
0x00000000000ec412: or byte ptr [rdx], al; xor eax, eax; ret; 
0x00000000000ec482: or byte ptr [rdx], bl; mov eax, 2; ret; 
0x0000000000102637: or byte ptr [rdx], ch; push r9; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025f7: or byte ptr [rdx], ch; push r9; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000bf1df: or byte ptr [rdx], cl; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf0cf03], al; ret; 
0x0000000000061bbf: or byte ptr [rip + 0x100], ah; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001138c6: or byte ptr [rip + 0x100f], ah; ret; 
0x00000000001138c5: or byte ptr [rip + 0x100f], r12b; ret; 
0x0000000000113ddc: or byte ptr [rip + 0x64d8f700], 0x89; add bh, byte ptr [rax - 1]; ret; 
0x0000000000113955: or byte ptr [rip - 0x1010], ah; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000113954: or byte ptr [rip - 0x1010], r12b; or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000116f97: or byte ptr [rsi + 0x48], ah; movd mm0, eax; movq xmm1, rsi; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000b3a84: or byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000b39b7: or byte ptr [rsi + 0xf], ah; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000000b66c1: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x00000000000b67a2: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b3ad0: or byte ptr [rsi - 0x77], ah; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000ec4a7: or byte ptr [rsi], bl; mov eax, 2; ret; 
0x00000000000ec407: or byte ptr [rsi], dl; mov eax, 1; ret; 
0x0000000000161a5c: or byte ptr cs:[rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e6d4c: or byte ptr ds:[rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000095522: or byte ptr ss:[rax], al; nop dword ptr [rax]; cmp qword ptr [rip + 0x159961], rdi; jbe 0x954d8; add rsp, 8; ret; 
0x000000000016194a: or ch, ah; dec dword ptr [rax - 0x77]; ret; 
0x0000000000041d2f: or cl, bl; std; fstp st(1); ret; 
0x0000000000121f14: or cl, byte ptr [rax + 0x3b]; add eax, 0xcdb34; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000b77f1: or cl, byte ptr [rax - 0x73]; jg 0xb7800; jne 0xb7f80; ret; 
0x00000000000b8ed5: or cl, byte ptr [rax - 0x73]; jg 0xb8ee4; jne 0xb97d0; ret; 
0x00000000001788d2: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000017ccc3: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000084519: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000047d70: or cl, byte ptr [rcx + 0x10e9c117]; and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000001788d6: or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000017ccc7: or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000007f1d3: or cl, ch; ret; 
0x00000000000bb9e5: or cl, cl; cmove rax, rdx; ret; 
0x0000000000094d56: or cl, dl; clc; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008ce57: or dh, 0x80; and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x000000000017e249: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000094d2f: or dh, bh; xor eax, eax; ret; 
0x000000000016dd13: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000041e25: or dh, byte ptr [rbp + 8]; fadd st(0); add rsp, 8; ret; 
0x000000000013bee7: or dh, byte ptr [rbp + rax*2 - 0x7d]; dec dword ptr [rbx]; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000ee2db: or dh, byte ptr [rbp + rdi + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000087de6: or dh, byte ptr [rdi + rcx + 0x48]; cmp eax, esi; ja 0x87de0; lea eax, [rdx + rdi]; ret; 
0x0000000000092a16: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; ja 0x92a10; lea eax, [rdx + rdi]; ret; 
0x0000000000089df7: or dh, byte ptr [rsp + rdi*4 + 0x48]; add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000000421ed: or dh, dl; addps xmm0, xmm0; ret; 
0x00000000000a889e: or dl, cl; jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x000000000015ce9a: or dword ptr [r8], r8d; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000015c821: or dword ptr [r8], r8d; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x000000000010d34a: or dword ptr [rax + 0x1c], edi; syscall; neg eax; ret; 
0x000000000015f241: or dword ptr [rax + 0x39], ecx; ret; 
0x0000000000092718: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x92718; ret; 
0x0000000000114663: or dword ptr [rax + 0xd], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cf341: or dword ptr [rax + 0xf], ecx; mov esp, 0xc83948ca; ja 0xcf360; sub rdi, 0x10; add rax, rdi; ret; 
0x0000000000120663: or dword ptr [rax - 0x2708fff4], edi; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000013c981: or dword ptr [rax - 0x3f], ecx; out 4, al; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x00000000000b77cc: or dword ptr [rax - 0x73], ecx; jg 0xb77da; jne 0xb7f80; ret; 
0x00000000000b8eb0: or dword ptr [rax - 0x73], ecx; jg 0xb8ebe; jne 0xb97d0; ret; 
0x00000000001788b2: or dword ptr [rax - 0x73], ecx; or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x0000000000161313: or dword ptr [rax - 0x7b], ecx; ror byte ptr [rdi], cl; test byte ptr [rbx], dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005586f: or dword ptr [rax - 0x7d], 0xffffffea; add dword ptr [rbp - 0x1e], esi; mov eax, 1; ret; 
0x00000000000d358d: or dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000117598: or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret; 
0x0000000000153494: or dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000a7ace: or dword ptr [rax], eax; add bh, dh; ret; 
0x000000000016131a: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015d593: or dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000412ba: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000246f2: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000148501: or dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x000000000010c72a: or dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000019371d: or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000b5c15: or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000015e332: or dword ptr [rax], eax; add dword ptr [rcx + rcx*4 - 0x20], eax; pop rbp; pop r12; pop r13; ret; 
0x000000000015ce9b: or dword ptr [rax], eax; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x0000000000153399: or dword ptr [rax], eax; lea rdx, [rip + 0x9da9e]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000120fe7: or dword ptr [rax], eax; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000015c822: or dword ptr [rax], eax; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000001533a0: or dword ptr [rax], eax; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000153489: or dword ptr [rax], eax; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x000000000015345a: or dword ptr [rax], eax; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x000000000009e1d9: or dword ptr [rax], eax; nop dword ptr [rax + rax]; endbr64; ret; 
0x0000000000186939: or dword ptr [rbx + 1], 0; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000082a77: or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008e660: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000093e7c: or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000e2d63: or dword ptr [rcx - 0x2708fff0], edx; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000006c3ff: or dword ptr [rcx - 1], 0xffffffff; dec dword ptr [rax - 0x7d]; ret; 
0x000000000010fe08: or dword ptr [rcx], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fe17; ret; 
0x0000000000094d38: or dword ptr [rdi + 8], 1; xor eax, eax; ret; 
0x0000000000160c97: or dword ptr [rdi + rax*8], edx; xor eax, eax; ret; 
0x000000000005b6ac: or dword ptr [rdi - 0x2f], esi; mov rax, r8; ret; 
0x000000000008fdce: or dword ptr [rdi], 0x240c; call 0x913e0; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000043b92: or dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000001788b6: or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000017cc97: or dword ptr [rdi], ecx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000a046b: or dword ptr [rdx + 0xe], 0xcd82f600; add byte ptr [rax], al; add byte ptr [rcx], al; je 0xa0435; ret; 
0x000000000009f357: or dword ptr [rdx - 1], edi; cmovbe eax, edx; ret; 
0x0000000000118c63: or dword ptr [rdx], esi; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000026f71: or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x00000000000bc95d: or dword ptr [rip + 0x58d4800], ecx; mov dword ptr [rdi], ebp; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000001465c7: or dword ptr [rip + 0xaa512], 2; add rsp, 8; lea rax, [rip + 0xaa527]; ret; 
0x0000000000140ef1: or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x000000000009f352: or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x0000000000120863: or dword ptr [rsi - 0x2708fff4], esi; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000043063: or dword ptr [rsi - 0x389bffe6], ecx; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000e44a6: or eax, 0x1079c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4476: or eax, 0x1079f5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4446: or eax, 0x107a25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4416: or eax, 0x107a55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e43b6: or eax, 0x107ab5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4386: or eax, 0x107ae5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4136: or eax, 0x107d35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3186: or eax, 0x108ce5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2da6: or eax, 0x1090c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b56: or eax, 0x109315; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b3b24: or eax, 0x1120f66; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x00000000000d41f6: or eax, 0x117c75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d41c6: or eax, 0x117ca5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018829f: or eax, 0x1321c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000186bbe: or eax, 0x148fd; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001868ea: or eax, 0x14bd1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000009c1e7: or eax, 0x152ca4; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000009c1de: or eax, 0x152cb5; jb 0x9c210; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000008e5b7: or eax, 0x15a8e4; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000001854d5: or eax, 0x15fe6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000042637: or eax, 0x17a134; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000042079: or eax, 0x17a662; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042089: or eax, 0x17a672; mulsd xmm0, xmm1; ret; 
0x0000000000042053: or eax, 0x17a688; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000042063: or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x0000000000041eff: or eax, 0x17a7dc; orpd xmm0, xmm1; ret; 
0x00000000001839cf: or eax, 0x17aec; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000005557a: or eax, 0x1968f1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013c54a: or eax, 0x1975c085; mov eax, r8d; ret; 
0x0000000000181d3e: or eax, 0x1977d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000181a0a: or eax, 0x19ab1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000439d6: or eax, 0x1a8495; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000433e6: or eax, 0x1a8a85; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000180135: or eax, 0x1b386; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000115d05: or eax, 0x1b800; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000b8791: or eax, 0x1c478d48; ret; 
0x00000000000b9221: or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b9601: or eax, 0x1d478d48; ret; 
0x00000000000b7a91: or eax, 0x1de88349; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x0000000000178938: or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x0000000000117e2e: or eax, 0x1f88300; jg 0x117e36; ret; 
0x000000000017cd59: or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000118600: or eax, 0x25894400; push rdi; jb 0x118615; add byte ptr [rbp - 0x8f38b25], al; ret; 
0x00000000001144b8: or eax, 0x2894800; cmp rdi, rax; ja 0x1144e8; xor eax, eax; ret; 
0x0000000000118ea3: or eax, 0x2f6e800; add byte ptr [rax], al; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000113ea0: or eax, 0x30; mov dword ptr [rdi + 8], eax; mov eax, 0x100; mov word ptr [rdi + 0x16], ax; ret; 
0x00000000000424c4: or eax, 0x3f000000; mov dword ptr [rdi], edx; movd xmm0, eax; ret; 
0x000000000012d0fa: or eax, 0x3f8348; je 0x12d110; ret; 
0x0000000000041d8d: or eax, 0x3ffe; mov dword ptr [rdi], edx; fstp xword ptr [rsp - 0x18]; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000001193a7: or eax, 0x415c4100; pop rbp; ret; 
0x000000000011936e: or eax, 0x415d5900; pop rsp; pop r13; ret; 
0x0000000000085712: or eax, 0x44a8d48; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000015785a: or eax, 0x44c03145; mov eax, eax; ret; 
0x0000000000118e17: or eax, 0x48000d4a; add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000000b1e65: or eax, 0x48fad348; test edx, edx; je 0xb1e90; bsf rax, rdx; ret; 
0x0000000000120fde: or eax, 0x48ffb70f; lea eax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000115dab: or eax, 0x58b4800; mov esp, 0x48000d98; mov dword ptr [rip + 0xd98e5], eax; lea rax, [rip + 0xd98b6]; add rsp, 8; ret; 
0x00000000000bcaee: or eax, 0x58d4800; jns 0xbcb1d; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000bc95e: or eax, 0x58d4800; mov dword ptr [rdi], ebp; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000000a8bde: or eax, 0x58d4800; sbb dword ptr [rax], edi; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000008d882: or eax, 0x5bd88948; pop rbp; pop r12; ret; 
0x0000000000034b42: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000118e54: or eax, 0x5c415d00; pop r13; ret; 
0x000000000010d609: or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d6ed: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000010c3f5: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001144cd: or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, qword ptr [rip + 0xd79ed]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000000b7855: or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x0000000000118607: or eax, 0x74db8500; or al, 0xf7; ret; 
0x00000000000b8788: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b7a88: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000bb258: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x0000000000113971: or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000cb180: or eax, 0x80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x00000000000e51a2: or eax, 0x8148c031; cli; push rsp; push rbx; setne al; ret; 
0x00000000000be5d6: or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b8f49: or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x0000000000102577: or eax, 0x89000ed0; or bl, byte ptr [rdx + 0x59]; pop rbx; ret; 
0x00000000000c8f2a: or eax, 0x89490000; ret; 
0x00000000001170f2: or eax, 0x894c2300; rol dh, 0x46; inc dword ptr [rax]; ret; 
0x000000000010dac2: or eax, 0x8b6400; cmp eax, 0x26; je 0x10dad0; mov eax, r9d; ret; 
0x00000000000412ab: or eax, 0x90e3eb00; mov rax, qword ptr [rip + 0x1aabb9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000001178a1: or eax, 0xc0894c00; add rsp, 8; ret; 
0x0000000000117871: or eax, 0xc0894c00; ret; 
0x0000000000086ba6: or eax, 0xc0c48148; add al, byte ptr [rax]; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000000bcdf4: or eax, 0xc2214800; lea rax, [rip + 0xcef00]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x00000000000cf7b2: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x0000000000118e19: or eax, 0xc4834800; adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000010dde9: or eax, 0xc76400; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001144ed: or eax, 0xc76400; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001199ae: or eax, 0xc76400; or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000011336d: or eax, 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000010de5d: or eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000120a09: or eax, 0xcb462; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001209d6: or eax, 0xcb495; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001209a6: or eax, 0xcb4c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120979: or eax, 0xcb4f2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001204f6: or eax, 0xcb975; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001204c9: or eax, 0xcb9a2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120496: or eax, 0xcb9d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120466: or eax, 0xcba05; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120396: or eax, 0xcbad5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001202a6: or eax, 0xcbbc5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120266: or eax, 0xcbc05; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120236: or eax, 0xcbc35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120206: or eax, 0xcbc65; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201d9: or eax, 0xcbc92; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201a9: or eax, 0xcbcc2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120176: or eax, 0xcbcf5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120149: or eax, 0xcbd22; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120116: or eax, 0xcbd55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200e6: or eax, 0xcbd85; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001200b9: or eax, 0xcbdb2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120086: or eax, 0xcbde5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120056: or eax, 0xcbe15; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120026: or eax, 0xcbe45; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fff6: or eax, 0xcbe75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ffc9: or eax, 0xcbea2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff99: or eax, 0xcbed2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff69: or eax, 0xcbf02; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff36: or eax, 0xcbf35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff06: or eax, 0xcbf65; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fed9: or eax, 0xcbf92; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fea9: or eax, 0xcbfc2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe76: or eax, 0xcbff5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe46: or eax, 0xcc025; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe16: or eax, 0xcc055; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fde6: or eax, 0xcc085; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fdb6: or eax, 0xcc0b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd89: or eax, 0xcc0e2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd56: or eax, 0xcc115; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fd29: or eax, 0xcc142; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcf6: or eax, 0xcc175; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcc6: or eax, 0xcc1a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc96: or eax, 0xcc1d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc66: or eax, 0xcc205; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc36: or eax, 0xcc235; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc06: or eax, 0xcc265; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fbd6: or eax, 0xcc295; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fba9: or eax, 0xcc2c2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f616: or eax, 0xcc855; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f5e9: or eax, 0xcc882; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f556: or eax, 0xcc915; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f426: or eax, 0xcca45; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3f6: or eax, 0xcca75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f396: or eax, 0xccad5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f35f: or eax, 0xccb0c; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f246: or eax, 0xccc25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f216: or eax, 0xccc55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d1a6: or eax, 0xcecc5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d179: or eax, 0xcecf2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d146: or eax, 0xced25; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0e9: or eax, 0xced82; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d0b6: or eax, 0xcedb5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d089: or eax, 0xcede2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d059: or eax, 0xcee12; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011d026: or eax, 0xcee45; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cff6: or eax, 0xcee75; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011cfc9: or eax, 0xceea2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000062351: or eax, 0xd0c48148; add dword ptr [rax], eax; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000118dc6: or eax, 0xd30a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d96: or eax, 0xd30d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d66: or eax, 0xd3105; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d36: or eax, 0xd3135; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d09: or eax, 0xd3162; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118cd6: or eax, 0xd3195; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ca6: or eax, 0xd31c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118bd6: or eax, 0xd3295; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ba6: or eax, 0xd32c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118968: or eax, 0xd3503; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000178934: or eax, 0xd4a8d48; jne 0x178b20; ret; 
0x000000000017cd55: or eax, 0xd4a8d48; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001158b6: or eax, 0xd65b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115886: or eax, 0xd65e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115856: or eax, 0xd6615; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115516: or eax, 0xd6955; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118ea0: or eax, 0xd69cb; call 0x1191a0; lea rax, [rip + 0xd69bf]; add rsp, 8; ret; 
0x0000000000115456: or eax, 0xd6a15; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115396: or eax, 0xd6ad5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115366: or eax, 0xd6b05; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115166: or eax, 0xd6d05; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115016: or eax, 0xd6e55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001145d6: or eax, 0xd7895; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114416: or eax, 0xd7a55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000114016: or eax, 0xd7e55; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b7851: or eax, 0xd7f8d48; jne 0xb7f80; ret; 
0x00000000000b8f45: or eax, 0xd7f8d48; jne 0xb97d0; ret; 
0x00000000001131d9: or eax, 0xd8c92; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff66: or eax, 0xdbf05; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff36: or eax, 0xdbf35; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff06: or eax, 0xdbf65; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fed9: or eax, 0xdbf92; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fea6: or eax, 0xdbfc5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe76: or eax, 0xdbff5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe46: or eax, 0xdc025; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fe19: or eax, 0xdc052; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fde6: or eax, 0xdc085; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f629: or eax, 0xdc842; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f5f6: or eax, 0xdc875; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f5c6: or eax, 0xdc8a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010f596: or eax, 0xdc8d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec76: or eax, 0xdd1f5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec46: or eax, 0xdd225; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb86: or eax, 0xdd2e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb56: or eax, 0xdd315; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eb26: or eax, 0xdd345; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eaf6: or eax, 0xdd375; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eac6: or eax, 0xdd3a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010e7a6: or eax, 0xdd6c5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010deb6: or eax, 0xddfb5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010de86: or eax, 0xddfe5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ddc6: or eax, 0xde0a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dd96: or eax, 0xde0d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc66: or eax, 0xde205; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc36: or eax, 0xde235; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010d606: or eax, 0xde865; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001027b6: or eax, 0xe96b5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102786: or eax, 0xe96e5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102756: or eax, 0xe9715; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102726: or eax, 0xe9745; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026f6: or eax, 0xe9775; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001026c6: or eax, 0xe97a5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102696: or eax, 0xe97d5; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102666: or eax, 0xe9805; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000102576: or eax, 0xed00d; mov dword ptr [rdx], ecx; pop rdx; pop rcx; pop rbx; ret; 
0x000000000017cd81: or eax, 0xee88349; lea rcx, [rdx + 0xe]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b8f71: or eax, 0xee88349; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x000000000016dbba: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000116f6c: or eax, 0xf0e78300; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000016dbc3: or eax, 0xf7f0ff3; ret; 
0x0000000000045fe1: or eax, 0xfb8148; adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x00000000001175b9: or eax, 0xff854800; jne 0x1175d0; mov eax, 1; ret; 
0x0000000000041b78: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000433f1: or eax, 0xffffffff; ret; 
0x0000000000185049: or eax, 1; ret; 
0x000000000018bfc1: or eax, 1; vzeroupper; ret; 
0x000000000010044e: or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000094d85: or eax, 2; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000061bc5: or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000014857d: or eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000118b95: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x000000000007dcde: or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000048112: or eax, dword ptr [rax]; add dword ptr [rax], eax; ret; 
0x0000000000131861: or eax, dword ptr [rax]; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000137c1d: or eax, dword ptr [rax]; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbp; ret; 
0x00000000001300a9: or eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000138747: or eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000012f635: or eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000012e9e5: or eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000cf154: or eax, dword ptr [rbp + 0x31]; leave; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x000000000002fda3: or eax, dword ptr [rbx + 0x438901e8]; or byte ptr [rbx + 0x1974fdf8], al; pop rbx; ret; 
0x000000000010fec8: or eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10fed7; ret; 
0x00000000000420e6: or eax, ecx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004225d: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000041e9b: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000b1807: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000009a05d: or eax, edi; add eax, 0x154e10; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000047330: or eax, edi; ret; 
0x00000000000b180e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000041ba7: or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000004216b: or eax, edx; movq xmm0, rax; ret; 
0x000000000005294b: or eax, edx; ret; 
0x00000000000425a6: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000012fd44: or eax, esi; bswap eax; ret; 
0x000000000004244c: or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x0000000000057ca0: or eax, esi; movq xmm0, rax; ret; 
0x000000000011f126: or eax, esi; ret; 
0x000000000011faae: or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000198a21: or ebx, dword ptr [rcx + 0x1f0fffe8]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000016dd83: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000011d224: or ecx, dword ptr [rax + 0x39]; xlatb; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000bbb55: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000b780f: or ecx, dword ptr [rax - 0x73]; jg 0xb781f; jne 0xb7f80; ret; 
0x00000000000b8f03: or ecx, dword ptr [rax - 0x73]; jg 0xb8f13; jne 0xb97d0; ret; 
0x00000000000e111b: or ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000117897: or ecx, dword ptr [rax - 0x7d]; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7eed], eax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117867: or ecx, dword ptr [rax - 0x7d]; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7f1d], eax; mov rax, r8; ret; 
0x0000000000093e7d: or ecx, dword ptr [rax]; pop rbx; ret; 
0x00000000000cf014: or ecx, dword ptr [rbx + 0x463b2847]; sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000cf064: or ecx, dword ptr [rbx + 0x463b3847]; cmp byte ptr [rbp + 0x13], dh; ret; 
0x000000000017ccf7: or ecx, dword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7813: or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x0000000000042042: or ecx, eax; movq xmm0, rcx; ret; 
0x00000000000aa557: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000185040: or ecx, esi; sub rax, rcx; je 0x185050; sbb eax, eax; or eax, 1; ret; 
0x000000000013beec: or edi, dword ptr [rdx + 0x104]; cmove eax, edx; ret; 
0x00000000000e50cf: or edi, dword ptr [rdx + 0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f7c: or edi, dword ptr [rdx + 0xfde8]; mov eax, 0x7f; cmove rax, rdx; ret; 
0x000000000011f763: or edi, eax; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000fed64: or edi, edi; inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000009e2f2: or edx, dword ptr [rip + 0x74c08500]; push rdi; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000041b63: or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x00000000000e50cd: or edx, eax; or edi, dword ptr [rdx + 0x40]; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f7a: or edx, eax; or edi, dword ptr [rdx + 0xfde8]; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000b1d4f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf89b: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1f10: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005b11a: or edx, ecx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x0000000000041d09: or edx, esi; je 0x41c58; ret; 
0x00000000000bbb53: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000000423bf: or esi, eax; movd xmm0, esi; ret; 
0x0000000000057c59: or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x0000000000113912: or esi, eax; xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x0000000000082c04: or esi, ebp; mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bbfa7: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000016dca3: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000057c97: or esi, ecx; or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x00000000000df4d2: or esi, edi; adc byte ptr [rax], al; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000052a53: or esi, edi; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000057cc4: or esi, edx; mov qword ptr [rsp - 0x18], rax; mov word ptr [rsp - 0x10], si; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000057c5b: or esi, edx; movd xmm0, esi; ret; 
0x0000000000057c99: or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000000009f133: or esp, 0x40000000; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x0000000000082a78: or esp, dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008e661: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000033df3: or esp, dword ptr [rbx]; ja 0x33e07; lea rdx, [rdi + rsi*4]; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x000000000011fa63: or esp, eax; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000160c96: or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000043b91: or qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000001788b5: or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000017cc96: or qword ptr [rdi], rcx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000a889d: or r10b, r9b; jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x000000000016ddf2: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x000000000016dd82: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000017e248: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000016dd12: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000016dca2: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x0000000000094d55: or r9b, r10b; clc; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000007f1d2: or r9b, r13b; ret; 
0x0000000000178937: or rax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000017cd58: or rax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000116ec4: or rax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000cb17f: or rax, 0xffffffff80000000; mov dword ptr [rdx + 4], r8d; mov dword ptr [rdx], eax; xor eax, eax; ret; 
0x0000000000118e18: or rax, 0xffffffffc4834800; adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000116f6b: or rax, 0xfffffffff0e78300; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000433f0: or rax, 0xffffffffffffffff; ret; 
0x00000000000420e5: or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x0000000000041e9a: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret; 
0x00000000000b1806: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000004732f: or rax, rdi; ret; 
0x00000000000b180d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000004216a: or rax, rdx; movq xmm0, rax; ret; 
0x00000000000425a5: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000057c9f: or rax, rsi; movq xmm0, rax; ret; 
0x000000000011f125: or rax, rsi; ret; 
0x000000000017ccf6: or rcx, qword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000042041: or rcx, rax; movq xmm0, rcx; ret; 
0x00000000000aa556: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000018503f: or rcx, rsi; sub rax, rcx; je 0x185050; sbb eax, eax; or eax, 1; ret; 
0x00000000000b1d4e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000cf89a: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1f0f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000005b119: or rdx, rcx; mov qword ptr [rsp - 0x10], rdx; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x0000000000041f04: orpd xmm0, xmm1; ret; 
0x0000000000042086: orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042060: orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041f05: orps xmm0, xmm1; ret; 
0x0000000000042400: orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423db: orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042087: orps xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042061: orps xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000184d26: out 0, al; add byte ptr [rax], al; add rax, rdi; vzeroupper; ret; 
0x000000000002423e: out 0, al; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000000422fe: out 0, al; add byte ptr [rax], al; xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x000000000012fd59: out 0x10, eax; movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000057c52: out 0x17, al; and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x000000000012fd3a: out 0x18, eax; and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x0000000000057c9d: out 0x20, al; or rax, rsi; movq xmm0, rax; ret; 
0x00000000001974a8: out 0x20, eax; je 0x1974bc; movss xmm0, dword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000004732d: out 0x20, eax; or rax, rdi; ret; 
0x0000000000094604: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x94610; ret; 
0x000000000010d438: out 0x44, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000041239: out 0x45, al; mov ebx, dword ptr [rax + rax*4 + 8]; add r11, qword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000009a058: out 0x45, al; test al, al; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x000000000012bb37: out 0x48, al; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000145b21: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000057b74: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009c270: out 0x48, eax; sub eax, 0x10; ret; 
0x000000000012de00: out 0x48, eax; sub esp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x0000000000167d56: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b86: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c82: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bce: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a1df8: out 0x4c, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e30fa: out 0x57, eax; ret; 
0x00000000001975c6: out 0x5b, al; ret; 
0x00000000000dd818: out 0x5b, eax; pop rbp; pop r12; ret; 
0x00000000001854d6: out 0x5f, al; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000342c7: out 0x80, eax; sete al; ret; 
0x00000000000745d3: out 0x83, al; ret; 
0x00000000000c9f5d: out 0x89, al; ret; 
0x00000000000f3925: out 0x89, eax; ret; 
0x0000000000131941: out 0xb, al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000131860: out 0xb, eax; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000010d7ac: out 0xd, al; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000010d6ec: out 0xd, eax; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000e8a70: out 0xe8, al; retf 1; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000129249: out 0xe8, eax; adc dword ptr [rdx - 0x76b70011], edx; ret; 
0x00000000001122e5: out 0xe8, eax; add r9b, r14b; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000d33a4: out 0xe8, eax; cmpsb byte ptr [rsi], byte ptr [rdi]; lodsd eax, dword ptr [rsi]; sti; dec dword ptr [rax + 0x39]; ret; 
0x00000000000a273b: out 0xe8, eax; pop rdi; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x00000000000d6117: out 0xe8, eax; ret; 
0x000000000015ca83: out 0xe8, eax; xchg edi, eax; insd dword ptr [rdi], dx; sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000048102: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000048151: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000153b72: out 0xec, eax; inc dword ptr [rbp + 0x5b0775db]; pop rbp; pop r12; ret; 
0x0000000000123d33: out 0xef, eax; dec dword ptr [rax - 0x77]; ret; 
0x0000000000192d11: out 0xf, al; je 0x192d30; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x00000000000cef51: out 0xf, al; je 0xcef70; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x00000000000cefb1: out 0xf, al; je 0xcefd0; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cf011: out 0xf, al; je 0xcf020; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf061: out 0xf, al; je 0xcf070; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000bc0fc: out 0xf0, al; mov edx, 0; pop rbx; cmove rax, rdx; ret; 
0x0000000000116f6f: out 0xf0, eax; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000016d58a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000016d60a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000140eda: out 0xf8, al; or al, byte ptr [rax]; test eax, eax; je 0x140ee8; ret; 
0x000000000010c8a1: out 0xf8, eax; sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae3: out 0xf8, eax; sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000007e826: out 0xff, eax; push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000009f75e: out 2, al; lea rax, [rip + 0xaef9]; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x000000000013c984: out 4, al; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x000000000012fd75: out 8, eax; movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000005fcf9: out dx, al; adc byte ptr [rcx + 0x39], cl; ret; 
0x000000000005f363: out dx, al; add al, 0xc7; add al, 0x30; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000013c392: out dx, al; add dword ptr [rax - 0x78], eax; ja 0x13c399; ret; 
0x000000000013c38a: out dx, al; add edi, dword ptr [rax + 2]; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x000000000012084e: out dx, al; cmp eax, 0x8b48fff7; and al, 8; add rsp, 0x28; ret; 
0x000000000014124e: out dx, al; dec dword ptr [rax + 0x39]; ret; 
0x0000000000138740: out dx, al; dec dword ptr [rax - 0x77]; add eax, 0xb5197; add rsp, 8; ret; 
0x00000000001385a1: out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000013a03b: out dx, al; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013cd11: out dx, al; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d990: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011faed: out dx, al; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x0000000000082c05: out dx, al; mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000014b10e: out dx, al; mov ebx, 0xc0850000; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000167d5a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000011d229: out dx, al; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000e82d1: out dx, al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000016d99a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000011cfcb: out dx, al; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011464e: out dx, al; push rdi; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x000000000011ec26: out dx, al; ret; 
0x0000000000057b53: out dx, al; xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x00000000000bcc39: out dx, al; xor eax, eax; ret; 
0x00000000000cf34d: out dx, eax; adc byte ptr [rax + 1], cl; clc; ret; 
0x00000000000d0134: out dx, eax; adc dword ptr [rax], eax; add rsp, 8; ret; 
0x000000000019678a: out dx, eax; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000e50f3: out dx, eax; add byte ptr [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000087d22: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d7e: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041294: out dx, eax; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000001233f4: out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x0000000000128a9a: out dx, eax; inc dword ptr [rax - 0x76b7ffc8]; ret; 
0x000000000016da10: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000102a40: out dx, eax; mov eax, dword ptr [rdx + 8]; ret; 
0x0000000000167b8a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c86: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bd2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a8620: out dx, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000a8780: out dx, eax; mov rax, r8; ret; 
0x0000000000056528: out dx, eax; mov rax, rdx; ret; 
0x000000000016da1a: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000bcdfd: out dx, eax; or al, 0; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret; 
0x000000000007dcdd: out dx, eax; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000100462: out dx, eax; rol byte ptr [rax - 0x3806c799], 6; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000093667: out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x000000000011fab2: out dx, eax; xor eax, eax; ret; 
0x000000000006bf00: outsb dx, byte ptr [rsi]; fmul dword ptr [rbx + 0xf660446]; insb byte ptr [rdi], dx; ret; 
0x0000000000063dbe: outsb dx, byte ptr [rsi]; fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000001975be: outsb dx, byte ptr [rsi]; lodsd eax, dword ptr [rsi]; call 0xffffffffdb9ebec4; jne 0x1975ad; pop rbx; ret; 
0x0000000000115018: outsb dx, byte ptr [rsi]; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000002530d: outsb dx, byte ptr [rsi]; ret; 
0x0000000000047cdf: outsb dx, byte ptr [rsi]; rol byte ptr [rbp + 0x31], 0xc0; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000ff2b7: outsb dx, byte ptr [rsi]; rol byte ptr [rcx - 0x77], 0x55; add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x00000000000423f7: outsb dx, byte ptr [rsi]; ror dword ptr [rdi], 0x54; add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d2: outsb dx, byte ptr [rsi]; ror dword ptr [rdi], 0x54; add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000042450: outsb dx, byte ptr [rsi]; sal bl, 0xf; pop rcx; add eax, 0x17af36; ret; 
0x00000000000420eb: outsb dx, byte ptr [rsi]; sal dl, 0xf; pop rcx; add eax, 0x17abfb; ret; 
0x0000000000047653: outsb dx, byte ptr [rsi]; sbb al, byte ptr [rax]; syscall; pop rbp; ret; 
0x00000000001509e2: outsd dx, dword ptr [rsi]; adc bh, byte ptr [rax + 1]; movups xmmword ptr [r8 + 0x20], xmm2; ret; 
0x00000000000bbdd0: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000000429f2: outsd dx, dword ptr [rsi]; add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000004288c: outsd dx, dword ptr [rsi]; add al, 0x24; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000122190: outsd dx, dword ptr [rsi]; add eax, 1; mov dword ptr [rdx], eax; ret; 
0x00000000000e160c: outsd dx, dword ptr [rsi]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000005b123: outsd dx, dword ptr [rsi]; and al, 0xe8; pinsrw xmm0, eax, 6; ret; 
0x0000000000198f41: outsd dx, dword ptr [rsi]; cld; call ptr [rbp + 0x48]; mov dword ptr [rip + 0x56f20], 0; ret; 
0x00000000001901c0: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000010c90d: outsd dx, dword ptr [rsi]; ja 0x10c978; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c95d: outsd dx, dword ptr [rsi]; jbe 0x10c9c0; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2ef: outsd dx, dword ptr [rsi]; jbe 0x10d352; movups xmmword ptr [rdi + 0xe8], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010c916: outsd dx, dword ptr [rsi]; jg 0x10c991; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000010c966: outsd dx, dword ptr [rsi]; jle 0x10c9d9; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x000000000010d2fb: outsd dx, dword ptr [rsi]; jle 0x10d36e; movups xmmword ptr [rdi + 0xf8], xmm7; ret; 
0x000000000010d26b: outsd dx, dword ptr [rsi]; mov edi, 0xf8; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000015092a: outsd dx, dword ptr [rsi]; movups xmmword ptr [rsi], xmm0; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001992bd: outsd dx, dword ptr [rsi]; nop; call 0xffffffff8038a2c3; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000014d29b: outsd dx, dword ptr [rsi]; or byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x0000000000062fb7: outsd dx, dword ptr [rsi]; or byte ptr [rbx + 0x48010447], al; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001509f3: outsd dx, dword ptr [rsi]; pop rax; and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x000000000018eb4d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x00000000000b19fa: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000b7116: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b8786: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000b70f6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7de6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000ba406: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000baef6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b19ff: outsd dx, dword ptr [rsi]; ret; 
0x0000000000054f10: outsd dx, dword ptr [rsi]; sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000151dc6: outsd dx, dword ptr [rsi]; sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x00000000001509c3: outsd dx, dword ptr [rsi]; xor byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014ffea: outsd dx, dword ptr [rsi]; xor byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000043f2d: pand mm0, mm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000428fe: pand mm0, qword ptr [rip + 0x179e6b]; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x000000000004263d: pand mm0, qword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000042635: pand mm1, qword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000043f2c: pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000000428fd: pand xmm0, xmmword ptr [rip + 0x179e6b]; por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x000000000004263c: pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x0000000000042634: pand xmm1, xmmword ptr [rip + 0x17a134]; pand xmm0, xmmword ptr [rip + 0x17a11c]; por xmm0, xmm1; ret; 
0x00000000000cf012: pcmpeqb mm1, qword ptr [rbx]; mov eax, dword ptr [rdi + 0x28]; cmp eax, dword ptr [rsi + 0x28]; jne 0xcf080; ret; 
0x00000000000cf062: pcmpeqb mm1, qword ptr [rbx]; mov eax, dword ptr [rdi + 0x38]; cmp eax, dword ptr [rsi + 0x38]; jne 0xcf080; ret; 
0x00000000000ac14d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac62f: pcmpeqb mm1, qword ptr [rdi + 0x20]; pmovmskb eax, xmm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ac601: pcmpeqb mm1, qword ptr [rdi]; pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000cf038: pcmpeqb mm2, qword ptr [rip + 0x3b30478b]; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000cef28: pcmpeqb mm2, qword ptr [rip + 0x63b078b]; jne 0xcf080; ret; 
0x00000000000cefb2: pcmpeqb mm3, qword ptr [rbx]; mov eax, dword ptr [rdi + 0x18]; cmp eax, dword ptr [rsi + 0x18]; jne 0xcf080; ret; 
0x00000000000cef52: pcmpeqb mm3, qword ptr [rbx]; mov eax, dword ptr [rdi + 8]; cmp eax, dword ptr [rsi + 8]; jne 0xcf080; ret; 
0x0000000000192d12: pcmpeqb mm3, qword ptr [rbx]; mov eax, dword ptr [rdi - 8]; cmp eax, dword ptr [rsi - 8]; jne 0x192e20; ret; 
0x00000000000cfae4: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x0000000000192ce4: pcmpeqb mm3, qword ptr [rcx]; mov eax, dword ptr [rdi - 0x10]; cmp eax, dword ptr [rsi - 0x10]; jne 0x192e20; ret; 
0x00000000000cfacf: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x00000000000b1bef: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000ac14c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac62e: pcmpeqb xmm1, xmmword ptr [rdi + 0x20]; pmovmskb eax, xmm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ac600: pcmpeqb xmm1, xmmword ptr [rdi]; pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000b1bee: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000ce32d: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce32c: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000bb009: pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bafa7: pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000ac603: pcmpgtd mm1, qword ptr [rdi]; xlatb; rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x0000000000183db4: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x183db0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000183d26: pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183dd0; ret; 
0x0000000000183b58: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000018be6a: pextrw edi, mm0, 0x77; ret; 
0x000000000005b128: pinsrw mm0, eax, 6; ret; 
0x000000000005b127: pinsrw xmm0, eax, 6; ret; 
0x00000000000421b5: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x00000000000424e5: pmovmskb eax, mm0; and eax, 8; ret; 
0x00000000000b16f0: pmovmskb eax, mm0; test eax, eax; je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000ac0bc: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac5a3: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000ac152: pmovmskb eax, mm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac122: pmovmskb eax, mm1; test eax, eax; jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac605: pmovmskb eax, mm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac634: pmovmskb eax, mm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ce332: pmovmskb eax, mm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce302: pmovmskb eax, mm1; test eax, eax; jne 0xce3b0; xor eax, eax; ret; 
0x00000000000421b4: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000424e4: pmovmskb eax, xmm0; and eax, 8; ret; 
0x00000000000b16ef: pmovmskb eax, xmm0; test eax, eax; je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000ac0bb: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac5a2: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000ac151: pmovmskb eax, xmm1; test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac121: pmovmskb eax, xmm1; test eax, eax; jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac604: pmovmskb eax, xmm1; test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac633: pmovmskb eax, xmm1; test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ce331: pmovmskb eax, xmm1; test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce301: pmovmskb eax, xmm1; test eax, eax; jne 0xce3b0; xor eax, eax; ret; 
0x0000000000190e01: pmovmskb edx, mm3; test eax, eax; jne 0x190e14; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000b1bf3: pmovmskb edx, mm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x0000000000190e00: pmovmskb edx, xmm3; test eax, eax; jne 0x190e14; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000000b1bf2: pmovmskb edx, xmm4; test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x000000000013e0a1: pop qword ptr [rax]; add byte ptr [rax], al; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000102685: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000000d4239: pop qword ptr [rdx]; jbe 0xd4240; ret; 
0x00000000000a0641: pop r10; or al, 0; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x0000000000149ad8: pop r11; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000009a504: pop r12; mov rax, r8; pop r13; ret; 
0x000000000007a173: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000248eb: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b63: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000002601a: pop r12; pop r13; pop r14; ret; 
0x00000000000ef194: pop r12; pop r13; pop r15; ret; 
0x0000000000046074: pop r12; pop r13; pop rbp; ret; 
0x0000000000025b9b: pop r12; pop r13; ret; 
0x000000000008e230: pop r12; pop r14; ret; 
0x000000000012d19d: pop r12; pop rbp; ret; 
0x000000000002f709: pop r12; ret; 
0x000000000007a175: pop r13; mov rax, r9; pop r14; ret; 
0x00000000000248ed: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b65: pop r13; pop r14; pop r15; ret; 
0x000000000002601c: pop r13; pop r14; ret; 
0x00000000000ef196: pop r13; pop r15; ret; 
0x0000000000046076: pop r13; pop rbp; ret; 
0x0000000000025b9d: pop r13; ret; 
0x00000000000248ef: pop r14; pop r15; pop rbp; ret; 
0x0000000000023b67: pop r14; pop r15; ret; 
0x000000000002601e: pop r14; ret; 
0x00000000000248f1: pop r15; pop rbp; ret; 
0x0000000000023b69: pop r15; ret; 
0x00000000000919bf: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000000918bc: pop r8; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000043b4a: pop r8; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000092786: pop r8; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000090084: pop rax; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000919c0: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000001509f4: pop rax; and byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm3; ret; 
0x0000000000150153: pop rax; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000000f7e1b: pop rax; cmp dh, dh; ret; 
0x00000000000e4f4a: pop rax; jne 0xe4f50; ret; 
0x0000000000150170: pop rax; mov eax, 1; ret; 
0x0000000000034268: pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000341f6: pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x00000000000e50a1: pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000001494a4: pop rax; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000918bd: pop rax; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000001133e1: pop rax; mov rax, qword ptr [rdx + 0x50]; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000011942d: pop rax; mov rax, r12; pop rdx; pop r12; ret; 
0x0000000000034541: pop rax; mov rdx, qword ptr [rip + 0x1b79df]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000010c95a: pop rax; movdqu xmm6, xmmword ptr [rsi + 0x60]; movups xmmword ptr [rdi + 0x68], xmm6; movdqu xmm7, xmmword ptr [rsi + 0x70]; movups xmmword ptr [rdi + 0x78], xmm7; ret; 
0x0000000000043b4b: pop rax; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x000000000005d7b9: pop rax; or al, 0x89; fdiv st(6); ret; 
0x000000000005c116: pop rax; or al, 0xf6; ret; 
0x00000000000b5c14: pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000005520f: pop rax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000226be: pop rax; pop rbx; pop rbp; ret; 
0x000000000015fae5: pop rax; pop rdx; pop rbx; ret; 
0x00000000000c9fd4: pop rax; pushfq; add eax, 0x74db8500; sbb al, 0x39; ret; 
0x0000000000036174: pop rax; ret; 
0x0000000000092787: pop rax; test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000011f2cf: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x000000000015fd21: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015feca: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x00000000000961d2: pop rbp; adc eax, 0x10894800; ret; 
0x00000000000a7aba: pop rbp; add byte ptr [rbx - 0x71f08005], 0x45; add al, byte ptr [rax]; add bh, dh; ret; 
0x00000000000a5dba: pop rbp; add byte ptr [rbx - 0x71f08005], 0x53; add al, byte ptr [rax]; add bh, dh; ret; 
0x0000000000107179: pop rbp; add byte ptr [rcx + rbx*2 + 0x5b], dh; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000013b904: pop rbp; add dh, dh; ret; 
0x00000000001150e1: pop rbp; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e366a: pop rbp; clc; leave; ret; 
0x0000000000127b8f: pop rbp; cmp byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000115cb0: pop rbp; idiv edi; mov eax, 1; add rsp, 8; ret; 
0x00000000000dd759: pop rbp; lea rax, [rax + rdx*8]; ret; 
0x00000000001193a1: pop rbp; lea rax, [rip + 0xd6557]; pop r12; pop r13; ret; 
0x0000000000134d69: pop rbp; mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000009519e: pop rbp; mov dword ptr [r11 + 0x10], eax; mov dword ptr [r11 + 0x14], 0; ret; 
0x000000000012d631: pop rbp; mov eax, 0x89483e74; ret; 
0x0000000000085af3: pop rbp; mov eax, r12d; pop r12; pop r13; pop r14; ret; 
0x000000000010d44c: pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000dfb24: pop rbp; mov eax, r8d; pop r12; pop r13; pop r14; ret; 
0x000000000008b647: pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008b4eb: pop rbp; mov eax, r8d; ret; 
0x00000000000a1f70: pop rbp; mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x0000000000198f44: pop rbp; mov qword ptr [rip + 0x56f20], 0; ret; 
0x000000000008e192: pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000000d1cd4: pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x00000000000a0397: pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x0000000000034b47: pop rbp; mov rax, r12; pop r12; ret; 
0x00000000001419ef: pop rbp; mov rax, r13; pop r12; pop r13; pop r14; ret; 
0x000000000009a499: pop rbp; mov rax, r8; pop r12; pop r13; ret; 
0x0000000000095654: pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000038ca4: pop rbp; mov rax, r9; pop r12; ret; 
0x000000000007a176: pop rbp; mov rax, r9; pop r14; ret; 
0x0000000000149f8c: pop rbp; movzx eax, al; pop r12; ret; 
0x000000000009a503: pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000023b62: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000026019: pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ef193: pop rbp; pop r12; pop r13; pop r15; ret; 
0x0000000000025b9a: pop rbp; pop r12; pop r13; ret; 
0x000000000008e22f: pop rbp; pop r12; pop r14; ret; 
0x00000000000437d6: pop rbp; pop r12; ret; 
0x000000000013663e: pop rbp; pop r13; pop r14; pop r15; ret; 
0x00000000000248ee: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b66: pop rbp; pop r14; pop r15; ret; 
0x000000000002601d: pop rbp; pop r14; ret; 
0x00000000000ef197: pop rbp; pop r15; ret; 
0x0000000000046077: pop rbp; pop rbp; ret; 
0x0000000000055bb8: pop rbp; pop rbx; ret; 
0x00000000000226c0: pop rbp; ret; 
0x000000000014e147: pop rbp; sub al, 0xa; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000a093e: pop rbp; xor eax, eax; pop r12; pop r13; ret; 
0x0000000000198ce3: pop rbx; add eax, 0x5b050f00; ret; 
0x0000000000198c27: pop rbx; add eax, 0xdb854800; jne 0x198c10; pop rbx; ret; 
0x00000000000bc1fe: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x00000000000bc1b6: pop rbx; and eax, 0x7ff80000; ret; 
0x000000000010ea6c: pop rbx; clc; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x000000000005b45f: pop rbx; cmovb r10, rdi; mov rax, r10; ret; 
0x00000000000bc103: pop rbx; cmove rax, rdx; ret; 
0x00000000000a2c3c: pop rbx; cmovne rax, rdi; ret; 
0x00000000000bc19b: pop rbx; cmovne rax, rdx; ret; 
0x0000000000121d01: pop rbx; cmpsb byte ptr [rsi], byte ptr [rdi]; or al, 0; pop rbx; ret; 
0x00000000000ddb01: pop rbx; hlt; dec dword ptr [rax - 0x77]; ret; 
0x0000000000087590: pop rbx; mov dword ptr [rbp + 0x74], eax; mov eax, 1; pop rbp; pop r12; ret; 
0x0000000000094726: pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x000000000015348f: pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x00000000000f23d0: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret; 
0x0000000000134d13: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x00000000000875b8: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret; 
0x0000000000060f08: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000148dc8: pop rbx; mov eax, 1; pop rbp; pop r12; ret; 
0x000000000012d1ae: pop rbx; mov eax, 5; pop r12; pop rbp; ret; 
0x00000000001071d6: pop rbx; mov eax, 5; pop rbp; pop r12; ret; 
0x000000000010c728: pop rbx; mov eax, 9; pop rbp; pop r12; ret; 
0x00000000000473cd: pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000015053f: pop rbx; mov eax, r8d; pop rbp; pop r12; pop r13; ret; 
0x0000000000046adb: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000013c74b: pop rbx; mov qword ptr [r9], rcx; ret; 
0x00000000000a20bd: pop rbx; mov qword ptr [rbp], 0; pop rbp; pop r12; ret; 
0x000000000004757b: pop rbx; mov qword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000198ad6: pop rbx; mov qword ptr [rip + 0x5519e], 0; ret; 
0x0000000000198e0b: pop rbx; mov qword ptr [rip + 0x56319], 0; ret; 
0x0000000000095449: pop rbx; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000008e244: pop rbx; mov rax, r12; pop rbp; pop r12; pop r14; ret; 
0x00000000000bcbff: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x000000000013b94f: pop rbx; mov rax, r8; pop rbp; pop r12; pop r13; ret; 
0x0000000000085915: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000013c723: pop rbx; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000008dfe0: pop rbx; neg eax; ret; 
0x00000000001100d0: pop rbx; pop r12; pop r13; pop r14; ret; 
0x0000000000046073: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000062569: pop rbx; pop r12; pop r13; ret; 
0x000000000005b937: pop rbx; pop r12; ret; 
0x00000000000dd758: pop rbx; pop rbp; lea rax, [rax + rdx*8]; ret; 
0x000000000010d44b: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000008b646: pop rbx; pop rbp; mov eax, r8d; pop r12; ret; 
0x000000000008b4ea: pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000008e191: pop rbx; pop rbp; mov r12, rax; mov rax, r12; pop r12; ret; 
0x00000000000a8dfb: pop rbx; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x0000000000034b46: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000095653: pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000038ca3: pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x0000000000149f8b: pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x000000000003040a: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000ef192: pop rbx; pop rbp; pop r12; pop r13; pop r15; ret; 
0x0000000000025b99: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22e: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000002f830: pop rbx; pop rbp; pop r12; ret; 
0x000000000013663d: pop rbx; pop rbp; pop r13; pop r14; pop r15; ret; 
0x0000000000196ea2: pop rbx; pop rbp; pop r14; ret; 
0x00000000000226bf: pop rbx; pop rbp; ret; 
0x000000000002fdaf: pop rbx; ret; 
0x000000000010c77e: pop rbx; setl al; ret; 
0x000000000011998e: pop rbx; setne al; movzx eax, al; ret; 
0x00000000000bc112: pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret; 
0x00000000000bc15d: pop rbx; shr eax, 6; and eax, 0x3fffc00; ret; 
0x000000000008f55f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000004739c: pop rbx; test eax, eax; cmovs eax, edx; ret; 
0x000000000012d19a: pop rbx; xor eax, eax; pop r12; pop rbp; ret; 
0x00000000000900b0: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000420ef: pop rcx; add eax, 0x17abfb; ret; 
0x0000000000042454: pop rcx; add eax, 0x17af36; ret; 
0x0000000000042409: pop rcx; add eax, 0x17af79; ret; 
0x00000000000423e4: pop rcx; add eax, 0x17afa2; ret; 
0x0000000000115213: pop rcx; insb byte ptr [rdi], dx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001845c6: pop rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000fed63: pop rcx; or edi, edi; inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000119370: pop rcx; pop rbp; pop r12; pop r13; ret; 
0x000000000010257e: pop rcx; pop rbx; ret; 
0x000000000010717c: pop rcx; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000115413: pop rcx; push 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000f1f96: pop rcx; xor eax, eax; pop rbp; ret; 
0x000000000010de62: pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001854d7: pop rdi; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000001932f2: pop rdi; add dword ptr [rcx - 9], eax; ret; 
0x0000000000051b9b: pop rdi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000041241: pop rdi; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x0000000000184c02: pop rdi; and ch, al; std; xlatb; ret; 
0x00000000000a273d: pop rdi; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x0000000000168129: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f39: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d59: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b89: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c85: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bd1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000248f2: pop rdi; pop rbp; ret; 
0x0000000000023b6a: pop rdi; ret; 
0x000000000012bc08: pop rdi; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000051c69: pop rdx; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000114bb0: pop rdx; add rsp, 0x38; ret; 
0x0000000000042075: pop rdx; andpd xmm1, xmmword ptr [rip + 0x17a662]; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x000000000009e8d0: pop rdx; clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000a0642: pop rdx; or al, 0; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x0000000000119eab: pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x00000000000a7ad9: pop rdx; or dword ptr [rax], eax; add bh, dh; ret; 
0x0000000000119431: pop rdx; pop r12; ret; 
0x000000000015fae6: pop rdx; pop rbx; ret; 
0x000000000010257d: pop rdx; pop rcx; pop rbx; ret; 
0x00000000000cf625: pop rdx; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000009f3a9: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000000961c8: pop rsi; adc eax, 0x30894800; mov rax, qword ptr [rip + 0x155d0b]; mov qword ptr [rax], rdx; ret; 
0x00000000001974b1: pop rsi; add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x00000000001974b6: pop rsi; add eax, 0x271d8; ret; 
0x00000000000ec3d1: pop rsi; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000248f0: pop rsi; pop r15; pop rbp; ret; 
0x0000000000023b68: pop rsi; pop r15; ret; 
0x000000000002601f: pop rsi; ret; 
0x00000000000d0299: pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000001161a5: pop rsp; cmp byte ptr [rsi], 0; lea rdx, [rsi + 1]; jne 0x116180; ret; 
0x000000000009a505: pop rsp; mov rax, r8; pop r13; ret; 
0x000000000004123c: pop rsp; or byte ptr [rax], 0x4c; add ebx, dword ptr [rdi + 0x20]; mov rax, r11; ret; 
0x000000000015c820: pop rsp; or dword ptr [r8], r8d; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000000d4238: pop rsp; pop qword ptr [rdx]; jbe 0xd4240; ret; 
0x000000000007a174: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x00000000000248ec: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000023b64: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000002601b: pop rsp; pop r13; pop r14; ret; 
0x00000000000ef195: pop rsp; pop r13; pop r15; ret; 
0x0000000000046075: pop rsp; pop r13; pop rbp; ret; 
0x0000000000025b9c: pop rsp; pop r13; ret; 
0x000000000008e231: pop rsp; pop r14; ret; 
0x000000000012d19e: pop rsp; pop rbp; ret; 
0x000000000002f70a: pop rsp; ret; 
0x00000000000792d0: pop rsp; test al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x000000000010d3e0: popcnt rax, rax; add r8d, eax; cmp rdi, rsi; ja 0x10d3d8; mov eax, r8d; ret; 
0x0000000000094a53: popfq; adc eax, 0x5b050f00; ret; 
0x000000000018d5ff: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x000000000009f19a: popfq; add byte ptr [rax], al; lea rdx, [rip + 0xc44fc]; cmovne rax, rdx; ret; 
0x000000000018691f: popfq; add qword ptr [r8], rax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000006e01f: popfq; loope 0x6e021; inc dword ptr [rcx - 0xa]; ret; 
0x00000000001385a0: popfq; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x00000000000822ef: popfq; ret; 
0x0000000000047580: popfq; sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000004754e: popfq; sbb al, byte ptr [rax]; call 0xbd470; pop rbx; ret; 
0x0000000000042645: por mm0, mm1; ret; 
0x000000000004406d: por mm0, mm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042906: por mm0, qword ptr [rip + 0x179ea3]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x0000000000042644: por xmm0, xmm1; ret; 
0x000000000004406c: por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042905: por xmm0, xmmword ptr [rip + 0x179ea3]; call 0x194d80; add rsp, 0x10; pop rbx; ret; 
0x000000000019937b: prefetchnta byte ptr [rax]; je 0x199368; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000016dae2: psllq mm1, qword ptr [r15]; jg 0x16daf7; ret; 
0x0000000000170612: psllq mm1, qword ptr [r15]; jg 0x170627; ret; 
0x000000000016dae3: psllq mm1, qword ptr [rdi]; jg 0x16daf7; ret; 
0x0000000000170613: psllq mm1, qword ptr [rdi]; jg 0x170627; ret; 
0x00000000000b6f96: psllq mm1, qword ptr [rdi]; jg 0xb6fa2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b6ff7: psllq mm1, qword ptr [rdi]; jg 0xb7003; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b70f8: psllq mm1, qword ptr [rdi]; jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7c86: psllq mm1, qword ptr [rdi]; jg 0xb7c92; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000b7ce7: psllq mm1, qword ptr [rdi]; jg 0xb7cf3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000b7de8: psllq mm1, qword ptr [rdi]; jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b8646: psllq mm1, qword ptr [rdi]; jg 0xb8652; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000000b86c7: psllq mm1, qword ptr [rdi]; jg 0xb86d3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000000b87c8: psllq mm1, qword ptr [rdi]; jg 0xb87d4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b94b6: psllq mm1, qword ptr [rdi]; jg 0xb94c2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x13]; ret; 
0x00000000000b9537: psllq mm1, qword ptr [rdi]; jg 0xb9543; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000000b9638: psllq mm1, qword ptr [rdi]; jg 0xb9644; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000ba2a6: psllq mm1, qword ptr [rdi]; jg 0xba2b2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000ba307: psllq mm1, qword ptr [rdi]; jg 0xba313; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000ba408: psllq mm1, qword ptr [rdi]; jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000bad96: psllq mm1, qword ptr [rdi]; jg 0xbada2; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000badf7: psllq mm1, qword ptr [rdi]; jg 0xbae03; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000baef8: psllq mm1, qword ptr [rdi]; jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000bb116: psllq mm1, qword ptr [rdi]; jg 0xbb122; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb197: psllq mm1, qword ptr [rdi]; jg 0xbb1a3; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb298: psllq mm1, qword ptr [rdi]; jg 0xbb2a4; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x0000000000116317: psubq mm1, qword ptr [rcx]; add al, ch; rol al, 0xf0; dec dword ptr [rax + 1]; ret; 
0x00000000000d44e2: psubsb mm3, mm0; add eax, 0x89480000; ret; 
0x0000000000086e96: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918ef: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000027177: punpckldq mm1, mm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000027176: punpckldq xmm1, xmm3; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x0000000000157902: punpcklqdq xmm0, xmm0; mov qword ptr [rdi + 8], rax; mov dword ptr [rdi + 0x28], edx; movups xmmword ptr [rdi + 0x18], xmm0; ret; 
0x000000000008e651: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000047ce4: punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000091f01: punpcklqdq xmm0, xmm1; movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116fa2: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000002717a: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x00000000000479bf: punpcklqdq xmm0, xmm1; movups xmmword ptr [rsi], xmm0; sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000009e8fc: punpcklqdq xmm0, xmm2; movups xmmword ptr [rbx + 0x18], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000001233f2: push -0x10; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x000000000005557c: push -0x2708ffe7; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000123c13: push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000123b8b: push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000123b03: push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000001238c3: push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x00000000001239e3: push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x0000000000123693: push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000123953: push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x0000000000123723: push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x00000000001237a3: push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x0000000000123a73: push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x0000000000123603: push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x00000000000a1cbd: push -0x72b7fff2; add eax, 0xf9e9; cmove rax, rdx; ret; 
0x000000000014d2fc: push -0x7f48f0bf; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdx + 0x6c], ax; mov eax, 1; ret; 
0x000000000017c904: push -0x7ffffffa; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000db9e3: push -0xc; inc edi; add ecx, dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000cf617: push -0xfb872b8; ret; 
0x00000000001025a0: push 0; call 0x102520; add rsp, 0x18; ret; 
0x000000000010c9c8: push 0; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000102638: push 0; push r9; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025f8: push 0; push r9; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000960b6: push 0x15; add byte ptr [rax - 0x73], cl; add eax, 0x156ac0; add rsp, 0x10; pop rbp; ret; 
0x00000000000ebd4a: push 0x1f0f10eb; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000153c71: push 0x4334864; and eax, 0x28; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce1: push 0x4334864; and eax, 0x28; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d51: push 0x4334864; and eax, 0x28; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db2: push 0x4334864; and eax, 0x28; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e16: push 0x4334864; and eax, 0x28; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e81: push 0x4334864; and eax, 0x28; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f04: push 0x4334864; and eax, 0x28; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000013dea2: push 0x5b000001; pop rbp; pop r12; pop r13; ret; 
0x00000000000bcf80: push 0x5c415d5b; pop r13; ret; 
0x000000000010c90f: push 0x6076110f; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x000000000009839e: push 0x6e0f4966; ret; 
0x000000000010c963: push 0x7e6f0ff3; jo 0x10c979; adc dword ptr [rdi + 0x78], edi; ret; 
0x0000000000153bfb: push 0xc334864; and eax, 0x28; jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000115398: push 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000115414: push 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000118e53: push 0xd; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000001025c0: push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000010c9e8: push 1; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef8: push 2; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000013655b: push 2; call 0x135ad0; add rsp, 0x18; ret; 
0x0000000000136e98: push 2; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f18: push 3; call 0x10d1e0; add rsp, 0x18; ret; 
0x00000000000b7a12: push 5; add byte ptr [rax], al; ret; 
0x0000000000041e5d: push fs; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000005ea31: push qword ptr [r9]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x00000000000831ae: push qword ptr [rax + rax*2 + 0x48]; add esp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000000ff61e: push qword ptr [rax + rbx*8 + 0x48]; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000b661f: push qword ptr [rax]; leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001175bd: push qword ptr [rbp + 0x10]; mov eax, 1; ret; 
0x00000000001927e8: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x0000000000184ff9: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x000000000010c98d: push qword ptr [rbp + 5]; mov word ptr [rdi], si; xor eax, eax; ret; 
0x0000000000062f10: push qword ptr [rbp + rcx + 0x44]; mov eax, eax; ret; 
0x00000000000b1e63: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df3: push qword ptr [rbp + rdi*2 + 0x48]; sar edx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x0000000000056526: push qword ptr [rbp - 0x11]; mov rax, rdx; ret; 
0x0000000000137d72: push qword ptr [rbp - 0x15]; pop rbx; ret; 
0x0000000000141373: push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012bb35: push qword ptr [rbp - 0x1a]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000929e0: push qword ptr [rbp - 0x40]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000433e0: push qword ptr [rbx + 1]; ret; 
0x0000000000054f06: push qword ptr [rbx + 3]; xor eax, eax; ret; 
0x0000000000087d1d: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000087d79: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000d2f6c: push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x00000000001122ea: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000012bb8d: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000008e463: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005ea32: push qword ptr [rcx]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000011f2c8: push qword ptr [rdi + 0x15]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x00000000000e2e67: push qword ptr [rdi + 0x28]; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x000000000011f9f4: push qword ptr [rdi + 0x31]; mov r8d, eax; mov eax, r8d; ret; 
0x00000000000e2e4c: push qword ptr [rdi + 0x31]; ret; 
0x0000000000062f08: push qword ptr [rdi + 0x3d]; mov r8d, eax; cmp eax, -1; je 0x62f20; mov eax, r8d; ret; 
0x000000000010ea3c: push qword ptr [rdi + 0x41]; ret; 
0x0000000000043461: push qword ptr [rdi + 0x4c]; ret; 
0x0000000000113d86: push qword ptr [rdi + 0x4f]; ret; 
0x000000000004822c: push qword ptr [rdi + 0x51]; ret; 
0x000000000010e1f7: push qword ptr [rdi + 0x56]; ret; 
0x00000000000e2c3f: push qword ptr [rdi + 0x5e]; ret; 
0x0000000000118b0b: push qword ptr [rdi + 0x62]; pop rbx; pop rbp; ret; 
0x0000000000114752: push qword ptr [rdi + 0x63]; ret; 
0x0000000000120dbf: push qword ptr [rdi + 0x66]; ret; 
0x0000000000120535: push qword ptr [rdi + 0x68]; ret; 
0x00000000000e2cf2: push qword ptr [rdi + 0x6b]; ret; 
0x000000000011519f: push qword ptr [rdi + 0x6e]; ret; 
0x000000000011f465: push qword ptr [rdi + 0x70]; ret; 
0x000000000011320f: push qword ptr [rdi + 0x76]; ret; 
0x0000000000062ec3: push qword ptr [rdi + 0xa]; ret; 
0x000000000012e9d2: push qword ptr [rdi + 0xb]; ret; 
0x00000000001143d0: push qword ptr [rdi + 0xd]; mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x000000000011554c: push qword ptr [rdi + 1]; ret; 
0x00000000000dd12a: push qword ptr [rdi + 3]; ret; 
0x0000000000113f99: push qword ptr [rdi + 4]; ret; 
0x0000000000062e90: push qword ptr [rdi + 5]; ret; 
0x000000000010d6df: push qword ptr [rdi + 6]; ret; 
0x000000000010d73e: push qword ptr [rdi + 7]; ret; 
0x0000000000043415: push qword ptr [rdi + 8]; ret; 
0x000000000010dbe4: push qword ptr [rdi + 9]; ret; 
0x0000000000082ac6: push qword ptr [rdi + rcx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011939e: push qword ptr [rdi + rcx + 0x5d]; lea rax, [rip + 0xd6557]; pop r12; pop r13; ret; 
0x0000000000116566: push qword ptr [rdi + rdx + 0x48]; sub esp, 8; call 0x81dd0; mov eax, 1; add rsp, 8; ret; 
0x00000000000dd07c: push qword ptr [rdi - 0x38]; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000010d5d7: push qword ptr [rdi - 0x40]; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000115cab: push qword ptr [rdx + rdi - 0x18]; sub eax, 0xb8fff75d; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000112f4a: push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x112f58; neg eax; ret; 
0x000000000011319a: push qword ptr [rsi + 0x1b]; cmp eax, -0x5f; je 0x1131a8; neg eax; ret; 
0x000000000011892b: push qword ptr [rsi + rax - 0x77]; cmp eax, 0xd3a14; ret; 
0x00000000001221cf: push qword ptr [rsi + rbp - 0x7d]; rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000047367: push qword ptr [rsi + rdi + 0x31]; rol byte ptr [rax + 0x775003f], 0x5b; ret; 
0x0000000000047547: push qword ptr [rsi + rdx + 0x48]; lea edx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x0000000000117551: push qword ptr [rsp + rbx - 0x18]; xchg dword ptr [rdi + rsi*8 - 1], eax; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x000000000010d204: push r10; call 0x10ca00; add rsp, 0x18; ret; 
0x0000000000055040: push r10; ret; 
0x000000000010263a: push r9; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x00000000001025fa: push r9; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000093599: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x00000000000a8abd: push rax; add al, 0xf; mov dh, 0x54; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x0000000000087cc4: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000094e75: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0x157452; ret; 
0x00000000000639ca: push rax; add dword ptr [rax - 0x77], ecx; adc eax, dword ptr [rax - 0x78]; sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000008df50: push rax; add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000bce2e: push rax; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000013c7f7: push rax; add dword ptr [rcx + rcx*4 - 0x40], ecx; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000863fe: push rax; add dword ptr [rcx - 0x77], ecx; push rax; sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000007457c: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000151613: push rax; call 0x151330; add rsp, 0x28; ret; 
0x0000000000157778: push rax; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000007e828: push rax; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000012a4cc: push rax; fdivr st(7); dec dword ptr [rcx]; ret; 
0x000000000015d4b2: push rax; in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x00000000001484bf: push rax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000000d422c: push rax; mov eax, 0xfa89051e; ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x000000000015160e: push rax; mov eax, dword ptr [rsp + 0x28]; push rax; call 0x151330; add rsp, 0x28; ret; 
0x0000000000150933: push rax; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001133e5: push rax; mov qword ptr [rsi + 0x50], rcx; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000010c90a: push rax; movdqu xmm6, xmmword ptr [rdi + 0x68]; movups xmmword ptr [rsi + 0x60], xmm6; movdqu xmm7, xmmword ptr [rdi + 0x78]; movups xmmword ptr [rsi + 0x70], xmm7; ret; 
0x0000000000086ea0: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x000000000008570f: push rax; or byte ptr [rbx + 0xd], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000085585: push rax; or byte ptr [rbx + 0xf], dh; lea rcx, [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000014eac1: push rax; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d203: push rax; push r10; call 0x10ca00; add rsp, 0x18; ret; 
0x0000000000042017: push rax; ret; 
0x000000000012a9cc: push rax; sar edi, cl; dec dword ptr [rcx]; ret; 
0x00000000001500e4: push rax; sbb al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x000000000009358a: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000012d0d9: push rax; shr ax, 0xe; and eax, 1; ret; 
0x0000000000086402: push rax; sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x00000000001211ec: push rax; xor al, 0xf7; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x38; ret; 
0x00000000001133e9: push rax; xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000014160b: push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000049d2e: push rbp; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000ff2bb: push rbp; add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x0000000000196e9d: push rbp; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000114017: push rbp; jle 0x114027; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000114417: push rbp; jp 0x114427; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4417: push rbp; jp 0xe442a; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000120117: push rbp; mov ebp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000423d7: push rbp; movabs dword ptr [0x17a35e05560f0017], eax; add bl, dh; mulps xmm0, xmmword ptr [rip + 0x17afa2]; ret; 
0x000000000008b640: push rbp; or byte ptr [rdi + rcx - 0x4a], al; add byte ptr [rbx + 0x5d], bl; mov eax, r8d; pop r12; ret; 
0x0000000000115017: push rbp; outsb dx, byte ptr [rsi]; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fe17: push rbp; ror byte ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec99a: push rbp; sbb byte ptr [rdx + rdx*2 - 0x73], dh; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000929dc: push rbp; xor byte ptr [rbx - 0x3f8a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c5f4: push rbx; add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000010c71c: push rbx; add al, 0x5b; pop rbp; pop r12; ret; 
0x000000000010c7fd: push rbx; add al, 0xeb; ret; 
0x00000000000a5dc1: push rbx; add al, byte ptr [rax]; add bh, dh; ret; 
0x0000000000031765: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000eb5ad: push rbx; add dword ptr [rcx - 0x7f], ecx; ret; 
0x00000000001029a2: push rbx; add rsp, 0x38; ret; 
0x00000000000a5dd9: push rbx; and al, 0; add bh, dh; ret; 
0x0000000000190719: push rbx; jb 0x190721; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000000874ff: push rbx; je 0x8755d; pop rbp; pop r12; ret; 
0x00000000000cf5fc: push rbx; lea rax, [rdi - 0x10]; ret; 
0x00000000000b1469: push rbx; movabs al, byte ptr [0x82048b8a0c8b000e]; sub eax, ecx; ret; 
0x00000000000b8073: push rbx; movq qword ptr [rdi + 0x20], mm6; sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98d2: push rbx; movq qword ptr [rdi + 0x30], mm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000b8082: push rbx; movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000bb332: push rbx; movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000001465a9: push rbx; movsd dword ptr [rdi], dword ptr [rsi]; or al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000008d23a: push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000011a1fa: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e4f48: push rbx; pop rax; jne 0xe4f50; ret; 
0x00000000000e509f: push rbx; pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000012c749: push rbx; sbb byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e51ab: push rbx; setne al; ret; 
0x000000000013d88c: push rbx; sub dword ptr [rip + 0xb2c84], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000122275: push rcx; adc byte ptr [rdx + 8], dh; seta al; movzx eax, al; neg eax; ret; 
0x00000000000e50e3: push rcx; add byte ptr [rax], al; jne 0xe50f0; mov eax, 0x40; ret; 
0x0000000000198ace: push rcx; add eax, 0x1f4ae800; clc; call ptr [rbx + 0x48]; mov dword ptr [rip + 0x5519e], 0; ret; 
0x0000000000160b7d: push rcx; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000047868: push rcx; add rsp, 0x18; ret; 
0x000000000005b05b: push rcx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000011f4c6: push rcx; idiv edi; mov eax, dword ptr [rsp + 4]; add rsp, 0x20; pop rbp; ret; 
0x000000000018fef3: push rcx; jl 0x18ff3e; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fefa: push rcx; jl 0x18ff45; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018ff01: push rcx; jl 0x18ff4c; adc dword ptr [rcx - 1], edi; ret; 
0x000000000019005a: push rcx; jl 0x1900a5; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190061: push rcx; jl 0x1900ac; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190068: push rcx; jl 0x1900b3; adc dword ptr [rcx + 7], edi; ret; 
0x000000000010263b: push rcx; mov r9d, 1; call 0x101f30; add rsp, 0x18; ret; 
0x000000000009f76b: push rcx; or al, 0; cmovne rax, rdx; ret; 
0x000000000009811d: push rcx; or byte ptr [rax + 0x39], cl; ret; 
0x0000000000116cdc: push rcx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000138746: push rcx; or eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000004822e: push rcx; ret; 
0x0000000000096355: push rcx; sbb byte ptr [rcx + 1], cl; ret; 
0x00000000001025fb: push rcx; xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000bb162: push rdi; adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000b9502: push rdi; adc al, 0x48; lea eax, [rdi + 0x15]; ret; 
0x00000000000bb2e3: push rdi; adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb1e1: push rdi; adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb2c0: push rdi; adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb241: push rdi; adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb221: push rdi; adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000001028ad: push rdi; adc byte ptr [rdx + 8], dh; setne al; movzx eax, al; neg eax; ret; 
0x00000000000bb202: push rdi; adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000baf98: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafaa: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000b84fa: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x00000000000b934a: push rdi; add al, 0x48; lea eax, [rdi + 6]; ret; 
0x000000000016dc49: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000000b776a: push rdi; add al, 0x49; sub eax, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000a8a00: push rdi; add al, 0xf; mov dh, 0x54; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000baf6a: push rdi; add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000570af: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000190406: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x190454; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000000b85ac: push rdi; add eax, 0xc478d48; ret; 
0x00000000000b8f3c: push rdi; add eax, 0xc478d48; sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x00000000000b940c: push rdi; add eax, 0xd478d48; ret; 
0x00000000000b784c: push rdi; add eax, 0xde88349; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x000000000002d83d: push rdi; add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x00000000000bafc8: push rdi; add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000188cb8: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184968: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000009e2f8: push rdi; add rsp, 8; pop rbp; pop r12; ret; 
0x00000000001679d2: push rdi; call 0xfffffffff0760324; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a10: push rdi; call 0xfffffffff0760362; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167a48: push rdi; call 0xfffffffff076039a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000167a86: push rdi; call 0xfffffffff07603d8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167abe: push rdi; call 0xfffffffff0760410; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167ae6: push rdi; call 0xfffffffff0760438; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b0e: push rdi; call 0xfffffffff0760460; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a3b2: push rdi; call 0xfffffffff0762d04; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a3f0: push rdi; call 0xfffffffff0762d42; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a428: push rdi; call 0xfffffffff0762d7a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016a466: push rdi; call 0xfffffffff0762db8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a49e: push rdi; call 0xfffffffff0762df0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a4c6: push rdi; call 0xfffffffff0762e18; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016a4ee: push rdi; call 0xfffffffff0762e40; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167a18: push rdi; clc; ret; 
0x0000000000167b90: push rdi; cld; ret; 
0x00000000001686b7: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d529: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000b7af0: push rdi; cmovns eax, dword ptr [rbx - 0x72b7e018]; jg 0xb7b19; jne 0xb7f80; ret; 
0x000000000011464f: push rdi; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x000000000016d4a9: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000168125: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167f35: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000016d2fa: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000118605: push rdi; jb 0x118615; add byte ptr [rbp - 0x8f38b25], al; ret; 
0x000000000011cdff: push rdi; lock dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x00000000001686f6: push rdi; loope 0x168745; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016873e: push rdi; loope 0x16878d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016877c: push rdi; loope 0x1687cb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001687b4: push rdi; loope 0x168803; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001687f2: push rdi; loope 0x168841; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016882a: push rdi; loope 0x168879; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168852: push rdi; loope 0x1688a1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b0d6: push rdi; loope 0x16b125; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b11e: push rdi; loope 0x16b16d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b15c: push rdi; loope 0x16b1ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b194: push rdi; loope 0x16b1e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b1d2: push rdi; loope 0x16b221; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b20a: push rdi; loope 0x16b259; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016b232: push rdi; loope 0x16b281; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000918c4: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000016d38a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000013b62f: push rdi; or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x000000000007f1ca: push rdi; or byte ptr [rax - 0x73], cl; or byte ptr [rcx - 0x77], cl; or r9b, r13b; ret; 
0x0000000000136f31: push rdi; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bb00c: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb04a: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafea: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x000000000008f55d: push rdi; or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000055bb1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000008df54: push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000b8790: push rdi; or eax, 0x1c478d48; ret; 
0x00000000000b9220: push rdi; or eax, 0x1c478d48; sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b9600: push rdi; or eax, 0x1d478d48; ret; 
0x00000000000b7a90: push rdi; or eax, 0x1de88349; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000001193a5: push rdi; or eax, 0x415c4100; pop rbp; ret; 
0x0000000000167d55: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167b85: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167c81: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000167bcd: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000e30fb: push rdi; ret; 
0x00000000000918f5: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000015783e: push rdi; sbb byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000001688b7: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001680da: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x00000000001684b7: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000157b35: push rdi; sub byte ptr [rax + 1], bh; ret; 
0x000000000015790b: push rdi; sub byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; ret; 
0x0000000000074580: push rdi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000bb2a0: push rdi; wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000b19fb: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ac158: push rdi; xor eax, eax; ret; 
0x00000000000df410: push rdx; add rsp, 0x38; ret; 
0x000000000010d205: push rdx; call 0x10ca00; add rsp, 0x18; ret; 
0x00000000000e5115: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x0000000000034225: push rdx; mov rax, qword ptr [rdx + rax*4 + 0x200]; ret; 
0x000000000009e926: push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000341f5: push rdx; pop rax; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000055041: push rdx; ret; 
0x00000000000b7ca8: push rsi; adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000b87e7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000b9657: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x20]; ret; 
0x00000000000b7117: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000b7076: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7086; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7d66: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xb7d76; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000ba386: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xba396; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000bae76: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0xbae86; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000b7096: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xb70a6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7d86: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xb7d96; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000ba3a6: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xba3b6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000bae96: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0xbaea6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b7d26: push rsi; adc byte ptr [rdx + 0xff3184e], cl; jg 0xb7d36; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b7e27: push rsi; adc byte ptr [rdx + 0xff3204e], cl; jg 0xb7e37; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000b9677: push rsi; adc byte ptr [rdx + 0xff3204e], cl; jg 0xb9687; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000019054d: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x19059b; adc dword ptr [rsi + 3], edx; ret; 
0x00000000000baf64: push rsi; add ah, byte ptr [rsi - 0x77]; js 0xffffffffed3bb1c5; mov byte ptr [rdi + 3], ch; ret; 
0x000000000016dc42: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000baf93: push rsi; add al, 0x89; js 0xffffffffed3bb3f3; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafa4: push rsi; add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x000000000016dee1: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000001161ab: push rsi; add dword ptr [rbp - 0x2f], esi; ret; 
0x000000000016df51: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000057757: push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000190546: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x190594; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000042401: push rsi; add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423dc: push rsi; add eax, 0x17a35e; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x000000000016dbd2: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000b85a5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000000b9405: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000000b6f25: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000bb065: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000001905e3: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000134a8f: push rsi; add eax, 0x5bf08948; ret; 
0x000000000016de71: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000000b8513: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000000b9363: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 7]; ret; 
0x00000000000b6ec3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000b7783: push rsi; add ecx, dword ptr [rcx + 0x357890f]; sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000bafc3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000ee581: push rsi; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000167b26: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016847a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016867a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016887a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b0a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168496: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168696: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000168896: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000167b42: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000016ac91: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ce9: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ec9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680a9: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000168289: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167ee5: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001680c5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001682a5: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000167d05: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001903de: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001686b1: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000016d522: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000192326: push rsi; cmc; sub eax, edx; ret; 
0x00000000000844f6: push rsi; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000016d4a2: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000192316: push rsi; hlt; sub eax, edx; ret; 
0x000000000016d2f2: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001922e6: push rsi; int1; sub eax, edx; ret; 
0x000000000010d471: push rsi; jb 0x10d3f6; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x000000000012bfb6: push rsi; je 0x12bfc0; mov eax, 7; ret; 
0x0000000000158026: push rsi; mov dh, 0xff; dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x000000000016d412: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000016d382: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000000a09b2: push rsi; or al, 0; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000bb044: push rsi; or byte ptr [rax - 0x77], cl; jns 0xffffffffed3bb8a5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bafe4: push rsi; or byte ptr [rax - 0x77], cl; js 0xffffffffed3bb845; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000bb005: push rsi; or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000042088: push rsi; or eax, 0x17a672; mulsd xmm0, xmm1; ret; 
0x0000000000042062: push rsi; or eax, 0x17a6a8; mulsd xmm0, xmm1; ret; 
0x00000000000b8787: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b95f7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000000b70b7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000bb257: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000b70f7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7104; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b7de7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb7df4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000b87c7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb87d4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000000b9637: push rsi; psllq mm1, qword ptr [rdi]; jg 0xb9644; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000000ba407: push rsi; psllq mm1, qword ptr [rdi]; jg 0xba414; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000baef7: push rsi; psllq mm1, qword ptr [rdi]; jg 0xbaf04; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000036186: push rsi; ret; 
0x00000000001688b1: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001680d2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001903e5: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001684b1: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001922f6: push rsi; sub eax, edx; ret; 
0x000000000016d622: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000112a0b: push rsi; xor ax, ax; ret; 
0x0000000000113d45: push rsp; add byte ptr [rax], al; call 0x1145c0; add rsp, 0x18; ret; 
0x0000000000041235: push rsp; add byte ptr [rsi*2 + 0x5c8b45e6], 0x80; or byte ptr [rbx + rax + 0x5f], cl; and byte ptr [rcx + rcx*4 - 0x28], cl; ret; 
0x00000000000423fa: push rsp; add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d5: push rsp; add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x0000000000041ef6: push rsp; add eax, 0x17a7f4; andpd xmm1, xmmword ptr [rip + 0x17a7dc]; orpd xmm0, xmm1; ret; 
0x00000000000de126: push rsp; add eax, dword ptr [rax]; mov rax, qword ptr [rip + 0x10dd40]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000013cebc: push rsp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a8a4a: push rsp; and al, 0x10; mov qword ptr [rax], rdx; ret; 
0x0000000000122b2e: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000122b8f: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000a89fb: push rsp; and al, 0x14; mov word ptr [rdi + 4], dx; movzx edx, byte ptr [rsp + 0x16]; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8a04: push rsp; and al, 0x16; mov byte ptr [rdi + 6], dl; ret; 
0x00000000000a8972: push rsp; and al, 0x18; mov qword ptr [rdi], rdx; add rax, rdi; ret; 
0x0000000000113d40: push rsp; and al, 0xc; mov esi, 0x5410; call 0x1145c0; add rsp, 0x18; ret; 
0x00000000000a8ab8: push rsp; and al, 0xc; mov word ptr [rax + 4], dx; movzx edx, byte ptr [rsp + 0xe]; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a89e3: push rsp; and al, 0xc; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a8aa1: push rsp; and al, 0xe8; mov dword ptr [rax], edx; movzx edx, word ptr [rsp - 0x14]; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8ac1: push rsp; and al, 0xe; mov byte ptr [rax + 6], dl; ret; 
0x00000000000a8aa8: push rsp; and al, 0xec; mov word ptr [rax + 4], dx; ret; 
0x00000000000a8a89: push rsp; and al, 0xf0; mov dword ptr [rax], edx; movzx edx, byte ptr [rsp - 0xc]; mov byte ptr [rax + 4], dl; ret; 
0x000000000005b11e: push rsp; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x00000000000a8a90: push rsp; and al, 0xf4; mov byte ptr [rax + 4], dl; ret; 
0x00000000000a89cb: push rsp; and al, 0xf4; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a8a6a: push rsp; and al, 0xf8; mov word ptr [rax], dx; movzx edx, byte ptr [rsp - 6]; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a8a72: push rsp; and al, 0xfa; mov byte ptr [rax + 2], dl; ret; 
0x00000000000a89ad: push rsp; and al, 0xfa; mov byte ptr [rdi + 2], dl; ret; 
0x000000000013caa8: push rsp; and al, 8; jne 0x13cac4; add rsp, 0x20; pop rbp; ret; 
0x0000000000150183: push rsp; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000183fd7: push rsp; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x00000000000ac69b: push rsp; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000001501a0: push rsp; mov eax, 1; ret; 
0x00000000000e4fd3: push rsp; mov edx, 0x7d00; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000042078: push rsp; or eax, 0x17a662; movsd xmm0, qword ptr [rip + 0x17ac5a]; orpd xmm1, xmmword ptr [rip + 0x17a672]; mulsd xmm0, xmm1; ret; 
0x0000000000042052: push rsp; or eax, 0x17a688; movsd xmm0, qword ptr [rip + 0x17ac88]; orpd xmm1, xmmword ptr [rip + 0x17a6a8]; mulsd xmm0, xmm1; ret; 
0x0000000000041efe: push rsp; or eax, 0x17a7dc; orpd xmm0, xmm1; ret; 
0x00000000000e51a9: push rsp; push rbx; setne al; ret; 
0x00000000000422bd: push rsp; ret; 
0x00000000000e4f93: push rsp; sbb dword ptr [rcx], eax; add byte ptr [rdx + 0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000047f80: pushfq; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x1a937b; add rsp, 8; ret; 
0x000000000002c138: pushfq; add dword ptr [rax], eax; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000009f700: pushfq; add dword ptr [rax], r8d; cmovne rax, rdx; ret; 
0x00000000000c9fd5: pushfq; add eax, 0x74db8500; sbb al, 0x39; ret; 
0x00000000001385ca: pushfq; and al, 0xa8; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000140070: pushfq; and ch, dh; dec dword ptr [rax - 0x77]; ret; 
0x00000000000c6b43: pushfq; mov r9d, 0xffffffff; mov eax, r9d; pop rbx; ret; 
0x00000000000479ec: pushfq; nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x000000000018bfbd: pushfq; sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x000000000004221f: pushfq; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000079d70: pushfq; test edx, edi; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000100461: pxor mm0, mm0; and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000093666: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000116fb1: pxor mm0, mm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000042510: pxor mm4, mm4; ucomiss xmm0, xmm4; jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000100460: pxor xmm0, xmm0; and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x0000000000093665: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000116fb0: pxor xmm0, xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000004250f: pxor xmm4, xmm4; ucomiss xmm0, xmm4; jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000183aa6: rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x0000000000023a4d: rcl byte ptr [rcx], 0x48; mov dword ptr [rip + 0x1cd8d2], eax; ret; 
0x0000000000160cea: rcl byte ptr [rip - 0x6f990011], cl; mov rax, qword ptr [rip + 0x8b179]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000023a52: rcr al, cl; sbb al, 0; ret; 
0x0000000000041c8f: rcr bl, 0x3f; fld xword ptr [rsp + 8]; fsubrp st(1); ret; 
0x000000000009a502: rcr byte ptr [rbp + 0x41], 0x5c; mov rax, r8; pop r13; ret; 
0x0000000000026018: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000013b952: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x000000000002f707: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000008f562: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x00000000000a1f6f: rcr byte ptr [rbp + 0x4d], 0x89; xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x0000000000055bb7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000134d68: rcr byte ptr [rbp - 0x3a], 2; add byte ptr [rcx + 0x5c], al; pop r13; ret; 
0x000000000009cf80: rcr byte ptr [rbx + 0x41], 0x5c; ret; 
0x000000000013b94e: rcr byte ptr [rbx + 0x4c], 0x89; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x0000000000084e28: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000046601: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000046d32: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000099c92: rcr byte ptr [rbx + 0x5d], 0x4c; mov eax, eax; pop r12; ret; 
0x0000000000149f8a: rcr byte ptr [rbx + 0x5d], 0xf; mov dh, 0xc0; pop r12; ret; 
0x0000000000149549: rcr byte ptr [rbx + 0x5d], 1; mov eax, r8d; ret; 
0x000000000008dfdf: rcr byte ptr [rbx - 9], 0xd8; ret; 
0x000000000018a55e: rcr byte ptr [rdi + 0x49], 0x29; ror byte ptr [rax - 0x73], 1; jl 0x18a57e; and ecx, ebp; ret; 
0x00000000000328a7: rcr byte ptr [rdx], cl; sbb byte ptr [rax], al; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000013c60c: rcr byte ptr [rsi - 0x12], 0xff; add rsp, 8; lea eax, [rbx + rbp]; pop rbx; pop rbp; ret; 
0x00000000000972a9: rcr dword ptr [rax + 0x15], cl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000012656a: rcr dword ptr [rax + 0x6401000c], 0x45; mov dword ptr [rax], ecx; add rsp, 8; ret; 
0x000000000011602c: rcr dword ptr [rbx + 0x31], cl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000010ea6b: rcr dword ptr [rbx - 8], 1; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x0000000000055be9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000011faeb: rdpkru; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x0000000000055031: rdsspq rax; cmp r10, qword ptr [rax]; mov eax, 0; jne 0x55043; push r10; ret; 
0x000000000005553a: rdsspq rax; cmp r10, qword ptr [rax]; mov eax, 0; jne 0x5554c; push r10; ret; 
0x000000000005b4ba: rdsspq rdi; rstorssp dword ptr [r8 - 8]; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x00000000001465f8: rdtsc; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000bbb6d: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000000bbb5f: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000015f468: rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000bbf67: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000013c7f2: rep stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d4: rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aee: rep stosq qword ptr [rdi], rax; ret; 
0x0000000000053d22: ret; 
0x0000000000098da7: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x153dce; syscall; pop rbp; ret; 
0x0000000000099fa3: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x154eca; syscall; pop rbx; ret; 
0x0000000000094a4b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x159daa; syscall; pop rbx; ret; 
0x0000000000093921: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15ae94; syscall; ret; 
0x0000000000091019: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x15d79c; syscall; ret; 
0x0000000000083f61: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x16a814; syscall; ret; 
0x000000000004764b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x1a6e8a; syscall; pop rbp; ret; 
0x0000000000198cdb: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x55b1a; syscall; pop rbx; ret; 
0x000000000019900b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x57502; syscall; pop rbp; ret; 
0x000000000014267b: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xae392; syscall; pop rbp; ret; 
0x0000000000117e44: retf 0; add byte ptr [rax - 0x73], cl; cmp eax, 0xd7a01; syscall; ret; 
0x0000000000082933: retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000149596: retf 0x1089; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000183aab: retf 0x167e; movsxd rax, ecx; ret; 
0x00000000001577b6: retf 0x1689; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x0000000000156012: retf 0x1b74; cmp eax, 2; sete al; movzx eax, al; ret; 
0x000000000012e9c6: retf 0x2b77; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x000000000015600f: retf 0x3948; retf 0x1b74; cmp eax, 2; sete al; movzx eax, al; ret; 
0x0000000000157776: retf 0x5089; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000d4233: retf 0x8102; cli; sub byte ptr [rdi + rcx*4 + 2], bl; jbe 0xd4240; ret; 
0x00000000001577f3: retf 0x8348; rol byte ptr [rcx + rcx*4], 0x50; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x000000000014abb2: retf 0x8349; ret; 
0x000000000005b11b: retf 0x8948; push rsp; and al, 0xf0; movdqa xmm0, xmmword ptr [rsp - 0x18]; pinsrw xmm0, eax, 6; ret; 
0x000000000006bf56: retf 0x8948; ret; 
0x00000000000d6f28: retf 0xb948; ret; 
0x000000000011f398: retf 0xc; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011f3cc: retf 0xc; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010c816: retf 0xcb8; add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000190d1a: retf 0xd975; vzeroupper; ret; 
0x00000000000a8742: retf 0xdb74; mov byte ptr [r11], 0; mov qword ptr [rdi], r8; mov rax, r12; pop r12; ret; 
0x00000000000a87ef: retf 0xde75; mov rax, r8; ret; 
0x000000000018be47: retf 0xe175; vzeroupper; ret; 
0x000000000005b627: retf 0xe273; mov rax, r8; ret; 
0x00000000000a889f: retf 0xe675; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000000a86e4: retf 0xe975; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000119861: retf 0xed83; add ecx, ebx; ret; 
0x000000000014fc52: retf 0xee4d; dec dword ptr [rax - 0x77]; ret; 
0x00000000000b1d50: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf89c: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x00000000000b1f11: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf470: retf 0xf66; xlatb; ret; 
0x000000000018875a: retf 0xfdc5; xlatb; ret; 
0x00000000000f8ac2: retf 0xffaf; dec dword ptr [rax - 0x77]; ret; 
0x00000000000cbaa8: retf 0xfffb; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000c81e8: retf 0xfffe; dec dword ptr [rcx + 1]; ret; 
0x00000000000e8a72: retf 1; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000945f1: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x000000000006e3f5: retf; add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000118ea1: retf; imul ecx, dword ptr [rip + 0x2f6e800], 0x8d480000; add eax, 0xd69bf; add rsp, 8; ret; 
0x00000000001558d6: retf; in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e2069; ret; 
0x000000000013f29e: retf; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x0000000000085943: retf; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000011f361: retf; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000027179: retf; punpcklqdq xmm0, xmm1; movups xmmword ptr [rdx + 0x48], xmm0; ret; 
0x000000000015d4b1: retf; push rax; in al, dx; inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; ret; 
0x000000000012dad1: retf; test dword ptr [rbx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x000000000018c9da: retf; vzeroupper; ret; 
0x000000000011631c: rol al, 0xf0; dec dword ptr [rax + 1]; ret; 
0x000000000012fcf6: rol ax, 8; ret; 
0x0000000000148559: rol bh, 6; adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bbd51: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000018d3d6: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a46: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000018498b: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x000000000004736b: rol byte ptr [rax + 0x775003f], 0x5b; ret; 
0x000000000002a549: rol byte ptr [rax + rcx*2], 0x39; ret; 
0x000000000002f110: rol byte ptr [rax + rcx*2], 0x83; ret; 
0x0000000000100463: rol byte ptr [rax - 0x3806c799], 6; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000bcc34: rol byte ptr [rax*4 + 0x31ee75d2], 0xc0; ret; 
0x0000000000033d0c: rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x1b80d1; mov qword ptr [rax], rdx; ret; 
0x0000000000102aa5: rol byte ptr [rax], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000010c118: rol byte ptr [rax], 1; add byte ptr [rax], al; add byte ptr [rbp - 0x76b7febd], cl; ret; 
0x00000000000dcfba: rol byte ptr [rax], cl; add byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000047ce0: rol byte ptr [rbp + 0x31], 0xc0; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001051b5: rol byte ptr [rbp + 0x31], cl; in al, 0xeb; ret; 
0x000000000009f897: rol byte ptr [rbp + 0x480e74c0], 1; lea eax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000ac719: rol byte ptr [rbp + 0xfd274c0], 1; mov ebp, 0xf80148c0; ret; 
0x0000000000184e37: rol byte ptr [rbp + 0xfd474c0], 1; mov ebp, 0xf80148c0; vzeroupper; ret; 
0x000000000011936c: rol byte ptr [rbp + rcx], 0x59; pop rbp; pop r12; pop r13; ret; 
0x00000000001138d7: rol byte ptr [rbp - 0x74f7872e], 0x47; or byte ptr [rip + 0x100f], ah; ret; 
0x0000000000196c19: rol byte ptr [rbp - 0x7b], 0xc0; jne 0x196b70; add rsp, 0x38; ret; 
0x0000000000184da2: rol byte ptr [rbx + 0x14820c0], 0xf8; vzeroupper; ret; 
0x0000000000184db2: rol byte ptr [rbx + 0x14840c0], 0xf8; vzeroupper; ret; 
0x0000000000184dc2: rol byte ptr [rbx + 0x14860c0], 0xf8; ret; 
0x00000000000ee2d8: rol byte ptr [rbx + 0x3d740afb], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000010d345: rol byte ptr [rbx + 0x97404fa], 0xb8; sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x0000000000062f0d: rol byte ptr [rbx + 0xd74fff8], 0x44; mov eax, eax; ret; 
0x0000000000082ac3: rol byte ptr [rbx + 0xf74fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000055beb: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000115ab0: rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000342c5: rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x00000000000cfb42: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000fc4bc: rol byte ptr [rcx + 0x29], 1; ret; 
0x00000000000dfb27: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; pop r14; ret; 
0x000000000009a49c: rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000012d19c: rol byte ptr [rcx + 0x5c], 0x5d; ret; 
0x0000000000102aa1: rol byte ptr [rcx + 0xc0fef9], 0; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000fff1a: rol byte ptr [rcx + 0xf], 0x93; ret; 
0x00000000000bbd52: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000011a018: rol byte ptr [rcx + 0xf], cl; lahf; vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x000000000012fd18: rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x000000000010d3e4: rol byte ptr [rcx + 1], 0xc0; cmp rdi, rsi; ja 0x10d3d8; mov eax, r8d; ret; 
0x00000000000d068d: rol byte ptr [rcx + rbp - 0x40], 0x89; ret; 
0x0000000000085415: rol byte ptr [rcx + rcx*4 + 0x22], 0x48; add esp, 8; pop rbp; pop r12; ret; 
0x00000000000f248e: rol byte ptr [rcx + rcx*4 + 0x45], 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000013f202: rol byte ptr [rcx + rcx*4 - 0x30], cl; ret; 
0x000000000011faaa: rol byte ptr [rcx + rcx*4 - 0x3e], 1; or eax, esi; wrpkru; xor eax, eax; ret; 
0x00000000000ee538: rol byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x000000000013c55a: rol byte ptr [rcx + rcx*4 - 0x40], cl; mov byte ptr [rdi + rdx], 0; ret; 
0x00000000001577f6: rol byte ptr [rcx + rcx*4], 0x50; cld; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000bdfb5: rol byte ptr [rcx + rdi], 0xf2; je 0xbdfbf; test edx, edx; jne 0xbdfb0; ret; 
0x000000000013c7fb: rol byte ptr [rcx - 0x3a], 0x40; add al, byte ptr [rax]; ret; 
0x00000000000d4244: rol byte ptr [rcx - 0x5c28f401], 0; setb al; add eax, 0x16d; ret; 
0x0000000000047af2: rol byte ptr [rcx - 0x77], 0x1b; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ff2b8: rol byte ptr [rcx - 0x77], 0x55; add byte ptr [rcx + 0x6c0f66d0], cl; ret; 
0x0000000000129783: rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x00000000000cfb22: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000000a86e1: rol byte ptr [rcx], 0x38; retf 0xe975; mov byte ptr [r8], 0; mov qword ptr [rdi], rax; mov rax, r9; ret; 
0x0000000000153a05: rol byte ptr [rcx], 0x39; ret; 
0x00000000000ec3e6: rol byte ptr [rcx], 0x3b; jl 0xec460; mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000bcb39: rol byte ptr [rcx], 0x42; mov ecx, dword ptr [rdi + rax*4]; test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x0000000000121e56: rol byte ptr [rcx], 0x48; cmp eax, dword ptr [rip + 0xca539]; mov qword ptr [rdi + 0x10], rax; jb 0x121e78; mov qword ptr [rip + 0xca4f0], 2; ret; 
0x00000000001221d3: rol byte ptr [rcx], 0x66; mov dword ptr [rdx], eax; ret; 
0x0000000000043f25: rol byte ptr [rcx], 0x66; shufps xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044065: rol byte ptr [rcx], 0x66; shufps xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000054332: rol byte ptr [rcx], 0x80; js 0x54338; add byte ptr [rbp - 0xa], dh; pop rbx; ret; 
0x00000000000a88ca: rol byte ptr [rcx], 0x84; leave; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x00000000000a28d2: rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x000000000015424a: rol byte ptr [rcx], 0x89; ret; 
0x0000000000043f33: rol byte ptr [rcx], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000a884a: rol byte ptr [rcx], 0xf; mov esi, 0xd139070c; je 0xa8848; cmp ecx, esi; je 0xa8848; ret; 
0x00000000000a8812: rol byte ptr [rcx], 0xf; mov esi, 0xf2390714; je 0xa8810; ret; 
0x0000000000062355: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000117e29: rol byte ptr [rdi + 0xd7a2005], 0; cmp eax, 1; jg 0x117e36; ret; 
0x0000000000157773: rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rax - 4], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000001577b3: rol byte ptr [rdi + rcx], 0xca; mov dword ptr [rsi], edx; mov qword ptr [rdi + 0x18], rax; mov eax, r8d; ret; 
0x00000000000cfb82: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000138161: rol byte ptr [rdx + 0x4801000b], cl; add esp, 0x20; mov eax, r8d; pop rbp; ret; 
0x00000000000cfb32: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x0000000000086baa: rol byte ptr [rdx], 0; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000017cc9a: rol byte ptr [rdx], cl; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000cfb72: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000018bb16: rol ch, 0x7e; jg 0x18bb5c; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000018bc49: rol ch, 0x7e; jg 0x18bc8f; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000184a0f: rol ch, 1; std; xlatb; ret; 
0x00000000001887b6: rol ch, cl; std; xlatb; ret; 
0x00000000001170f7: rol dh, 0x46; inc dword ptr [rax]; ret; 
0x00000000000cfacc: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000018be40: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x000000000015f45d: rol dword ptr [rax + 0x48000001], 0x89; mov cl, 0xe9; add esi, ebx; movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x00000000000bbf5f: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000000ebd45: rol dword ptr [rax + rcx*4 + 0x4c], 0x24; push 0x1f0f10eb; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000008ce56: rol dword ptr [rax - 0x1a7f7f32], 1; jg 0x8cde1; inc byte ptr [rdx]; cmovne edx, ecx; mov dword ptr [rdi], edx; ret; 
0x00000000000bcd71: rol dword ptr [rax], 0; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x00000000000a0461: rol dword ptr [rax], 0; add byte ptr [rbp + rcx*8 + 0x48], sil; lea eax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x0000000000190d13: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x190cf6; vzeroupper; ret; 
0x000000000012d2f6: rol dword ptr [rax], cl; add byte ptr [rax], al; leave; ret; 
0x0000000000184940: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000ac154: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac607: rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x00000000000ac636: rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000000a889c: rol dword ptr [rbp + 8], 0xca; jne 0xa8888; cmp eax, ecx; je 0xa8888; mov rax, r8; ret; 
0x00000000001138ab: rol dword ptr [rbp - 0x2708fff3], 0x64; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000ac124: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000188c47: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000184903: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000000a87ec: rol dword ptr [rbp - 0x7c], 0xca; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a8921: rol dword ptr [rcx + 0x39], 0xd0; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000007a172: rol dword ptr [rcx + 0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x0000000000047ce7: rol dword ptr [rcx + rcx*4 - 0x40], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000cf189: rol dword ptr [rcx - 9], 0xd9; cmp eax, r8d; mov eax, 1; cmovg r9d, eax; mov eax, r9d; ret; 
0x00000000000cf168: rol dword ptr [rcx - 9], 0xd9; cmp ecx, eax; mov eax, 1; cmovl r9d, eax; mov eax, r9d; ret; 
0x000000000009f83a: rol dword ptr [rcx], 0; cmovne rax, rdx; ret; 
0x00000000000d683e: rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000b8ff9: rol dword ptr [rdi], cl; add byte ptr [rax], al; ret; 
0x000000000013c746: rol dword ptr [rdx], 0x45; mov dword ptr [rax], ebx; pop rbx; mov qword ptr [r9], rcx; ret; 
0x0000000000023a4c: rol eax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000012fcf7: rol eax, 8; ret; 
0x0000000000043be1: rol eax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000013a51e: rol esi, 0x45; ret; 
0x000000000013a51d: rol r14, 0x45; ret; 
0x0000000000023a4b: rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x0000000000043be0: rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000003284a: ror byte ptr [r8 - 0x73], 1; add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000041ee2: ror byte ptr [rax + 0x21], 0xd0; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000160cb8: ror byte ptr [rax + 0x21], 1; add al, 0xd7; xor eax, eax; ret; 
0x0000000000041faa: ror byte ptr [rax + 0x21], 1; shl byte ptr [rsi + 0x48], 1; movd mm1, eax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000043be2: ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x00000000000abf3b: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11b: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce382: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce392: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000b1d57: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000cf84c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000009ef1d: ror byte ptr [rax + 0x39], 0x77; or byte ptr [rdx + 0xc], dh; mov qword ptr [rdi], rsi; ret; 
0x0000000000184963: ror byte ptr [rax + 0x39], 0xc2; jbe 0x1849c0; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000184983: ror byte ptr [rax + 0x39], 0xc2; jbe 0x1849c0; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x00000000001849a3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x1849c0; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000184953: ror byte ptr [rax + 0x39], 0xc2; jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x000000000018c413: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c470; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000018c433: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c470; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000018c453: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c470; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000018c403: ror byte ptr [rax + 0x39], 0xc2; jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x0000000000188c93: ror byte ptr [rax + 0x39], 0xc6; jbe 0x188d10; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000010ffa2: ror byte ptr [rax + 0x39], 0xd1; seta al; sbb eax, 0; ret; 
0x000000000010d3e7: ror byte ptr [rax + 0x39], 0xf7; ja 0x10d3d8; mov eax, r8d; ret; 
0x0000000000094c65: ror byte ptr [rax + 0x39], 0xf7; sete al; ret; 
0x0000000000094190: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000009939e: ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000028962: ror byte ptr [rax + 0x39], cl; ret; 
0x000000000012d072: ror byte ptr [rax + 0x48], 0x39; sal byte ptr [rbx + 0xf], 1; cmp qword ptr [rax + 8], rdi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x00000000001885b6: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x0000000000184e8c: ror byte ptr [rax + 1], 0xf8; add rax, r8; vzeroupper; ret; 
0x00000000000ac25c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000018d2d8: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188958: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184a88: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x00000000000ac778: ror byte ptr [rax + 1], 0xf8; add rax, rsi; ret; 
0x00000000000ac172: ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000018d393: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a13: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x00000000001849d3: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000003885b: ror byte ptr [rax + 1], 1; ret; 
0x000000000013c726: ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x00000000000b1d54: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000cf849: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x00000000000b1805: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000011fd8b: ror byte ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ac8c6: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b1c96: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c39: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x000000000015d188: ror byte ptr [rax - 0x39], 2; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000005897a: ror byte ptr [rax - 0x39], cl; ret; 
0x000000000018d2e1: ror byte ptr [rax - 0x3f], 1; call 0x781197eb; ret; 
0x000000000018d399: ror byte ptr [rax - 0x3f], 1; call 0x781198a3; ret; 
0x000000000018d3bd: ror byte ptr [rax - 0x3f], 1; call 0x781198c7; ret; 
0x000000000018d3dd: ror byte ptr [rax - 0x3f], 1; call 0x781198e7; ret; 
0x000000000018d429: ror byte ptr [rax - 0x3f], 1; call 0x78119933; ret; 
0x000000000018d4ca: ror byte ptr [rax - 0x3f], 1; call 0x781199d4; ret; 
0x000000000018d64e: ror byte ptr [rax - 0x3f], 1; call 0x78119b58; ret; 
0x000000000018d672: ror byte ptr [rax - 0x3f], 1; call 0x78119b7c; ret; 
0x000000000018d692: ror byte ptr [rax - 0x3f], 1; call 0x78119b9c; ret; 
0x000000000018d6b2: ror byte ptr [rax - 0x3f], 1; call 0x78119bbc; ret; 
0x000000000018d6e9: ror byte ptr [rax - 0x3f], 1; call 0x78119bf3; ret; 
0x000000000018d70d: ror byte ptr [rax - 0x3f], 1; call 0x78119c17; ret; 
0x000000000018d72d: ror byte ptr [rax - 0x3f], 1; call 0x78119c37; ret; 
0x000000000018d779: ror byte ptr [rax - 0x3f], 1; call 0x78119c83; ret; 
0x00000000000a05a1: ror byte ptr [rax - 0x73], 0x15; xlatb; mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000007553e: ror byte ptr [rax - 0x73], 0x34; ret; 
0x00000000000e5200: ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x00000000000ac162: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x00000000000ac192: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x00000000000ac672: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dh; ret; 
0x00000000000ac182: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x00000000000bcd08: ror byte ptr [rax - 0x73], 1; adc eax, 0xcf500; lea rax, [rip + 0x11389]; cmove rax, rdx; ret; 
0x00000000000bc848: ror byte ptr [rax - 0x73], 1; adc eax, 0xcfc90; lea rax, [rip + 0x11b79]; cmove rax, rdx; ret; 
0x00000000000bc9f8: ror byte ptr [rax - 0x73], 1; adc eax, 0xcff30; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000bcae8: ror byte ptr [rax - 0x73], 1; adc eax, 0xd05a0; lea rax, [rip + 0x12879]; cmove rax, rdx; ret; 
0x00000000000bc808: ror byte ptr [rax - 0x73], 1; adc eax, 0xd0650; lea rax, [rip + 0x129c9]; cmove rax, rdx; ret; 
0x00000000000bc958: ror byte ptr [rax - 0x73], 1; adc eax, 0xd0920; lea rax, [rip + 0x12f89]; cmove rax, rdx; ret; 
0x00000000000a8bd8: ror byte ptr [rax - 0x73], 1; adc eax, 0xdbfa0; lea rax, [rip + 0x3819]; cmove rax, rdx; ret; 
0x00000000000a1c78: ror byte ptr [rax - 0x73], 1; adc eax, 0xe2db0; lea rax, [rip + 0xa569]; cmove rax, rdx; ret; 
0x00000000000a03f8: ror byte ptr [rax - 0x73], 1; adc eax, 0xe4360; lea rax, [rip + 0xbab9]; cmove rax, rdx; ret; 
0x00000000000a1cb8: ror byte ptr [rax - 0x73], 1; adc eax, 0xe6880; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x000000000009f808: ror byte ptr [rax - 0x73], 1; adc eax, 0xe8f20; lea rax, [rip + 0x120a9]; cmove rax, rdx; ret; 
0x000000000009f658: ror byte ptr [rax - 0x73], 1; adc eax, 0xe92a0; lea rax, [rip + 0x12559]; cmove rax, rdx; ret; 
0x000000000009f698: ror byte ptr [rax - 0x73], 1; adc eax, 0xe9400; lea rax, [rip + 0x126b9]; cmove rax, rdx; ret; 
0x000000000003284b: ror byte ptr [rax - 0x73], 1; add eax, 0x1bb24d; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x00000000001465a5: ror byte ptr [rax - 0x73], 1; add eax, 0xaa553; add rsp, 8; ret; 
0x000000000018a562: ror byte ptr [rax - 0x73], 1; jl 0x18a57e; and ecx, ebp; ret; 
0x000000000018cedb: ror byte ptr [rax - 0x73], cl; add al, 7; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018838b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000096860: ror byte ptr [rax - 0x75], 0x46; or byte ptr [rax - 0x77], cl; ret; 
0x000000000012d2e6: ror byte ptr [rax - 0x75], 0x4d; clc; xor rcx, qword ptr fs:[0x28]; jne 0x12d3cd; leave; ret; 
0x00000000000dc203: ror byte ptr [rax - 0x75], 0x74; ret; 
0x0000000000041e59: ror byte ptr [rax - 0x75], 1; add eax, 0x1aa00f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000015fd1c: ror byte ptr [rax - 0x75], 1; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000009e923: ror byte ptr [rax - 0x75], 1; push rdx; or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000557b3: ror byte ptr [rax - 0x77], 0x34; ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000009ef3b: ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000086e99: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000000918f2: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000a863c: ror byte ptr [rax - 0x77], 0xa; ret; 
0x00000000000a2c38: ror byte ptr [rax - 0x77], 0xd8; pop rbx; cmovne rax, rdi; ret; 
0x00000000000627a5: ror byte ptr [rax - 0x77], 0xd8; test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x00000000000d1289: ror byte ptr [rax - 0x77], 1; and byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x0000000000037fee: ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018d1cd: ror byte ptr [rax - 0x77], 1; mul dword ptr [rip + 0x11111111]; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000000898f9: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000014d34a: ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x000000000011998a: ror byte ptr [rax - 0x77], 3; pop rbx; setne al; movzx eax, al; ret; 
0x000000000013bb6d: ror byte ptr [rax - 0x77], cl; xor eax, eax; ret; 
0x00000000000908a5: ror byte ptr [rax - 0x7b], 0xd2; jne 0x908b0; ret; 
0x0000000000125510: ror byte ptr [rax - 0x7b], 0xdb; je 0x125528; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127b4a: ror byte ptr [rax - 0x7b], 0xdb; jne 0x127b58; pop rbx; pop rbp; pop r12; ret; 
0x0000000000047460: ror byte ptr [rax - 0x7b], 0xff; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x000000000011990f: ror byte ptr [rax - 0x7d], 0x3e; add byte ptr [rax - 0x77], cl; je 0x119920; pop rbx; ret; 
0x000000000008cd28: ror byte ptr [rax - 0x7d], 0x7f; sbb byte ptr [rax], al; setne r8b; mov eax, r8d; ret; 
0x000000000018d3d3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a43: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849f3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x0000000000188a23: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001849e3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000001004ff: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000009ce43: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000008dfd8: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret; 
0x000000000010d5d9: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000055686: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000048073: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000157f8d: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000000dd68a: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; ret; 
0x000000000014e041: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x00000000000246d7: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000148e2e: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret; 
0x000000000014a2f5: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret; 
0x00000000000522b4: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000010fdb7: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000008e465: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000009cf79: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop r12; ret; 
0x0000000000062e28: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000ac682: ror byte ptr [rax - 0x7d], 0xea; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000157f85: ror byte ptr [rax - 0x7d], 0xf8; add dword ptr [rcx + 0xf], eax; xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x0000000000120c28: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000002a546: ror byte ptr [rax - 0x7d], 1; rol byte ptr [rax + rcx*2], 0x39; ret; 
0x0000000000046c1b: ror byte ptr [rax - 0x7d], 5; mov esp, 0x1001aa6; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000fdded: ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bb92b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000043020: ror byte ptr [rax - 0x7f], 0xc4; sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000000e5188: ror byte ptr [rax - 0x7f], 0xfa; cmc; lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; setne al; ret; 
0x00000000000e51a4: ror byte ptr [rax - 0x7f], 0xfa; push rsp; push rbx; setne al; ret; 
0x00000000000bb928: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000bb925: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000011789a: ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7eed], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000011786a: ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7f1d], eax; mov rax, r8; ret; 
0x00000000000bb9e4: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x000000000018cc07: ror byte ptr [rbx + 0x343b0e34], 0xa; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018c6e4: ror byte ptr [rbx + 0x3b203e4c], 0x4c; cmp ah, byte ptr [rax]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c6b2: ror byte ptr [rbx + 0x3c3b0e3c], 0xa; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb48: ror byte ptr [rbx + 0x3c3b0e3c], 0xa; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018bfd1: ror byte ptr [rbx + 0x75163b17], 0xe4; ret; 
0x000000000018c8ab: ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c529; vzeroupper; ret; 
0x000000000018c9d2: ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018cb8b: ror byte ptr [rbx + 0xc3b3e0c], 0x3a; jne 0x18c9a6; vzeroupper; ret; 
0x00000000000e50ce: ror byte ptr [rbx], 1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f7b: ror byte ptr [rbx], 1; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000e50cc: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret; 
0x00000000000e4f79: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov edx, 0xfde8; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000156756: ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x00000000000abe93: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000001279a4: ror byte ptr [rcx + 0x2b], 1; cmp byte ptr [r8 + 0x39], r9b; ret; 
0x000000000002d898: ror byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000010c71a: ror byte ptr [rcx + 0x5d5b0453], 0x41; pop rsp; ret; 
0x00000000000f23c7: ror byte ptr [rcx + 0x5d5b307d], 0x41; pop rsp; ret; 
0x00000000000a31ce: ror byte ptr [rcx + 1], 1; ret; 
0x0000000000060ef4: ror byte ptr [rcx + rcx*4 + 0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x00000000000295e6: ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000014a81d: ror byte ptr [rcx + rcx*4 + 7], 1; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000038583: ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbp; pop r12; pop r13; ret; 
0x00000000000dd893: ror byte ptr [rcx + rcx*4 - 0x20], 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000046c8a: ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x000000000015351a: ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; ret; 
0x00000000000b1aac: ror byte ptr [rcx + riz - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000041ba8: ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000000a0b03: ror byte ptr [rcx - 0x39], cl; ret; 
0x00000000000d4aa9: ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x000000000005f088: ror byte ptr [rcx - 0x3f], 0xe3; and byte ptr [rcx + 9], cl; ret; 
0x000000000011a77e: ror byte ptr [rcx - 0x77], 1; or byte ptr [r9 - 0x75], cl; add dword ptr [rbx + 0x94901e0], eax; ret; 
0x000000000010c5f2: ror byte ptr [rcx - 0x7cb7fbad], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000011f0d0: ror byte ptr [rcx], 0xd0; ret; 
0x00000000000928e8: ror byte ptr [rdi], 0x11; cmp r11b, r13b; test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x000000000008e54d: ror byte ptr [rdi], 0x11; or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000093668: ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x00000000001278fa: ror byte ptr [rdi], 0x11; xor byte ptr [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ac7ac: ror byte ptr [rdi], 0x84; cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x0000000000082831: ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000013f971: ror byte ptr [rdi], 0x84; mov eax, 0xf000004; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000009d5de: ror byte ptr [rdi], 0x84; ret; 
0x0000000000082930: ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011900a: ror byte ptr [rdi], 0x84; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000ac576: ror byte ptr [rdi], 0x85; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000295de: ror byte ptr [rdi], 0x85; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000014471c: ror byte ptr [rdi], 0x85; and eax, 0xf000002; mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000098d05: ror byte ptr [rdi], 0x85; jl 0x98d0a; add byte ptr [rax], al; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x00000000000b5c11: ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000002823c: ror byte ptr [rdi], 0x85; ret; 
0x0000000000184c8c: ror byte ptr [rdi], 0x85; sub eax, 0xc5000001; std; xlatb; ret; 
0x00000000000304e8: ror byte ptr [rdi], 0x94; ret; 
0x00000000001004fc: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000522b1: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000062e25: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000014e03e: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x00000000000246d4: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000014b0ce: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000014a360: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000062e67: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbp; ret; 
0x00000000000e51fd: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x000000000014a363: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000052b36: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e6a: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbp; ret; 
0x00000000001028b3: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000bbc99: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000040fb7: ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0x40f98; ret; 
0x000000000009c267: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x9c258; sub rax, 0x10; ret; 
0x0000000000113825: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x113838; ret; 
0x000000000012e9ca: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x00000000000e8628: ror byte ptr [rdi], cl; mov byte ptr [rcx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ea36f: ror byte ptr [rdi], cl; mov dl, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000ac71d: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x000000000016134a: ror byte ptr [rdi], cl; test bh, bh; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000161316: ror byte ptr [rdi], cl; test byte ptr [rbx], dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000cf72f: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000b1dfb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000010eb88: ror byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ec04: ror byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000102578: ror byte ptr [rsi], 1; add byte ptr [rcx + 0x5b595a0a], cl; ret; 
0x00000000000b19aa: ror dword ptr [rax + 0x21], 0xce; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000000288ed: ror dword ptr [rax + 0x39], 1; ret; 
0x00000000000481de: ror dword ptr [rax + 1], 0xf0; mov dword ptr [rdi], eax; shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000183ca2: ror dword ptr [rax + 1], 0xf8; ret; 
0x000000000011fd2a: ror dword ptr [rax + r8], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc98: ror dword ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000160c8e: ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160c5e: ror dword ptr [rax - 0x2d], 0xe2; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x00000000000b1d49: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000f1d6c: ror dword ptr [rax - 0x75], cl; sub cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000086e1d: ror dword ptr [rax - 0x7b], 0xd2; jne 0x86e10; ret; 
0x00000000000916e5: ror dword ptr [rax - 0x7b], 0xd2; jne 0x916d8; ret; 
0x00000000000557b7: ror dword ptr [rax - 0x7d], 0xc0; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000b1c92: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c35: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x000000000011698e: ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000012efe5: ror dword ptr [rbx + 0x40894106], 4; test eax, eax; jne 0x12ef99; mov rax, rdi; ret; 
0x00000000000926b5: ror dword ptr [rcx + 0x1b80045], 0; add byte ptr [rax], al; movups xmmword ptr [rbp + 0x38], xmm0; pop rbp; pop r12; ret; 
0x000000000009083b: ror dword ptr [rcx + 0x58d4807], 1; ret; 
0x00000000000fc4b9: ror dword ptr [rcx + 0x63], cl; rol byte ptr [rcx + 0x29], 1; ret; 
0x00000000000bc12d: ror dword ptr [rcx + 0xe181d0], 0xfc; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; ret; 
0x0000000000195547: ror dword ptr [rcx + 0xf], cl; mov edx, 0x94d3ff3; ret; 
0x00000000001840ee: ror dword ptr [rcx + rax - 0x3f], 1; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000005b6ae: ror dword ptr [rcx + rcx*4 - 0x40], 1; ret; 
0x0000000000056ae8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000014abaf: ror dword ptr [rcx - 0x77], 1; retf 0x8349; ret; 
0x000000000011f96b: ror dword ptr [rdi + rsi*8 - 1], 1; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000062e9b: ror dword ptr [rdi - 0x2708ffe8], 1; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000091f04: ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000009839a: ror dword ptr [rdi], 0x11; push 0x6e0f4966; ret; 
0x00000000000874f9: ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000423f8: ror dword ptr [rdi], 0x54; add eax, 0x17a330; orps xmm0, xmmword ptr [rip + 0x17a319]; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x00000000000423d3: ror dword ptr [rdi], 0x54; add eax, 0x17a355; orps xmm0, xmmword ptr [rip + 0x17a35e]; mulss xmm0, dword ptr [rip + 0x17afa2]; ret; 
0x000000000018e388: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018ea94: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e866: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x000000000018f990: ror dword ptr [rdi], 0x85; cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e7e6: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000018eb24: ror dword ptr [rdi], 0x85; je 0x18eb2b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e61b: ror dword ptr [rdi], 0x85; jno 0x18e627; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e6e3: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e360: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000007dcda: ror dword ptr [rdi], 0x8d; out dx, eax; or eax, dword ptr [rax]; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000ac5a5: ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000184cae: ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000194f8d: ror dword ptr [rdi], 1; test byte ptr [rdx + rax - 0x7ab80000], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000196e85: ror dword ptr [rdi], cl; xchg esp, eax; ret; 
0x0000000000161949: ror dword ptr [rdx], cl; in al, dx; dec dword ptr [rax - 0x77]; ret; 
0x000000000010ec78: ror dword ptr [rip + 0x64d8f700], 1; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010eac8: ror dword ptr [rip + 0x64d8f700], cl; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010ea84: ror dword ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000fec98: ror dword ptr [rsi], cl; add byte ptr [rbx + rcx*4], cl; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000d4240: ror edi, 4; xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x00000000000d4232: ror edx, 2; cmp edx, 0x28f5c28; jbe 0xd4240; ret; 
0x0000000000086e1c: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x86e10; ret; 
0x00000000000916e4: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x916d8; ret; 
0x000000000005b4bf: rstorssp dword ptr [r8 - 8]; saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x000000000013b8ce: sahf; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; fisttp dword ptr [rax + 1]; ret; 
0x000000000011f69e: sahf; idiv r15; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x000000000009f8a6: sahf; not byte ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000125f67: sahf; or al, 0; add byte ptr [rax + rax], al; add al, ch; popfq; ret; 
0x0000000000088531: sahf; stc; dec dword ptr [rbp + rcx*4 + 0x2c]; and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x0000000000052b39: sal bh, 0xd8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018bfbe: sal bh, 0xd8; or eax, 1; vzeroupper; ret; 
0x0000000000062e6d: sal bh, 0xd8; pop rbp; ret; 
0x00000000000246de: sal bh, 0xd8; ret; 
0x000000000005ea34: sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000042451: sal bl, 0xf; pop rcx; add eax, 0x17af36; ret; 
0x0000000000184b1f: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000000951da: sal byte ptr [rax + 0x15], cl; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15709f; ret; 
0x0000000000115cfd: sal byte ptr [rax + rbx + 0x48], 0x89; add eax, 0xd9939; mov eax, 1; add rsp, 8; ret; 
0x0000000000037fe9: sal byte ptr [rax + rbx + 0xf], 0xb6; ror byte ptr [rax - 0x77], 1; fisttp word ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000005b3c6: sal byte ptr [rax + rcx + 0x49], 0x83; ret; 
0x000000000009f415: sal byte ptr [rax + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000011ce04: sal byte ptr [rax + rdi + 0x48], 0x39; ret; 
0x00000000000a2890: sal byte ptr [rax + rdx*8 + 0x3c], 0x3d; mov eax, 0; cmovne r8, rax; mov rax, r8; ret; 
0x000000000014b2bd: sal byte ptr [rbp + 0x10], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000157f55: sal byte ptr [rbp + 0x10], cl; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000090fed: sal byte ptr [rbp + 0x10], cl; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x000000000008d36c: sal byte ptr [rbp + 0x11], 0x48; mov edi, ebp; call 0x22330; xor eax, eax; pop rbp; ret; 
0x00000000000d4a8c: sal byte ptr [rbp + 0x11], 0x4c; mov eax, eax; add rsp, 8; ret; 
0x000000000014b18b: sal byte ptr [rbp + 0x12], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009f85b: sal byte ptr [rbp + 0x12], 0x48; lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000422fa: sal byte ptr [rbp + 0x13], 1; and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000006300f: sal byte ptr [rbp + 0x16], 0x48; mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000013c54c: sal byte ptr [rbp + 0x19], 0x44; mov eax, eax; ret; 
0x000000000008ba72: sal byte ptr [rbp + 0x23], cl; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000018d632: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000188c82: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x00000000000de191: sal byte ptr [rbp + 0x2c], 0x83; imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000de238: sal byte ptr [rbp + 0x2d], 0x83; imul eax, dword ptr [rcx + rax], 0x5b; pop rbp; pop r12; ret; 
0x00000000000df4cd: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0x10fe09; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000014c41d: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xa48a1; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013464d: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xbbc69; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001331ed: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xbcf61; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000125bed: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xca169; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000123f1d: sal byte ptr [rbp + 0x30], 0x83; sub eax, 0xcbc81; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000006104f: sal byte ptr [rbp + 0x36], 0x83; sub eax, 0x18d6f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x000000000015ce94: sal byte ptr [rbp + 0x39], 0x83; sub eax, 0x947ba; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000013185a: sal byte ptr [rbp + 0x3b], 0x83; sub eax, 0xbe77c; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000125b12: sal byte ptr [rbp + 0x3b], 0x83; sub eax, 0xca1f0; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x000000000008ac3d: sal byte ptr [rbp + 0x40], cl; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ac3a2: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000153481: sal byte ptr [rbp + 0x4c], 0x48; lea eax, [rip + 0x9d9b5]; mov qword ptr fs:[rbx], rax; pop rbx; mov dword ptr [rip + 0x9d986], 2; ret; 
0x0000000000196e9b: sal byte ptr [rbp + 0x55], cl; add rsp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000057d4b: sal byte ptr [rbp + 0x62], 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000183c33: sal byte ptr [rbp + 0x6a], cl; test esi, esi; je 0x183c18; xor eax, eax; ret; 
0x00000000001972b4: sal byte ptr [rbp + 0x7b], cl; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000148452: sal byte ptr [rbp + 0xb], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009a05b: sal byte ptr [rbp + 0xb], 0xc7; add eax, 0x154e10; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000123572: sal byte ptr [rbp + 0xb], cl; ret; 
0x000000000010c7f9: sal byte ptr [rbp + 0xc], 0x8b; push rbx; add al, 0xeb; ret; 
0x00000000000938f9: sal byte ptr [rbp + 0xc], cl; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000083f39: sal byte ptr [rbp + 0xc], cl; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x000000000012d0f8: sal byte ptr [rbp + 0xd], 0x48; cmp dword ptr [rdi], 0; je 0x12d110; ret; 
0x00000000001465f6: sal byte ptr [rbp + 0xf], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000147756: sal byte ptr [rbp + 0xf], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000014e07e: sal byte ptr [rbp + 0xf], 0xc7; add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000627ab: sal byte ptr [rbp + 2], 0x5b; ret; 
0x00000000000bbf56: sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x00000000000e2ec8: sal byte ptr [rbp + 5], 0x48; add esp, 8; ret; 
0x00000000000908a8: sal byte ptr [rbp + 5], cl; ret; 
0x0000000000063087: sal byte ptr [rbp + 6], cl; sub dword ptr [rdi], 1; ret; 
0x0000000000033d9e: sal byte ptr [rbp + 7], 0x44; mov eax, eax; ret; 
0x000000000014145d: sal byte ptr [rbp + 8], 0x5b; pop rbp; pop r12; ret; 
0x00000000001885b0: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x00000000000cf7b0: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000cfac8: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000000e82cf: sal byte ptr [rbp - 0x12], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bcc37: sal byte ptr [rbp - 0x12], cl; xor eax, eax; ret; 
0x00000000000bb700: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x00000000000e83d0: sal byte ptr [rbp - 0x13], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086e20: sal byte ptr [rbp - 0x13], cl; ret; 
0x00000000000a87b2: sal byte ptr [rbp - 0x15], 1; mov rax, r8; ret; 
0x000000000012ee94: sal byte ptr [rbp - 0x17], cl; sub rsp, 8; call 0x12e560; ret; 
0x000000000013f1f6: sal byte ptr [rbp - 0x1c], 0x44; mov eax, edx; ret; 
0x000000000012838c: sal byte ptr [rbp - 0x1c], 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000000aa64b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000094fb6: sal byte ptr [rbp - 0x21], cl; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000bccd1: sal byte ptr [rbp - 0x24], cl; ret; 
0x0000000000040fbc: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000030079: sal byte ptr [rbp - 0x2c], 0x41; mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000115f49: sal byte ptr [rbp - 0x2c], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000011602a: sal byte ptr [rbp - 0x2d], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000013bb6b: sal byte ptr [rbp - 0x2e], 1; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x0000000000184a0d: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x0000000000041e57: sal byte ptr [rbp - 0x30], cl; mov rax, qword ptr [rip + 0x1aa00f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000dd767: sal byte ptr [rbp - 0x31], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000018850d: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x000000000012efed: sal byte ptr [rbp - 0x57], 0x48; mov eax, edi; ret; 
0x00000000000f15fe: sal byte ptr [rbp - 0x68], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000102a7a: sal byte ptr [rbp - 0x69], cl; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x0000000000055625: sal byte ptr [rbp - 0x7c], 0x48; sub edx, 1; jne 0x55610; mov eax, 1; ret; 
0x000000000009e92a: sal byte ptr [rbp - 0xd], cl; ret; 
0x00000000000bdfbc: sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000093980: sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000157858: sal byte ptr [rbx + 0xd], 1; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000012d076: sal byte ptr [rbx + 0xf], 1; cmp qword ptr [rax + 8], rdi; jne 0x12d070; mov rax, qword ptr [rax + 0x30]; ret; 
0x0000000000153515: sal byte ptr [rbx + rax + 0x49], 1; mov eax, eax; mov rax, r8; pop rbx; ret; 
0x00000000000dd796: sal byte ptr [rbx + rbp + 0x5b], 0x5d; pop r12; ret; 
0x00000000000896d2: sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000184a82: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x0000000000033df1: sal byte ptr [rbx + rcx + 0x23], 0x77; adc byte ptr [rax - 0x73], cl; adc al, 0xb7; mov r8d, dword ptr [rdx + rax]; mov eax, r8d; ret; 
0x00000000000cf152: sal byte ptr [rbx + rcx + 0x45], 0x31; leave; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x0000000000117895: sal byte ptr [rbx + rcx + 0x48], 0x83; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7eed], eax; mov rax, r8; add rsp, 8; ret; 
0x0000000000117865: sal byte ptr [rbx + rcx + 0x48], 0x83; ror byte ptr [rax], 0x48; mov dword ptr [rip + 0xd7f1d], eax; mov rax, r8; ret; 
0x000000000011d222: sal byte ptr [rbx + rcx + 0x48], cl; cmp edi, edx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x00000000001534e1: sal byte ptr [rcx + rax*4 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000047574: sal byte ptr [rcx + rbx + 0x48], 0x8b; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000b1c9c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x0000000000116153: sal byte ptr [rcx], 0xc0; pop rbp; ret; 
0x000000000010259d: sal byte ptr [rcx], 0xc9; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bd: sal byte ptr [rcx], 0xc9; push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000018d013: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884c3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d033: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884e3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d071: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188521: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018cff3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884a3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000009418e: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000012bfdb: sal byte ptr [rcx], 1; sal dh, 0x43; sbb al, 0x20; je 0x12bff0; pop rbx; ret; 
0x00000000000bc213: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x0000000000111b73: sal byte ptr [rcx], cl; test byte ptr [rax - 0x73], 0x3d; mov ebx, 0x31000a42; shr al, 0x7c; ret; 
0x000000000012ed7e: sal byte ptr [rdi + 0x11], 1; lea rdx, [rip + 0xc2568]; call 0xbd470; add rsp, 8; ret; 
0x0000000000148436: sal byte ptr [rdi + rax + 0x31], 0xc0; ret; 
0x00000000001535d5: sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0x80]; mov rax, r8; pop rbx; ret; 
0x00000000001536a5: sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa0]; mov rax, r8; pop rbx; ret; 
0x0000000000153775: sal byte ptr [rdi + rax + 0x4c], 1; lea eax, [rax + 0xa8]; mov rax, r8; pop rbx; ret; 
0x00000000000ede6f: sal byte ptr [rdi + rdi - 0x7d], 0xc1; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001071d3: sal byte ptr [rdi + riz*4 + 0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret; 
0x00000000000ac71b: sal byte ptr [rdx + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000011ce48: sal byte ptr [rdx + riz + 0x48], 0x39; ret; 
0x00000000000b1e6b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x00000000000cf79b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000184e87: sal byte ptr [rsi + rax*4 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; add rax, r8; vzeroupper; ret; 
0x000000000009f899: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x14f6bd; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000b1c3f: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; ret; 
0x00000000000ac257: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000000a87ae: sal byte ptr [rsp + rax + 0x39], 0xd0; jne 0xa87a0; mov rax, r8; ret; 
0x00000000000a877a: sal byte ptr [rsp + rax + 0x39], 0xf0; jne 0xa8770; mov rax, r8; ret; 
0x0000000000116fcd: sal byte ptr [rsp + rax + 0x48], cl; mov dword ptr [rdx + 8], eax; test rax, rax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x00000000000dda11: sal byte ptr [rsp + rbp + 0x48], 0x89; ret; 
0x00000000000a8729: sal byte ptr [rsp + rbp + 0x4d], 0x89; ret; 
0x00000000000ea391: sal byte ptr [rsp + rbx + 0xf], 0xb6; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x000000000014b1e1: sal byte ptr [rsp + rcx + 0x48], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000184e39: sal byte ptr [rsp + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000052ac5: sal byte ptr [rsp + rsi*2 - 0x41], 1; add byte ptr [rip - 0x2711800], al; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000012bfdd: sal dh, 0x43; sbb al, 0x20; je 0x12bff0; pop rbx; ret; 
0x0000000000048005: sal dl, 0xf; adc dword ptr [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000420ec: sal dl, 0xf; pop rcx; add eax, 0x17abfb; ret; 
0x0000000000134df2: sal dl, 1; call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x000000000012edc3: sal dword ptr [rbp - 0x16], 1; sub rsp, 8; call 0x12e560; nop; mov rax, rdi; ret; 
0x000000000015794e: sal dword ptr [rcx], 0xc0; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x00000000000a863a: sal dword ptr [rcx], 0xc0; mov qword ptr [rdx], rcx; ret; 
0x000000000018c8a9: sal dword ptr [rcx], 1; ror byte ptr [rbx + 0xc3b170c], 0x16; jne 0x18c529; vzeroupper; ret; 
0x000000000009ef18: sal dword ptr [rdi + 0x15], 0x4c; mov eax, eax; cmp qword ptr [rdi + 8], rsi; jb 0x9ef30; mov qword ptr [rdi], rsi; ret; 
0x000000000002c9fc: sal dword ptr [rsi + 0x18], cl; add al, ch; mov esi, dword ptr [rbp]; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000abe96: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000a8851: sal dword ptr [rsp + rsi*8 + 0x39], 1; int1; je 0xa8848; ret; 
0x00000000000e5296: sal ebx, 1; dec dword ptr [rax - 0x77]; ret; 
0x00000000000bbbf7: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000004225a: sal edi, 0xd8; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret; 
0x00000000001158e4: sal esp, 1; inc dword ptr [rbp + 0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000d2f6a: sar ah, 1; push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x0000000000057c35: sar bh, 0xff; ret; 
0x0000000000057c12: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057ddf: sar bh, 0xff; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000de2b2: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x000000000009526b: sar byte ptr [rax + 0x10], 0x48; cmovne eax, edx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x000000000015c81a: sar byte ptr [rax + 0x1b], 0x48; lea eax, [rip + 0x9475c]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x0000000000121416: sar byte ptr [rax + 0x1d], cl; syscall; cmp rax, -0x1000; ja 0x121430; ret; 
0x000000000008e4eb: sar byte ptr [rax + 0x29], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000d0025: sar byte ptr [rax + 0x48], 0x83; clc; sbb dword ptr [rdi + 0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000000de2b3: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x000000000015cc37: sar byte ptr [rax + 0xe], 0x48; add esp, 8; pop rbp; pop r12; ret; 
0x000000000013cb4f: sar byte ptr [rax + 0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret; 
0x00000000000cf18f: sar byte ptr [rax + 1], 0x44; cmovg ecx, eax; mov eax, r9d; ret; 
0x00000000001138d9: sar byte ptr [rax + 8], cl; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000114592: sar byte ptr [rax - 0x4e], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ee479: sar byte ptr [rax], 0xe; je 0xee3bd; ret; 
0x000000000011f347: sar byte ptr [rbx + rdx + 0x74], 1; ret; 
0x00000000001158e8: sar byte ptr [rcx + 5], 0x41; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret; 
0x00000000000440c6: sar byte ptr [rdi + 0x17], 1; test edi, edi; je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x00000000000e5066: sar byte ptr [rdx + 0x100], 1; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000013cbcd: sar byte ptr [rdx + 0x7fffffff], 1; add eax, ecx; cmovs eax, edx; ret; 
0x0000000000043ddc: sar byte ptr [rdx + 1], cl; cmove eax, edx; ret; 
0x0000000000063099: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000000b14c9: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a28d5: sar byte ptr [rdx], cl; cmove rax, rdx; ret; 
0x0000000000183d2a: sar byte ptr [rdx], cl; cmp edx, ecx; jle 0x183dd0; ret; 
0x000000000008ce0b: sar byte ptr [rsi + 0x1a], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccdb: sar byte ptr [rsi + 0x1a], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000002fdb9: sar byte ptr [rsi + 0x24], 0x83; call 0x84586c3; pop rbx; ret; 
0x000000000011ff9a: sar byte ptr [rsi - 0x2708fff4], cl; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a50b1: sar dh, 0xff; inc dword ptr [rcx - 0x7d]; ret; 
0x00000000000696aa: sar dl, 0xff; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000cf16d: sar dword ptr [rax + 1], 0x44; cmovl ecx, eax; mov eax, r9d; ret; 
0x000000000018fcb9: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcc0: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x18fcc4; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcc7: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x18fccc; ret; 
0x00000000000bc192: sar dword ptr [rax], 1; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret; 
0x0000000000183d21: sar dword ptr [rcx], 0xc2; jg 0x183d34; pcmpistri xmm2, xmm2, 0x3a; cmp edx, ecx; jle 0x183dd0; ret; 
0x0000000000134802: sar dword ptr [rdx + 0x6401000b], 0x45; mov dword ptr [rax], ecx; add rsp, 8; ret; 
0x0000000000121029: sar dword ptr [rdx], 1; cmovb rax, rdx; ret; 
0x000000000018bb1d: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x0000000000041b6c: sar eax, 0x10; ret; 
0x000000000004225f: sar eax, 0x1f; not eax; and eax, edx; ret; 
0x0000000000162fc8: sar eax, 0x1f; ret; 
0x0000000000041b1c: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret; 
0x00000000000425a9: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000041e9e: sar eax, 0x3f; not eax; and eax, edx; ret; 
0x0000000000094d57: sar eax, 1; and eax, 1; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000008aa16: sar eax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000000885ed: sar eax, 2; ret; 
0x000000000012fc11: sar eax, 6; ret; 
0x00000000000ac8c2: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000019366b: sar ebp, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x0000000000087dfc: sar ecx, 2; lea eax, [rcx - 1]; ret; 
0x000000000012a9cd: sar edi, cl; dec dword ptr [rcx]; ret; 
0x0000000000087ea6: sar edx, 2; sub eax, edx; ret; 
0x00000000000ac8c8: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b1c98: sar edx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3b: sar edx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e67: sar edx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df7: sar edx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf797: sar edx, cl; test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72b: sar edx, cl; test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000190927: sar esi, 1; jg 0x19094f; vzeroupper; ret; 
0x0000000000190ab2: sar esi, 1; jg 0x190ada; vzeroupper; ret; 
0x00000000000a09db: sar esp, 0xe; add byte ptr [rax - 0x73], cl; adc eax, 0xefc4a; cmove rax, rdx; ret; 
0x00000000000425a8: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000041e9d: sar rax, 0x3f; not eax; and eax, edx; ret; 
0x000000000008aa15: sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x00000000000885ec: sar rax, 2; ret; 
0x000000000012fc10: sar rax, 6; ret; 
0x00000000000ac8c1: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000087dfb: sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x0000000000087ea5: sar rdx, 2; sub eax, edx; ret; 
0x00000000000ac8c7: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b1c97: sar rdx, cl; test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3a: sar rdx, cl; test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e66: sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df6: sar rdx, cl; test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf796: sar rdx, cl; test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72a: sar rdx, cl; test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000005b4c5: saveprevssp; mov qword ptr [r9 + 0x3a8], rdi; mov rsp, rdx; ret; 
0x0000000000118c95: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118ca4; ret; 
0x000000000010d34c: sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x0000000000024409: sbb al, 0; add rax, qword ptr fs:[0]; ret; 
0x0000000000023a6c: sbb al, 0; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x00000000000246ed: sbb al, 0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000152e19: sbb al, 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000226b5: sbb al, 0; mov qword ptr [rip + 0x1ceae2], rdx; pop rax; pop rbx; pop rbp; ret; 
0x00000000000226bc: sbb al, 0; pop rax; pop rbx; pop rbp; ret; 
0x0000000000023a54: sbb al, 0; ret; 
0x0000000000026f5c: sbb al, 0; test eax, eax; je 0x26f68; ret; 
0x000000000009f857: sbb al, 0x15; add byte ptr [rbp + 0x481275c0], al; lea eax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x000000000012bfe0: sbb al, 0x20; je 0x12bff0; pop rbx; ret; 
0x00000000001882a0: sbb al, 0x32; add dword ptr [rax], eax; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000c9fdb: sbb al, 0x39; ret; 
0x0000000000151944: sbb al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000004431a: sbb al, 0x48; add esp, 0x98; pop rbp; pop r12; ret; 
0x00000000000b7a69: sbb al, 0x48; lea edi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fd: sbb al, 0x48; lea edi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b9225: sbb al, 0x49; sub eax, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x000000000013becb: sbb al, 0x74; adc al, byte ptr [rbx + 0x7ba14fe]; add dword ptr [rax], eax; add byte ptr [rax - 1], bh; cmove eax, edx; ret; 
0x00000000000e8643: sbb al, 0x8b; add ecx, dword ptr [rax - 0x77]; fimul dword ptr [rax - 0x7d]; ret; 
0x00000000000ec493: sbb al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000001500e5: sbb al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; movups xmmword ptr [rdx], xmm2; ret; 
0x0000000000120617: sbb al, 0xe8; ret; 
0x0000000000117553: sbb al, 0xe8; xchg dword ptr [rdi + rsi*8 - 1], eax; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000047581: sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000118c01: sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x118c60; ret; 
0x0000000000047f89: sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000004754f: sbb al, byte ptr [rax]; call 0xbd470; pop rbx; ret; 
0x0000000000043065: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042f25: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000041e5f: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000043c59: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000041255: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 0x2a; mov rax, r11; ret; 
0x0000000000048335: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret; 
0x00000000000412b5: sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000048305: sbb al, byte ptr [rax]; mov eax, dword ptr fs:[rax]; cmp eax, 4; je 0x482d0; mov eax, 0xffffffff; ret; 
0x00000000000440f7: sbb al, byte ptr [rax]; mov eax, edx; ret; 
0x0000000000042b34: sbb al, byte ptr [rax]; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret; 
0x00000000000433e9: sbb al, byte ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000043425: sbb al, byte ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000048285: sbb al, byte ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000044098: sbb al, byte ptr [rax]; ret; 
0x0000000000047654: sbb al, byte ptr [rax]; syscall; pop rbp; ret; 
0x000000000013bf0e: sbb al, byte ptr [rbx + 0xba05ff]; add byte ptr [rax], al; add byte ptr [rax + 0x102], bh; cmovne eax, edx; ret; 
0x0000000000120d5e: sbb al, ch; fdivr qword ptr [rax]; idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000001193ec: sbb al, ch; inc byte ptr [rdx]; add byte ptr [rax], al; lea rax, [rip + 0xd64c7]; add rsp, 0x18; ret; 
0x000000000012112e: sbb al, ch; or al, 0x35; idiv edi; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000105f96: sbb al, ch; xchg esp, eax; ret; 
0x0000000000112bd0: sbb bh, al; dec dword ptr [rbx + 0x48082444]; add esp, 0x28; ret; 
0x00000000000e2fcc: sbb bh, bl; inc dword ptr [rcx + rcx*4 - 0x18]; pop rbp; pop r12; pop r13; ret; 
0x00000000000ec483: sbb bh, byte ptr [rax + 2]; ret; 
0x00000000000e2d4a: sbb bl, bh; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x0000000000109d71: sbb bl, byte ptr [rax + rcx*2 - 0x7d]; ret; 
0x00000000000328a8: sbb bl, byte ptr [rax]; add byte ptr [rcx], bh; jp 0x328e6; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x00000000000b957a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d2a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b876a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95da: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b709a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b872b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000b9579: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, [rdi + 0x19]; ret; 
0x00000000000b7d29: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000b8769: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x00000000000b95d9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1c]; ret; 
0x00000000000b7099: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000b872a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000000b959a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x1a]; ret; 
0x00000000000b705a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000009e902: sbb byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000014896b: sbb byte ptr [r11 + 0xe7603f8], r8b; mov eax, 2; ret; 
0x00000000000918ed: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000008e554: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x000000000009517b: sbb byte ptr [r8 + 0x39], cl; ret; 
0x000000000015fae3: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000127cb0: sbb byte ptr [r8 - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000bb1e4: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb206: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb244: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000008c10f: sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000015777c: sbb byte ptr [r9 + r9*4 - 0x40], r8b; ret; 
0x0000000000197527: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b7a06: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f98c229; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b9165: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f98d987; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x0000000000040fb4: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0x40f98; ret; 
0x000000000009517c: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000137c1b: sbb byte ptr [rax + 0x4401000b], cl; mov eax, eax; pop rbp; ret; 
0x000000000015fae4: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000000e434e: sbb byte ptr [rax - 0x73], cl; call 0x416a84b2; pop rbp; pop rbp; ret; 
0x00000000000b79b3: sbb byte ptr [rax - 0x73], cl; jg 0xb79d0; jne 0xb7f80; ret; 
0x00000000000b9137: sbb byte ptr [rax - 0x73], cl; jg 0xb9154; jne 0xb97d0; ret; 
0x0000000000153c6c: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153cdc: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d4c: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153dad: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e11: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e7c: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153eff: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rax, qword ptr fs:[0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x0000000000153bf6: sbb byte ptr [rax - 0x75], cl; and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x00000000000bda0f: sbb byte ptr [rax - 0x75], cl; sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000115cff: sbb byte ptr [rax - 0x77], cl; add eax, 0xd9939; mov eax, 1; add rsp, 8; ret; 
0x0000000000127cb1: sbb byte ptr [rax - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000f3f02: sbb byte ptr [rax - 0x77], cl; je 0xf3f2b; adc al, ch; ret; 
0x00000000000918f6: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000000dd7e7: sbb byte ptr [rax - 0x77], cl; ret; 
0x000000000010dcd6: sbb byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x00000000000df9f4: sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000008a0d0: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000102715: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000094ca5: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; ret; 
0x0000000000117e14: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x117e28; sub dword ptr [rip + 0xd7a2d], 1; ret; 
0x0000000000063082: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f34: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000090fe8: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000938f4: sbb byte ptr [rax], al; add byte ptr [rax], al; test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x00000000000a3d83: sbb byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000005eaa7: sbb byte ptr [rax], al; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000061056: sbb byte ptr [rax], al; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000141c11: sbb byte ptr [rax], al; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000328a9: sbb byte ptr [rax], al; cmp dword ptr [rdx + 0x38], edi; jbe 0x328c7; mov rax, qword ptr [rdx + rdi*8 + 0x40]; ret; 
0x000000000019937c: sbb byte ptr [rax], al; je 0x199368; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000062e9d: sbb byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000241a9: sbb byte ptr [rax], al; ret; 
0x000000000008cd2c: sbb byte ptr [rax], al; setne r8b; mov eax, r8d; ret; 
0x00000000000bb1e5: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb207: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb245: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x0000000000062653: sbb byte ptr [rax], dl; add byte ptr [rax], al; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000a3d82: sbb byte ptr [rax], r8b; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000010dcda: sbb byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x00000000000476c4: sbb byte ptr [rbp + 0x4c], bl; mov eax, esp; pop r12; ret; 
0x00000000000e1c2f: sbb byte ptr [rbx + 0x10d8a92d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfcff: sbb byte ptr [rbx + 0x10f6692d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013c74a: sbb byte ptr [rbx + 0x49], bl; mov dword ptr [rcx], ecx; ret; 
0x000000000008c085: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000007a3fa: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000009e903: sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000429f8: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000014c96f: sbb byte ptr [rbx + 0xa43b12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013894f: sbb byte ptr [rbx + 0xb7ae92d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001347ff: sbb byte ptr [rbx + 0xbbac12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013339f: sbb byte ptr [rbx + 0xbcdb92d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012663f: sbb byte ptr [rbx + 0xc97e92d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124b8f: sbb byte ptr [rbx + 0xcb1412d], al; add byte ptr [rcx], al; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014896c: sbb byte ptr [rbx + 0xe7603f8], al; mov eax, 2; ret; 
0x000000000009358b: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000043b54: sbb byte ptr [rbx - 0x389bffe6], al; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000033d14: sbb byte ptr [rbx], 0; mov qword ptr [rax], rdx; ret; 
0x0000000000033d58: sbb byte ptr [rbx], 0; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000096356: sbb byte ptr [rcx + 1], cl; ret; 
0x0000000000147318: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x00000000000868b1: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008c110: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000080acf: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008e22a: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x000000000008d4e7: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000073d4b: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000046e6e: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x0000000000157707: sbb byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x000000000009cf7d: sbb byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop r12; ret; 
0x000000000015773f: sbb byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000197528: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b7a07: sbb byte ptr [rcx - 0x7d], cl; call 0x7f98c229; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000b9166: sbb byte ptr [rcx - 0x7d], cl; call 0x7f98d987; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000001500c1: sbb byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; adc dword ptr [rax + 8], eax; ret; 
0x0000000000043024: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000001132c8: sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1132e0; ret; 
0x000000000011330d: sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x113320; ret; 
0x00000000000e9ec6: sbb byte ptr [rcx], bh; ret; 
0x000000000008a0a3: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000015398e: sbb byte ptr [rdi + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x000000000008e555: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000062e2c: sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000d6836: sbb byte ptr [rdi], cl; test ah, cl; add al, byte ptr [rax]; add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000ec99b: sbb byte ptr [rdx + rdx*2 - 0x73], dh; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000043df4: sbb byte ptr [rdx], 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000440f6: sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x00000000000440a7: sbb byte ptr [rdx], 0; ret; 
0x00000000000918ee: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000001221ea: sbb byte ptr [rsi - 0x7d], ah; add byte ptr [rcx], al; ret; 
0x00000000001221e9: sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x0000000000093db2: sbb ch, al; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000127b42: sbb ch, byte ptr [rcx - 0x76b70011]; ret; 
0x00000000000e9ec3: sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x00000000000b7a0b: sbb cl, byte ptr [rax - 0x73]; jg 0xb7a2a; jne 0xb7f80; ret; 
0x00000000000b919f: sbb cl, byte ptr [rax - 0x73]; jg 0xb91be; jne 0xb97d0; ret; 
0x000000000008ce0d: sbb cl, byte ptr [rax - 0x75]; xchg edi, eax; movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccdd: sbb cl, byte ptr [rax - 0x75]; xchg edi, eax; movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000057b35: sbb cl, byte ptr [rax - 0x7b]; div byte ptr [rbp + 0x25]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000127cf5: sbb cl, byte ptr [rax - 0x7d]; jnp 0x127d22; add byte ptr [rax], bh; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000109d93: sbb cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000b7a0f: sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x00000000000ec3d7: sbb dword ptr [rax + 1], edi; ret; 
0x00000000000b79d6: sbb dword ptr [rax - 0x73], ecx; jg 0xb79f4; jne 0xb7f80; ret; 
0x00000000000b916a: sbb dword ptr [rax - 0x73], ecx; jg 0xb9188; jne 0xb97d0; ret; 
0x0000000000047576: sbb dword ptr [rax - 0x75], ecx; adc byte ptr [rbx + 0x48], bl; mov dword ptr [rip + 0x1a9d69], 0; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000057bc6: sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000015c55c: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x000000000011fec8: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fed7; ret; 
0x0000000000054cd4: sbb dword ptr [rax], eax; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000529f6: sbb dword ptr [rax], eax; lea rax, [rip + 0x19bc61]; mov byte ptr [rax + rdx], 0; ret; 
0x00000000000529fd: sbb dword ptr [rax], eax; mov byte ptr [rax + rdx], 0; ret; 
0x0000000000054f11: sbb dword ptr [rax], eax; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000241b9: sbb dword ptr [rax], eax; ret; 
0x00000000000a8be3: sbb dword ptr [rax], edi; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000d0153: sbb dword ptr [rbp - 0x389bffef], edi; add byte ptr [rbx], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000042403: sbb dword ptr [rbx + 0xff30017], esp; pop rcx; add eax, 0x17af79; ret; 
0x0000000000120353: sbb dword ptr [rbx - 0x2708fff4], edi; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000115553: sbb dword ptr [rcx + 0xd], ebp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000013c54e: sbb dword ptr [rcx + rcx*4 - 0x40], eax; ret; 
0x00000000000df4da: sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001016e5: sbb dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000bdf8a: sbb dword ptr [rcx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x116fc; cmovne rax, rdx; ret; 
0x000000000011f45a: sbb dword ptr [rcx], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x00000000000cf543: sbb dword ptr [rcx], eax; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000e4f94: sbb dword ptr [rcx], eax; add byte ptr [rdx + 0x7d00], bh; mov eax, 0x7f; cmove rax, rdx; ret; 
0x00000000000c9ee6: sbb dword ptr [rcx], edi; ret; 
0x00000000000d002a: sbb dword ptr [rdi + 0x23], edi; mov rax, r12; pop r12; ret; 
0x00000000000b916e: sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x0000000000124aba: sbb dword ptr [rdx + 0x6401000c], esi; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x0000000000041253: sbb dword ptr [rdx + rbx + 0xc76400], ebp; sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000000e4fd2: sbb dword ptr [rdx + rdi*4], edx; jge 0xe4fd8; add byte ptr [rax + 0x7f], bh; cmove rax, rdx; ret; 
0x0000000000043af6: sbb dword ptr [rdx], 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018bf6e: sbb dword ptr [rip + 0x31000002], -0x40; vzeroupper; ret; 
0x00000000000d0053: sbb dword ptr [rsi + 0x31450011], edi; in al, 0x64; mov dword ptr [rax], 0x4b; mov rax, r12; pop r12; ret; 
0x000000000017c90c: sbb eax, -1; ret; 
0x00000000000b661d: sbb eax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000010ffa9: sbb eax, 0; ret; 
0x00000000000938a1: sbb eax, 0x15af22; add dword ptr [rip + 0x15af17], 1; pop rbx; ret; 
0x00000000000b7a95: sbb eax, 0x1d7f8d48; jne 0xb7f80; ret; 
0x00000000000b9229: sbb eax, 0x1d7f8d48; jne 0xb97d0; ret; 
0x00000000000b9255: sbb eax, 0x1ee88349; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x000000000011a1f1: sbb eax, 0x1f0f3ceb; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000016dbb5: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000016dbb0: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000011786f: sbb eax, 0x4c000d7f; mov eax, eax; ret; 
0x00000000000fec97: sbb eax, 0x4c000ed3; mov eax, dword ptr [rax]; mov qword ptr [rax], rdi; mov rax, r8; ret; 
0x00000000000b7a99: sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x0000000000198c25: sbb eax, 0x55b76; test rbx, rbx; jne 0x198c10; pop rbx; ret; 
0x00000000000b922d: sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x00000000000344c7: sbb eax, 0x64001b7a; add rax, qword ptr [0]; ret; 
0x000000000011351f: sbb eax, 0x8bfff811; and al, 8; add rsp, 0x28; ret; 
0x0000000000153457: sbb eax, 0x98944; mov rax, qword ptr fs:[rbx]; test rax, rax; je 0x153470; pop rbx; ret; 
0x00000000000e2ce2: sbb eax, 0xb8c03145; test dword ptr [rax], 0x50f0000; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000001885b2: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000121d1a: sbb eax, 0xca641; pop rbx; ret; 
0x0000000000121d00: sbb eax, 0xca65b; pop rbx; ret; 
0x0000000000183fa2: sbb eax, 0xcfbc0ff3; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000090886: sbb eax, 0xe9ebe374; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000118cc5: sbb eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x118cd4; ret; 
0x000000000003e1c5: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fc08], al; xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000003e1ce: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x0000000000034547: sbb eax, dword ptr [rax]; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000000344a9: sbb eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x0000000000032851: sbb eax, dword ptr [rax]; mov byte ptr [rip + 0x1bb2a4], dl; ret; 
0x0000000000033d15: sbb eax, dword ptr [rax]; mov qword ptr [rax], rdx; ret; 
0x00000000000328e9: sbb eax, dword ptr [rax]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000003421a: sbb eax, dword ptr [rax]; mov rdx, qword ptr fs:[rdx]; mov rdx, qword ptr [rdx]; mov rdx, qword ptr [rdx + 0x48]; mov eax, dword ptr [rdx + rax*4 + 0x200]; ret; 
0x0000000000033d59: sbb eax, dword ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000034239: sbb eax, dword ptr [rax]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002f5a9: sbb eax, dword ptr [rax]; ret; 
0x0000000000112f4c: sbb eax, dword ptr [rbx + 0x674a1f8]; neg eax; ret; 
0x0000000000120075: sbb eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000000947f5: sbb eax, eax; add rsp, 0x20; and eax, 0xc; pop rbx; ret; 
0x0000000000115aaf: sbb eax, eax; and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000055bea: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000185047: sbb eax, eax; or eax, 1; ret; 
0x000000000013baac: sbb eax, eax; ret; 
0x0000000000192805: sbb eax, eax; sbb eax, -1; ret; 
0x000000000009a0c1: sbb ebx, dword ptr [rdi]; adc eax, 0x30894800; mov rax, qword ptr [rip + 0x151e11]; mov qword ptr [rax], rdi; ret; 
0x00000000000e2c90: sbb ebx, edi; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x00000000000e1b5a: sbb ecx, 0x64010010; mov dword ptr [r8], r9d; add rsp, 8; ret; 
0x000000000015c81c: sbb ecx, dword ptr [rax - 0x73]; add eax, 0x9475c; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret; 
0x00000000000b7a39: sbb ecx, dword ptr [rax - 0x73]; jg 0xb7a59; jne 0xb7f80; ret; 
0x00000000000b91cd: sbb ecx, dword ptr [rax - 0x73]; jg 0xb91ed; jne 0xb97d0; ret; 
0x0000000000192d14: sbb ecx, dword ptr [rbx + 0x463bf847]; clc; jne 0x192e20; ret; 
0x00000000000a093b: sbb edi, eax; call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000005438a: sbb edi, edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000579a5: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000184a84: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000009f131: sbb esi, esi; or esp, 0x40000000; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x00000000000e5060: sbb esp, dword ptr [rbx]; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret; 
0x000000000010e253: sbb esp, ebx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000000579a4: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000017c90b: sbb rax, -1; ret; 
0x00000000000b661c: sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000009f764: scasb al, byte ptr [rdi]; add byte ptr [rax], al; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x000000000012db92: scasb al, byte ptr [rdi]; add eax, dword ptr [rax]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000001576a4: scasb al, byte ptr [rdi]; call 0x12fc90; nop word ptr [rax + rax]; endbr64; ret; 
0x0000000000085024: scasb al, byte ptr [rdi]; mov r8d, 0xffffffff; mov eax, r8d; ret; 
0x000000000005b3a1: scasb al, byte ptr [rdi]; mov rax, r10; pop rbx; ret; 
0x00000000000d0ef4: scasd eax, dword ptr [rdi]; adc dword ptr [rax], eax; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000011900d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000a0649: scasd eax, dword ptr [rdi]; or al, 0; cmovne rax, rdx; ret; 
0x0000000000120ed4: scasd eax, dword ptr [rdi]; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000160ee8: scasd eax, dword ptr [rdi]; or byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret; 
0x00000000000895a0: scasd eax, dword ptr [rdi]; ret; 
0x00000000000440f5: scasd eax, dword ptr [rdi]; sbb byte ptr [rdx], 0; mov eax, edx; ret; 
0x0000000000122279: seta al; movzx eax, al; neg eax; ret; 
0x000000000010ffa6: seta al; sbb eax, 0; ret; 
0x0000000000094194: setae al; ret; 
0x00000000000d424b: setb al; add eax, 0x16d; ret; 
0x0000000000122e7a: setbe al; mov eax, r8d; ret; 
0x0000000000122e79: setbe r8b; mov eax, r8d; ret; 
0x0000000000034aa7: sete ah; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000001004fd: sete al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000062e26: sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x0000000000157f8b: sete al; add rsp, 8; mov eax, r8d; ret; 
0x00000000000522b2: sete al; add rsp, 8; movzx eax, al; ret; 
0x0000000000145acc: sete al; add rsp, 8; ret; 
0x00000000000e51fb: sete al; movzx eax, al; lea rax, [rax + rax - 1]; ret; 
0x0000000000156018: sete al; movzx eax, al; ret; 
0x0000000000094c8e: sete al; movzx eax, al; sub eax, 2; add rsp, 8; ret; 
0x0000000000149f88: sete al; pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x00000000000342c9: sete al; ret; 
0x0000000000042c5a: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000160d35: sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x0000000000034aa6: sete r12b; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157f8a: sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x0000000000042c59: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x00000000000ce090: setg al; movzx eax, al; lea eax, [rax + rax - 1]; ret; 
0x000000000018bfbc: setl al; neg eax; or eax, 1; vzeroupper; ret; 
0x000000000010c77f: setl al; ret; 
0x000000000011f5c0: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000ee321: setne al; add rsp, 8; add eax, eax; pop rbx; pop rbp; ret; 
0x000000000014e03f: setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d5: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x00000000001175e7: setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000102aa8: setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x000000000008cd2f: setne al; mov eax, r8d; ret; 
0x000000000014a361: setne al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000062e68: setne al; movzx eax, al; neg eax; pop rbp; ret; 
0x00000000001028b1: setne al; movzx eax, al; neg eax; ret; 
0x0000000000043c2c: setne al; movzx eax, al; ret; 
0x00000000000e5190: setne al; ret; 
0x00000000000a8926: setne bh; test r9b, dil; jne 0xa8908; ret; 
0x00000000000a891f: setne cl; cmp r8d, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x00000000000a87ea: setne cl; test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a8925: setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000008cd2e: setne r8b; mov eax, r8d; ret; 
0x00000000000a891e: setne r9b; cmp r8d, edx; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x00000000000a87e9: setne r9b; test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x0000000000184dc4: shl byte ptr [rax + 0x48], 1; clc; ret; 
0x000000000018d422: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a92: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x00000000001849ab: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x000000000018d3b6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a26: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000018496b: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000090881: shl byte ptr [rbx + rax*4 + 0x7d], 0; sbb eax, 0xe9ebe374; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000011faa8: shl byte ptr [rcx], cl; rol byte ptr [rcx + rcx*4 - 0x3e], 1; or eax, esi; wrpkru; xor eax, eax; ret; 
0x0000000000098099: shl byte ptr [rdi + rax*8], 0xc; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x00000000000bc215: shl byte ptr [rip + 0x3fffc00], cl; div ecx; mov eax, eax; ret; 
0x000000000004216c: shl byte ptr [rsi + 0x48], 1; movd mm0, eax; ret; 
0x0000000000041fad: shl byte ptr [rsi + 0x48], 1; movd mm1, eax; mov qword ptr [rdi], rax; subsd xmm0, xmm1; ret; 
0x0000000000047ce3: shl byte ptr [rsi + 0xf], 0x6c; rol dword ptr [rcx + rcx*4 - 0x40], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000ff2be: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret; 
0x00000000000b1a36: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ed9c8: shl byte ptr [rsi + 0xf], cl; outsb dx, byte ptr [rsi]; ret; 
0x0000000000120fd8: shl byte ptr [rsi - 0x7d], 0xff; adc dh, byte ptr [rdi + 0xd]; movzx edi, di; lea rax, [rip + 0x91697]; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000115ab5: shl byte ptr [rsi], 0x64; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012dc47: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x3842b]; lea rdx, [rip + 0x3d9b4]; cmovne rax, rdx; ret; 
0x000000000012dac7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x385cb]; lea rdx, [rip + 0x3db54]; cmovne rax, rdx; ret; 
0x000000000012db87: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0x3aeeb]; lea rdx, [rip + 0x40584]; cmovne rax, rdx; ret; 
0x00000000000a09a7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc56fb]; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000a0637: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc5a4b]; lea rdx, [rip + 0xcafd4]; cmovne rax, rdx; ret; 
0x00000000000a04d7: shl dword ptr [rax], 0x75; and r9d, 8; lea rax, [rip + 0xc85ab]; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x0000000000123581: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000000ac717: shl dword ptr [rcx], 0xd0; test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x00000000000a0739: shl dword ptr [rdx + 1], cl; add byte ptr [rax - 0x73], cl; adc eax, 0xd8f0c; cmovne rax, rdx; ret; 
0x0000000000043f2f: shl dword ptr [rsi + 0xf], 0xc6; rol byte ptr [rcx], 0xf; adc dword ptr [rdi], eax; ret; 
0x00000000000b1a32: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000000bb47f: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x0000000000042449: shl eax, 0x17; or eax, esi; movd xmm0, eax; mulss xmm0, dword ptr [rip + 0x17af36]; ret; 
0x00000000000423bc: shl eax, 0x17; or esi, eax; movd xmm0, esi; ret; 
0x0000000000052948: shl eax, 0x1e; or eax, edx; ret; 
0x000000000011f11f: shl eax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x00000000000420df: shl eax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203b: shl eax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000047d6e: shl eax, 0xa; mov dword ptr [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x000000000013c93e: shl eax, 3; shr rax, 4; and eax, 0x7f; ret; 
0x0000000000061bbd: shl eax, 8; and eax, 0x100; or eax, 7; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000043b8f: shl eax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000160cb0: shl eax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000043c27: shl eax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000b1d4b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000563cc: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634b: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000005631a: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000012fd58: shl edi, 0x10; movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000012fd39: shl edi, 0x18; and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret; 
0x000000000004732c: shl edi, 0x20; or rax, rdi; ret; 
0x000000000012fd74: shl edi, 8; movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret; 
0x00000000000b180a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000013c78c: shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret; 
0x000000000013c837: shl edx, 4; xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000014a818: shl edx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000160c90: shl edx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160c60: shl edx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000057c51: shl esi, 0x17; and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret; 
0x0000000000057c9c: shl esi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000000010d7ab: shl esi, 0xd; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x000000000013c983: shl esi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000057b73: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000563cb: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000005634a: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000056319: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011f11e: shl rax, 0x20; and rax, rdi; or rax, rsi; ret; 
0x00000000000420de: shl rax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203a: shl rax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret; 
0x0000000000043b8e: shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000160caf: shl rax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000043c26: shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000b1d4a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000004732b: shl rdi, 0x20; or rax, rdi; ret; 
0x00000000000b1809: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000013c836: shl rdx, 4; xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x000000000014a817: shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000160c8f: shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160c5f: shl rdx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000057c9b: shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret; 
0x000000000013c982: shl rsi, 4; lea r8, [rdi + rsi + 8]; mov rax, r8; ret; 
0x0000000000057b72: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000563c4: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056344: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000000563c3: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000056343: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000046114: shr al, 0x46; ret; 
0x000000000014b569: shr al, 0x61; cmp ecx, 0x3d8d48ff; pop rsi; ret; 
0x0000000000111b7e: shr al, 0x7c; ret; 
0x00000000001558d3: shr al, 0x87; retf; in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e2069; ret; 
0x00000000000822ed: shr al, 0x9d; ret; 
0x0000000000155a63: shr al, 0xf7; leave; in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e21f9; ret; 
0x000000000012d0da: shr ax, 0xe; and eax, 1; ret; 
0x00000000000d0fd1: shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0x10f]; add rsp, 0x58; ret; 
0x00000000000d0eb1: shr bl, 0xe0; nop dword ptr [rax]; lea rax, [rip - 0xff]; add rsp, 0x58; ret; 
0x00000000000aa64f: shr byte ptr [rcx], 0xc8; ret; 
0x00000000000d13c5: shr byte ptr [rcx], 1; call 0xffffffff89dd7714; ret; 
0x000000000002f258: shr byte ptr [rcx], cl; ret; 
0x00000000000960bc: shr byte ptr [rdx + 0x15], 0; add rsp, 0x10; pop rbp; ret; 
0x000000000012fda7: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000012fdba: shr eax, 0x18; ret; 
0x0000000000129656: shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000129693: shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000041b7f: shr eax, 0x1f; ret; 
0x000000000011f0a1: shr eax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000018fbdc: shr eax, 0x20; cmp ecx, eax; jne 0x18fbe6; xor eax, eax; ret; 
0x00000000000481e5: shr eax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000192eaa: shr eax, 0x38; ret; 
0x0000000000041ecc: shr eax, 0x3f; ret; 
0x000000000011f0cc: shr eax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000bc113: shr eax, 0xe; and eax, 0x3fc00; ret; 
0x000000000012d0db: shr eax, 0xe; and eax, 1; ret; 
0x00000000000cf73b: shr eax, 2; ret; 
0x000000000018d2e3: shr eax, 2; vzeroupper; ret; 
0x000000000013c942: shr eax, 4; and eax, 0x7f; ret; 
0x000000000008def6: shr eax, 4; and eax, 1; ret; 
0x0000000000094e70: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x000000000008df06: shr eax, 5; and eax, 1; ret; 
0x00000000000bc15e: shr eax, 6; and eax, 0x3fffc00; ret; 
0x0000000000160c93: shr eax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160c63: shr eax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000005b15a: shr eax, cl; add byte ptr [rbx - 4], dh; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000122c0f: shr eax, cl; and eax, 1; ret; 
0x000000000011faf1: shr eax, cl; and eax, 3; ret; 
0x0000000000122e5d: shr eax, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000047d73: shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret; 
0x00000000001296cd: shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000129704: shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x000000000018fbd8: shr ecx, 0x20; shr rax, 0x20; cmp ecx, eax; jne 0x18fbe6; xor eax, eax; ret; 
0x000000000015f465: shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x000000000013c7ef: shr ecx, 3; rep stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d1: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aeb: shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x00000000000564dc: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000056465: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000056434: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000012fd9e: shr edi, 8; and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000040fb2: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x0000000000041b60: shr edx, 0x1f; or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x000000000008ad40: shr edx, 4; and edx, 1; mov eax, edx; ret; 
0x000000000008ae40: shr edx, 5; and edx, 1; mov eax, edx; ret; 
0x0000000000160cb3: shr edx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x000000000013c389: shr esi, 3; mov eax, 2; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000122e5c: shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x00000000000564db: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000056464: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000056433: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011f0a0: shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000018fbdb: shr rax, 0x20; cmp ecx, eax; jne 0x18fbe6; xor eax, eax; ret; 
0x00000000000481e4: shr rax, 0x20; mov word ptr [rdi + 4], ax; xor eax, eax; ret; 
0x0000000000192ea9: shr rax, 0x38; ret; 
0x0000000000041ecb: shr rax, 0x3f; ret; 
0x000000000011f0cb: shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x00000000000cf73a: shr rax, 2; ret; 
0x000000000018d2e2: shr rax, 2; vzeroupper; ret; 
0x000000000013c941: shr rax, 4; and eax, 0x7f; ret; 
0x0000000000094e6f: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x0000000000160c92: shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000160c62: shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000018fbd7: shr rcx, 0x20; shr rax, 0x20; cmp ecx, eax; jne 0x18fbe6; xor eax, eax; ret; 
0x0000000000040fb1: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x0000000000160cb2: shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x00000000000564d4: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000005645e: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000000564d3: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000005645d: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000043f30: shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f22: shufpd xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044062: shufpd xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f27: shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044067: shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f31: shufps xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000043f23: shufps xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044063: shufps xmm0, xmm0, 1; shufpd xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000018ae35: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000001893a5: shufps xmm0, xmmword ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000043f28: shufps xmm1, xmm1, 1; pand xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000044068: shufps xmm1, xmm1, 1; por xmm0, xmm1; shufpd xmm0, xmm0, 1; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000011f0a7: sldt word ptr [rax]; and eax, 0xfffff000; or eax, edx; ret; 
0x000000000004234d: stc; add byte ptr [rax], 0; add byte ptr [rbp + 0xc], dh; test eax, 0x7fffff; je 0x42360; ret; 
0x00000000000a1cc4: stc; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000000d1241: stc; add cl, byte ptr [rax - 0x77]; ret; 
0x000000000012977f: stc; add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], 0xc0; add dword ptr [rbp + 0x440f45c9], eax; ror dword ptr [rax - 0x7d], 1; ret; 
0x000000000010c8a5: stc; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000015d455: stc; add esi, dword ptr [rsi + 7]; ret; 
0x000000000004a170: stc; dec dword ptr [rax - 0x77]; fadd dword ptr [rcx + 0xf]; xchg esp, eax; ret; 
0x000000000008e337: stc; dec dword ptr [rax - 0x77]; ret; 
0x000000000008282d: stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000008292c: stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000beeb3: stc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000088532: stc; dec dword ptr [rbp + rcx*4 + 0x2c]; and dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; ret; 
0x0000000000084401: stc; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbp; pop r12; pop r13; ret; 
0x0000000000102aa3: stc; inc al; add byte ptr [rax], al; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x0000000000052942: stc; je 0x52953; mov eax, ecx; shl eax, 0x1e; or eax, edx; ret; 
0x00000000000a892b: stc; jne 0xa8908; ret; 
0x000000000018ae8f: stc; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000120d73: stc; mov al, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000001688b8: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000100467: stc; mov dword ptr [rsi], 0; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000001688b2: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018ae87: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893d7: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000122e57: stc; mov r8d, dword ptr [rax + rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret; 
0x0000000000183fcf: stc; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fef: stc; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000009f351: stc; or dword ptr [rsi - 0x1d], esi; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x000000000010c4a4: stc; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000010044d: stc; or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; movups xmmword ptr [rsi + 8], xmm0; ret; 
0x00000000000ec3d0: stc; pop rsi; jne 0xec400; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000056525: stc; push qword ptr [rbp - 0x11]; mov rax, rdx; ret; 
0x000000000009f763: stc; scasb al, byte ptr [rdi]; add byte ptr [rax], al; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x0000000000122c0e: stc; shr eax, cl; and eax, 1; ret; 
0x00000000000ec401: stc; sub eax, 0x47c6e875; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x0000000000043ae7: stc; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000113873: stc; test dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001901c8: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001893df: stc; vzeroupper; ret; 
0x00000000000e4f7f: std; add byte ptr [rax], al; mov eax, 0x7f; cmove rax, rdx; ret; 
0x0000000000186bbf: std; add qword ptr [rax], rax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000157b1d: std; call qword ptr [rax - 0x5e1f00d]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x0000000000052a55: std; dec dword ptr [rax - 0x77]; ret; 
0x00000000000471e1: std; dec dword ptr [rax - 0x77]; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000041d31: std; fstp st(1); ret; 
0x000000000012033f: std; idiv edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000114869: std; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000184c00: std; je 0x184c62; and ch, al; std; xlatb; ret; 
0x0000000000184cee: std; je 0x184d50; and ch, al; std; xlatb; ret; 
0x000000000002fdac: std; je 0x2fdc8; pop rbx; ret; 
0x000000000018ae6b: std; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001680d3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000094d92: std; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000018ae67: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893c7: std; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000001680db: std; mov word ptr [rdi - 2], cx; ret; 
0x000000000013fc0f: std; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x00000000000bbb6c: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000052acf: std; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000190925: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000019080e: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000018fef8: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcbe: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000001903e6: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001893cb: std; vzeroupper; ret; 
0x000000000012b21f: std; xchg edi, eax; lock dec dword ptr [rax - 0x7d]; ret; 
0x0000000000184a11: std; xlatb; ret; 
0x0000000000188758: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000001887b4: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000018493e: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000184cac: std; xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000000f0b01: sti; add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x00000000000d13be: sti; add al, byte ptr [rcx]; ret; 
0x00000000000e872c: sti; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000017cb71: sti; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000c974d: sti; add ecx, dword ptr [rdi]; xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000c9471: sti; add ecx, dword ptr [rdi]; xchg dl, bh; add eax, 0x89490000; ret; 
0x000000000013f7d4: sti; cmc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000d33a8: sti; dec dword ptr [rax + 0x39]; ret; 
0x000000000015ca87: sti; dec dword ptr [rax - 0x77]; ret; 
0x00000000000e2e71: sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000e2d4b: sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x28; ret; 
0x00000000000e2c91: sti; dec dword ptr [rbx + 0x48102444]; add esp, 0x28; ret; 
0x00000000000e2fcd: sti; inc dword ptr [rcx + rcx*4 - 0x18]; pop rbp; pop r12; pop r13; ret; 
0x00000000001684b8: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001684b2: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001199dc: sti; mov rdi, qword ptr [rdi]; call 0x22330; mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000009f861: sti; not byte ptr [rax + rax]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x0000000000033905: sti; or al, 0x74; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000ee2da: sti; or dh, byte ptr [rbp + rdi + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000004283c: sti; push rax; ret; 
0x00000000000a09b1: sti; push rsi; or al, 0; lea rdx, [rip + 0xcac84]; cmovne rax, rdx; ret; 
0x00000000000911a1: sti; ret; 
0x00000000000e9ec2: sti; sbb cl, al; clc; sbb byte ptr [rcx], bh; ret; 
0x00000000001901ba: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001985e2: stosb byte ptr [rdi], al; add eax, 0x2e66fff8; nop dword ptr [rax + rax]; ret; 
0x00000000000bbf68: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000121394: stosb byte ptr [rdi], al; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001213cc: stosb byte ptr [rdi], al; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000141328: stosb byte ptr [rdi], al; or al, byte ptr [rax]; mov eax, dword ptr [rax + 0x18]; test eax, eax; jne 0x141338; ret; 
0x0000000000094a52: stosb byte ptr [rdi], al; popfq; adc eax, 0x5b050f00; ret; 
0x0000000000042752: stosb byte ptr [rdi], al; xor byte ptr [rip - 0x3b7cb800], dl; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000b1f14: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000000cf844: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000013c7f4: stosd dword ptr [rdi], eax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x000000000012127c: stosd dword ptr [rdi], eax; or al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000141418: stosd dword ptr [rdi], eax; or al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000000989d6: stosd dword ptr [rdi], eax; pop rbp; ret; 
0x0000000000043af0: stosd dword ptr [rdi], eax; ret; 
0x00000000000b1e75: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000412b4: stosd dword ptr [rdi], eax; sbb al, byte ptr [rax]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000c1831: stosd dword ptr [rdi], eax; stc; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000a04e1: stosd dword ptr [rdi], eax; test dword ptr [rax + rax], ecx; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x000000000018c9fa: stosd dword ptr [rdi], eax; vzeroupper; ret; 
0x000000000013c7f3: stosq qword ptr [rdi], rax; mov byte ptr [r8 + 1], dl; mov rax, r8; mov byte ptr [r8 + 2], 0; ret; 
0x00000000000989d5: stosq qword ptr [rdi], rax; pop rbp; ret; 
0x0000000000043aef: stosq qword ptr [rdi], rax; ret; 
0x00000000000bb3cd: str word ptr [r11 + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x00000000000a066d: str word ptr [rax - 0x73]; adc eax, 0xeff9a; cmove rax, rdx; ret; 
0x00000000000a050d: str word ptr [rax - 0x73]; adc eax, 0xf011a; cmove rax, rdx; ret; 
0x00000000000a05cd: str word ptr [rax - 0x73]; adc eax, 0xf05ea; cmove rax, rdx; ret; 
0x00000000000bb3ce: str word ptr [rbx + 0x63]; or al, 0x83; lea rcx, [r11 + rcx]; notrack jmp rcx; nop dword ptr [rax + rax]; ret; 
0x000000000009b1b4: sub ah, 0x11; add al, ch; ret; 
0x0000000000123d32: sub ah, bh; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x0000000000198e02: sub ah, byte ptr [rbx + 5]; add al, ch; and eax, 0x5bffe895; mov qword ptr [rip + 0x56319], 0; ret; 
0x000000000012074a: sub al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x1207c0; ret; 
0x00000000001208a4: sub al, 0; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120928; ret; 
0x000000000009c1e9: sub al, 0x15; add byte ptr [rbx + 0x22], dh; lea rax, [rax - 8]; ret; 
0x000000000009c1e0: sub al, 0x15; add byte ptr [rdx + 0x2b], dh; cmp rcx, qword ptr [rip + 0x152ca4]; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x0000000000046ad8: sub al, 0x24; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000a2c0a: sub al, 0x24; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000f248c: sub al, 0x31; rol byte ptr [rcx + rcx*4 + 0x45], 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f23c5: sub al, 0x31; ror byte ptr [rcx + 0x5d5b307d], 0x41; pop rsp; ret; 
0x00000000000cf022: sub al, 0x3b; sub al, 0x75; pop rax; ret; 
0x0000000000149895: sub al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000018be66: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000000cf025: sub al, 0x75; pop rax; ret; 
0x00000000000de193: sub al, 0x83; imul eax, dword ptr [rcx + rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000014e148: sub al, 0xa; add byte ptr [rax + 0x63], cl; ret; 
0x000000000018e363: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000013d890: sub al, 0xb; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ec3d3: sub al, 0xc6; or byte ptr [r9], r11b; mov eax, 1; ret; 
0x0000000000057bcb: sub al, 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000b19b0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000120105: sub al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120114; ret; 
0x00000000000cef85: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi + 0x10]; cmp eax, dword ptr [rsi + 0x10]; jne 0xcf080; ret; 
0x00000000000cefe5: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi + 0x20]; cmp eax, dword ptr [rsi + 0x20]; jne 0xcf080; ret; 
0x00000000000cf035: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi + 0x30]; cmp eax, dword ptr [rsi + 0x30]; jne 0xcf080; ret; 
0x00000000000cef25: sub al, byte ptr [rax + 0x15740fe2]; mov eax, dword ptr [rdi]; cmp eax, dword ptr [rsi]; jne 0xcf080; ret; 
0x000000000004125a: sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, r11; ret; 
0x00000000001203c1: sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120420; ret; 
0x0000000000120e0f: sub al, byte ptr [rcx + rcx*4 - 0x31]; mov dword ptr [rsp + 4], eax; call 0x94640; mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x0000000000113467: sub al, byte ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 0x18], eax; call 0x94640; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000012dbbc: sub al, byte ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x62a5a; cmove rax, rdx; ret; 
0x0000000000185265: sub al, ch; std; xlatb; ret; 
0x000000000010db7d: sub bh, byte ptr [rax + 0x103]; syscall; cmp rax, -0x1000; ja 0x10db90; ret; 
0x00000000000dd11d: sub bh, byte ptr [rax + 0xe3]; syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000cf016: sub byte ptr [r11], r15b; sub byte ptr [rbp + 0x63], r14b; ret; 
0x00000000000896ce: sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000073d32: sub byte ptr [r15 + rcx - 0x4a], r8b; ret; 
0x0000000000043b3e: sub byte ptr [r15], r9b; adc dword ptr [rdi + 0x38], eax; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x0000000000157b25: sub byte ptr [r8 + r15*4], r8b; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000157702: sub byte ptr [r8 - 0x77], r9b; ja 0x157720; mov eax, r8d; ret; 
0x00000000000bda12: sub byte ptr [r8 - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000157737: sub byte ptr [r9 + r8 - 0x3a], r9b; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000157855: sub byte ptr [r9], r15b; sal byte ptr [rbx + 0xd], 1; xor r8d, r8d; mov eax, r8d; ret; 
0x000000000004a9a2: sub byte ptr [rax + 0x39], cl; ret; 
0x00000000000ecac8: sub byte ptr [rax + 0x63], cl; ret; 
0x00000000000a1cbc: sub byte ptr [rax + 0xe], 0; lea rax, [rip + 0xf9e9]; cmove rax, rdx; ret; 
0x00000000000ec845: sub byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000157b36: sub byte ptr [rax + 1], bh; ret; 
0x0000000000157b26: sub byte ptr [rax + rdi*4], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000008df2e: sub byte ptr [rax - 0x3f76bbfe], cl; ret; 
0x000000000008df2d: sub byte ptr [rax - 0x3f76bbfe], r9b; ret; 
0x000000000015160d: sub byte ptr [rax - 0x75], dl; and al, 0x28; push rax; call 0x151330; add rsp, 0x28; ret; 
0x0000000000157703: sub byte ptr [rax - 0x77], cl; ja 0x157720; mov eax, r8d; ret; 
0x00000000000471e5: sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000086403: sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x38], al; ret; 
0x000000000008af95: sub byte ptr [rax - 0x78], al; cmp byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bda13: sub byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000010299d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1029f6; add rsp, 0x38; ret; 
0x000000000010d397: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d54c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d558; add rsp, 0x10; pop rbp; ret; 
0x000000000010d65c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010d6ae: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10d6b9; add rsp, 0x18; ret; 
0x000000000010e0ec: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6e2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e785; add rsp, 0x68; ret; 
0x000000000010e823: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10e8df; add rsp, 0x30; pop rbx; ret; 
0x000000000010e953: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10ea0f; add rsp, 0x30; pop rbx; ret; 
0x000000000010f521: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10f570; add rsp, 0x130; pop rbp; ret; 
0x000000000010fdaf: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x10fdbd; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000112c71: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x112cf6; add rsp, 0x40; pop r12; ret; 
0x00000000001135e7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113676: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1136c3; add rsp, 0x18; ret; 
0x000000000011372e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137cc: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113ca9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113cd4; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000113d19: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000114bab: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c4b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114d00: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dd0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000114eca: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x114ed5; add rsp, 0x28; ret; 
0x00000000001152ad: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115349; add rsp, 0x60; pop rbp; ret; 
0x0000000000115a10: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115a89: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115a94; add rsp, 0x28; ret; 
0x0000000000115b60: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d84: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e53: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001184b4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1184c2; add rsp, 0xd8; ret; 
0x000000000011858d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11859b; add rsp, 0xd8; ret; 
0x00000000001198d5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011bf49: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c009: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c450: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6bd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x000000000011f2d5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cda: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x120ce5; add rsp, 0x18; ret; 
0x0000000000121099: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1210af; add rsp, 0xa0; pop rbx; ret; 
0x000000000012131f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12136b; add rsp, 0x58; ret; 
0x0000000000129d6b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012ba94: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12baa2; add rsp, 0xd8; ret; 
0x000000000012d2f0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12d3cd; leave; ret; 
0x000000000012e075: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e16b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e285: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012e34d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f18b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x000000000012f36d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f7b4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f814: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f825; add rsp, 0x28; ret; 
0x000000000012f8dd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9bd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa9d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12faab; add rsp, 0xd8; ret; 
0x00000000001367eb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136819; add rsp, 0x38; ret; 
0x0000000000136888: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013c90e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013e345: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e365; add rsp, 0x20; pop rbx; ret; 
0x000000000013e39a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3ed: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13e3f8; add rsp, 0x28; ret; 
0x000000000013ec7c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x13ec87; add rsp, 0x18; ret; 
0x0000000000144bd9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x144be6; add rsp, 0x10; pop r12; ret; 
0x0000000000146547: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x146553; add rsp, 0x40; pop rbp; ret; 
0x000000000014931d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x149363; add rsp, 0x10; pop rbx; ret; 
0x0000000000149890: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1498c2; add rsp, 0x10; pop rbx; ret; 
0x000000000014992e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x149965; add rsp, 0x10; pop rbx; ret; 
0x000000000014a541: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x14a557; add rsp, 0x40; pop rbx; ret; 
0x000000000015193f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151961; add rsp, 0x10; pop rbx; ret; 
0x0000000000151c91: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151d0a; add rsp, 0x10; pop r12; ret; 
0x0000000000151f08: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x151f7a; add rsp, 0x30; pop rbx; ret; 
0x0000000000152048: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1520ba; add rsp, 0x30; pop rbx; ret; 
0x0000000000153c01: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c0c; add rsp, 0x78; ret; 
0x0000000000153c77: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d57: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e1c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e87: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f0a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000015443f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155eb2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000155f1d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155f63; add rsp, 0x10; pop rbx; ret; 
0x0000000000155fad: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x155ff2; add rsp, 0x10; pop rbx; ret; 
0x000000000015607d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1560c5; add rsp, 0x10; pop rbp; ret; 
0x00000000001564cd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x156514; add rsp, 0x10; pop rbx; ret; 
0x000000000015655d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1565a3; add rsp, 0x10; pop rbx; ret; 
0x000000000015672d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x156779; add rsp, 0x10; pop rbx; ret; 
0x00000000001567bd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x156803; add rsp, 0x10; pop rbx; ret; 
0x00000000001574ad: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1574f5; add rsp, 0x10; pop rbx; ret; 
0x000000000015753d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157585; add rsp, 0x10; pop rbx; ret; 
0x00000000001575cd: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157615; add rsp, 0x10; pop rbx; ret; 
0x000000000015765d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1576a5; add rsp, 0x10; pop rbx; ret; 
0x0000000000157d35: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157d44; add rsp, 0x90; pop rbx; ret; 
0x0000000000157da9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157db7; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e0a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157e18; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000157e76: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157e82; add rsp, 0x10; pop rbx; ret; 
0x0000000000157ee9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x157ef5; add rsp, 0x10; pop rbx; ret; 
0x000000000015ccde: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15cd14; add rsp, 0x18; ret; 
0x000000000015cfd5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15d00c; add rsp, 0x10; pop rbp; ret; 
0x000000000015d065: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15d09c; add rsp, 0x10; pop rbp; ret; 
0x000000000015fc30: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd27: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fed0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff99: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x15ffdc; add rsp, 0x38; ret; 
0x000000000016102c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x161037; add rsp, 0x28; ret; 
0x00000000001635b7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x1635c3; add rsp, 0x10; pop rbx; ret; 
0x000000000016363d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x163649; add rsp, 0x10; pop rbx; ret; 
0x0000000000042b91: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000042eeb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043018: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43044; mov eax, r8d; add rsp, 0x118; ret; 
0x000000000004322c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43274; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000043324: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435c0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043643: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43658; add rsp, 0x118; ret; 
0x000000000004374e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4375c; add rsp, 0x98; ret; 
0x0000000000043992: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x439b2; add rsp, 0x40; pop rbx; ret; 
0x0000000000043cee: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047db9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e06: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e11; add rsp, 0x18; ret; 
0x0000000000047e58: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f45: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x47f50; add rsp, 0x18; ret; 
0x00000000000521f2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52285; add rsp, 0x10; pop rbx; ret; 
0x0000000000052c01: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005414b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x54159; add rsp, 0xd8; ret; 
0x00000000000578be: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x57945; leave; ret; 
0x000000000005b5af: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b5d0; add rsp, 0x450; pop rbp; ret; 
0x000000000005b871: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c74: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d49: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061e00: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061ed2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000061f94: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062054: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62062; add rsp, 0xd8; ret; 
0x0000000000062142: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062219: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62227; add rsp, 0xd8; ret; 
0x000000000006283f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6284e; add rsp, 0x1010; pop rbp; ret; 
0x0000000000062de3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x62df7; add rsp, 0x18; ret; 
0x000000000006316c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063247: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x864d2; add rsp, 0xd8; ret; 
0x0000000000086580: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086679: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086749: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86757; add rsp, 0xd8; ret; 
0x0000000000086802: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000008dbd4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8dbeb; add rsp, 0x48; ret; 
0x00000000000991fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x99242; add rsp, 0x40; pop rbp; ret; 
0x000000000009d5fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000ca0af: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xca0d4; add rsp, 0x20; pop rbx; ret; 
0x00000000000cab8c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac67: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000d01ef: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000d0269: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd0275; add rsp, 0x40; pop rbp; ret; 
0x00000000000d1035: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf88: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdcf93; add rsp, 0x18; ret; 
0x00000000000ddc51: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xddc60; add rsp, 0xe0; pop rbx; ret; 
0x00000000000ddce5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xddcf4; add rsp, 0xe0; pop rbx; ret; 
0x00000000000df40b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e3662: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe36a9; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e3832: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe3879; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000e418b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e422b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45ab: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000004785e: sub byte ptr [rax], al; add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 4]; jne 0x478ba; add rsp, 0x18; ret; 
0x000000000014e0b1: sub byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000001131c8: sub byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1131d7; ret; 
0x0000000000127cf9: sub byte ptr [rax], al; mov eax, 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000147244: sub byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x00000000000dd794: sub byte ptr [rbp + 0x5b2b74c0], al; pop rbp; pop r12; ret; 
0x00000000000cf01a: sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000cf019: sub byte ptr [rbp + 0x63], r14b; ret; 
0x00000000000896cf: sub byte ptr [rbp - 0x7b], al; sal byte ptr [rbx + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x00000000000860bc: sub byte ptr [rbx + 0x11], dh; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000860bb: sub byte ptr [rbx + 0x11], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086263: sub byte ptr [rbx + 0x12], dh; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000086262: sub byte ptr [rbx + 0x12], sil; lea rsi, [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001526e7: sub byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x00000000000426d5: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000639d1: sub byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000005b05f: sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000015fa28: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x000000000015fa27: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x00000000000cf017: sub byte ptr [rbx], bh; sub byte ptr [rbp + 0x63], r14b; ret; 
0x0000000000157738: sub byte ptr [rcx + rax - 0x3a], cl; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x0000000000152eab: sub byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x000000000014b4c0: sub byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008aba0: sub byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x000000000006272d: sub byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; ret; 
0x00000000000d17d4: sub byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008187a: sub byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000000e2e69: sub byte ptr [rcx - 0x17f3dbbc], cl; int 0x17; sti; dec dword ptr [rbx + 0x480c2444]; add esp, 0x18; ret; 
0x00000000000295eb: sub byte ptr [rcx - 0x77], cl; ret; 
0x0000000000114807: sub byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x114878; ret; 
0x0000000000157856: sub byte ptr [rcx], bh; sal byte ptr [rbx + 0xd], 1; xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000073d33: sub byte ptr [rdi + rcx - 0x4a], al; ret; 
0x00000000000d4237: sub byte ptr [rdi + rcx*4 + 2], bl; jbe 0xd4240; ret; 
0x000000000011553a: sub byte ptr [rdi - 0x11e2153], bh; mov eax, 0xa9; syscall; cmp rax, -0x1000; ja 0x115550; ret; 
0x00000000001494c4: sub byte ptr [rdi - 0x17], dh; mov qword ptr [rdx + 0x20], rsi; ret; 
0x000000000015790c: sub byte ptr [rdi], cl; adc dword ptr [rdi + 0x18], eax; ret; 
0x0000000000043b3f: sub byte ptr [rdi], cl; adc dword ptr [rdi + 0x38], eax; movups xmmword ptr [rdi + 0x48], xmm0; movups xmmword ptr [rdi + 0x58], xmm0; movups xmmword ptr [rdi + 0x68], xmm0; ret; 
0x00000000000ea41f: sub byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000099614: sub byte ptr [rip - 0x3fcebb00], dl; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000120914: sub byte ptr [rip - 0x74b70009], bh; and al, 8; add rsp, 0x30; pop rbp; ret; 
0x00000000000ea419: sub byte ptr [rsp + rdx + 0x3c], dh; sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000042106: sub cl, al; ret; 
0x00000000000f1d6f: sub cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000074581: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000009471c: sub dh, byte ptr [rbp - 0x1f]; lea rax, [rip + 0x15cd7a]; pop rbx; mov dword ptr [rip + 0x15cd5f], 1; ret; 
0x0000000000099431: sub dl, byte ptr [rip - 0x3fcebb00]; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000046ad6: sub dword ptr [r12], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000e4f3e: sub dword ptr [rax + 0x7fffffff], edi; cmp r8, 0x58465342; jne 0xe4f50; ret; 
0x00000000000ea41d: sub dword ptr [rax + rbp + 0xf], esi; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000007d739: sub dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000013b62a: sub dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x00000000001209c5: sub dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1209d4; ret; 
0x00000000000d1dc3: sub dword ptr [rax], eax; add rsp, 0x10; pop rbp; ret; 
0x00000000000d1fe9: sub dword ptr [rax], eax; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000098653: sub dword ptr [rbp + 0x15], eax; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000121143: sub dword ptr [rbp - 0x2708fff4], ebp; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000053cac: sub dword ptr [rbp - 0x3900000b], 2; and byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000148516: sub dword ptr [rbx + 0x147401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000198c96: sub dword ptr [rbx + 0x55b622d], eax; add byte ptr [rcx], al; pop rbx; ret; 
0x00000000000de194: sub dword ptr [rbx + 4], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000de23b: sub dword ptr [rbx + 4], 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001787f3: sub dword ptr [rbx], eax; add byte ptr [rax], al; ret; 
0x00000000001573e6: sub dword ptr [rcx + rcx*4 - 0x40], eax; ret; 
0x0000000000081874: sub dword ptr [rdi], 1; add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000082400: sub dword ptr [rdi], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000008ac40: sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000085680: sub dword ptr [rdi], 1; mov eax, r8d; pop rbx; pop rbp; pop r12; ret; 
0x000000000008254f: sub dword ptr [rdi], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000006308a: sub dword ptr [rdi], 1; ret; 
0x00000000000bbd45: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000018f9b9: sub dword ptr [rdx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000e1d23: sub dword ptr [rip + 0x10d7b6], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000e1c30: sub dword ptr [rip + 0x10d8a9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1b58: sub dword ptr [rip + 0x10d981], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfdf3: sub dword ptr [rip + 0x10f576], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000dfd00: sub dword ptr [rip + 0x10f669], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfc28: sub dword ptr [rip + 0x10f741], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000df4d0: sub dword ptr [rip + 0x10fe09], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000d290c: sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x0000000000098d0c: sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000099f4f: sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x00000000000949f7: sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x00000000000938fc: sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000090ff0: sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x0000000000083f3c: sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000061052: sub dword ptr [rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x0000000000054cd0: sub dword ptr [rip + 0x199a59], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000047797: sub dword ptr [rip + 0x1a6d42], 1; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000475f9: sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x00000000000466fc: sub dword ptr [rip + 0x1a7585], 1; xor eax, eax; pop rbx; ret; 
0x0000000000198c97: sub dword ptr [rip + 0x55b62], 1; pop rbx; ret; 
0x0000000000198fa8: sub dword ptr [rip + 0x57569], 1; pop rbp; ret; 
0x000000000015d1db: sub dword ptr [rip + 0x94476], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015d0fb: sub dword ptr [rip + 0x94556], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cf31: sub dword ptr [rip + 0x94720], 1; add rsp, 8; ret; 
0x000000000015ce97: sub dword ptr [rip + 0x947ba], 1; mov rax, r8; pop rbp; ret; 
0x000000000015cdeb: sub dword ptr [rip + 0x94866], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015cd51: sub dword ptr [rip + 0x94900], 1; add rsp, 8; ret; 
0x000000000014ca69: sub dword ptr [rip + 0xa42b8], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x000000000014c970: sub dword ptr [rip + 0xa43b1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014c88e: sub dword ptr [rip + 0xa4493], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000014c420: sub dword ptr [rip + 0xa48a1], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000142618: sub dword ptr [rip + 0xae3f9], 1; pop rbp; ret; 
0x000000000013d88d: sub dword ptr [rip + 0xb2c84], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000138950: sub dword ptr [rip + 0xb7ae9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000138878: sub dword ptr [rip + 0xb7bc1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013815f: sub dword ptr [rip + 0xb82d2], 1; add rsp, 0x20; mov eax, r8d; pop rbp; ret; 
0x0000000000137e37: sub dword ptr [rip + 0xb85fa], 1; add rsp, 8; ret; 
0x0000000000137c19: sub dword ptr [rip + 0xb8818], 1; mov eax, r8d; pop rbp; ret; 
0x00000000001348f9: sub dword ptr [rip + 0xbb9c8], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000134800: sub dword ptr [rip + 0xbbac1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013471e: sub dword ptr [rip + 0xbbba3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000134650: sub dword ptr [rip + 0xbbc69], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001333a0: sub dword ptr [rip + 0xbcdb9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001332be: sub dword ptr [rip + 0xbce9b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000001331f0: sub dword ptr [rip + 0xbcf61], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000132788: sub dword ptr [rip + 0xbd921], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000132673: sub dword ptr [rip + 0xbda36], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013258e: sub dword ptr [rip + 0xbdb1b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000131a23: sub dword ptr [rip + 0xbe5be], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013193e: sub dword ptr [rip + 0xbe6a3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013185d: sub dword ptr [rip + 0xbe77c], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000126733: sub dword ptr [rip + 0xc96f6], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000126640: sub dword ptr [rip + 0xc97e9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000126568: sub dword ptr [rip + 0xc98c1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000125bf0: sub dword ptr [rip + 0xca169], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000125b15: sub dword ptr [rip + 0xca1f0], 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000124b90: sub dword ptr [rip + 0xcb141], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124ab8: sub dword ptr [rip + 0xcb219], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000123f20: sub dword ptr [rip + 0xcbc81], 1; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000011887b: sub dword ptr [rip + 0xd6fce], 1; add rsp, 8; ret; 
0x0000000000117e1c: sub dword ptr [rip + 0xd7a2d], 1; ret; 
0x000000000018eb46: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x0000000000160d4b: sub dword ptr [rsi - 0x7ab70010], 0x5b0c75db; ret; 
0x000000000012dc7c: sub dword ptr [rsi], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x6297a; cmove rax, rdx; ret; 
0x000000000004260f: sub dword ptr [rsp - 0x18], eax; mov rax, qword ptr [rsp - 0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret; 
0x0000000000046ad7: sub dword ptr [rsp], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000000e1d22: sub dword ptr gs:[rip + 0x10d7b6], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x00000000000dfdf2: sub dword ptr gs:[rip + 0x10f576], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x0000000000126732: sub dword ptr gs:[rip + 0xc96f6], 1; mov dword ptr fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret; 
0x000000000011887a: sub dword ptr gs:[rip + 0xd6fce], 1; add rsp, 8; ret; 
0x0000000000061051: sub dword ptr ss:[rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x0000000000184ff7: sub eax, -1; jne 0x185000; vzeroupper; ret; 
0x000000000018bfa7: sub eax, -1; jne 0x18bfb0; vzeroupper; ret; 
0x0000000000117e1e: sub eax, 0x1000d7a; ret; 
0x00000000000de23a: sub eax, 0x1046b83; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b807a: sub eax, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98ca: sub eax, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000bb32a: sub eax, 0x10; jb 0xbabc9; movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000001785d2: sub eax, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x000000000017c963: sub eax, 0x10; lea rcx, [rdx + 0x10]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b78a9: sub eax, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fcd: sub eax, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x000000000009c272: sub eax, 0x10; ret; 
0x00000000000df4d1: sub eax, 0x10fe09; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000000b78cc: sub eax, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8ff0: sub eax, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x0000000000094e6c: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000b78f1: sub eax, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9015: sub eax, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b790f: sub eax, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9043: sub eax, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b792f: sub eax, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9073: sub eax, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7952: sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a6: sub eax, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7971: sub eax, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d5: sub eax, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7991: sub eax, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9105: sub eax, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b1: sub eax, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9135: sub eax, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x0000000000061053: sub eax, 0x18d6f7; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbx; ret; 
0x0000000000054cd1: sub eax, 0x199a59; add dword ptr [rbx + 0x44], ebx; mov eax, eax; pop rbp; pop r12; ret; 
0x00000000000b79d4: sub eax, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b9168: sub eax, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a09: sub eax, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b919d: sub eax, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a37: sub eax, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91cb: sub eax, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a67: sub eax, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fb: sub eax, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a93: sub eax, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b9227: sub eax, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac3: sub eax, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b9257: sub eax, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af3: sub eax, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b9287: sub eax, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x0000000000189d2d: sub eax, 0x20; jb 0x189b15; vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018aa2d: sub eax, 0x20; jb 0x18a645; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b75d: sub eax, 0x20; jb 0x18b375; vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b7b23: sub eax, 0x20; lea rdi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92b7: sub eax, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x000000000014f157: sub eax, 0x40c48348; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ec402: sub eax, 0x47c6e875; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x000000000010e2d6: sub eax, 0x48c78944; mov dword ptr [rsp + 8], eax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010c3d6: sub eax, 0x48c78944; mov dword ptr [rsp], eax; call 0x94640; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000843ff: sub eax, 0x4cfff9df; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000000085f32: sub eax, 0x5b012f83; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000004229d: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000113dbc: sub eax, 0x89c78944; and al, 0xc; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000a1c7d: sub eax, 0x8d48000e; add eax, 0xa569; cmove rax, rdx; ret; 
0x000000000015ce98: sub eax, 0x947ba; add dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbp; ret; 
0x000000000014c421: sub eax, 0xa48a1; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001788d0: sub eax, 0xa; lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x000000000017ccc1: sub eax, 0xa; lea rcx, [rdx + 0xa]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b77ef: sub eax, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed3: sub eax, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x0000000000137c1a: sub eax, 0xb8818; add dword ptr [rcx + rcx*4 - 0x40], eax; pop rbp; ret; 
0x0000000000115caf: sub eax, 0xb8fff75d; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001788f0: sub eax, 0xb; lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x00000000000b780d: sub eax, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f01: sub eax, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x0000000000134651: sub eax, 0xbbc69; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x00000000001331f1: sub eax, 0xbcf61; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x000000000013185e: sub eax, 0xbe77c; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000184c8f: sub eax, 0xc5000001; std; xlatb; ret; 
0x0000000000178910: sub eax, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x00000000000b782d: sub eax, 0xc; lea rdi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f21: sub eax, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x0000000000125bf1: sub eax, 0xca169; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000125b16: sub eax, 0xca1f0; add dword ptr [rcx + rcx*4 - 0x40], eax; add rsp, 8; ret; 
0x0000000000123f21: sub eax, 0xcbc81; add dword ptr [rcx + rax*2 - 0x77], esp; sbb dword ptr [rcx + rcx*4 - 0x40], ecx; pop rbx; ret; 
0x0000000000178932: sub eax, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017cd53: sub eax, 0xd; lea rcx, [rdx + 0xd]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b784f: sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f43: sub eax, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x0000000000178952: sub eax, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017cd83: sub eax, 0xe; lea rcx, [rdx + 0xe]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b786f: sub eax, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f73: sub eax, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x0000000000178972: sub eax, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x000000000017cdb3: sub eax, 0xf; lea rcx, [rdx + 0xf]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b788f: sub eax, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa3: sub eax, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000001850ef: sub eax, 0xffff; jne 0x185000; ret; 
0x000000000018c02d: sub eax, 0xffff; jne 0x18bfb0; ret; 
0x000000000015013b: sub eax, 1; bswap eax; mov dword ptr [r8 + 0x48], eax; mov eax, 1; ret; 
0x000000000014d35b: sub eax, 1; bswap eax; mov dword ptr [r8 + 0xa8], eax; mov eax, 1; ret; 
0x0000000000150a5a: sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001787c8: sub eax, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x000000000018a4f9: sub eax, 1; lea rdi, [rdi + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b211: sub eax, 1; lea rdi, [rdi + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76c3: sub eax, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8da6: sub eax, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a710: sub eax, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b444: sub eax, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b660; vzeroupper; ret; 
0x000000000002fda4: sub eax, 1; mov dword ptr [rbx + 8], eax; cmp eax, -3; je 0x2fdc8; pop rbx; ret; 
0x000000000002fdbc: sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000055bef: sub eax, 1; ret; 
0x0000000000094c94: sub eax, 2; add rsp, 8; ret; 
0x00000000001787ea: sub eax, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000018a6a7: sub eax, 2; lea rdi, [rdi + 2]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3db: sub eax, 2; lea rdi, [rdi + 2]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76e7: sub eax, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dcb: sub eax, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x0000000000178810: sub eax, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x000000000017cbb1: sub eax, 3; lea rcx, [rdx + 3]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a6cb: sub eax, 3; lea rdi, [rdi + 3]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3ff: sub eax, 3; lea rdi, [rdi + 3]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b770a: sub eax, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8dee: sub eax, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x000000000005b32f: sub eax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000178828: sub eax, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017cbd9: sub eax, 4; lea rcx, [rdx + 4]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a6e5: sub eax, 4; lea rdi, [rdi + 4]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b419: sub eax, 4; lea rdi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b7725: sub eax, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e09: sub eax, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000017884e: sub eax, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017cbff: sub eax, 5; lea rcx, [rdx + 5]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7748: sub eax, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e2c: sub eax, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x0000000000178870: sub eax, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017cc31: sub eax, 6; lea rcx, [rdx + 6]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b776d: sub eax, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e51: sub eax, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x000000000017888e: sub eax, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x000000000017cc5f: sub eax, 7; lea rcx, [rdx + 7]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b778b: sub eax, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e6f: sub eax, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x0000000000055c3c: sub eax, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x000000000017856a: sub eax, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x00000000000b77a7: sub eax, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8b: sub eax, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000001788b0: sub eax, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x00000000000b77ca: sub eax, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8eae: sub eax, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000bc79e: sub eax, dword ptr [r8 + r9*4]; je 0xbc780; ret; 
0x00000000000bc79f: sub eax, dword ptr [rax + rcx*4]; je 0xbc780; ret; 
0x00000000001202f1: sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120350; ret; 
0x0000000000034cb3: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012dc51: sub eax, dword ptr [rbx + rax + 0x158d4800]; mov ah, 0xd9; add eax, dword ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000074531: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x46; or al, 0x83; ret; 
0x00000000000bc740: sub eax, dword ptr [rcx + r8*4]; je 0xbc728; ret; 
0x00000000000bc741: sub eax, dword ptr [rcx + rax*4]; je 0xbc728; ret; 
0x00000000000e2c86: sub eax, dword ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 0x10], eax; call 0x94640; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000120336: sub eax, dword ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000112bc6: sub eax, dword ptr [rcx + rcx*4 - 0x39]; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000120db4: sub eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120e28; ret; 
0x0000000000093ea2: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000008ce2d: sub eax, dword ptr [rdi + 0x20]; ret; 
0x0000000000127879: sub eax, dword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127890; mov eax, 1; ret; 
0x000000000008ccfd: sub eax, dword ptr [rdi + 0x38]; ret; 
0x00000000000885e9: sub eax, dword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce1a: sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008ccea: sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000093567: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000012dafc: sub eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x62b1a; cmove rax, rdx; ret; 
0x000000000015185a: sub eax, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000057de3: sub eax, eax; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000015f45a: sub eax, ecx; add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000185043: sub eax, ecx; je 0x185050; sbb eax, eax; or eax, 1; ret; 
0x0000000000057c15: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000057d9d: sub eax, ecx; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000000aa38c: sub eax, ecx; ret; 
0x0000000000057b70: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000129702: sub eax, ecx; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x0000000000092a29: sub eax, ecx; sub eax, 1; ret; 
0x000000000018412f: sub eax, ecx; vzeroupper; ret; 
0x00000000000989c8: sub eax, edi; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x00000000000b1d59: sub eax, edi; ret; 
0x00000000000cf84e: sub eax, edi; shr rax, 2; ret; 
0x000000000008b6fc: sub eax, edx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000009e922: sub eax, edx; mov rdx, qword ptr [rdx + 8]; test rdx, rdx; jne 0x9e920; ret; 
0x000000000009c266: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x000000000008f561: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000149548: sub eax, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x00000000000472f9: sub eax, edx; ret; 
0x0000000000041b6a: sub eax, edx; sar eax, 0x10; ret; 
0x000000000008aa13: sub eax, edx; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000042283: sub eax, edx; shr eax, 0x1f; ret; 
0x00000000001296cb: sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000041ec9: sub eax, edx; shr rax, 0x3f; ret; 
0x000000000018d2e0: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x000000000018a70d: sub eax, edx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b441: sub eax, edx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b660; vzeroupper; ret; 
0x0000000000183e32: sub eax, edx; vzeroupper; ret; 
0x0000000000057de2: sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000057d9c: sub eax, r9d; movhps xmm0, qword ptr [rsp - 0x18]; movups xmmword ptr [rdi], xmm0; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000129701: sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x00000000000dea4b: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000060ef7: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000000dd798: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000013c616: sub ebx, dword ptr [rbx + 0x5d]; ret; 
0x0000000000166055: sub ebx, edx; jbe 0x166064; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fe95: sub ebx, edx; jbe 0x17fea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abe95: sub ebx, edx; jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000043ae8: sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000005651d: sub ecx, 1; div r8; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x00000000000479c6: sub ecx, 1; jns 0x47989; xor eax, eax; ret; 
0x000000000015d450: sub ecx, 5; cmp cx, 3; jbe 0x15d460; ret; 
0x000000000015fa22: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x000000000009c1e4: sub ecx, dword ptr [rax + 0x3b]; or eax, 0x152ca4; jae 0x9c210; lea rax, [rax - 8]; ret; 
0x000000000010c4f8: sub ecx, dword ptr [rax - 0x77]; or byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000056b52: sub ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b7751: sub ecx, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000018d634: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000188c84: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x0000000000087df9: sub ecx, eax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x00000000001087bf: sub ecx, ebp; ret; 
0x0000000000129691: sub ecx, ecx; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x000000000010c8a4: sub ecx, edi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae6: sub ecx, edi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000041b1f: sub ecx, edx; not eax; and eax, ecx; ret; 
0x000000000014949f: sub ecx, esi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000129654: sub ecx, esi; shr eax, 0x1f; cmp dil, al; mov eax, edx; cmove eax, ecx; ret; 
0x0000000000129690: sub ecx, r9d; shr eax, 0x1f; cmp sil, al; mov eax, edx; cmove eax, ecx; ret; 
0x00000000000cf34c: sub edi, 0x10; add rax, rdi; ret; 
0x0000000000122e70: sub edi, 0x30; xor r8d, r8d; cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x0000000000091f31: sub edi, dword ptr [rdi + rdi*8 + 0x6693ebff]; nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x00000000000ac6d4: sub edx, 0x10; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac6b4: sub edx, 0x20; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac694: sub edx, 0x30; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac684: sub edx, 0x40; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184d1b: sub edx, 0x80; add rdx, rax; jl 0x184e10; add rax, rdi; vzeroupper; ret; 
0x00000000001463e1: sub edx, 1; jne 0x146368; ret; 
0x0000000000055629: sub edx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000055871: sub edx, 1; jne 0x55858; mov eax, 1; ret; 
0x00000000000a13e6: sub edx, 2; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x000000000009c1fe: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000093598: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000093589: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000087ea2: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000087eb4: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000008f55c: sub edx, dword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000134df1: sub edx, eax; bnd call ptr [rax + 0x4c]; mov eax, esp; pop rdx; pop r12; ret; 
0x00000000000abf3d: sub edx, eax; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a4: sub edx, eax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b4: sub edx, eax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c4: sub edx, eax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d4: sub edx, eax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11d: sub edx, eax; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce384: sub edx, eax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce394: sub edx, eax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a4: sub edx, eax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b4: sub edx, eax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000001296ff: sub edx, eax; sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x00000000001143d8: sub edx, eax; test eax, eax; cmovns eax, edx; ret; 
0x0000000000183aa8: sub edx, esi; cmp edx, ecx; jle 0x183ac4; movsxd rax, ecx; ret; 
0x00000000001296fe: sub edx, r8d; sub eax, r9d; shr ecx, 0x1f; cmp sil, cl; cmovne eax, edx; ret; 
0x000000000013c391: sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x00000000000beeb1: sub esi, dword ptr [rbp - 7]; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000119296: sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012e9c8: sub esi, dword ptr [rcx]; ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x00000000001296c9: sub esi, eax; sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x00000000001296c8: sub esi, r8d; sub eax, edx; shr ecx, 0x1f; cmp dil, cl; cmovne eax, esi; ret; 
0x0000000000151dc8: sub esp, -0x80; mov eax, r8d; pop rbp; ret; 
0x000000000010dcd8: sub esp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010c9c5: sub esp, 0x10; push 0; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000010c9e5: sub esp, 0x10; push 1; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef5: sub esp, 0x10; push 2; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000136e95: sub esp, 0x10; push 2; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f15: sub esp, 0x10; push 3; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000012ead5: sub esp, 8; call 0x10ec90; test rax, rax; je 0x12eaf0; add rsp, 8; ret; 
0x00000000001471c1: sub esp, 8; call 0x114e90; mov dword ptr [rip + 0xa99ad], eax; add rsp, 8; ret; 
0x0000000000117905: sub esp, 8; call 0x117600; mov qword ptr [rip + 0xd7e7c], rax; add rsp, 8; ret; 
0x000000000012de02: sub esp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012edc7: sub esp, 8; call 0x12e560; nop; mov rax, rdi; ret; 
0x000000000012ee98: sub esp, 8; call 0x12e560; ret; 
0x0000000000140ee9: sub esp, 8; call 0x140970; or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x0000000000026f69: sub esp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x0000000000047d15: sub esp, 8; call 0x47800; add rsp, 8; ret; 
0x000000000011656a: sub esp, 8; call 0x81dd0; mov eax, 1; add rsp, 8; ret; 
0x0000000000141425: sub esp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000138735: sub esp, 8; mov edi, 0x400; call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x00000000000445b5: sub esp, 8; mov edx, 0xa; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000157f35: sub esp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x00000000000a8e25: sub esp, 8; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x000000000008ad2c: sub qword ptr [r15], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000085355: sub qword ptr [rdi], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000198fa7: sub qword ptr [rip + 0x57569], 1; pop rbp; ret; 
0x000000000015d1da: sub qword ptr [rip + 0x94476], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x000000000015d0fa: sub qword ptr [rip + 0x94556], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret; 
0x0000000000142617: sub qword ptr [rip + 0xae3f9], 1; pop rbp; ret; 
0x0000000000166054: sub r11, rdx; jbe 0x166064; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000017fe94: sub r11, rdx; jbe 0x17fea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000abe94: sub r11, rdx; jbe 0xabea4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000b8079: sub r8, 0x10; jb 0xb7629; movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000b98c9: sub r8, 0x10; jb 0xb8d09; movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, [rdi + 0x40]; ret; 
0x00000000000bb329: sub r8, 0x10; jb 0xbabc9; movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000001785d1: sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x178b20; ret; 
0x000000000017c962: sub r8, 0x10; lea rcx, [rdx + 0x10]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b78a8: sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb7f80; ret; 
0x00000000000b8fcc: sub r8, 0x10; lea rdi, [rdi + 0x10]; jne 0xb97d0; ret; 
0x00000000000b78cb: sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb7f80; ret; 
0x00000000000b8fef: sub r8, 0x11; lea rdi, [rdi + 0x11]; jne 0xb97d0; ret; 
0x00000000000b78f0: sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb7f80; ret; 
0x00000000000b9014: sub r8, 0x12; lea rdi, [rdi + 0x12]; jne 0xb97d0; ret; 
0x00000000000b790e: sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb7f80; ret; 
0x00000000000b9042: sub r8, 0x13; lea rdi, [rdi + 0x13]; jne 0xb97d0; ret; 
0x00000000000b792e: sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb7f80; ret; 
0x00000000000b9072: sub r8, 0x14; lea rdi, [rdi + 0x14]; jne 0xb97d0; ret; 
0x00000000000b7951: sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb7f80; ret; 
0x00000000000b90a5: sub r8, 0x15; lea rdi, [rdi + 0x15]; jne 0xb97d0; ret; 
0x00000000000b7970: sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb7f80; ret; 
0x00000000000b90d4: sub r8, 0x16; lea rdi, [rdi + 0x16]; jne 0xb97d0; ret; 
0x00000000000b7990: sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb7f80; ret; 
0x00000000000b9104: sub r8, 0x17; lea rdi, [rdi + 0x17]; jne 0xb97d0; ret; 
0x00000000000b79b0: sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb7f80; ret; 
0x00000000000b9134: sub r8, 0x18; lea rdi, [rdi + 0x18]; jne 0xb97d0; ret; 
0x00000000000b79d3: sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb7f80; ret; 
0x00000000000b9167: sub r8, 0x19; lea rdi, [rdi + 0x19]; jne 0xb97d0; ret; 
0x00000000000b7a08: sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb7f80; ret; 
0x00000000000b919c: sub r8, 0x1a; lea rdi, [rdi + 0x1a]; jne 0xb97d0; ret; 
0x00000000000b7a36: sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb7f80; ret; 
0x00000000000b91ca: sub r8, 0x1b; lea rdi, [rdi + 0x1b]; jne 0xb97d0; ret; 
0x00000000000b7a66: sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb7f80; ret; 
0x00000000000b91fa: sub r8, 0x1c; lea rdi, [rdi + 0x1c]; jne 0xb97d0; ret; 
0x00000000000b7a92: sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb7f80; ret; 
0x00000000000b9226: sub r8, 0x1d; lea rdi, [rdi + 0x1d]; jne 0xb97d0; ret; 
0x00000000000b7ac2: sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb7f80; ret; 
0x00000000000b9256: sub r8, 0x1e; lea rdi, [rdi + 0x1e]; jne 0xb97d0; ret; 
0x00000000000b7af2: sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb7f80; ret; 
0x00000000000b9286: sub r8, 0x1f; lea rdi, [rdi + 0x1f]; jne 0xb97d0; ret; 
0x0000000000189d2c: sub r8, 0x20; jb 0x189b15; vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018aa2c: sub r8, 0x20; jb 0x18a645; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b75c: sub r8, 0x20; jb 0x18b375; vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x00000000000b7b22: sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb7f80; ret; 
0x00000000000b92b6: sub r8, 0x20; lea rdi, [rdi + 0x20]; jne 0xb97d0; ret; 
0x00000000001788cf: sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x178b20; ret; 
0x000000000017ccc0: sub r8, 0xa; lea rcx, [rdx + 0xa]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b77ee: sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb7f80; ret; 
0x00000000000b8ed2: sub r8, 0xa; lea rdi, [rdi + 0xa]; jne 0xb97d0; ret; 
0x00000000001788ef: sub r8, 0xb; lea rcx, [rdx + 0xb]; jne 0x178b20; ret; 
0x00000000000b780c: sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb7f80; ret; 
0x00000000000b8f00: sub r8, 0xb; lea rdi, [rdi + 0xb]; jne 0xb97d0; ret; 
0x000000000017890f: sub r8, 0xc; lea rcx, [rdx + 0xc]; jne 0x178b20; ret; 
0x00000000000b782c: sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb7f80; ret; 
0x00000000000b8f20: sub r8, 0xc; lea rdi, [rdi + 0xc]; jne 0xb97d0; ret; 
0x0000000000178931: sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x178b20; ret; 
0x000000000017cd52: sub r8, 0xd; lea rcx, [rdx + 0xd]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b784e: sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb7f80; ret; 
0x00000000000b8f42: sub r8, 0xd; lea rdi, [rdi + 0xd]; jne 0xb97d0; ret; 
0x0000000000178951: sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x178b20; ret; 
0x000000000017cd82: sub r8, 0xe; lea rcx, [rdx + 0xe]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b786e: sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb7f80; ret; 
0x00000000000b8f72: sub r8, 0xe; lea rdi, [rdi + 0xe]; jne 0xb97d0; ret; 
0x0000000000178971: sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x178b20; ret; 
0x000000000017cdb2: sub r8, 0xf; lea rcx, [rdx + 0xf]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b788e: sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb7f80; ret; 
0x00000000000b8fa2: sub r8, 0xf; lea rdi, [rdi + 0xf]; jne 0xb97d0; ret; 
0x00000000001787c7: sub r8, 1; lea rcx, [rdx + 1]; jne 0x178b20; ret; 
0x000000000018a4f8: sub r8, 1; lea rdi, [rdi + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b210: sub r8, 1; lea rdi, [rdi + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76c2: sub r8, 1; lea rdi, [rdi + 1]; jne 0xb7f80; ret; 
0x00000000000b8da5: sub r8, 1; lea rdi, [rdi + 1]; jne 0xb97d0; ret; 
0x000000000018a70f: sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b443: sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b660; vzeroupper; ret; 
0x00000000001787e9: sub r8, 2; lea rcx, [rdx + 2]; jne 0x178b20; ret; 
0x000000000018a6a6: sub r8, 2; lea rdi, [rdi + 2]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3da: sub r8, 2; lea rdi, [rdi + 2]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b76e6: sub r8, 2; lea rdi, [rdi + 2]; jne 0xb7f80; ret; 
0x00000000000b8dca: sub r8, 2; lea rdi, [rdi + 2]; jne 0xb97d0; ret; 
0x000000000017880f: sub r8, 3; lea rcx, [rdx + 3]; jne 0x178b20; ret; 
0x000000000017cbb0: sub r8, 3; lea rcx, [rdx + 3]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a6ca: sub r8, 3; lea rdi, [rdi + 3]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b3fe: sub r8, 3; lea rdi, [rdi + 3]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b7709: sub r8, 3; lea rdi, [rdi + 3]; jne 0xb7f80; ret; 
0x00000000000b8ded: sub r8, 3; lea rdi, [rdi + 3]; jne 0xb97d0; ret; 
0x0000000000178827: sub r8, 4; lea rcx, [rdx + 4]; jne 0x178b20; ret; 
0x000000000017cbd8: sub r8, 4; lea rcx, [rdx + 4]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018a6e4: sub r8, 4; lea rdi, [rdi + 4]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b418: sub r8, 4; lea rdi, [rdi + 4]; jne 0x18b660; vzeroupper; ret; 
0x00000000000b7724: sub r8, 4; lea rdi, [rdi + 4]; jne 0xb7f80; ret; 
0x00000000000b8e08: sub r8, 4; lea rdi, [rdi + 4]; jne 0xb97d0; ret; 
0x000000000017884d: sub r8, 5; lea rcx, [rdx + 5]; jne 0x178b20; ret; 
0x000000000017cbfe: sub r8, 5; lea rcx, [rdx + 5]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b7747: sub r8, 5; lea rdi, [rdi + 5]; jne 0xb7f80; ret; 
0x00000000000b8e2b: sub r8, 5; lea rdi, [rdi + 5]; jne 0xb97d0; ret; 
0x000000000017886f: sub r8, 6; lea rcx, [rdx + 6]; jne 0x178b20; ret; 
0x000000000017cc30: sub r8, 6; lea rcx, [rdx + 6]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b776c: sub r8, 6; lea rdi, [rdi + 6]; jne 0xb7f80; ret; 
0x00000000000b8e50: sub r8, 6; lea rdi, [rdi + 6]; jne 0xb97d0; ret; 
0x000000000017888d: sub r8, 7; lea rcx, [rdx + 7]; jne 0x178b20; ret; 
0x000000000017cc5e: sub r8, 7; lea rcx, [rdx + 7]; jne 0x17cf70; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b778a: sub r8, 7; lea rdi, [rdi + 7]; jne 0xb7f80; ret; 
0x00000000000b8e6e: sub r8, 7; lea rdi, [rdi + 7]; jne 0xb97d0; ret; 
0x0000000000055c3b: sub r8, 8; cmp r8, -8; jne 0x55c30; mov rax, rdx; ret; 
0x0000000000178569: sub r8, 8; lea rcx, [rdx + 8]; jne 0x178b20; ret; 
0x00000000000b77a6: sub r8, 8; lea rdi, [rdi + 8]; jne 0xb7f80; ret; 
0x00000000000b8e8a: sub r8, 8; lea rdi, [rdi + 8]; jne 0xb97d0; ret; 
0x00000000001788af: sub r8, 9; lea rcx, [rdx + 9]; jne 0x178b20; ret; 
0x00000000000b77c9: sub r8, 9; lea rdi, [rdi + 9]; jne 0xb7f80; ret; 
0x00000000000b8ead: sub r8, 9; lea rdi, [rdi + 9]; jne 0xb97d0; ret; 
0x00000000000989c7: sub r8, rdi; lea ecx, [r8 + 0x280]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbp; ret; 
0x000000000018a70c: sub r8, rdx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18a930; vzeroupper; ret; 
0x000000000018b440: sub r8, rdx; sub r8, 1; lea rdi, [rdi + rdx + 1]; jne 0x18b660; vzeroupper; ret; 
0x0000000000149547: sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000009c271: sub rax, 0x10; ret; 
0x0000000000094e6b: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0x157452], rdx; ret; 
0x00000000000bb853: sub rax, 1; ret; 
0x000000000005b32e: sub rax, 4; cmp rdi, rax; jbe 0x5b32a; mov rax, r10; ret; 
0x0000000000093ea1: sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000008ce2c: sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000127878: sub rax, qword ptr [rdi + 0x38]; cmp rax, rsi; jb 0x127890; mov eax, 1; ret; 
0x000000000008ccfc: sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000885e8: sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000008ce19: sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce9: sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000015f459: sub rax, rcx; add ecx, 0x180; mov rsi, rax; shr ecx, 3; rep movsq qword ptr [rdi], qword ptr [rsi]; ret; 
0x0000000000185042: sub rax, rcx; je 0x185050; sbb eax, eax; or eax, 1; ret; 
0x0000000000092a28: sub rax, rcx; sub eax, 1; ret; 
0x00000000000b1d58: sub rax, rdi; ret; 
0x00000000000cf84d: sub rax, rdi; shr rax, 2; ret; 
0x000000000008b6fb: sub rax, rdx; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000009c265: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x9c258; sub rax, 0x10; ret; 
0x000000000008f560: sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000004730c: sub rax, rdx; ret; 
0x000000000008aa12: sub rax, rdx; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000041ec8: sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000018d2df: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x000000000018895f: sub rax, rdx; vzeroupper; ret; 
0x000000000005651c: sub rcx, 1; div r8; cmp rcx, -1; jne 0x56518; mov rax, rdx; ret; 
0x000000000015fa21: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x15fa10; mov eax, 1; ret; 
0x0000000000087df8: sub rcx, rax; sar rcx, 2; lea eax, [rcx - 1]; ret; 
0x000000000010c8a3: sub rcx, rdi; add ecx, 0x150; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x0000000000043ae5: sub rcx, rdi; sub ecx, -0x80; shr ecx, 3; rep stosq qword ptr [rdi], rax; ret; 
0x000000000014949e: sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000cf34b: sub rdi, 0x10; add rax, rdi; ret; 
0x00000000000ac6d3: sub rdx, 0x10; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac6b3: sub rdx, 0x20; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac693: sub rdx, 0x30; add rdx, rax; jl 0xac6f0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac683: sub rdx, 0x40; add rdx, rax; jl 0xac6f0; add rax, rdi; ret; 
0x0000000000184d1a: sub rdx, 0x80; add rdx, rax; jl 0x184e10; add rax, rdi; vzeroupper; ret; 
0x00000000001463e0: sub rdx, 1; jne 0x146368; ret; 
0x0000000000055628: sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000055870: sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x00000000000a13e5: sub rdx, 2; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rsi + rdx], cl; mov byte ptr [rsi + rdx + 1], al; jne 0xa13e0; ret; 
0x000000000009c1fd: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x0000000000087ea1: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000087eb3: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000008f55b: sub rdx, qword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000000abf3c: sub rdx, rax; jbe 0xac1e0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac1a3: sub rdx, rax; jbe 0xac1e0; add rax, rdi; ret; 
0x00000000000ac1b3: sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ac1c3: sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ac1d3: sub rdx, rax; jbe 0xac1e0; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce11c: sub rdx, rax; jbe 0xce3c0; add rax, rdi; add rax, rcx; ret; 
0x00000000000ce383: sub rdx, rax; jbe 0xce3c0; add rax, rdi; ret; 
0x00000000000ce393: sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x00000000000ce3a3: sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000000ce3b3: sub rdx, rax; jbe 0xce3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000151dc7: sub rsp, -0x80; mov eax, r8d; pop rbp; ret; 
0x000000000010dcd7: sub rsp, -0x80; pop rbp; pop r12; pop r13; ret; 
0x000000000010c9c4: sub rsp, 0x10; push 0; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000010c9e4: sub rsp, 0x10; push 1; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000162ef4: sub rsp, 0x10; push 2; call 0x10d1e0; add rsp, 0x18; ret; 
0x0000000000136e94: sub rsp, 0x10; push 2; call 0x136910; add rsp, 0x18; ret; 
0x0000000000162f14: sub rsp, 0x10; push 3; call 0x10d1e0; add rsp, 0x18; ret; 
0x000000000012ead4: sub rsp, 8; call 0x10ec90; test rax, rax; je 0x12eaf0; add rsp, 8; ret; 
0x00000000001471c0: sub rsp, 8; call 0x114e90; mov dword ptr [rip + 0xa99ad], eax; add rsp, 8; ret; 
0x0000000000117904: sub rsp, 8; call 0x117600; mov qword ptr [rip + 0xd7e7c], rax; add rsp, 8; ret; 
0x000000000012de01: sub rsp, 8; call 0x12e560; nop word ptr [rax + rax]; ret; 
0x000000000012edc6: sub rsp, 8; call 0x12e560; nop; mov rax, rdi; ret; 
0x000000000012ee97: sub rsp, 8; call 0x12e560; ret; 
0x0000000000140ee8: sub rsp, 8; call 0x140970; or dword ptr [rip + 0xaf8cc], 2; add rsp, 8; ret; 
0x0000000000026f68: sub rsp, 8; call 0x26930; or dword ptr [rip + 0x1c69dc], 2; add rsp, 8; ret; 
0x0000000000047d14: sub rsp, 8; call 0x47800; add rsp, 8; ret; 
0x0000000000116569: sub rsp, 8; call 0x81dd0; mov eax, 1; add rsp, 8; ret; 
0x0000000000141424: sub rsp, 8; call 0xe40c0; add rsp, 8; movzx eax, ax; ret; 
0x0000000000138734: sub rsp, 8; mov edi, 0x400; call 0x22310; mov qword ptr [rip + 0xb5197], rax; add rsp, 8; ret; 
0x00000000000445b4: sub rsp, 8; mov edx, 0xa; xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x0000000000157f34: sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x830f0; add rsp, 8; ret; 
0x00000000000a8e24: sub rsp, 8; mov rdx, rsi; xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000041fb7: subps xmm0, xmm1; ret; 
0x000000000004231f: subps xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x0000000000041fb6: subsd xmm0, xmm1; ret; 
0x000000000004231e: subss xmm1, xmm0; movaps xmm0, xmm1; ret; 
0x000000000010c388: syscall; cmp rax, -0x1000; ja 0x10c3f0; ret; 
0x000000000010c438: syscall; cmp rax, -0x1000; ja 0x10c4a0; ret; 
0x000000000010d6d8: syscall; cmp rax, -0x1000; ja 0x10d6e8; ret; 
0x000000000010d737: syscall; cmp rax, -0x1000; ja 0x10d748; ret; 
0x000000000010d798: syscall; cmp rax, -0x1000; ja 0x10d7a8; ret; 
0x000000000010db20: syscall; cmp rax, -0x1000; ja 0x10db30; ret; 
0x000000000010db83: syscall; cmp rax, -0x1000; ja 0x10db90; ret; 
0x000000000010dbdd: syscall; cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x000000000010de16: syscall; cmp rax, -0x1000; ja 0x10de28; ret; 
0x000000000010e1f0: syscall; cmp rax, -0x1000; ja 0x10e250; ret; 
0x000000000010e295: syscall; cmp rax, -0x1000; ja 0x10e2f0; ret; 
0x000000000010e329: syscall; cmp rax, -0x1000; ja 0x10e338; ret; 
0x000000000010e359: syscall; cmp rax, -0x1000; ja 0x10e368; ret; 
0x000000000010ea35: syscall; cmp rax, -0x1000; ja 0x10ea80; ret; 
0x000000000010ebb5: syscall; cmp rax, -0x1000; ja 0x10ec00; ret; 
0x0000000000112b85: syscall; cmp rax, -0x1000; ja 0x112be0; ret; 
0x0000000000113208: syscall; cmp rax, -0x1000; ja 0x113288; ret; 
0x00000000001132cc: syscall; cmp rax, -0x1000; ja 0x1132e0; ret; 
0x0000000000113311: syscall; cmp rax, -0x1000; ja 0x113320; ret; 
0x0000000000113418: syscall; cmp rax, -0x1000; ja 0x113480; ret; 
0x00000000001134c8: syscall; cmp rax, -0x1000; ja 0x113530; ret; 
0x0000000000113569: syscall; cmp rax, -0x1000; ja 0x113578; ret; 
0x0000000000113826: syscall; cmp rax, -0x1000; ja 0x113838; ret; 
0x000000000011385c: syscall; cmp rax, -0x1000; ja 0x113870; ret; 
0x0000000000113899: syscall; cmp rax, -0x1000; ja 0x1138a8; ret; 
0x0000000000113d7f: syscall; cmp rax, -0x1000; ja 0x113dd8; ret; 
0x0000000000113f92: syscall; cmp rax, -0x1000; ja 0x113fa0; ret; 
0x0000000000113fd3: syscall; cmp rax, -0x1000; ja 0x113fe0; ret; 
0x0000000000114605: syscall; cmp rax, -0x1000; ja 0x114660; ret; 
0x00000000001146a5: syscall; cmp rax, -0x1000; ja 0x114700; ret; 
0x000000000011474b: syscall; cmp rax, -0x1000; ja 0x1147b8; ret; 
0x000000000011480b: syscall; cmp rax, -0x1000; ja 0x114878; ret; 
0x0000000000115198: syscall; cmp rax, -0x1000; ja 0x115210; ret; 
0x00000000001153c5: syscall; cmp rax, -0x1000; ja 0x115410; ret; 
0x0000000000115485: syscall; cmp rax, -0x1000; ja 0x1154d0; ret; 
0x0000000000115545: syscall; cmp rax, -0x1000; ja 0x115550; ret; 
0x0000000000116cc9: syscall; cmp rax, -0x1000; ja 0x116cd8; ret; 
0x0000000000116eae: syscall; cmp rax, -0x1000; ja 0x116ec0; ret; 
0x0000000000116ee9: syscall; cmp rax, -0x1000; ja 0x116ef8; ret; 
0x0000000000116f19: syscall; cmp rax, -0x1000; ja 0x116f28; ret; 
0x0000000000118b04: syscall; cmp rax, -0x1000; ja 0x118b70; pop rbx; pop rbp; ret; 
0x0000000000118c05: syscall; cmp rax, -0x1000; ja 0x118c60; ret; 
0x000000000011c6e0: syscall; cmp rax, -0x1000; ja 0x11c6f0; ret; 
0x000000000011f3b9: syscall; cmp rax, -0x1000; ja 0x11f3c8; ret; 
0x000000000011f45e: syscall; cmp rax, -0x1000; ja 0x11f4d8; ret; 
0x000000000011f511: syscall; cmp rax, -0x1000; ja 0x11f520; ret; 
0x000000000011f648: syscall; cmp rax, -0x1000; ja 0x11f6b0; ret; 
0x000000000011f6f8: syscall; cmp rax, -0x1000; ja 0x11f760; ret; 
0x000000000011f7a8: syscall; cmp rax, -0x1000; ja 0x11f810; ret; 
0x000000000011f858: syscall; cmp rax, -0x1000; ja 0x11f8d8; ret; 
0x000000000011f925: syscall; cmp rax, -0x1000; ja 0x11f980; ret; 
0x000000000011f9ed: syscall; cmp rax, -0x1000; ja 0x11fa28; mov r8d, eax; mov eax, r8d; ret; 
0x000000000011fa51: syscall; cmp rax, -0x1000; ja 0x11fa60; ret; 
0x00000000001202f5: syscall; cmp rax, -0x1000; ja 0x120350; ret; 
0x00000000001203c5: syscall; cmp rax, -0x1000; ja 0x120420; ret; 
0x000000000012052e: syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000001205e8: syscall; cmp rax, -0x1000; ja 0x120660; ret; 
0x00000000001206a5: syscall; cmp rax, -0x1000; ja 0x120700; ret; 
0x000000000012074e: syscall; cmp rax, -0x1000; ja 0x1207c0; ret; 
0x0000000000120805: syscall; cmp rax, -0x1000; ja 0x120860; ret; 
0x00000000001208a8: syscall; cmp rax, -0x1000; ja 0x120928; ret; 
0x0000000000120d08: syscall; cmp rax, -0x1000; ja 0x120d70; ret; 
0x0000000000120db8: syscall; cmp rax, -0x1000; ja 0x120e28; ret; 
0x0000000000120e68: syscall; cmp rax, -0x1000; ja 0x120ed0; ret; 
0x00000000001210d8: syscall; cmp rax, -0x1000; ja 0x121140; ret; 
0x0000000000121188: syscall; cmp rax, -0x1000; ja 0x121200; ret; 
0x0000000000121239: syscall; cmp rax, -0x1000; ja 0x121248; ret; 
0x0000000000121269: syscall; cmp rax, -0x1000; ja 0x121278; ret; 
0x00000000001212a9: syscall; cmp rax, -0x1000; ja 0x1212b8; ret; 
0x000000000012137c: syscall; cmp rax, -0x1000; ja 0x121390; ret; 
0x00000000001213b9: syscall; cmp rax, -0x1000; ja 0x1213c8; ret; 
0x00000000001213e9: syscall; cmp rax, -0x1000; ja 0x1213f8; ret; 
0x000000000012141c: syscall; cmp rax, -0x1000; ja 0x121430; ret; 
0x0000000000121459: syscall; cmp rax, -0x1000; ja 0x121468; ret; 
0x000000000012e9cb: syscall; cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x000000000004340e: syscall; cmp rax, -0x1000; ja 0x43420; ret; 
0x000000000004345a: syscall; cmp rax, -0x1000; ja 0x434b0; ret; 
0x0000000000048225: syscall; cmp rax, -0x1000; ja 0x48280; ret; 
0x0000000000062e89: syscall; cmp rax, -0x1000; ja 0x62e98; ret; 
0x0000000000062ebc: syscall; cmp rax, -0x1000; ja 0x62ed0; ret; 
0x00000000000d0dc9: syscall; cmp rax, -0x1000; ja 0xd0dd8; ret; 
0x00000000000d0ede: syscall; cmp rax, -0x1000; ja 0xd0ef0; ret; 
0x00000000000d107e: syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x00000000000dd123: syscall; cmp rax, -0x1000; ja 0xdd130; ret; 
0x00000000000de2b9: syscall; cmp rax, -0x1000; ja 0xde2c8; ret; 
0x00000000000e2c38: syscall; cmp rax, -0x1000; ja 0xe2ca0; ret; 
0x00000000000e2ceb: syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000e2e45: syscall; cmp rax, -0x1000; ja 0xe2e80; ret; 
0x0000000000102659: syscall; cmp rax, -0xfff; jae 0x102664; ret; 
0x0000000000102689: syscall; cmp rax, -0xfff; jae 0x102694; ret; 
0x00000000001026b9: syscall; cmp rax, -0xfff; jae 0x1026c4; ret; 
0x00000000001026e9: syscall; cmp rax, -0xfff; jae 0x1026f4; ret; 
0x0000000000102719: syscall; cmp rax, -0xfff; jae 0x102724; ret; 
0x0000000000102749: syscall; cmp rax, -0xfff; jae 0x102754; ret; 
0x0000000000102779: syscall; cmp rax, -0xfff; jae 0x102784; ret; 
0x00000000001027a9: syscall; cmp rax, -0xfff; jae 0x1027b4; ret; 
0x000000000010d5f9: syscall; cmp rax, -0xfff; jae 0x10d604; ret; 
0x000000000010dc29: syscall; cmp rax, -0xfff; jae 0x10dc34; ret; 
0x000000000010dc59: syscall; cmp rax, -0xfff; jae 0x10dc64; ret; 
0x000000000010dd89: syscall; cmp rax, -0xfff; jae 0x10dd94; ret; 
0x000000000010ddb9: syscall; cmp rax, -0xfff; jae 0x10ddc4; ret; 
0x000000000010de79: syscall; cmp rax, -0xfff; jae 0x10de84; ret; 
0x000000000010dea9: syscall; cmp rax, -0xfff; jae 0x10deb4; ret; 
0x000000000010e799: syscall; cmp rax, -0xfff; jae 0x10e7a4; ret; 
0x000000000010eab9: syscall; cmp rax, -0xfff; jae 0x10eac4; ret; 
0x000000000010eae9: syscall; cmp rax, -0xfff; jae 0x10eaf4; ret; 
0x000000000010eb19: syscall; cmp rax, -0xfff; jae 0x10eb24; ret; 
0x000000000010eb49: syscall; cmp rax, -0xfff; jae 0x10eb54; ret; 
0x000000000010eb79: syscall; cmp rax, -0xfff; jae 0x10eb84; ret; 
0x000000000010ec39: syscall; cmp rax, -0xfff; jae 0x10ec44; ret; 
0x000000000010ec69: syscall; cmp rax, -0xfff; jae 0x10ec74; ret; 
0x000000000010f589: syscall; cmp rax, -0xfff; jae 0x10f594; ret; 
0x000000000010f5b9: syscall; cmp rax, -0xfff; jae 0x10f5c4; ret; 
0x000000000010f5e9: syscall; cmp rax, -0xfff; jae 0x10f5f4; ret; 
0x000000000010f61c: syscall; cmp rax, -0xfff; jae 0x10f627; ret; 
0x000000000010fdd9: syscall; cmp rax, -0xfff; jae 0x10fde4; ret; 
0x000000000010fe0c: syscall; cmp rax, -0xfff; jae 0x10fe17; ret; 
0x000000000010fe39: syscall; cmp rax, -0xfff; jae 0x10fe44; ret; 
0x000000000010fe69: syscall; cmp rax, -0xfff; jae 0x10fe74; ret; 
0x000000000010fe99: syscall; cmp rax, -0xfff; jae 0x10fea4; ret; 
0x000000000010fecc: syscall; cmp rax, -0xfff; jae 0x10fed7; ret; 
0x000000000010fef9: syscall; cmp rax, -0xfff; jae 0x10ff04; ret; 
0x000000000010ff29: syscall; cmp rax, -0xfff; jae 0x10ff34; ret; 
0x000000000010ff59: syscall; cmp rax, -0xfff; jae 0x10ff64; ret; 
0x00000000001131cc: syscall; cmp rax, -0xfff; jae 0x1131d7; ret; 
0x0000000000114009: syscall; cmp rax, -0xfff; jae 0x114014; ret; 
0x0000000000114409: syscall; cmp rax, -0xfff; jae 0x114414; ret; 
0x00000000001145c9: syscall; cmp rax, -0xfff; jae 0x1145d4; ret; 
0x0000000000115009: syscall; cmp rax, -0xfff; jae 0x115014; ret; 
0x0000000000115159: syscall; cmp rax, -0xfff; jae 0x115164; ret; 
0x0000000000115359: syscall; cmp rax, -0xfff; jae 0x115364; ret; 
0x0000000000115389: syscall; cmp rax, -0xfff; jae 0x115394; ret; 
0x0000000000115449: syscall; cmp rax, -0xfff; jae 0x115454; ret; 
0x0000000000115509: syscall; cmp rax, -0xfff; jae 0x115514; ret; 
0x0000000000115849: syscall; cmp rax, -0xfff; jae 0x115854; ret; 
0x0000000000115879: syscall; cmp rax, -0xfff; jae 0x115884; ret; 
0x00000000001158a9: syscall; cmp rax, -0xfff; jae 0x1158b4; ret; 
0x000000000011895b: syscall; cmp rax, -0xfff; jae 0x118966; ret; 
0x0000000000118b99: syscall; cmp rax, -0xfff; jae 0x118ba4; ret; 
0x0000000000118bc9: syscall; cmp rax, -0xfff; jae 0x118bd4; ret; 
0x0000000000118c99: syscall; cmp rax, -0xfff; jae 0x118ca4; ret; 
0x0000000000118cc9: syscall; cmp rax, -0xfff; jae 0x118cd4; ret; 
0x0000000000118cfc: syscall; cmp rax, -0xfff; jae 0x118d07; ret; 
0x0000000000118d29: syscall; cmp rax, -0xfff; jae 0x118d34; ret; 
0x0000000000118d59: syscall; cmp rax, -0xfff; jae 0x118d64; ret; 
0x0000000000118d89: syscall; cmp rax, -0xfff; jae 0x118d94; ret; 
0x0000000000118db9: syscall; cmp rax, -0xfff; jae 0x118dc4; ret; 
0x000000000011cfbc: syscall; cmp rax, -0xfff; jae 0x11cfc7; ret; 
0x000000000011cfe9: syscall; cmp rax, -0xfff; jae 0x11cff4; ret; 
0x000000000011d019: syscall; cmp rax, -0xfff; jae 0x11d024; ret; 
0x000000000011d04c: syscall; cmp rax, -0xfff; jae 0x11d057; ret; 
0x000000000011d07c: syscall; cmp rax, -0xfff; jae 0x11d087; ret; 
0x000000000011d0a9: syscall; cmp rax, -0xfff; jae 0x11d0b4; ret; 
0x000000000011d0dc: syscall; cmp rax, -0xfff; jae 0x11d0e7; ret; 
0x000000000011d109: syscall; cmp rax, -0xfff; jae 0x11d114; ret; 
0x000000000011d139: syscall; cmp rax, -0xfff; jae 0x11d144; ret; 
0x000000000011d16c: syscall; cmp rax, -0xfff; jae 0x11d177; ret; 
0x000000000011d199: syscall; cmp rax, -0xfff; jae 0x11d1a4; ret; 
0x000000000011d1cc: syscall; cmp rax, -0xfff; jae 0x11d1d7; ret; 
0x000000000011f209: syscall; cmp rax, -0xfff; jae 0x11f214; ret; 
0x000000000011f239: syscall; cmp rax, -0xfff; jae 0x11f244; ret; 
0x000000000011f389: syscall; cmp rax, -0xfff; jae 0x11f394; ret; 
0x000000000011f3e9: syscall; cmp rax, -0xfff; jae 0x11f3f4; ret; 
0x000000000011f419: syscall; cmp rax, -0xfff; jae 0x11f424; ret; 
0x000000000011f549: syscall; cmp rax, -0xfff; jae 0x11f554; ret; 
0x000000000011f5dc: syscall; cmp rax, -0xfff; jae 0x11f5e7; ret; 
0x000000000011f609: syscall; cmp rax, -0xfff; jae 0x11f614; ret; 
0x000000000011fb29: syscall; cmp rax, -0xfff; jae 0x11fb34; ret; 
0x000000000011fb59: syscall; cmp rax, -0xfff; jae 0x11fb64; ret; 
0x000000000011fb9c: syscall; cmp rax, -0xfff; jae 0x11fba7; ret; 
0x000000000011fbc9: syscall; cmp rax, -0xfff; jae 0x11fbd4; ret; 
0x000000000011fbf9: syscall; cmp rax, -0xfff; jae 0x11fc04; ret; 
0x000000000011fc29: syscall; cmp rax, -0xfff; jae 0x11fc34; ret; 
0x000000000011fc59: syscall; cmp rax, -0xfff; jae 0x11fc64; ret; 
0x000000000011fc89: syscall; cmp rax, -0xfff; jae 0x11fc94; ret; 
0x000000000011fcb9: syscall; cmp rax, -0xfff; jae 0x11fcc4; ret; 
0x000000000011fce9: syscall; cmp rax, -0xfff; jae 0x11fcf4; ret; 
0x000000000011fd1c: syscall; cmp rax, -0xfff; jae 0x11fd27; ret; 
0x000000000011fd49: syscall; cmp rax, -0xfff; jae 0x11fd54; ret; 
0x000000000011fd7c: syscall; cmp rax, -0xfff; jae 0x11fd87; ret; 
0x000000000011fda9: syscall; cmp rax, -0xfff; jae 0x11fdb4; ret; 
0x000000000011fdd9: syscall; cmp rax, -0xfff; jae 0x11fde4; ret; 
0x000000000011fe09: syscall; cmp rax, -0xfff; jae 0x11fe14; ret; 
0x000000000011fe39: syscall; cmp rax, -0xfff; jae 0x11fe44; ret; 
0x000000000011fe69: syscall; cmp rax, -0xfff; jae 0x11fe74; ret; 
0x000000000011fe9c: syscall; cmp rax, -0xfff; jae 0x11fea7; ret; 
0x000000000011fecc: syscall; cmp rax, -0xfff; jae 0x11fed7; ret; 
0x000000000011fef9: syscall; cmp rax, -0xfff; jae 0x11ff04; ret; 
0x000000000011ff29: syscall; cmp rax, -0xfff; jae 0x11ff34; ret; 
0x000000000011ff5c: syscall; cmp rax, -0xfff; jae 0x11ff67; ret; 
0x000000000011ff8c: syscall; cmp rax, -0xfff; jae 0x11ff97; ret; 
0x000000000011ffbc: syscall; cmp rax, -0xfff; jae 0x11ffc7; ret; 
0x000000000011ffe9: syscall; cmp rax, -0xfff; jae 0x11fff4; ret; 
0x0000000000120019: syscall; cmp rax, -0xfff; jae 0x120024; ret; 
0x0000000000120049: syscall; cmp rax, -0xfff; jae 0x120054; ret; 
0x0000000000120079: syscall; cmp rax, -0xfff; jae 0x120084; ret; 
0x00000000001200ac: syscall; cmp rax, -0xfff; jae 0x1200b7; ret; 
0x00000000001200d9: syscall; cmp rax, -0xfff; jae 0x1200e4; ret; 
0x0000000000120109: syscall; cmp rax, -0xfff; jae 0x120114; ret; 
0x000000000012013c: syscall; cmp rax, -0xfff; jae 0x120147; ret; 
0x0000000000120169: syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x000000000012019c: syscall; cmp rax, -0xfff; jae 0x1201a7; ret; 
0x00000000001201cc: syscall; cmp rax, -0xfff; jae 0x1201d7; ret; 
0x00000000001201f9: syscall; cmp rax, -0xfff; jae 0x120204; ret; 
0x0000000000120229: syscall; cmp rax, -0xfff; jae 0x120234; ret; 
0x0000000000120259: syscall; cmp rax, -0xfff; jae 0x120264; ret; 
0x0000000000120299: syscall; cmp rax, -0xfff; jae 0x1202a4; ret; 
0x0000000000120389: syscall; cmp rax, -0xfff; jae 0x120394; ret; 
0x0000000000120459: syscall; cmp rax, -0xfff; jae 0x120464; ret; 
0x0000000000120489: syscall; cmp rax, -0xfff; jae 0x120494; ret; 
0x00000000001204bc: syscall; cmp rax, -0xfff; jae 0x1204c7; ret; 
0x00000000001204e9: syscall; cmp rax, -0xfff; jae 0x1204f4; ret; 
0x000000000012096c: syscall; cmp rax, -0xfff; jae 0x120977; ret; 
0x0000000000120999: syscall; cmp rax, -0xfff; jae 0x1209a4; ret; 
0x00000000001209c9: syscall; cmp rax, -0xfff; jae 0x1209d4; ret; 
0x00000000001209fc: syscall; cmp rax, -0xfff; jae 0x120a07; ret; 
0x00000000000433d9: syscall; cmp rax, -0xfff; jae 0x433e4; ret; 
0x00000000000439c9: syscall; cmp rax, -0xfff; jae 0x439d4; ret; 
0x0000000000054eff: syscall; cmp rax, -0xfff; jae 0x54f0c; xor eax, eax; ret; 
0x00000000000d41b9: syscall; cmp rax, -0xfff; jae 0xd41c4; ret; 
0x00000000000d41e9: syscall; cmp rax, -0xfff; jae 0xd41f4; ret; 
0x00000000000e2b49: syscall; cmp rax, -0xfff; jae 0xe2b54; ret; 
0x00000000000e2d99: syscall; cmp rax, -0xfff; jae 0xe2da4; ret; 
0x00000000000e3179: syscall; cmp rax, -0xfff; jae 0xe3184; ret; 
0x00000000000e4129: syscall; cmp rax, -0xfff; jae 0xe4134; ret; 
0x00000000000e4379: syscall; cmp rax, -0xfff; jae 0xe4384; ret; 
0x00000000000e43a9: syscall; cmp rax, -0xfff; jae 0xe43b4; ret; 
0x00000000000e4409: syscall; cmp rax, -0xfff; jae 0xe4414; ret; 
0x00000000000e4439: syscall; cmp rax, -0xfff; jae 0xe4444; ret; 
0x00000000000e4469: syscall; cmp rax, -0xfff; jae 0xe4474; ret; 
0x00000000000e4499: syscall; cmp rax, -0xfff; jae 0xe44a4; ret; 
0x000000000010d350: syscall; neg eax; ret; 
0x0000000000047656: syscall; pop rbp; ret; 
0x0000000000094a56: syscall; pop rbx; ret; 
0x00000000000630a9: syscall; ret; 
0x000000000011f343: syscall; test rax, rax; jl 0x11f35d; je 0x11f34d; ret; 
0x000000000011b3fb: sysret; add byte ptr [rax], al; mov qword ptr [rsp + 8], r8; mov rdi, qword ptr [r8]; call rbx; 
0x0000000000190fad: test ah, 0x20; jne 0x191090; test ah, 0x40; jne 0x1910a0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190fb6: test ah, 0x40; jne 0x1910a0; lea rax, [rdi + 0xf]; ret; 
0x0000000000190ece: test ah, 0x40; jne 0x1910a0; test dh, 0x40; jne 0x190e10; lea rax, [rdi + 0xf]; ret; 
0x00000000000cf53f: test ah, ah; jne 0xcf660; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000a4f87: test ah, bh; xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000d6838: test ah, cl; add al, byte ptr [rax]; add dh, dh; rol dword ptr [rdi + rcx], 0x84; ret; 
0x00000000000792d1: test al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x000000000014d363: test al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000122247: test al, 0; add byte ptr [rax], al; mov esi, 1; call 0x1220e0; ret; 
0x000000000015377b: test al, 0; add byte ptr [rax], al; mov rax, r8; pop rbx; ret; 
0x00000000000de748: test al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x00000000000328f4: test al, 0; add byte ptr [rax], al; ret; 
0x00000000001158a5: test al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1158b4; ret; 
0x0000000000122227: test al, 0; add byte ptr [rax], al; xor esi, esi; call 0x1220e0; ret; 
0x0000000000083f3f: test al, 0x16; add byte ptr [rcx], al; ret; 
0x0000000000190f5c: test al, 0x20; jne 0x191020; test al, 0x40; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x0000000000190f64: test al, 0x40; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x0000000000190e4c: test al, 0x40; jne 0x191030; test dl, 0x40; jne 0x190e10; lea rax, [rdi + 7]; ret; 
0x000000000012df0f: test al, 0x48; mov eax, edi; ret; 
0x00000000000928ee: test al, 0x90; endbr64; mov rax, 0xffffffffffffffff; ret; 
0x0000000000198b84: test al, 0x97; call 0xffffffffdb9ed48a; jne 0x198b75; pop rbx; ret; 
0x00000000000cf4e5: test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000e7a57: test al, 0xf3; dec dword ptr [rax - 0x77]; ret; 
0x000000000009f0ea: test al, 1; add byte ptr [rax - 0x73], cl; adc eax, 0x12e8c; cmovne rax, rdx; ret; 
0x000000000017e0aa: test al, 1; jne 0x17e0e0; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000005b4cc: test al, 3; add byte ptr [rax], al; mov rsp, rdx; ret; 
0x000000000014b495: test al, 6; add al, ch; ret; 
0x00000000000a8779: test al, al; je 0xa8781; cmp eax, esi; jne 0xa8770; mov rax, r8; ret; 
0x00000000000a87ad: test al, al; je 0xa87b5; cmp eax, edx; jne 0xa87a0; mov rax, r8; ret; 
0x000000000013f1f5: test al, al; jne 0x13f1dd; mov eax, r10d; ret; 
0x000000000009a05a: test al, al; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x00000000000aa64a: test al, al; jne 0xaa630; xor eax, eax; sub eax, ecx; ret; 
0x00000000000ca59a: test al, al; jne 0xca641; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e81e1: test al, al; jne 0xe8191; xor eax, eax; ret; 
0x0000000000082833: test bh, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000016134c: test bh, bh; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000715b1: test bh, bh; ret; 
0x0000000000196789: test bh, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000f1e14: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000f0b00: test bl, bh; add al, byte ptr [rax]; add byte ptr [rbx - 0x72bed3a7], cl; add dword ptr [rcx], edi; ret; 
0x000000000003426a: test byte ptr [rax + 0x200], bh; ret; 
0x000000000018b84b: test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x00000000000bc872: test byte ptr [rax + 0x71], 2; lea rax, [rip + 0x12933]; cmovne rax, rdx; ret; 
0x000000000009faf2: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1bef3]; cmovne rax, rdx; ret; 
0x000000000009f832: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x000000000009f242: test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c643]; cmovne rax, rdx; ret; 
0x000000000010d472: test byte ptr [rax + 0x72], 0x80; lea rax, [rip - 0xbd]; cmove rax, rdx; ret; 
0x00000000000a0302: test byte ptr [rax + 0xcc], 0x10; lea rax, [rip + 0x1b0e0]; cmove rax, rdx; ret; 
0x000000000013f973: test byte ptr [rax + 0xf000004], bh; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001494bd: test byte ptr [rax + 1], -0x3a; cmp rsi, qword ptr [rdx + 0x28]; ja 0x1494b0; mov qword ptr [rdx + 0x20], rsi; ret; 
0x0000000000023a6b: test byte ptr [rax + rax], bl; cmp qword ptr [rdx + 0xd8], rax; jne 0x23a3b; ret; 
0x000000000009ef31: test byte ptr [rax - 0x39], 0x47; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0x37; ret; 
0x0000000000111b75: test byte ptr [rax - 0x73], 0x3d; mov ebx, 0x31000a42; shr al, 0x7c; ret; 
0x000000000015e029: test byte ptr [rax - 0x73], 0x3d; ret; 
0x00000000000a1ff2: test byte ptr [rax - 0x77], -0x30; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013b6ab: test byte ptr [rax - 0x7b000000], dl; fisttp dword ptr [rdi]; test dword ptr [rax], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000038db9: test byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000df2f8: test byte ptr [rax], ah; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000cfafa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000009a75a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000420fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret; 
0x000000000004232a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; and esi, 0x80000000; mov dword ptr [rdi], esi; ret; 
0x00000000000ac17a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x00000000000ac64a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000091f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000014646a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 1; ret; 
0x000000000009384a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000009382a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x159d65]; ret; 
0x000000000002f59a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1be3bd]; ret; 
0x0000000000025a9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x1cb70d]; ret; 
0x000000000012da5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x0000000000146b4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000019105a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000019106a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000019107a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000019108a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000019109a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000190fea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000190ffa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x000000000019100a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000019101a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000019102a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000019103a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000019104a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000000cf64a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 0xc]; ret; 
0x00000000000cf66a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 4]; ret; 
0x00000000000cf65a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi - 8]; ret; 
0x00000000000328ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x181ab6]; ret; 
0x00000000000ec47a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000b849a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000000b6e5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000001789ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x00000000001789da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x00000000001789ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000000a8b4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; lea rax, [rdi + rdx - 1]; ret; 
0x00000000000b7e9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000b7b5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000f249a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xc; ret; 
0x00000000000440da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000009e85a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000178a2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x0000000000178a3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x0000000000178a4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x0000000000178a5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x0000000000178a6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000178a7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x0000000000178a1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x00000000001789fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x00000000000b7eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x00000000000b7eea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000b7efa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000b7f0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000b7f1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000b7eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000b7eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x000000000013f2aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rax; mov byte ptr [r10], 0; ret; 
0x00000000000cfb2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000cfb3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000cfb4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000cfb5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000cfb6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000cfb7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x00000000000328ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + rax*8 + 0x80]; ret; 
0x0000000000188d0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x00000000000b92ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000018b85a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; vzeroupper; ret; 
0x00000000000a898a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; add rax, rdi; ret; 
0x000000000018a8aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; vzeroupper; ret; 
0x00000000000b7f2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x00000000000b7f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000146b27: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; ret; 
0x0000000000178986: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000b7e46: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000b67b6: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, rdi; ret; 
0x00000000000b7b36: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x00000000000ac6e7: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001257c8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; ret; 
0x0000000000190fd9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x0000000000190fc9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x00000000000b7e69: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000b7e79: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dword ptr [rdi], edx; ret; 
0x00000000000cfb19: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x0000000000178998: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rcx], dx; ret; 
0x00000000000b7e58: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov word ptr [rdi], dx; ret; 
0x00000000000cf358: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor rax, rax; ret; 
0x0000000000042dea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000189e2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; ret; 
0x0000000000184e0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000000bc0ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000004679a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000012e8aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000cf67a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000010d5f5: test byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x10d604; ret; 
0x0000000000116973: test byte ptr [rax], ch; add al, byte ptr [rax]; add byte ptr [rax - 0x3d7cb7fe], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000183add: test byte ptr [rbp + 0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000178cd6: test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000042c56: test byte ptr [rbp - 0x6bf0bf40], 0xc6; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000183c31: test byte ptr [rbp - 0x7a958a2e], 0xf6; je 0x183c18; xor eax, eax; ret; 
0x000000000007bad9: test byte ptr [rbp - 0x7c000012], dh; ret; 
0x000000000012bfde: test byte ptr [rbx + 0x1c], 0x20; je 0x12bff0; pop rbx; ret; 
0x000000000013d88f: test byte ptr [rbx + rcx], ch; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000167ec7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000012dc52: test byte ptr [rbx], al; add byte ptr [rax - 0x73], cl; adc eax, 0x3d9b4; cmovne rax, rdx; ret; 
0x00000000001437f8: test byte ptr [rbx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000161318: test byte ptr [rbx], dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000157735: test byte ptr [rcx + 0x14c2847], -0x3a; mov qword ptr [rdi + 0x18], rsi; mov rax, r8; ret; 
0x00000000000a0732: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x162d3]; lea rdx, [rip + 0xd8f0c]; cmovne rax, rdx; ret; 
0x000000000009f212: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x17703]; lea rdx, [rip + 0xd60fc]; cmovne rax, rdx; ret; 
0x000000000009f0e2: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x1a8a3]; lea rdx, [rip + 0x12e8c]; cmovne rax, rdx; ret; 
0x00000000000a0792: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x86f3]; lea rdx, [rip + 0xda6bc]; cmovne rax, rdx; ret; 
0x000000000009f7c2: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9733]; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x000000000009f6f2: test byte ptr [rcx + 0x71], 2; lea rax, [rip + 0x9743]; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x00000000000bdf82: test byte ptr [rcx + 0x72], 8; lea rax, [rip + 0x11923]; lea rdx, [rip + 0x116fc]; cmovne rax, rdx; ret; 
0x000000000009f132: test byte ptr [rcx + 0xcc], 0x40; lea rax, [rip + 0x12340]; lea rdx, [rip + 0xf1c49]; cmovne rax, rdx; ret; 
0x000000000012fd5d: test byte ptr [rcx + 0xff009f8], -0x38; ret; 
0x00000000000b19af: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000007d737: test byte ptr [rcx + rbp - 0x7cb80000], dh; ret; 
0x0000000000093dad: test byte ptr [rcx + rcx*4 - 0x11], -0x18; sbb ch, al; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000c3493: test byte ptr [rcx - 0x41], al; add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000117ed3: test byte ptr [rcx], bl; add al, byte ptr [rax]; add bh, dh; ret; 
0x0000000000053be4: test byte ptr [rdi + rax*4], ah; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000e65ee: test byte ptr [rdi], -0x6c; ret; 
0x000000000013d526: test byte ptr [rdi], -0x7b; ret; 
0x0000000000049b3e: test byte ptr [rdi], -0x7c; ret; 
0x000000000008cd66: test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd76: test byte ptr [rdi], 8; sete al; ret; 
0x00000000000b77f8: test byte ptr [rdi], al; add byte ptr [rax], al; ret; 
0x00000000000f1d44: test byte ptr [rdi], bl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000341f8: test byte ptr [rdx + 0x200], al; ret; 
0x00000000000cf731: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x00000000000a09f0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b1b5]; lea rdx, [rip + 0x1b0ce]; cmove rax, rdx; ret; 
0x00000000000a0680: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b505]; lea rdx, [rip + 0x1b41e]; cmove rax, rdx; ret; 
0x00000000000a0520: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x1b685]; lea rdx, [rip + 0x1b59e]; cmove rax, rdx; ret; 
0x000000000012dc29: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db69: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012daa9: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x000000000012dc74: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x629f1]; lea rdx, [rip + 0x6297a]; cmove rax, rdx; ret; 
0x000000000012dbb4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ad1]; lea rdx, [rip + 0x62a5a]; cmove rax, rdx; ret; 
0x000000000012daf4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62b91]; lea rdx, [rip + 0x62b1a]; cmove rax, rdx; ret; 
0x000000000012dd34: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x62ee1]; lea rdx, [rip + 0x62e6a]; cmove rax, rdx; ret; 
0x00000000000a0989: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a0619: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04b9: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000000a09d4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xefcc1]; lea rdx, [rip + 0xefc4a]; cmove rax, rdx; ret; 
0x00000000000a0664: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0011]; lea rdx, [rip + 0xeff9a]; cmove rax, rdx; ret; 
0x00000000000a0504: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0191]; lea rdx, [rip + 0xf011a]; cmove rax, rdx; ret; 
0x00000000000a05c4: test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xf0661]; lea rdx, [rip + 0xf05ea]; cmove rax, rdx; ret; 
0x000000000012db10: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x71f7b]; lea rdx, [rip - 0x72062]; cmove rax, rdx; ret; 
0x000000000012dbd0: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7203b]; lea rdx, [rip - 0x72122]; cmove rax, rdx; ret; 
0x000000000012dc90: test byte ptr [rdx + 0x7d], 2; lea rax, [rip - 0x7211b]; lea rdx, [rip - 0x72202]; cmove rax, rdx; ret; 
0x00000000000ee48e: test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee43c: test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x00000000000a046f: test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd7f: test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x0000000000194f8f: test byte ptr [rdx + rax - 0x7ab80000], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000118ea6: test byte ptr [rdx], 0; add byte ptr [rax - 0x73], cl; add eax, 0xd69bf; add rsp, 8; ret; 
0x00000000000439d8: test byte ptr [rdx], bl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ac7ae: test byte ptr [rip + 0xfffffff], bh; mov ebp, 0xf80148c0; add rax, rsi; ret; 
0x00000000000b1dfd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x00000000000aa61a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000e6d4b: test byte ptr [rsi], bh; or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000161a5b: test byte ptr [rsi], ch; or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000006f61e: test byte ptr [rsi], cl; add eax, 0x83480000; ret; 
0x00000000000a5dcc: test byte ptr [rsp], dh; add bh, dh; ret; 
0x00000000000a892a: test cl, bh; jne 0xa8908; ret; 
0x00000000000a88cc: test cl, cl; je 0xa88d8; cmp ecx, esi; jne 0xa88c0; ret; 
0x000000000012df0c: test cl, cl; jne 0x12deb8; mov rax, rdi; ret; 
0x00000000000bb4df: test cl, cl; jne 0xbb4d0; ret; 
0x00000000000bb58f: test cl, cl; jne 0xbb580; ret; 
0x00000000000bb84f: test cl, cl; jne 0xbb840; sub rax, 1; ret; 
0x0000000000190ed7: test dh, 0x40; jne 0x190e10; lea rax, [rdi + 0xf]; ret; 
0x0000000000192366: test dh, 0x40; jne 0x192330; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000bc1aa: test dh, 0xf0; je 0xbc0d2; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000190f1d: test dh, 4; jne 0x190e10; lea rax, [rdi + 0xb]; ret; 
0x00000000000b1915: test dh, al; add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000026204: test dh, bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a861d: test dh, dh; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000271f9: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000190e54: test dl, 0x40; jne 0x190e10; lea rax, [rdi + 7]; ret; 
0x00000000001922b2: test dl, 0x40; jne 0x192330; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000ee45a: test dl, 1; je 0xee417; and ebx, 8; je 0xee3f7; pop rbx; ret; 
0x0000000000190e82: test dl, 4; jne 0x190e10; lea rax, [rdi + 3]; ret; 
0x0000000000101931: test dl, al; add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x63], cl; and byte ptr [rax - 0x7d], cl; ret; 
0x00000000001395c9: test dl, bl; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret; 
0x0000000000082932: test dl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000a87ee: test dl, cl; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000cfac7: test dl, dl; je 0xcfae0; mov cl, dl; and cl, 0xf; je 0xcfaf0; ret; 
0x0000000000040fbb: test dl, dl; jne 0x40f98; ret; 
0x00000000000bb6ff: test dl, dl; jne 0xbb6f0; lea rax, [rcx - 1]; ret; 
0x00000000000a28d4: test dl, dl; mov edx, 0; cmove rax, rdx; ret; 
0x0000000000156112: test dword ptr [rax + 0x48000000], ebx; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000043329: test dword ptr [rax + 0x48000000], ebx; add esp, 0x98; ret; 
0x0000000000197044: test dword ptr [rax + 0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r14; ret; 
0x0000000000188c4b: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x000000000018a6d3: test dword ptr [rax + 2], ebx; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000018b3e3: test dword ptr [rax + 2], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7b2b: test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x000000000017c903: test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000b907b: test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000b8f7b: test dword ptr [rax + 8], edx; add byte ptr [rax], al; ret; 
0x0000000000155c87: test dword ptr [rax + rax + 0x1b80000], eax; add byte ptr [rax], al; add byte ptr [rbp - 0x7b], al; in al, 0x74; ret; 
0x0000000000190f5f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x191030; lea rax, [rdi + 7]; ret; 
0x0000000000184907: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x00000000000cf5af: test dword ptr [rax + rax - 0xf580000], ebp; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x000000000011c70c: test dword ptr [rax + rax], 0x1600c764; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011c6f4: test dword ptr [rax + rax], 0x8964d8f7; add bh, byte ptr [rax - 1]; ret; 
0x00000000000a04e2: test dword ptr [rax + rax], ecx; lea rdx, [rip + 0xcdc44]; cmovne rax, rdx; ret; 
0x0000000000098d07: test dword ptr [rax + rax], edi; add byte ptr [rbx + 0x153e6d2d], al; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000a53d8: test dword ptr [rax + rbp*8 - 0x76b70001], esi; ret; 
0x000000000017cdbb: test dword ptr [rax - 0x7fffffff], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000e2ce7: test dword ptr [rax], 0x50f0000; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000f1e15: test dword ptr [rax], 0x89480000; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000007a3ba: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000010db1c: test dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x10db30; ret; 
0x000000000006251c: test dword ptr [rax], ebx; add byte ptr [rax + 0x63], cl; ret; 
0x000000000007533f: test dword ptr [rax], ecx; idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017cd5b: test dword ptr [rax], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000074f4d: test dword ptr [rax], edx; idiv edi; inc dword ptr [rcx]; ret; 
0x000000000013b6b3: test dword ptr [rax], esp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x00000000000466fe: test dword ptr [rbp + 0x1a], esi; add byte ptr [rcx], al; xor eax, eax; pop rbx; ret; 
0x000000000009d4dd: test dword ptr [rbp + 0x48000000], ebp; add esp, 0x10; mov eax, r12d; pop r12; ret; 
0x000000000009d600: test dword ptr [rbp + 0x48000000], ebp; add esp, 0x18; ret; 
0x000000000014ec03: test dword ptr [rbp + 0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000012fef4: test dword ptr [rbp + 0x48000001], ebx; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000018d5fe: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x00000000001200e7: test dword ptr [rbp - 0x2708fff4], edi; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000578c3: test dword ptr [rbp], edi; add byte ptr [rax], al; leave; ret; 
0x000000000010e0f1: test dword ptr [rbx + 0x48000000], esi; add esp, 0x78; ret; 
0x00000000001493b8: test dword ptr [rbx + 0x48000000], esp; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000190f18: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x190e10; lea rax, [rdi + 0xb]; ret; 
0x00000000000cef30: test dword ptr [rbx + 1], ecx; add byte ptr [rax], al; ret; 
0x00000000000cf4e0: test dword ptr [rbx + 1], edi; add byte ptr [rax], al; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf4e8: test dword ptr [rbx + 1], esp; add byte ptr [rax], al; lea rax, [rdi - 0x10]; ret; 
0x00000000001788d8: test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x00000000001788b8: test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x00000000001787d0: test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x00000000000b9170: test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000018e647: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000014f665: test dword ptr [rbx + rax*2 - 0x13], ecx; inc dword ptr [rcx + 0xfffb]; add byte ptr [rdi], cl; xchg edi, eax; ret; 
0x000000000017cc67: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018ea96: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000017cc07: test dword ptr [rbx + rax], esp; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000167d03: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000016d623: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000012dad2: test dword ptr [rbx], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x3db54; cmovne rax, rdx; ret; 
0x0000000000137e3a: test dword ptr [rbx], ecx; add byte ptr [rcx], al; add rsp, 8; ret; 
0x0000000000139f89: test dword ptr [rcx + 0x48000000], eax; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000010e6e7: test dword ptr [rcx + 0x48000000], ebx; add esp, 0x68; ret; 
0x00000000000521f7: test dword ptr [rcx + 0x48000000], ecx; add esp, 0x10; pop rbx; ret; 
0x0000000000081d34: test dword ptr [rcx + 0x48000000], edx; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000001785da: test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000018e61d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000b7712: test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000018e52d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e459: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000018e43d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cef77: test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000192d07: test dword ptr [rcx + rax], edx; add byte ptr [rax], al; ret; 
0x00000000000cef47: test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x0000000000066231: test dword ptr [rcx + rcx*4 - 9], 0xe8f4894d; ret; 
0x00000000001521ae: test dword ptr [rdi + 0x48000000], ebx; add esp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000ca59d: test dword ptr [rdi + 0x48000000], ebx; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000013e0a0: test dword ptr [rdi + 0x48000000], ecx; add esp, 0x58; pop rbx; pop rbp; ret; 
0x00000000001474ec: test dword ptr [rdi + 0x48000000], esp; add esp, 0x68; pop rbx; pop rbp; ret; 
0x0000000000160c67: test dword ptr [rdi + rax*8], edx; setne al; movzx eax, al; ret; 
0x00000000000b7877: test dword ptr [rdi + rax], eax; add byte ptr [rax], al; ret; 
0x00000000000b7857: test dword ptr [rdi + rax], esp; add byte ptr [rax], al; ret; 
0x000000000013ab8e: test dword ptr [rdi + rdi*8 - 1], esi; inc dword ptr [rbp - 0x77]; ret; 
0x000000000017eeaa: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000013e584: test dword ptr [rdi], eax; add al, 0; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000043c2a: test dword ptr [rdi], eax; setne al; movzx eax, al; ret; 
0x00000000001152b2: test dword ptr [rdx + 0x48000000], edx; add esp, 0x60; pop rbp; ret; 
0x000000000010e828: test dword ptr [rdx + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x000000000009e8cf: test dword ptr [rdx + 0x4e], ebx; clc; call ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000018a7b1: test dword ptr [rdx + 1], edi; add byte ptr [rax], al; vzeroupper; ret; 
0x000000000017cd29: test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000017ccf9: test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018b219: test dword ptr [rdx + 4], eax; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7a11: test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000018e65b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000018e559: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000b8e59: test dword ptr [rdx + 9], esi; add byte ptr [rax], al; ret; 
0x000000000018f992: test dword ptr [rdx + rax], edi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018e362: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000433e7: test dword ptr [rdx - 0x2708ffe6], ecx; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017cbe1: test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017cbb9: test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000017ccc9: test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000178897: test dword ptr [rdx], eax; add byte ptr [rax], al; ret; 
0x000000000017cc39: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000113874: test dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000014471e: test dword ptr [rip + 0xf000002], esp; mov cl, 0x15; cmpsb byte ptr [rsi], byte ptr [rdi]; ret; 
0x0000000000184c8e: test dword ptr [rip - 0x3affffff], ebp; std; xlatb; ret; 
0x00000000000cf58d: test dword ptr [rsi + 0x48000000], edi; lea eax, [rdi - 0x10]; ret; 
0x000000000010df76: test dword ptr [rsi + 0x48000000], esp; add esp, 0x68; pop rbp; pop r12; ret; 
0x0000000000190e7d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x190e10; lea rax, [rdi + 3]; ret; 
0x0000000000192692: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000018b4e5: test dword ptr [rsi + 1], esi; add byte ptr [rax], al; vzeroupper; ret; 
0x00000000000b7835: test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000b7815: test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000b772d: test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x00000000000a0527: test dword ptr [rsi - 0x72b7ffff], esi; adc eax, 0x1b59e; cmove rax, rdx; ret; 
0x000000000014e870: test dword ptr [rsi], edi; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000018e868: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x00000000000e1c32: test eax, 0x10010d8; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000095203: test eax, 0x1001570; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x15707e; ret; 
0x00000000000d3781: test eax, 0x3948fffb; ret; 
0x000000000009f813: test eax, 0x48000120; cmove eax, edx; ret; 
0x00000000000a8634: test eax, 0x48001f0f; mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x0000000000110fc3: test eax, 0x64000dae; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010d7c3: test eax, 0x64000de6; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000042354: test eax, 0x7fffff; je 0x42360; ret; 
0x0000000000127b43: test eax, 0x8948ffef; ret; 
0x00000000001207c3: test eax, 0xf7000cb6; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000116ec3: test eax, 0xf7000d4f; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x00000000000cf561: test eax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf611: test eax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x000000000011cfa3: test eax, eax; cmove eax, edx; ret; 
0x000000000012d235: test eax, eax; cmove rax, rdx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x00000000001143da: test eax, eax; cmovns eax, edx; ret; 
0x000000000004739d: test eax, eax; cmovs eax, edx; ret; 
0x0000000000114e60: test eax, eax; je 0x114e65; ret; 
0x0000000000115cfc: test eax, eax; je 0x115d18; mov qword ptr [rip + 0xd9939], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000116fd5: test eax, eax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x0000000000117864: test eax, eax; je 0x117873; add rax, 8; mov qword ptr [rip + 0xd7f1d], rax; mov rax, r8; ret; 
0x000000000012eade: test eax, eax; je 0x12eaf0; add rsp, 8; ret; 
0x0000000000140ede: test eax, eax; je 0x140ee8; ret; 
0x0000000000141d64: test eax, eax; je 0x141d70; add rsp, 8; ret; 
0x00000000001471ba: test eax, eax; je 0x1471c0; ret; 
0x0000000000148435: test eax, eax; je 0x148440; xor eax, eax; ret; 
0x00000000001534e0: test eax, eax; je 0x153465; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000153461: test eax, eax; je 0x153470; pop rbx; ret; 
0x00000000001573e3: test eax, eax; je 0x157410; mov eax, r8d; ret; 
0x0000000000157433: test eax, eax; je 0x157460; mov eax, r8d; ret; 
0x000000000017ee93: test eax, eax; je 0x17ee98; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fe78: test eax, eax; je 0x17fe7d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000184e38: test eax, eax; je 0x184e10; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000001888ad: test eax, eax; je 0x188864; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000001888d2: test eax, eax; je 0x1888f0; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018d228: test eax, eax; je 0x18d1c4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000018d25d: test eax, eax; je 0x18d270; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000026f5e: test eax, eax; je 0x26f68; ret; 
0x000000000008e591: test eax, eax; je 0x8e5a0; pop rbx; ret; 
0x0000000000092789: test eax, eax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000009e2f5: test eax, eax; je 0x9e350; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000009f414: test eax, eax; je 0x9f420; pop rbx; pop rbp; pop r12; ret; 
0x000000000009f898: test eax, eax; je 0x9f8aa; lea rax, [rip + 0x14f6bd]; mov qword ptr [rip + 0x14f69e], rax; add rsp, 8; ret; 
0x00000000000ac256: test eax, eax; je 0xac270; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000000ac76e: test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; add rax, rsi; ret; 
0x00000000000ac71a: test eax, eax; je 0xac6f0; bsr eax, eax; add rax, rdi; ret; 
0x00000000000b16f3: test eax, eax; je 0xb1700; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000000dd795: test eax, eax; je 0xdd7c4; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f346: test eax, eax; jl 0x11f35d; je 0x11f34d; ret; 
0x000000000002fdb8: test eax, eax; jle 0x2fde0; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000010e1ec: test eax, eax; jne 0x10e200; syscall; cmp rax, -0x1000; ja 0x10e250; ret; 
0x0000000000116150: test eax, eax; jne 0x116114; xor eax, eax; pop rbp; ret; 
0x0000000000117e18: test eax, eax; jne 0x117e28; sub dword ptr [rip + 0xd7a2d], 1; ret; 
0x0000000000118877: test eax, eax; jne 0x1188e0; sub dword ptr [rip + 0xd6fce], 1; add rsp, 8; ret; 
0x0000000000124ab4: test eax, eax; jne 0x124af0; sub dword ptr [rip + 0xcb219], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000124b8c: test eax, eax; jne 0x124ba8; sub dword ptr [rip + 0xcb141], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000125b11: test eax, eax; jne 0x125b50; sub dword ptr [rip + 0xca1f0], 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000126564: test eax, eax; jne 0x1265a0; sub dword ptr [rip + 0xc98c1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012663c: test eax, eax; jne 0x126658; sub dword ptr [rip + 0xc97e9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000012d0f7: test eax, eax; jne 0x12d108; cmp qword ptr [rdi], 0; je 0x12d110; ret; 
0x000000000012efec: test eax, eax; jne 0x12ef99; mov rax, rdi; ret; 
0x000000000013193a: test eax, eax; jne 0x131980; sub dword ptr [rip + 0xbe6a3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x0000000000131a1f: test eax, eax; jne 0x131a40; sub dword ptr [rip + 0xbe5be], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013258a: test eax, eax; jne 0x1325d0; sub dword ptr [rip + 0xbdb1b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013266f: test eax, eax; jne 0x132690; sub dword ptr [rip + 0xbda36], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000001332ba: test eax, eax; jne 0x133300; sub dword ptr [rip + 0xbce9b], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000013339c: test eax, eax; jne 0x1333b8; sub dword ptr [rip + 0xbcdb9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013471a: test eax, eax; jne 0x134760; sub dword ptr [rip + 0xbbba3], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x00000000001347fc: test eax, eax; jne 0x134818; sub dword ptr [rip + 0xbbac1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x0000000000137e33: test eax, eax; jne 0x137ea0; sub dword ptr [rip + 0xb85fa], 1; add rsp, 8; ret; 
0x0000000000138874: test eax, eax; jne 0x1388b0; sub dword ptr [rip + 0xb7bc1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013894c: test eax, eax; jne 0x138968; sub dword ptr [rip + 0xb7ae9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000013c54b: test eax, eax; jne 0x13c568; mov eax, r8d; ret; 
0x000000000014132e: test eax, eax; jne 0x141338; ret; 
0x000000000014145c: test eax, eax; jne 0x141468; pop rbx; pop rbp; pop r12; ret; 
0x0000000000142614: test eax, eax; jne 0x142660; sub dword ptr [rip + 0xae3f9], 1; pop rbp; ret; 
0x000000000014319c: test eax, eax; jne 0x1431a8; ret; 
0x00000000001484d5: test eax, eax; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x000000000014c88a: test eax, eax; jne 0x14c8d0; sub dword ptr [rip + 0xa4493], 1; mov dword ptr fs:[r8], r9d; add rsp, 0x18; ret; 
0x000000000014c96c: test eax, eax; jne 0x14c988; sub dword ptr [rip + 0xa43b1], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x000000000014e02a: test eax, eax; jne 0x14e030; ret; 
0x000000000015472a: test eax, eax; jne 0x154730; ret; 
0x000000000015cd4d: test eax, eax; jne 0x15cd80; sub dword ptr [rip + 0x94900], 1; add rsp, 8; ret; 
0x000000000015ce93: test eax, eax; jne 0x15ced0; sub dword ptr [rip + 0x947ba], 1; mov rax, r8; pop rbp; ret; 
0x000000000015cf2d: test eax, eax; jne 0x15cf60; sub dword ptr [rip + 0x94720], 1; add rsp, 8; ret; 
0x000000000018412b: test eax, eax; jne 0x184110; sub eax, ecx; vzeroupper; ret; 
0x0000000000184610: test eax, eax; jne 0x1845f0; sub eax, ecx; vzeroupper; ret; 
0x0000000000184941: test eax, eax; jne 0x184960; xor eax, eax; vzeroupper; ret; 
0x0000000000184904: test eax, eax; jne 0x1849a0; xor eax, eax; vzeroupper; ret; 
0x0000000000188c81: test eax, eax; jne 0x188cb0; mov rax, r8; vzeroupper; ret; 
0x0000000000188c48: test eax, eax; jne 0x188cf0; mov rax, r8; vzeroupper; ret; 
0x000000000018c3f1: test eax, eax; jne 0x18c410; xor eax, eax; vzeroupper; ret; 
0x000000000018c3b4: test eax, eax; jne 0x18c450; xor eax, eax; vzeroupper; ret; 
0x000000000018c869: test eax, eax; jne 0x18c850; sub eax, ecx; vzeroupper; ret; 
0x000000000018cd4e: test eax, eax; jne 0x18cd30; sub eax, ecx; vzeroupper; ret; 
0x000000000018d631: test eax, eax; jne 0x18d660; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000190e04: test eax, eax; jne 0x190e14; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000196c1b: test eax, eax; jne 0x196b70; add rsp, 0x38; ret; 
0x0000000000198c93: test eax, eax; jne 0x198cc0; sub dword ptr [rip + 0x55b62], 1; pop rbx; ret; 
0x0000000000198fa4: test eax, eax; jne 0x198ff0; sub dword ptr [rip + 0x57569], 1; pop rbp; ret; 
0x0000000000033d9d: test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x00000000000466f8: test eax, eax; jne 0x46728; sub dword ptr [rip + 0x1a7585], 1; xor eax, eax; pop rbx; ret; 
0x00000000000475f5: test eax, eax; jne 0x47630; sub dword ptr [rip + 0x1a6ee0], 1; pop rbp; ret; 
0x0000000000055624: test eax, eax; jne 0x555ac; sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000057d4a: test eax, eax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000006104e: test eax, eax; jne 0x61088; sub dword ptr [rip + 0x18d6f7], 1; mov eax, r8d; pop rbx; ret; 
0x00000000000627aa: test eax, eax; jne 0x627b0; pop rbx; ret; 
0x000000000006300e: test eax, eax; jne 0x63028; mov rdx, qword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x0000000000092724: test eax, eax; jne 0x92718; ret; 
0x000000000009354c: test eax, eax; jne 0x93540; ret; 
0x00000000000949f3: test eax, eax; jne 0x94a30; sub dword ptr [rip + 0x159e02], 1; pop rbx; ret; 
0x0000000000098d04: test eax, eax; jne 0x98d88; sub dword ptr [rip + 0x153e6d], 1; pop rbp; ret; 
0x0000000000099f4b: test eax, eax; jne 0x99f88; sub dword ptr [rip + 0x154f22], 1; pop rbx; ret; 
0x000000000009e84f: test eax, eax; jne 0x9e840; xor eax, eax; ret; 
0x000000000009f85a: test eax, eax; jne 0x9f870; lea rax, [rip + 0x14f6fb]; mov qword ptr [rip + 0x14f6dc], rax; ret; 
0x00000000000ac0b3: test eax, eax; jne 0xac190; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac155: test eax, eax; jne 0xac1b0; xor eax, eax; ret; 
0x00000000000ac125: test eax, eax; jne 0xac1d0; xor eax, eax; ret; 
0x00000000000ac3a1: test eax, eax; jne 0xac3f0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ac608: test eax, eax; jne 0xac680; xor eax, eax; ret; 
0x00000000000ac637: test eax, eax; jne 0xac6b0; xor eax, eax; ret; 
0x00000000000ce293: test eax, eax; jne 0xce370; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000000ce335: test eax, eax; jne 0xce390; xor eax, eax; ret; 
0x00000000000ce305: test eax, eax; jne 0xce3b0; xor eax, eax; ret; 
0x00000000000d2908: test eax, eax; jne 0xd2940; sub dword ptr [rip + 0x11c88d], 1; add rsp, 8; ret; 
0x00000000000d4a8b: test eax, eax; jne 0xd4aa0; mov rax, r8; add rsp, 8; ret; 
0x00000000000dfc24: test eax, eax; jne 0xdfc60; sub dword ptr [rip + 0x10f741], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000dfcfc: test eax, eax; jne 0xdfd18; sub dword ptr [rip + 0x10f669], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1b54: test eax, eax; jne 0xe1b90; sub dword ptr [rip + 0x10d981], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e1c2c: test eax, eax; jne 0xe1c48; sub dword ptr [rip + 0x10d8a9], 1; mov dword ptr fs:[r8], r9d; add rsp, 8; ret; 
0x00000000000e2ec7: test eax, eax; jne 0xe2ed0; add rsp, 8; ret; 
0x00000000001158e7: test eax, eax; jns 0x1158f0; mov byte ptr [r12], 0; mov rax, r12; pop r12; ret; 
0x000000000015cc36: test eax, eax; js 0x15cc48; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000008aeaf: test eax, eax; js 0x8aeb8; ret; 
0x00000000000a05a0: test eax, eax; lea rdx, [rip + 0x1b9d7]; lea rax, [rip + 0x1b950]; cmovne rax, rdx; ret; 
0x000000000012dcf5: test eax, eax; lea rdx, [rip + 0x5e022]; lea rax, [rip + 0x5e07b]; cmove rax, rdx; ret; 
0x00000000000a0585: test eax, eax; lea rdx, [rip + 0xeb7a2]; lea rax, [rip + 0xeb7fb]; cmove rax, rdx; ret; 
0x000000000012dd10: test eax, eax; lea rdx, [rip - 0x71da9]; lea rax, [rip - 0x71e30]; cmovne rax, rdx; ret; 
0x000000000009526a: test eax, eax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000119989: test eax, eax; mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a2c37: test eax, eax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x000000000011fde7: test eax, eax; or al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010fde7: test eax, eax; or eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000062e24: test eax, eax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000522b0: test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x0000000000145aca: test eax, eax; sete al; add rsp, 8; ret; 
0x0000000000042c57: test eax, eax; sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000014e03d: test eax, eax; setne al; add rsp, 8; movzx eax, al; add eax, 1; ret; 
0x00000000000246d3: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000014b0cd: test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000062e66: test eax, eax; setne al; movzx eax, al; neg eax; pop rbp; ret; 
0x0000000000184a1c: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000006d15f: test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x000000000017cb93: test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000143197: test eax, ebx; or al, byte ptr [rax]; test rax, rax; jne 0x1431a8; ret; 
0x00000000000422f9: test eax, edx; jne 0x42310; and esi, 0x80000000; movss dword ptr [rdi], xmm0; movd xmm0, esi; ret; 
0x000000000017cd8b: test eax, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000012db17: test eax, esp; clc; dec dword ptr [rax - 0x73]; adc eax, 0xfff8df9e; cmove rax, rdx; ret; 
0x000000000010dde7: test eax, esp; or eax, 0xc76400; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000198914: test ebp, ebp; jne 0x198900; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094aaa: test ebp, ebp; jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x000000000018e4ee: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000121cf7: test ebx, ebx; je 0x121d10; movsxd rbx, ebx; mov qword ptr [rip + 0xca65b], rbx; pop rbx; ret; 
0x0000000000125512: test ebx, ebx; je 0x125528; pop rbx; pop rbp; pop r12; ret; 
0x0000000000106d51: test ebx, ebx; jne 0x106d38; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127b4c: test ebx, ebx; jne 0x127b58; pop rbx; pop rbp; pop r12; ret; 
0x0000000000153b75: test ebx, ebx; jne 0x153b80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160d20: test ebx, ebx; jne 0x160d30; pop rbx; ret; 
0x0000000000160d50: test ebx, ebx; jne 0x160d60; pop rbx; ret; 
0x00000000001975c3: test ebx, ebx; jne 0x1975ad; pop rbx; ret; 
0x000000000019883c: test ebx, ebx; jne 0x198820; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198967: test ebx, ebx; jne 0x198940; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198b89: test ebx, ebx; jne 0x198b75; pop rbx; ret; 
0x0000000000198c2b: test ebx, ebx; jne 0x198c10; pop rbx; ret; 
0x000000000017cb70: test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000012d2f5: test ebx, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x00000000000ac578: test ebx, esi; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000295e0: test ebx, esi; add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 + 0x5c], 0x24; sub byte ptr [rcx - 0x77], cl; ret; 
0x00000000000a0460: test ecx, 0x400000; je 0xa0435; lea rax, [rip + 0xe4a81]; test byte ptr [rdx + 0xcd], 1; je 0xa0435; ret; 
0x00000000000bcd70: test ecx, 0x400000; je 0xbcd45; lea rax, [rip + 0xcf121]; test byte ptr [rdx + 0xcd], 1; je 0xbcd45; ret; 
0x0000000000155a65: test ecx, 0xd148ffec; call 0xffffffff895e21f9; ret; 
0x000000000013f298: test ecx, ecx; je 0x13f248; cmp r11d, r9d; jg 0x13f256; mov byte ptr [r10], 0; ret; 
0x000000000012331f: test ecx, ecx; jne 0x123328; ret; 
0x0000000000123388: test ecx, ecx; jne 0x123390; ret; 
0x0000000000123c6f: test ecx, ecx; jne 0x123c78; ret; 
0x0000000000123ccc: test ecx, ecx; jne 0x123cd8; ret; 
0x000000000005586c: test ecx, ecx; jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x000000000008a71a: test ecx, ecx; jne 0x8a730; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000000bcb3f: test ecx, ecx; jne 0xbcb18; mov rax, r8; ret; 
0x0000000000115caa: test edi, edi; je 0x115ce8; call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x000000000011892a: test edi, edi; je 0x118934; mov dword ptr [rip + 0xd3a14], edi; ret; 
0x0000000000157b8c: test edi, edi; je 0x157b9d; call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000002fdcd: test edi, edi; je 0x2fdaf; call 0x15ff30; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000000440c9: test edi, edi; je 0x440f0; lea edx, [rax + 1]; mov dword ptr [rip + 0x1a80d6], edx; ret; 
0x0000000000047462: test edi, edi; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000047546: test edi, edi; je 0x47560; lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x00000000001175bc: test edi, edi; jne 0x1175d0; mov eax, 1; ret; 
0x000000000012bb34: test edi, edi; jne 0x12bb1e; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000137d71: test edi, edi; jne 0x137d60; pop rbx; ret; 
0x0000000000141372: test edi, edi; jne 0x141360; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000015e10a: test edi, edi; jns 0x15e110; ret; 
0x00000000000e5219: test edi, edi; js 0xe5220; ret; 
0x000000000006c6b5: test edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000041f87: test edx, eax; je 0x41f90; ret; 
0x00000000000c79de: test edx, ebp; and eax, dword ptr [rax]; add dh, dh; ret; 
0x0000000000079d71: test edx, edi; dec dword ptr [rcx - 0x77]; ret; 
0x000000000017cc99: test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000011d221: test edx, edx; je 0x11d230; cmp rdi, rdx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x000000000014b1e0: test edx, edx; je 0x14b1f0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b2a0: test edx, edx; je 0x14b2b0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b3a0: test edx, edx; je 0x14b3b0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000183ade: test edx, edx; je 0x183ab8; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000008d2f3: test edx, edx; je 0x8d300; ret; 
0x000000000008d753: test edx, edx; je 0x8d760; ret; 
0x00000000000b1bf6: test edx, edx; je 0xb1bfe; bsf eax, edx; ret; 
0x00000000000b1c9b: test edx, edx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3e: test edx, edx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e6a: test edx, edx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1dfa: test edx, edx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf79a: test edx, edx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72e: test edx, edx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000102a79: test edx, edx; jne 0x102a14; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x0000000000123571: test edx, edx; jne 0x123580; ret; 
0x0000000000123ea1: test edx, edx; jne 0x123eb0; ret; 
0x000000000012ee93: test edx, edx; jne 0x12ee80; sub rsp, 8; call 0x12e560; ret; 
0x0000000000157f54: test edx, edx; jne 0x157f68; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000157fa4: test edx, edx; jne 0x157fb8; mov r8d, 1; mov eax, r8d; ret; 
0x0000000000183c32: test edx, edx; jne 0x183ca0; test esi, esi; je 0x183c18; xor eax, eax; ret; 
0x00000000001972b3: test edx, edx; jne 0x197332; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x0000000000063086: test edx, edx; jne 0x63090; sub dword ptr [rdi], 1; ret; 
0x0000000000083f38: test edx, edx; jne 0x83f48; sub dword ptr [rip + 0x16a83d], 1; ret; 
0x0000000000086e1f: test edx, edx; jne 0x86e10; ret; 
0x00000000000908a7: test edx, edx; jne 0x908b0; ret; 
0x0000000000090fec: test edx, edx; jne 0x91000; sub dword ptr [rip + 0x15d7c9], 1; ret; 
0x00000000000916e7: test edx, edx; jne 0x916d8; ret; 
0x00000000000938f8: test edx, edx; jne 0x93908; sub dword ptr [rip + 0x15aebd], 1; ret; 
0x0000000000094fb5: test edx, edx; jne 0x94f98; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000009e929: test edx, edx; jne 0x9e920; ret; 
0x00000000000bbf55: test edx, edx; jne 0xbbf5d; mov rax, rdi; ret; 
0x00000000000bcc36: test edx, edx; jne 0xbcc28; xor eax, eax; ret; 
0x00000000000bccd0: test edx, edx; jne 0xbccb0; ret; 
0x00000000000bdfbb: test edx, edx; jne 0xbdfb0; ret; 
0x00000000001138d8: test edx, edx; js 0x1138e4; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x000000000013cb4e: test edx, edx; js 0x13cb60; mov rax, rdx; movsxd rdx, ecx; ret; 
0x0000000000043ddb: test edx, edx; mov edx, 1; cmove eax, edx; ret; 
0x00000000000bd212: test edx, edx; sete al; ret; 
0x000000000010c98a: test esi, 0x575ff00; mov word ptr [rdi], si; xor eax, eax; ret; 
0x000000000006d53c: test esi, edx; add byte ptr [rax], al; add byte ptr [rcx - 9], al; ret; 
0x0000000000038db8: test esi, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000183c36: test esi, esi; je 0x183c18; xor eax, eax; ret; 
0x000000000002fd84: test esi, esi; je 0x2fd90; cmp esi, 3; je 0x2fd90; ret; 
0x0000000000094d81: test esi, esi; je 0x94d90; or eax, 2; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000011396d: test esi, esi; jne 0x11394c; or eax, 0x80000000; mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x000000000011a8d4: test esi, esi; jne 0x11a8e0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000011a982: test esi, esi; jne 0x11a990; pop rbp; pop r12; pop r13; ret; 
0x0000000000042c38: test esi, esi; jne 0x42c48; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000057b37: test esi, esi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057be1: test esi, esi; jne 0x57bd2; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057bc8: test esi, esi; jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000094d29: test esi, esi; jne 0x94d40; and dword ptr [rdi + 8], 0xfffffffe; xor eax, eax; ret; 
0x00000000000a2856: test esi, esi; jne 0xa27f0; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000b1d65: test esi, esi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf695: test esi, esi; jne 0xcf69d; xor rax, rax; ret; 
0x00000000001115f5: test esp, 0x8948fffc; ret; 
0x000000000011c24c: test esp, esp; jne 0x11c289; pop rbx; pop rbp; pop r12; ret; 
0x000000000009e8cc: test esp, esp; jne 0x2372e; pop rbx; pop rbp; pop r12; ret; 
0x0000000000167d02: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000160c66: test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000043c29: test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x00000000000a87ed: test r10b, r9b; jne 0xa87d0; mov rax, r8; ret; 
0x00000000001972b2: test r10d, r10d; jne 0x197332; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000009e8cb: test r12, r12; jne 0x2372e; pop rbx; pop rbp; pop r12; ret; 
0x000000000011c24b: test r12d, r12d; jne 0x11c289; pop rbx; pop rbp; pop r12; ret; 
0x0000000000117863: test r8, r8; je 0x117873; add rax, 8; mov qword ptr [rip + 0xd7f1d], rax; mov rax, r8; ret; 
0x000000000009a059: test r8b, r8b; jne 0x9a069; mov dword ptr [rip + 0x154e10], 0; ret; 
0x00000000000ca599: test r8b, r8b; jne 0xca641; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000017ee92: test r8d, r8d; je 0x17ee98; xchg edx, eax; sub eax, edx; ret; 
0x000000000017fe77: test r8d, r8d; je 0x17fe7d; xchg edx, eax; sub eax, edx; ret; 
0x00000000001484d4: test r8d, r8d; jne 0x1484e0; mov dword ptr [rsi], 0; ret; 
0x0000000000196c1a: test r8d, r8d; jne 0x196b70; add rsp, 0x38; ret; 
0x00000000000627a9: test r8d, r8d; jne 0x627b0; pop rbx; ret; 
0x00000000000a8929: test r9b, dil; jne 0xa8908; ret; 
0x00000000000cf560: test rax, 1; je 0xcf4c5; lea rax, [rdi - 0x10]; ret; 
0x00000000000cf610: test rax, 1; je 0xcf680; lea rax, [rdi - 0x10]; ret; 
0x000000000012d234: test rax, rax; cmove rax, rdx; mov qword ptr [rip + 0xc2c36], rax; pop rbp; ret; 
0x0000000000114e5f: test rax, rax; je 0x114e65; ret; 
0x0000000000115cfb: test rax, rax; je 0x115d18; mov qword ptr [rip + 0xd9939], rax; mov eax, 1; add rsp, 8; ret; 
0x0000000000116fd4: test rax, rax; je 0x116fdc; mov qword ptr [rax], rdx; ret; 
0x000000000012eadd: test rax, rax; je 0x12eaf0; add rsp, 8; ret; 
0x0000000000141d63: test rax, rax; je 0x141d70; add rsp, 8; ret; 
0x00000000001534df: test rax, rax; je 0x153465; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x0000000000153460: test rax, rax; je 0x153470; pop rbx; ret; 
0x000000000008e590: test rax, rax; je 0x8e5a0; pop rbx; ret; 
0x0000000000092788: test rax, rax; je 0x9279c; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000009f413: test rax, rax; je 0x9f420; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f345: test rax, rax; jl 0x11f35d; je 0x11f34d; ret; 
0x000000000011614f: test rax, rax; jne 0x116114; xor eax, eax; pop rbp; ret; 
0x000000000014319b: test rax, rax; jne 0x1431a8; ret; 
0x0000000000055623: test rax, rax; jne 0x555ac; sub rdx, 1; jne 0x55610; mov eax, 1; ret; 
0x0000000000057d49: test rax, rax; jne 0x57db0; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x0000000000092723: test rax, rax; jne 0x92718; ret; 
0x000000000009354b: test rax, rax; jne 0x93540; ret; 
0x000000000009e84e: test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x0000000000095269: test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov qword ptr [rip + 0x159c24], rax; ret; 
0x0000000000119988: test rax, rax; mov qword ptr [rbx], rax; pop rbx; setne al; movzx eax, al; ret; 
0x00000000000a2c36: test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret; 
0x0000000000062e23: test rax, rax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x0000000000145ac9: test rax, rax; sete al; add rsp, 8; ret; 
0x0000000000198913: test rbp, rbp; jne 0x198900; pop rbx; pop rbp; pop r12; ret; 
0x0000000000094aa9: test rbp, rbp; jne 0x94adc; pop rbx; pop rbp; pop r12; ret; 
0x0000000000125511: test rbx, rbx; je 0x125528; pop rbx; pop rbp; pop r12; ret; 
0x0000000000106d50: test rbx, rbx; jne 0x106d38; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127b4b: test rbx, rbx; jne 0x127b58; pop rbx; pop rbp; pop r12; ret; 
0x0000000000160d1f: test rbx, rbx; jne 0x160d30; pop rbx; ret; 
0x0000000000160d4f: test rbx, rbx; jne 0x160d60; pop rbx; ret; 
0x00000000001975c2: test rbx, rbx; jne 0x1975ad; pop rbx; ret; 
0x000000000019883b: test rbx, rbx; jne 0x198820; pop rbx; pop rbp; pop r12; ret; 
0x0000000000198966: test rbx, rbx; jne 0x198940; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000198b88: test rbx, rbx; jne 0x198b75; pop rbx; ret; 
0x0000000000198c2a: test rbx, rbx; jne 0x198c10; pop rbx; ret; 
0x000000000005586b: test rcx, rcx; jne 0x557f3; sub rdx, 1; jne 0x55858; mov eax, 1; ret; 
0x0000000000115ca9: test rdi, rdi; je 0x115ce8; call 0x8b9e0; mov eax, 1; add rsp, 8; ret; 
0x0000000000157b8b: test rdi, rdi; je 0x157b9d; call 0x22330; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000002fdcc: test rdi, rdi; je 0x2fdaf; call 0x15ff30; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000047461: test rdi, rdi; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000047545: test rdi, rdi; je 0x47560; lea rdx, [rip + 0x1a9d9f]; call 0xbd470; pop rbx; ret; 
0x00000000001175bb: test rdi, rdi; jne 0x1175d0; mov eax, 1; ret; 
0x000000000012bb33: test rdi, rdi; jne 0x12bb1e; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000137d70: test rdi, rdi; jne 0x137d60; pop rbx; ret; 
0x0000000000141371: test rdi, rdi; jne 0x141360; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000041f86: test rdx, rax; je 0x41f90; ret; 
0x000000000011d220: test rdx, rdx; je 0x11d230; cmp rdi, rdx; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x00000000000b1c9a: test rdx, rdx; je 0xb1cb0; bsf rax, rdx; ret; 
0x00000000000b1c3d: test rdx, rdx; je 0xb1cc0; bsf rax, rdx; ret; 
0x00000000000b1e69: test rdx, rdx; je 0xb1e90; bsf rax, rdx; ret; 
0x00000000000b1df9: test rdx, rdx; je 0xb1ea0; bsf rax, rdx; ret; 
0x00000000000cf799: test rdx, rdx; je 0xcf7c0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000000cf72d: test rdx, rdx; je 0xcf7d0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000012ee92: test rdx, rdx; jne 0x12ee80; sub rsp, 8; call 0x12e560; ret; 
0x0000000000086e1e: test rdx, rdx; jne 0x86e10; ret; 
0x00000000000908a6: test rdx, rdx; jne 0x908b0; ret; 
0x00000000000916e6: test rdx, rdx; jne 0x916d8; ret; 
0x0000000000094fb4: test rdx, rdx; jne 0x94f98; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x000000000009e928: test rdx, rdx; jne 0x9e920; ret; 
0x00000000000bbf54: test rdx, rdx; jne 0xbbf5d; mov rax, rdi; ret; 
0x000000000013cb4d: test rdx, rdx; js 0x13cb60; mov rax, rdx; movsxd rdx, ecx; ret; 
0x000000000011a8d3: test rsi, rsi; jne 0x11a8e0; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000011a981: test rsi, rsi; jne 0x11a990; pop rbp; pop r12; pop r13; ret; 
0x0000000000057b36: test rsi, rsi; jne 0x57b60; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000057be0: test rsi, rsi; jne 0x57bd2; cmp cx, 0x7fff; jne 0x57bcc; mov eax, 1; ret; 
0x0000000000057bc7: test rsi, rsi; jne 0x57bf8; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000a2855: test rsi, rsi; jne 0xa27f0; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000b1d64: test rsi, rsi; jne 0xb1d6d; xor rax, rax; ret; 
0x00000000000cf694: test rsi, rsi; jne 0xcf69d; xor rax, rax; ret; 
0x000000000010c989: test si, 0xff00; jne 0x10c995; mov word ptr [rdi], si; xor eax, eax; ret; 
0x00000000000a861c: test sil, sil; jne 0xa8610; mov qword ptr [rdx], rcx; ret; 
0x00000000000271f8: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000000cf637: test spl, spl; jne 0xcf660; test al, 0xf0; jne 0xcf650; lea rax, [rdi - 0x10]; ret; 
0x0000000000188a20: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849e0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000188a40: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849f0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000188a8c: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000184a1e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x00000000001885b3: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000188955: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x0000000000184a85: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000018d390: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000188a10: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000001849d0: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000184950: tzcnt eax, eax; cmp rdx, rax; jbe 0x1849c0; add rax, rdi; vzeroupper; ret; 
0x000000000018c400: tzcnt eax, eax; cmp rdx, rax; jbe 0x18c470; add rax, rdi; vzeroupper; ret; 
0x0000000000185290: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000001852b0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000185276: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000185000: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fa3: tzcnt ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184008: tzcnt ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fcc: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183fec: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e40: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e60: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e80: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000183e26: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000184072: tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000000421e6: ucomisd xmm0, xmm4; jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000042215: ucomisd xmm5, xmm1; jae 0x42230; mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000421e7: ucomiss xmm0, xmm4; jp 0x421f8; jne 0x421f8; addsd xmm0, xmm0; ret; 
0x0000000000042513: ucomiss xmm0, xmm4; jp 0x42520; jne 0x42520; addss xmm0, xmm0; ret; 
0x0000000000042216: ucomiss xmm5, xmm1; jae 0x42230; mov rax, qword ptr [rip + 0x1a9c4e]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x000000000004253c: ucomiss xmm5, xmm1; jae 0x42558; mov rax, qword ptr [rip + 0x1a9928]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x00000000000bbb65: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000018d7bb: ud2; nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000018be39: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x18be2b; vzeroupper; ret; 
0x000000000018fd51: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018b982: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018fd55: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018b986: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018a840: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x00000000001893f0: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000185121: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x000000000018c061: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqd xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x000000000018b574: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c94: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a844: vmovdqu xmm3, xmmword ptr [rsi + r8 - 0x10]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018aea4: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893f4: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018fd5e: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018a8f4: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b57f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c9f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a84f: vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018be6f: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000018b990: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000018aeae: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893fe: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000018fd5a: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000018a8f0: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm0; vzeroupper; ret; 
0x000000000018b98c: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000190439: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000018be75: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000018b57b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189c9b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a84b: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + r8 - 0x10], xmm3; vzeroupper; ret; 
0x000000000018aeaa: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000001893fa: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000019043d: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000018fd3d: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018b8bb: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018fd41: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018b8bf: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018a860: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x0000000000189410: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018fd1d: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018b594: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189cb4: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a864: vmovdqu ymm3, ymmword ptr [rsi + r8 - 0x20]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018aec4: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000189414: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018bb1c: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bbc3: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018fd4a: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018fd31: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018fd2b: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018bb0d: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bb12: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bb17: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000018bdd4: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018fd26: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018ba5c: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b5c0: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000189ce0: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018a890: vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x000000000018bbb4: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018aa27: vmovdqu ymmword ptr [rdi + 0x40], ymm6; sub r8, 0x20; jb 0x18a645; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018bbb9: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018b766: vmovdqu ymmword ptr [rdi + 0x60], ymm7; lea rax, [rdi + 0x80]; vzeroupper; ret; 
0x0000000000189d36: vmovdqu ymmword ptr [rdi + 0x60], ymm7; mov byte ptr [rdi + 0x80], 0; vzeroupper; ret; 
0x000000000018bbbe: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000018aa36: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vzeroupper; ret; 
0x000000000018b59f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189cbf: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a86f: vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018aece: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018941e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000018bdd9: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018bd50: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018b8c9: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018ba61: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018ba27: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018bddf: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018ba67: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018ba2d: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018ba33: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018ba39: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000018fd46: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000018bdd0: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000018fd22: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x000000000018ba58: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000018b8c5: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000018bd56: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000018b5bc: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; lea rax, [rdi + 0x41]; vzeroupper; ret; 
0x0000000000189cdc: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; mov byte ptr [rdi + 0x41], 0; vzeroupper; ret; 
0x000000000018a88c: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + 0x20], ymm3; mov byte ptr [rdi + 0x40], cl; vzeroupper; ret; 
0x000000000018b59b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; lea rax, [rdi + r8]; vzeroupper; ret; 
0x0000000000189cbb: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; mov byte ptr [rdi + r8], 0; vzeroupper; ret; 
0x000000000018a86b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + r8 - 0x20], ymm3; vzeroupper; ret; 
0x000000000018aeca: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000018941a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000019042f: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000190433: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000019064e: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000190654: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000190926: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000001909ec: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019091f: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000190c83: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000019083e: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x00000000001909e5: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000019080f: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000190c8a: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000190bed: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190662: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000190845: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000190c92: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x000000000019084d: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000190c7d: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000190838: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x000000000019065c: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000190bf5: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000190448: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000019044c: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000000e44a7: vmovupd xmm8, xmmword ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000190059: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190060: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000190067: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000018fcb1: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018ff00: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fd02: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fcc6: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fef9: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcfb: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000018fcbf: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fef2: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000018fcb8: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000018fcf4: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000190401: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001901b4: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901bb: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901c2: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000001901c9: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000019041c: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001905de: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905e5: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000001905ec: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000190541: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000190548: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000019054f: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000001903ee: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e7: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000001903e0: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000011a01c: vpaddsw ymm0, ymm15, ymmword ptr [rcx + 0xf]; lahf; ret; 
0x0000000000184fb0: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x185250; xor eax, eax; vzeroupper; ret; 
0x000000000018bf64: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x18c190; xor eax, eax; vzeroupper; ret; 
0x000000000012dc25: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dcac]; lea rdx, [rip + 0x5dc35]; cmove rax, rdx; ret; 
0x000000000012db65: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5dd8c]; lea rdx, [rip + 0x5dd15]; cmove rax, rdx; ret; 
0x000000000012daa5: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0x5de4c]; lea rdx, [rip + 0x5ddd5]; cmove rax, rdx; ret; 
0x00000000000a0985: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeaf7c]; lea rdx, [rip + 0xeaf05]; cmove rax, rdx; ret; 
0x00000000000a0615: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb2cc]; lea rdx, [rip + 0xeb255]; cmove rax, rdx; ret; 
0x00000000000a04b5: vpcmpeqb xmm10, xmm15, xmmword ptr [rdi]; test byte ptr [rdx + 0x7d], 2; lea rax, [rip + 0xeb44c]; lea rdx, [rip + 0xeb3d5]; cmove rax, rdx; ret; 
0x00000000001850e7: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x0000000000185125: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x000000000018c025: vpcmpeqd xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x000000000018c065: vpcmpeqd xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x00000000001850eb: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x185000; ret; 
0x000000000018c029: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x18bfb0; ret; 
0x0000000000184cab: vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000018493d: vpmovmskb eax, ymm1; test eax, eax; jne 0x184960; xor eax, eax; vzeroupper; ret; 
0x0000000000188c7d: vpmovmskb eax, ymm1; test eax, eax; jne 0x188cb0; mov rax, r8; vzeroupper; ret; 
0x000000000018c3ed: vpmovmskb eax, ymm1; test eax, eax; jne 0x18c410; xor eax, eax; vzeroupper; ret; 
0x0000000000184ff3: vpmovmskb eax, ymm2; sub eax, -1; jne 0x185000; vzeroupper; ret; 
0x000000000018bfa3: vpmovmskb eax, ymm2; sub eax, -1; jne 0x18bfb0; vzeroupper; ret; 
0x00000000000388f5: vpsubsb xmm12, xmm15, xmmword ptr [rbx + rbx*4 - 2]; dec dword ptr [rbp - 0x73]; je 0x38906; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x0000000000184fb4: vptest ymm5, ymm0; jae 0x185250; xor eax, eax; vzeroupper; ret; 
0x000000000018bf68: vptest ymm5, ymm0; jae 0x18c190; xor eax, eax; vzeroupper; ret; 
0x0000000000183e34: vzeroupper; ret; 
0x00000000001849c0: vzeroupper; xor eax, eax; ret; 
0x00000000000abf41: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000001974a6: wait; and edi, 0x20; je 0x1974bc; movss xmm0, dword ptr [rip + 0x25ecc]; divss xmm0, dword ptr [rip + 0x271d8]; ret; 
0x000000000013873f: wait; out dx, al; dec dword ptr [rax - 0x77]; add eax, 0xb5197; add rsp, 8; ret; 
0x00000000000bb11d: wrmsr; in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb19f: wrmsr; in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb2a1: wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000011fab0: wrpkru; xor eax, eax; ret; 
0x00000000000a421a: xchg al, ah; adc dword ptr [rax], eax; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000013a99b: xchg al, bh; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000c9750: xchg bh, cl; add eax, 0x89490000; ret; 
0x00000000000a079a: xchg byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xda6bc; cmovne rax, rdx; ret; 
0x0000000000120045: xchg byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120054; ret; 
0x00000000000abf40: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x0000000000123497: xchg byte ptr [rbx - 0x172ceffc], cl; and eax, 1; ret; 
0x0000000000184e89: xchg byte ptr [rdi], cl; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret; 
0x000000000011383c: xchg byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001170f1: xchg byte ptr [rip - 0x76b3dd00], cl; rol dh, 0x46; inc dword ptr [rax]; ret; 
0x0000000000153492: xchg cl, bl; or dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000c9474: xchg dl, bh; add eax, 0x89490000; ret; 
0x0000000000079cfb: xchg dl, bh; dec dword ptr [rcx - 0x77]; ret; 
0x000000000002a5a7: xchg dword ptr [rax + 0x39480000], esp; ret; 
0x0000000000087496: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x874a8; ret; 
0x00000000000bbf27: xchg dword ptr [rax - 0xd000000], edx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000011f605: xchg dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11f614; ret; 
0x0000000000190be9: xchg dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000189d3c: xchg dword ptr [rax], eax; vzeroupper; ret; 
0x00000000000bcb3e: xchg dword ptr [rbp + 0x4cd575c9], eax; mov eax, eax; ret; 
0x0000000000189a2a: xchg dword ptr [rcx + 1], edx; add byte ptr [rax], al; je 0x189b70; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000010d285: xchg dword ptr [rcx + rax], ecx; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000045fea: xchg dword ptr [rcx - 0x18000000], ebx; pop rsp; ret; 
0x0000000000117555: xchg dword ptr [rdi + rsi*8 - 1], eax; mov r8d, 1; mov eax, r8d; add rsp, 8; ret; 
0x0000000000117e2a: xchg dword ptr [rip + 0xd7a20], eax; cmp eax, 1; jg 0x117e36; ret; 
0x000000000018b845: xchg dword ptr [rsi + 0xffffffc], esi; test byte ptr [rax + 0x48fffffc], ah; mov eax, edi; vzeroupper; ret; 
0x0000000000184d77: xchg ebp, eax; add byte ptr [rax], al; add byte ptr [rbx + 0x14840c0], al; clc; vzeroupper; ret; 
0x0000000000198e08: xchg ebp, eax; call 0xffffffffc761ea0d; add eax, 0x56319; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000e7a50: xchg ebp, eax; call 0xffffffffe90e7a50; mov dh, 0xa8; dec dword ptr [rax - 0x77]; ret; 
0x00000000001145d7: xchg ebp, eax; js 0x1145e7; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001209d7: xchg ebp, eax; mov ah, 0xc; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000162fd7: xchg ebp, eax; mov cs, word ptr [rax]; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000ff759: xchg ebp, eax; nop word ptr [rax + rax]; mov eax, 2; ret; 
0x00000000000260c7: xchg ebp, eax; ret; 
0x00000000000a87eb: xchg ebp, eax; rol dword ptr [rbp - 0x7c], 0xca; jne 0xa87d0; mov rax, r8; ret; 
0x00000000000a8920: xchg ebp, eax; rol dword ptr [rcx + 0x39], 0xd0; setne dil; test r9b, dil; jne 0xa8908; ret; 
0x000000000014e040: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; add eax, 1; ret; 
0x00000000000246d6: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000001175e8: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000011f5c1: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000156755: xchg ebp, eax; ror byte ptr [rcx + 0x1b803], 0; add bl, ch; ret; 
0x000000000014a362: xchg ebp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000062e69: xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbp; ret; 
0x00000000001028b2: xchg ebp, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000439d7: xchg ebp, eax; test byte ptr [rdx], bl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcccf: xchg ebp, eax; test edx, edx; jne 0xbccb0; ret; 
0x0000000000118bd7: xchg ebp, eax; xor cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118cd7: xchg ebp, eax; xor dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2b58: xchg ebx, eax; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c9ee0: xchg ebx, eax; add eax, 0x74db8500; sbb dword ptr [rcx], edi; ret; 
0x0000000000198742: xchg ebx, eax; fadd dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000b6e4f: xchg ebx, eax; lea rcx, [r11 + rcx]; notrack jmp rcx; nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000091f36: xchg ebx, eax; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000088a88: xchg ebx, eax; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000122ad8: xchg ebx, eax; or al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000000ee463: xchg ebx, eax; pop rbx; ret; 
0x000000000007161e: xchg ebx, eax; ret; 
0x0000000000047f88: xchg ebx, eax; sbb al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000008584f: xchg ebx, eax; xor r8d, r8d; mov rax, r8; ret; 
0x00000000001558d5: xchg ebx, ecx; in al, dx; dec dword ptr [rax - 0x2f]; call 0xffffffff895e2069; ret; 
0x00000000000e2ca4: xchg ecx, eax; adc byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000a050b: xchg ecx, eax; add dword ptr [rdi], ecx; add byte ptr [rax - 0x73], cl; adc eax, 0xf011a; cmove rax, rdx; ret; 
0x00000000001221e3: xchg ecx, eax; fmul dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000001207ab: xchg ecx, eax; idiv edi; mov rax, qword ptr [rsp]; add rsp, 0x20; pop rbp; ret; 
0x00000000000d4aa3: xchg ecx, eax; jae 0xd4ab7; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x3f76b3fe], 0x48; add esp, 8; ret; 
0x00000000000d0ddb: xchg ecx, eax; mov al, 0x11; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000181a11: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000113ddb: xchg ecx, eax; or byte ptr [rip + 0x64d8f700], 0x89; add bh, byte ptr [rax - 1]; ret; 
0x0000000000116cdb: xchg ecx, eax; push rcx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012dafb: xchg ecx, eax; sub eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; adc eax, 0x62b1a; cmove rax, rdx; ret; 
0x000000000018013f: xchg ecx, eax; sub eax, edx; ret; 
0x00000000000cf282: xchg ecx, ebx; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000009f6fa: xchg edi, eax; add byte ptr [rax], al; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x000000000009f7ca: xchg edi, eax; add byte ptr [rax], al; lea rdx, [rip + 0xd72fc]; cmovne rax, rdx; ret; 
0x0000000000181d40: xchg edi, eax; add dword ptr [rax], eax; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000198b85: xchg edi, eax; call 0xffffffffdb9ed48a; jne 0x198b75; pop rbx; ret; 
0x0000000000102a7c: xchg edi, eax; cmp dword ptr [rdi + 0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret; 
0x00000000000827ee: xchg edi, eax; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000000a8e2f: xchg edi, eax; idiv edi; add rsp, 8; ret; 
0x000000000015ca85: xchg edi, eax; insd dword ptr [rdi], dx; sti; dec dword ptr [rax - 0x77]; ret; 
0x000000000012b220: xchg edi, eax; lock dec dword ptr [rax - 0x7d]; ret; 
0x0000000000063014: xchg edi, eax; mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x00000000000ec4a4: xchg edi, eax; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000033d99: xchg edi, eax; mov eax, dword ptr [rdx + rax]; test eax, eax; jne 0x33da8; mov eax, r8d; ret; 
0x000000000008ce10: xchg edi, eax; movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x000000000008cce0: xchg edi, eax; movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000827f5: xchg edi, eax; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000138745: xchg edi, eax; push rcx; or eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000000f1b65: xchg edi, eax; ret; 
0x000000000012227a: xchg edi, eax; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; ret; 
0x00000000000ecafa: xchg edx, eax; add al, 0; add byte ptr [rcx - 0x75], cl; adc byte ptr [r8 + 0x63], r9b; ret; 
0x000000000018829c: xchg edx, eax; lea rcx, [rip + 0x1321c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001868e7: xchg edx, eax; lea rcx, [rip + 0x14bd1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001839cc: xchg edx, eax; lea rcx, [rip + 0x17aec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000181a07: xchg edx, eax; lea rcx, [rip + 0x19ab1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000055067: xchg edx, eax; mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000011feda: xchg edx, eax; mov edi, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010feda: xchg edx, eax; mov edi, 0xd8f7000d; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001201da: xchg edx, eax; mov esp, 0xd8f7000c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001131da: xchg edx, eax; mov word ptr [rip + 0x64d8f700], cs; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112be4: xchg edx, eax; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000012924c: xchg edx, eax; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x00000000001950a8: xchg edx, eax; ret; 
0x00000000000a093a: xchg edx, eax; sbb edi, eax; call ptr [rbp + 0x31]; rol byte ptr [rcx + 0x5c], 0x41; pop rbp; ret; 
0x000000000017ee97: xchg edx, eax; sub eax, edx; ret; 
0x00000000000a6be9: xchg edx, edx; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000121ec2: xchg esi, eax; movsb byte ptr [rdi], byte ptr [rsi]; or al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000008274c: xchg esi, eax; nop dword ptr [rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000a2859: xchg esi, eax; nop word ptr [rax + rax]; xor r8d, r8d; mov rax, r8; ret; 
0x00000000000d4eb6: xchg esi, eax; or byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000a70cd: xchg esi, eax; ret; 
0x000000000003e1cd: xchg esi, eax; sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x0000000000198ef6: xchg esp, eax; call 0xffffffff80389efb; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000149f89: xchg esp, eax; rcr byte ptr [rbx + 0x5d], 0xf; mov dh, 0xc0; pop r12; ret; 
0x00000000000304ea: xchg esp, eax; ret; 
0x00000000000d068c: xchg esp, eax; rol byte ptr [rcx + rbp - 0x40], 0x89; ret; 
0x00000000001004fe: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000157f8c: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rcx + rcx*4 - 0x40], al; ret; 
0x00000000000522b3: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000062e27: xchg esp, eax; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000e51fc: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x00000000000328e8: xchg esp, eax; sbb eax, dword ptr [rax]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000009f6f9: xchg r15d, eax; add byte ptr [rax], al; lea rdx, [rip + 0x1449c]; cmovne rax, rdx; ret; 
0x0000000000197334: xlatb; call 0x197440; add rsp, 0x30; mov rax, r12; pop r12; ret; 
0x000000000005b6a8: xlatb; cmp rax, 9; ja 0x5b680; mov rax, r8; ret; 
0x00000000000bbb5c: xlatb; jb 0xbbb62; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000011d227: xlatb; jne 0x11d218; mov rax, qword ptr [rax + 8]; ret; 
0x000000000016d5fb: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000a05a5: xlatb; mov ecx, 0x8d480001; add eax, 0x1b950; cmovne rax, rdx; ret; 
0x000000000013c729: xlatb; mov qword ptr [r9], rdi; ret; 
0x000000000005b463: xlatb; mov rax, r10; ret; 
0x00000000000abfa4: xlatb; ret; 
0x00000000000cf46f: xlatb; retf 0xf66; xlatb; ret; 
0x0000000000188759: xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000001887b5: xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000018493f: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000000ac153: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000000ac606: xlatb; rol dword ptr [rbp + 0x317475c0], 0xc0; ret; 
0x00000000000ac635: xlatb; rol dword ptr [rbp + 0x317575c0], 0xc0; ret; 
0x00000000000ac123: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000188c46: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000184902: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000000ac5a4: xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000184cad: xlatb; ror dword ptr [rdi], 0xbd; ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000000b1a35: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000004732a: xlatb; shl rdi, 0x20; or rax, rdi; ret; 
0x000000000011f0ca: xlatb; shr rax, 0xc; xor al, al; or eax, edx; ret; 
0x000000000010a595: xlatb; stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000160cbc: xlatb; xor eax, eax; ret; 
0x00000000000b67a8: xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000b39d0: xor ah, ah; mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000000b39e0: xor ah, ah; mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000b3a10: xor ah, ah; mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000b673e: xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x00000000000b3a80: xor ah, ah; mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000120455: xor al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120464; ret; 
0x00000000000a4f89: xor al, 0; add byte ptr [rcx - 9], al; ret; 
0x00000000000a1f73: xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x000000000012f7b2: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f812: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x12f825; add rsp, 0x28; ret; 
0x000000000004374c: xor al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4375c; add rsp, 0x98; ret; 
0x0000000000162368: xor al, 0x3b; out dx, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000147900: xor al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000420e1: xor al, 0x48; and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, qword ptr [rip + 0x17abfb]; ret; 
0x000000000004203d: xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret; 
0x00000000000ac6bb: xor al, 0x48; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000184ddb: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x000000000018cc0c: xor al, 0xa; jne 0x18c9a6; vzeroupper; ret; 
0x0000000000057b54: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000121f18: xor al, 0xdb; or al, 0; jae 0x121f2a; mov rdx, qword ptr [rip + 0xcdb33]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000e7668: xor al, 0xe8; cmc; dec dword ptr [rax - 0x77]; ret; 
0x000000000018cc09: xor al, 0xe; cmp esi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x00000000001211ed: xor al, 0xf7; dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x38; ret; 
0x00000000000cef48: xor al, 1; add byte ptr [rax], al; ret; 
0x0000000000120165: xor al, 1; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120174; ret; 
0x00000000001163ac: xor al, al; lock dec dword ptr [rax + 1]; ret; 
0x000000000011f0cf: xor al, al; or eax, edx; ret; 
0x000000000009f3eb: xor al, bh; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000001204e5: xor al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1204f4; ret; 
0x000000000006300d: xor al, byte ptr [rbp + 0x481675c0]; mov edx, dword ptr [rdi + 0x88]; mov qword ptr [rdx + 8], rcx; mov dword ptr [rdx + 4], 1; ret; 
0x000000000017cc3a: xor al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000115505: xor al, byte ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x115514; ret; 
0x0000000000148eb1: xor al, ch; cmp edx, ebp; add byte ptr [rax], al; mov rax, r12; pop r12; ret; 
0x0000000000112a0c: xor ax, ax; ret; 
0x00000000000bc9fc: xor bh, bh; or al, 0; lea rax, [rip + 0x12699]; cmove rax, rdx; ret; 
0x00000000000e81a6: xor bh, byte ptr [rax + 1]; ret; 
0x000000000008d2ed: xor bh, byte ptr [rax - 1]; test edx, edx; je 0x8d300; ret; 
0x000000000008d74d: xor bh, byte ptr [rax - 1]; test edx, edx; je 0x8d760; ret; 
0x0000000000042302: xor bl, 0xf; adc dword ptr [rdi], eax; movd xmm0, esi; ret; 
0x00000000000f2491: xor byte ptr [r11 + 0x5d], r11b; pop r12; ret; 
0x00000000000cf03c: xor byte ptr [r11], r15b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000ac0ad: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x00000000000ac11f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000010c527: xor byte ptr [r15], r9b; adc dword ptr [rdi + 0x40], eax; ret; 
0x00000000001278fd: xor byte ptr [r8 + 1], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000091972: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008c10b: xor byte ptr [r8 - 0x77], r9b; sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000010dbd7: xor byte ptr [rax + 0x106], bh; syscall; cmp rax, -0x1000; ja 0x10dbf0; ret; 
0x00000000001278fe: xor byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001509c5: xor byte ptr [rax + 1], bh; movups xmmword ptr [rdx], xmm1; ret; 
0x00000000001509c4: xor byte ptr [rax + 1], dil; movups xmmword ptr [rdx], xmm1; ret; 
0x000000000014d3bf: xor byte ptr [rax + rax + 0x1b80000], 0; add byte ptr [rax], al; ret; 
0x000000000009a0c7: xor byte ptr [rax - 0x75], cl; add eax, 0x151e11; mov qword ptr [rax], rdi; ret; 
0x00000000000961cd: xor byte ptr [rax - 0x75], cl; add eax, 0x155d0b; mov qword ptr [rax], rdx; ret; 
0x0000000000055064: xor byte ptr [rax - 0x75], cl; xchg edx, eax; mov byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000091973: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000149fe6: xor byte ptr [rax - 0x77], cl; jae 0x14a00b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000057d64: xor byte ptr [rax - 0x77], cl; or byte ptr [r8 + 2], r15b; ret; 
0x000000000008c10c: xor byte ptr [rax - 0x77], cl; sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c0595: xor byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; imul cl; ret; 
0x0000000000102e43: xor byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7bf00001], al; ret; 
0x00000000001465a0: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; lea rax, [rip + 0xaa553]; add rsp, 8; ret; 
0x00000000000bc1d4: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000023a47: xor byte ptr [rax], al; add byte ptr [rax], al; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x0000000000120995: xor byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x1209a4; ret; 
0x0000000000047c94: xor byte ptr [rax], al; add byte ptr [rcx - 0x1e], al; jg 0x47c27; adc byte ptr [rcx - 0x3f76bbea], cl; ret; 
0x000000000008749e: xor byte ptr [rax], al; je 0x874a8; ret; 
0x00000000000bb337: xor byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000cf040: xor byte ptr [rbp + 0x3d], dh; ret; 
0x00000000000cf03f: xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000bbdd9: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x00000000000a08d3: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xe560; lea rdx, [rip + 0xd24e9]; cmovne rax, rdx; ret; 
0x00000000000a0833: xor byte ptr [rbp + rdx - 0x80], 0xe5; add cl, byte ptr [rax - 0x73]; add eax, 0xe5e0; lea rdx, [rip + 0xd2569]; cmovne rax, rdx; ret; 
0x000000000009f75a: xor byte ptr [rbp + rdx - 0x80], 0xe6; add cl, byte ptr [rax - 0x73]; add eax, 0xaef9; lea rdx, [rip + 0xc51a2]; cmovne rax, rdx; ret; 
0x00000000000df4cf: xor byte ptr [rbx + 0x10fe092d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000008df24: xor byte ptr [rbx + 0x11], dh; lea rcx, [rdx + 1]; mov qword ptr [rsi + 0x28], rcx; mov byte ptr [rdx], al; mov eax, r8d; ret; 
0x00000000000863f9: xor byte ptr [rbx + 0x14], dh; lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x00000000000863f8: xor byte ptr [rbx + 0x14], sil; lea rdx, [rax + 1]; mov qword ptr [r8 + 0x28], rdx; mov byte ptr [rax], dil; mov eax, r9d; ret; 
0x000000000009e847: xor byte ptr [rbx + 0x16], dh; mov rax, qword ptr [rax + 8]; test rax, rax; jne 0x9e840; xor eax, eax; ret; 
0x00000000000423fc: xor byte ptr [rbx + 0x560f0017], ah; add eax, 0x17a319; mulss xmm0, dword ptr [rip + 0x17af79]; ret; 
0x0000000000040f56: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000009125b: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000196ea1: xor byte ptr [rbx + 0x5d], bl; pop r14; ret; 
0x000000000014c41f: xor byte ptr [rbx + 0xa48a12d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x000000000013464f: xor byte ptr [rbx + 0xbbc692d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000001331ef: xor byte ptr [rbx + 0xbcf612d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000125bef: xor byte ptr [rbx + 0xca1692d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x0000000000123f1f: xor byte ptr [rbx + 0xcbc812d], al; add byte ptr [rcx], al; mov dword ptr fs:[r9], ebx; mov rax, r8; pop rbx; ret; 
0x00000000000f69ec: xor byte ptr [rbx + rax*4], dl; ret; 
0x000000000009f34f: xor byte ptr [rbx - 0x1c89f607], al; cmp esi, 9; mov edx, 0xffffffff; cmovbe eax, edx; ret; 
0x00000000000929dd: xor byte ptr [rbx - 0x3f8a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cf03d: xor byte ptr [rbx], bh; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000874fd: xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000006669b: xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001972ba: xor byte ptr [rcx + rcx*4 - 0x20], cl; pop r12; ret; 
0x0000000000043491: xor byte ptr [rcx + rcx*4 - 0x39], al; mov dword ptr [rsp + 8], eax; call 0x94640; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000010e233: xor byte ptr [rcx + rcx*4 - 0x39], al; mov qword ptr [rsp + 8], rax; call 0x94640; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000010f52a: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000011f921: xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x11f980; ret; 
0x000000000010c528: xor byte ptr [rdi], cl; adc dword ptr [rdi + 0x40], eax; ret; 
0x00000000000bbc8a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000014ffec: xor byte ptr [rdi], cl; adc dword ptr [rsi], eax; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000a15f0: xor byte ptr [rdx + 0xd], 0x2a; cmp rcx, 0xd; je 0xa15fe; xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000a15fa: xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x0000000000118d98: xor byte ptr [rip + 0x64d8f700], cl; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000042753: xor byte ptr [rip - 0x3b7cb800], dl; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000b19fc: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000000ac0ae: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000ac120: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000427be: xor byte ptr ds:[rip - 0x3b7cb800], dl; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000bb0c8: xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000bb0de: xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000bb100: xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000bb11e: xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000bb13e: xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000bb164: xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000bb180: xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000bb1a0: xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000bb1c0: xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000bb1e6: xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000bb208: xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000bb226: xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000bb246: xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000bb262: xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000bb282: xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000bb2a2: xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000bb2c2: xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000bb2e8: xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000bb338: xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000bb00e: xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000bb02c: xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000bb04c: xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000bb06e: xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000bb08e: xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000bb0ae: xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000baf44: xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000baf56: xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000baf6c: xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000baf84: xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000baf9a: xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000bafac: xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000bafca: xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000bafd6: xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000bafec: xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000baf30: xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x000000000017e0ad: xor cl, byte ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000118ba8: xor cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000118c64: xor cl, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000b6620: xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000041f56: xor dl, 0xf; adc dword ptr [rdi], eax; and rdx, rax; movq xmm0, rdx; ret; 
0x00000000000e81c7: xor dword ptr [rax + 1], edi; ret; 
0x000000000006ec67: xor dword ptr [rax - 0x77], ecx; ret; 
0x00000000000a861b: xor dword ptr [rax - 0x7c], eax; div byte ptr [rbp - 0x11]; mov qword ptr [rdx], rcx; ret; 
0x0000000000120385: xor dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120394; ret; 
0x00000000000986d0: xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000e2d40: xor dword ptr [rcx + rcx*4 - 0x31], eax; mov dword ptr [rsp + 0xc], eax; call 0x94640; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x000000000011fc25: xor dword ptr [rcx], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x11fc34; ret; 
0x00000000000246eb: xor dword ptr [rdi + 0x1c], 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000043c3b: xor dword ptr [rdx - 0x389bffe6], eax; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000012040b: xor dword ptr [rdx - 9], eax; dec dword ptr [rbx + 0x48082444]; add esp, 0x18; ret; 
0x0000000000118ca8: xor dword ptr [rip + 0x64d8f700], ecx; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011383b: xor dword ptr [rsi - 0x2708fff3], eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001133eb: xor eax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x000000000002448a: xor eax, 0x38c48348; pop rbx; pop rbp; ret; 
0x0000000000121131: xor eax, 0x448bfff7; and al, 0x18; add rsp, 0x28; ret; 
0x00000000001906f7: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000012dc37: xor eax, 0x480005dc; cmove eax, edx; ret; 
0x000000000009f827: xor eax, 0x480014c6; lea edx, [rip + 0xe434e]; test byte ptr [rax + 0x72], 0x10; lea rax, [rip + 0x1c103]; cmovne rax, rdx; ret; 
0x0000000000162f37: xor eax, 0x6400088f; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000145abf: xor eax, 0x6fbc0; call 0x22480; test rax, rax; sete al; add rsp, 8; ret; 
0x0000000000190d39: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000160fd1: xor eax, 0x8deba; ret; 
0x00000000000436c2: xor eax, 0x98c48148; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000000de744: xor eax, 0xa8c48148; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x000000000011896a: xor eax, 0xd8f7000d; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120237: xor eax, 0xf7000cbc; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011ff37: xor eax, 0xf7000cbf; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000011fc37: xor eax, 0xf7000cc2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000118d37: xor eax, 0xf7000d31; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010ff37: xor eax, 0xf7000dbf; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010dc37: xor eax, 0xf7000de2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000e4137: xor eax, 0xf700107d; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000a4f96: xor eax, 0xf7410000; ret; 
0x00000000001184b1: xor eax, dword ptr [0x28]; jne 0x1184c2; add rsp, 0xd8; ret; 
0x000000000011858a: xor eax, dword ptr [0x28]; jne 0x11859b; add rsp, 0xd8; ret; 
0x000000000011bf46: xor eax, dword ptr [0x28]; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c006: xor eax, dword ptr [0x28]; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e4: xor eax, dword ptr [0x28]; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c44d: xor eax, dword ptr [0x28]; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6ba: xor eax, dword ptr [0x28]; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x0000000000129d68: xor eax, dword ptr [0x28]; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012ba91: xor eax, dword ptr [0x28]; jne 0x12baa2; add rsp, 0xd8; ret; 
0x0000000000153c74: xor eax, dword ptr [0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce4: xor eax, dword ptr [0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d54: xor eax, dword ptr [0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db5: xor eax, dword ptr [0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e19: xor eax, dword ptr [0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e84: xor eax, dword ptr [0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f07: xor eax, dword ptr [0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000015443c: xor eax, dword ptr [0x28]; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155eaf: xor eax, dword ptr [0x28]; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000042b8e: xor eax, dword ptr [0x28]; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db6: xor eax, dword ptr [0x28]; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e03: xor eax, dword ptr [0x28]; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578bb: xor eax, dword ptr [0x28]; jne 0x57945; leave; ret; 
0x000000000008dbd1: xor eax, dword ptr [0x28]; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a44: xor eax, dword ptr [0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x000000000018b974: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x18b981; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000120485: xor eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x120494; ret; 
0x0000000000120e64: xor eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x120ed0; ret; 
0x0000000000199380: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000008e464: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000dd689: xor eax, eax; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000012bb8e: xor eax, eax; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000048072: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000094cd1: xor eax, eax; add rsp, 8; ret; 
0x00000000000342c4: xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000162fbd: xor eax, eax; call 0x10e690; add rsp, 8; sar eax, 0x1f; ret; 
0x000000000015794f: xor eax, eax; call 0x81900; xor eax, eax; add rsp, 8; ret; 
0x0000000000121488: xor eax, eax; cmp byte ptr [rcx], 0; je 0x121490; ret; 
0x000000000004736a: xor eax, eax; cmp byte ptr [rdi], 0; jne 0x47378; pop rbx; ret; 
0x00000000000ee478: xor eax, eax; cmp byte ptr [rsi], cl; je 0xee3bd; ret; 
0x0000000000102aa0: xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax + rax*8 + 5]; ret; 
0x00000000000d4243: xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret; 
0x0000000000122e74: xor eax, eax; cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x000000000008cd27: xor eax, eax; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x000000000011990e: xor eax, eax; cmp qword ptr [rsi], 0; mov rbx, rsi; je 0x119920; pop rbx; ret; 
0x0000000000157f84: xor eax, eax; cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x000000000010ffa1: xor eax, eax; cmp rcx, rdx; seta al; sbb eax, 0; ret; 
0x0000000000094c64: xor eax, eax; cmp rdi, rsi; sete al; ret; 
0x00000000000e51bb: xor eax, eax; cmp rdx, 0x1badface; setne al; ret; 
0x00000000000e51d6: xor eax, eax; cmp rdx, 0x1cd1; setne al; ret; 
0x00000000000e51a3: xor eax, eax; cmp rdx, 0x5346544e; setne al; ret; 
0x00000000000e5187: xor eax, eax; cmp rdx, 0xadf5; setne al; ret; 
0x000000000009418f: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000013c83a: xor eax, eax; mov byte ptr [rdi + 3], cl; movdqu xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi + rdx + 8], xmm0; ret; 
0x0000000000047af1: xor eax, eax; mov dword ptr [r11], ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f23c6: xor eax, eax; mov dword ptr [rbp + 0x30], edi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f248d: xor eax, eax; mov dword ptr [rbp + 0x30], r8d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000042c5d: xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000010c5f1: xor eax, eax; mov dword ptr [rbx + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000010c719: xor eax, eax; mov dword ptr [rbx + 4], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000008762f: xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000013b625: xor eax, eax; mov dword ptr [rdi + 8], 0x29; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x0000000000113914: xor eax, eax; mov dword ptr [rdi + 8], esi; ret; 
0x00000000000d4aa8: xor eax, eax; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x000000000004810d: xor eax, eax; mov dword ptr [rsi + 0xc], 0x1000b; ret; 
0x0000000000099618: xor eax, eax; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000098098: xor eax, eax; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000114744: xor eax, eax; mov eax, 0x127; syscall; cmp rax, -0x1000; ja 0x1147b8; ret; 
0x0000000000114804: xor eax, eax; mov eax, 0x128; syscall; cmp rax, -0x1000; ja 0x114878; ret; 
0x0000000000120747: xor eax, eax; mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x1207c0; ret; 
0x0000000000120527: xor eax, eax; mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000000e2ce4: xor eax, eax; mov eax, 0xf7; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000ee537: xor eax, eax; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000157711: xor eax, eax; mov eax, r8d; ret; 
0x000000000018c544: xor eax, eax; mov ecx, dword ptr [rdi + rdx + 0x20]; cmp ecx, dword ptr [rsi + rdx + 0x20]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c564: xor eax, eax; mov ecx, dword ptr [rdi + rdx + 0x40]; cmp ecx, dword ptr [rsi + rdx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c584: xor eax, eax; mov ecx, dword ptr [rdi + rdx + 0x60]; cmp ecx, dword ptr [rsi + rdx + 0x60]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c8aa: xor eax, eax; mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c9d1: xor eax, eax; mov ecx, dword ptr [rdi + rdx]; cmp ecx, dword ptr [rsi + rdx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018cd90: xor eax, eax; mov ecx, dword ptr [rdi]; cmp ecx, dword ptr [rsi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018c6e3: xor eax, eax; mov ecx, dword ptr [rsi + rdi + 0x20]; cmp ecx, dword ptr [rdx + rdi + 0x20]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c713: xor eax, eax; mov ecx, dword ptr [rsi + rdi + 0x40]; cmp ecx, dword ptr [rdx + rdi + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb8a: xor eax, eax; mov ecx, dword ptr [rsi + rdi]; cmp ecx, dword ptr [rdx + rdi]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018c837: xor eax, eax; mov edi, dword ptr [rsi + rcx + 0x40]; cmp edi, dword ptr [rdx + rcx + 0x40]; jne 0x18c529; vzeroupper; ret; 
0x000000000018c6b1: xor eax, eax; mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cb47: xor eax, eax; mov edi, dword ptr [rsi + rcx]; cmp edi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000018bfd0: xor eax, eax; mov edx, dword ptr [rdi]; cmp edx, dword ptr [rsi]; jne 0x18bfbc; ret; 
0x000000000018c73f: xor eax, eax; mov esi, dword ptr [rsi + rcx + 0x60]; cmp esi, dword ptr [rdx + rcx + 0x60]; jne 0x18c529; vzeroupper; ret; 
0x000000000018cc06: xor eax, eax; mov esi, dword ptr [rsi + rcx]; cmp esi, dword ptr [rdx + rcx]; jne 0x18c9a6; vzeroupper; ret; 
0x000000000009ef3a: xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x00000000000a863b: xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x0000000000160fcd: xor eax, eax; mov qword ptr [rip + 0x8deba], rsi; ret; 
0x0000000000046c89: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000046c7e: xor eax, eax; mov rax, r8; ret; 
0x000000000012d2e5: xor eax, eax; mov rcx, qword ptr [rbp - 8]; xor rcx, qword ptr fs:[0x28]; jne 0x12d3cd; leave; ret; 
0x0000000000048004: xor eax, eax; movsd qword ptr [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000a093f: xor eax, eax; pop r12; pop r13; ret; 
0x000000000012d19b: xor eax, eax; pop r12; pop rbp; ret; 
0x0000000000134d67: xor eax, eax; pop rbp; mov byte ptr [rdx], 0; pop r12; pop r13; ret; 
0x000000000009a501: xor eax, eax; pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000026017: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000900b1: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000004129a: xor eax, eax; pop rbp; ret; 
0x0000000000099c91: xor eax, eax; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000047248: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000008d8de: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000935e6: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000042c3f: xor eax, eax; pop rbx; ret; 
0x000000000008e64f: xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000047ce2: xor eax, eax; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000040fc8: xor eax, eax; ret; 
0x00000000000aa64e: xor eax, eax; sub eax, ecx; ret; 
0x0000000000113824: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x113838; ret; 
0x000000000012e9c9: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x12e9e0; ret; 
0x000000000012bfdc: xor eax, eax; test byte ptr [rbx + 0x1c], 0x20; je 0x12bff0; pop rbx; ret; 
0x000000000008cd64: xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x000000000008cd74: xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000ee48c: xor eax, eax; test byte ptr [rdx + 0xc8], 0x40; jne 0xee3bd; ret; 
0x00000000000ee43a: xor eax, eax; test byte ptr [rdx + 0xc8], 0x80; je 0xee3bd; ret; 
0x00000000001573e1: xor eax, eax; test eax, eax; je 0x157410; mov eax, r8d; ret; 
0x0000000000157431: xor eax, eax; test eax, eax; je 0x157460; mov eax, r8d; ret; 
0x00000000001138d6: xor eax, eax; test edx, edx; js 0x1138e4; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x00000000000bd210: xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000196c18: xor eax, eax; test r8d, r8d; jne 0x196b70; add rsp, 0x38; ret; 
0x000000000004745f: xor eax, eax; test rdi, rdi; je 0x4746c; mov dword ptr [rdi], 0; pop rbx; ret; 
0x00000000000908a4: xor eax, eax; test rdx, rdx; jne 0x908b0; ret; 
0x0000000000184620: xor eax, eax; vzeroupper; ret; 
0x0000000000117e28: xor eax, eax; xchg dword ptr [rip + 0xd7a20], eax; cmp eax, 1; jg 0x117e36; ret; 
0x000000000010259c: xor eax, eax; xor ecx, ecx; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bc: xor eax, eax; xor ecx, ecx; push 1; call 0x102520; add rsp, 0x18; ret; 
0x0000000000047d7c: xor eax, ecx; ret; 
0x000000000009f3a6: xor eax, edi; call ptr [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000000b190f: xor eax, edx; and rax, rcx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1b9f: xor eax, edx; and rsi, rax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000014a81c: xor eax, edx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000040fb6: xor eax, edx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x000000000014a815: xor eax, edx; shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000472f7: xor eax, edx; sub eax, edx; ret; 
0x000000000004730a: xor eax, edx; sub rax, rdx; ret; 
0x0000000000120f49: xor eax, r8d; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bc879: xor ebp, dword ptr [rcx]; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x000000000009fa41: xor ebp, ebp; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000007161c: xor ebp, ecx; xchg ebx, eax; ret; 
0x0000000000082c07: xor ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000121f21: xor ebx, ebx; or al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x000000000010e33b: xor ebx, ebx; or eax, 0x64d8f700; mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x00000000001154bb: xor ecx, 0x448bfff7; and al, 0xc; add rsp, 0x18; ret; 
0x000000000010d659: xor ecx, dword ptr [0x28]; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010e0e9: xor ecx, dword ptr [0x28]; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6df: xor ecx, dword ptr [0x28]; jne 0x10e785; add rsp, 0x68; ret; 
0x00000000001135e4: xor ecx, dword ptr [0x28]; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113673: xor ecx, dword ptr [0x28]; jne 0x1136c3; add rsp, 0x18; ret; 
0x000000000011372b: xor ecx, dword ptr [0x28]; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137c9: xor ecx, dword ptr [0x28]; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113d16: xor ecx, dword ptr [0x28]; jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000114ba8: xor ecx, dword ptr [0x28]; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c48: xor ecx, dword ptr [0x28]; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114cfd: xor ecx, dword ptr [0x28]; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dcd: xor ecx, dword ptr [0x28]; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000115a0d: xor ecx, dword ptr [0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115b5d: xor ecx, dword ptr [0x28]; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d81: xor ecx, dword ptr [0x28]; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e50: xor ecx, dword ptr [0x28]; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001198d2: xor ecx, dword ptr [0x28]; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011f2d2: xor ecx, dword ptr [0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cd7: xor ecx, dword ptr [0x28]; jne 0x120ce5; add rsp, 0x18; ret; 
0x000000000012131c: xor ecx, dword ptr [0x28]; jne 0x12136b; add rsp, 0x58; ret; 
0x000000000012d2ed: xor ecx, dword ptr [0x28]; jne 0x12d3cd; leave; ret; 
0x000000000012e072: xor ecx, dword ptr [0x28]; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e34a: xor ecx, dword ptr [0x28]; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f36a: xor ecx, dword ptr [0x28]; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f8da: xor ecx, dword ptr [0x28]; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9ba: xor ecx, dword ptr [0x28]; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa9a: xor ecx, dword ptr [0x28]; jne 0x12faab; add rsp, 0xd8; ret; 
0x0000000000136885: xor ecx, dword ptr [0x28]; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f2: xor ecx, dword ptr [0x28]; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013c90b: xor ecx, dword ptr [0x28]; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013e397: xor ecx, dword ptr [0x28]; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3ea: xor ecx, dword ptr [0x28]; jne 0x13e3f8; add rsp, 0x28; ret; 
0x0000000000153bfe: xor ecx, dword ptr [0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x000000000015fc2d: xor ecx, dword ptr [0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd24: xor ecx, dword ptr [0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fecd: xor ecx, dword ptr [0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff96: xor ecx, dword ptr [0x28]; jne 0x15ffdc; add rsp, 0x38; ret; 
0x0000000000042ee8: xor ecx, dword ptr [0x28]; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043321: xor ecx, dword ptr [0x28]; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bd: xor ecx, dword ptr [0x28]; jne 0x435d5; add rsp, 0x118; ret; 
0x0000000000043640: xor ecx, dword ptr [0x28]; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043ceb: xor ecx, dword ptr [0x28]; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441b: xor ecx, dword ptr [0x28]; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743c: xor ecx, dword ptr [0x28]; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752c: xor ecx, dword ptr [0x28]; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e55: xor ecx, dword ptr [0x28]; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea2: xor ecx, dword ptr [0x28]; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef5: xor ecx, dword ptr [0x28]; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f42: xor ecx, dword ptr [0x28]; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bfe: xor ecx, dword ptr [0x28]; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86e: xor ecx, dword ptr [0x28]; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c71: xor ecx, dword ptr [0x28]; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d46: xor ecx, dword ptr [0x28]; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfd: xor ecx, dword ptr [0x28]; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f91: xor ecx, dword ptr [0x28]; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062051: xor ecx, dword ptr [0x28]; jne 0x62062; add rsp, 0xd8; ret; 
0x000000000006213f: xor ecx, dword ptr [0x28]; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062216: xor ecx, dword ptr [0x28]; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000063169: xor ecx, dword ptr [0x28]; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063244: xor ecx, dword ptr [0x28]; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c1: xor ecx, dword ptr [0x28]; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657d: xor ecx, dword ptr [0x28]; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086676: xor ecx, dword ptr [0x28]; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086746: xor ecx, dword ptr [0x28]; jne 0x86757; add rsp, 0xd8; ret; 
0x00000000000867ff: xor ecx, dword ptr [0x28]; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f8: xor ecx, dword ptr [0x28]; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab89: xor ecx, dword ptr [0x28]; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac64: xor ecx, dword ptr [0x28]; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df408: xor ecx, dword ptr [0x28]; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4188: xor ecx, dword ptr [0x28]; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4228: xor ecx, dword ptr [0x28]; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f8: xor ecx, dword ptr [0x28]; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a8: xor ecx, dword ptr [0x28]; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000006bf50: xor ecx, dword ptr [rax - 0x77]; fiadd dword ptr [rcx + 1]; retf 0x8948; ret; 
0x000000000008d23e: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000b19a9: xor ecx, eax; and rsi, rcx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000102816: xor ecx, ecx; add rsp, 8; mov eax, r9d; ret; 
0x0000000000042178: xor ecx, ecx; addsd xmm0, xmm0; mov dword ptr [rdi], ecx; ret; 
0x00000000001025fd: xor ecx, ecx; call 0x101f30; add rsp, 0x18; ret; 
0x0000000000160d18: xor ecx, ecx; call 0x63a00; test rbx, rbx; jne 0x160d30; pop rbx; ret; 
0x0000000000160d48: xor ecx, ecx; call 0x6bbd0; test rbx, rbx; jne 0x160d60; pop rbx; ret; 
0x00000000000cf156: xor ecx, ecx; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000c6b50: xor ecx, ecx; mov eax, r9d; ret; 
0x0000000000093e72: xor ecx, ecx; movsxd rdx, edx; call 0x93d90; or dword ptr [rbx], 8; pop rbx; ret; 
0x0000000000038ca1: xor ecx, ecx; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x000000000010259e: xor ecx, ecx; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025be: xor ecx, ecx; push 1; call 0x102520; add rsp, 0x18; ret; 
0x000000000011fae9: xor ecx, ecx; rdpkru; lea ecx, [rdi + rdi]; shr eax, cl; and eax, 3; ret; 
0x000000000010299a: xor edi, dword ptr [0x28]; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01ec: xor edi, dword ptr [0x28]; jne 0xd0209; add rsp, 0x28; ret; 
0x00000000000dcfb7: xor edi, edi; call 0xdd090; mov eax, 1; add rsp, 8; ret; 
0x0000000000113f90: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113fa0; ret; 
0x0000000000113fd1: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x113fe0; ret; 
0x00000000000d107c: xor edi, edi; syscall; cmp rax, -0x1000; ja 0xd1090; ret; 
0x000000000010d394: xor edx, dword ptr [0x28]; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d6ab: xor edx, dword ptr [0x28]; jne 0x10d6b9; add rsp, 0x18; ret; 
0x0000000000114ec7: xor edx, dword ptr [0x28]; jne 0x114ed5; add rsp, 0x28; ret; 
0x0000000000115a86: xor edx, dword ptr [0x28]; jne 0x115a94; add rsp, 0x28; ret; 
0x000000000012e168: xor edx, dword ptr [0x28]; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e282: xor edx, dword ptr [0x28]; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012f188: xor edx, dword ptr [0x28]; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a2: xor edx, dword ptr [0x28]; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x00000000001367e8: xor edx, dword ptr [0x28]; jne 0x136819; add rsp, 0x38; ret; 
0x000000000013ec79: xor edx, dword ptr [0x28]; jne 0x13ec87; add rsp, 0x18; ret; 
0x000000000015ccdb: xor edx, dword ptr [0x28]; jne 0x15cd14; add rsp, 0x18; ret; 
0x0000000000161029: xor edx, dword ptr [0x28]; jne 0x161037; add rsp, 0x28; ret; 
0x0000000000054148: xor edx, dword ptr [0x28]; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ecf: xor edx, dword ptr [0x28]; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062de0: xor edx, dword ptr [0x28]; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1032: xor edx, dword ptr [0x28]; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b5: xor edx, dword ptr [0x28]; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf85: xor edx, dword ptr [0x28]; jne 0xdcf93; add rsp, 0x18; ret; 
0x000000000002c95f: xor edx, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000009f7c9: xor edx, dword ptr [rdi - 0x72b80000]; adc eax, 0xd72fc; cmovne rax, rdx; ret; 
0x000000000002c95e: xor edx, dword ptr cs:[rax]; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000d2f69: xor edx, eax; cld; push qword ptr [rcx]; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; ret; 
0x00000000000bc214: xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret; 
0x00000000000349de: xor edx, edx; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000157f1e: xor edx, edx; call 0x8b310; add rsp, 8; not eax; shr eax, 0x1f; ret; 
0x0000000000160d30: xor edx, edx; cmp eax, -1; sete dl; mov dword ptr [rbx], edx; pop rbx; ret; 
0x000000000005ea33: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x000000000018d014: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884c4: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d034: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000001884e4: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018d072: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000188522: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018ceda: xor edx, edx; lea rax, [rdi + rax]; cmp esi, dword ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000018838a: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000121415: xor edx, edx; mov eax, 0x1d; syscall; cmp rax, -0x1000; ja 0x121430; ret; 
0x000000000013f201: xor edx, edx; mov eax, r10d; ret; 
0x0000000000063098: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x00000000000bb9e3: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x000000000012f7b1: xor esi, dword ptr [0x28]; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f811: xor esi, dword ptr [0x28]; jne 0x12f825; add rsp, 0x28; ret; 
0x000000000004374b: xor esi, dword ptr [0x28]; jne 0x4375c; add rsp, 0x98; ret; 
0x000000000002c959: xor esi, dword ptr [rsi]; add al, ch; xor edx, dword ptr cs:[rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000012222b: xor esi, esi; call 0x1220e0; ret; 
0x00000000000a8e2b: xor esi, esi; call 0x22560; add rsp, 8; ret; 
0x0000000000034a0e: xor esi, esi; call 0x34560; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000445bd: xor esi, esi; call 0x48aa0; add rsp, 8; ret; 
0x00000000000e2ec0: xor esi, esi; call 0xdd160; test eax, eax; jne 0xe2ed0; add rsp, 8; ret; 
0x000000000009ef30: xor esi, esi; mov qword ptr [rdi + 8], 0; xor eax, eax; mov qword ptr [rdi], rsi; ret; 
0x0000000000142713: xor esp, esp; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000d0058: xor esp, esp; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0071: xor esp, esp; mov rax, r12; pop r12; ret; 
0x000000000002ffb3: xor esp, esp; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000a0395: xor esp, esp; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x000000000010d449: xor esp, esp; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000034b44: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000986cf: xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000121414: xor r10d, r10d; mov eax, 0x1d; syscall; cmp rax, -0x1000; ja 0x121430; ret; 
0x000000000013f200: xor r10d, r10d; mov eax, r10d; ret; 
0x0000000000063097: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000142712: xor r12d, r12d; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000000d0057: xor r12d, r12d; mov dword ptr fs:[rax], 0x4b; mov rax, r12; pop r12; ret; 
0x00000000000d0070: xor r12d, r12d; mov rax, r12; pop r12; ret; 
0x000000000002ffb2: xor r12d, r12d; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000000a0394: xor r12d, r12d; pop rbp; mov rax, r12; pop r12; pop r13; ret; 
0x000000000010d448: xor r12d, r12d; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000034b43: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000009fa40: xor r13d, r13d; add rsp, 8; mov rax, r13; pop r12; pop r13; ret; 
0x000000000014a814: xor r8, rdx; shl rdx, 4; xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000dd688: xor r8d, r8d; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000122e73: xor r8d, r8d; cmp edi, 9; setbe r8b; mov eax, r8d; ret; 
0x000000000008cd26: xor r8d, r8d; cmp qword ptr [rdi + 0x18], 0; setne r8b; mov eax, r8d; ret; 
0x0000000000157f83: xor r8d, r8d; cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret; 
0x00000000000d4aa7: xor r8d, r8d; mov dword ptr [rdx], eax; mov rax, r8; add rsp, 8; ret; 
0x0000000000099617: xor r8d, r8d; mov dword ptr fs:[rax], 0xc; add rsp, 0x10; mov rax, r8; pop rbp; ret; 
0x0000000000098097: xor r8d, r8d; mov dword ptr fs:[rax], 0xc; mov rax, r8; ret; 
0x0000000000114743: xor r8d, r8d; mov eax, 0x127; syscall; cmp rax, -0x1000; ja 0x1147b8; ret; 
0x0000000000114803: xor r8d, r8d; mov eax, 0x128; syscall; cmp rax, -0x1000; ja 0x114878; ret; 
0x0000000000120746: xor r8d, r8d; mov eax, 0x2c; syscall; cmp rax, -0x1000; ja 0x1207c0; ret; 
0x0000000000120526: xor r8d, r8d; mov eax, 0x2d; syscall; cmp rax, -0x1000; ja 0x1205a0; ret; 
0x00000000000e2ce3: xor r8d, r8d; mov eax, 0xf7; syscall; cmp rax, -0x1000; ja 0xe2d60; ret; 
0x00000000000ee536: xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000157710: xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000046c88: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000046c7d: xor r8d, r8d; mov rax, r8; ret; 
0x000000000009a500: xor r8d, r8d; pop rbp; pop r12; mov rax, r8; pop r13; ret; 
0x0000000000099c90: xor r8d, r8d; pop rbx; pop rbp; mov rax, r8; pop r12; ret; 
0x0000000000047ce1: xor r8d, r8d; punpcklqdq xmm0, xmm1; mov eax, r8d; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000001573e0: xor r8d, r8d; test eax, eax; je 0x157410; mov eax, r8d; ret; 
0x0000000000157430: xor r8d, r8d; test eax, eax; je 0x157460; mov eax, r8d; ret; 
0x000000000010259b: xor r8d, r8d; xor ecx, ecx; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001025bb: xor r8d, r8d; xor ecx, ecx; push 1; call 0x102520; add rsp, 0x18; ret; 
0x0000000000102815: xor r9d, r9d; add rsp, 8; mov eax, r9d; ret; 
0x00000000001025fc: xor r9d, r9d; call 0x101f30; add rsp, 0x18; ret; 
0x00000000000cf155: xor r9d, r9d; cmp eax, ecx; jne 0xcf160; mov eax, r9d; ret; 
0x00000000000c6b4f: xor r9d, r9d; mov eax, r9d; ret; 
0x0000000000038ca0: xor r9d, r9d; pop rbx; pop rbp; mov rax, r9; pop r12; ret; 
0x00000000001025d8: xor r9d, r9d; push 0; call 0x102520; add rsp, 0x18; ret; 
0x00000000001133ea: xor rax, 0x20; mov qword ptr [rsi + 0x48], rax; ret; 
0x00000000001184b0: xor rax, qword ptr [0x28]; jne 0x1184c2; add rsp, 0xd8; ret; 
0x0000000000118589: xor rax, qword ptr [0x28]; jne 0x11859b; add rsp, 0xd8; ret; 
0x000000000011bf45: xor rax, qword ptr [0x28]; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c005: xor rax, qword ptr [0x28]; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e3: xor rax, qword ptr [0x28]; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c44c: xor rax, qword ptr [0x28]; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6b9: xor rax, qword ptr [0x28]; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x0000000000129d67: xor rax, qword ptr [0x28]; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012ba90: xor rax, qword ptr [0x28]; jne 0x12baa2; add rsp, 0xd8; ret; 
0x0000000000153c73: xor rax, qword ptr [0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce3: xor rax, qword ptr [0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d53: xor rax, qword ptr [0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db4: xor rax, qword ptr [0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e18: xor rax, qword ptr [0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e83: xor rax, qword ptr [0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f06: xor rax, qword ptr [0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000015443b: xor rax, qword ptr [0x28]; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155eae: xor rax, qword ptr [0x28]; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000042b8d: xor rax, qword ptr [0x28]; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db5: xor rax, qword ptr [0x28]; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e02: xor rax, qword ptr [0x28]; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578ba: xor rax, qword ptr [0x28]; jne 0x57945; leave; ret; 
0x000000000008dbd0: xor rax, qword ptr [0x28]; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a43: xor rax, qword ptr [0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000001184af: xor rax, qword ptr fs:[0x28]; jne 0x1184c2; add rsp, 0xd8; ret; 
0x0000000000118588: xor rax, qword ptr fs:[0x28]; jne 0x11859b; add rsp, 0xd8; ret; 
0x000000000011bf44: xor rax, qword ptr fs:[0x28]; jne 0x11bf57; add rsp, 0xd8; ret; 
0x000000000011c004: xor rax, qword ptr fs:[0x28]; jne 0x11c017; add rsp, 0xd8; ret; 
0x000000000011c1e2: xor rax, qword ptr fs:[0x28]; jne 0x11c1f5; add rsp, 0x418; ret; 
0x000000000011c44b: xor rax, qword ptr fs:[0x28]; jne 0x11c45e; add rsp, 0xd8; ret; 
0x000000000011c6b8: xor rax, qword ptr fs:[0x28]; jne 0x11c6cb; add rsp, 0xd8; ret; 
0x0000000000129d66: xor rax, qword ptr fs:[0x28]; jne 0x129d79; add rsp, 0xd8; ret; 
0x000000000012ba8f: xor rax, qword ptr fs:[0x28]; jne 0x12baa2; add rsp, 0xd8; ret; 
0x0000000000153c72: xor rax, qword ptr fs:[0x28]; jne 0x153c82; add rsp, 0x78; ret; 
0x0000000000153ce2: xor rax, qword ptr fs:[0x28]; jne 0x153cf2; add rsp, 0x78; ret; 
0x0000000000153d52: xor rax, qword ptr fs:[0x28]; jne 0x153d62; add rsp, 0x78; ret; 
0x0000000000153db3: xor rax, qword ptr fs:[0x28]; jne 0x153dc3; add rsp, 0x78; ret; 
0x0000000000153e17: xor rax, qword ptr fs:[0x28]; jne 0x153e27; add rsp, 0x78; ret; 
0x0000000000153e82: xor rax, qword ptr fs:[0x28]; jne 0x153e92; add rsp, 0x78; ret; 
0x0000000000153f05: xor rax, qword ptr fs:[0x28]; jne 0x153f15; add rsp, 0x78; ret; 
0x000000000015443a: xor rax, qword ptr fs:[0x28]; jne 0x154468; add rsp, 0x28; ret; 
0x0000000000155ead: xor rax, qword ptr fs:[0x28]; jne 0x155ebd; add rsp, 0x48; ret; 
0x0000000000042b8c: xor rax, qword ptr fs:[0x28]; jne 0x42b9c; add rsp, 0x18; ret; 
0x0000000000047db4: xor rax, qword ptr fs:[0x28]; jne 0x47dc4; add rsp, 0x18; ret; 
0x0000000000047e01: xor rax, qword ptr fs:[0x28]; jne 0x47e11; add rsp, 0x18; ret; 
0x00000000000578b9: xor rax, qword ptr fs:[0x28]; jne 0x57945; leave; ret; 
0x000000000008dbcf: xor rax, qword ptr fs:[0x28]; jne 0x8dbeb; add rsp, 0x48; ret; 
0x0000000000023a42: xor rax, qword ptr fs:[0x30]; rol rax, 0x11; mov qword ptr [rip + 0x1cd8d2], rax; ret; 
0x00000000000b1d69: xor rax, rax; ret; 
0x00000000000b190e: xor rax, rdx; and rax, rcx; je 0xb1ae0; bsr rax, rax; add rax, rdi; ret; 
0x00000000000b1b9e: xor rax, rdx; and rsi, rax; je 0xb1ae0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000014a81b: xor rax, rdx; mov qword ptr [rdi], r8; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000040fb5: xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x40f98; ret; 
0x0000000000047309: xor rax, rdx; sub rax, rdx; ret; 
0x000000000010d658: xor rcx, qword ptr [0x28]; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010e0e8: xor rcx, qword ptr [0x28]; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6de: xor rcx, qword ptr [0x28]; jne 0x10e785; add rsp, 0x68; ret; 
0x00000000001135e3: xor rcx, qword ptr [0x28]; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113672: xor rcx, qword ptr [0x28]; jne 0x1136c3; add rsp, 0x18; ret; 
0x000000000011372a: xor rcx, qword ptr [0x28]; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137c8: xor rcx, qword ptr [0x28]; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113d15: xor rcx, qword ptr [0x28]; jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000114ba7: xor rcx, qword ptr [0x28]; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c47: xor rcx, qword ptr [0x28]; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114cfc: xor rcx, qword ptr [0x28]; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dcc: xor rcx, qword ptr [0x28]; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000115a0c: xor rcx, qword ptr [0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115b5c: xor rcx, qword ptr [0x28]; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d80: xor rcx, qword ptr [0x28]; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e4f: xor rcx, qword ptr [0x28]; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001198d1: xor rcx, qword ptr [0x28]; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011f2d1: xor rcx, qword ptr [0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cd6: xor rcx, qword ptr [0x28]; jne 0x120ce5; add rsp, 0x18; ret; 
0x000000000012131b: xor rcx, qword ptr [0x28]; jne 0x12136b; add rsp, 0x58; ret; 
0x000000000012d2ec: xor rcx, qword ptr [0x28]; jne 0x12d3cd; leave; ret; 
0x000000000012e071: xor rcx, qword ptr [0x28]; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e349: xor rcx, qword ptr [0x28]; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f369: xor rcx, qword ptr [0x28]; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f8d9: xor rcx, qword ptr [0x28]; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9b9: xor rcx, qword ptr [0x28]; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa99: xor rcx, qword ptr [0x28]; jne 0x12faab; add rsp, 0xd8; ret; 
0x0000000000136884: xor rcx, qword ptr [0x28]; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f1: xor rcx, qword ptr [0x28]; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013c90a: xor rcx, qword ptr [0x28]; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013e396: xor rcx, qword ptr [0x28]; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3e9: xor rcx, qword ptr [0x28]; jne 0x13e3f8; add rsp, 0x28; ret; 
0x0000000000153bfd: xor rcx, qword ptr [0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x000000000015fc2c: xor rcx, qword ptr [0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd23: xor rcx, qword ptr [0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fecc: xor rcx, qword ptr [0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff95: xor rcx, qword ptr [0x28]; jne 0x15ffdc; add rsp, 0x38; ret; 
0x0000000000042ee7: xor rcx, qword ptr [0x28]; jne 0x42ef9; add rsp, 0x148; ret; 
0x0000000000043320: xor rcx, qword ptr [0x28]; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bc: xor rcx, qword ptr [0x28]; jne 0x435d5; add rsp, 0x118; ret; 
0x000000000004363f: xor rcx, qword ptr [0x28]; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043cea: xor rcx, qword ptr [0x28]; jne 0x43cfc; add rsp, 0x148; ret; 
0x000000000004441a: xor rcx, qword ptr [0x28]; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743b: xor rcx, qword ptr [0x28]; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752b: xor rcx, qword ptr [0x28]; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e54: xor rcx, qword ptr [0x28]; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea1: xor rcx, qword ptr [0x28]; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef4: xor rcx, qword ptr [0x28]; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f41: xor rcx, qword ptr [0x28]; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bfd: xor rcx, qword ptr [0x28]; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86d: xor rcx, qword ptr [0x28]; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c70: xor rcx, qword ptr [0x28]; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d45: xor rcx, qword ptr [0x28]; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfc: xor rcx, qword ptr [0x28]; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f90: xor rcx, qword ptr [0x28]; jne 0x61fa2; add rsp, 0xd8; ret; 
0x0000000000062050: xor rcx, qword ptr [0x28]; jne 0x62062; add rsp, 0xd8; ret; 
0x000000000006213e: xor rcx, qword ptr [0x28]; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062215: xor rcx, qword ptr [0x28]; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000063168: xor rcx, qword ptr [0x28]; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063243: xor rcx, qword ptr [0x28]; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864c0: xor rcx, qword ptr [0x28]; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657c: xor rcx, qword ptr [0x28]; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086675: xor rcx, qword ptr [0x28]; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086745: xor rcx, qword ptr [0x28]; jne 0x86757; add rsp, 0xd8; ret; 
0x00000000000867fe: xor rcx, qword ptr [0x28]; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f7: xor rcx, qword ptr [0x28]; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab88: xor rcx, qword ptr [0x28]; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac63: xor rcx, qword ptr [0x28]; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df407: xor rcx, qword ptr [0x28]; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4187: xor rcx, qword ptr [0x28]; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4227: xor rcx, qword ptr [0x28]; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f7: xor rcx, qword ptr [0x28]; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a7: xor rcx, qword ptr [0x28]; jne 0xe4613; add rsp, 0x38; ret; 
0x000000000010d657: xor rcx, qword ptr fs:[0x28]; jne 0x10d667; add rsp, 0x18; ret; 
0x000000000010e0e7: xor rcx, qword ptr fs:[0x28]; jne 0x10e1a9; add rsp, 0x78; ret; 
0x000000000010e6dd: xor rcx, qword ptr fs:[0x28]; jne 0x10e785; add rsp, 0x68; ret; 
0x00000000001135e2: xor rcx, qword ptr fs:[0x28]; jne 0x113633; add rsp, 0x68; ret; 
0x0000000000113671: xor rcx, qword ptr fs:[0x28]; jne 0x1136c3; add rsp, 0x18; ret; 
0x0000000000113729: xor rcx, qword ptr fs:[0x28]; jne 0x11377b; add rsp, 0x58; ret; 
0x00000000001137c7: xor rcx, qword ptr fs:[0x28]; jne 0x11381b; add rsp, 0x58; ret; 
0x0000000000113d14: xor rcx, qword ptr fs:[0x28]; jne 0x113d2b; add rsp, 0x18; ret; 
0x0000000000114ba6: xor rcx, qword ptr fs:[0x28]; jne 0x114c0b; add rsp, 0x38; ret; 
0x0000000000114c46: xor rcx, qword ptr fs:[0x28]; jne 0x114cab; add rsp, 0x38; ret; 
0x0000000000114cfb: xor rcx, qword ptr fs:[0x28]; jne 0x114d7b; add rsp, 0x38; ret; 
0x0000000000114dcb: xor rcx, qword ptr fs:[0x28]; jne 0x114e4b; add rsp, 0x38; ret; 
0x0000000000115a0b: xor rcx, qword ptr fs:[0x28]; jne 0x115a27; add rsp, 0x58; ret; 
0x0000000000115b5b: xor rcx, qword ptr fs:[0x28]; jne 0x115b9d; add rsp, 0x68; ret; 
0x0000000000116d7f: xor rcx, qword ptr fs:[0x28]; jne 0x116dc5; add rsp, 0x38; ret; 
0x0000000000116e4e: xor rcx, qword ptr fs:[0x28]; jne 0x116e95; add rsp, 0x38; ret; 
0x00000000001198d0: xor rcx, qword ptr fs:[0x28]; jne 0x1198e0; add rsp, 0x18; ret; 
0x000000000011f2d0: xor rcx, qword ptr fs:[0x28]; jne 0x11f2f3; add rsp, 0x68; ret; 
0x0000000000120cd5: xor rcx, qword ptr fs:[0x28]; jne 0x120ce5; add rsp, 0x18; ret; 
0x000000000012131a: xor rcx, qword ptr fs:[0x28]; jne 0x12136b; add rsp, 0x58; ret; 
0x000000000012d2eb: xor rcx, qword ptr fs:[0x28]; jne 0x12d3cd; leave; ret; 
0x000000000012e070: xor rcx, qword ptr fs:[0x28]; jne 0x12e088; add rsp, 0xd8; ret; 
0x000000000012e348: xor rcx, qword ptr fs:[0x28]; jne 0x12e35b; add rsp, 0xd8; ret; 
0x000000000012f368: xor rcx, qword ptr fs:[0x28]; jne 0x12f37b; add rsp, 0xd8; ret; 
0x000000000012f8d8: xor rcx, qword ptr fs:[0x28]; jne 0x12f8eb; add rsp, 0xd8; ret; 
0x000000000012f9b8: xor rcx, qword ptr fs:[0x28]; jne 0x12f9cb; add rsp, 0xd8; ret; 
0x000000000012fa98: xor rcx, qword ptr fs:[0x28]; jne 0x12faab; add rsp, 0xd8; ret; 
0x0000000000136883: xor rcx, qword ptr fs:[0x28]; jne 0x136893; add rsp, 0x38; ret; 
0x00000000001368f0: xor rcx, qword ptr fs:[0x28]; jne 0x136900; add rsp, 0x28; ret; 
0x000000000013c909: xor rcx, qword ptr fs:[0x28]; jne 0x13c920; add rsp, 0x18; ret; 
0x000000000013e395: xor rcx, qword ptr fs:[0x28]; jne 0x13e3a5; add rsp, 0x18; ret; 
0x000000000013e3e8: xor rcx, qword ptr fs:[0x28]; jne 0x13e3f8; add rsp, 0x28; ret; 
0x0000000000153bfc: xor rcx, qword ptr fs:[0x28]; jne 0x153c0c; add rsp, 0x78; ret; 
0x000000000015fc2b: xor rcx, qword ptr fs:[0x28]; jne 0x15fc6e; add rsp, 0x58; ret; 
0x000000000015fd22: xor rcx, qword ptr fs:[0x28]; jne 0x15fd74; add rsp, 0x68; ret; 
0x000000000015fecb: xor rcx, qword ptr fs:[0x28]; jne 0x15ff24; add rsp, 0x68; ret; 
0x000000000015ff94: xor rcx, qword ptr fs:[0x28]; jne 0x15ffdc; add rsp, 0x38; ret; 
0x0000000000042ee6: xor rcx, qword ptr fs:[0x28]; jne 0x42ef9; add rsp, 0x148; ret; 
0x000000000004331f: xor rcx, qword ptr fs:[0x28]; jne 0x433c6; add rsp, 0x98; ret; 
0x00000000000435bb: xor rcx, qword ptr fs:[0x28]; jne 0x435d5; add rsp, 0x118; ret; 
0x000000000004363e: xor rcx, qword ptr fs:[0x28]; jne 0x43658; add rsp, 0x118; ret; 
0x0000000000043ce9: xor rcx, qword ptr fs:[0x28]; jne 0x43cfc; add rsp, 0x148; ret; 
0x0000000000044419: xor rcx, qword ptr fs:[0x28]; jne 0x4442c; add rsp, 0xa8; ret; 
0x000000000004743a: xor rcx, qword ptr fs:[0x28]; jne 0x4744a; add rsp, 0x28; ret; 
0x000000000004752a: xor rcx, qword ptr fs:[0x28]; jne 0x4753a; add rsp, 0x28; ret; 
0x0000000000047e53: xor rcx, qword ptr fs:[0x28]; jne 0x47e63; add rsp, 0x18; ret; 
0x0000000000047ea0: xor rcx, qword ptr fs:[0x28]; jne 0x47eb0; add rsp, 0x18; ret; 
0x0000000000047ef3: xor rcx, qword ptr fs:[0x28]; jne 0x47f03; add rsp, 0x18; ret; 
0x0000000000047f40: xor rcx, qword ptr fs:[0x28]; jne 0x47f50; add rsp, 0x18; ret; 
0x0000000000052bfc: xor rcx, qword ptr fs:[0x28]; jne 0x52c0f; add rsp, 0xd8; ret; 
0x000000000005b86c: xor rcx, qword ptr fs:[0x28]; jne 0x5b895; add rsp, 0x38; ret; 
0x0000000000061c6f: xor rcx, qword ptr fs:[0x28]; jne 0x61c82; add rsp, 0xd8; ret; 
0x0000000000061d44: xor rcx, qword ptr fs:[0x28]; jne 0x61d57; add rsp, 0xd8; ret; 
0x0000000000061dfb: xor rcx, qword ptr fs:[0x28]; jne 0x61e0e; add rsp, 0xd8; ret; 
0x0000000000061f8f: xor rcx, qword ptr fs:[0x28]; jne 0x61fa2; add rsp, 0xd8; ret; 
0x000000000006204f: xor rcx, qword ptr fs:[0x28]; jne 0x62062; add rsp, 0xd8; ret; 
0x000000000006213d: xor rcx, qword ptr fs:[0x28]; jne 0x62150; add rsp, 0xd8; ret; 
0x0000000000062214: xor rcx, qword ptr fs:[0x28]; jne 0x62227; add rsp, 0xd8; ret; 
0x0000000000063167: xor rcx, qword ptr fs:[0x28]; jne 0x6317a; add rsp, 0xd8; ret; 
0x0000000000063242: xor rcx, qword ptr fs:[0x28]; jne 0x63255; add rsp, 0xd8; ret; 
0x00000000000864bf: xor rcx, qword ptr fs:[0x28]; jne 0x864d2; add rsp, 0xd8; ret; 
0x000000000008657b: xor rcx, qword ptr fs:[0x28]; jne 0x8658e; add rsp, 0xd8; ret; 
0x0000000000086674: xor rcx, qword ptr fs:[0x28]; jne 0x86687; add rsp, 0xd8; ret; 
0x0000000000086744: xor rcx, qword ptr fs:[0x28]; jne 0x86757; add rsp, 0xd8; ret; 
0x00000000000867fd: xor rcx, qword ptr fs:[0x28]; jne 0x86810; add rsp, 0xd8; ret; 
0x000000000009d5f6: xor rcx, qword ptr fs:[0x28]; jne 0x9d6b2; add rsp, 0x18; ret; 
0x00000000000cab87: xor rcx, qword ptr fs:[0x28]; jne 0xcab9a; add rsp, 0xd8; ret; 
0x00000000000cac62: xor rcx, qword ptr fs:[0x28]; jne 0xcac75; add rsp, 0xd8; ret; 
0x00000000000df406: xor rcx, qword ptr fs:[0x28]; jne 0xdf463; add rsp, 0x38; ret; 
0x00000000000e4186: xor rcx, qword ptr fs:[0x28]; jne 0xe41e3; add rsp, 0x38; ret; 
0x00000000000e4226: xor rcx, qword ptr fs:[0x28]; jne 0xe4283; add rsp, 0x38; ret; 
0x00000000000e44f6: xor rcx, qword ptr fs:[0x28]; jne 0xe4563; add rsp, 0x38; ret; 
0x00000000000e45a6: xor rcx, qword ptr fs:[0x28]; jne 0xe4613; add rsp, 0x38; ret; 
0x00000000000b19a8: xor rcx, rax; and rsi, rcx; je 0xb1ae0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000102999: xor rdi, qword ptr [0x28]; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01eb: xor rdi, qword ptr [0x28]; jne 0xd0209; add rsp, 0x28; ret; 
0x0000000000102998: xor rdi, qword ptr fs:[0x28]; jne 0x1029f6; add rsp, 0x38; ret; 
0x00000000000d01ea: xor rdi, qword ptr fs:[0x28]; jne 0xd0209; add rsp, 0x28; ret; 
0x000000000010d393: xor rdx, qword ptr [0x28]; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d6aa: xor rdx, qword ptr [0x28]; jne 0x10d6b9; add rsp, 0x18; ret; 
0x0000000000114ec6: xor rdx, qword ptr [0x28]; jne 0x114ed5; add rsp, 0x28; ret; 
0x0000000000115a85: xor rdx, qword ptr [0x28]; jne 0x115a94; add rsp, 0x28; ret; 
0x000000000012e167: xor rdx, qword ptr [0x28]; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e281: xor rdx, qword ptr [0x28]; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012f187: xor rdx, qword ptr [0x28]; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a1: xor rdx, qword ptr [0x28]; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x00000000001367e7: xor rdx, qword ptr [0x28]; jne 0x136819; add rsp, 0x38; ret; 
0x000000000013ec78: xor rdx, qword ptr [0x28]; jne 0x13ec87; add rsp, 0x18; ret; 
0x000000000015ccda: xor rdx, qword ptr [0x28]; jne 0x15cd14; add rsp, 0x18; ret; 
0x0000000000161028: xor rdx, qword ptr [0x28]; jne 0x161037; add rsp, 0x28; ret; 
0x0000000000054147: xor rdx, qword ptr [0x28]; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ece: xor rdx, qword ptr [0x28]; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062ddf: xor rdx, qword ptr [0x28]; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1031: xor rdx, qword ptr [0x28]; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b4: xor rdx, qword ptr [0x28]; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf84: xor rdx, qword ptr [0x28]; jne 0xdcf93; add rsp, 0x18; ret; 
0x000000000010d392: xor rdx, qword ptr fs:[0x28]; jne 0x10d3b1; add rsp, 0x28; ret; 
0x000000000010d6a9: xor rdx, qword ptr fs:[0x28]; jne 0x10d6b9; add rsp, 0x18; ret; 
0x0000000000114ec5: xor rdx, qword ptr fs:[0x28]; jne 0x114ed5; add rsp, 0x28; ret; 
0x0000000000115a84: xor rdx, qword ptr fs:[0x28]; jne 0x115a94; add rsp, 0x28; ret; 
0x000000000012e166: xor rdx, qword ptr fs:[0x28]; jne 0x12e185; add rsp, 0xd8; ret; 
0x000000000012e280: xor rdx, qword ptr fs:[0x28]; jne 0x12e293; add rsp, 0xd8; ret; 
0x000000000012f186: xor rdx, qword ptr fs:[0x28]; jne 0x12f1a5; add rsp, 0xd8; ret; 
0x000000000012f2a0: xor rdx, qword ptr fs:[0x28]; jne 0x12f2b3; add rsp, 0xd8; ret; 
0x00000000001367e6: xor rdx, qword ptr fs:[0x28]; jne 0x136819; add rsp, 0x38; ret; 
0x000000000013ec77: xor rdx, qword ptr fs:[0x28]; jne 0x13ec87; add rsp, 0x18; ret; 
0x000000000015ccd9: xor rdx, qword ptr fs:[0x28]; jne 0x15cd14; add rsp, 0x18; ret; 
0x0000000000161027: xor rdx, qword ptr fs:[0x28]; jne 0x161037; add rsp, 0x28; ret; 
0x0000000000054146: xor rdx, qword ptr fs:[0x28]; jne 0x54159; add rsp, 0xd8; ret; 
0x0000000000061ecd: xor rdx, qword ptr fs:[0x28]; jne 0x61ee0; add rsp, 0xd8; ret; 
0x0000000000062dde: xor rdx, qword ptr fs:[0x28]; jne 0x62df7; add rsp, 0x18; ret; 
0x00000000000d1030: xor rdx, qword ptr fs:[0x28]; jne 0xd1064; add rsp, 0x28; ret; 
0x00000000000da6b3: xor rdx, qword ptr fs:[0x28]; jne 0xda6c3; add rsp, 0x18; ret; 
0x00000000000dcf83: xor rdx, qword ptr fs:[0x28]; jne 0xdcf93; add rsp, 0x18; ret; 
0x000000000012f7b0: xor rsi, qword ptr [0x28]; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f810: xor rsi, qword ptr [0x28]; jne 0x12f825; add rsp, 0x28; ret; 
0x000000000004374a: xor rsi, qword ptr [0x28]; jne 0x4375c; add rsp, 0x98; ret; 
0x000000000012f7af: xor rsi, qword ptr fs:[0x28]; jne 0x12f7c5; add rsp, 0x28; ret; 
0x000000000012f80f: xor rsi, qword ptr fs:[0x28]; jne 0x12f825; add rsp, 0x28; ret; 
0x0000000000043749: xor rsi, qword ptr fs:[0x28]; jne 0x4375c; add rsp, 0x98; ret; 
0x00000000000a0799: xrelease xchg byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xda6bc; cmovne rax, rdx; ret; 
